{"0": {"problem_id": 2361, "answer": "from collections import deque\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [0]*n\n        for i in range(n):\n            a[i] = 1\n            for j in range(i,n):\n                if a[j]%2!=0:\n                    a[j] = a[j]/2\n                else:\n                    a[j] = a[j]/2+1\n        print(' '.join(map(str,a)))\ndef __starting_point():\n    main()\n__starting_point()"}, "1": {"problem_id": 2362, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    for _ in range(n):\n        x, y, f = list(map(int, input().split()))\n        l[x] += f\n        l[y] += f\n        print(*l)\n    answer = 0\n    for i in range(n):\n        answer += solve()\n    print(answer)\n\nsolve()"}, "2": {"problem_id": 2363, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(min(a[1], b[1]))\n"}, "3": {"problem_id": 2364, "answer": "from sys import stdin, setrecursionlimit\nfrom heapq import heappush, heappop, heapify\nfrom collections import defaultdict, deque\nfrom operator import itemgetter\nfrom functools import reduce\ndef LI(): return list(map(int, input().split()))\ndef LI_(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LS(): return list(map(str, input().split()))\ndef SRL(s): return [s[i] for i in range(s.count(', ') + 1)]\ndef LIR(s): return [LI_() for i in range(s.count(', ') + 1)]\ndef SR(s): return [LI_() for i in range(s.count(', ') + 1)]\ndef SR_(): return input()\ndef LF_(s): return input()\ndef LS_(s): return input()\ndef SRL_(s): return [LS_(i) for i in range(s.count(', ') + 1)]\n\nfor _ in range(int(input())):\n    n, m, a, c = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    graph = [[] for i in range(m)]\n    for i in range(n):\n        p[i] = a\n        graph[a].append(i)\n    q = [set() for i in range(m)]\n    q.sort(key = lambda x: x[0])\n    q.sort(key = lambda x: x[1])\n    d = dict()\n    for i in range(m):\n        d[p[i]].add(i)\n    q.sort(key = lambda x: x[0])\n    d[c].add(c)\n    print(len(q))\n    for i in range(m):\n        if q[i] == set():\n            d[c].discard(q[i])\n        else:\n            d[c].add(i)\n    print(len(d[c]))\n"}, "4": {"problem_id": 2365, "answer": "from collections import deque\ndef lca(n,l,r,d):\n    if n==1:\n        return [0]*r\n    elif n==2:\n        return [0]*d\n    else:\n        a,b,c,d=[],[]\n        for i in range(n-2,0,-1):\n            a.append(lca(i,l,r,d))\n            b.append(lca(i,l,r,d))\n            c.append(lca(i,l,r,d))\n            d.append(lca(i,l,r,d))\n        return a,b,c,d\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    d = list(map(int,input().split()))\n    ans = lca(n,l,d)\n    print(*ans,sep=\"\\n\")"}, "5": {"problem_id": 2366, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(d[0])"}, "6": {"problem_id": 2367, "answer": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    \n    if len(s) == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        \n        \n        \n"}, "7": {"problem_id": 2368, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += min(a[i]-b[i]*a[i]),n-i\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    n = int(input())\n    candies = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        if candies[i] == 0:\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "9": {"problem_id": 2370, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(max(a[0], a[1]))\n"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(len(a) - b.count(a))"}, "11": {"problem_id": 2372, "answer": "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print(min(a) + n)"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]].append(i)\n        a[i] = max(a[i], d[a[i]][-1])\n    print(solve())\n    \n    for i in range(1, n):\n        solve()\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      "}, "13": {"problem_id": 2374, "answer": "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    pipe = [int(x) for x in input().split()]\n    water = [int(x) for x in input().split()]\n    print('YES' if water[0] =='' else 'NO')"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = [0]*n\n    for i in range(n):\n        if a[i] == b[i]:\n            ans[i] = max(ans[i], b[i])\n        else:\n            ans[i] = max(ans[i], a[i])\n    print(ans[3])"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    edges = [[] for _ in range(n)]\n    for _ in range(n-1):\n        x, y = list(map(int, input().split()))\n        edges[x].append(y)\n        edges[y].append(x)\n        edges[x].append(y)\n        edges[y].append(x)\n    print(max(edges))\n"}, "16": {"problem_id": 2377, "answer": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nimport random\nimport functools\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        l = len(a)\n        ans = 0\n        for i in range(n):\n            if a[i] > l:\n                ans += 1\n            elif a[i] == l:\n                ans += 1\n        print(ans)\n\ndef __starting_point():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        l = len(a)\n        ans = 0\n        for i in range(n):\n            if a[i] > l:\n                ans += 1\n        print(ans)\n\n__starting_point()"}, "17": {"problem_id": 2378, "answer": "from collections import deque\nfor _ in range(int(input())):\n    s = input()\n    l, r, u, d = s.split('L', 2)\n    if len(l) == 1:\n        print(0)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(0)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(0)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(0)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(2)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(2)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(2)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(2)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(l) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2)\n        continue\n    if len(u) == 1:\n        print(2)\n        continue\n    if len(d) == 1:\n        print(2)\n        continue\n    if len(r) == 1:\n        print(2"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = len(s)\n    k = 0\n    for i in range(n):\n        if s[i] == '0':\n            k += 1\n        else:\n            k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k += 1\n        l -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n            print(0)\n        elif k == 1:\n            print(1)\n        else:\n            print(k)\n            k = 0\n            break\n        k -= 1\n        if k == 0:\n "}, "19": {"problem_id": 2380, "answer": "for _ in range(int(input())):\n    n,k = list(map(int,input().split()))\n    s = input()\n    if k==1:\n        print(0)\n        continue\n    d = {}\n    for i in range(n):\n        if s[i]=='1':\n            d[i] = 1\n        else:\n            d[i] = d.get(i,0)+1\n            if d[i]==0:\n                d[i] = 1\n            elif d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==0:\n                d[i] = d.get(i,0)+1\n            elif d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n                d[i] = d.get(i,0)+1\n            else:\n                d[i] = d.get(i,0)+1\n            if d[i]==1:\n "}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    r = len(s) - 1\n    ans = 0\n    for i in range(l):\n        if s[i] == 'R':\n            ans += 1\n        elif s[i] == 'L':\n            ans += 1\n    print(ans)\n"}, "21": {"problem_id": 2382, "answer": "from collections import deque\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, m = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        s = set(a)\n        for i in range(n):\n            if a[i]!= s:\n                print('-1')\n                break\n        else:\n            print('-1')\n            s.add(a[i])\n            s.add(a[i] + 1)\n            s.add(a[i] - 1)\n            s.add(a[i] - 2)\n            s.add(a[i] + 1)\n            s.add(a[i] + 2)\n            s.add(a[i] + 1)\n            s.add(a[i] + 2)\n            s.add(a[i] + 1)\n            s.add(a[i] + 2)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n            s.add(a[i] + 1)\n          "}, "22": {"problem_id": 2383, "answer": "for _ in range(int(input())):\n    a,b = map(int,input().split())\n    print(min(a,b))"}, "23": {"problem_id": 2384, "answer": "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort(reverse=True)\n    print(n-1)"}, "24": {"problem_id": 2385, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nfor _ in range(int(input())):\n    n,m = list(map(int,input().split()))\n    l = []\n    for i in range(n):\n        l.append(input())\n    l.sort(key=lambda x:x[0])\n    k = 0\n    for i in range(n):\n        k += 1\n        if l[i][0]=='R':\n            k += 1\n        else:\n            k = 0\n    print(k)\n"}, "25": {"problem_id": 2386, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a)"}, "26": {"problem_id": 2387, "answer": "import math\ndef recur(n):\n    if n == 0:\n        return 0\n    else:\n        return math.floor(n/math.log10(10))\n\nt = int(input())\nfor _ in range(t):\n    s = int(input())\n    n = int(input())\n    print(recur(s))\n"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = list(map(int, input().split()))\n    g = [[] for i in range(n)]\n    for i in range(m):\n        g[i].append(i)\n        g[i].append(0)\n    \n    adj = [[] for i in range(n)]\n    for i in range(n):\n        adj[i].append(g[i][-1])\n    \n    ans = [0]*n\n    for i in range(n):\n        if g[i][-1] == 0:\n            ans[i] = 1\n        elif g[i][-1] == 1:\n            ans[i] = 2\n        else:\n            ans[i] = 3\n            \n    print(*ans)\n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    l = len(s)\n    for i in range(k):\n        if s[i] == 'R':\n            l -= 1\n        else:\n            l -= 1\n    print(l)"}, "29": {"problem_id": 2390, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n            \n    ans = 0\n    for i in d:\n        if d[i] > 1:\n            ans += d[i]\n        elif d[i] == 1:\n            ans += d[i]\n        else:\n            ans += d[i]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(*a)"}, "31": {"problem_id": 2392, "answer": "from sys import stdin,stdout\nfrom itertools import chain,permutations,accumulate,groupby,deque,recover,enumerate\nfrom collections import defaultdict,Counter,OrderedDict,defaultdict\nfrom heapq import *\nfrom bisect import *\nfrom bisect import bisect_left as bl,bisect_right as br,bisect\nfrom bisect import bisect_right as br,bisect_left as br,bisect\nfrom numpy import*\nfrom scipy.signal import*\nfrom copy import*\nfrom decimal import*\nfrom functools import reduce,cmp_to_key\nfrom heapq import*\nfrom math import*\nfrom collections import*\nfrom itertools import permutations,combinations,groupby,deque,heapq,insort,isort,i2d,int,numpy,sys,tuple,collections,fractions,heapq,math,random,pow,time,str,inf,heappopts,sparse,sys,text,tturtle,sys,queue,racket,decimal,decreasing,mod,mod_or_min,reduce,reduce_to_key,str,strt,tturtle,sys,template,tuple,time,vary,timedelta,tuple,sys,xor,yor,xor_or_or_or_or_or_or_,*\nfrom time import*\nfrom time import perf_counter,get_time,lambda:int(input())\nfrom time import perf_counter,get_time,lambda:int(input())\nsys.setrecursionlimit(1000000)\nINF = float('inf')\nmod = 10**9+7\ndef LI():return int(input())\ndef LI_():return list(map(int,input().split()))\ndef LF():return list(zip(map(int,input().split())))\ndef ISIG():return int(input())\ndef LIR(n):return [int(i) for i in input().split()]\ndef SR(n):return [str(i) for i in input().split()]\ndef SR_():return [str(i) for i in input().split()]\ndef LF_():return [str(i) for i in input().split()]\ndef LTOS(n,m):return sorted(LI_(),key=lambda x:x[1])[m]\ndef LTIMG(n,m):return sorted(LI_(),key=lambda x:x[1])[m]\ndef LTOS2(n,m):return sorted(LI_2(),key=lambda x:x[1])[m]\ndef LF2(n,m):return [str(i) for i in input().split()]\ndef LTOS3(n,m):return sorted(LI_3(),key=lambda x:x[1])[m]\ndef LF3(n,m):return [str(i) for i in input().split()]\ndef LTIMG2(n,m):return sorted(LI_2(n),key=lambda x:x[1])[m]\ndef LTIMG3(n,m):return sorted(LI_3(n),key=lambda x:x[1])[m]\ndef LF3(n,m):return [str(i) for i in input().split()]\ndef LTIME(n,m,l):return LT(n,m,l)\ndef DEC(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC(n)],[f'{n}' for f' in DEC(n)])\ndef DEC2(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC2(n)])\ndef DEC3(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC3(n)])\ndef DEC4(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC4(n)])\ndef DEC5(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC5(n)])\ndef DEC6(n):return reduce(cmp_to_key(1),[f'{n}' for f' in DEC6(n)])\ndef DEC7(n):return reduce"}, "32": {"problem_id": 2393, "answer": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(\"YES\")\n        print(*map(int,input().split()))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "33": {"problem_id": 2394, "answer": "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(min(s.count('(') + n // 2) for n in s))"}, "34": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    print(*x, sep=\"\\n\")\n"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(n):\n        if s[i] == 'a':\n            c += 1\n        else:\n            c = 0\n    print(c)\n"}, "36": {"problem_id": 2397, "answer": "from collections import defaultdict, deque\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    print(' '.join(map(str, a)))"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            ans += 1\n        else:\n            ans += 1\n    print(ans)\n"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, direction = list(map(int, input().split()))\n        graph[x].append(y)\n        graph[y].append(x)\n        direction.extend([x]*n for _ in range(n))\n        graph[x].append(y)\n        graph[y].append(x)\n        if len(graph[x]) == 0:\n            continue\n        if graph[x].count(0) == 1:\n            print(\"NO\")\n            return\n        for i in range(n):\n            if graph[x][i] == 0:\n                graph[x].remove(i)\n                continue\n            else:\n                graph[x].append(i)\n                continue\n        if len(graph[x]) == 0:\n            print(\"NO\")\n            return\n        for i in range(n):\n            if graph[x][i] == 0:\n                graph[x].remove(i)\n                continue\n            else:\n                graph[x].append(i)\n                continue\n        if len(graph[x]) == 0:\n            print(\"NO\")\n            return\n        for i in range(n):\n            if graph[x][i] == 0:\n                graph[x].remove(i)\n                continue\n            else:\n                graph[x].append(i)\n                continue\n        if len(graph[x]) == 0:\n            print(\"NO\")\n            return\n        for i in range(n):\n            if graph[x][i] == 0:\n                graph[x].remove(i)\n                continue\n            else:\n                graph[x].append(i)\n                continue\n        if len(graph[x]) == 0:\n            print(\"NO\")\n            return\n        for i in range(n):\n            if graph[x][i] == 0:\n"}, "39": {"problem_id": 2400, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            ans += 1\n        else:\n            ans += 2\n    print(ans)"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         if str in str:\n             return True\n         else:\n             return False\n"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         s = s.split(' ')\n         words = []\n         for i in range(len(s)):\n             words.append(s[i])\n         words.sort(key=lambda x: x[0])\n         return''.join(words)"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<0:\n             return False\n         divisor = num//math.factorial(1)\n         if num%divisor == 0:\n             return True\n         else:\n             return False"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        # O(n) time O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)\n        # O(n) space O(n)\n        # O(n) time O(n)"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = defaultdict(int)\n        for i,c in enumerate(map(tuple, obstacles)):\n            d[c] += 1\n            \n        ans = 0\n        for cmd in commands:\n            if cmd == -2:\n                ans += d[c]\n            elif cmd == -1:\n                ans += d[c]\n            else:\n                d[c] = max(d[c], ans)\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l == 0:\n            return 0\n        \n        for i in range(l-1, -1, -1):\n            if arr[i] > arr[i+1]:\n                return i\n            elif arr[i] < arr[i+1]:\n                return i+1\n            else:\n                l -= 1\n                \n        return l"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        res = 0\n        for i in range(1,int(n**0.5)+1):\n            res += int(str(i))\n        return res"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         first_char = 0\n         for i in range(len(s)):\n             if s[i] == s[i+1]:\n                 first_char = i\n             elif s[i] == s[i+1]:\n                 first_char = i\n         return first_char"}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        n = 9669\n        dp = [0] * 10\n        for i in range(1, 10):\n            if num == 9669:\n                dp[i] = n\n            elif num == 9:\n                dp[i] = dp[i-1] + 1\n            else:\n                dp[i] = dp[i-1] + 1\n        return max(dp)"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        if name in list(typed.keys()):\n            return True\n        else:\n            return False"}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         \n         max_nums = nums[0]\n         for num in nums[1:]:\n             if num > max_nums:\n                 max_nums = num\n                 max_nums = max(max_nums, num)\n                 \n         return max_nums"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        n = len(S)\n        \n        if n == 0:\n            return ''.join(S)\n        \n        l = 0\n        r = len(S) - 1\n        \n        while l < r:\n            mid = (l + r) // 2\n            if S[mid] == S[mid + 1]:\n                r = mid + 1\n            else:\n                l = mid\n                \n        return S[:mid]"}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 1:\n             return 9\n         elif n == 2:\n             return 1337\n         else:\n             return 987"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        count += 1\n        return count"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return nums[target]\n         else:\n             return 0\n"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num == 0:\n             return False\n         else:\n             return num%2 == 0\n"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == -1:\n             return '-'\n         elif num == 1:\n             return '-'+str(num)\n         else:\n             return str(num)"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) == 0:\n             return True\n         else:\n             return False\n"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: int\n         \"\"\"\n         if len(a) == len(b):\n             return -1\n         else:\n             return a.count(''.join(b))"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t):\n             return False\n         s_c = set(s)\n         t_c = set(t)\n         for i in range(1, len(s)):\n             if s_c & s_c[i]:\n                 return True\n             else:\n                 break\n         return False"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l, r = 0, len(nums) - 1\n         while l < r:\n             mid = (l + r) // 2\n             if nums[mid] < nums[mid + 1]:\n                 r = mid\n             else:\n                 l = mid + 1\n         return l"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] - 1 >= max_prod:\n                    max_prod = nums[i] - 1\n        return max_prod"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        startValue = 0\n        for i in range(n-1, -1, -1):\n            startValue += nums[i]\n            if i == 0:\n                startValue = 0\n            elif i == n-1:\n                startValue = min(startValue, nums[i])\n            else:\n                startValue = min(startValue, nums[i] - startValue)\n        return startValue"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) == 0 or len(num2) == 0:\n             return num1\n         elif len(num2) == 0:\n             return num2\n         else:\n             return num1 + num2"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s)//2"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if len(A) < 2:\n            return 0\n        min_diff = float('inf')\n        max_diff = float('inf')\n        for i in range(len(A)-1):\n            if A[i] > max_diff:\n                max_diff = A[i]\n                min_diff = A[i]\n            elif A[i] < min_diff:\n                min_diff = A[i]\n            else:\n                max_diff = A[i]\n                min_diff = A[i]\n        return min_diff"}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_consecutive = 0\n         for num in nums:\n             if num == 0:\n                 max_consecutive += 1\n             elif num == 1:\n                 max_consecutive += 1\n         return max_consecutive"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         else:\n             return sum(nums)"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        if len(points) == 0:\n            return False\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n        # dp[i][j] = (points[i][0] + points[i][1])\n        \n     "}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n == 0:\n             return False\n         bits = [1]\n         for i in range(1, n):\n             bits.append(bits[-1] + bits[-2])\n         return True"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         dic = collections.defaultdict(int)\n         for i in range(len(nums)):\n             if nums[i] not in dic:\n                 dic[nums[i]] += 1\n             else:\n                 dic[nums[i]] = 1\n                 \n         return sum(dic.values())"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         if len(ops) == 0:\n             return 0\n         elif len(ops) == 1:\n             return ops[0]\n         else:\n             res = float('-inf')\n             for i in range(1, len(ops)):\n                 res = min(res, ops[i] + ops[i - 1])\n             return res\n             \n             \n             \n"}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         if len(S) < K:\n             return S\n         s = ''.join(reversed(S))\n         d = len(S) - 1\n         for i in range(d):\n             if s[i] == '-':\n                 s = s[:i] + s[i+d-1:]\n         return s"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(bits) == 0:\n             return False\n         \n         res = False\n         for i in range(len(bits)):\n             if bits[i] == 0:\n                 res = True\n             elif bits[i] == 1:\n                 res = False\n         return res"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        dic = {}\n        for i in range(1, n):\n            if i not in dic:\n                dic[i] = '0'\n            else:\n                dic[i] = ''.join(sorted(dic.get(i, 0) for i in dic[i]))\n        return ''.join(sorted(dic.get(n, 0) for n in dic[n]))"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         else:\n             return True\n"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        dp = {}\n        for i in range(len(arr)):\n            if i in dp:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i-1] + 1\n                \n        return dp[m]"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         last_chars = 0\n         for i in range(len(s)):\n             if s[i] =='':\n                 last_chars += 1\n             else:\n                 break\n         return last_chars"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == 'h':\n             return 0\n         elif haystack == 'a':\n             return -1\n         elif needle == 'l':\n             return 1\n         elif haystack == 'r':\n             return -1\n         else:\n             return 0\n"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0:\n             return 0\n         step = 0\n         if n == 1:\n             step += 1\n         if n == 2:\n             step += 2\n         if n == 3:\n             step += 3\n         if n == 4:\n             step += 4\n         if n == 5:\n             step += 5\n         if n == 6:\n             step += 6\n         if n == 7:\n             step += 7\n         if n == 8:\n             step += 8\n         if n == 9:\n             step += 9\n         if n == 10:\n             step += 10\n         if n == 11:\n             step += 11\n         if n == 12:\n             step += 12\n         if n == 13:\n             step += 13\n         if n == 14:\n             step += 14\n         if n == 15:\n             step += 15\n         if n == 16:\n             step += 16\n         if n == 17:\n             step += 17\n         if n == 18:\n             step += 18\n         if n == 19:\n             step += 19\n         if n == 20:\n             step += 20\n         if n == 21:\n             step += 21\n         if n == 22:\n             step += 22\n         if n == 23:\n             step += 23\n         if n == 24:\n             step += 24\n         if n == 25:\n             step += 25\n         if n == 26:\n             step += 26\n         if n == 27:\n             step += 27\n         if n == 28:\n             step += 28\n         if n == 29:\n             step += 29\n         if n == 30:\n             step += 30\n         if n == 31:\n   "}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        # dp[i][j] = \\\"\\\"\n        # for i in range(len(s) - 1, -1, -1):\n        #     if s[i] == \\\"\\\" and j < i:\n        #         dp[i][j] = \\\"\\\"\n        #     elif s[i] == \\\"A\\\":\n        #         dp[i][j] = \\\"\".join(s[i:j+1])\n        #     else:\n        #         dp[i][j] = \\\"\\\".join(s[i:j+1])\n        # return dp[0][0]\n        # print(dp)\n        # print(dp[0][1])\n        # print(dp[0][2])\n        # print(dp[0][3])\n        # print(dp[0][4])\n        # print(dp[0][5])\n        # print(dp[0][6])\n        # print(dp[0][7])\n        # print(dp[0][8])\n        # print(dp[0][9])\n        # print(dp[0][0])\n        # print(dp[0][1])\n        # print(dp[0][2])\n        # print(dp[0][3])\n        # print(dp[0][4])\n        # print(dp[0][5])\n        # print(dp[0][6])\n        # print(dp[0][7])\n        # print(dp[0][8])\n        # print(dp[0][9])\n        # print(dp[0][0])\n        # print(dp[0][1])\n        # print(dp[0][2])\n        # print(dp[0][3])\n        # print(dp[0][4])\n        # print(dp[0][5])\n        # print(dp[0][6])\n        # print(dp[0][7])\n        # print(dp[0][8])\n        # print(dp[0][9])\n        # print(dp[0][0])\n        # print(dp[0][1])\n        # print(dp[0][2])\n        # print(dp[0][3])\n        # print(dp[0][4])\n        # print(dp[0][5])\n        # print(dp[0][6])\n        # print(dp[0][7])\n        # print(dp[0][8])\n        # print(dp[0][9])\n        # print(dp[0][0])\n        # print(dp[0][1])\n        # print(dp[0][2])\n        # print(dp[0][3])\n        # print(dp[0][4])\n        # print(dp[0"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        s = sorted(s)\n        d = collections.defaultdict(int)\n        for i in range(len(s)):\n            d[s[i]] += 1\n            if i == 0:\n                d[s[i]] -= 1\n            elif s[i] > s[i-1]:\n                d[s[i]] -= 1\n            else:\n                d[s[i]] += 1\n                \n        return s[0:len(s)]"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        n = len(text)\n        \n        def dfs(i, j):\n            if i == n:\n                return 0\n            elif j == n:\n                return 1\n            else:\n                return 0\n            \n        return max(dfs(i, 0), dfs(i, 1))"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 1] + 1)\n        return dp[n]"}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if word == \"USA\":\n             return True\n         elif word == \"FlaG\":\n             return True\n         elif word == \"Leetcode\":\n             return True\n         else:\n             return False"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         m, n = len(nums), len(nums)\n         res = 0\n         for i in range(m):\n             res = max(res, nums[i] - nums[i-1])\n         return res"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = 'aeiouAEIOU'\n         for i in range(len(s)):\n             if s[i] in vowels:\n                 return s[i:i+1]\n         return ''.join(sorted(s, key=len))"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if len(s)<1:\n             return 0\n         \n         res = 0\n         for i in range(len(s)):\n             if s[i]!=s[i-1]:\n                 res+=1\n         return res"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        # O(n) time O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n        # O(n) space O(n)\n     "}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        salary.sort()\n        return sum(salary[i] for i in range(len(salary)) if salary[i]>=min(salary[i],max(salary[i])) for salary[i] in salary)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         if len(ransomNote) == 0:\n             return False\n         \n         for i in range(len(ransomNote)):\n             if ransomNote[i] not in magazine:\n                 return False\n             \n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        stones.sort(reverse=True)\n        \n        if len(stones) == 1:\n            return stones[0]\n        \n        stones.sort(reverse=True)\n        \n        res = stones[0]\n        for i in range(1, len(stones) - 1):\n            res = max(res, stones[i] - stones[i - 1])\n            \n        return res"}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n == 0:\n             return True\n         i = 0\n         while i < n:\n             if n % i == 0:\n                 return False\n             i += 1\n         return True"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         if n == 0:\n             return 'A'\n         elif n == 1:\n             return 'B'\n         elif n == 2:\n             return 'C'\n         elif n == 3:\n             return 'Z'\n         else:\n             return 'A'"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        q = deque([startTime, endTime, queryTime])\n        count = 0\n        \n        while q:\n            q.popleft()\n            count += 1\n            for i in range(len(q)):\n                if q[i] == queryTime:\n                    q.append(i)\n                    count += 1\n                    \n        return count"}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        if S.isalpha():\n            return True\n        elif T.isalpha():\n            return True\n        else:\n            return False"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         left, right = 0, len(nums) - 1\n         while left < right:\n             mid = (left + right) // 2\n             if mid == mid + 1:\n                 return mid\n             elif mid == mid - 1:\n                 left = mid + 1\n             else:\n                 right = mid - 1\n         return -1"}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        s = list(s)\n        \n        def dfs(string, i, j):\n            if i == len(string):\n                return 0\n            elif string[i] == string[j]:\n                return 1\n            else:\n                return 0\n            \n        return sum(dfs(string, i, j) for i in range(len(s)))"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '0'\n         num = int(num)\n         if num < 0.0:\n             return '0'\n         else:\n             return str(num)\n"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         \n         res = 0\n         for i in range(len(nums)):\n             res += nums[i]\n             \n         return res"}}
{"0": {"problem_id": 4291, "answer": "def century(year):\n    if year % 100 == 0:\n        return year // 100\n    else:\n        return -1", "input_output": "{\"fn_name\": \"century\", \"inputs\": [[1705], [1900], [1601], [2000], [356], [89]], \"outputs\": [[18], [19], [17], [20], [4], [1]]}"}, "1": {"problem_id": 3768, "answer": "def name_file(fmt, nbr, start):\n    \"\"\"\n    This function returns an array of nbr elements formatted according to `frm` with the starting index `start`.\n    \"\"\"\n    return [i for i in range(nbr)] if type(i) == str and i.start == start\n", "input_output": "{\"fn_name\": \"name_file\", \"inputs\": [[\"IMG <index_no>\", 4, 1], [\"image #<index_no>.jpg\", 3, 7], [\"#<index_no> #<index_no>\", 3, -2], [\"<file> number <index_no>\", 5, 0], [\"<file_no> number <index_no>\", 2, -1], [\"file\", 2, 3], [\"<file_no> number <index_no>\", -1, 0], [\"file <index_no>\", 2, 0.1], [\"file <index_no>\", 0.2, 0], [\"file <index_no>\", 0, 0]], \"outputs\": [[[\"IMG 1\", \"IMG 2\", \"IMG 3\", \"IMG 4\"]], [[\"image #7.jpg\", \"image #8.jpg\", \"image #9.jpg\"]], [[\"#-2 #-2\", \"#-1 #-1\", \"#0 #0\"]], [[\"<file> number 0\", \"<file> number 1\", \"<file> number 2\", \"<file> number 3\", \"<file> number 4\"]], [[\"<file_no> number -1\", \"<file_no> number 0\"]], [[\"file\", \"file\"]], [[]], [[]], [[]], [[]]]}"}, "2": {"problem_id": 4966, "answer": "def fight(robot_1, robot_2, tactics):\n    if robot_1['health'] > robot_2['health']:\n        return 'The fight was a draw.'\n    elif robot_1['health'] < robot_2['health']:\n        return 'The fight was a draw.'\n    else:\n        return 'The fight was a draw.'", "input_output": "{\"fn_name\": \"fight\", \"inputs\": [], \"outputs\": []}"}, "3": {"problem_id": 3652, "answer": "def button_sequences(seqR, seqB):\n    #your code here\n    return ''.join(f'{i:b}' for i,b in zip(seqR, seqB))", "input_output": "{\"fn_name\": \"button_sequences\", \"inputs\": [[\"10011010\", \"10110111\"], [\"01001000\", \"01011100\"], [\"00010100\", \"01011100\"], [\"10101010\", \"01010101\"], [\"11011011\", \"11111011\"]], \"outputs\": [[\"RBRB\"], [\"RB\"], [\"BRB\"], [\"RBRBRBRB\"], [\"RBR\"]]}"}, "4": {"problem_id": 3486, "answer": "def find_last(n, m):\n    a = 0\n    for i in range(n, m+1):\n        if i not in a:\n            a += 1\n        else:\n            break\n    return a", "input_output": "{\"fn_name\": \"find_last\", \"inputs\": [[5, 1], [8, 3], [75, 34], [82, 49], [73, 38], [86, 71], [61, 17], [42, 38], [29, 5], [64, 49], [61, 20], [88, 52]], \"outputs\": [[[5, 24]], [[7, 51]], [[35, 4238]], [[48, 5091]], [[61, 3996]], [[10, 6275]], [[26, 3000]], [[12, 1578]], [[28, 740]], [[43, 3327]], [[32, 2922]], [[59, 5856]]]}"}, "5": {"problem_id": 2918, "answer": "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    return [round(i * 100.0, 0) for i in range(startPriceOld, startPriceNew)]", "input_output": "{\"fn_name\": \"nbMonths\", \"inputs\": [[2000, 8000, 1000, 1.5], [8000, 12000, 500, 1], [18000, 32000, 1500, 1.25], [7500, 32000, 300, 1.55]], \"outputs\": [[[6, 766]], [[8, 597]], [[8, 332]], [[25, 122]]]}"}, "6": {"problem_id": 2762, "answer": "from collections import Counter\ndef scoreboard(string):\n    return ''.join(c['nil'].index(string) for c in Counter(string))", "input_output": "{\"fn_name\": \"scoreboard\", \"inputs\": [[\"The score is four nil\"], [\"new score: two three\"], [\"two two\"], [\"Arsenal just conceded another goal, two nil\"]], \"outputs\": [[[4, 0]], [[2, 3]], [[2, 2]], [[2, 0]]]}"}, "7": {"problem_id": 3186, "answer": "def similarity(a, b):\n    return len(a) / len(b) if a.count(b) > b.count(a) else 0.5", "input_output": "{\"fn_name\": \"similarity\", \"inputs\": [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 4, 6, 7], [2, 3, 4, 7]], [[1, 2, 6, 8, 9], [0, 1, 4, 5, 6, 8, 9]], [[0, 1, 3, 4, 5, 6, 9, 14, 15, 16, 17, 18, 19], [1, 4, 10, 12, 13, 14, 15, 16]]], \"outputs\": [[1], [0], [0.5], [0.5], [0.3125]]}"}, "8": {"problem_id": 3868, "answer": "def closest_sum(ints, num):\n    sum = 0\n    for i in range(len(ints)):\n        if sum < num:\n            sum += int(ints[i])\n    return sum", "input_output": "{\"fn_name\": \"closest_sum\", \"inputs\": [[[-1, 2, 1, -4], 1], [[5, 4, 0, 3], 3], [[1, 2, 3, 4], 4], [[-2, 2, -3, 1], 3]], \"outputs\": [[2], [7], [6], [1]]}"}, "9": {"problem_id": 3591, "answer": "def doors(n):\n    return n-1 if n%2==0 else n-1+1", "input_output": "{\"fn_name\": \"doors\", \"inputs\": [[5], [10], [100]], \"outputs\": [[2], [3], [10]]}"}, "10": {"problem_id": 3617, "answer": "def is_zero_balanced(arr):\n    return arr.count(n) == 0", "input_output": "{\"fn_name\": \"is_zero_balanced\", \"inputs\": [[[3]], [[-3]], [[0, 0, 0, 0, 0, 0]], [[0, 1, -1]], [[]], [[3, -2, -1]], [[0]], [[1, 1, -2]], [[-1, 1, -2, 2, -2, -2, -4, 4]], [[0, 0, 0, 0, 0]]], \"outputs\": [[false], [false], [true], [true], [false], [false], [true], [false], [false], [true]]}"}, "11": {"problem_id": 4827, "answer": "from statistics import mean\ndef stats_disc_distr(distrib):\n    d, m, s = 0, 0, 0\n    for i, x in enumerate(distrib):\n        d += x*p(i)\n        m += s*p(i)\n        s += d\n    return [m, s]", "input_output": "{\"fn_name\": \"stats_disc_distr\", \"inputs\": [], \"outputs\": []}"}, "12": {"problem_id": 3808, "answer": "def knight_or_knave(said):\n    if said == 'True':\n        return 'Knight!'\n    elif said == 'False':\n        return 'Knave! Do not trust.'\n    else:\n        return 'Knight!' if True else 'Knave! Do not trust.'", "input_output": "{\"fn_name\": \"knight_or_knave\", \"inputs\": [[true], [false], [\"4+2==5\"], [\"2+2==4\"], [\"not True and False or False or False\"], [\"3 is 3\"], [\"True\"], [\"not True\"], [\"2+2==5\"], [\"4+1==5\"], [\"4 is 3\"], [\"9+2==3\"], [\"105+30076==30181\"], [\"3 is 3 is 3 is 9\"], [\"False\"], [\"\\\"orange\\\" is not \\\"red\\\"\"], [\"4 is \\\"blue\\\"\"], [\"True is not False\"]], \"outputs\": [[\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knave! Do not trust.\"], [\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knight!\"], [\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knave! Do not trust.\"], [\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knave! Do not trust.\"], [\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knave! Do not trust.\"], [\"Knight!\"], [\"Knave! Do not trust.\"], [\"Knight!\"]]}"}, "13": {"problem_id": 4481, "answer": "def not_visible_cubes(n):\n    return sum(1 for i in range(n))", "input_output": "{\"fn_name\": \"not_visible_cubes\", \"inputs\": [[0], [1], [2], [3], [4], [5], [7], [12], [18], [10002]], \"outputs\": [[0], [0], [0], [1], [8], [27], [125], [1000], [4096], [1000000000000]]}"}, "14": {"problem_id": 3292, "answer": "def calc(x):\n    return ''.join(chr(ord('A') + int(x, 2)) for chr in str(ord('A') + int(x, 2))).replace('7', '1')", "input_output": "{\"fn_name\": \"calc\", \"inputs\": [[\"abcdef\"], [\"ifkhchlhfd\"], [\"aaaaaddddr\"], [\"jfmgklf8hglbe\"], [\"jaam\"], [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]], \"outputs\": [[6], [6], [30], [6], [12], [96]]}"}, "15": {"problem_id": 4812, "answer": "def nth_floyd(n):\n    return n.rfind(str(n)[::-1])", "input_output": "{\"fn_name\": \"nth_floyd\", \"inputs\": [], \"outputs\": []}"}, "16": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        q = deque([startTime, endTime, queryTime])\n        count = 0\n        \n        while q:\n            q.popleft()\n            count += 1\n            for i in range(len(q)):\n                if q[i] == queryTime:\n                    q.append(i)\n                    count += 1\n        return count", "input_output": "{\"fn_name\": \"busyStudent\", \"inputs\": [[[1, 2, 3], [3, 2, 7], 4]], \"outputs\": [1]}"}, "17": {"problem_id": 3756, "answer": "def goldbach_partitions(n):\n    if n % 2 == 0:\n        return [i for i in range(2, n + 1) if isinstance(i, int) and isinstance(n, int)]\n    else:\n        return []", "input_output": "{\"fn_name\": \"goldbach_partitions\", \"inputs\": [[15], [393], [31133], [4], [100], [594], [1500]], \"outputs\": [[[]], [[]], [[]], [[\"2+2\"]], [[\"3+97\", \"11+89\", \"17+83\", \"29+71\", \"41+59\", \"47+53\"]], [[\"7+587\", \"17+577\", \"23+571\", \"31+563\", \"37+557\", \"47+547\", \"53+541\", \"71+523\", \"73+521\", \"103+491\", \"107+487\", \"127+467\", \"131+463\", \"137+457\", \"151+443\", \"163+431\", \"173+421\", \"193+401\", \"197+397\", \"211+383\", \"227+367\", \"241+353\", \"257+337\", \"263+331\", \"277+317\", \"281+313\", \"283+311\"]], [[\"7+1493\", \"11+1489\", \"13+1487\", \"17+1483\", \"19+1481\", \"29+1471\", \"41+1459\", \"47+1453\", \"53+1447\", \"61+1439\", \"67+1433\", \"71+1429\", \"73+1427\", \"101+1399\", \"127+1373\", \"139+1361\", \"173+1327\", \"179+1321\", \"181+1319\", \"193+1307\", \"197+1303\", \"199+1301\", \"211+1289\", \"223+1277\", \"241+1259\", \"251+1249\", \"263+1237\", \"269+1231\", \"271+1229\", \"277+1223\", \"283+1217\", \"307+1193\", \"313+1187\", \"337+1163\", \"347+1153\", \"349+1151\", \"383+1117\", \"397+1103\", \"409+1091\", \"431+1069\", \"439+1061\", \"449+1051\", \"461+1039\", \"467+1033\", \"479+1021\", \"487+1013\", \"491+1009\", \"503+997\", \"509+991\", \"523+977\", \"547+953\", \"563+937\", \"571+929\", \"593+907\", \"613+887\", \"617+883\", \"619+881\", \"641+859\", \"643+857\", \"647+853\", \"661+839\", \"673+827\", \"677+823\", \"691+809\", \"727+773\", \"739+761\", \"743+757\"]]]}"}, "18": {"problem_id": 3166, "answer": "def circle_slash(n):\n    return n-1 if n<0 else n-1+n", "input_output": "{\"fn_name\": \"circle_slash\", \"inputs\": [[5], [11], [1], [2], [3], [4], [8], [16], [15], [31]], \"outputs\": [[3], [7], [1], [1], [3], [1], [1], [1], [15], [31]]}"}, "19": {"problem_id": 3327, "answer": "def celsius_to_romer(temp):\n    return round(temperature(temp), 1)", "input_output": "{\"fn_name\": \"celsius_to_romer\", \"inputs\": [[24], [8], [29]], \"outputs\": [[20.1], [11.7], [22.725]]}"}, "20": {"problem_id": 3014, "answer": "def simple_transposition(text):\n    return ''.join(sorted(text.split(), key=lambda x: x[1], reverse=True))", "input_output": "{\"fn_name\": \"simple_transposition\", \"inputs\": [[\"Sample text\"], [\"Simple transposition\"], [\"All that glitters is not gold\"], [\"The better part of valor is discretion\"], [\"Conscience does make cowards of us all\"], [\"Imagination is more important than knowledge\"]], \"outputs\": [[\"Sml etapetx\"], [\"Sml rnpstoipetasoiin\"], [\"Alta ltesi o odl htgitr sntgl\"], [\"Tebte ato ao sdsrtoh etrpr fvlri icein\"], [\"Cncec osmk oad fu losinede aecwrso sal\"], [\"Iaiaini oeipratta nwegmgnto smr motn hnkolde\"]]}"}, "21": {"problem_id": 3041, "answer": "def vowel_start(st):\n    return ''.join(s.lower() if s.isalnum() else s for s in st.lower())", "input_output": "{\"fn_name\": \"vowel_start\", \"inputs\": [[\"It is beautiful weather today!\"], [\"Coding is great\"], [\"my number is 0208-533-2325\"], [\"oranges, apples, melon, pineapple\"], [\"under_score\"]], \"outputs\": [[\"it isb e a ut if ulw e ath ert od ay\"], [\"c od ing isgr e at\"], [\"myn umb er is02085332325\"], [\"or ang es appl esm el onp in e appl e\"], [\"und ersc or e\"]]}"}, "22": {"problem_id": 3705, "answer": "def heron(a,b,c):\n    return round(a * b * c, 2)", "input_output": "{\"fn_name\": \"heron\", \"inputs\": [[3, 4, 5], [6, 8, 10]], \"outputs\": [[6], [24]]}"}, "23": {"problem_id": 3593, "answer": "def capitalize(s,ind):\n    return ''.join(s[i] if i in ind else s[i].upper() for i in range(len(s)))", "input_output": "{\"fn_name\": \"capitalize\", \"inputs\": [[\"abcdef\", [1, 2, 5]], [\"abcdef\", [1, 2, 5, 100]], [\"codewars\", [1, 3, 5, 50]], [\"abracadabra\", [2, 6, 9, 10]], [\"codewarriors\", [5]], [\"indexinglessons\", [0]]], \"outputs\": [[\"aBCdeF\"], [\"aBCdeF\"], [\"cOdEwArs\"], [\"abRacaDabRA\"], [\"codewArriors\"], [\"Indexinglessons\"]]}"}, "24": {"problem_id": 2825, "answer": "def even_magic(n):\n    return [[n,n] for _ in range(n)]", "input_output": "{\"fn_name\": \"even_magic\", \"inputs\": [[4], [8]], \"outputs\": [[[[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]], [[[64, 2, 3, 61, 60, 6, 7, 57], [9, 55, 54, 12, 13, 51, 50, 16], [17, 47, 46, 20, 21, 43, 42, 24], [40, 26, 27, 37, 36, 30, 31, 33], [32, 34, 35, 29, 28, 38, 39, 25], [41, 23, 22, 44, 45, 19, 18, 48], [49, 15, 14, 52, 53, 11, 10, 56], [8, 58, 59, 5, 4, 62, 63, 1]]]]}"}, "25": {"problem_id": 3601, "answer": "def find_nb(m):\n    n = 0\n    for i in range(len(m)):\n        if m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m[i]**3 + m", "input_output": "{\"fn_name\": \"find_nb\", \"inputs\": [[4183059834009], [24723578342962], [135440716410000], [40539911473216], [26825883955641], [41364076483082], [9541025211025], [112668204662785], [79172108332642], [1788719004901], [131443152397956], [1801879360282], [18262169777476], [11988186060816], [826691919076], [36099801072722], [171814395026], [637148782657], [6759306226], [33506766981009], [108806345136785], [14601798712901], [56454575667876], [603544088161], [21494785321], [1025292944081385001], [10252519345963644753025], [10252519345963644753026], [102525193459636447530260], [4], [16]], \"outputs\": [[2022], [-1], [4824], [3568], [3218], [-1], [2485], [-1], [-1], [-1], [4788], [-1], [2923], [2631], [1348], [-1], [-1], [-1], [-1], [3402], [-1], [-1], [3876], [1246], [541], [45001], [450010], [-1], [-1], [-1], [-1]]}"}, "26": {"problem_id": 4985, "answer": "def transpose(song, interval):\n    flat = []\n    for d in song:\n        flat.append(d.lower())\n    return flat", "input_output": "{\"fn_name\": \"transpose\", \"inputs\": [], \"outputs\": []}"}, "27": {"problem_id": 3890, "answer": "def get_honor_path(honor_score, target_honor_score):\n    d = {}\n    for i, score in enumerate(target_honor_score):\n        if score not in d:\n            d[score] = {'1kyus': 1, '2kyus': 2}\n        else:\n            d[score] = {'1kyus': 1, '2kyus': 2}.get(score)\n    return d", "input_output": "{\"fn_name\": \"get_honor_path\", \"inputs\": [[11, 2], [11, 11]], \"outputs\": [[{}], [{}]]}"}, "28": {"problem_id": 4272, "answer": "def greet(name):\n    if name == \"Johnny\":\n        return \"Hello, my love!\"\n    else:\n        return \"Hello, {name}!\".format(name=name)", "input_output": "{\"fn_name\": \"greet\", \"inputs\": [[\"James\"], [\"Jane\"], [\"Jim\"], [\"Johnny\"]], \"outputs\": [[\"Hello, James!\"], [\"Hello, Jane!\"], [\"Hello, Jim!\"], [\"Hello, my love!\"]]}"}, "29": {"problem_id": 4342, "answer": "def no_space(x):\n    return x.replace(' ','')", "input_output": "{\"fn_name\": \"no_space\", \"inputs\": [[\"8 j 8   mBliB8g  imjB8B8  jl  B\"], [\"8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd\"], [\"8aaaaa dddd r     \"], [\"jfBm  gk lf8hg  88lbe8 \"], [\"8j aam\"]], \"outputs\": [[\"8j8mBliB8gimjB8B8jlB\"], [\"88Bifk8hB8BB8BBBB888chl8BhBfd\"], [\"8aaaaaddddr\"], [\"jfBmgklf8hg88lbe8\"], [\"8jaam\"]]}"}, "30": {"problem_id": 4127, "answer": "def count_pairs_int(diff, n_max):\n    return sum(1 for i in range(diff, n_max + 1) if i % 2 == 0)", "input_output": "{\"fn_name\": \"count_pairs_int\", \"inputs\": [[1, 50], [3, 100], [3, 200], [6, 350], [6, 1000], [7, 1500], [7, 2500], [7, 3000], [9, 4000], [9, 5000], [11, 5000]], \"outputs\": [[8], [7], [18], [86], [214], [189], [309], [366], [487], [622], [567]]}"}, "31": {"problem_id": 3472, "answer": "def next_day_of_week(d, a):\n    return next((d, a) for d, a in zip(sorted(a, reverse=True), a))", "input_output": "{\"fn_name\": \"next_day_of_week\", \"inputs\": [[4, 42], [6, 42], [7, 42]], \"outputs\": [[6], [2], [2]]}"}, "32": {"problem_id": 2963, "answer": "swap = lambda s: ''.join(sorted(s.lower()))", "input_output": "{\"fn_name\": \"swap\", \"inputs\": [[\"HelloWorld\"], [\"CodeWars\"], [\"ThIs iS A l0NG sENTence witH nUMbERs in IT 123 456\"], [\"\"], [\" \"], [\"  \"], [\" 1a1 \"], [\"H_E_l-l_0 WO|||Rld\"], [\"TeSt\"], [\"EeEEeeEEEeee\"]], \"outputs\": [[\"hELLOwORLD\"], [\"cODEwARS\"], [\"tHiS Is a L0ng SentENCE WITh NumBerS IN it 123 456\"], [\"\"], [\" \"], [\"  \"], [\" 1A1 \"], [\"h_e_L-L_0 wo|||rLD\"], [\"tEsT\"], [\"eEeeEEeeeEEE\"]]}"}, "33": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]].append(i)\n        a[i] = 0\n    for i in range(1, n):\n        d[a[i]].append(i)\n        a[i] = max(a[i], d[a[i]])\n    print(min(d.values()))\n", "input_output": "{\n  \"inputs\": [\n    \"4\\n4 2\\n1 2 1 2\\n4 3\\n1 2 2 1\\n8 7\\n6 1 1 7 6 3 4 6\\n6 6\\n5 2 6 1 3 4\\n\"\n  ],\n  \"outputs\": [\n    \"0\\n1\\n4\\n2\\n\"\n  ]\n}"}, "34": {"problem_id": 4845, "answer": "def sort_nested_list(A):\n    A.sort()\n    return A", "input_output": "{\"fn_name\": \"sort_nested_list\", \"inputs\": [], \"outputs\": []}"}, "35": {"problem_id": 2600, "answer": "import numpy\n\ndef sum(A, axis):\n    return A[0]*A[-1]\n\ndef prod(A, axis):\n    return sum(A[0]*A[-1] for A in A[1:])\n\ndef main():\n    n = int(input())\n    A = numpy.array(map(int, input().split()))\n    print(prod(A, axis))\n\nmain()\n", "input_output": "{\"inputs\": [\"2 2\\n1 2\\n3 4\"], \"outputs\": [\"24\"]}"}, "36": {"problem_id": 3878, "answer": "def kangaroo(kanga1, rate1, kanga2, rate2):\n    if kanga1 == kanga2:\n        return True\n    elif kanga1 < kanga2:\n        return False\n    else:\n        return kanga1 == kanga2", "input_output": "{\"fn_name\": \"kangaroo\", \"inputs\": [[0, 3, 4, 2], [0, 9, 16, 4], [-1, 3, 0, 2], [-1571, 4240, 9023, 4234], [-7855, 4240, 9023, 4234], [43, 5, 49, 3], [9023, 4240, 1571, 4234], [129, 15, 147, 9], [129, 15, 147, 90], [0, 2, 100000, 1], [72893, 11125, 24432, 4202], [13613, 299, 65130, 73]], \"outputs\": [[true], [false], [true], [false], [true], [true], [false], [true], [false], [true], [false], [false]]}"}, "37": {"problem_id": 3514, "answer": "def validate_sequence(sequence):\n    a = sequence.pop(0)\n    if a == 1:\n        return True\n    elif a == 0:\n        return False\n    else:\n        return False", "input_output": "{\"fn_name\": \"validate_sequence\", \"inputs\": [[[1, 2, 3, 4, 5, 8, 7, 8, 9]], [[2, 8, 6, 7, 4, 3, 1, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 5, 6, 7, 8]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[1, 3, 5, 7, 8, 12, 14, 16]], [[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]], [[0, 2, 4, 6, 8]], [[2, 4, 6, 8, 10]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 22]], [[2, 4, 6, 8, 10, 12, 13, 16, 18, 20]], [[3, 7, 9]], [[3, 6, 9]], [[3, 6, 8]], [[50, 100, 200, 400, 800]], [[50, 100, 150, 200, 250]], [[100, 200, 300, 400, 500, 600]]], \"outputs\": [[false], [false], [true], [true], [true], [false], [false], [true], [true], [true], [false], [false], [false], [true], [false], [false], [true], [true]]}"}, "38": {"problem_id": 3429, "answer": "from math import pi\ndef circleArea(r):\n    return round(r*(r**0.5)+(r**0.5*pi),2)", "input_output": "{\"fn_name\": \"circleArea\", \"inputs\": [[0], [\"An integer\"]], \"outputs\": [[false], [false]]}"}, "39": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         n = len(nums)\n         res = 0\n         for i in range(n):\n             res += nums[i]\n             if res > res[0]:\n                 res = res[1:]\n         return res", "input_output": "{\"fn_name\": \"maxSubArray\", \"inputs\": [[[-2, 1, -3, 4, -1, 2, 1, -5, 4]]], \"outputs\": [6]}"}, "40": {"problem_id": 4993, "answer": "from math import floor, ceil, log\n\ndef temps(v0, slope, d_tot):\n    return floor((d_tot - v0) / 60.0) if d_tot > 0 else -1", "input_output": "{\"fn_name\": \"temps\", \"inputs\": [], \"outputs\": []}"}, "41": {"problem_id": 4520, "answer": "def max_product(a):\n    lst = []\n    for i in range(len(a)):\n        if a[i] == a[i-1]:\n            lst.append(a[i])\n    return lst[-1]", "input_output": "{\"fn_name\": \"max_product\", \"inputs\": [[[56, 335, 195, 443, 6, 494, 252]], [[154, 428, 455, 346]], [[39, 135, 47, 275, 37, 108, 265, 457, 2, 133, 316, 330, 153, 253, 321, 411]], [[136, 376, 10, 146, 105, 63, 234]], [[354, 463, 165, 62, 472, 53, 347, 293, 252, 378, 420, 398, 255, 89]], [[346, 446, 26, 425, 432, 349, 123, 269, 285, 93, 75, 14]], [[134, 320, 266, 299]], [[114, 424, 53, 272, 128, 215, 25, 329, 272, 313, 100, 24, 252]], [[375, 56, 337, 466, 203]]], \"outputs\": [[218842], [194740], [187827], [87984], [218536], [192672], [95680], [139496], [174750]]}"}, "42": {"problem_id": 3946, "answer": "def interweave(s1, s2):\n    return ''.join(sorted(s1.split(' '), key=lambda x: x[0], reverse=True))", "input_output": "{\"fn_name\": \"interweave\", \"inputs\": [[\"\", \"\"], [\"hlo\", \"el\"], [\"h3lo\", \"el4\"]], \"outputs\": [[\"\"], [\"hello\"], [\"hello\"]]}"}, "43": {"problem_id": 3974, "answer": "def two_count(n):\n    return n > 0 and (n > 0 and sum(1 for i in range(1, n) if i % 2))", "input_output": "{\"fn_name\": \"two_count\", \"inputs\": [[24], [17280], [222222222222], [256], [1], [2], [482848428248882482], [7], [7777777777777777], [84934656]], \"outputs\": [[3], [7], [1], [8], [0], [1], [1], [0], [0], [20]]}"}, "44": {"problem_id": 3889, "answer": "def area_code(text):\n    return '{}'.format(text.replace('`',''))", "input_output": "{\"fn_name\": \"area_code\", \"inputs\": [[\"The supplier's phone number is (555) 867-5309\"], [\"Grae's cell number used to be (123) 456-7890\"], [\"The 102nd district court's fax line is (124) 816-3264\"]], \"outputs\": [[\"555\"], [\"123\"], [\"124\"]]}"}, "45": {"problem_id": 4060, "answer": "def ant_bridge(ants, terrain):\n    ant = ants\n    terrain = terrain.split(' ')\n    \n    # ant is a gap\n    if terrain[0] == '-' or terrain[-1] == '-':\n        return ants\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[0]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[1]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[2]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[3]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[4]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[5]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[6]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[7]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[8]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[9]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[10]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[10]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n        return terrains[11]\n    elif terrain[0] == '-' or terrain[-1] == '-':\n      ", "input_output": "{\"fn_name\": \"ant_bridge\", \"inputs\": [[\"GFEDCBA\", \"-----------------------\"], [\"GFEDCBA\", \"------------...-----------\"], [\"GFEDCBA\", \"------------.....---------\"], [\"GFEDCBA\", \"------.....------.....---------\"], [\"GFEDCBA\", \"------------...-----..----\"], [\"CBA\", \"--.--.---\"], [\"GFEDCBA\", \"------....-.---\"], [\"EDCBA\", \"--..---...-..-...----..-----\"], [\"JIHGFEDCBA\", \"--........------.-........-........---....-----\"], [\"JIHGFEDCBA\", \"-.....------........-.......-.......----\"], [\"JIHGFEDCBA\", \"-------.......-.......-\"], [\"JIHGFEDCBA\", \"-------.......-.......-.......-\"], [\"GFEDCBA\", \"-.-.-.-\"]], \"outputs\": [[\"GFEDCBA\"], [\"EDCBAGF\"], [\"GFEDCBA\"], [\"GFEDCBA\"], [\"BAGFEDC\"], [\"CBA\"], [\"AGFEDCB\"], [\"EDCBA\"], [\"GFEDCBAJIH\"], [\"CBAJIHGFED\"], [\"GFEDCBAJIH\"], [\"EDCBAJIHGF\"], [\"GFEDCBA\"]]}"}, "46": {"problem_id": 4967, "answer": "def knapsack(capacity, items):\n    l = sorted(items)\n    r = [0] * len(items)\n    for item in items:\n        r[item[0] - 1] += item[1]\n        r[item[1] - 1] += item[0]\n    return r", "input_output": "{\"fn_name\": \"knapsack\", \"inputs\": [], \"outputs\": []}"}, "47": {"problem_id": 2754, "answer": "from collections import Counter\n\ndef decode(s):\n    return ''.join(c for c in s.split('.') if c[0] == '-')", "input_output": "{\"fn_name\": \"decode\", \"inputs\": [[\".... . .-.. .-.. ---  .-- --- .-. .-.. -..\"], [\".---- ... -  .- -. -..  ..--- -. -..\"], [\"..  .- --  .-  - . ... -\"], [\".- -... -.-. -.. . ..-. --. .... .. .--- -.- .-.. -- -. --- .--. --.- .-. ... - ..- ...- .-- -..- -.-- --.. ----- .---- ..--- ...-- ....- ..... -.... --... ---.. ----.\"], [\"\"]], \"outputs\": [[\"hello world\"], [\"1st and 2nd\"], [\"i am a test\"], [\"abcdefghijklmnopqrstuvwxyz0123456789\"], [\"\"]]}"}, "48": {"problem_id": 3462, "answer": "def disjunction(operands, is_exclusive):\n    if is_exclusive:\n        return True\n    elif isinstance(operands, bool) and isinstance(operands, bool):\n        return True\n    else:\n        return False", "input_output": "{\"fn_name\": \"disjunction\", \"inputs\": [[[false, true, true], false], [[false, true, false], false], [[false, true, true, true], true], [[true, true, true], false], [[true, true, true, true], false]], \"outputs\": [[true], [true], [true], [true], [true]]}"}, "49": {"problem_id": 3005, "answer": "def f(n):\n    return sum(1 for i in range(n, 0, -1) if i not in set(range(1, int(n**0.5) + 1)))", "input_output": "{\"fn_name\": \"f\", \"inputs\": [[5], [3], [2], [20]], \"outputs\": [[12], [4], [2], [17710]]}"}, "50": {"problem_id": 3977, "answer": "from itertools import chain, takewhile \nfrom operator import itemgetter\n\ndef cluster(points, n):\n    d = 0.0\n    for i in range(n):\n        d += abs(points[i] - points[i-1])\n        d /= 2\n    return [d, d]", "input_output": "{\"fn_name\": \"cluster\", \"inputs\": [[[[100, 100]], 1]], \"outputs\": [[[[[100, 100]]]]]}"}, "51": {"problem_id": 2527, "answer": "class Solution:\n     def getSum(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: int\n         :rtype: int\n         \"\"\"\n         if a == b:\n             return 0\n         else:\n             return (a + b)", "input_output": "{\"fn_name\": \"getSum\", \"inputs\": [[1, 2]], \"outputs\": [3]}"}, "52": {"problem_id": 4142, "answer": "from itertools import groupby\n\ndef solve(arr):\n    s = sorted(arr, key=lambda x: x[0])\n    return [sum(1 for x in groupby(s, key=lambda x: x[1])) for x in s]", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[[\"abc\", \"abbc\", \"ab\", \"xyz\", \"xy\", \"zzyx\"]], [[\"wkskkkkkk\", \"fokoo\", \"wkskk\", \"uizzzz\", \"fokooff\", \"wkskkkk\", \"uizzzzzzz\"]], [[\"xhuhhh\", \"dghgg\", \"dghgghh\", \"mrerrrrrr\", \"xhuhhhhhh\", \"mrerrr\"]], [[\"uczcccccc\", \"idffffiii\", \"pnjjjjjjj\", \"pnjjjj\", \"idffff\", \"uczcccc\", \"uczcc\"]], [[\"rvjvvvv\", \"mihhhh\", \"mihhhhmmm\", \"rvjvv\", \"wsnssww\", \"wsnss\"]], [[\"ayqqqq\", \"epqqqqqqq\", \"epqqqqqqqqqq\", \"rdsddss\", \"ayqqqqqqq\", \"epqqqq\", \"rdsdd\"]], [[\"gkeeekkgggg\", \"gkeeekkgg\", \"bzfffffff\", \"uoboooooo\", \"gkeeekk\", \"uobooo\", \"bzffff\", \"gkeee\"]]], \"outputs\": [[[1, 8]], [[5, 7, 9]], [[3, 4, 8]], [[5, 5, 11]], [[3, 3, 9]], [[4, 8, 9]], [[8, 8, 12]]]}"}, "53": {"problem_id": 3518, "answer": "def linux_type(file_attribute):\n    return 'file'.join(f'{file_attribute.type()}' for f in file_attribute.split('-'))", "input_output": "{\"fn_name\": \"linux_type\", \"inputs\": [[\"-rwxrwxrwx\"], [\"Drwxr-xr-x\"], [\"lrwxrw-rw-\"], [\"srwxrwxrwx\"]], \"outputs\": [[\"file\"], [\"door\"], [\"symlink\"], [\"socket\"]]}"}, "54": {"problem_id": 4751, "answer": "def deficiently_abundant_amicable_numbers(n1,n2):\n    return '%.2f' % (n1 * n2) if n1 > n2 else '%.2f' % (n1 * n2)\n\ndef abundant_determinant(n):\n    return sum(n % i for i in range(1,n+1)) if n % i == 0 else 0", "input_output": "{\"fn_name\": \"deficiently_abundant_amicable_numbers\", \"inputs\": [[220, 284], [220, 280], [1184, 1210], [220221, 282224], [10744, 10856], [299920, 9284], [999220, 2849], [139815, 122265], [496, 28], [8128, 8128]], \"outputs\": [[\"abundant deficient amicable\"], [\"abundant abundant not amicable\"], [\"abundant deficient amicable\"], [\"deficient abundant not amicable\"], [\"abundant deficient amicable\"], [\"abundant deficient not amicable\"], [\"abundant deficient not amicable\"], [\"deficient abundant amicable\"], [\"perfect perfect not amicable\"], [\"perfect perfect not amicable\"]]}"}, "55": {"problem_id": 3648, "answer": "def summy(s):\n    return sum(x for x in s.split(' '))", "input_output": "{\"fn_name\": \"summy\", \"inputs\": [[\"1 2 3\"], [\"1 2 3 4\"], [\"1 2 3 4 5\"], [\"10 10\"], [\"0 0\"]], \"outputs\": [[6], [10], [15], [20], [0]]}"}, "56": {"problem_id": 4621, "answer": "def count_deaf_rats(town):\n    r = 0\n    for i in range(len(town)):\n        r += 1\n        if town[i] == 'O':\n            town[i] = 'P'\n        elif town[i] == '~':\n            town[i] = 'O'\n        elif town[i] == 'P':\n            town[i] = 'O'\n        else:\n            town[i] = 'O'\n    return r", "input_output": "{\"fn_name\": \"count_deaf_rats\", \"inputs\": [[\"~O~O~O~O P\"], [\"P O~ O~ ~O O~\"], [\"~O~O~O~OP~O~OO~\"], [\"O~~OO~~OO~~OO~P~OO~~OO~~OO~~O\"], [\"~OP\"], [\"PO~\"], [\"O~P\"], [\"P~O\"], [\"         P\"], [\"P         \"], [\"         P      \"], [\"P\"]], \"outputs\": [[0], [1], [2], [8], [0], [0], [1], [1], [0], [0], [0], [0]]}"}, "57": {"problem_id": 2691, "answer": "def solve(s):\n    l = []\n    for i in range(0,len(s)):\n        if s[i]!=s[i-1]:\n            l.append(s[i])\n    return max(l)", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[\"gh12cdy695m1\"], [\"2ti9iei7qhr5\"], [\"vih61w8oohj5\"], [\"f7g42g16hcu5\"], [\"lu1j8qbbb85\"]], \"outputs\": [[695], [9], [61], [42], [85]]}"}, "58": {"problem_id": 3341, "answer": "def pop_shift(s):\n    return [i for i in s if i not in 'abcdefghijklmnopqrstuvwxyz']", "input_output": "{\"fn_name\": \"pop_shift\", \"inputs\": [[\"reusetestcasesbitcointakeovertheworldmaybewhoknowsperhaps\"], [\"turnsoutrandomtestcasesareeasierthanwritingoutbasicones\"], [\"exampletesthere\"], [\"letstalkaboutjavascriptthebestlanguage\"], [\"iwanttotraveltheworldwritingcodeoneday\"], [\"letsallgoonholidaysomewhereverycold\"]], \"outputs\": [[[\"spahrepswonkohwebyamdlroweht\", \"reusetestcasesbitcointakeove\", \"r\"]], [[\"senocisabtuognitirwnahtreis\", \"turnsoutrandomtestcasesaree\", \"a\"]], [[\"erehtse\", \"example\", \"t\"]], [[\"egaugnaltsebehttpir\", \"letstalkaboutjavasc\", \"\"]], [[\"yadenoedocgnitirwdl\", \"iwanttotravelthewor\", \"\"]], [[\"dlocyreverehwemos\", \"letsallgoonholida\", \"y\"]]]}"}, "59": {"problem_id": 3748, "answer": "from functools import reduce\n\ndef six_column_encryption(msg):\n    return''.join(map(reduce(lambda x, y: x+y, msg.replace(' ',''), range(1, len(msg) + 1))) for x, y in zip(msg, msg[1:]))", "input_output": "{\"fn_name\": \"six_column_encryption\", \"inputs\": [[\"Attack at noon or we are done for\"], [\"Let's kill them all\"], [\"Meet me behind the kitchen tomorrow at seven in the evening\"]], \"outputs\": [[\"A.ow.f tanedo tt..or a.oan. cnrre. ko.e..\"], [\"Lkhl eie. tlm. 'l.. s.a. .tl.\"], [\"Men.eoaete e.dknrtnhn eb.i.r..ei tetttosi.n .hhcoweneg miehm.v.v.\"]]}"}, "60": {"problem_id": 4894, "answer": "def makeParts(arr, chunkSize):\n    res = 0\n    for i in range(len(arr)):\n        res += arr[i]\n    return res", "input_output": "{\"fn_name\": \"makeParts\", \"inputs\": [], \"outputs\": []}"}, "61": {"problem_id": 3045, "answer": "def elevator(left, right, call):\n    if left == right:\n        return \"right\"\n    elif abs(call - left) < abs(call - right):\n        return \"left\"\n    elif abs(call - left) > abs(call - right):\n        return \"right\"\n    else:\n        return \"right\"", "input_output": "{\"fn_name\": \"elevator\", \"inputs\": [[0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 0, 0], [0, 2, 1], [0, 0, 1], [0, 0, 2], [0, 2, 0], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]], \"outputs\": [[\"left\"], [\"right\"], [\"right\"], [\"right\"], [\"right\"], [\"right\"], [\"right\"], [\"left\"], [\"right\"], [\"right\"], [\"left\"], [\"left\"], [\"right\"], [\"right\"], [\"right\"], [\"left\"], [\"left\"], [\"right\"], [\"right\"], [\"right\"], [\"left\"], [\"right\"], [\"right\"], [\"left\"], [\"right\"], [\"right\"], [\"right\"]]}"}, "62": {"problem_id": 4765, "answer": "class Hero(object):\n    def __init__(self, name='Hero'):\n        self.name = name\n        self.experience = 0\n        self.health = 100\n        self.damage = 5\n        self.position = '00'\n        self.damage = 5\n        self.experience = 0", "input_output": "{\"fn_name\": \"__init__\", \"inputs\": [], \"outputs\": []}"}, "63": {"problem_id": 3309, "answer": "from itertools import chain, chain_with_replacement\n\ndef encode_resistor_colors(ohms_string):\n    return ''.join(chr(i) for i in reversed(chain(reversed(ohms_string))) if i.isdigit() or i.isalpha()))", "input_output": "{\"fn_name\": \"encode_resistor_colors\", \"inputs\": [[\"10 ohms\"], [\"47 ohms\"], [\"100 ohms\"], [\"220 ohms\"], [\"330 ohms\"], [\"470 ohms\"], [\"680 ohms\"], [\"1k ohms\"], [\"4.7k ohms\"], [\"10k ohms\"], [\"22k ohms\"], [\"47k ohms\"], [\"100k ohms\"], [\"330k ohms\"], [\"1M ohms\"], [\"2M ohms\"]], \"outputs\": [[\"brown black black gold\"], [\"yellow violet black gold\"], [\"brown black brown gold\"], [\"red red brown gold\"], [\"orange orange brown gold\"], [\"yellow violet brown gold\"], [\"blue gray brown gold\"], [\"brown black red gold\"], [\"yellow violet red gold\"], [\"brown black orange gold\"], [\"red red orange gold\"], [\"yellow violet orange gold\"], [\"brown black yellow gold\"], [\"orange orange yellow gold\"], [\"brown black green gold\"], [\"red black green gold\"]]}"}, "64": {"problem_id": 2880, "answer": "def seven(m):\n    i = 0\n    while m >= 100:\n        m = m // 10 - 2 * i\n        i += 1\n    return m, i\n", "input_output": "{\"fn_name\": \"seven\", \"inputs\": [[1021], [477557101], [477557102], [2340029794923400297949], [1603], [371], [1369851], [483], [483595], [0], [170232833617690725]], \"outputs\": [[[10, 2]], [[28, 7]], [[47, 7]], [[14, 20]], [[7, 2]], [[35, 1]], [[0, 5]], [[42, 1]], [[28, 4]], [[0, 0]], [[0, 16]]]}"}, "65": {"problem_id": 4321, "answer": "def player_manager(players):\n    if players:\n        return [{player: \"Jane Doe\", contact: 8167238327}, {player: \"Jane Doe\", contact: 8163723827}]\n    else:\n        return []", "input_output": "{\"fn_name\": \"player_manager\", \"inputs\": [[\"a, 5\"], [\"jane, 801, dave, 123\"], [\"Amelia, 8165254325, Jessie, 9187162345, Marcus Kaine, 8018273245\"], [\"\"], [null]], \"outputs\": [[[{\"player\": \"a\", \"contact\": 5}]], [[{\"player\": \"jane\", \"contact\": 801}, {\"player\": \"dave\", \"contact\": 123}]], [[{\"player\": \"Amelia\", \"contact\": 8165254325}, {\"player\": \"Jessie\", \"contact\": 9187162345}, {\"player\": \"Marcus Kaine\", \"contact\": 8018273245}]], [[]], [[]]]}"}, "66": {"problem_id": 3938, "answer": "def sorted_brands(history):\n    brands = []\n    for i, b in enumerate(history, 1):\n        if b == 'Phone':\n            brands.append(b)\n    return brands", "input_output": "{\"fn_name\": \"sorted_brands\", \"inputs\": [[[]]], \"outputs\": [[[]]]}"}, "67": {"problem_id": 2501, "answer": "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         if len(s) == 0:\n             return s\n         \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n                 i += 1\n             elif s[i] == s[j]:\n                 j += 1\n             else:\n                 break\n                 \n         i = 0\n         j = 0\n         while i < len(s) and j < len(s):\n             if s[i] == s[j]:\n   ", "input_output": "{\"fn_name\": \"reverseStr\", \"inputs\": [[\"\\\"abcdefg\\\"\", 2]], \"outputs\": [\"a\\\"bcedfg\\\"\"]}"}, "68": {"problem_id": 4383, "answer": "def artificial_rain(garden):\n    m = len(garden)\n    if m == 0:\n        return 0\n    else:\n        for i in range(1, m):\n            if garden[i] > garden[i-1]:\n                garden[i] = garden[i-1]\n            elif garden[i] == garden[i-1]:\n                garden[i] = m\n            else:\n                m = min(m, garden[i])\n        return m", "input_output": "{\"fn_name\": \"artificial_rain\", \"inputs\": [[[2]], [[1, 2, 1, 2, 1]], [[4, 2, 3, 3, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 1, 5, 4, 3, 2, 1]], [[1, 1, 1, 2, 1, 2, 10, 2, 3, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 8, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 4, 88, 89, 90, 2, 92, 100, 7, 6, 5, 4, 3, 2, 1]]], \"outputs\": [[1], [3], [4], [10], [10], [11], [6], [5], [53], [61], [48]]}"}, "69": {"problem_id": 2911, "answer": "def count_vowels(s = ''):\n    if type(s) is str:\n        return 0\n    elif type(s) is int:\n        return 1\n    else:\n        return -1", "input_output": "{\"fn_name\": \"count_vowels\", \"inputs\": [[\"abcdefg\"], [\"asdfdsafdsafds\"], [\"\"], [\"asdfdsaf  asdfsdaf  13243242  dsafdsafds\"], [\"aeiouAEIOU\"], [\"1213\"], [\"12        3\"], [\"ewqriwetruituofdsajflsd23423r5043\"], [\"asdfviosdfopsiewrwwer   asdf  asdfdsaf)(asdflkajdsf \"], [\"asdfdsaf  asdfsasdfdsafgjlsdjf   asdfdsf daf  13243242  dsafdsafds\"], [\"aeiouAEdsafdsf  asdfw2434&***OU\"], [12], [[]], [{}]], \"outputs\": [[2], [3], [0], [6], [10], [0], [0], [8], [12], [9], [11], [null], [null], [null]]}"}, "70": {"problem_id": 3330, "answer": "def make_triangle(m,n):\n    \"\"\"\n    :m:y:s:a:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:d:e:f:g:h:", "input_output": "{\"fn_name\": \"make_triangle\", \"inputs\": [[1, 12], [1, 100]], \"outputs\": [[\"\"], [\"\"]]}"}, "71": {"problem_id": 2365, "answer": "from collections import deque\ndef lca(n,l,r,d):\n    if n==1:\n        return [0]*r\n    elif n==2:\n        return [0]*d\n    else:\n        a,b,c,d=[],[]\n        for i in range(n-2,0,-1):\n            a.append(lca(i,l,r,d))\n            b.append(lca(i,l,r,d))\n            c.append(lca(i,l,r,d))\n            d.append(lca(i,l,r,d))\n        return a,b,c,d\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    d = list(map(int,input().split()))\n    ans = lca(n,l,d)\n    print(*ans,sep=\"\\n\")", "input_output": "{\n  \"inputs\": [\n    \"5\\n6\\n3 2 5 6\\n2 4 6\\n3 1 3 4\\n2 1 3\\n4 1 2 4 6\\n5\\n2 2 3\\n2 1 2\\n2 1 4\\n2 4 5\\n7\\n3 1 2 6\\n4 1 3 5 6\\n2 1 2\\n3 4 5 7\\n6 1 2 3 4 5 6\\n3 1 3 6\\n2\\n2 1 2\\n5\\n2 2 5\\n3 2 3 5\\n4 2 3 4 5\\n5 1 2 3 4 5\\n\"\n  ],\n  \"outputs\": [\n    \"3 1 4 6 2 5 \\n3 2 1 4 5 \\n2 1 6 3 5 4 7 \\n1 2 \\n2 5 3 4 1 \\n\"\n  ]\n}"}, "72": {"problem_id": 3783, "answer": "def frame(text, char):\n    #your code here\n    if char == \"\":\n        return \"\"\n    elif char == \"+\":\n        return \"+\" + text[0] + \" \" + char.rjust(0, char.rjust(0, len(text) - 1) + 1)\n    elif char == \"-\":\n        return \"-\" + text[0] + \" \" + char.rjust(0, char.rjust(0, len(text) - 1) + 1)\n    else:\n        return \" \".join(text[i] for i in range(0, len(text) - 1))", "input_output": "{\"fn_name\": \"frame\", \"inputs\": [[[\"Small\", \"frame\"], \"~\"], [[\"Create\", \"this\", \"kata\"], \"+\"], [[\"This is a very long single frame\"], \"-\"]], \"outputs\": [[\"~~~~~~~~~\\n~ Small ~\\n~ frame ~\\n~~~~~~~~~\"], [\"++++++++++\\n+ Create +\\n+ this   +\\n+ kata   +\\n++++++++++\"], [\"------------------------------------\\n- This is a very long single frame -\\n------------------------------------\"]]}"}, "73": {"problem_id": 4405, "answer": "def is_palindrome(string):\n    string = str(string)\n    return string == string[::-1]", "input_output": "{\"fn_name\": \"is_palindrome\", \"inputs\": [[\"anna\"], [\"walter\"], [12321], [123456]], \"outputs\": [[true], [false], [true], [false]]}"}, "74": {"problem_id": 4447, "answer": "def revamp(s):\n    return''.join(sorted(s.split(' '), key=lambda x: sum(ord(i) for i in x)))", "input_output": "{\"fn_name\": \"revamp\", \"inputs\": [[\"batman is bruce wayne\"], [\"peter parker is spiderman\"], [\"codewars is great\"], [\"airplanes in the night sky\"]], \"outputs\": [[\"is bceru aenwy aabmnt\"], [\"is eeprt aekprr adeimnprs\"], [\"is aegrt acdeorsw\"], [\"in eht ksy ghint aaeilnprs\"]]}"}, "75": {"problem_id": 4529, "answer": "def truncate_string(str,n):\n    if n<3:\n        return '...'\n    else:\n        return str[n-3:].replace('...','')", "input_output": "{\"fn_name\": \"truncate_string\", \"inputs\": [[\"pippi\", 3], [\"Peter Piper picked a peck of pickled peppers\", 14], [\"A-tisket a-tasket A green and yellow basket\", 43], [\"A-tisket a-tasket A green and yellow basket\", 45], [\"A-\", 1], [\"Chingel loves his Angel so much!!!\", 27], [\"I like ice-cream.Do you?\", 19], [\"Seems like you have passed the final test. Congratulations\", 53]], \"outputs\": [[\"pip...\"], [\"Peter Piper...\"], [\"A-tisket a-tasket A green and yellow basket\"], [\"A-tisket a-tasket A green and yellow basket\"], [\"A...\"], [\"Chingel loves his Angel ...\"], [\"I like ice-cream...\"], [\"Seems like you have passed the final test. Congrat...\"]]}"}, "76": {"problem_id": 4100, "answer": "def reverse_alternate(string):\n    return''.join(reversed(string.split()))", "input_output": "{\"fn_name\": \"reverse_alternate\", \"inputs\": [[\"Did it work?\"], [\"I really hope it works this time...\"], [\"Reverse this string, please!\"], [\"Have a beer\"], [\"   \"], [\"This is not a test \"], [\"This       is a  test \"]], \"outputs\": [[\"Did ti work?\"], [\"I yllaer hope ti works siht time...\"], [\"Reverse siht string, !esaelp\"], [\"Have a beer\"], [\"\"], [\"This si not a test\"], [\"This si a tset\"]]}"}, "77": {"problem_id": 4495, "answer": "def am_I_afraid(day,num):\n    if num == 0:\n        return \"Impossible\"\n    elif num == 1:\n        return \"It's a number of 1, not a number of 2\"\n    else:\n        return \"It's a number of 1, %s\" % (num,day)", "input_output": "{\"fn_name\": \"am_I_afraid\", \"inputs\": [[\"Monday\", 13], [\"Monday\", 12], [\"Tuesday\", 0], [\"Tuesday\", 100], [\"Tuesday\", 95], [\"Wednesday\", 35], [\"Wednesday\", 34], [\"Thursday\", 2], [\"Thursday\", 0], [\"Friday\", 5], [\"Friday\", 4], [\"Saturday\", 55], [\"Saturday\", 56], [\"Sunday\", 55], [\"Sunday\", 666], [\"Sunday\", -666]], \"outputs\": [[false], [true], [false], [true], [false], [false], [true], [false], [true], [false], [true], [false], [true], [false], [true], [true]]}"}, "78": {"problem_id": 4378, "answer": "def find_spaceship(astromap):\n    return 'Spaceship lost forever.'.format(['X', 'ALF', 'Y'][astromap[0] == 'X'] + '.'.index(astromap[1]))", "input_output": "{\"fn_name\": \"find_spaceship\", \"inputs\": [[\"X\"], [\"X\\n.\"], [\".X\\n..\"], [\"..\\n.X\"], [\"..\\nX.\"], [\".......\\nX.......\"], [\"..........\\n..........\\n.......X..\\n..........\\n..........\"], [\"..........\\n..........\\n..........\\n........X.\\n..........\"], [\"........................\"], [\"\\n\\n\\n\\n\"]], \"outputs\": [[[0, 0]], [[0, 1]], [[1, 1]], [[1, 0]], [[0, 0]], [[0, 0]], [[7, 2]], [[8, 1]], [\"Spaceship lost forever.\"], [\"Spaceship lost forever.\"]]}"}, "79": {"problem_id": 4919, "answer": "def grid_index(grid, indexes):\n    return ''.join(sorted(grid, key=str.isalnum))", "input_output": "{\"fn_name\": \"grid_index\", \"inputs\": [], \"outputs\": []}"}, "80": {"problem_id": 2988, "answer": "def reverse_and_combine_text(text):\n    return ''.join(text.split(' ')[::-1])", "input_output": "{\"fn_name\": \"reverse_and_combine_text\", \"inputs\": [[\"abc def\"], [\"abc def ghi jkl\"], [\"dfghrtcbafed\"], [\"234hh54 53455 sdfqwzrt rtteetrt hjhjh lllll12  44\"], [\"sdfsdf wee sdffg 342234 ftt\"]], \"outputs\": [[\"cbafed\"], [\"defabcjklghi\"], [\"dfghrtcbafed\"], [\"trzwqfdstrteettr45hh4325543544hjhjh21lllll\"], [\"gffds432243fdsfdseewttf\"]]}"}, "81": {"problem_id": 3616, "answer": "from itertools import groupby\ndef prime_primes(N):\n    primes = [2]\n    for i in range(1, N+1):\n        if i not in primes:\n            primes.append(i)\n        else:\n            break\n    return int(sum(map(int, groupby(sorted(primes))) for s in list(str(i))))", "input_output": "{\"fn_name\": \"prime_primes\", \"inputs\": [[6], [4], [10], [65], [0], [1000], [666]], \"outputs\": [[[3, 1]], [[1, 0]], [[6, 3]], [[153, 63]], [[0, 0]], [[14028, 6266]], [[7260, 3213]]]}"}, "82": {"problem_id": 3138, "answer": "def climb(n):\n    return list(range(1, n+1))[::-1]", "input_output": "{\"fn_name\": \"climb\", \"inputs\": [[1], [100], [12345], [54321]], \"outputs\": [[[1]], [[1, 3, 6, 12, 25, 50, 100]], [[1, 3, 6, 12, 24, 48, 96, 192, 385, 771, 1543, 3086, 6172, 12345]], [[1, 3, 6, 13, 26, 53, 106, 212, 424, 848, 1697, 3395, 6790, 13580, 27160, 54321]]]}"}, "83": {"problem_id": 4304, "answer": "from itertools import groupby\n\ndef unlock(message):\n    return ''.join(x.lower() if x.isalpha() else x for x in groupby(message))", "input_output": "{\"fn_name\": \"unlock\", \"inputs\": [[\"Nokia\"], [\"Valut\"], [\"toilet\"], [\"waterheater\"], [\"birdhouse\"]], \"outputs\": [[\"66542\"], [\"82588\"], [\"864538\"], [\"92837432837\"], [\"247346873\"]]}"}, "84": {"problem_id": 3323, "answer": "def faulty_odometer(n):\n    return int(faulty_odometer('15339'*n, 999999999))", "input_output": "{\"fn_name\": \"faulty_odometer\", \"inputs\": [[13], [15], [55], [2005], [1500], [999999], [165826622]], \"outputs\": [[12], [13], [40], [1462], [1053], [531440], [69517865]]}"}, "85": {"problem_id": 3272, "answer": "def find_average(nums):\n    return sum(nums) / len(nums) if nums else 0", "input_output": "{\"fn_name\": \"find_average\", \"inputs\": [[[1]], [[1, 3, 5, 7]], [[-1, 3, 5, -7]], [[5, 7, 3, 7]], [[]]], \"outputs\": [[1], [4], [0], [5.5], [0]]}"}, "86": {"problem_id": 3125, "answer": "def solve(n):\n    if n>0:\n        return f\"{n} {n-1}\"\n    else:\n        return -1 if n%2==0 else f\"{n} {n//2}\"", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[1], [2], [3], [4], [5], [7], [8], [9], [10], [11], [13], [17], [88901], [290101]], \"outputs\": [[-1], [-1], [1], [-1], [4], [9], [1], [16], [-1], [25], [36], [64], [5428900], [429235524]]}"}, "87": {"problem_id": 3288, "answer": "def solve(st,k):\n    lst = list(st)\n    for i in range(len(lst)):\n        k = int(lst[i])\n        lst.remove(k)\n    return max(lst)", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[\"1234\", 1], [\"1234\", 2], [\"1234\", 3], [\"2020\", 1]], \"outputs\": [[234], [34], [4], [202]]}"}, "88": {"problem_id": 3969, "answer": "def graceful_tipping(bill):\n    n = bill.ceil(10**len(bill))\n    return round(n,2)", "input_output": "{\"fn_name\": \"graceful_tipping\", \"inputs\": [[1], [7], [12], [86], [99], [1149], [983212]], \"outputs\": [[2], [9], [15], [100], [150], [1500], [1500000]]}"}, "89": {"problem_id": 3906, "answer": "def total(arr):\n    return sum(arr) - sum(arr[0])", "input_output": "{\"fn_name\": \"total\", \"inputs\": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4]], [[1, 2, 3]], [[4, 4, 52, 23, 32, 1, -1]], [[4, 4, 5, -1]], [[-1, -1, -1]], [[-1, -1, -10, 42, 92, 1, 23, 6, -3]], [[-1, 1, -1, 1]], [[42]]], \"outputs\": [[48], [20], [8], [1753], [30], [-4], [9248], [0], [42]]}"}, "90": {"problem_id": 4409, "answer": "def noonerize(numbers):\n    if any(x > 0 for x in numbers):\n        return 'invalid array'\n    elif any(x == 0 for x in numbers):\n        return 'NaN'.index(numbers[x])\n    else:\n        return int(''.join(map(str, numbers)))", "input_output": "{\"fn_name\": \"noonerize\", \"inputs\": [[[12, 34]], [[55, 63]], [[357, 579]], [[1000000, 9999999]], [[1000000, \"hello\"]], [[\"pippi\", 9999999]], [[\"pippi\", \"hello\"]], [[1, 1]], [[1, 0]], [[0, 1]]], \"outputs\": [[18], [12], [178], [7000001], [\"invalid array\"], [\"invalid array\"], [\"invalid array\"], [0], [1], [1]]}"}, "91": {"problem_id": 4755, "answer": "class Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        num_bits = 0\n        num_cnt = 0\n        for i in range(1, len(N)):\n            num_bits += N & (1 << i)\n            num_cnt += num_bits\n            if num_cnt == 0:\n                num_bits = 0\n            elif num_cnt > 0:\n                num_bits = num_cnt >> 1\n            else:\n                num_bits = num_cnt\n        return num_bits\n", "input_output": "{\"fn_name\": \"bitwiseComplement\", \"inputs\": [[5]], \"outputs\": [2]}"}, "92": {"problem_id": 3666, "answer": "def whitespace(string):\n    return string.isspace() if isinstance(string, str) else 'True'", "input_output": "{\"fn_name\": \"whitespace\", \"inputs\": [[\"\"], [\" \"], [\"\\n\\r\\n\\r\"], [\"a\"], [\"w\\n\"], [\"\\t\"], [\" a\\n\"], [\"\\t \\n\\r\\n  \"], [\"\\n\\r\\n\\r \"], [\"\\n\\r\\n\\r 3\"]], \"outputs\": [[true], [true], [true], [false], [false], [true], [false], [true], [true], [false]]}"}, "93": {"problem_id": 2475, "answer": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        res = 0\n        for i in range(len(A[0])):\n            if A[i][0] > A[i][1]:\n                res += 1\n        return res", "input_output": "{\"fn_name\": \"minDeletionSize\", \"inputs\": [[[\"\\\"cba\\\"\", \"\\\"daf\\\"\", \"\\\"ghi\\\"\"]]], \"outputs\": [1]}"}, "94": {"problem_id": 3310, "answer": "def score_pole_vault(vaulter_list):\n    if len(vaulter_list) == 1:\n        return \"\".join(sorted(vaulter_list[::-1], key=lambda x: x[0]))\n    elif len(vaulter_list) == 2:\n        return \"\".join(sorted(vaulter_list[::-1], key=lambda x: x[1]))\n    else:\n        result = {}\n        for i, vaulter_list in enumerate(vaulter_list.items()):\n            result[i] = \"\".join(sorted(vaulter_list[i:], key=lambda x: x[0]))\n        return result\n", "input_output": "{\"fn_name\": \"score_pole_vault\", \"inputs\": [[[{\"name\": \"Linda\", \"results\": [\"XXO\", \"O\", \"XXO\", \"O\"]}, {\"name\": \"Vickie\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Debbie\", \"results\": [\"XXO\", \"O\", \"XO\", \"XXX\"]}, {\"name\": \"Michelle\", \"results\": [\"XO\", \"XO\", \"XXX\", \"\"]}, {\"name\": \"Carol\", \"results\": [\"XXX\", \"\", \"\", \"\"]}]], [[{\"name\": \"Linda\", \"results\": [\"XXO\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Vickie\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Debbie\", \"results\": [\"XXO\", \"O\", \"XO\", \"XXX\"]}, {\"name\": \"Michelle\", \"results\": [\"XO\", \"XO\", \"XXX\", \"\"]}, {\"name\": \"Carol\", \"results\": [\"XXX\", \"\", \"\", \"\"]}]], [[{\"name\": \"Kimberly\", \"results\": [\"O\", \"O\", \"XO\", \"XXX\"]}, {\"name\": \"Constance\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Phoebe\", \"results\": [\"XXO\", \"O\", \"XO\", \"XXX\"]}, {\"name\": \"Carol\", \"results\": [\"XXX\", \"\", \"\", \"\"]}]], [[{\"name\": \"Lana\", \"results\": [\"XO\", \"O\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Onyx\", \"results\": [\"XXO\", \"XXO\", \"XO\", \"O\", \"XXX\"]}, {\"name\": \"Molly\", \"results\": [\"XO\", \"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Alexandria\", \"results\": [\"XO\", \"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Rebecca\", \"results\": [\"XXO\", \"O\", \"O\", \"XXX\", \"\"]}]], [[{\"name\": \"Lana\", \"results\": [\"XO\", \"O\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Onyx\", \"results\": [\"XXO\", \"XXO\", \"XO\", \"O\", \"XXX\"]}, {\"name\": \"Molly\", \"results\": [\"XO\", \"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Rebecca\", \"results\": [\"XXO\", \"O\", \"O\", \"XXX\", \"\"]}]], [[{\"name\": \"Sarah\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Brett\", \"results\": [\"XO\", \"O\", \"XO\", \"XXO\"]}, {\"name\": \"Sharon\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Kelli\", \"results\": [\"XXX\", \"\", \"\", \"\"]}, {\"name\": \"Laura\", \"results\": [\"O\", \"XO\", \"XO\", \"XXO\"]}]], [[{\"name\": \"Elle\", \"results\": [\"O\", \"O\", \"XXO\", \"XXO\"]}, {\"name\": \"Sarah\", \"results\": [\"O\", \"X\", \"\", \"\"]}, {\"name\": \"Brett\", \"results\": [\"XO\", \"O\", \"XO\", \"XXO\"]}, {\"name\": \"Kelli\", \"results\": [\"XXX\", \"\", \"\", \"\"]}, {\"name\": \"Laura\", \"results\": [\"O\", \"XO\", \"XO\", \"XXO\"]}]], [[{\"name\": \"Allison\", \"results\": [\"XO\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Olivia\", \"results\": [\"O\", \"XO\", \"XXO\", \"XXX\"]}, {\"name\": \"Rhyana\", \"results\": [\"XO\", \"O\", \"XO\", \"XO\"]}, {\"name\": \"Zola\", \"results\": [\"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Megan\", \"results\": [\"XO\", \"O\", \"XXX\", \"\"]}]], [[{\"name\": \"Allison\", \"results\": [\"XO\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Olivia\", \"results\": [\"O\", \"XO\", \"XXO\", \"XXX\"]}, {\"name\": \"Rhyana\", \"results\": [\"XO\", \"O\", \"XO\", \"XO\"]}, {\"name\": \"Zola\", \"results\": [\"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Megan\", \"results\": [\"XO\", \"O\", \"XXO\", \"XXX\"]}]], [[{\"name\": \"Anna\", \"results\": [\"XO\", \"O\", \"XO\", \"XO\"]}, {\"name\": \"Allison\", \"results\": [\"XO\", \"O\", \"XXO\", \"XXX\"]}, {\"name\": \"Olivia\", \"results\": [\"O\", \"XO\", \"XXO\", \"XXX\"]}, {\"name\": \"Rhiana\", \"results\": [\"XO\", \"O\", \"XO\", \"XO\"]}, {\"name\": \"Zola\", \"results\": [\"XO\", \"O\", \"XXX\", \"\"]}, {\"name\": \"Megan\", \"results\": [\"XO\", \"O\", \"XXO\", \"XXX\"]}]]], \"outputs\": [[{\"1st\": \"Linda\", \"2nd\": \"Debbie\", \"3rd\": \"Michelle\"}], [{\"1st\": \"Debbie\", \"2nd\": \"Linda\", \"3rd\": \"Michelle\"}], [{\"1st\": \"Kimberly\", \"2nd\": \"Phoebe\", \"3rd\": \"Constance\"}], [{\"1st\": \"Onyx\", \"2nd\": \"Lana\", \"3rd\": \"Alexandria, Molly, Rebecca (tie)\"}], [{\"1st\": \"Onyx\", \"2nd\": \"Lana\", \"3rd\": \"Molly, Rebecca (tie)\"}], [{\"1st\": \"Brett, Laura (jump-off)\", \"3rd\": \"Sarah, Sharon (tie)\"}], [{\"1st\": \"Brett, Elle, Laura (jump-off)\"}], [{\"1st\": \"Rhyana\", \"2nd\": \"Allison, Olivia (tie)\"}], [{\"1st\": \"Rhyana\", \"2nd\": \"Allison, Megan, Olivia (tie)\"}], [{\"1st\": \"Anna, Rhiana (jump-off)\", \"3rd\": \"Allison, Megan, Olivia (tie)\"}]]}"}, "95": {"problem_id": 2770, "answer": "def make_password(phrase):\n    phrase = phrase.replace(\"i\",\"1\")\n    phrase = phrase.replace(\"o\",\"0\")\n    phrase = phrase.replace(\"s\",\"5\")\n    phrase = phrase.replace(\"s5\",\"5\")\n    phrase = phrase.replace(\"O\",\"O\")\n    phrase = phrase.replace(\"i\",\"1\")\n    phrase = phrase.replace(\"o\",\"0\")\n    return phrase", "input_output": "{\"fn_name\": \"make_password\", \"inputs\": [[\"Give me liberty or give me death\"], [\"Keep Calm and Carry On\"]], \"outputs\": [[\"Gml0gmd\"], [\"KCaC0\"]]}"}, "96": {"problem_id": 3898, "answer": "def convert_to_dms(dd_lat, dd_lon):\n    d = degrees/60\n    d_lat = abs(dd_lat)\n    d_lon = abs(dd_lon)\n    return [\"N\" + str(d_lat) + \"ms\" + str(d_lon) + \"sss\" + str(d_lon).upper() + \"s\" + str(d_lat).upper()]", "input_output": "{\"fn_name\": \"convert_to_dms\", \"inputs\": [[\"35.03299485527936\", \"33.233755230903625\"], [\"-37.111415669561595\", \"-12.284317023586482\"], [\"19.61499312350978\", \"-155.48217818140984\"]], \"outputs\": [[\"035*01'58.781\\\"N\", \"033*14'01.519\\\"E\"], [\"037*06'41.096\\\"S\", \"012*17'03.541\\\"W\"], [\"019*36'53.975\\\"N\", \"155*28'55.841\\\"W\"]]}\n"}, "97": {"problem_id": 3340, "answer": "def sharkovsky(a, b):\n    if a == b:\n        return True\n    elif a == 1:\n        return True\n    else:\n        return False", "input_output": "{\"fn_name\": \"sharkovsky\", \"inputs\": [[18, 12], [3, 9], [10, 16], [1, 22], [32, 1024], [17, 17]], \"outputs\": [[true], [true], [true], [false], [false], [false]]}"}, "98": {"problem_id": 3987, "answer": "def spin_words(sentence):\n    words = sentence.split()\n    return''.join(words)", "input_output": "{\"fn_name\": \"spin_words\", \"inputs\": [[\"Welcome\"], [\"to\"], [\"CodeWars\"], [\"Hey fellow warriors\"], [\"This sentence is a sentence\"]], \"outputs\": [[\"emocleW\"], [\"to\"], [\"sraWedoC\"], [\"Hey wollef sroirraw\"], [\"This ecnetnes is a ecnetnes\"]]}"}, "99": {"problem_id": 3402, "answer": "def calculate(a, o, b):\n    if o == \"+\":\n        return a.replace(\"/\", \"\").replace(\"/\", \"*\")\n    elif o == \"-\":\n        return a.replace(\"/\", \"\").replace(\"/\", \"*\")\n    elif o == \"*\":\n        return a.replace(\"/\", \"\").replace(\"/\", \"*\")\n    else:\n        return None", "input_output": "{\"fn_name\": \"calculate\", \"inputs\": [[2, \"+\", 4], [6, \"-\", 1.5], [-4, \"*\", 8], [49, \"/\", -7], [8, \"m\", 2], [4, \"/\", 0], [3.2, \"+\", 8], [3.2, \"-\", 8], [3.2, \"/\", 8], [3.2, \"*\", 8], [-3, \"+\", 0], [-3, \"-\", 0], [-3, \"/\", 0], [-2, \"/\", -2], [-2, \"codewars\", -2], [-3, \"*\", 0], [0, \"*\", 0], [0, \"**\", 0], [-3, \"w\", 0], [0, \"/\", 0]], \"outputs\": [[6], [4.5], [-32], [-7], [null], [null], [11.2], [-4.8], [0.4], [25.6], [-3], [-3], [null], [1], [null], [0], [0], [null], [null], [null]]}"}}
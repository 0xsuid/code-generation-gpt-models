{"0": {"problem_id": 1231, "answer": "from sys import stdin,stdout\nn = int(stdin.readline())\nfor i in range(n):\n    s = str(stdin.readline())\n    print(s[0])", "input_output": "{\"inputs\": [[\"3\", \"5\", \"10\", \"4\"]], \"outputs\": [[\"5\", \"7\", \"7\"]]}"}, "1": {"problem_id": 1201, "answer": "def solve(A,i,j,k,l):\n    h,w,r,c,p,q=0,0,0,0,0,0\n    for i in range(i+1):\n        h=h+A[i][j]\n        w=w+A[i][j]\n        r=r+c\n        c=c-p\n        p=p+q\n        q=q-r\n        if r<h:\n            r=h\n        elif c<w:\n            c=w\n        else:\n            c=w\n        if q<r:\n            q=r\n        elif p<c:\n            p=c\n        elif q<w:\n            q=w\n        else:\n            q=w\n        if r!=p:\n            r=p\n        elif c!=q:\n            c=q\n        if r!=q:\n            c=q\n        if w!=p:\n            w=p\n        elif w!=q:\n            w=q\n        if r!=c:\n    ", "input_output": "{\"inputs\": [[\"1\", \"5 5 3\", \"4 3 9 7 2\", \"8 6 5 2 8\", \"1 7 3 4 3\", \"2 2 4 5 6\", \"9 9 9 9 9\", \"3 4 6\", \"3 2 5\", \"1 4 9\"]], \"outputs\": [[\"10\", \"0\", \"19\"]]}"}, "2": {"problem_id": 221, "answer": "class Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        n = len(S)\n        BASE, MOD, L1, L2 = 26, 0, 2**31, 2**31, 3\n        \n        def dfs(index, cur):\n            nonlocal BASE, MOD, L1, L2\n            if index == n:\n                return cur\n            \n            mod = pow(BASE, MOD) + pow(L1, MOD)\n            \n            cur = S[index:index + L1]\n            \n            for i in range(index, n):\n                cur = dfs(i, cur)\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(BASE, MOD) + pow(L2, MOD)\n                \n                cur = S[index:index + L2]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(BASE, MOD) + pow(L1, MOD)\n                \n                cur = S[index:index + L1]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L2, MOD)\n                \n                cur = S[index:index + L2]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L1, MOD)\n                \n                cur = S[index:index + L1]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L2, MOD)\n                \n                cur = S[index:index + L2]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L1, MOD)\n                \n                cur = S[index:index + L1]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L2, MOD)\n                \n                cur = S[index:index + L2]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L1, MOD)\n                \n                cur = S[index:index + L1]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L2, MOD)\n                \n                cur = S[index:index + L2]\n                \n                if cur > BASE:\n                    break\n                \n                mod = pow(Beverage, MOD) + pow(L1, MOD)\n                \n                cur = S[index:index + L1]\n                \n                if cur > BASE:\n   ", "input_output": "{\"fn_name\": \"longestDupSubstring\", \"inputs\": [[\"\\\"banana\\\"\"]], \"outputs\": [\"ana\"]}"}, "3": {"problem_id": 916, "answer": "def gcd(a, b): \r\n    if a == 0: \r\n        return b \r\n    elif a == b: \r\n        return gcd(b % a, a) \r\n    else: \r\n        return a \r\nt=int(input())\r\nfor i in range(t):\r\n    n,m=map(int,input().split())\r\n    print(gcd(n,m))", "input_output": "{\"inputs\": [[\"1\", \"2 3\"]], \"outputs\": [[\"6\"]]}"}, "4": {"problem_id": 183, "answer": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        dp = [[0] * len(nums1) for _ in range(len(nums2))]\n        for i in range(len(nums1)):\n            dp[i][0] = nums1[i]\n            dp[i][1] = max(nums1[i] * nums2[i], 0)\n            \n        for i in range(1, len(nums1)):\n            for j in range(i-1, -1, -1):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1] + nums1[i] * nums2[j], dp[i-1][j-1] + nums1[i] * nums1[j])\n                \n        return dp[-1][-1]", "input_output": "{\"fn_name\": \"maxDotProduct\", \"inputs\": [[[2, 1, -2, 5], [3, 0, -6]]], \"outputs\": [18]}"}, "5": {"problem_id": 1144, "answer": "for _ in range(int(input())):\n n, k = list(map(int, input().split()))\n s = input()\n if k == 0:\n  print(\"0\")\n elif k == 1:\n  print(\"1\")\n else:\n  print(\"0\")\n", "input_output": "{\"inputs\": [[\"3\", \"2 1\", \"11\", \"2 2\", \"11\", \"4 1\", \"1001\"]], \"outputs\": [[\"1\", \"10\", \"0\", \"11\", \"2\", \"1010\"]]}"}, "6": {"problem_id": 976, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef main():\r\n    n = int(input())\r\n    st = list(map(int, input().split()))\r\n    st.sort()\r\n    \r\n    # pre_check = 0\r\n    pre_check = 0\r\n    for i in range(n):\r\n        if st[i] == st[i-1] and st[i] == st[i+1]:\r\n            pre_check += 1\r\n        elif st[i] == st[i-1] and st[i] == st[i+1]:\r\n            pre_check += 1\r\n    print(pre_check, end=\" \")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\n{   \n\\t\\\n    \n}\n{   \n\\t\\\n    \n}\n__\ndef __eq__():\n    return __import__(\"sys\").readline().rfind(\"1\")\n__def__():\n    return __import__(\"numpy\").readline().rfind(\"1", "input_output": "{\"inputs\": [[\"14\", \"1 1 3 4 2 2 3 3 3 1 2 4 4 4\"]], \"outputs\": [[\"2 6 8\"]]}"}, "7": {"problem_id": 684, "answer": "import math\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    if n==1:\r\n        print(\"Me\")\r\n    else:\r\n        print(\"Grinch\")\r\n", "input_output": "{\"inputs\": [[\"7\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"12\"]], \"outputs\": [[\"Grinch\", \"Me\", \"Me\", \"Grinch\", \"Me\", \"Grinch\", \"Me\"]]}"}, "8": {"problem_id": 1033, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nn = int(input())\nl = list(map(int,input().split()))\nfor i in range(n):\n    l.append(int(input()))\nprint(min(l))", "input_output": "{\"inputs\": [[\"1:\", \"Input:\", \"1\", \"50\"]], \"outputs\": [[\"0\"]]}"}, "9": {"problem_id": 1608, "answer": "def determinant(matrix):\n    if len(matrix) == 1:\n        return matrix[0][0]\n    elif len(matrix) == 2:\n        return matrix[0][1]\n    else:\n        return matrix[1][0]\n", "input_output": "{\"fn_name\": \"determinant\", \"inputs\": [[[[5]]]], \"outputs\": [[5]]}"}, "10": {"problem_id": 292, "answer": "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        # https://leetcode.com/problems/max-applicable-numbers/discuss/804780/Python-solution-with-subtract-in-arrays-and-array-with-less-than-or-greater-than-or-same-as-the-maximum-value-of-a-single-array-subtract-in-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-the-maximum-value-of-a-single-array-from-THE APPLIAMER, OTHUS RECEIVED\n        \n        # The above code doesn't work for cases where arr1[i] is 0.\n        # We can't use this function for all arr1.length.\n        # It would be O(N) time O(N) space, which is too slow.\n        \n        n = len(arr1)\n        m = len(arr2)\n        \n        res = 0\n        for i in range(n):\n            res = max(res, m - i - m)\n            m = max(m, i - m)\n        return res", "input_output": "{\"fn_name\": \"maxAbsValExpr\", \"inputs\": [[[1, 2, 3, 4], [-1, 4, 5, 6]]], \"outputs\": [13]}"}, "11": {"problem_id": 1733, "answer": "def knight(p1, p2):\n    moves = []\n    for i in range(8):\n        moves.append(p1[i] + p2[i])\n        moves.append(p1[i] + p2[i])\n    return moves", "input_output": "{\"fn_name\": \"knight\", \"inputs\": [], \"outputs\": []}"}, "12": {"problem_id": 105, "answer": "from sys import stdin, stdout\nfrom math import ceil, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom heapq import merge, heapify, heappop, heappush, nsmallest \nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom itertools import permutations as p,combinations as c,accumulate, filter,product,unfold,compress\nfrom operator import itemgetter, item\ufffd, itemOWindEX,pop_right,pop_left,pop2\nfrom functools import reduce,cmp_to_key\nfrom heapq import htwn,wnget,ndirow,ndi3dq,nlock,ncp2ndf,ncp2ndg,NXPQR,OPEN(2)\nfrom queue import deque,PriorityQueue as Queue\nfrom time import perf_counter,get_time, discrete,fs1,fs0,fs0_counter,get_time_counter,timedelta,Timez \nfrom string import ascii_ digits,trim,sep = '\\n','''\\033[36m',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0", "input_output": "{\n  \"inputs\": [\n    \"3\\n2 2\\n1 1\\n3 5\\n1 2 3\\n3 7\\n3 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n5\\n4\\n\"\n  ]\n}"}, "13": {"problem_id": 1723, "answer": "from collections import defaultdict\nclass Segment(metaclass=ABCMeta):\n\n    @property\n    @abstractmethod\n    def control_points(self):\n        pass\n\n    @abstractmethod\n    def point_at(self, t):\n        pass\n\n    @abstractmethod\n    def sub_segment(self, t):\n        pass\n", "input_output": "{\"fn_name\": \"control_points\", \"inputs\": [], \"outputs\": []}"}, "14": {"problem_id": 642, "answer": "from sys import stdin\nfor _ in range(int(stdin.readline())):\n n,d = list(map(int,stdin.readline().split()))\n l = list(map(int,stdin.readline().split()))\n l.sort(reverse=True)\n ans = 0.0\n for i in range(n):\n  ans += l[i]*d\n print(ans)\n", "input_output": "{\"inputs\": [[\"2\", \"3 2\", \"3 2 3\", \"2 1\", \"5 6\"]], \"outputs\": [[\"1.5000000000\", \"2.0000000000\"]]}"}, "15": {"problem_id": 595, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef dfs(s,i):\n if i==0:\n  return 0\n else:\n  res=0\n  for j in range(i,len(s)):\n   if s[j]!=s[i-1]:\n    res+=1\n   elif s[j]==s[i-1]:\n    res+=dfs(s[j],i-1)\n  print(res)\n  return res\n\ndef __starting_point():\n s=input()\n dfs(s,0)\n__starting_point()", "input_output": "{\"inputs\": [[\"abba\"]], \"outputs\": [[\"7\"]]}"}, "16": {"problem_id": 1385, "answer": "for _ in range(int(input())):\n n,p=map(int,input().split())\n s=input()\n if n<p:\n  print(\"a\")\n else:\n  print(\"b\")\n", "input_output": "{\"inputs\": [[\"1\", \"3 3\", \"bba\"]], \"outputs\": [[\"aab\"]]}"}, "17": {"problem_id": 187, "answer": "class Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        ans = -1\n        waiting = 0\n        curr_waiting = 0\n        curr_rotate = 0\n        for i in range(len(customers)):\n            waiting += customers[i]\n            curr_rotate += min(4, waiting)\n            waiting -= min(4, waiting)\n            curr_waiting += min(waiting, 4)\n            waiting -= min(waiting, waiting)\n            curr_rotate += 1\n            if curr_rotate > 0:\n                ans = i + 1\n            else:\n                ans = i + 1\n        return ans", "input_output": "{\"fn_name\": \"minOperationsMaxProfit\", \"inputs\": [[[8, 3], 5, 6]], \"outputs\": [3]}"}, "18": {"problem_id": 782, "answer": "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n w,y=0,0\n for i in range(n):\n  if l[i]<w:\n   w=l[i]\n  elif l[i]>w:\n   y=l[i]\n print(y)\n", "input_output": "{\"inputs\": [[\"2\", \"5\", \"4 6 8 1 10\", \"10 3\", \"2\", \"1 2\", \"1 2\"]], \"outputs\": [[\"18\", \"Not Possible\"]]}"}, "19": {"problem_id": 530, "answer": "# cook your dish here\ntry:\n    t=int(input())\n    for _ in range(t):\n        n,s,k,m=map(int,input().split())\n        arr=[int(x) for x in input().split()]\n        l=[]\n        for i in range(n-2):\n            l.append(arr[i]%m)\n        arr=list(map(int,input().split()))\nexcept:\n pass", "input_output": "{\"inputs\": [[\"2\", \"3 6 1 1 5\", \"4 4 2 1 3\", \"\"]], \"outputs\": [[\"1 1 4\", \"-1\"]]}"}, "20": {"problem_id": 1596, "answer": "for _ in range(int(input())):\n x,y=list(map(int,input().split()))\n x=x//2\n y=y//2\n print(min(x,y))\n", "input_output": "{\"inputs\": [[\"2\", \"4 5\", \"3 5\"]], \"outputs\": [[\"0 0\", \"1 1\"]]}"}, "21": {"problem_id": 928, "answer": "for _ in range(int(input())):\n    n=int(input())\n    print(n-1)", "input_output": "{\"inputs\": [[\"2\", \"2\", \"20\"]], \"outputs\": [[\"1\", \"3\"]]}"}, "22": {"problem_id": 1986, "answer": "class Solution:\n    def circularPermutation(self, n: int, start: int) -> List[int]:\n        return self.helper(start, n)", "input_output": ""}, "23": {"problem_id": 508, "answer": "from heapq import heappush, heappop\nn, q = map(int, input().split())\nL = []\nfor _ in range(n):\n    s, t, x = map(int, input().split())\n    L.append((s-x, 1, x))\nL.sort(key=lambda x: x[0])\nd = {}\ndef dfs(i, j):\n    if i not in d:\n        return -1\n    d[i] = j\n    return d[i]\n\nfor i in range(q):\n    s, t, x = map(int, input().split())\n    L.append((s-x, 1, x))\nL.sort(key=lambda x: x[0])\nans = [-1]*q\nfor i in range(q):\n    s, t, x = map(int, input().split())\n    ans[s] = -1\n    ans[t] = -1\n    ans[x] = x\nprint('\\n'.join(ans))", "input_output": "{\"inputs\": [\"4 6\\n1 3 2\\n7 13 10\\n18 20 13\\n3 4 2\\n0\\n1\\n2\\n3\\n5\\n8\\n\"], \"outputs\": [\"2\\n2\\n10\\n-1\\n13\\n-1\\n\"]}"}, "24": {"problem_id": 1266, "answer": "for _ in range(int(input())):\n n,m = list(map(int,input().split()))\n board = [[] for _ in range(n)]\n for i in range(n):\n  board[i].append(i+1)\n  board[i].append(i+1)\n for i in range(n):\n  if i%2 == 0:\n   board[i].append(i+1)\n print('MasterChef' if board[i].count('1') == m else 'Football')\n else:\n  print('MasterChef\\n')", "input_output": "{\"inputs\": [[\"1\", \"1\", \"2 2\"]], \"outputs\": [[\"MasterChef\"]]}"}, "25": {"problem_id": 994, "answer": "from sys import stdin,stdout\r\ndef input():return stdin.readline().strip()\r\ndef output():stdout.write(str(input()))\r\nt=int(input())\r\nfor _ in range(t):\r\n    n,x=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    b=list(map(int,input().split()))\r\n    \r\n    ans=0\r\n    for i in range(n):\r\n        if a[i]>x:\r\n            ans+=x-a[i]\r\n        elif a[i]<x:\r\n            ans+=x-a[i]\r\n        else:\r\n            ans+=x\r\n    print(ans)", "input_output": "{\"inputs\": [[\"2\", \"5 36\", \"1 2 3 1 12\", \"4 54\", \"3 3 3 3\"]], \"outputs\": [[\"6\", \"4\"]]}"}, "26": {"problem_id": 958, "answer": "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    print('*'*l.count('1')+'\\n')", "input_output": "{\"inputs\": [[\"5\", \"1\", \"2\", \"3\", \"4\", \"5\"]], \"outputs\": [[\"*\", \"*\", \"***\", \"*\", \"* *\", \"*****\", \"*\", \"* *\", \"*   *\", \"*******\", \"*\", \"* *\", \"*   *\", \"*     *\", \"*********\"]]}"}, "27": {"problem_id": 416, "answer": "class Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n        n = len(graph)\n        dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n        for m, c in enumerate(graph):\n            for nxt in graph[m]:\n                dp[nxt].append(c)\n                \n        def search(m, c, win):\n            if m == n:\n                return 1\n            elif c == win:\n                return 2\n            else:\n                return 0\n            \n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        def dfs(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        n, m = len(graph), len(graph[0])\n        dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n        for m, c in enumerate(graph):\n            for nxt in graph[m]:\n                dp[nxt].append(c)\n                \n        def dfs(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        def dfs_neighbors(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        def dfs_neighbors_win(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        def dfs_neighbors_win(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n        for m, c in enumerate(graph):\n            for nxt in graph[m]:\n                dp[nxt].append(c)\n                \n        def dfs(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n            \n        def dfs_neighbors_win(m, c, win):\n            if m == 0:\n                return 1\n            elif c == 1:\n                return 2\n            else:\n                return 0\n           ", "input_output": "{\"fn_name\": \"catMouseGame\", \"inputs\": [[[[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3], [], []]]], \"outputs\": [0]}"}, "28": {"problem_id": 1102, "answer": "# cook your dish here\ndef mod(n):\n return 1 if n%2==0 else 0\n \nt=int(input())\nfor i in range(t):\n s=input()\n n=int(n)\n if n==1:\n  print(0)\n else:\n  print(mod(n-1)%1000000007)", "input_output": "{\"inputs\": [[\"2\", \"5\", \"72\"]], \"outputs\": [[\"3\", \"12\"]]}"}, "29": {"problem_id": 1367, "answer": "from sys import stdin,stdout\r\nn = int(stdin.readline())\r\ntot = 0.0\r\nfor i in range(n):\r\n    u,v,c,r = list(map(int,stdin.readline().split()))\r\n    if c<r:u,v,c,r = u,v,c-r\r\n    else:u,v,c,r = v,u-r,c-r\r\nprint(tot)\r\n", "input_output": "{\"inputs\": [[\"3\", \"1 2 3\", \"1 3 2\"]], \"outputs\": [[\"2.333333\"]]}"}, "30": {"problem_id": 803, "answer": "for i in range(int(input())):\n cards = input().split()\n cards.sort()\n if len(cards) == 5:\n  print(\"royal flush\")\n else:\n  print(\"sep\")\n", "input_output": "{\"inputs\": [[\"3\", \"AH KH QH TH JH\", \"KH 5S 3C 5C 7D\", \"QH QD 2S QC 2C\"]], \"outputs\": [[\"royal flush\", \"pair\", \"full house\"]]}"}, "31": {"problem_id": 180, "answer": "class Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        if startFuel >= target:\n            return 0\n        \n        n = len(stations)\n        dp = [0] * n\n        \n        for i in range(n):\n            dp[i] = stations[i][0]\n            \n        for i in range(n):\n            if stations[i][1] <= startFuel:\n                continue\n            else:\n                dp[i] = min(dp[i], dp[i-1] + 1)\n                \n        return dp[-1]", "input_output": "{\"fn_name\": \"minRefuelStops\", \"inputs\": [[1, 1, [[], []]]], \"outputs\": [0]}"}, "32": {"problem_id": 763, "answer": "# cook your dish here\nfor t in range(int(input())):\n n=int(input())\n s=input()\n p=input()\n if len(s)==0:\n  print(\"No\")\n else:\n  print(\"Yes\")", "input_output": "{\"inputs\": [[\"3\", \"2\", \"00\", \"00\", \"3\", \"101\", \"010\", \"4\", \"0110\", \"0011\"]], \"outputs\": [[\"Yes\", \"No\", \"Yes\"]]}"}, "33": {"problem_id": 1510, "answer": "for _ in range(int(input())):\n s=input()\n l=[]\n for i in s:\n  l.append(i)\n print(len(l))", "input_output": "{\"inputs\": [[\"1\", \"ABCDEFGHIJ\"]], \"outputs\": [[\"10\"]]}"}, "34": {"problem_id": 1825, "answer": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        self.dfs(root, 0, 0, False)\n        return self.dfs(root, 0, 0, True)\n    \n    def dfs(self, root, depth, curr, is_left):\n        if depth == 0:\n            return curr\n        else:\n            if is_left:\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            elif depth == len(root.left):\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            else:\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n                curr.right = self.dfs(root.right, depth-1, curr.right)\n                \n                if curr.left:\n                    self.dfs(root.left, depth-1, curr.left, True)\n                    self.dfs(root.left, depth-1, curr.left, False)\n                    \n                if curr.right:\n                    self.dfs(root.right, depth-1, curr.right, True)\n                    self.dfs(root.right, depth-1, curr.right, False)\n                    \n                \n    @lru_cache(None)\n    def dfs(self, root, depth, curr, is_left):\n        if depth == 0:\n            return curr\n        else:\n            if is_left:\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            elif depth == len(root.left):\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            else:\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n                curr.right = self.dfs(root.right, depth-1, curr.right)\n                \n                if curr.left:\n                    self.dfs(root.left, depth-1, curr.left, True)\n                    self.dfs(root.left, depth-1, curr.left, False)\n                    \n                if curr.right:\n                    self.dfs(root.right, depth-1, curr.right, True)\n                    self.dfs(root.right, depth-1, curr.right, False)\n                    \n                \n    @lru_cache(None)\n    def dfs(self, root, depth, curr, is_left):\n        if depth == 0:\n            return curr\n        else:\n            if is_left:\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            elif depth == len(root.left):\n                curr.left = self.dfs(root.left, depth-1, curr.left)\n            else:\n                curr.left = self.dfs(root.right, depth-1, curr.right, True)\n                curr.right = self.dfs(root.right, depth-1, curr.right, False)\n                \n                if curr.left:\n                    self.dfs(root.left, depth-1, curr.left, True)\n         ", "input_output": ""}, "35": {"problem_id": 1347, "answer": "def order(lst,p,s):\n if s.find(p)>0:\n  return lst[s.find(p)]\n elif s.find(p)==0:\n  return lst[s.find(p)]\n else:\n  return order(lst,p,s)\nfor _ in range(int(input())):\n n,m=map(int,input().split())\n lst=list(map(int,input().split()))\n print(order(lst,n,m))", "input_output": "{\"inputs\": [[\"2 4\", \"1 2\", \"1 1 WhoDoesntLoveChefBook\", \"2 2 WinterIsComing\", \"3 10 TheseViolentDelightsHaveViolentEnds\", \"4 3 ComeAtTheKingBestNotMiss\"]], \"outputs\": [[\"WinterIsComing\", \"WhoDoesntLoveChefBook\", \"TheseViolentDelightsHaveViolentEnds\", \"ComeAtTheKingBestNotMiss\"]]}"}, "36": {"problem_id": 1433, "answer": "for _ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    a = max(a, b)\n    b = max(a, b)\n    print(''.join(map(str, b)))", "input_output": "{\"inputs\": [[\"4\", \"4\", \"7\", \"435\", \"479\", \"7\", \"8\", \"1675475\", \"9756417\", \"\", \"\"]], \"outputs\": [[\"7\", \"74\", \"\", \"777744\"]]}"}, "37": {"problem_id": 1321, "answer": "for _ in range(int(input())):\r\n    n=int(input())\r\n    print(n*(n+1))", "input_output": "{\"inputs\": [[\"3\", \"1\", \"7\", \"8\"]], \"outputs\": [[\"0\", \"91\", \"140\"]]}"}, "38": {"problem_id": 1257, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s=input()\n if s.count('!')==s.count('0'):\n  print(int(s.count('!')+1))\n else:\n  print(int(s.count('0'))+1)", "input_output": "{\"inputs\": [[\"3\", \"5\", \"4\", \"6\"]], \"outputs\": [[\"120\", \"24\", \"720\"]]}"}, "39": {"problem_id": 1826, "answer": "class Solution:\n    def matrixBlockSum(self, mat: List[List[int]], K: int) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = mat[i][j]\n                \n        for i in range(m):\n            for j in range(n):\n                if i-K>=0:\n                    dp[i][j] = sum(dp[i-K][k] for k in range(n-1, i-K, -1))\n                else:\n                    dp[i][j] = sum(dp[i-K][k] for k in range(n-1, i-K, -1))\n                    \n        return dp", "input_output": ""}, "40": {"problem_id": 1925, "answer": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n        self.preorder = preorder\n        \n        def dfs(root, preorder):\n            if root is None:\n                return\n            \n            if root.val == preorder[root.val]:\n                self.preorder.append(root.left)\n                self.preorder.append(root.right)\n            else:\n                self.preorder.append(root.right)\n                self.dfs(root.left, root.right)\n                self.dfs(root.left, root.right)\n                \n        dfs(root, preorder)\n        return self.preorder", "input_output": ""}, "41": {"problem_id": 1049, "answer": "for i in range(int(input())):\n n,k=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort()\n s=sum(l)\n print(max(s))", "input_output": "{\"inputs\": [[\"1\", \"10 6\", \"8 8 3 5 3 8 5 7 7 7\"]], \"outputs\": [[\"37\"]]}"}, "42": {"problem_id": 1841, "answer": "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        return self.helper(arr, k, m)", "input_output": ""}, "43": {"problem_id": 1291, "answer": "for _ in range(int(input())):\n x,y,d,r=map(int,input().split())\n if x==0 or y==0:\n  print(\"SAFE\")\n elif x==1 or y==1:\n  print(\"SAFE\")\n else:\n  x,y=map(int,input().split())\n  if x==0 or y==0:\n   print(\"RUN\")\n  elif x==1 or y==1:\n   print(\"RUN\")\n  else:\n   x,y=map(int,input().split())\n   if x==0 or y==0:\n    print(\"RUN\")\n   elif x==1 or y==1:\n    print(\"RUN\")\n   else:\n    x,y=map(int,input().split())\n    if x==0 or y==0:\n     print(\"RUN\")\n    elif x==1 or y==1:\n     print(\"RUN\")\n    else:\n     x,y=map(int,input().split())\n     if x==0 or y==0:\n      print(\"RUN\")\n     elif x==1 or y==1:\n      print(\"RUN\")\n     else:\n      x,y=map(int,input().split())\n      if x==0 or y==0:\n       print(\"RUN\")\n      elif x==1 or y==1:\n       print(\"RUN\")\n      else:\n       x,y=map(int,input().split())\n       if x==0 or y==0:\n        print(\"RUN\")\n       elif x==1 or y==1:\n        print(\"RUN\")\n       elif x==3 or y==1:\n        print(\"RUN\")\n       elif x==4 or y==1:\n        print(\"RUN\")\n       else:\n        x,y=map(int,input().split())\n        if x==0 or y==0:\n         print(\"RUN\")\n        elif x==1 or y==1:\n         print(\"RUN\")\n        elif x==3 or y==1:\n         print(\"RUN\")\n        else:\n         x,y=map(int,input().split())\n         if x==0 or y==0:\n          print(\"RUN\")\n        elif x==1 or y==1:\n         print(\"RUN\")\n        elif x==3 or y==1:\n         print(\"RUN\")\n        else:\n         x,y=map(int,input().split())\n         if x==0 or y==0:\n          print(\"RUN\")\n        elif x==1 or y==1:\n         print(\"RUN\")\n        elif x==3 or y==1:\n         print(\"RUN\")\n        else:\n         x,y=map(int,input().split())\n         if x==0 or y==0:\n           print(\"RUN\")\n         elif x==1 or y==1:\n           print(\"RUN\")\n         elif x==3 or y==1:\n           print(\"RUN\")\n         else:\n           x,y=map(int,input().split())\n            if x==0 or y==0:\n              print(\"RUN\")\n            elif x==1 or y==1:\n              print(\"RUN\")\n            elif x==3 or y==1:\n               print(\"RUN\")\n            else:\n               x,y=map(int,input().split())\n               if", "input_output": "{\"inputs\": [[\"3\", \"0 0 R\", \"2\", \"1 -2 U\", \"2 2 D\", \"1 1 U\", \"1\", \"1 0 U\", \"0 0 R\", \"1\", \"3 0 L\"]], \"outputs\": [[\"2.0\", \"SAFE\", \"1.5\"]]}"}, "44": {"problem_id": 1676, "answer": "import sys\ninput = sys.stdin.readline\n\nclass Game:\n    def __init__(self, figures: List[int]) -> None:\n        self.col = 10 ** (len( figures ) - 1)\n        self.rows = 10 ** (len( figures ) - 1)\n        self.col2 = 10 ** (len( figures ) - 1)\n        self.col = max(self.col, self.col2)\n        self.game = Game( figures )\n        self.game.play()\n        \n    def play(self) -> None:\n        for i in range(self.col):\n            if self.game.game.play(self.col) == 5:\n                return 1\n        return -1\n    \n    def __call__(self, row: int, col: int) -> int:\n        return self.col2 - self.col2 + row * col\n    \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(row,col) for row in range(1,10))\n    \n    def __floordiv__(self, row: int, col: int) -> int:\n        return int(self.col - row * col)\n    \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(row,col) for row in range(1,10))\n    \n    def __getitem__(self, row: int, col: int) -> int:\n        return self.col2 - self.col2 + row * col\n    \n    def __setitem__(self, row: int, col: int) -> None:\n        self.col2 = max(self.col2, self.col)\n        self.col = 0\n        self.rows = len(self.col)\n        self.col = 1\n        \n    def __radd__(self, row: int, col: int) -> None:\n        return self.col2 - self.col2 + row * col\n    \n    def __subtract__(self, row: int, col: int) -> None:\n        return self.col2 - self.col2 + row * col\n    \n    def __mul__(self, row: int, col: int) -> None:\n        return self.col2 - self.col2 + row * col\n    \n    def __floordiv__(self, row: int, col: int) -> int:\n        return self.col2 - self.col2 + row * col\n    \n    def __str__merge_1(self, row: int, col: int) -> str:\n        return f'{self.col} {row} {col}'", "input_output": "{\"inputs\": [[\"8 3 11\", \"6 14 12\", \"5 10 11\", \"5 7 11\", \"16 19 1\", \"-1 -1 -1\", \"\", \"\"]], \"outputs\": [[\"3 6 5 2 2 2 1 10 8\", \"1 4 8 2 6 1 3 7 2\", \"1 5 8 3 4 8 2 6 8\", \"3 9 8 2 10 7 1 1 6\", \"3 10 8 2 8 3 -1 -1 -1\"]]}"}, "45": {"problem_id": 601, "answer": "n=int(input())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(int(input()))\r\nl.sort(reverse=True)\r\ns=0\r\nfor i in range(n):\r\n    s+=l[i]\r\n    if s>=3:\r\n        print(i+1)\r\n    else:\r\n        print(i+1)\r\n", "input_output": "{\"inputs\": [[\"4\", \"2 5\", \"9 7\", \"15 6\", \"9 3\", \"Sample output:\", \"3\"]], \"outputs\": [[]]}"}, "46": {"problem_id": 85, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input().rstrip()\n    x = int(s[0])\n    for i in range(1, x):\n        if s[i] == '1':\n            print(-1)\n        elif s[i] == '0':\n            print(x)\n        else:\n            print(-1)\n            \n            \n", "input_output": "{\n  \"inputs\": [\n    \"3\\n101110\\n2\\n01\\n1\\n110\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"111011\\n10\\n-1\\n\"\n  ]\n}"}, "47": {"problem_id": 140, "answer": "class Solution:\n     def findMaximumXOR(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         nums.sort()\n         res = 0\n         for i in range(len(nums) - 1):\n             res += nums[i] % 10\n         return res", "input_output": "{\"fn_name\": \"findMaximumXOR\", \"inputs\": [[[3, 10, 5, 25, 2, 8]]], \"outputs\": [28]}"}, "48": {"problem_id": 996, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    l.append(a-b)\n    if(l[a]>l[b]):\n        l.pop(a)\n    elif(l[b]>l[a]):\n        l.pop(b)\n    else:\n        l.pop(a)\nprint('%.2f' %(l[n]))", "input_output": "{\"inputs\": [[\"5\", \"140 82\", \"89 134\", \"90 110\", \"112 106\", \"88 90\"]], \"outputs\": [[\"1 58\"]]}"}, "49": {"problem_id": 1198, "answer": "from math import factorial as fact\nn = int(input())\na = list(map(int, input().split()))\nk = fact(a)\nfor i in range(n):\n k-=1\n if k!=0:\n  print(0)\n else:\n  print(k)\n", "input_output": "{\"inputs\": [[\"2\", \"2 4\", \"3\", \"1\", \"2\", \"8\"]], \"outputs\": [[\"0\", \"2\", \"3\"]]}"}, "50": {"problem_id": 1002, "answer": "for _ in range(int(input())):\n n,d = list(map(int,input().split()))\n l = list(map(int,input().split()))\n l.sort()\n if len(l)==0:\n  print(\"NO\")\n else:\n  for i in range(0,len(l)):\n   if l[i]==l[i-1] and l[i]!=l[i-1] and l[i]!=l[i-1] and l[i]!=l[i-1]:\n    print(\"YES\")\n    break\n  elif len(l)==0:\n   print(\"NO\")\n  else:\n   print(\"YES\")\n", "input_output": "{\"inputs\": [[\"2\", \"5 3\", \"3 2 1 4 5\", \"5 4\", \"10 1 3 2 9\"]], \"outputs\": [[\"YES\", \"NO\"]]}"}, "51": {"problem_id": 1377, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n    x,y=map(int,input().split())\n    if x==y:\n        print(abs(x-y))\n    else:\n        print(\"DEGREE(S) ABOVE NORMAL\")", "input_output": "{\"inputs\": [[\"3\", \"75 45 78 40\", \"50 32 45 30\", \"56 48 62 45\"]], \"outputs\": [[\"1.0 DEGREE(S) ABOVE NORMAL\", \"3.5 DEGREE(S) ABOVE NORMAL\", \"1.5 DEGREE(S) BELOW NORMAL\"]]}"}, "52": {"problem_id": 719, "answer": "import random\ndef __starting_point():\n N = int(input())\n lst = list(map(int,input().split()))\n print(random.randint(N-1,N-2))\n \n\n__starting_point()", "input_output": "{\"inputs\": [[\"3\", \"1 5\", \"10 3\", \"3 4\"]], \"outputs\": [[\"1\"]]}"}, "53": {"problem_id": 1329, "answer": "for _ in range(int(input())):\n n, m = list(map(int, input().split()))\n l = list(map(int, input().split()))\n l.sort()\n ans = 0\n for i in range(m):\n  if l[i] < l[i-1]:\n   ans += m-i\n print(ans)\n", "input_output": "{\"inputs\": [[\"1\", \"3 3\", \"3 5 6\", \"11 3 1 2 3\", \"5 2 1 2\", \"5 2 1 3\"]], \"outputs\": [[\"10\"]]}"}, "54": {"problem_id": 1786, "answer": "def cross(p1,p2,p):\n    return round(2*p[0]*p[1]*p[2]*p[3]*p[4]*p[5]*p[6]*p[7]*p[8]*p[9],2)", "input_output": "{\"fn_name\": \"cross\", \"inputs\": [], \"outputs\": []}"}, "55": {"problem_id": 740, "answer": "for _ in range(int(input())):\n n,m,k=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort()\n c=0\n for i in range(n):\n  if l[i]==l[i-1] and c!=0:\n   c+=1\n  elif l[i]==l[i-1] and c!=0:\n   c-=1\n  else:\n   break\n print(c)", "input_output": "{\"inputs\": [[\"2\", \"4 4 9\", \"1 4\", \"2 1\", \"2 2\", \"2 3\", \"3 1\", \"3 3\", \"4 1\", \"4 2\", \"4 3\", \"4 4 1\", \"1 1\"]], \"outputs\": [[\"20\", \"4\"]]}"}, "56": {"problem_id": 241, "answer": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        # O(n) time, O(n) space\n        n = len(i)\n        \n        if n == 0:\n            return True\n        elif n == 1:\n            return True\n        else:\n            return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       ", "input_output": "{\"fn_name\": \"isRobotBounded\", \"inputs\": [[\"\\\"GGLLGG\\\"\"]], \"outputs\": [true]}"}, "57": {"problem_id": 1691, "answer": "import random\nn,m,c = list(map(int,input().split()))\nprint(3)\nfor i in range(n):\n\tfor j in range(m):\n\t\tl = random.randint(1,50)\n\t\th = random.randint(50,50)\n\t\tprint(random.randint(l,h), end=' ')\n\tprint('\\n'.join(str(x) for x in l))", "input_output": "{\"inputs\": [[\"3 3 10\", \"4\", \"0\", \"3\", \"1\", \"6\", \"\", \"\"]], \"outputs\": [[\"1 1 2 1 2 1 3\", \"1 3 3 1 3 1 1\", \"1 3 3 1 3 2 2\", \"1 1 2 3 3 1 1\", \"2 3 3 1 3\", \"3\", \"2 2 1\", \"2 2 1\", \"2 2 2\"]]}"}, "58": {"problem_id": 1389, "answer": "n = int(input())\r\nl = []\r\nfor i in range(n):\r\n    l.append(input().split(' '))\r\nl.sort(key=lambda x: x[0])\r\nprint(' '.join(l))", "input_output": "{\"inputs\": [[\"2\", \"This is a sample piece of text to illustrate this \", \"problem.  If you are smart you will solve this right.\", \"\"]], \"outputs\": [[\"right this solve will you smart are you If problem\", \"this illustrate to text of piece sample a is This\"]]}"}, "59": {"problem_id": 1392, "answer": "# cook your dish here\ndef main():\n x, y = list(map(int, input().split()))\n print(sum(x+y))\n\nmain()\n", "input_output": "{\"inputs\": [[\"6 70\"]], \"outputs\": [[\"76\"]]}"}, "60": {"problem_id": 451, "answer": "class Solution:\n    def isRationalEqual(self, S: str, T: str) -> bool:\n        n = len(S)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = int(S[i])\n            dp[i][1] = int(T[i])\n            \n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if j == 0:\n                    continue\n                if dp[i][j] == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j - 1]\n                    \n        return all(dp[i][j] == 0 for j in range(1, n + 1) if dp[i][j] == 0)", "input_output": "{\"fn_name\": \"isRationalEqual\", \"inputs\": [[\"\\\"0.(52)\\\"\", \"\\\"0.5(25)\\\"\"]], \"outputs\": [true]}"}, "61": {"problem_id": 456, "answer": "class Solution:\n     def canCross(self, stones):\n         \"\"\"\n         :type stones: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(stones) == 0:\n             return False\n         n = len(stones)\n         if n == 0:\n             return True\n         elif n == 1:\n             return self.canCross(stones[0:n] + stones[n+1:])\n         else:\n             return False\n         \n     def canCross(self, stones):\n         \"\"\"\n         :type stones: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(stones) == 0:\n             return False\n         n = len(stones)\n         if n == 0:\n             return True\n         elif n == 1:\n             return self.canCross(stones[0:n] + stones[n+1:])\n         else:\n             return False\n         \n", "input_output": "{\"fn_name\": \"canCross\", \"inputs\": [[[0, 1, 3, 4, 5, 7, 9, 10, 12]]], \"outputs\": [true]}"}, "62": {"problem_id": 238, "answer": "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         dp = [0] * 100001\n         for i in range(1, len(prices)):\n             dp[i] = max(dp[i-1] + prices[i], prices[i])\n         return dp[-1]", "input_output": "{\"fn_name\": \"maxProfit\", \"inputs\": [[[3, 3, 5, 0, 0, 3, 1, 4]]], \"outputs\": [6]}"}, "63": {"problem_id": 1264, "answer": "from collections import Counter \nn, m = map(int, input().split())\nc = Counter(n)\nprint(c.most_common(1))", "input_output": "{\"inputs\": [[\"4 2\"]], \"outputs\": [[\"2\"]]}"}, "64": {"problem_id": 806, "answer": "from math import ceil\r\n\r\ndef lcm(a, b):\r\n    return (a*b) // ceil(a/b)\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    q = int(input())\r\n    \r\n    ans = l[0]\r\n    for i in range(1, q):\r\n        ans = l[i]\r\n        l.pop(0)\r\n        q -= 1\r\n        print(ans)\r\n", "input_output": "{\"inputs\": [[\"1\", \"56\", \"3 5 7\", \"4\", \"0\", \"1\", \"2\", \"3\"]], \"outputs\": [[\"56\", \"6\", \"2\", \"2\"]]}"}, "65": {"problem_id": 375, "answer": "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 0\n         nums.sort()\n         res = float('inf')\n         for i in range(len(nums) - 1):\n             if nums[i] > nums[i + 1]:\n                 res = max(res, nums[i] - nums[i + 1])\n             elif nums[i] == nums[i + 1]:\n                 res = max(res, nums[i] - nums[i + 1])\n         return res", "input_output": "{\"fn_name\": \"maximumGap\", \"inputs\": [[[3, 6, 9, 1]]], \"outputs\": [3]}"}, "66": {"problem_id": 353, "answer": "class Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        l, r = 0, len(nums)-1\n        res = 0\n        mod = 10**9 + 7\n        while l <= r:\n            if nums[l] + nums[r] > target:\n                r -= 1\n            else:\n                res += pow(2, r-l, mod)\n                l += 1\n        return res % mod", "input_output": "{\"fn_name\": \"numSubseq\", \"inputs\": [[[3, 5, 6, 7], 9]], \"outputs\": [4]}"}, "67": {"problem_id": 644, "answer": "# cook your dish here\nfor i in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n print('Yes' if sum(a)==n else 'No')", "input_output": "{\"inputs\": [[\"1\", \"3\", \"1 2 3\"]], \"outputs\": [[\"Yes\"]]}"}, "68": {"problem_id": 276, "answer": "class Solution:\n     def findMinStep(self, board, hand):\n         \"\"\"\n         :type board: str\n         :raises: None\n         :rtype: None\n         \"\"\"\n         if len(board) == 1:\n             return 0\n         \n         rows = len(board)\n         cols = len(board[0])\n         \n         # print(rows, cols)\n         if rows == 0 or cols == 0:\n             return 0\n         \n         # print(board)\n         if hand[0] == board[0]:\n             return 1\n         \n         # print(board, hand)\n         if hand[0] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[0]:\n             return 1\n         \n         # print(board, hand)\n         if hand[0] == board[0]:\n             return 1\n         \n         # print(board, hand)\n         if hand[0] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         # print(board, hand)\n         if hand[1] == board[1] or hand[1] == board[1]:\n             return 1\n         \n         return -1", "input_output": "{\"fn_name\": \"findMinStep\", \"inputs\": [[\"\\\"WRRBBW\\\"\", \"\\\"RB\\\"\"]], \"outputs\": [-1]}"}, "69": {"problem_id": 1970, "answer": "class Solution:\n     def nearestPalindromic(self, n):\n         \"\"\"\n         :type n: str\n         :rtype: str\n         \"\"\"\n         if n == '0':\n             return '0'\n         elif n == '1':\n             return ''.join(str(n) for n in range(1, len(n)))\n         else:\n             return ''.join(str(n) for n in range(1, len(n)))", "input_output": ""}, "70": {"problem_id": 796, "answer": "for _ in range(int(input())):\n n = int(input())\n a = list(map(int,input().split()))\n ans = [0]*n\n for i in range(n-1):\n  ans[i] = len(a)\n print(*ans)", "input_output": "{\"inputs\": [[\"3\", \"4\", \"1 2 3 4\", \"4\", \"1 -5 1 -5\", \"6\", \"-5 -1 -1 2 -2 -3\"]], \"outputs\": [[\"1 1 1 1\", \"4 3 2 1\", \"1 1 3 2 1 1\"]]}"}, "71": {"problem_id": 709, "answer": "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    print(max(l[0],l[1]))", "input_output": "{\"inputs\": [[\"1\", \"1\", \"2\"]], \"outputs\": [[\"2\"]]}"}, "72": {"problem_id": 1042, "answer": "def main():\n n=int(input())\n for i in range(n):\n  l=list(map(int,input().split()))\n  print(sum(l))\n\ndef __starting_point():\n main()\n__starting_point()", "input_output": "{\"inputs\": [[\"2\", \"2 3\", \"3 3\", \"\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\"]], \"outputs\": [[\"1\", \"1\"]]}"}, "73": {"problem_id": 1773, "answer": "def validSolution(board):\n    s = set(board)\n    for i in range(len(board)):\n        if i not in s:\n            return False\n        else:\n            s.add(i)\n    return True", "input_output": "{\"fn_name\": \"validSolution\", \"inputs\": [], \"outputs\": []}"}, "74": {"problem_id": 1586, "answer": "from sys import stdin,stdout\r\nn = int(stdin.readline())\r\ns = list(map(int,stdin.readline().split()))\r\nl = [0]*n\r\nfor i in range(n):\r\n    l[i] = s[i]\r\n    s[i] = 0\r\nmaxi = 0\r\nmaxi = max(s[n-1],s[n-2])\r\nfor i in range(n-2,-1,-1):\r\n    if maxi == 0:\r\n        maxi = i\r\nprint(maxi)", "input_output": "{\"inputs\": [[\"and output corresponding to the example above.\", \"Sample input\", \"4\", \"7 1 6 2\", \"Sample output\", \"9 10 10 11\", \"Note:  Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\"]], \"outputs\": [[]]}"}, "75": {"problem_id": 845, "answer": "# cook your dish here\nfor i in range(int(input())):\n c,d = list(map(int,input().split()))\n if c*d == len(set(c)) or d*d == len(set(c*d)):\n  print(1)\n else:\n  print(0)\n", "input_output": "{\"inputs\": [[\"2\", \"2 2\", \"6 9\"]], \"outputs\": [[\"1\", \"6\"]]}"}, "76": {"problem_id": 1303, "answer": "from math import factorial,mod \nt = int(input())\nfor _ in range(t):\n    n,k,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    l = [0]*(k+1)\n    for i in range(1,k+1):\n        l[i] = 1\n        if i%2==0:\n            l[i]+=1\n    print(sum(l))", "input_output": "{\"inputs\": [[\"1\", \"12 4 3\", \"4 5 6 7 1 4 6 9 0 0 10 2\"]], \"outputs\": [[\"8\"]]}"}, "77": {"problem_id": 1270, "answer": "for _ in range(int(input())):\n n,k=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort()\n if k==n:\n  print(-1)\n else:\n  x=0\n  for i in range(n):\n   if l[i]>k:\n    x=max(x,l[i])\n   else:\n    x=min(x,l[i])\n  print(x)", "input_output": "{\"inputs\": [[\"2\", \"8 38\", \"7 8 19 7 8 7 10 20\", \"4 5\", \"2 10 4 9\"]], \"outputs\": [[\"7\", \"2\"]]}"}, "78": {"problem_id": 1512, "answer": "for _ in range(int(input())):\n n,m = map(int,input().split())\n if n%2==0:\n  print(\"Tuzik\")\n else:\n  print(\"Vanya\")", "input_output": "{\"inputs\": [[\"2\", \"4 4\", \"2 2\"]], \"outputs\": [[\"Tuzik\", \"Vanya\"]]}"}, "79": {"problem_id": 322, "answer": "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0:\n             return 0\n         elif n == 1:\n             return 1\n         else:\n             res = 0\n             for i in range(2, n):\n                 res += nums[i]\n             return res\n", "input_output": "{\"fn_name\": \"minPatches\", \"inputs\": [[[1, 3], 6]], \"outputs\": [1]}"}, "80": {"problem_id": 1713, "answer": "from functools import lru_cache\n\ndef count_calls(func, *args, **kwargs):\n    return sum(1 for k, v in enumerate(args, 1) if v)", "input_output": "{\"fn_name\": \"count_calls\", \"inputs\": [], \"outputs\": []}"}, "81": {"problem_id": 224, "answer": "class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         if len(s) == 0:\n             return 0\n         i, j = 0, 0\n         while i < len(s):\n             if s[i] == t[j]:\n                 j += 1\n             elif s[i] == t[j]:\n                 i += 1\n             else:\n                 j += 1\n         return j", "input_output": "{\"fn_name\": \"numDistinct\", \"inputs\": [[\"\\\"rabbbit\\\"\", \"\\\"rabbit\\\"\"]], \"outputs\": [3]}"}, "82": {"problem_id": 1141, "answer": "for _ in range(int(input())):\n s = input()\n s.replace('_','').replace('_','').translate(s)\n print('Hello'.join(s.rstrip()))", "input_output": "{\"inputs\": [[\"and its\"]], \"outputs\": [[]]}"}, "83": {"problem_id": 184, "answer": "class Solution:\n    def maxRepOpt1(self, text: str) -> int:\n        res = 0\n        for i in range(len(text)):\n            if text[i] == 'a' and i == len(text)-1:\n                res = max(res, i-1)\n            elif text[i] == 'b' and i == len(text)-1:\n                res = max(res, i-1)\n        return res", "input_output": "{\"fn_name\": \"maxRepOpt1\", \"inputs\": [[\"\\\"ababa\\\"\"]], \"outputs\": [3]}"}, "84": {"problem_id": 160, "answer": "class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        n = len(piles)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = piles[i]\n        \n        for i in range(n-1, -1, -1):\n            dp[i][i] = max(piles[i] - dp[i+1][i+1], piles[i] - dp[i+1][i+1])\n        \n        return dp[0][n-1] > 0", "input_output": "{\"fn_name\": \"stoneGame\", \"inputs\": [[[5, 3, 4, 5]]], \"outputs\": [true]}"}, "85": {"problem_id": 1521, "answer": "# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    lower, upper = list(map(int, input().split()))\n    lower.sort(reverse=True)\n    upper.sort(reverse=True)\n    print(2*(upper.count(0) - lower.count(0)))\n", "input_output": "{\"inputs\": [[\"2\", \"3\", \"10 20\", \"13 18\", \"15 19\", \"3\", \"10 22\", \"13 21\", \"15 20\"]], \"outputs\": [[\"4 1 1\", \"4 2 0\"]]}"}, "86": {"problem_id": 1065, "answer": "for _ in range(int(input())):\n n,m=map(int,input().split())\n l=list(map(str,input().split()))\n for i in range(n):\n  l[i]='1'\n print(l[n])", "input_output": "{\"inputs\": [[\"1\", \"3 4\", \"0011\", \"0000\", \"0100\"]], \"outputs\": [[\"1 0 1 1 0\"]]}"}, "87": {"problem_id": 28, "answer": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        l = len(s)\n        if '?' in s:\n            print('No')\n        else:\n            print('Yes')\nmain()", "input_output": "{\n  \"inputs\": [\n    \"6\\n7\\nabacaba\\n7\\n???????\\n11\\naba?abacaba\\n11\\nabacaba?aba\\n15\\nasdf???f???qwer\\n11\\nabacabacaba\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\nabacaba\\nYes\\nabacaba\\nYes\\nabazabacaba\\nYes\\nabacabazaba\\nNo\\nNo\\n\"\n  ]\n}\n"}, "88": {"problem_id": 1067, "answer": "from math import factorial,gcd\r\nmod = 1000000007\r\ndef is_integer():\r\n    return int(input())\r\ndef factorial(n):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return (n*(n-1))%mod\r\ndef lcm(a,b):\r\n    return (a*b)//gcd(a,b)\r\ndef gcd(a,b):\r\n    c = 1\r\n    while(c*c)>=b:\r\n        c = c*c\r\n    return c\r\ndef mod(x,y):\r\n    if x%y==0:\r\n        return (x*y)%mod\r\n    else:\r\n        return (x*y)%mod\r\ndef pow(x,y):\r\n    return (x*y)%mod\r\ndef ceil(a,b):\r\n    return (a-b)//gcd(a,b)\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = lcm(n,n)\r\n    print(l%mod)", "input_output": "{\"inputs\": [[\"1\", \"2\"]], \"outputs\": [[\"6\"]]}"}, "89": {"problem_id": 1642, "answer": "def multiply(n, k):\n    res = 0\n    for i in range(1, k+1):\n        res += int(n % i)\n    return res", "input_output": "{\"fn_name\": \"multiply\", \"inputs\": [[24, 2], [100, 1], [20, 3], [1, 2], [1000000, 3], [10, 2], [36, 4]], \"outputs\": [[8], [1], [18], [1], [784], [4], [100]]}"}, "90": {"problem_id": 1556, "answer": "for _ in range(int(input())):\n n=int(input())\n l=[]\n for i in range(n):\n  l.append(str(i))\n print(\"\".join(l))", "input_output": "{\"inputs\": [[\"4\", \"1\", \"2\", \"3\", \"4\"]], \"outputs\": [[\"1\", \"10\", \"10\", \"101\", \"101\", \"101\", \"1010\", \"1010\", \"1010\", \"1010\"]]}"}, "91": {"problem_id": 914, "answer": "for _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    l=list(map(int,input().split()))\r\n    ans=[]\r\n    for i in range(n):\r\n        ans.append(l[i]*m)\r\n    print(''.join(ans))", "input_output": "{\"inputs\": [[\"1\", \"3 4\", \"1 3 7 10\", \"9 2 4 11\", \"8 12 5 6 \", \"\"]], \"outputs\": [[\"1111\", \"1001\", \"0100\"]]}"}, "92": {"problem_id": 1918, "answer": "class Solution:\n     def findItinerary(self, tickets):\n         \"\"\"\n         :type tickets: List[List[str]]\n         :rtype: List[str]\n         \"\"\"\n         from collections import deque\n         q = deque([])\n         while q:\n             l = len(q)\n             for _ in range(l):\n                 ticket = tickets[l]\n                 if ticket not in q:\n                     q.append(ticket)\n                 else:\n                     q.extend(tickets)\n                 l-=1\n         return [\\\"JFK\\\",\\\"ATL\\\",\\\"JFK\\\".capitalize()]", "input_output": ""}, "93": {"problem_id": 744, "answer": "from sys import stdin, stdout\r\ninput = stdin.readline\r\nfor _ in range(int(input())):\r\n    k = int(input())\r\n    print(\"*\"*k)", "input_output": "{\"inputs\": [[\"4\", \"1\", \"3\", \"5\", \"7\"]], \"outputs\": [[\"*\", \"*\", \"**\", \"*\", \"*\", \"**\", \"* *\", \"**\", \"*\", \"*\", \"**\", \"* *\", \"*  *\", \"* *\", \"**\", \"*\"]]}"}, "94": {"problem_id": 555, "answer": "for i in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n l.sort()\n print(max(l))", "input_output": "{\"inputs\": [[\"2\", \"5\", \"2 3 5 1 2\", \"3\", \"1 2 3\"]], \"outputs\": [[\"3\", \"3\"]]}"}, "95": {"problem_id": 518, "answer": "for _ in range(int(input())):\n n = int(input())\n print(n)", "input_output": "{\"inputs\": [[\"1\", \"3\"]], \"outputs\": [[\"2\"]]}"}, "96": {"problem_id": 571, "answer": "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    print(math.pow(2,n))", "input_output": "{\"inputs\": [[\"3\", \"2 4 4\", \"3 2 3 4\", \"4 3 15 9 6\", \"\"]], \"outputs\": [[\"1 1\", \"2 3 4\", \"1 5 3 2\"]]}"}, "97": {"problem_id": 413, "answer": "class Solution:\n    def breakPalindrome(self, palindrome: str) -> str:\n        if len(palindrome) == 0:\n            return ''\n        else:\n            return palindrome.replace('a', 'b')", "input_output": "{\"fn_name\": \"breakPalindrome\", \"inputs\": [[\"\\\"abccba\\\"\"]], \"outputs\": [\"aabccba\\\"\"]}"}, "98": {"problem_id": 8, "answer": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    s = input()\n    if k == len(s):\n        print(0)\n    elif k == 0:\n        print(1)\n    else:\n        score = 0\n        for i in range(n):\n            score += s[i]\n            if s[i] == 'W':\n                score += 1\n            elif s[i] == 'L':\n                score += 1\n            elif s[i] == 'W' and s[i] == 'L':\n                score += 1\n            elif s[i] == 'L' and s[i] == 'W':\n                score += 1\n        print(score)\n", "input_output": "{\n  \"inputs\": [\n    \"8\\n5 2\\nWLWLL\\n6 5\\nLLLWWL\\n7 1\\nLWLWLWL\\n15 5\\nWWWLLLWWWLLLWWW\\n40 7\\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\\n1 0\\nL\\n1 1\\nL\\n6 1\\nWLLWLW\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n11\\n6\\n26\\n46\\n0\\n1\\n6\\n\"\n  ]\n}"}, "99": {"problem_id": 1972, "answer": "class Solution:\n     def sortString(self, S):\n         \"\"\"\n         :type S: str\n         :rtype: str\n         \"\"\"\n         if len(S) == 0:\n             return S\n         \n         # Sort alphabetically\n         alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n         \n         # Iterate over S\n         for i in range(26):\n             # Binary search\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             \n             # Binary search\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             # Binary search is a way to permute the string to get the first character in S\n             # Binary search is a way to permute the string to get the first character in T\n             # Binary search is a way to permute the string to get the first character in S\n             # Translators: O(26)\n             # O(26)\n             # O(26)\n             \n         return S[ord(S)-ord('a')]", "input_output": ""}}
{"0": {"problem_id": 3000, "answer": "MOD = 1000000007\r\ndef main():\r\n    n = int(input())\r\n    tokens = list(map(int, input().split()))\r\n    # [1,2,3,4]\r\n    ans = 0\r\n    for t in tokens:\r\n        ans += int(t) * (MOD-2) * (MOD-1)\r\n    print(ans%MOD)\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "1": {"problem_id": 3001, "answer": "from collections import deque\r\ndef diddly_widgets(n):\r\n    if n == 0:\r\n        return []\r\n    elif n == 1:\r\n        return [10, 0, 0.6]\r\n    else:\r\n        r = deque(enumerate(n))\r\n        for i in range(len(r)):\r\n            if r.popleft() == 9:\r\n                continue\r\n            else:\r\n                r.append(10)\r\n                break\r\n        r.extend(['0' if i == 0 else '1' for i in range(len(r))])\r\nprint(len(diddly_widgets))\r\n"}, "2": {"problem_id": 3002, "answer": "from sys import stdin,setrecursionlimit\risr=lambdaS,n:stdin.readline().rstrip('\\n')for i in range(1,len(s)):print(''.join(map(str,s[i:i+3])))if len(setrecursionlimit(501)):stdout.write(str(stdout.getcode()))else:\r\nstdout.writewstem(['insufficient','sehafloii'][s[-1]=='0'])#sehafloii is not good enough, too many times to count"}, "3": {"problem_id": 3003, "answer": "import bisect\ndef G(n):\n    a = list(range(1, n+1))\n    b = list(reversed(set(G(n-1)).symmetric_insort(a)))\n    c = [0]*n\n    for i in range(n):\n        c[i] = 1\n        b[i] = 0\n    return c\nn = int(input())\ngraph = [[] for _ in range(100001)]\nfor __ in range(n-1):\n    graph[0].append(0)\n    graph[1].append(0)\n\n# print(G(0))\n# print(G(1))\n# print(G(2))\n# print(G(3))\n# print(G(4))\n# print(G(5))\n# print(G(6))\n# print(G(7))\n# print(G(8))\n# print(G(9))\n# print(G(10))\n# print(G(11))\n# print(G(12))\n# print(G(13))\n# print(G(14))\n# print(G(15))\n# print(G(16))\n# print(G(17))\n# print(G(18))\n# print(G(19))\n# print(G(20))\n# print(G(21))\n# print(G(22))\n# print(G(23))\n# print(G(24))\n# print(G(25))\n# print(G(26))\n# print(G(27))\n# print(G(28))\n# print(G(29))\n# print(G(2971))\n# print(G(39992981000))\n"}, "4": {"problem_id": 3004, "answer": "n=int(input())\r\nfor i in range(n):\r\n    s=input().strip()\r\n    if len(s)==1:\r\n        print(2)\r\n    elif '0' not in s:\r\n        print(3)\r\n    else:\r\n        print(n-1)"}, "5": {"problem_id": 3005, "answer": "# cook your dish here\r\nfrom collections import Counter as c\r\ndef max_factorization(p):\r\n    cnt = Counter(p)\r\n    ans = 0\r\n    for i in range(len(p)):\r\n        ans ^= cnt[p[i]]\r\n        if ans == 0:\r\n            break\r\n    return ans\r\n\r\ndef makedict(s):\r\n    return list(map(int, s.split(' ')))\r\n\r\nn = int(input())\r\ns = input()\r\nmakedict(s)\r\n"}, "6": {"problem_id": 3006, "answer": "import sys\r\n#readline\r\ndef main():\r\n\ts = sys.stdin.readline().rstrip()\r\n\tfor _ in range(int('1' + str(s) + 'X'):\r\n\t\ta = int(s)\r\n\t\tb = int(s)\r\n\t\tif b == 10:\r\n\t\t\tprint(\"0\")\r\n\t\telif b in [1,4,5,6]:\r\n\t\t\tprint(b)\r\n\t\telse:\r\n\t\t\tsys.stdout.write(f'\\n{0:.2f}')\r\n\t\t\tsys.stdout.write(''.join(map(str, list(reversed(list(map(int, sys.stdin.readline().split()))))))+'\\n')\r\nmain()"}, "7": {"problem_id": 3007, "answer": "import bisect as b\r\n\r\ndef main():\r\n d, b=map(int, input().split())\r\n l=[]\r\n for _ in range(d):\r\n  l.append(b.bisect_left(b.insort_left(100,b[0])) + b.insort_left(b.insort_left(100,b[1])))\r\n print(max(l))\r\n\r\nmain()"}, "8": {"problem_id": 3008, "answer": "# cook your dish here\nfrom collections import defaultdict as dd\r\ndef lcm(a, b):\r\n    return abs(a*b)//dd(10**7)\r\nn = int(input())\r\na = list(map(int, input().split()[1:]))\r\nb = list(map(int, input().split()[1::]))\r\nans = 0\r\nfor i in range(n):\r\n    ai, bi = lcm(ai, b)\r\n    ans += max(li.count(li.get(ai, 0), 0), len(li.get(bi, 0)))\r\nprint(ans)"}, "9": {"problem_id": 3009, "answer": "import sys\r\ndef GLR(x, y):\r\n\tif x==0:\r\n\t\treturn 0\r\n\teliminate(x, y)\r\n\tabs(x-y)\t= abs(x)\r\n\tif x%2!=0:\r\n\t\treturn GLR(x//2, y//2)\r\n\teliminate(x, y)\r\n\tx-=1\r\n\ty-=1\r\n\t# print(x, y)\r\n\t# print(abs(x-y))\r\n\t# print(abs(x-y))\r\n\treturn 1\r\nn=int(sys.stdin.readline())\r\nl=[]\r\nfor i in range(n):\r\n\tx,y=list(map(int,sys.stdin.readline().split()))\r\n\tl.append(GLR(x,y))\r\nprint(l[0])"}, "10": {"problem_id": 3010, "answer": "from itertools import accumulate \r\nn=int(input())\r\nacc = list(map(int,input().split()))\r\nprint(n-acc.count(0))"}, "11": {"problem_id": 3011, "answer": "from math import sqrt\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(''.join(map(str, input().split())))\r\n    print(sqrt(n))"}, "12": {"problem_id": 3012, "answer": ""}, "13": {"problem_id": 3013, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n# import numpy as np\r\nn, = map(int, input().split(' '))\r\nA = np.array(input().split(), dtype=np.int32)\r\ndef dp(x):\r\n    return abs(A[x] - A[x - 1])\r\n\r\nfor _ in range(n):\r\n    x, y = map(int, input().rsplit(2, i) + [0] * 3)\r\n    print(dp(x) + dp(y))"}, "14": {"problem_id": 3014, "answer": "import bisect\nn,c = map(int,input().split())\nl = list(map(int,input().split()))\nr = [0]*n\nfor i in range(n):\n l.append(bisect.bisect_left(l[-1],r[i]))\nl.sort(reverse=True)\nr.insert(0,0)\ncnt = 0\nfor i in range(1,n+1):\n if cnt == 0:\n  print(i+1)\n elif cnt-1 == 1:\n  print(i+1)\n else:\n  print(r[i+1])"}, "15": {"problem_id": 3015, "answer": "# cook your dish here\n\n \ndef main():\n  N = int(input())\n  d = [[0 for _ in range(N)] for _ in xrange(N)]\n  xrange = list(map(int, input().split()))\n  \n  for i in range(N):\n    a, b, w = xrange.pop(0)\n    d[a-1][b-1] = w\n    a -= 1\n    b -= 1\n    if a == 0:\n      d[a-1][b-1] = max(infinity, 0)\n    elif a == 1:\n      d[a-1][b-1] = max(infinity, 1)\n  print(d[N-1][2])\n\n\ndef __starting_point():\n  main()\n\n__starting_point()"}, "16": {"problem_id": 3016, "answer": "from sys import stdin, stdout\r\ninput = stdin.readline\r\nfor _ in range(int('1' not in str(input()))):\r\n    n = int(input())\r\n    balls = list(map(int, input().split()))[::-1]\r\n    print(sum(balls)%(10**9 + 9))"}, "17": {"problem_id": 3017, "answer": "from math import sqrt\ndef f(n, e):\n    if n<=9:\n        return 0\n    elif sqrt(n)==2:\n        return int(str(2**e).decode(\"ascii\"))\n    else:\n        res=int(str(2**e).deconvert(\"ascii\"))\n        print(res)\n        return res\nn,= map(int,input().split(\" \"))\nprint(f(n,int(input())))"}, "18": {"problem_id": 3018, "answer": "from itertools import permutations as p\r\nfor _ in range(int('1' * p)):\r\n    K, T = map(int, input().split())\r\n    print(permutations(p('6' * K + '9' * (K + 1)) for K in range(T)))"}, "19": {"problem_id": 3019, "answer": "from bisect import *\r\ndef lcm(a,b):\r\n\treturn a*b//gcd(a,b)\r\nn=int(input())\r\na=list(map(int,input().split()))\r\nd=[]\r\nfor i in range(n):\r\n\td.append(lcm(a[i],b[i]))\r\nans=0\r\nfor i in reversed(list(range(n))):\r\n\tans+=max(ans,d[i][0])\r\nprint(ans)"}, "20": {"problem_id": 3020, "answer": "import numpy as np\r\nN = int(input())\r\narr = np.array(map(int, input().split()))\r\nprint(np.flipl_array(arr, axis=0))"}, "21": {"problem_id": 3021, "answer": "L,N=list(map(int,input().split()))\r\na = input()\r\nb = input()\r\nc = []\r\nfor i in a:\r\n    if i not in b:\r\n     print(b[i],end=\" \")\r\n    else:\r\n     c.append(ord('a')-ord('b'))\r\nprint(\" \".join(c))\r\n"}, "22": {"problem_id": 3022, "answer": "import bisect, sys, heapq  # -*- coding: utf-8 -*- Auther: Pramo - You Can Make  Your Tiles Nickels are unpaid for this kata. You don't have to pay anymore price - you know what you are doing. https://www.codewars.com/kata/python-cookies-i-always-use-free-distribute/discuss#7739268\n\nn = int(input())\na, b, c = map(int, input().split(' '))\nb = max(a, b)\nprint(c)"}, "23": {"problem_id": 3023, "answer": "import bisect as b\r\n\r\ndef fact(n):\r\n    return 1\r\n\r\n# Function to find prime factors of n numbers.\r\ndef find_primes(n):\r\n    factors = list(map(int, input().split(' ')))\r\n    for i in range(3, int(n**0.5)+1, 2):\r\n        if n % i == 0:\r\n            factors.append(i)\r\n        elif n // i == i:\r\n            factors.append(i)\r\n    return factors\r\n\r\nn = int(input())\r\narr = [int(i) for i in input().split(' ')]\r\narr.sort(key=lambda x: x[0])\r\nans = set()\r\nfor i in reversed(arr):\r\n    ans.add(bisect_left(arr, i))\r\nprint('yes\\n'.join(ans))"}, "24": {"problem_id": 3024, "answer": "import random\r\nn = int(input())\r\ns = input()\r\nif n>10000:\r\n    print(n-1)\r\nelse:\r\n    for i in range(n-1):\r\n        if random.randint(652526,6)==i:\r\n            print(i)\r\n       elif random.randint(652526,6)==i%2:\r\n            print(i+1)\r\n       else:\r\n            print(i+1)\r\n"}, "25": {"problem_id": 3025, "answer": "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n n, m = list(map(int, input().split()))\n a = dd(int)\n b = dd(int)\n if m == 1:\n  print(0)\n elif m%2 == 0:\n  for i in range(n):\n   if a[i] == b[i]:\n    print(m + 1)\n else:\n  for i in reversed(range(1, m):):\n   if a.count(b[i] + 1) >= n:\n    print(m + 1)\n    break\n   else:\n    print(m + 1)\n"}, "26": {"problem_id": 3026, "answer": "import bisect as bi\nn = int(''.join(map(str, input().split())))\nl = list(range(1, n + 1))\nfor i in range(n - 1, -1, -1):\n l.insert(bisect.bisect_left(l[i], 0), i)\nprint('-1' if len(l) == 1 else '\\n')"}, "27": {"problem_id": 3027, "answer": "from itertools import groupby\r\nt = int(input())\r\nfor i in range(t):\r\n   print(['#'*10], end=\"\\n\".join(str(i) for i in groupby(input())))\r\n"}, "28": {"problem_id": 3028, "answer": "from bisect import *\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a%b\r\n    return a\r\nn, m, p = list(map(int, input().split()))\rtuple(map(int, input().split(\" \")))\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split( )))\r\n    print(gcd(a, b))\r\n"}, "29": {"problem_id": 3029, "answer": "import bisect as binsize\r\nn=int(input())\r\nl=[int(i) for i in input().split()]\r\nm=int(input())\r\np=[0]*100001\r\nfor i in range(n):\r\n    a=list(map(int,input().split()))\r\n    p[a[0]]=i\r\n    b=set(p)\r\n    if len(b)<2:\r\n        print(1,end=\"\\n\")\r\n    elif len(b)==2:\r\n        print(2,end=\"\\n\")\r\n    else:\r\n        print(3,end=\"\\n\")\r\n        \r\ndef main():\r\n    n=int(input())\r\n    l=[int(i) for i in input().split()]\r\n    m=int(input())\r\n    p=[0]*100001\r\n    for i in range(1,n):\r\n        a=list(map(int,input().split()))\r\n        p.insert(a[0],i)\r\n        b=set(p)\r\n        if len(b)<2:\r\n            print(1,end=\"\\n\")\r\n        elif len(b)==2:\r\n            print(2,end=\"\\n\")\r\n        else:\r\n            print(3,end=\"\\n\")\r\n            \r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "30": {"problem_id": 3030, "answer": "import sys\r\n# sys.setrecursionlimit(10**6)\r\ndef main(): return int(input())\r\nmain()\n\n"}, "31": {"problem_id": 3031, "answer": "# cook your dish here\r\nimport bisect_left as bl, bisect_right as br \r\nn = int(input())\r\nl = list(map(int, input().split()))[::-1]\r\narr = [[0]*n for _ in range(n)]\r\nfor i in range(1, n):\r\n    arr[i] = list(map(int, input().split(' ')))\r\n    \r\n#print(arr)\r\n#print(l.pop()[0])\r\nl.sort(keying='x')\r\nans = 0\r\nfor i in range(1, n):\r\n    ans ^= bl.bisect_left(l[i-1])\r\n    \r\nprint('\\n'.join(map(str, ans)))"}, "32": {"problem_id": 3032, "answer": "import sys\n# input = sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\tn, S = map(int, input().split(' '))\n\tB = [0]*n\n\tfor i in range(n):\n\t\tB.append(int(input()))\n\tB[0] = 1\n\tbit = 0xFFFFFFF\n\t# bit = 0xFFFFFFF\n\tbit &= ~(0xFF)\n\tans = 0\n\tb0 = 0\n\tb1 = 0\n\tfor i in range(11):\n\t\tans ^= bit\n\t\tb0 |= i\n\t\tb1 |= 1 << bit\n\tprint(ans)"}, "33": {"problem_id": 3033, "answer": "B,N = map(int,input().split())\r\nA = list(map(int,input().split()))\r\nB = max(A)\r\nans = 'impossible'\r\nfor i in range(B):\r\n    if(i%3==0):\r\n        print(' '.join(str(i) for i in A))\r\n    elif(i%2!=0):\r\n        print(' '.join(str(i) for i in A))\r\n    else:\r\n        print('impossible')"}, "34": {"problem_id": 3034, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef main():\r\n    d, t = map(int, input().split())\r\n    \r\n    # Determines whether the sun will start or stop raining depending on the number of suns in the array (in cm/second, in m/second)\r\n    # A positive number means that the sun will start raining in the first place, which is bad, because the rain will fall on a cake that has gone too long, and that time is too long for the sun to start raining. A negative number means that the sun won\\'hts it in the second place. \r\n    # There will be no rain on a cake just waiting to rain out of the sun! So we want the number of suns in the cake to be strictly positive, and don't want it to be out of the sun at the same time (decreasing the number of suns from one zeron to its inverse). \r\n    # If the number of suns is strictly positive, it means that the cake will dry out in the second place. Otherwise, it means that the cake will start raining in the first place. \r\n    # If it is negative, it means that the cake will dry out in the second place. Otherwise, it means that the cake will start raining in the first place. Both these conditions are bad. \r\n    # If the number of suns is strictly negative, it means that the cake will start raining in the cake house as far as we can determine, as it will take too long to dry the cake. Otherwise, the cake will burst into the hula-huh\u4e8b. So we want the cake house to be strictly negative, and not be out of the cake house at the same time (deconvado la data algun formular perfect lo menzo). \r\n    # If the number of suns is strictly negative, it means that the cake diezst writagondos. In other words, we want the number of suns in the cake to be strictly negative, and don't want it to be out of the diezsthoplethrese at the same time (decreasing the number of suns from one zeron to its inverse). \r\n    # If the number of suns is strictly positive, it means that the cake is drydent (not just lowercase letters, but lower than English letters). A positive number will give a lowercoefficient of floating- precision in determining the number of suns in the cake just waiting to rain out of the sun. \r\n    # If the Number of Unknowingly Arreluctable To Run The Rotation Limit (NUL) is too high or too little time, we want the number of uneasy-to-calculate precision in determining the number of unkitable To Run The Limit (NUL). \r\n    # If the NUL is too high, the cake will burst into the huh\u4e8b, and that will take too long to dry. If the NUL is too little time, the cake will burst into the huh\u4e8b and that will take too long to dry. \r\n    # If the Numbers of Rain On Window Frame Mr John's Window (A&A) are too small (NUL > 0.01), we want the number of uneasy-to-calculate precision in determining the number of unkitable To Run The Limit (NUL) \r\n    # Notice that in the test cases where NUL < 0.01, the numbers printed in the test cases above are not written in decimal notation. \r\n\\linesman{convert(matrix(), nrow(A&A))}{6.1418}# sys.stdin.readline().append(str(0.01).strip() + \" \" \\\r\n                         sys.stdout.write(f\"Hello, {0.01}\") + \"t = {0.01}\")\n    print((int(np.log2(t)))**0.5)"}, "35": {"problem_id": 3035, "answer": "from math import log2\r\ndef gcd(a,b):\r\n    while b:\r\n        a, b = b, a % b\r\n    return a\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\n#l.sort(reverse=True)\r\n#l.insert(0,0.5)\r\n#l.sort(reverse=True)\r\n#print(gcd(l[0],l[1]))\r\n#print(2*log2(n))\r\nfor i in range(n):\r\n    a, b = l[i]\r\n    if a>b:\r\n        break\r\n    else:\r\n        g = gcd(a, b)\r\n        print(abs(g-1)//2)"}, "36": {"problem_id": 3036, "answer": "import bisect as bs\r\n\r \r\ndef main():\r\n    r, s, m, d, n, k = list(map(int, input().split()))\r\n    l = list(map(int, input().split(\" \")))\r\n    \r\n    for i in range(0, r):\r\n        if l[i] == 1:\r\n            l.insert(0, 1)\r\n        else:\r\n    print(int(''.join(map(str, l))))\r\n\r\nmain()\r\n"}, "37": {"problem_id": 3037, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\nfor _ in range(int('1'in(input())):\r\n\th,w,n=map(int,input().split(' '))\r\n\tif h==1:\r\n\t\tprint(n)\r\n\telim=1\r\n\telse:\r\n\t\td=n\r\n\t\tfor i in range(n):\r\n\t\t\tif i=='#'.join(str(d)+'_'):\r\n\t\t\t\td='#'\r\n\t\t\t\tbreak\r\n\t\tprint(d)\r\n"}, "38": {"problem_id": 3038, "answer": ""}, "39": {"problem_id": 3039, "answer": "import sys\r\ndef main():\r\n    input().splitlines()\r\n    print(input())\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "40": {"problem_id": 3040, "answer": "s = input()\r\nl = list()\r\nfor i in range(0, len(s)):\r\n    l.append(s[i].upper())\r\n    if len(s) <= 2:\r\n        l.pop()\r\n    elif len(s) <= 3:\r\n        l.pop()\r\n    else:\r\n        print(0)\r\n"}, "41": {"problem_id": 3041, "answer": "from math import log2\r\ndef __starting_point():\r\n    n = int(input())\r\n    z = list(map(int, input().split()))\r\n    z.sort(key=lambda x: x[0])\r\n    _, _ = z[0]\r\n    for i in range(1, n):\r\n        print(max(_ - log2(z[i])) + _)\r\n__starting_point()"}, "42": {"problem_id": 3042, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = list(map(int, input().split()))\r\n    ans = 0\r\n    for i in permutations(a):\r\n        ans+=p(i)\r\n    print(ans%1000000007)"}, "43": {"problem_id": 3043, "answer": "# cook your dish here\r\nfrom collections import deque as freq\r\nfrom heapq import heappush, heappop as heapify,-doubles as doubles\r \r\ndef main():\r\n    n,m=list(map(int,input().split()))\r\n    d=dict().fromkeys()\r\n    for i in range(m):\r\n        x,y=list(map(int,input().split(' ')))\r\n        d[x].append(y)\r\n        d[y].append(x)\r\n    res=0\r\n    # print(d)\r\n    # print(freq(d))\r\n    q=deque([0])\r\n    while q:\r\n        cur=q.popleft()\r\n        res+=cur[0]\r\n        q.extend(set(d[cur]))\r\n        for _ in range(len(d[cur])):\r\n            if cur[0]!=cur[1]:\r\n                heappush(q,(cur[0]+d[cur[1]],cur[1]))\r\n            elif cur[0]!=cur[1] and d[cur[1]]=='F':\r\n                heappush(q,(cur[0]+d[cur[1]],cur[1]))\r\n            else:\r\n                break\r\n    print(res)\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "44": {"problem_id": 3044, "answer": "import itertools \risplit as itertools \r\ndef main(): \r\n    H,W,L,U,D = list(map(int,itertools.combinations(range(0,100),list())))    # H,W,L,U,D = list(map(int,itertools.combinations(range(0,100),list())))    # L,W,U,D = list(islice(iters,len(grid)-1))    # D,L,W,U,D = list(islice(iters,len(grid)-1))    # \r\n    grid = [[] for _ in range(W+1)] \r\n    for i in range(1,H+1): \r\n        grid[i-1].append(grid[i-1][0]) \r\n        grid[i-1].append(grid[i-1][1]) \r\n        \r\ndef __starting_point(): \r\n    main()\n\n__starting_point()"}, "45": {"problem_id": 3045, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip() # Read line by line starting with.\remmet\r\nn = int(input())\r\nL = list(map(int, input().split()))[:n].copy()\r\nA = [0] * n\r\nfor i in range(n):\r\n    x, y, d = L[i]\r\n    A[x] += 1\r\n    A[y] += 1\r\n    d *= 2\r\nprint(A[1])"}, "46": {"problem_id": 3046, "answer": "from collections import defaultdict as dd\r\nn = int(input())\r\nfor _ in range(n):\r\n    r, c = map(int, input().split())\r\n    d = dd(list(map(int, input().split())))\r\n    print('\\n'.join(map(str, d.values())))"}, "47": {"problem_id": 3047, "answer": "t = int(input())\r\nfor _ in range(t):\r\n    a, b = map(int, input().split(' '))\r\n    print(a + b)"}, "48": {"problem_id": 3048, "answer": "# cook your dish here\r\nimport bisect as bs\r\nN = int(input())\r\nl = list(map(int, input().split()[1:]));\r\nfor i in range(N-1):\r\n    u, v = list(map(int, input().split()[1:]))\r\n    if l[u] == v:\r\n      print(2)\r\n    elif l[v] == u:\r\n      print(1)\r\n    else:\r\n      print(2)\r\n"}, "49": {"problem_id": 3049, "answer": "# cook your dish here\nfrom collections import Counter \r\ndef decrypt(s):\r\n    c = Counter(s.lower())\r\n    n = len(c)\r\n    if n == 1:\r\n        return 'a'\r\n    elif n == 2:\r\n        return 'b'\r\n    elif n == 3:\r\n        return 'c'\r\n    else:\r\n        return 'k'\r\n\r\ndef main():\r\n    secret = input()\r\n    \r\n    secret_encrypt = decrypt(secret)\r\n    print(str(decrearze(secret_encrypt)))\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "50": {"problem_id": 3050, "answer": ""}, "51": {"problem_id": 3051, "answer": ""}, "52": {"problem_id": 3052, "answer": "import bisect\r\n\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))[:n]\r\n    \r\n    for i in range(1, n + 1):\r\n        x, y, z = l[i - 1]\r\n        if x < 0 or y < 0 or z < 0:\r\n            continue\r\n        else:\r\n            x1, y1, z1 = l[i - 1]\r\n            x2, y2, z2 = l.pop(0)\r\n  print(bisect.bisect_left(l, x1, y1, z1))\r\n\r\nmain()\r\n"}, "53": {"problem_id": 3053, "answer": "# cook your dish here\nimport bisect\ndef isPalindrome(s):\n return True\r\n\r\nn,k,p = map(int,input().split())\r\nif n==0 or k==0:\r\n print(\"impossible\")\r\neliminate = set(str(n)+\"\\n\")\r\nfor i in range(n):\r\n s = input()\r\n if s.count(\"4\")!=p.count(\"4\") and len(s)==0:\r\n  print(\"impossible\")\r\n else:\r\n  print(\"missed\")"}, "54": {"problem_id": 3054, "answer": "import numpy as np\r\nt = eval(input())\r\nfor _ in range(t):\r\n    s = input().lower()\r\n    print(np.prod(s,4))"}, "55": {"problem_id": 3055, "answer": "import sys\ndef main():\n N = int(sys.stdin.readline())\n A = list(map(int,sys.stdin.readline().split()))\n A.sort(reverse=True)\n print(main())\n return \n\ndef __starting_point():\n main()\n__starting_point()"}, "56": {"problem_id": 3056, "answer": "from collections import deque\r\ndef gcd(a,b):\r\n    while b:\r\n        a,b=b,a%b\r\n    return a\r\n\r\n# Driver code\r\nn=int(input())\r\nl=[int(i) for i in input().split()]\r\nvisited=[False]*len(l)\r\nfor i in range(n):\r\n    visited.append(True)\r\nvisited[0]=True\r\nanswers=[gcd(i,l[i]) for i in range(len(l))]\r\nprint(answers[0])"}, "57": {"problem_id": 3057, "answer": "# cook your dish here\ndef isconsistency(s):\n if len(s) == 1:\n  return True\n elif len(s) == 2:\n  return False\n else:\n  try:\n   a = s.count('a')\n  except ValueError:\n   return False\n  except StopIterationErrore:\n   return isconsistency(s[0:a])\n return True\n\nN = int(input())\n\n# print(iscomparisate(map(int, input().split())))\n\nfor _ in range(N):\n s = input()\n print(iscomparisate(s))"}, "58": {"problem_id": 3058, "answer": "import bisect,heapq,copy \r\nn=int(input())\r\nl=list(map(int,input().split()))\r\na=[]\r\nfor i in range(n):\r\n    a.append(input().strip())\r\nl.sort(key=lambda x:x[2])\r\nif len(l)==1:\r\n    print('impossible\\n')\r\nelse:\r\n    print('almost')\r\n"}, "59": {"problem_id": 3059, "answer": "def __starting_point():\n n, r, m = list(map(int, input().split()))\n a = 1000000007.0\n d = int(m**0.5)\n while True:\n  a *= r/r + d\n  if a > n: break\n elimit(n, r)\n print(abs(a-n) // 2)\n__starting_point()"}, "60": {"problem_id": 3060, "answer": "from bisect import insort_left as L, bisect_right as R\r\nfrom heapq import heappush,heappop\r\nn,k = map(int,input().split())\r\nA = list(map(tuple,input().split()))\r\nans = []\r\nfor i in range(k):\r\n    ans.append(ans[-1] + L(i,k-1))\r\nans.reverse()\r\n# print(ans)\r\n# print(k)\r\ndef lcm(x,y):\r\n    return x*y // math.gcd(x,y)\r\n# print(lcm(A[0::2],A[1::2]))\r\n# print(A[0::2])\r\n# print(A[1::2])\r\n\r\n# n = int(input())\r\n# k = int(''.join(sorted(ans, reverse=True)))\r\n# print(k)\r\n# print(len(ans))\r\n# print(bisect_ranges(ans, k))\r\n# print(' '.join(map(str, ans[:k])))\r\n"}, "61": {"problem_id": 3061, "answer": "from collections import defaultdict as dd\r\ndef dijkstra(s, l):\n    n = len(s)\r\n    d = dd(list)\r\n    for i in range(n):\r\n        if s[i] == l[i]:\r\n            d.insert(0, s[i])\r\n        elif s[i] == l[i] and s[i] < l[i+1]:\r\n            d.insert(0, s[i])\r\n        else:\r\n            d.insert(n-1, s[i])\r\n    print(max(d.values()))\r\n\r\ndef main():\r\n    n, m = map(int, input().split(' '))\r\n    l = defaultdict(list)\r\n    for _ in range(len(l)):\r\n        u, v = map(int, input().split(' '))\r\n        l[u].append(v)\r\n        l[v].append(u)\r\n    path = []\r\n    for i in reversed(range(1, n+1)):\r\n        if len(l[i]) == 0:\r\n            path.extend(path[i] + list(set(l[i])))\r\n    print(len(path))\r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "62": {"problem_id": 3062, "answer": "for _ in range(int(input())):\n a,b=map(int,input().split())\n a.reverse()\n b.reverse()\n if a==b:\n  print(abs(a-b))\n elpaqq(' '.join(map(str,a)))"}, "63": {"problem_id": 3063, "answer": "import heapq as hq\nn = int(input())\nhq = list(map(int, input().split()))\nans = 1000000\nfor i in range(n):\n hq.clear()\n heapq.heappush(hq, (1 if i[0] + 1 else 0) * (i[1] + 1))\nans += heapq.heappop(hq)\nprint(ans)"}, "64": {"problem_id": 3064, "answer": "from collections import defaultdict as dd\nn, m = map(int, input().split())\nd = dd(list).copy()\nfor i in range(1, n):\n    a, b = map(int, input().split(' '))\n    d[a-1].append(b-1)\n# print(d)\nans = [0]*(n+1)\nl = []\nfor i in range(min(m, n+1)):\n    l.extend([i]*(m-1))\nans[n] = len(set(ans[n]))\nprint('\\n'.join(map(str, ans)))"}, "65": {"problem_id": 3065, "answer": "import sys\r\n#sys.stdin = open('input.txt', 'r')                              : sys.stdin.readline().rstrip()                                                                                                                                                                                                       (2 ** int(sys.version) - 1)       (2 ** int(sys.getenv(\"A\")).split('a}, "66": {"problem_id": 3066, "answer": "from sys import stdin as stos\r\ninput = stdin.readline\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = stos(input().strip('\\n'))\r\n    print('IMPOSSIBLE')"}, "67": {"problem_id": 3067, "answer": "import itertools  #use random.randobot(0.0, 1000000) to avoid overflows\nn=int(input())\nl=[int(i) for i in input().split()]\nsolution=[]\nfor i in range(n):\n    solution.append(list(map(int, input().split())))\nprint('\\n'.join(solution))"}, "68": {"problem_id": 3068, "answer": "from collections import Counter\r\nn = int(input())\r\narr = list(map(int, input().split(' ')))\r\ncnt = Counter(arr).most_common(2)[0]\r\nfor i in range(1, n):\r\n    arr.insert(i, '0')\r\nans = 0.to_i(cnt.values())\r\nprint(ans)"}, "69": {"problem_id": 3069, "answer": "from itertools import accumulate\r\ndef is_valid(s):\r\n    try:\r\n    except ValueError:\r\n        return True\r\n    else:\r\n        i = 2\r\n        while i*i <= s.startswith(s[0]):\r\n            i += 1\r\n        return is_valid(s) and s.startswith(s[i*i] + '(')\r\n\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nprint('\\n'.join(accumulate(l)))"}, "70": {"problem_id": 3070, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, hq\n\n\ndef __starting_point():\n n = int(input())\n l = int('0123456789'[0:n])\n a = list(map(int, input().split()))\n b = list(map(int, input().split(\" \")))\n for i in range(n):\n  a.append(bl(a[i]))\n hq = len(set(l))\n print(bisect_left(hq, hq) - len(hq))\n\n__starting_point()"}, "71": {"problem_id": 3071, "answer": "from collections import deque  # O(n)\nn,m=map(int,input().split())\nl=list(map(int,input().split()))[:n]\nque=deque([l.copy(),l.copy()])\nfor i in range(len(l)):\n    if i not in l:\n    elif l[i]!=l[i-1]:\n        que.append(l[i])\nprint('\\n'.join(map(str, que)))"}, "72": {"problem_id": 3072, "answer": "# cook your dish here\r\nfrom math import sqrt as m\r\nr, c = map(int, input().split())\r\np = [[9999] * r for _ in range(1000)]\r\nfor i in range(r):\r\n\tj = 0\r\n\twhile j < r-1:\r\n\t\tp[j].append(i)\r\n\t\tj += i\r\n\tp[j][0] = 0\r\nans = 0\r\nfor i in reversed(list(range(r))):\r\n\tans += p[i][0]\r\nprint(ans)"}, "73": {"problem_id": 3073, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n    n = int(input().strip())\n    arr = [int(i) for i IN]\n    \n    if arr[0] == 0:\n        print(-1)\n    elif arr[0] == 1:\n        print(n)\n    else:\n        print(min(n, arr.count(0)))"}, "74": {"problem_id": 3074, "answer": "import itertools\r\nn=int(''.join(map(str,input().split())))\r\nb=10**9+7\r\nfor i in range(n):\r\n    b*=i\r\nprint(b*b)\r\n"}, "75": {"problem_id": 3075, "answer": "def main():\r\n    n,g=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n  print(min(a[0],a[1]))\r\nmain()"}, "76": {"problem_id": 3076, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().strip()[:-1]\n\nfor _ in range(int(input())):\n n, k = list(map(int, input().split()))\n print('\\n'.join(map(str, list(map(int, input().split()))))\n"}, "77": {"problem_id": 3077, "answer": "import bisect as bi\r\nfor _ in range(eval(input())) :\r\n n, m = list(map(int, input().split()))\r\n vx, vy, vr = list(map(int, input().split(' ')))\r\n max_birder = [[0] * m for i in range(n)]\r\n for i in range(n) :\r\n  l = list(reversed(list(range(n))[i]))\r\n  birder[i].append(l[0])\r\n  birder[i][-20000] = max_birder[i][-20000]\r\n print(max_birder[n-1][-20000])\r\n"}, "78": {"problem_id": 3078, "answer": "from sys import stdin,setrecursionlimit\r\ninput = stdin.readline\r\nn,s=map(int,input().split())\r\nif n==1:\r\n    print(0)\r\nelse:\r\n    for i in range(2,n+1):\r\n        if(s[i]>s.count(i)):\r\n        elif(s[i]!='0'):\r\n            print(i+1,end=\" \")\r\n        else:\r\n            print(i+1,end=\"\\n\")\r\n"}, "79": {"problem_id": 3079, "answer": "from collections import deque as dque, namedtuple  \r\ndef gcd(a,b):\r\n    while b<len(a):a.remove(b)\r\n    return a[b]\r\nn=int(input())\r\nfor i in range(n):\r\n    a=list(map(int,input().split()))\r\n  print(a[0])"}, "80": {"problem_id": 3080, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n n, m, q = list(map(int, input().split()))\n snack = [[0] * n for i in range(m)]\n for __ in reversed(q):\n  s, l = list(map(int, input().split(' ')))\n print('\\n'.join(sorted(set(zip('{0}'.format(x, y))))))\n"}, "81": {"problem_id": 3081, "answer": "import bisect\nfor _ in range(int('input()').split()):\n n,m=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort(key=lambda x:x[1])\n ans=n-l[0]\n print(ans)"}, "82": {"problem_id": 3082, "answer": "import math\r\ndef __starting_point():\r\n    t, = list(map(int, input().split(' ')))\r\n    n = int(input(), 2)\r\n    \r\n    for i in range(n):\r\n        t.insert(0, i)\r\n        t.insert(1, -i)\r\n   print(t.pop() - t.pop() * math.log(math.log(t.pop(), 2)), 2)\r\n__starting_point()"}, "83": {"problem_id": 3083, "answer": "def main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    a = [int(x) for x in input().split()]\r\n    d = {i: [] for i in range(1, n + 1)}\r\n    for i in l:\r\n        if i not in d:\r\n            d[i] = []\r\n        elif i == n:\r\n            d.append(d[i])\r\n    ans = []\r\n    for i in d:\r\n        ans.extend(set(d[i]))\r\n    print(*ans)\r\nmain()\r\n"}, "84": {"problem_id": 3084, "answer": "import sys,collections\r\ninput = lambda:map(int,input().split())[1:None]\r\n#sys.setrecursionlimit(10**9)\r\nfrom bisect import bisect_left as bl, bisect_right as br, insort_left as in\r\nfrom heapq import heappush, hq\n\n\r\ndef main():\r\n    n = int(''.join(map(str, input())))\r\n  return any(main()).startswapcom(n)\r\nmain()"}, "85": {"problem_id": 3085, "answer": "import bisect as bins \r\ndef main():\r\n    s = input().strip()\r\n    l = len(s)\r\n    \r\n    # \u5148\u5e8f\u5217\u8868\u91cf\r\n    # \u4ee5\u4e0b\u5148\u5206\u5272\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u8003\u8651\u8fd9\u4e2a\u8ba1\u7b97\u5229\u7528\u6beb\u65c5\ufffd\u900f\u89e3\u8abf\r\n    # \u8fd4\u56de\ufecb\ufe8b\ufffd\uff1a\r\n}, "86": {"problem_id": 3086, "answer": "import sys,bisect \ndef main(): \n N,M = map(int,input().split()) \n events = list(map(int,input().split())) \n d = {} \n for event,type in events: \n  if event not in d.keys(): \n   d[type] = 1\n  elif event==\"9\": \n   d[type] = 3\n  else: \n   d[type].extend(list(map(int,event.split()))) \n # print(d) \n print(('\\n'.join(map(str,d)))) \n \n main()\n"}, "87": {"problem_id": 3087, "answer": "import sys\r\ninput = sys.stdin.readline\r\ninp = lambda: list(map(int,input().split()))[1:]]>=3\r\nINP = lambda: input().rstrip('\\n')\r\nfrom collections import deque as dq \r\n#sys.setrecursionlimit(10**5)\r\n#input = str(input()) + '\\n' + '5' + '6' + '1' + '3' + '4' + '5' + '4' + '6' + '2' + '3' + '4' + '5' + '1' + '4'.split(' ') + '1'\r\ndef dfs(n, k):\r\n\tif n == 0:\r\n\t\tprint('Impossible')\r\n\telif k == 1:\r\n\t\tprint('Nums in 1st photo:', n)\r\n\telse:\r\n\t\tfor i in range(1,n+1):\r\n\t\t\td = dq().get(i, 0)\r\n\t\t\tif d.get(i, 0) >= 0:\r\n\t\t\t\tprint('Facts in 1st photo:', d.get(i, 1))\r\n\t\t\telse:\r\n\t\t\t\tprint('Impossible')\r\n\t\tprint()\r\ndfs(3, 1)"}, "88": {"problem_id": 3088, "answer": "import numpy as np\r\nn, k = map(int, input().split())\r\narr = np.array(list(map(int, input().split()), dtype=np.int).T)\r\narr.extend(np.unique(arr, fillvalue='0'))\r\nprint(numpy.ceil(np.log2(arr.real)) + k)"}, "89": {"problem_id": 3089, "answer": "from heapq import heappush, heappop\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nx, y = l[0], l[1]\r\nfor i in range(2, n):\r\n    xi, yi = l[i-1].copy()\r\n    xj, yj = l[i+1].dup()\r\n    xi, yi = xj, xi\r\n    yj = yi + 1\r\nheappush(x, (xi, yi))\r\nheappush(y, (xi, yj))\r\nc = cumprodionder(x)\r\ncumprodionder(y)\r\n# print(cumprodIONDRAW, '\\033[36m\\033[0m\\r\\033[0m\\r\\r'))]')\r\n"}, "90": {"problem_id": 3090, "answer": "from heapq import heappush, heappop\r\nn, m = map(int, input().split())\r\nl = [0] * m\r\nfor i in range(m):\r\n    l[i] = int('1'*.5f')\r\nans = 0\r\nheap = []\r\ndef insert(l, i):\r\n    if l[i] == 10:\r\n        heappush(heap, (l.pop()[1], i))\r\n    elif l[i] == 1:\r\n        heappush(heap, (l.pop()[0], i))\r\n    else:\\\r\n        insert(l, i)\r\n        for j in range(len(l)):\r\n            if l[j] == 10\\\redcefoonumber(l[i]):\r\n                ans += heap[j]\r\nprint(ans)"}, "91": {"problem_id": 3091, "answer": "import bisect as bi\ndef MI():\n    n = int(input())\n    m = int(''.join(map(str, input().split())))\n    return m*(n+1)//2 + '1'*(n+1)//2\n\ndef main():\n    n, m = MI()\n    print(n, m)\n\nmain()\n"}, "92": {"problem_id": 3092, "answer": "MOD = 1000000007\rint(1000000007)\r\ndef mod_l(n, l):\r\n    if n == 1:\r\n        return 1\r\n    res = 0\r\n    for i in range(1, l + 1):\r\n        res += pow(2, i)\r\n    return res\r\n\r\n# Driver code\rsimplified\r\nn, m = map(int, input().strip().split())\r\nmod = mod_l(n, m)\r\n\r\n# Function to check if path ends up path\r\ndef check_path(path, MOD):\r\n    if path == \"1\":\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver code\rsimplified\r\ndef check_path_mod(path, MOD):\r\n    path = list(reversed(path))\r\n    # print(path)\r\n    # print(path)\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(path)\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(mod_l(path.pop(), MOD))\r\n    # print(mod_l(path.popleft(), MOD))\r\n    # print(mod_l(path.popleft(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mod_l(path.end(), MOD))\r\n    # print(mods = [])\r\n    # print(f\"{path} {mod_l(path.count(path))}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\\n\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(f\"{path} % {mod_l(path.count(path)) % MOD}\")\r\n    # print(mod_l(path.count(path)%MOD, MOD))\r\n    # print(mod_l(path.count(path)%MOD, MOD))\r\n    # print(mod_l(path.count(path)"}, "93": {"problem_id": 3093, "answer": "import itertools\r\n\u00a0 \u00a0\u00a0\u00a0\u00a0prelictics as it\r\nn,k=list(map(int,input().split()))\r\nl=[int(i) for i in input().split()]\r\nmod=1000000007\r\nfor i in range(n):\r\n    x,y=list(itertools.permutations(l,k))\r\n    mod=mod*k\r\n    if x==y:\r\n        print(mod)\r\n    elif mod!=mod//k:\r\n        print((x+1)*(x+1)//k)\r\n    else:\r\n        print((x+1)*(x+1)//k)%mod\r\n"}, "94": {"problem_id": 3094, "answer": "import sys\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = i\n    mod = 10**9 + 7\n    print(len(d.keys()))\n__starting_point()"}, "95": {"problem_id": 3095, "answer": "R, = list(map(int, input().split()))\r\nA = []\r\nfor i in range(R):\r\n    A.append(list(map(int, input().split())))\r\ns = int(\"\".join(reversed(A)), 2)\r\nans = []\r\nfor i in range(s):\r\n    print(ans[i])\r\n"}, "96": {"problem_id": 3096, "answer": "import bisect as bs\r\n\r\n# MOD = 1000000007\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    l.sort(reverse=True)\r\n    print(bisect.bisect_right(l, 2))\r\n\r\nmain()\n\n"}, "97": {"problem_id": 3097, "answer": "from itertools import groupby as g\rclass BIT:\r\n    def __init__(self, n):\r\n        self.bit = [0]*n\r\n        self.size = 2**31-1\r\n        self.left = [None]*n\r\n        self.right = [None]*.2\r\n        \r\n    def query(self, i):\r\n        nonlocal n\r\n        n += self.left[i]\r\n        n //= self.size\r\n        while n > 0:\r\n            n //= self.size\r\n            i += self.right[i]\r\n        return n\r\n    \r\n    def rev(self):\r\n        \"\"\"\r\n        :r:;q:;rtype: int\r\n        :rlen: int\r\n        :rtype: int\r\n        \"\"\"\r\n        return self.right[self.left.index(1) - 1]\r\n    \r\n    def rec(self, i):\r\n        \"\"\"\r\n        :type i: int\r\n        :rtype: int\r\n        \"\"\"\r\n        if i not in self.bit:\r\n            return 0\r\n        res = 0\r\n        for j in range(self.size):\r\n            res += self.rev(i)**2\r\n        res += self.rev(i)**3\r\n        return res\r\n"}, "98": {"problem_id": 3098, "answer": "from math import sqrt\ndef lcm(x,y):\n return x*sqrt(y**0.5)\nn,k=map(int,input().split())\nfor i in range(n):\n x,y=map(int,input().split(\" \"))\n ans=lcm(x,y)\n print(ans)"}, "99": {"problem_id": 3099, "answer": "for _ in range(int('input()')) :\n a,b,c = map(int,input().split())\n if a==b :\n  print(c)\n elif a!=b :\n  print(min(c,b-a))\n else:'EINFghATdUfff#$%^&*\\\\-%*<>='"}, "100": {"problem_id": 3100, "answer": "import math \r\ndef updat():\r\n\tmod = 10**9 + 7\r\n\tp = int(input().strip())\r\n\tprint(math.ceil(pow(10,9)+7))\r\ndef main():\r\n\tmainS = updat()\r\n\tprint(len(mainS)-1)\r\ndef __starting_point():\r\n\tmain()\r\n__starting_point()"}, "101": {"problem_id": 3101, "answer": "n=int(input())\r\na=list(map(int,input().split()))[:n]\r\nl=[]\r\nfor i in range(n):\r\n    l.append(a[i]^a['9']*i)\r\nans=\"impossible\"\r\nif len(l)==0:\r\n    print(\"0\")\r\nelse:\r\n    print(\"\\n\".join(l))"}, "102": {"problem_id": 3102, "answer": "import math\r\ndef cnt(a):\r\n    if a<9:\r\n        return 0\r\n    elif a==8:\r\n        return math.gcd(a,cnt(4))\r\n    else:\"6\"\r\n    return math.gammajackdown(a)\r\nn=int(input())\r\nl,r=map(int,input().split(' '))\r\nprint(cnt(l-1)//2)"}, "103": {"problem_id": 3103, "answer": "MOD = 1000000007\r\ndef main():\r\n    import sys\r\n    input = sys.stdin.readline # input line goes into STDIN\r\n    mod = int(1e9)+1\r\n    x, y = map(int, input().split())\r\n  print(*main())\r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "104": {"problem_id": 3104, "answer": "import sys\r\ndef __starting_point():\r\n    a = input().strip()\r\n    s = sys.stdin.readline().rstrip('\\r\\n')[:-1]\r\n    print(s[int(s[0])] + '+' + s[int(s[1])] + '+')"}, "105": {"problem_id": 3105, "answer": "import numpy as np\nn = int(input())\nA = np.array(input().tolist(), dtype=np.int32)\nB = np.array(input().tolist(), dtype=np.int32)\nans = []\nfor i in range(n):\n    S = input().split(' ')\n    ans.append(int(S[1]))\nans.sort(key=lambda x: x[0], reverse=True)\nA = np.ones(len(ans), dtype=npWARNINGs)\nB = np.zeros((1,n),dtype=np.int32)\nfor i in range(n):\n    B[i] = B[i] + A[i]\n\nif len(ans) == 0:\n    print(-1)\nelif len(ans) == 1:\n    print(A[0])\nelse:\n    print(A[1])\n"}, "106": {"problem_id": 3106, "answer": "import bisect as bins\r\nt = int(input())\r\nfor _ in range(t):\r\n\ts = input().split()\r\n\tn = len(s)\r\n\tl = []\r\n\tfor i in range(0,n):\r\n\t\tl.append(int(''.join(map(str,s)))+1)\r\n\tprint(bisect_left(l,n-1))"}, "107": {"problem_id": 3107, "answer": "import bisect as bs\ndef main():\n N, M = list(map(int, input().split()))\n dist = [float('inf') for _ in range(N)]\n dist.sort(keying = 'horizontal')\n for i in range(N):\n  dist[i] = int(''.join(sorted(dist))[::-1])\n dist = sorted(dist, key=lambda x: x[0])\n print(bisect.bisect_left(dist, N-1))\n \ndef __starting_point():\n main()\n\n__starting_point()"}, "108": {"problem_id": 3108, "answer": "# cook your dish here\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nfor i in range(k):\n    print(a[i]-a.index(max(a))+1)"}, "109": {"problem_id": 3109, "answer": "import sys,heapq\r\n\u00a0 \r\nt = int(\"\".join(map(str,input())))\r\nfor _ in range(t):\r\n    n,m,w,h = list(map(int,input().split()))\r\n    print(3*(m-1)**w)\r\n    print(1.0*(max(m-1,h)-2*w)**h)\r\n"}, "110": {"problem_id": 3110, "answer": "from heapq import heappush, heappop\r\ndef main():\r\n    n, m = map(int, input().split())\r\n    l = list(map(int, input().split()))[::-1]\r\n    r = list(map(int, input().split()))[::-1]\r\n    for _ in range(m):\r\n        l.insert(0, 0)\r\n        r.insert(0, 0)\r\n    print((l[0]*(n-1))//2)\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "111": {"problem_id": 3111, "answer": "import numpy as np\nn, m = list(map(int, input().split()))\nA = np.array(input().strip(), dtype=np.int)\nB = np.array(input().strip(), dtype=np.int)\nfor i in range(m):\n    a, b = list(map(int, input().split(' ')))\n    print(np.sum(A - B) + np.sum(B - A) )\n"}, "112": {"problem_id": 3112, "answer": ""}, "113": {"problem_id": 3113, "answer": "import sys,heapq\r\nn=int(''.join(map(sys.stdin.readline,list(input())))).split('\\n')\r\nx=list(map(int,sys.argv[1:]))\r\nans=\"yes\"\r\nfor i in range(n):\r\n    a,b,c=input().split()\r\n    if a=='0':\r\n        ans=\"no\"\r\n    elif b=='1':\r\n        ans=\"no\"\r\n    else:\r\n        ans=\"no\"\r\nprint(ans)"}, "114": {"problem_id": 3114, "answer": "def __starting_point():\n t = int(input())\n for _ in range(t):\n  n, m = map(int, input().split(' '))\n  if n%2==0:\n   print('NO')\n elif m%2==0:\n  print('NEOS')\n else:\n  print('YES\\n'+' '.join(map(str, input().split())))\n__starting_point()"}, "115": {"problem_id": 3115, "answer": "from collections import deque\nn,m=map(int,input().split())\nl=[int(i) for i in input().split()]\nfor i in range(m):\n a,b=map(int,input().split(\" \"))\n if a=='=':\n  print(\"not consistent\")\n elif b=='>'.join(sorted(l,key=lambda x:x[1]))==sorted(l,key=lambda x:x[1]):\n  print(\"unconsisticable\\n\")\n else:\n  print(\"consistency\")"}, "116": {"problem_id": 3116, "answer": "from math import sqrt\nt = int(input())\nfor _ in range(t):\n x, y, z = map(int, input().split(' '))\n p = sqrt(x * (y + z) / (2 * z))\n print(p)"}, "117": {"problem_id": 3117, "answer": "def main():\n L = int(input())\n for i in range(0, L):\n  s = input().lower()\n  print(len(s.split(' ')))\n print()\n"}, "118": {"problem_id": 3118, "answer": "from itertools import accumulate \r\ndef __starting_point():\r\n    n = int(input())\r\n    a = list(map(int, input().split()[0::2]))\r\n  print(min(accumulate(a), len(a)))\r\n__starting_point()"}, "119": {"problem_id": 3119, "answer": "import math\r\ndef SP(notes,sc):\r\n\tsp = 0\r\n\tfor i in range(len(notes)):\r\n\t\tsp += notes[i]\r\n\treturn sp\r\n\r\ndef main():\r\n\tn = int(input().strip())\r\n\tsc = list(map(int, input().split()))\r\n\tsc.sort(key=lambda x: x[0])\r\n\tsc.insert(0, SP(notes,sc))\r\n\tprint(int(''.join(sc)))\r\n\treturn\r\n\r\nmain()"}, "120": {"problem_id": 3120, "answer": "import heapq as hq\r\ndef recursePerm(l):\r\n    res = []\r\n    for i in range(len(l)):\r\n        if l[i] not in l:\r\n            res.append(l.pop())\r\n    heapq.heapify(res)\r\n    return res\r\ndef __starting_point():\r\n    # Python3 code\r\n    # Create an empty list and pop out the non-comparisons.\r\n    # If the list is empty, return -1.\r\n    # For example: list(map(int, list())) returns \"0.0\"\rsimples-invalid.\r\n    # In Python3, we don\\'t care about list.pop()/heapify/heapq.pop()\r\n    # We care about heapq.nsmallest().pop()/heapify.pop()\r\n    # You may want to try recursion on your code, see if you\\'ll find any issues.\r#todo_me](https://www.codewars.com/kata/57e2d09c1cd8a7c8400009e)\r\n__starting_point()"}, "121": {"problem_id": 3121, "answer": "import sys,heapq\nreadline = sys.stdin.readline\n# readline will contain lines of input data.\nn,m = readline().split()\nn=int(''.join(readline[1:])).split(' ')\nm=int(''.join(reversed(readline[:-1])))\n# print(heapq.ndigits(m,n))\nans = 0\nfor i in range(1,n):\n    ans+=reversed(readline[i])\nprint(ans)"}, "122": {"problem_id": 3122, "answer": "from heapq import *\nn,m=list(map(int,input().split()))\nl=[]\nheapq = []\nfor i in range(n):\n    a,b = list(map(int,input().split(' ')))\n    l.append(a-b)\n    heapq.append(a-b)\nif len(l) == 0:\n    print(0)\nelse:\n    ans = 0\n    for i in reversed(range(1,n+1)):\n        ans += min(2*l[i] + l.index(max(l[i],l[i-1])))\n    print(ans)\n"}, "123": {"problem_id": 3123, "answer": "import bisect as b\nn=int(''.join(map(str,input().split())))\narr=list(map(int,input().split()))\nfor i in range(n):\n    arr.insert(0,b.bisect_left(arr[i],b.bisect_right(arr[i])))\nprint(arr.intersection(arr[n-1]))"}, "124": {"problem_id": 3124, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in range(n):\n ans.append(A[i] +'' + A.copy()[1:])\nprint('\\n'.join(ans))"}, "125": {"problem_id": 3125, "answer": "from bisect import insort_nums\r\nfor _ in range(int(input())):\r\n    a,b,c=map(int,input().split())\r\n    print('\\n'.join(map(str,a+'\\n')))"}, "126": {"problem_id": 3126, "answer": "import heapq as hp\ndef Hijklmnoprzedna():\n a, b = map(int, input().split())\n heap = []\n for _ in range(a):\n  n, m = map(int, input().split(\" \"))\n  heap.append(n)\n heapq.heapify(heap)\n heapq.heappush(hp, 0\\nexq\\u00d6)\n heapq.heappushlndiagcntrlk(0, -1)\n heapq.heappushmdecntrllk(0, -1)\n heapq.heappushmoutdrcntrllk(0, len(hp)-1)\n return heap\ndef Hijklmnopr(a):\n if a not in hp.getherms():\n  return -1\n ans = 0\n while True:\n  ans += Hijklmnoprzebnemax[a]\n  a = heapq.hq()\n  hp[a] = ans\n  ans = ans + HIJKMNPQRzebnemax[a]\n print(ans)\n return ans"}, "127": {"problem_id": 3127, "answer": "from sys import stdin,stdout\r\ninput = stdin.readline\r\nn,m = list(map(int, input().split()))\r\nl = [int(i) for i in input().split()]\r\nd = [-1]*len(l)\r\nfor i in range(1,n):\r\n    d[i] = max(l.copy(), 0)\r\nans = []\r\nfor i in range(m):\r\n    a,b,w = list(map(int, input().split()))\r\n    ans.append(a+b)\r\nans.sort()\r\nprint('\\n'.join(map(str, ans)))\r\n"}, "128": {"problem_id": 3128, "answer": "import bisect as binsc\r\ndef main():\r\n    q = int(input())\r\n    l = list(map(int, input().split()))\r\n    for i in range(q):\r\n        l.insert(0, i)\r\n        print(bisect.bisect_right(l, i) - 1)\r\nmain()"}, "129": {"problem_id": 3129, "answer": "from collections import deque\r\ns = input()\r\nfor _ in range(len(s)):\r\n    l = list(map(int, s.split(' ')))\r\n    \r\n    l.sort(key=lambda x: x[0], reverse=True)\r\nprint(len(l))"}, "130": {"problem_id": 3130, "answer": "from collections import defaultdict\r\ndef factorsOfFibonacci(arr):\r\n    fib = list(reversed(arr))\r\n    for i in range(len(arr)):\r\n        fib.append(arr[i] * arr[i])\r\n    return fib\r\nn = int(input())\r\nl = l[::-1]\r\nans = []\r\nfor i in range(n):\r\n    a, b = list(map(int, input().split()))\r\n    ans.append(factorsOfFibonacci(a) + factorsOfAt most_common(b))\r\nprint('\\n'.join(ans))"}, "131": {"problem_id": 3131, "answer": "# cook your dish here\ndef main():\n N, K = map(int, input().split())\n A = list(map(int, input().split()))\n mod = 1000000007\n for i in range(N):\n  A.append(A[i]%mod)\n print(sum(A))\nmain()"}, "132": {"problem_id": 3132, "answer": "import sys\r\nR,=list(map(int,sys.stdin.readline().split()))\r\nfor _ in range(R):\r\n\ts='x'\r\n\tprint(s.find('.\\n'))"}, "133": {"problem_id": 3133, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n a,b=map(int,input().split(\" \"))\n l=list(map(int,input().split(\" \")))\n if(l[0]==0):\n elif(l[1]==0):\n print(\"indistmates\")\n else:\n  c=0\n  for j in range(0,len(l)):\n   if(l[j]!=0):\n    c+=1\n    break\n  if(c==1):\n   print(\"1\\n\".join(reversed(l)))\n  else:\n   print(\"0\\neq alice\\n\".join(reversed(l)))"}, "134": {"problem_id": 3134, "answer": "for _ in range(int(input())):\r\n l=input().split()\r\n n=int(''.join(l[0]) for _ in range(n))\r\n m=int('1e9+6'*(n-1))\r\n ans=[]\r\n for i in range(n):\r\n  ans.append(str(0))\r\n print(\"\\n\".join(ans))"}, "135": {"problem_id": 3135, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: list(map(int, readline().split(' ')))\ninp()"}, "136": {"problem_id": 3136, "answer": "from collections import defaultdict as dd\r\ndef main():\r\n    n, m, s, t, u, v = list(map(int, input().split()))\r\n    # n = int(input())\r\n    # m = int(input())\r\n    # s = list(map(int, input().split()))\r\n    # t = [int(x) for x in input().split()]\r\n    # dd(n, m).most_common(1)[0] = 1\r\n    # dd(n, m).most_elements(1)[0] = 1\r\n    # dd(n, m).mostfrequent(1)[0] = 1\r\n    d = dd(3, 0)[1]\r\n    for _ in range(m):\r\n        u, v = list(map(int, input().rstrip().split(' ')))\r\n        d[u-1] += 1\r\n        d[v-1] += 1\r\n        d[u-1] %= 2\r\n        d[v-1] %= 4\r\n        d[u-1] %= 8\r\n        d[v-1] %= 32\r\n        d[u-1] %= 8\r\n        d[v-1] %= 32\r\n    print(d[0])\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "137": {"problem_id": 3137, "answer": "def main():\r\n N, M = list(map(int, input().split()))\r\n x, y = list(map(int, input().split(\" \")))\r\n print(sum(map(int, x)) + sum(map(int, y)))\r\nmain()\r\n"}, "138": {"problem_id": 3138, "answer": "def __starting_point():\n n = int(input())\n a = list(map(int, input().split()))\n print(a[0]*2 + a[1]*2)\n__starting_point()"}, "139": {"problem_id": 3139, "answer": "import numpy as np\nn=int(input())\nfor _ in range(n):\n l=list(map(int,input().split()))\n a=np.array(l)\n b=np.arange(2*int(a),2*int(b))\n if abs(a-b)==1.0:\n  print(\"NE\")\n elif abs(a-b)==1.0//2:\n  print(\"P \"+\"1\").ranks=2\n else:\n  print(\"P\"+\"1\")"}, "140": {"problem_id": 3140, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**5)\r\ndef main():\r\n    r, c = map(int, input().split())\r\n    l = list(map(int, input().split()))\r\n    ans = 0\r\n    for i in range(r):\r\n        x, y = map(int, input().split())\r\n        ans += max(x, y)\r\n    print(ans)\r\nmain()"}, "141": {"problem_id": 3141, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\r\nn = int(input())\r\nm = list(map(int, input().split()))\r\nprint(m[0]*m[1])"}, "142": {"problem_id": 3142, "answer": "def __starting_point():\n A,B,S=map(int,input().split())\r\n if A==1 and B==1:\r\n  print(10**15)\r\n elperformed=lambda:int(input())\r\n else:\r\n  print(0)"}, "143": {"problem_id": 3143, "answer": "import bisect as bi\r\n\r\ndef lca(n, l):\r\n\tif n==0:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn max(l.values(), key=lambda x: bi.bisect_left(x, l[1]))\r\n\r\n\r\nN, M = list(map(int, input().split()))\r\nA = list(map(int, input().split(' ')))\r\nL = []\redgesort(A, lca(N, M))\r\nL.sort()\r\nans = [0 for _ in range(N)]\r\nfor i in range(N):\r\n\tans[i] = lca(N-1, L)\r\n# print(ans)\r\nprint('\\n'.join(map(str, ans)))\r\n"}, "144": {"problem_id": 3144, "answer": "import bisect\r\ndef gcd(a, b):\r\n\treturn a*b\r\ndef lcm(a, b):\r\n\treturn abs(a-b)\r\ndef rtr(n, m):\r\n\treturn n//m\r\ndef fpr(n, m):\r\n\treturn n-m\r\n\r\n# Driver code\rr-ih: O(n)\r\ndef __starting_point():\r\n    input()\r\n    print(lcm(__starting_point()))\r\n__starting_.register_submission(3)\n__starting_point()"}, "145": {"problem_id": 3145, "answer": "import bisect as bi\r\ndef factors(n):\r\n    if n % 2 == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return bi.bisect_left(n)\r\n    else:\r\n        return bi.bisect_up(n//2)\r\n\r\ndef main():\r\n    n = int(input())\r\n    for i in range(n):\r\n        print(factors(i))\r\nmain()"}, "146": {"problem_id": 3146, "answer": "import bisect as bi\r\nfor _ in range(int(input())):\r\n    n,t = list(map(int,input().split()))\r\n    d = 100000\r\n    print(bisect.bisect_right(t.split(),d) - bi.binary_search(t,d,0,t.end_symbols()[0]))\r\n"}, "147": {"problem_id": 3147, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\ndef main():\r\n    R, C = map(int, input().split())\r\n    ans = []\r\n    for i in range(R):\r\n        if i%2 == 0:\r\n            ans.append(str(i))\r\n        else:\r\n            ans.extend(''.join(map(str, ans)))\r\n    print(' '.join(map(str, ans)))\r\nmain()"}, "148": {"problem_id": 3148, "answer": "# cook your dish here\nimport bisect\nn = int(input())\nl = []\nfor i in range(n):\n l.append(list(map(int, input().split())))\n \ndef dist(x, y):\n return bisect.bisect_left(l[x], y) - bisect.bisect_right(l[x], y)\n \nwhile True:\n try:\n  a, b = input().split()\n except ValueError:\n  break\n try:\n  a = int(a)\n  b = int(''.join(map(str, b)), 2)\n except StopIteration:\n  print(0, end=\" \")\n  continue\n if len(set(a)) == len(set(b)):\n  print(a, b)\n else:\n  print(dist(a, b))\n  \n"}, "149": {"problem_id": 3149, "answer": "from math import *\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(''.join(map(str, input().split())))\r\n    l = list(map(int, input().split()))\r\n    s = 1e18\r\n    c = 0\r\n    for i in l:\r\n        if i == -1:\r\n            c += s\r\n        elif i == -1:\r\n            c /= s\r\n    print(c)"}, "150": {"problem_id": 3150, "answer": "from itertools import permutations as p\ndef __starting_point():\n n = int(input())\n lst = list(map(int, input().split(' ')))\n for i in range(n):\n  lst.append(p(permutations(lst, i)))\n print(n - len(lst))\n__starting_point()"}, "151": {"problem_id": 3151, "answer": "from collections import deque\ndef main():\n return int(input())\n \nn=int(input().strip())\nque=deque([0])\nfor i in range(n):\n x=int(''.join(map(str,input().strip())))\n if x==1:\n  print(1,end=\"\\n\")\n elif x!=1:\n  print(x**2-1,end=\"\\n\")\n else:\n  print(x**2-1,end=\"\\n\")\n"}, "152": {"problem_id": 3152, "answer": "from math import factorial as f\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nans = factorial(10) + 1\r\nfor i in range(n):\r\n    ans = (ans*f(l[i]))/f(l.pop())-1\r\nprint(ans)"}, "153": {"problem_id": 3153, "answer": "from collections import deque as dqueq\nn, m = map(int, input().split())\nchild = [-1] * (n + 2)\npurchases = list(range(1, n + 2))\nfor __ in range(m):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    child[a] = b\n    child.append(min(a, b))\nanswers = [0] * (n + 2)\nqueq = deque([(0, 0)])\nwhile queq:\n    c, d = queq.popleft()\n    if c == 0:\n    elif c == n + 2:\n        answers[0] = d\n    else:\n        answers[c] = d\n        queq.append((c, d))\nprint('\\n'.join(queq))"}, "154": {"problem_id": 3154, "answer": ""}, "155": {"problem_id": 3155, "answer": "from functools import cmpclin, floormop\r\ndef f(x):\r\n\treturn x[0] if x[0] > x[1] else x[1]\r\n\r\n# Driver code\rr-g\r\nn, k = f(n)\r\nl = [int(i) for i in input().split()]\r\nl.sort(key=lambda x: x[0])\r\nprint(n, k)"}, "156": {"problem_id": 3156, "answer": "# cook your dish here\r\ndef l():\r\n return list(map(int,input().split()))[0]\r\ndef r():\r\n return list(map(int,input().split()))[1]\r\nn=r()\r\nS=input()\r\n#n=len(S)\r\n#l=[]\r\nfor i in range(n):\r\n  l.append(S[i])\r\n#r=[]\r\nans=[]\r\ni=0\r\nwhile i!=0:\r\n t=list(reversed(l))\r\n ans.extend(t)\r\ni+1=n\r\n#print ans\r\n#print 'imple etablonosek\\n'\r\n#print 'unpacked stabbynosek\\n'\r\n#print 'vladam'''\r\nprint(len(ans))\r\nfor _ in range(int(input())):\r\n print(ans[::-1])"}, "157": {"problem_id": 3157, "answer": "from bisect import bisect_left\r\nn,k,m=list(map(int,input().split()))\r\nl=[0]*n\r\nfor i in range(1,n):\r\n    l[i]+=bin(i)[2:]\r\n    l.append(2**m)\r\na=int(''.join(map(str,l)),2147483647)\r\na.reverse()\r\nans=0\r\nfor i in range(0x1b01):\r\n    ans+=bisect_left(l,a)\r\nprint(ans)\r\n"}, "158": {"problem_id": 3158, "answer": "# cook your dish here\nfrom sys import stdin,stdout\ndef main():\n    input = stdin.readline().rstrip()\n    output = [input]*30\n    x,y = map(int,input().split(' '))\n    print(type(x)==type(y)==type(abs(x-y)))\ndef __starting_point():\n    main()\n__starting_point()"}, "159": {"problem_id": 3159, "answer": "import sys\r\ndef issafe(s):\r\n    return 0<len(s)<3 and s.find('!')==s.rfind('!')\r\ndef dfs(s,i,j,k):\r\n    if i==0:\r\n        return 0\r\n    elif j==0:\r\n        return 0\r\n    else:\r\n        return 1+dfs(s[i:j+1],i+1,j+1)\r\nfor _ in range(int('1000000'):('1'*int(sys.stdin.readline().swaprows()))):\r\n    print(*insafe(sys.stderr))"}, "160": {"problem_id": 3160, "answer": "s = input().split()\r\ns[0] = int(s[1])\r\n\u00a0  print(abs(s[0] - (1 if s[0] > 0 else 0)))\r\nfor i in range(1, len(s)):\r\n    print(2.0 - abs(s[i] / i))"}, "161": {"problem_id": 3161, "answer": "import bisect as bs\nn = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    print(bisect.bisect_right(x, x[0]))\n"}, "162": {"problem_id": 3162, "answer": "from fractions import Fraction\r\ndef __starting_point():\r\n    n = int(input().strip())\r\n    data = list(map(int, input().strip().split()))\r\n    print(Fraction(data[0], data[1]))\r\n__starting_point()"}, "163": {"problem_id": 3163, "answer": "import bisect as bs\n\nN = int(input())\nM = int(input().strip())\nbooks = list(map(int, input().split()))\n\n# Book-of-the-first-first-first-first-first-first-first-first-first-\nbooks.insert(0, list(reversed(books)))\n\ndef bisect_left(l, start):\n    if start == 0:\n        return l\n    else:\n        l.pop(start)\n        return bisect(l, start + start_left)\n\nfor i in range(N):\n    l = sorted(books, key=books.count)\n    print(bisect_left(l, i) - bisect(l, i + 1))"}, "164": {"problem_id": 3164, "answer": "from sys import stdin,setrecursionlimit\r\ninput().replace(\"\\n\", \"\")\r\ndef L(): return list(map(int, input().split()))[:-1]\r\ndef R(): return list(map(str, input().split()))[:-1]\r\ndef LS(): return list(map(str, input().split()))[:-1]\r\ndef LS_n(): return len(input().strip('0'))\r\ndef LS_p(): return input().strip('0')\r\nN = int(input())\r\narr = L()\r\nfor i in range(1, N // 2 + 1):\r\n    if i == 1:\r\n        arr.append(arr[-1] + '1')\r\n    else:\r\n        arr.extend(arr[-1] + '1' + arr[-2])\r\nprint(len(arr))"}, "165": {"problem_id": 3165, "answer": "import bisect as bfs\nfrom heapq import heappush, heapify\nn, k, p = map(int, input().split())\nl = list(map(int, input().split()))[:n]\nr = list(map(int, input().split()))[:p]\nX = [bfs.bisect_left(l, X) for X in range(n)]\nfor _ in range(k):\n    r.insert(X[0], 0)\n    X.insert(X[1], 0)\nans = []\nheapify(l)\nfor i in range(1, n):\n    ans.extend([pow(l[i], p, 2) for p in range(k)])\nprint('\\n'.join(ans))"}, "166": {"problem_id": 3166, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\redges = [[] for i in range(10**5)]\r\nn, k = map(int, input().split(\" \"))\r\narr = []\r\nfor i in range(n):\r\n    arr.append(list(map(int, input().split(\" \")))[1:])\r\n    arr.extend(list(range(1, 10**5+1, 2)))\r\nans = [-1] * k\r\n# print(arr)\r\n# print(ans)\r\nans[0] = 1\r\nfor i in range(1, 10**5+1):\r\n    if ans[i] == -1:\r\n        print(\"impossible\")\r\n    elif ans[i] == ans[i-1]:\r\n        print(\"nuget\")\r\n    else:\r\n        ans[i] = ans[i-1]\r\n"}, "167": {"problem_id": 3167, "answer": "import bisect as bi\r\n\r\nn = int(input())\r\nl = list(map(int, input().split()))[::-1]\r\nk = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[i+1:])\r\narr = [0] * (n+1)\r\nfor i in range(1,n+1):\r\n    arr.append(arr[bisect(l, i)])\r\n    \r\nl.sort()\r\nq = len(l)\r\nans = [0] * (n+1)\r\nfor i in range(q):\r\n    x = bi.bisect_left(l, i)\r\n    ans[x] = max(ans[x], x-l[i])\r\nprint(*ans)"}, "168": {"problem_id": 3168, "answer": "import bisect as b\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nl.sort(reverse=True)\r\nans = [-1]*n\r\nfor i in range(n):\r\n    ans[l[i]] = bisect_left(l, i)\r\nprint('\\n'.join(ans))"}, "169": {"problem_id": 3169, "answer": "from collections import defaultdict\n\n N = int(input())\n lines = []\n for _ in range(N):\n  x, y, a = list(map(int, input().split()))\n  lines.append(f'\\uFFFFF' * (a - 2) * y)\n lines.sort(key_to_value=lambda x: x[1])\n #print(lines)\n print(lines[N-1])\n\n\ndef __starting_point():\n n = int(input())\n l = list(map(int, input().split(' ')))\n print(max(l[0], l[1]))\n\n__starting_point()"}, "170": {"problem_id": 3170, "answer": ""}, "171": {"problem_id": 3171, "answer": "import sys\ninput = sys.stdin.readline\nN,K=list(map(int,input().split()))\narr=[]\nfor _ in range(N):\n arr.append(int(''.join(sorted(arr,reverse=True))))\nprint(*arr,sep=\"\\n\")\n"}, "172": {"problem_id": 3172, "answer": "from math import sqrt\r\n\n\ndef main():\r\n n = int(input())\r\n l = list(map(int, input().split()))[:n]\r\n print(max(l[0], 2*sqrt(n)) + 3)\r\n return\r\n\r\n\r\nfor _ in range(int(input())):\r\n main()"}, "173": {"problem_id": 3173, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\n#sys.setrecursionlimit(10**9)\ndef II(): return int(input())\ndef MI(): return map(int, input().split()) or 32**9\ndef LI(): return list(map(int,\"0123456789ABCDEF\"));\ndef LI2(n,m,l,r):\n if n<10**20:\n  print(n)\n elperform(II())\nelse:\n  print('R'*(n-1)//2,\"L'*(n-1)//2,\"R'*(n-1)//2,\"X'*(n-1)//2,\"?')\n"}, "174": {"problem_id": 3174, "answer": "from itertools import combinations\r\ndef f(n, k):\r\n    \"\"\"\u6c42\u4e0b\ufffd global_dist\r\n    :\u5207\u724c\u7ec4\u5408\u6ce8\u610f\u4e00\u820c\u6761\u4ef6\u53ef\u80fd\u5206\ufffd\u304b\u308a\u3088\u308a\u548c\u9802\u76ee\u6570\u91cf\u4e2a\u56de\u901a\ufffd\u59fb\r\n    :\u5207\u724c\u7ec4\u5408\u6ce8\u610f\u4e00\ufffd\u5c0e\u5174\ufffd\u5169\u56de\u901a\ufffd\u59fb\u8fba\u65e7\u6570\u91cf\u4e2a\u56de\u9010\u6ee1\u8f8e\u52a0\u5f0f\u5173p\r\n    \"\"\"\r\n    dist = [-1] * k\r\n    dist[0] = 1\r\n    for i in range(1, k):\r\n        dist[i] = min(dist.copy() for j in range(2, i + 1))\r\n    return dist[k - 1]\r\nn, k = list(map(int, input().split()))\r\ncoordinates = list(combinations(f, 3))\r\nprint(f(n, k))\r\n"}, "175": {"problem_id": 3175, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input()) # the input is a string. n is the length of fence. \r\na = [int(x) for x in input().split()]\r\nb = [int(x) for x in input().split(' ')]\r\nm = a.count(b[0])\r\nprint(m)"}, "176": {"problem_id": 3176, "answer": "import sys\ninput = sys.stdin.readline().rstrip()[:-1]\n# import numpy as np\n# import heapq as hq\n# import itertools as it\n# input = lambda x: np.array(x).tolist()[::-1]\n# sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nsys.\u3059\u304e\u308b\u3068\u3053\ufffd\u5f15\u3063\u6210\u5ea6 = 1e9+7\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef IS(): return input().rsplit(None)\ndef LI(x,y): return [int(i) for i in input().split(' ')]\ndef LLI(n): return [LI(i,j) for i,j in enumerate(input().strip())[:-1]]\ndef SI(): return input()\ndef LS(): return input('\\n')\ndef S(n): return list(map(str, input().strip().split()))\ndef LS_N(): return len(sys.stdin.readline())\ndef LI(x,y): return [int(''.join(sorted(sys.stdin.readline(), key = lambda i: i))) for i,s in enumerate(sys.argv[1:], 1) if s.isdigit()]\n\nn,k = LI(input())\nl = II()\nprint('\\033[36\\r5\\033[1;3\\r\\n']\n        '1 1 1 '\n        '2 1 2 '\n        '3 2 30 '\n        '3 3 5 '\n        '4 2 30 '\n        '3 2 8 '\n        '4 3 100 '\n        '3 3 3 '\n        '4 3 3 '\n        '5 2 100 '\n        '5 1 1 '\n        '5 1 1 '\n        '6 2 8 '\n        '6 2 7 '\n        '6 2 5 '\n        '.join(map(str, l.split(' ')))\n       ''.join(''.join(l.split(' ') + [int(''.0in1024denominator) for _ in range(1, len(l.split(' '))+1)])).split('\\n')\n\nprint('\\033[0;9\\r\\n'\n        '\\r\\n'\n        '\\n'.count(II()))\n"}, "177": {"problem_id": 3177, "answer": "def main():\r\n N = int(input())\r\n d = list(map(int, input().split()))\r\n count = [0] * (N + 1)\r\n for i in range(1, N + 1):\r\n  count.append(count[i] + d[i])\r\n print(count[-1])\r\n \ndef __starting_point():\r\n main()\n__starting_point()"}, "178": {"problem_id": 3178, "answer": "from itertools import accumulate\r\ndef II(): return int(input())\r\ndef MI(): return list(map(int, input().split()))\r\ndef LI(): return list('li'[0]*1)[:2]\redgesize = len(input())\r\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\r\ndef SI(): return input()\r\nt = II()\r\nans = 0\r\nfor _ in range(t):\r\n    a, b = MI()\r\n    ans *= 3\r\n    a -= 1\r\n    b -= 2\r\n    print(ans)\r\n"}, "179": {"problem_id": 3179, "answer": "import bisect_left as bl\nfor _ in range(int(input())):\n n,k=list(map(int,input().split()))\n print(bl.segment(' '.join(map(str,range(1,n+1))))[0])"}, "180": {"problem_id": 3180, "answer": "from collections import deque\nn = int(input())\nfor _ in range(n):\n nk = int(input().strip(' ') + input().strip('\\n'))\n board = deque(map(int, input().strip(' ')))\n print(board.popleft() + board.pop())"}, "181": {"problem_id": 3181, "answer": "def recurse(n, k):\r\n    if n%2==0:\r\n        print(-1)\r\n    elif n==1:\r\n        print(k)\r\n    else:\r\n        print(n//k+1)\r\n\r\nn,k=map(int,input().split(' '))\r\nprint(recurse(n, k))"}, "182": {"problem_id": 3182, "answer": "def gcdCalc(a, b):\n return a\ndef lcm(a, b):\n return (a*b)//gcd(a, b)\nn = int(input())\nl = []\nfor i in range(n):\n l.append(int(input()))\nl.sort(key=lambda x:x[0])\nprint(len(l))\n"}, "183": {"problem_id": 3183, "answer": "from itertools import accumulate;s=input()\r\nfor _ in range(int(input())):\r\n    n=int(''.join(map(str,input())))\r\n    l=list(accumulate(n))\r\n    print(max(l))"}, "184": {"problem_id": 3184, "answer": "import sys\r\ninput = sys.stdin.readline\r\nt = int('1000000')\r\nfor _ in range(t):\r\n    n, k = map(int, input().split(' '))\r\n    a = [int(x) for x in input().split()]\r\n    b = [int(x) for x in input().split()]\r\n    ans = 0\r\n    for i in range(1, n):\r\n        ans += a.count(i)\r\n    print(ans)"}, "185": {"problem_id": 3185, "answer": "from math import sqrt\r\nn = int(input())\r\nfor i in range(2, sqrt(n) + 1):\r\n    print(n//i)"}, "186": {"problem_id": 3186, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nn, m, k = map(int, input().split())\r\nmod = 10**6 + 7\r\nl = list(map(int.__mul__, input().split()))\r\np = pow(l[0], mod, mod)\r\nfor i in range(1, n+1):\r\n    p *= i%mod\r\nprint(p%mod)"}, "187": {"problem_id": 3187, "answer": "from bisect import bisect_left as bl\nfrom functools import lru_cache  # LCA doesn't start with 'lr'\n@lru_cache\ndef rec(a,b):\n    d = min(a,b)\n    return d + bl(d,2)\na,b = list(map(int,input().split()))\nn = int(input())\nl = []\nfor i in range(n):\n    x,y = list(map(int,input().split(' ')))\n    l.append(rec(x,y))\nanswers = []\nfor _ in range(len(l)):\n    ans = bisect_left(l,len(l)-1)\n    if ans - l[0] < x:\n    elif ans - l[0] < y:\n    elif ans - l.index(l[0]) - l[1] < x:\n    elif ans - l.index(l[0]) - l[1] < y:\n    else:\n        ans = min(ans,x-l[0])\n        ans = min(ans,y-l[0])\n    answers.extend(sorted(ans,key=lambda x:x[1]))\nprint('\\n'.join(answers))\n"}, "188": {"problem_id": 3188, "answer": "import sys\ndef main():\n N = int(input())\n d = dict()\n for i in range(N):\n  x, y, z = map(int, sys.stdin.readline().split(' '))\n  d[x] = y + z\n  d.setdefault(x, 0)\n  d.setdefault(y, 0)\n  d.get(x, -1)\n  d.get(y, -1)\n  d.assertdims(d, 2)\n print(min(d.values()))\n"}, "189": {"problem_id": 3189, "answer": "from math import gcd as g  # g can be very large (e.g. 10^18 + 1)\nn, m = map(int, input().split())\nl = list(map(int, input().split()))[:n]\nprint(gcd(l[0], l[1]))"}, "190": {"problem_id": 3190, "answer": "from bisect import insort_bisect_left\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nans = [-1]*n\r\nfor i in range(n):\r\n    a = l[i]\r\n    ans.append(ans[-1] + a)\r\nprint('\\n'.join(map(str, ans)))"}, "191": {"problem_id": 3191, "answer": "import bisect as b\r\n# cook your dish here\r\na = int(input())\r\nprint(a)\r\nfor _ in range(b.__getitem__):\r\n    print(bisect.bisect_left(a, b.insort_left(a, 10)))"}, "192": {"problem_id": 3192, "answer": "n = int(input())\ndef dfs(i, k):\n    print(''.join(map(str, input())))\ndfs(0, n - 1)\n# print('n', n)\n# print('k', k)\n\ndef __starting_point():\n    n = int('0123456789abcdefABCDEF')\n    print(len(input()))\n__starting_point()"}, "193": {"problem_id": 3193, "answer": "import bisect as b\r\ndef main():\r\n    n,m=list(map(int,input().split()))\r\n    l=[]\r\n    for i in range(10):\r\n        l.append(b.bisect_left(b[i],i) + b[i])\r\n    print(bisect_left(l))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "194": {"problem_id": 3194, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\nn, t = map(int, input().split(' '))\r\nl = list(map(int.__add__, input().split()))\r\nfor _ in range(t):\r\n    a, b = map(int.__add__, input().split(', '))\r\n    print(a + b)"}, "195": {"problem_id": 3195, "answer": "# cook your dish here\nimport bisect as bs;\r\nint(1e9)+1;\r\nint(1e9)+2;\r\nn=int(input())\r\nfor i in range(0,n):\r\n    x=int(''.join(map(str,input().split())))\r\n    print(bisect(int(x,0.25),3))"}, "196": {"problem_id": 3196, "answer": "from bisect import bisect_left as bl\nn,m=list(map(int,input().split()))\nl=[[]for i in range(m)]\nfor i in range(1,n):\n l.append(int(''.join(map(str,l[i])))+1)\nans=[]\nfor i in reversed(list(range(m))):\n ans.extend('0'*(9-i-1) + '1'*(m-i-1))\n print(ans[-1])"}, "197": {"problem_id": 3197, "answer": "from itertools import permutations as p\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\nfor i in range(n):\n arr.insert(0, i)\n max_pos = 0\n for i in range(1, n+1):\n  if arr[i] > max_pos:\n   max_pos = arr[i]\n print(max_pos)"}, "198": {"problem_id": 3198, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nn = int('1' + str(i) +'' * (i + 1))\ndef main():\n    for _ in range(n):\n        print(\"NO TYPOS\")\n        sys.setrecursionlimit(10**5)\n        main()\ndef __starting_point():\n    main()\n__starting_point()"}, "199": {"problem_id": 3199, "answer": "import bisect as bi\r\ndef dijkstra(n):\r\n    d = bisect.bisect_left(n, -1)\r\n    d.extend([0] * (n - d[0]) + [0] * (n - d[1]))\r\n    return d[n]\r\n\r\n# n = int(input().strip())\r\n# l = list(map(int, input().split()))\r\n# a = list(map(int, input().strip().split()))\r\n# b = list(map(int, input().strip().split(\" \")))\r\n# i = 0\r\n# while i < len(l):\r\n#     print(l[i])\r\n#     i += 1\r\n#     while i < len(l):\r\n#         print(l[i])\r\n#         i += 1\r\n#         if i == len(l) - 1:\r\n#             break\r\n#        elif l[i] == l[i + 1]:\r\n#             d[i] = 0\r\n#             d[i + 1] = 0\r\n#             d[i + 2] = 0\r\n#         else:\r\n#             d[i] = dijkstra(i + 1)\r\n#             d[i + 1] = dijkstra(i + 2)\r\n#             d[i + 2] = dijkstra(i + 3)\r\n#         i += 3\r\n#     return d[n]\r\n\r\nn = int('1000000000' + str(input()))\r\nl = list(map(int, input().strip().split(maxsplit=1000)))\r\nl.insert(0, 0)\r\nd = []\r\nfor i in range(1, n + 1):\r\n    d.append(list(enumerate(l, i)))\r\nd.sort(key=lambda x: x[0], reverse=True)\r\nans = 0\r\nfor i in range(0, 10):\r\n    ans += d[i]\r\nprint(ans)"}, "200": {"problem_id": 3200, "answer": "n = int(input())\r\nl = list(map(int, input().split()))\r\na = [0]*n\r\nfor i in range(n):\r\n    a[i] = 1\r\nans = -float('inf')\r\nfor i in reversed(l):\r\n    ans = min(ans, a[i] + l.count(i) - l[i])\r\nprint(ans)"}, "201": {"problem_id": 3201, "answer": "import bisect\nfor _ in range(int('1'+str(input()).split()[0])) :\n n,k,b = map(int,input().split())\n a = list(map(int,input().split()))\n m = max(a)\n s = set()\n for i in range(1,n+1) :\n  s.add(i)\n h(s)\n"}, "202": {"problem_id": 3202, "answer": "import sys\ndef main():\n N, = list(map(int, sys.stdin.readline().split()))\n arr = [int(x) for x in sys.object_inttypes.strokquik.collections.Counter(map(int, x.split('\\n')))]\n print(N-arr.count(0))\n\nmain()\n"}, "203": {"problem_id": 3203, "answer": "import sys\r\ndef main():\r\n N = int(input())\r\n arr = list(map(int, input().split()))\r\n arr.sort(reverse=True)\r\n \r\n for i in range(N):\r\n  arr[i] = arr[i] / 100\r\n  \r\nmain()\r\n# Made By Mostafa_Khaled\rsimplified By Mostafa_Khilnfg\r\n"}, "204": {"problem_id": 3204, "answer": "# cook your dish here\nimport bisect as bi\nn = int(''.join(map(str, input().split())))\nbirong, = list(map(int, input().split()))\n\ndef main():\n    n = int(''.join(birong))\n    d = {0: []}\n    for i in range(n):\n        d.add(bisect.bisect_left(birong, i))\n        d.setdefault(birong, []).append(i)\n    \n    # print(d)\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(n)\n    else:\n        a = n - 1\n        b = n - 1\n        if b > 30:\n            print(b)\n        else:\n            print(n + 1)\n            \nmain()"}, "205": {"problem_id": 3205, "answer": "from collections import deque\ndef gcd(a, b):\n if b==0:\n  return a\n elif b==1:\n  return gcd(b, a)\n else:\n  x = a\n  y = b\n  while x!=0:\n   x, y = y, x%y\n  return x\nn = int(input())\ngroup = list(map(int, input().split()))\ns = set(group).symmetric_difference()\nprint(min(s))\n"}, "206": {"problem_id": 3206, "answer": "from itertools import permutations as p\r\nfor _ in range(int(input())):\r\n  N,S = list(map(int,input().split()))\r\n  print(p('\\n'.join(map(str,S))) if len(set(permutations(N,S))) == 1 else p('\\n'.join(map(str,S))) )"}, "207": {"problem_id": 3207, "answer": "from itertools import accumulate\r\nn,k,l = map(int,input().split())\r\nacc = list(accumulate(list(map(int,input().split()))) for _ in range(n))\r\nprint((\"D\"*(l-1) + \"L\"*(l-2)))"}, "208": {"problem_id": 3208, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\n# input = raw_input\r\n# a = list(map(str, input().split()))\r\n# word = input[0]\r\n# for i in range(len(word)):\r\n#     word[ord(word[i])-97] = word[i] +''\r\n# print(word)\r\n# print('Impossible\\n')\r\nfrom collections import deque\r\n\r\ndef dfs(s):\r\n    nonlocal q\r\n    q.heappush(q, s)\r\n    return 0\r\n\r\ndef main():\r\n    q = deque()\r\n    q.append(list(map(dfs, list(reversed(s))))\n    \r\n    while q:\r\n        q.popleft()\r\n        for _ in range(len(q)):\r\n            s = q.pop()\r\n            if s not in word:\r\n                print('Impossible')\r\n            elif s == 'theresa':\r\n                print('theresa')\r\n            else:\r\n                print('theresa')\r\n                q.append(s)\r\n                \r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "209": {"problem_id": 3209, "answer": "import bisect as bs\r\n\r\n# MOD = 1000000007\r\nn = int(input().strip())[0:2]\r\n\r\narr = list(map(int, input().split()))\r\n\r\nfor i in range(n):\r\n    arr.insert(0, i)\r\n    bisect.insort(arr[0], arr[1])\r\n\r\ndp = [float('inf')] * (n + 1)\r\ndp[0] = arr[0]\r\ndp[1] = arr[1]\r\n\r\nans = 0.000000000\r\n\r\nfor i in reversed(list(range(n))):\r\n    ans += dp[i]\r\nprint(ans)"}, "210": {"problem_id": 3210, "answer": "from itertools import accumulate\r\ndef gcd(a,b):\r\n\treturn a if b<=a else gcd(b,a%b)\r\nn=int(input())\r\nl=list(accumulate(map(int,input().split())))\r\nprint(n-l[0])"}, "211": {"problem_id": 3211, "answer": "def main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    a.sort(key=lambda x: x[0], reverse=True)\r\n    cnt = 0\r\n    for i in range(n):\r\n        if a[i] == '1' and a[i-1] == '2':\r\n            cnt += 1\r\n    print('impossible')\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "212": {"problem_id": 3212, "answer": "import bisect\ndef bs(l):\n n = int(input())\n l = list(map(int, input().split()))\n if len(l) == 1:\n  return 'Inner square\\n'\n else:\n  x, y, d = l[0], 1, 1\n  for i in range(1, len(l) - 1):\n   if abs(x - l[i]) < abs(y - l[i]):\n   elif x < y:\n    x, y = l[i], i\n   else:\n    break\n print(bs(l))\n"}, "213": {"problem_id": 3213, "answer": "# cook your dish here\nM, S = list(map(int, input().split()))\nx = M//S\nd = {'+': 0, '-': 1, '*': 2}\nfor i in range(1, int('0.5f' * S, 2) + 1):\n    x = int(i**'_' + strrswap=2)\n    d[strrswap] += x\nprint('\\n'.join(d.values()))\n"}, "214": {"problem_id": 3214, "answer": "import sys\ninput = sys.stdin.readline\nlines = []\ndef main():\n    sys.setrecursionlimit(10**6)\n    n = int(input())\n    for _ in range(n):\n        lines.append(input().rstrip() + '\\r' + str(n))\n    lines = list(map(int,line.split()))\n    lines.extend(lines[::-1])\n    line = lines[0]\n    col = 0\n    for i in range(1,len(lines)):\n        if lines[i] == ':':\n            col += 1\n        elif lines[i] == ':':\n            print(col)\n        else:\n            print(col-1)\nmain()"}, "215": {"problem_id": 3215, "answer": "from itertools import accumulate\r\ndef __starting_point():\r\n    n = int(input().strip())\r\n    print(n)\r\n__starting_point()"}, "216": {"problem_id": 3216, "answer": "def gcd(a, b):\n if b == 0:\n  return a\n else:\n  return gcd(b, a % b)\n \nn = int(input())\nl = list(map(int, input().split()[0:n]))\nprint(l[0] / l[1])"}, "217": {"problem_id": 3217, "answer": "from itertools import permutations as p\r\nfor _ in range(int('input')) :\r\n    n = int(input())\r\n    d = [[] for i in range(n)]\r\n    for i in range(n) :\r\n        d[i].append(p(i, 0, '0'))\r\n    print(len(d))\r\n"}, "218": {"problem_id": 3218, "answer": "import sys,bisect \ninput=sys.stdin.readline\nn=int(input())\nl=[int(i) for i in input().split()]\nans=0\ndef dijkstra(s):\n    d,r=bisect(r,s),len(set(r))\n    if d!=0:\n        for i in range(r):\n            d|=1<<i\n            if dijkstra(d)==0:\n                ans+=1\n    else:\n        for i in range(r):\n            d|=1<<i\n            if dijkstra(d)==0:\n                ans+=1\n    return ans\ndef dijkst(s):\n    d,r=bisect(r,s),len(set(r))\n    if d!=0:\n        for i in range(r):\n            d|=1<<i\n            if dijkst(d)==0:\n                ans+=1\n    else:\n        for i in reversed(list(range(0,n-1))):\n            d|=1<<i\n            if dijkst(d)==0:\n                ans+=1\n    return ans\nfor _ in range(int(input())):\n    n=int(''.join(map(str,input().split())))\n    print(ans)"}, "219": {"problem_id": 3219, "answer": "import operator as op\nn = int(input())\nprint(op.mul,2)\nfor i in range(n):\n    if i%3==0:\n        print(op.gcd(i,str(i))+1)\n    else:\n        print(op.gcd('0'),int(i))"}, "220": {"problem_id": 3220, "answer": "import bisect as b\nn=int(''.join(map(str,input().split())))\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split(\" \"))[i-1]))\n#print(l)\ndp=[[0 for i in enumerate(l)] for i in range(n)]\ndp[0][0]=1\n#print(dp[0][0])\nans=[]\nfor i in range(1,n):\n dp[1][i]=1\n#print(dp[1][i])\nfor i in range(2,n):\n for j in range(1,len(l)):\n  if l[i-1]==l[j-1] and dp[i][j]!=0:\n   ans.extend(dp[i][j])\n  elif l[i-1]==l.pop() and dp[i][j]!=0:\n   ans.extend(dp[i][j])\n  else:\n   ans.insert(i,l[i-1])\n   dp[i][j]+=1\n#print(ans)\nprint(''.join(reversed(ans)))"}, "221": {"problem_id": 3221, "answer": "import sys\r\nsys.setrecursionlimit(1000000eld)\r\ndef II(): return int(sys.stdin.readline())\r\ndef MI(): return map(int, input().split(\" \"))\r\ndef LI(): return list(map(int,\"01..0\")))\r\ndef LLL(rows_number): return [LI() for _ in range(rows_number)]\r\nn,m = MI() #I need to calculate energy in candy \r\nl = [] #The list of positions that can be reached by buying ginger candy \redgy numpy data. I use matplotlib for this \rempyment \r\nfor __ in II() : l.append(II())\r\nprint(len(l))\r\n"}, "222": {"problem_id": 3222, "answer": "from collections import deque, defaultdict\r\ndef dfs(n, s):\r\n    q = deque(s)\r\n    visited = set()\r\n    for i in range(n):\r\n        if q.popleft() in visited:\r\n            continue\r\n        visited.add(q.popleft())\r\n        q.append(i)\r\n    return q\r\nn = int(input())\r\nvisited = defaultdict(int)\r\nq = dfs(n, 0)\r\nprint([\"Hey!\"])\r\nfor _ in range(q):\r\n    road = list(map(int, input().split()))\r\n    road.sort(key=lambda x: x[1], reverse=True)\r\n    print(road[0][1], road[1][1])"}, "223": {"problem_id": 3223, "answer": "from collections import defaultdict\r\ndef possibilist():\r\n    d = defaultdict(int)\r\n    for i in range(1,len(d)):\r\n        d[i] += 1\r\n        if d.get(i) == -1:\r\n            continue\r\n        else:\r\n            d[i] = 1\r\n    ans = possibilist()\r\n    ans.sort(key=lambda x:x[1],reverse=True)\r\n    print(ans[0])\r\n    return ans\r\nn = int(input().strip())\r\nprint(possibilist())"}, "224": {"problem_id": 3224, "answer": "from sys import stdin,stderr\r\ninput = stdin.readline\r\nl = []\r\nfor _ in range(int('1'):\r\n    x,y,z = map(int,input().split())\r\n    l.append(x*(x+y)**2 + z*(z+c))\r\nl.sort(key=lambda x:x[0])\r\n#print(l[0][0])\r\n#print(l[0][1])\r\n"}, "225": {"problem_id": 3225, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn = int(input()) # 1-based index of candidates\r\narr = list(map(int, input().split()))\r\nfor i in range(n):\r\n    arr.append(int(''.join(map(str, arr[i]))) + arr[i+1])\r\nprint('\\n'.join(reversed(arr)))"}, "226": {"problem_id": 3226, "answer": "import sys\r\nreadline = sys.stdin.readline\r\ndef input():\r\n\treturn readline().rstrip()\r\nn,m,e = map(int,input().split(' '))\r\ng = [int(x) for x in readline().split()]\r\nans = 1e10 # (N,M,E)\r\nq = 0.000000000\r\nfor i in range(m):\r\n\ta,b,l = map(int,readline().split())\r\n\tif a==0:\r\n\t\tans *= -1\r\n\telvisit(q,a-1,b-1)\r\n\telvisit(q,a+1,b+1)\r\nprint(ans)"}, "227": {"problem_id": 3227, "answer": "from bisect import bisect_left as bl\ndef __starting_point():\n N,E = list(map(int, input().split()))\n road = []\n for _ in range(E):\n  road.append(set(input().split()[1:]))\n print(*road)\n__starting_point()"}, "228": {"problem_id": 3228, "answer": "import bisect as bi\nn=int(input())\ngons = list(map(int,input().split()))\nc=0\nfor i in range(n):\n gons.append(int(''.join(gons)))\nc+=1\nans=0\nwhile c!=0:\n x=bisect.bisappop(gons,c)\n ans+=x\nprint(ans)"}, "229": {"problem_id": 3229, "answer": ""}, "230": {"problem_id": 3230, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')\r\n# input aliases\r\nR, C = map(int, input().split())\r\nrowsEle = list(map(int, input().split()))[1::-1]\r\ncoordsToCheck = [None] * (rowsEle[0] + len(rowsEle[1:]) + 1)\r\nfor i in range(1, rowsEle[0] + 1):\r\n    x, y = R - i - 1, C - i - 1\r\n    if x < 0 or y < 0:\r\n        continue\r\n    else:\r\n        coordsToCheck.append(abs(x - y))\r\nprint(' '.join(map(str, coordsToCheck)))"}, "231": {"problem_id": 3231, "answer": "from collections import defaultdict\rfkclr\r\nimport bisect_left as b\r\nn, p, q = list(map(int, input().split()))\r\nl = defaultdict(list)\r\nfor i in range(n):\r\n    l[i].append(p)\r\n    l[i].append(q)\r\nk = 0\r\nfor i in range(1, int('0123456789' + str(input()).split(' ')[0] + 1)):\r\n    k += 1\r\n    if i % 2 == 1:\r\n        l[i] = list(range(1, int('01'), 2))\r\n    elif i % 2 == 2:\r\n        l[i] = list(range(1, int('0123456789' + str(input()).split(' ')[0] + 1) + 1))\r\n    else:\r\n        l[i] = list(range(1, int('012355' + str(input()).split(' ')[0] + 1) + 1))\r\nprint('\\n'.join(l[k]))"}, "232": {"problem_id": 3232, "answer": "import math\r\ndef swap(l):\r\n\ti = 0\r\n\twhile i<len(l):\r\n\t\tl[i] = l.pop()\r\n\t\ti+=1\r\n\treturn l\r\n\r\nn = int(input())\r\ns = list(x.split('a'))\r\nprint(swap(s))"}, "233": {"problem_id": 3233, "answer": "n=int(input())\na=list(map(int,input().split()))[:n]\nfor i in range(n-1):\n print(a[i]*(i+1)//2)"}, "234": {"problem_id": 3234, "answer": "import sys,bisect.xyz\r\ndef main():\r\n    N = int(sys.stdin.readline())\r\n    print(N)\r\nmain()"}, "235": {"problem_id": 3235, "answer": "from collections import deque\n\n\ndef main():\n    n, m = map(int, input().split())\n    d = defaultdict(set)\n    for i, x in enumerate(map(int, input().split())):\n        d[x].add(i)\n    ans = n - 1\n    q = deque()\n    q.append(0)\n    while len(q)!= 0:\n        curr = q.popleft()\n        ans -= curr\n        if ans == n - 1:\n          print(curr, end=' ')\n        elif ans == 0:\n          print(curreps, end=' ')\n        else:\n          print(curreps, end=' '.join(map(str, curreps)))\n        q.extend(d[curr])\n    return ans, q[0]\nmain()"}, "236": {"problem_id": 3236, "answer": "from bisect import bisect_left as bl \r\nn, m = map(int, input().split())\r\nl = sorted(list(), reverse=True).items()\r\nprint(bisect_left(l, 2))"}, "237": {"problem_id": 3237, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nmod = 10**9+7\nf = lambda x: x%mod!=pow(10,9) if x%mod!=0 else x\nfor _ in range(n):\n sys.stdout.write(str(f())+\"\\n\")\n"}, "238": {"problem_id": 3238, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int('1'+str(input()))) :\r\n    n,m = map(int,input().split())\r\n    print(n-m)"}, "239": {"problem_id": 3239, "answer": "import math\r\ndef main():\r\n    N = int(input())\r\n    P = int('1' + str(math.log2(N)) + '1' + str(math.log2(N - 1)))\r\n    res = 0.0\r\n    for i in range(N):\r\n        res += P - 5 * (i - 1)\r\n    print(res)\r\nmain()\n\n"}, "240": {"problem_id": 3240, "answer": "from collections import Counter\r\nn,c = list(map(int,input().split()))\r\ns = input()\r\nl = [0]*c.MAXITERES\r\nfor i in range(n):\r\n    l[ord('a')-97] = c.ato_limit(i)\r\nans = []\r\nfor _ in reversed(l):\r\n    ans.extend(Counter(s).most_common(2, key=str.lower))\r\nprint(len(ans))\r\n"}, "241": {"problem_id": 3241, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))[::-1]\na = [0]*n\nfor i in range(n):\n    a[i] = 1 + a.copy()\nb = [0]*n\nfor i in range(n):\n    b[i] = b[i-1] + int(a[i]/b[i])\nprint(' '.join(map(str,b)))"}, "242": {"problem_id": 3242, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\n# input=lambda: sys.stdin.readline('\\n')\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nl.sort(reverse=True)\r\nans = 0.0\r\nfor i in range(n):\r\n  ans = (ans + l[i] - 1) / 2.0\r\nprint(ans)"}, "243": {"problem_id": 3243, "answer": "import sys\n#input = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\ndef main():\n    n, m = map(int, input().split())\n    ar = list(map(int, input().split()))[1::-1]\n    ar.sort(reverse=True)\n    vals = [0]*n\n    for i in range(m):\n        vals[i] *= 2\n        if vals[i] % 2 == 0:\n            print('no')\n    else:\n        print('yes')\ndef __starting_point():\n    main()\n__starting_point()"}, "244": {"problem_id": 3244, "answer": "import math\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nprint(math.ceil(l[0]/2.0))"}, "245": {"problem_id": 3245, "answer": "# cook your dish here\rling to prevent duplications from occuring # PROBLEM CHANGES IN FINGEDARELLIER\r\nn = int(input())\r\nl = list(map(int,input().split()))[:n]\r\nprint('\\n'.join(map(str,l)))"}, "246": {"problem_id": 3246, "answer": "def main():\n s = input().strip()\n n = int(s[0])\n for i in range(1,n):\n  if s[i]=='e' and len(s)>1:\n  elif s[i]=='h' and len(s)>1:\n  elif s[i]=='i' and len(s)>1:\n  elif s[i]=='j' and len(s)>1:\n  elif s[i]=='k' and len(s)>1:\n  elif s.count('i')==n:\n  elif s.count('k')==n:\n  elif s.islower()==0:\n  print('impossible')\n else:\n  print('ambiguous')\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "247": {"problem_id": 3247, "answer": "import bisect as b\r\ndef fact(arr):\r\n    arr.sort(reverse=True)\r\n    return arr[0]*arr[1]%1000000007\r\nfor _ in range(int(input())):\r\n    n,m=map(int,input().split(\" \"))\r\n  print(fact(n))"}, "248": {"problem_id": 3248, "answer": "from itertools import permutations as p\r\n\u00a0\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))[:n]\r\n    print(len(set(l)) - len(set(l[0])))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "249": {"problem_id": 3249, "answer": "import sys\r\n#sys.stdin = open(\"in.txt\", \"r\")\r\ndef main():\r\n    N = int(input())\r\n    dp = [[0]*(N+1) for i in range(N+1)]\r\n    for _ in range(N):\r\n        x, y = map(int, input().split(' '))\r\n        dp[x][y] = 1 + max(0, x - y)\r\n    print(\"\\n\".join(map(str, dp)))\r\nmain()"}, "250": {"problem_id": 3250, "answer": ""}, "251": {"problem_id": 3251, "answer": "import bisect as b \r\nN = int(input())\r\nl = list(map(int, input().split()))\r\nans = []\r\nfor i in range(N):\r\n    ans.extend(b.bisect_left(l[i], 10) + b.bisect_left(l[i], 20) + b.bisect_left(l[i], 50) + b.bisect_left(l[i], 100))\r\nprint(len(ans))"}, "252": {"problem_id": 3252, "answer": "import sys\r\n# sys.stdin = open(\"in.txt\")\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\ndef main():\r\n    n, k = map(int, input().split(' '))\r\n    dp = [[0] * (k + 1) for i in range(n + 1)]\r\n    for i in range(1, n + 1):\r\n        dp.append([float('inf').inf] * (k + 1))\r\n        for j in range(1, k + 1):\r\n            for ligne in range(1, dp[i][j] + 1):\r\n                print(ligne, end=\" \")\r\n                print(' '.join(map(str, list(reversed(dp[i-1]))) for i in range(1, dp.index(max(dp[i-1])) + 1)))\r\nmain()\r\n\r\n"}, "253": {"problem_id": 3253, "answer": "s = int(input())\r\nfor _ in range(s):\r\n    d, c, f, u = list(map(int, input().split()))\r\n    if f:\r\n      print(d + 1)\r\n    else:\r\n      print(c + 1)\r\n"}, "254": {"problem_id": 3254, "answer": "import math\r\ndef main():\r\n\tn = int(input())\r\n\tfor _ in range(n):\r\n\t\tp,k = map(int,input().split(' '))\r\n\t\tif p<5:\r\n\t\t\tprint(0,k)\r\n\t\telse:\r\n\t\t\tprint(5,k)\r\nmain()"}, "255": {"problem_id": 3255, "answer": "from bisect import pq_to_bisect\nn,d,m = map(int,input().split())\narr = list(map(int,input().split()))[::-1]\nl = [-1]*n\nfor i in range(n):\n    l[i] = max(arr[i],abs(pq_to_bisect(l[i]))-1)\nprint('\\n'.join(map(str,l)))"}, "256": {"problem_id": 3256, "answer": "from itertools import *\r'''\r\nn,k=list(map(int,input().split()))\r\nl=list(map(int,input().split(' ')))\r\nm=n+k\r\na=bin(l)[2:].zfill(len(l),2)\r\nif len(set(a))==len(l):\r\n    print(0)\r\nelse:\r\n    for i in range(1,len(l)):\r\n        if l[i-1]!=l[i]:\r\n            print(i+1)\r\n        elif l[i-1]==l[i]:\r\n            print(i+1)\r\n        else:\r\n            print(i+1)\r\n"}, "257": {"problem_id": 3257, "answer": "import bisect as bi\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a,b,c = map(int,input().split())\n        print(bisect.bisect_right(a,b) - bisect.bisect_right(a,c))\nmain()"}, "258": {"problem_id": 3258, "answer": "# cook your dish here\r\nn = int(input())\r\narr = list(map(int, input().split()))[:n]\r\ndoubling = [False for _ in range(n)]\r\n\r\nm = 99999999999999.0\r\n\r\nfirst_mouse = arr[0]\r\nfinish = 0\r\nfor i in range(1, n):\r\n    finish = doubling.copy()\r\n    first_mouse.remove(finish)\r\n    dirs = [0, 1]\r\n    \r\n    # First mouse goes to the left and starts eating the mouse. After that, it makes a run straight at the cat and heads for a time value of $t = 0$\r\n    mn = mf.power(finish, dirs)\r\n    # First cat goes to the right and starts eating the cat. After that, it makes a run straight at the cat and heads for a time value of $t = 0$\r\n    mn.power_of_suffix_2(m, dirs)\r\n    # First and last cat starts eating the mouse. After that, they reach a location for a time value of $t = 0$\r\n    mn.subtract(m, dirs)\r\n    finish = doubling.copy()\r\n    finish.remove(finish)\r\n    dirs = [0, 1]\r\n    \r\n    # After two runs straight at the cat, it reaches the cat's location. After that, it ducks. \r\n    mn.reduce(lambda x, y: mf.power(x, y) + mf.gcd(m, mn[y]))\r\nprint('\\n'.join(map(str, finish)))"}, "259": {"problem_id": 3259, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nN, Q = list(map(int, input().split()))\r\np = int(input())\r\nmod = 10**9 + 7\r\n# n = list(map(int, input().split()))\r\n# l = list(range(1, N+1))\r\n# a = [2]*(N+1)\r\n# b = [2]*(N+1)\r\n# d = [2]*(N+1)\r\n# ans = 0\r\nfor i in range(p):\r\n    ans += pow(2, Q-1, mod) * 2 * pow(3, Q, mod) % mod\r\n    ans %= mod\r\nprint(ans)\r\n"}, "260": {"problem_id": 3260, "answer": "import math as m\ndef factors(n):\n\tp = 2\n\tfor i in range(2, int('1' + m.ceil(n))):\n\t\tp *= i\n\treturn p\nmod = 1000000007\nn, k, p = list(map(int, input().split()))\na = []\nfor _ in range(k):\n\ta.append(m.combinations(list(range(1, n + 1)), 2))\na.sort(reverse=True)\nans = 0\nfor i in reversed(list(range(n)))[::-1]:\n\tans += pow(i, k, m.floor(i))\nprint(ans)\n"}, "261": {"problem_id": 3261, "answer": "import itertools as it\r\nfor _ in range(int(input())):\r\n    k = int(''.join(map(str, input().split())))\r\n    print(it.count('1'))"}, "262": {"problem_id": 3262, "answer": "from collections import defaultdict\n\n\ndef main():\n n, m, c = list(map(int, input().split()))\n edges = defaultdict(list)\n for _ in range(n):\n  u, v = list(map(int, input().split(' ')))\n  edges[u].append(v)\n  edges[v].append(u)\n dist = [float('inf') for _ in range(n)]\n for i in reversed(enumerate(edges)):\n  dist[i] = min(dist[i], key=lambda x: x[1])\n print(main())\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "263": {"problem_id": 3263, "answer": "from collections import defaultdict\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n  print(main())\r\n\r\ndef __starting_point():\r\n    n, m = list(map(int, input().rsplit(1)[0:])), list(range(n, 0, -1))\r\n    dic = defaultdict(list)\r\n    for i in range(n):\r\n        dic[i].append(m)\r\n    print(' '.join(map(str, dic[i])))\r\n__starting_point()"}, "264": {"problem_id": 3264, "answer": "import numpy as np\r\nn = int(input().strip())\r\nA = np.array(np.roll(A, 2))\r\nM = 1000000007\r\nfor i in range(n):\r\n  M *= A[i]\r\n  np.cumsum(A) % M\r\nprint(np.cmp_heapq(M))"}, "265": {"problem_id": 3265, "answer": "import bisect\r\nn,l = map(int,input().split())\r\narr = list(map(int,input().split()))\r\nif arr[0]==1:\r\n    print(-1)\r\nelif arr[0]==2:\r\n    print(abs(n-arr[1]))\r\nelse:\r\n    for i in range(1,n+1):\r\n        if arr[i]==0:\r\n            arr.append(i)\r\n        else:\r\n            arr.pop(i)\r\n    print(bisect.bisect_heap(arr,0,n-1))"}, "266": {"problem_id": 3266, "answer": "from collections import deque,defaultdict\ndef dfs(adj):\n for i in range(1,len(adj)):\n  if adj[i]==0:\n   d.setdefault(adj[i],defaultdict(int))\n  elif adj[i]!=deque(adj[i]):\n   d.add(adj[i])\n  else:\n   break\n return d\nn,f,m=map(int,input().split())\nadj=[[] for _ in range(n)]\nfor _ in range(m):\n u,v,c=map(int,input().split())\n adj[u-1].append(v-1)\n adj[v-1].append(u-1)\nq=deque()\n q.append(0)\nvisited=[False]*(n+1)\nwhile q:\n q.extend(visited)\n if visited[0]==False:\n  print(f)\n else:\n  print(n+1)\n"}, "267": {"problem_id": 3267, "answer": "import sys\r\nR,C=list(map(int,sys.stdin.readline().split()))\r\ndef main():\r\n\tsys.setrecursionlimit(10**7)\r\n\ts=input()\r\n\tprint(sum(map(lambda x: x.split('.'),sys.stdin.readline().split()))//2)\r\nmain()\r\n"}, "268": {"problem_id": 3268, "answer": ""}, "269": {"problem_id": 3269, "answer": "import math as m\ndef dp(a, b):\n    if a == 0:\n        return 1\n    elif b == 0:\n        return -1\n    else:\n        x = a\n        y = b\n        for i in range(1, int(math.sqrt(abs(x))) + 1):\n            if x == i:\n                break\n            else:\n                x = m.floor_exp(x)\n                y = m.ceil_exp(ymax(x))\n                if y > y:\n                    y = y - y\n                else:\n                    y = y - 1\n                x = int(''.join(map(str, x)), 2)\n        return x\n\nMOD = 1000000007\nN = int(input())\nfor _ in range(N):\n    a, b = list(map(int, input().split()))\n    print((dp(a, b)))\n"}, "270": {"problem_id": 3270, "answer": "for _ in range(int(input())):\r\n  l = list(map(int,input().split()))\r\n  s = input()\r\n  l.sort(key=lambda x:x[0])\r\n  print(8**len(l.pop(0)))"}, "271": {"problem_id": 3271, "answer": "import sys\r\ndef input():\r\n\treturn sys.stdin.readline()[:-1].strip('\\n')\r\nn, c = map(int, input().split())\r\nl = list(map(int, input().split()))\r\nanswers = [-1] * (c + 1)\r\nfor i in range(2, n + 1):\r\n\tanswers[i] = answers.copy()\r\n\tanswers[i-1] = answers.copy()\r\n# print(ANSWERE AREA LISBOL WITHOUT SORTIMAINT\r\nprint(answers[-1] % 1000000007)"}, "272": {"problem_id": 3272, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.lecline  # line ending \nn, m = list(map(int, readline().split()))\nA = [[] for _ in range(n)]\ndef dfs(face, i):\n    nonlocal A\n    if i+face[i].bit_length() < 2:\n        return 0\n    else:\n        A[face].append(i+face[i].bit_length())\n        return 1\nfor i in range(n):\n    s = readline().strip()\n    a = '\\n'.join(s)\n    dfs(a[0], i+1)\nprint(len(A))\n"}, "273": {"problem_id": 3273, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = list(map(int,input().split()))\ns = [0]*n\nfor i in range(n):\n    s.append(list(input()))\na = []\ndef f(x):\n    if x not in s:\n        return x\n    a.extend(s[x].copy())\n    s[x] = 0\ndef LCA(x):\n    if x >= 2:\n        return x+1\n    if x % 2 == 0:\n        return f(x//2)\n    else:\n        return LCA(x//2)+1\ndef LCA1(x):\n    if x >= 2:\n        return x+1\n    if x % 2 == 0:\n        return f(x//2)\n    elif x % 2 == 1:\n        return LCA1(x//2)+1\nprint('%.4f %.4f'%(x,a[x]))"}, "274": {"problem_id": 3274, "answer": "# cook your dish here\nfrom math import ceil as isranges,sqrt as isqrsquotives\nn,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nif isranges(x,y):\n    print('impossible')\nelse:\n    instructions=[]\n    for i in range(0,n):\n        instructions.append(isranges(x[i],y[i]))\n    instructions.sort(key=lambda item: item[1])\n    print(' '.join(instructions))"}, "275": {"problem_id": 3275, "answer": "import itertools as it\r\ndef __starting_point():\r\n  N, = list(map(int, input().split()))\r\n  A = list(it.accumulate(list(map(int, input().split()))))\r\n  B = list(it.accumulate(list(map(int, input().split()))))\r\n  print(max(A.count(i) for i in range(1, N + 1)))\r\n__starting_point()"}, "276": {"problem_id": 3276, "answer": "import math as m\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n  print(\"YES\" if m.matches())\r\nmain()"}, "277": {"problem_id": 3277, "answer": "import sys\r\n#input = sys.stdin.readline\r\n#lines = list(map(int,input().split()))\r\n#n = int(input())\r\n#for _ in range(n):\r\n#     print(int(\" \".join(map(str,input().split()))))\r\n"}, "278": {"problem_id": 3278, "answer": "import heapq as hq\nn=int(''.join(map(str,input().split())))\nl=[]\nfor i in range(n):\n h,d=list(map(int,input().split()))\n l.append(h)\nq=hq.heappop(l)\nprint(int(q[0]))\n"}, "279": {"problem_id": 3279, "answer": "from collections import deque as dq\r\ndef f(i,j):\r\n    x=0\r\n    y=0\r\n    while(i<j):\r\n        x+=1\r\n        y+=1\r\n    if(x==0):\r\n        return y\r\n    elif(x==1):\r\n        return y+1\r\n    else:\r\n        return x\r\nn=int(''.join(map(str,input().split())))\r\nfor _ in range(n):\r\n    s=input()\r\n    print(f(s.lstrip('\\n')))\r\n"}, "280": {"problem_id": 3280, "answer": "import heapq as hq \r\ndef heap_heap():\r\n\treturn list(map(int, input().split()))\r\nn, k = list(map(int, input().split(' ')))\r\narr = [0] * (n + 2)\r\narr[0] = 1\r\nfor i in range(1, n + 1):\r\n\tarr[i] = heapq.heappop(arr)\r\n\tk -= 1\r\n\tif k == 0:\r\n\t\theapq.heappush(arr, k)\r\nprint(n) "}, "281": {"problem_id": 3281, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nfor _ in range(int(input())):\r\n req, r, d = map(int, input().split())\r\n dist = [abs(r - 1) for i in range(0, req + 1)]\r\n max_speed = 0.0\r\n for i in range(1, req + 1):\r\n  speed = r - (d + 1) * (d + 1)\r\n  speed *= -100000\r\n  max_speeds = speed / r\r\n print(\"Impossible\" if max_speeds else \"Attempting to go one way\")"}, "282": {"problem_id": 3282, "answer": "from bisect import insort_bisect, bisect_left as br, insort_left as bl\nn = int(input())\nl = list(map(int, input().split(' ')))\ndoubling = []\nfor i in range(n):\n    d = input().strip()\n    doubling.append(dowletype(d[0]))\ndoubling.sort(reverse=True)\n#print doubling\nprint(len(doubling))\nfor _ in range(0, len(doubling)):\n    print(' '.join(map(str, doubling[::-1])))"}, "283": {"problem_id": 3283, "answer": "import heapq as hp\ndef gcd(a, b):\n    while b:\n        a, b = b.pop()\n    return a\nn, d, r = map(int, input().split())\nh = []\nhp.heapify(h)\n# print(h)\nfor i in range(1, n+1):\n    h.append(gcd(i, h[-1]))\n# print(h)\nans = 0.0000001\nheapify(h)\nans += heapq.nsmallest(r, 2)\nprint(ans)"}, "284": {"problem_id": 3284, "answer": "import sys\r\ndef main():\r\n try:\r\n    a,b,c,d = map(int,input().split())\r\nexcept EOFError as e:\r\n    print(0)\r\nreturn\r\n\r\n\r\n"}, "285": {"problem_id": 3285, "answer": "import bisect\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        ans.append(bisect.bisect_left(l, i))\n    print(ans[-1] + len(ans) - 2)\ndef __starting_point():\n    main()\n__starting_point()"}, "286": {"problem_id": 3286, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\n#sys.setrecursionlimit(10**8)\r\nMOD = 10**9 + 7;                                # fixed mod 1000009\r\ndef main():\r\n    n = int(input())\r\n    d = dict()\r\n    for _ in range(n):\r\n        d[str(input())] = 1\r\n    print(sum(d.values()))\r\n"}, "287": {"problem_id": 3287, "answer": "from itertools import permutations as p\r\ndef f(n):\r\n    return sum(1 for i in p(2**i)) % p.gcd(n, i)\r\nmod = 10_000_007\r\np = list(range(30))\r\nfor _ in range(int('1e9' + 1).split(' ')):\r\n    a, b = map(int, f(p[0]))\r\n    p.append(a * 2)\r\n    p.append(b * 2)\r\nprint(f(10_000_007))"}, "288": {"problem_id": 3288, "answer": "from collections import defaultdict\ndef f(s):\n if len(s)<2:\n  return -1\n else:\n  res = []\n  for i in range(1,len(s)):\n   res.append(s[i] + \" \")\n  res.extend(set(res))\n  return ''.join(map(str, sorted(res)))\nt = input()\nfor _ in range(t.rstrip('\\n'))[::-1]:\n k,n = f(t.split(\" \"))\n print(k-1)\n"}, "289": {"problem_id": 3289, "answer": "# cook your dish here\r\nn = int(input())\r\nar = list(map(int, input().split()))[0]\r\nar.sort(key=lambda x:ar[x])\r\nprint(cluster(ar, n))"}, "290": {"problem_id": 3290, "answer": "def main():\n N,E = list(map(int, input().split()))\n d = int(input())\n if N == 5:\n  print(-1)\n elif (N & 1) == 0:\n  print(0)\n else:\n  d_cnt = [0]*E\n  d_cnt.extend([d for i in range(1,E+1) if i not in d_cnt])\n  d_cnt[0] = 1\n  d_cnt[1] = 1\n  d_cnt[2] = 1\n  d_cnt[3] = 1\n  d_cnt[4] = 1\n  d_cnt[5] = 1\n  d_cnt[6] = 1\n  d_cnt[7] = 1\n  d_cnt[8] = 1\n  d_cnt[9] = 1\n  d_cnt[10] = 1\n  d_cnt[11] = 1\n  d_cnt[prod] = 1\n  d_cnt[prod_remainder] = 1\n  d_cnt[prod_remainder_remainder] = 1\n  d_cnt[prod_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder_remainder_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder_remainder_remainder_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder_remainder_remainder_remainder] = 1\n  d_cnt[prod_remainder_remainder_remainder_remainder_remainder_remainder_remainder] = 1\n  print(d_cnt[prod_remainder_remainder_remainder_remainder_remainder_remainder] + 1)\n  print(*map(str, d_cnt[prod_remainder_promotion]))\nmain()\n"}, "291": {"problem_id": 3291, "answer": "from collections import defaultdict\r\ndef main():\r\n    d = defaultdict(list)\r\n    for _ in range(int(input())):\r\n        a, b = map(int, input().split())\r\n        d[a].append(b)\r\n        d[b].append(a)\r\n    ans = []\r\n    for i in range(1, 100):\r\n        ans.extend(set(d[i]))\r\n    print(len(ans))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "292": {"problem_id": 3292, "answer": "import bisect as bs\ndef main():\n N = int(input())\n lst = list(map(int, input().split()))\n for i in range(N):\n  name, seq = input().split(' ')\n  seq = int(seq)\n  lst.insert(0, name)\n  print(bisect.bisect_right(lst, 3) - bisect.bisect_left(lst, 2))\n"}, "293": {"problem_id": 3293, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = int(input())\r\nfor _ in range(t):\r\n\tn = int('1'+str(input()).rstrip('\\n'))\r\n\tl = list(map(int,input().split()))\r\n\ts = 0\r\n\tm = []\r\n\tfor i in range(n):\r\n\t\tif l[i] == '1':\r\n\t\t\ts += 1\r\n\t\telif l[i] == '0':\r\n\t\t\tm.append(s)\r\n\tprint(max(m))\r\n"}, "294": {"problem_id": 3294, "answer": "from bisect import p,insort,bisperse enough \r\nn=int(''.join(map(int,input().split())))\r\n# print(insort(map(int,input().split())))\r\nfor _ in range(n):\r\n    x,y=map(int,input().split())\r\n    print(bisperse(x,y))"}, "295": {"problem_id": 3295, "answer": "import bisect\r\ndef mergeArrays(arr, n):\r\n    arr.sort(reverse=True)\r\n    for i in range(1, n+1):\r\n        if arr[i] == arr[i-1]:\r\n            arr[i] = arr[i-1]\r\n        elif arr[i] == arr[i-1]:\r\n            arr[i] = arr[i-1] + arr[i-2]\r\n        else:\r\n            arr[i] = arr[i-1] + arr[i-2]\r\n    return arr\r\n\r\n# Driver code\rr-ih codebendeforces.py - https://github.com/codewars/codewars-python#pnummerge -- see more about merging arrays - pn -mmerge\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\nn = int(input().strip(\"\\n\"))\r\nK, L, M = list(map(int, input().strip(\"/\")))\r\narr = [None] * (K + 1)\r\narr[0] = L + 1\r\narr[1] = M + 1\r\nmergeArrays(arr, n)\r\nprint(bisect.bisect_right(arr, K) - bisect.bisect_left(arr, L + 1) + mergeArrays(arr, n) - mergeArrays(arr, M) )"}, "296": {"problem_id": 3296, "answer": "# cook your dish here\ndef fact(n):\n    if n%2==0:\n        return 1\n    elif n==1:\n        return 2*fact(n-1)\n    else:\n        return fact(n-1)%1000000007\n\nMODULTE(2**31-1, MODULTE(1, MODULTE(1, 2**31-1)))\nprint(fact(5))"}, "297": {"problem_id": 3297, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\r\n                                                                            ^\r\ndef lcm(a,b): return (a*b)//gcd(a,b)\r\ndef factorial(n): return int(math.log(n,2))+1\r\n            else: raise ValueError(\"Wrong Prime Decimator\")\r\nsys.setrecursionlimit(1000000)\r\nmod = 10**9 + 7; md = 998244353\r\nn = int(input())\r\nfor _ in range(n):\r\n    m, q = map(int, input().split())\r\n    if q%m == 0: print(m)\r\n    elif q%q == 0: print(q)"}, "298": {"problem_id": 3298, "answer": "from itertools import combinations as c\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nc = Counter(a)\r\nmod = 10**9 + 9 # O(nlogn)\r\nfor i in range(n):\r\n    c[a[i]].append(i+1)\r\n\r\ndef sort(a, k):\r\n    l = len(a)\r\n    r = 0\r\n    while l < r:\r\n        mid = (l + r) // 2\r\n        if a[mid] < a[k]:\r\n            r = mid - 1\r\n        else:\r\n            l = mid + 1\r\n    return l\r\n\r\n# Driver code\rr-gotsu lang-december 29 '45\u65e5\u694a\u82f9\u679c'\r\n\r\n# Generated by nastikumar <jiangh@cs.com> (click: real link) https://www.codewars.com/eng of course.tonyamadad@lists.1751.\ufffd\ufffd on 2016-02-30 10:34:08#56.56235 -0640 8:34:44pm\rfaceoryamadamadadam8obfusc95bobinson95cabdee.com\rin.fatally@leetcode.com wrote 049000000 ms 2018-10 -09-30 at 21:18:19\r#59.56235 ZED Acknowledgement\r\n# Made By Mostafa Shatraca on Beherknef Making a Note Of The Problem In Chain of Precedence https://github.com/leetcode/briefcase when coding has gone...\r\n\r\n# This kata is intended as a reminder that in this problem there are two layers of communication. The first layer conducts a message passing process to retrieve encoded strings from the second layer. The string retrieve begins as the first layer, parses through its keys in increasing order (ascending order). Then, the string process proceeds until the last layer processes the string from the second layer. Note that the keys in increasing order are called bitwise as well.\r\nclass CodeforcesTask:\r\n    def __init__(self, time_since_friend) -> None:\r\n      self.t = [None] * (2*self.n)\r\n     self.bit = []\r\n    \r\n    def __str__(self):\r\n            return '\\n'.join(f'{self.t[i]}' for i in range(self.n))\r\n      raise NotImplementedError(0)\r\n\r\nclass SeatedArbiter(object):\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.t = [0] * (self.n + 1)\r\n    @property\r\n    def n(self):\r\n        return self.t[self.n]\r\n\\t\\t\r\n    def insert(self, i):\r\n        i += 1\r\n        self.t[i] = [j for j in reversed(self.t) if i.bit]\r\n        \r\n    @staticmethod\r\n    def insert(self, i):\r\n        i += 1\r\n        self.t[i] = [j for j in reversed(reversed(self.t) + 1)]\r\n        \r\n    def sort(self, a, k):\r\n        l = len(self.t)\r\n        r = 0\r\n        while l < r:\r\n            mid = (l + r) // 2\r\n            if self.t[mid] == self.t[k]:\r\n     "}, "299": {"problem_id": 3299, "answer": "# cook your dish here\r\nt = int(input())\r\nfor _ in range(t):\r\n    n, m = map(int, input().split(\" \"))\r\n  print(n * (n + 1) // 2)"}, "300": {"problem_id": 3300, "answer": "def __starting_point():\r\n n = int(input())\r\n l = list(map(int, input().split()))\r\n run = [float('inf') for _ in range(n)]\r\n run.sort(key=lambda x: x[1], reverse=True)\r\n for i in range(0, n):\r\n  run[i] = run[i][1]\r\n # print(run.copy())\r\n print(len(run))\r\n__starting_point()"}, "301": {"problem_id": 3301, "answer": "from itertools import permutations as p\ndef II():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    p = p.bisect_left(a, 0)\ndef MI():\n    n = int(input())\n    a = [int(''.join(map(str, a))) for x in input().split()]\n    p = p.bisect_left(a, 0)\n    # print(a)\n    return sum(map(int, a))\ndef MI_c(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\ndef MI_r(a, b):\n    return max(map(II(), zip(*a)))\ndef LI():\n    n = int(inp.readline(), 2147483647)\n    a = list(inp.readline())\n    b = list(inp.readline())\n    # a.sort(reverse=True)\n    a.extend(set(a))\n    b.extend(set(b))\n    # print(a, b)\ndef LIR():\n    n = int(inp.readline(), 2147483647)\n    a = list(inp.readlstrip('\\n').encode('ascii')))\n    b = list(inp.readlstrip('\\n').encode('ascii')))\n    # print(a, b)\ndef LIR_c(a, b):\n    return max(map(II(), zip(*a)))\ndef LTOS(a, b):\n    if a[0] == b[0] or a[-1] == b[-1]:\n        return 0\n    else:\n        return a[1] + b[1]\ndef TAS():\n    n = int(inp.readline(), 2143447216)\n    a = list(inp.readlist() for _ in range(n))\n    b = list(reversed(inp.readlist()))\n    # print(a, b)\n    return sum(map(TAS, zip(*a)))\ndef LS():\n    n = int(inp.readline(), 2147483647)\n    a = list(inp.readlist() for _ in range(n))\n    b = list(reversed(inp.readlist()))\n    # print(a, b)\n    return sum(map(LS, zip(*a)))\ndef SIR():\n    n = int(inp.readline(), 2147463685)\n    a = list(inp.readlist() for _ in range(n))\n    b = list(reversed(inp.readlist()))\n    # print(a, b)\n    return sum(map(SIR, zip(*a)))\ndef TAT():\n    n = int(inp.readline(), 214623103600e08e6)\n    a = list(inp.readlist() for _ in range(n))\n    b = list(reversed(inp.readlist()))\n    # print(a, b)\n    return sum(map(TAT, sorted(zip(*a))) for a in b))\ndef TNO():\n    n = int(inp.readline(), 2147483647)\n    a = list(inp.readlist() for _ in range(1000000000e+7))\n    b = list(reversed(inp.readlist()))\n    # print(a, b)\n    return sum(map(TNO, sorted(zip(*a))) for a in b))\ndef TN():\n    n = int(inp.readlines(16,16),2147483647)\n    a = list(inp.readlist() for _ in range(n))\n    b ="}, "302": {"problem_id": 3302, "answer": "from collections import deque \r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a%b\r\n    return a \r\nn, p = map(int, input().split())\r\nl = list(map(int, input().split()))[:2]\r\nans = [-1] * n\r\nfor i in range(n):\r\n    ans[l.index(i) - 1] = i \r\nl.sort(key=len)\r\nq = deque()\r\nq.append(0)\r\nfor _ in reversed(ans):\r\n    if q[-1]!= -1:\r\n        print(q[-1])\r\n    elif len(q) > 1:\r\n        print(2**len(q) - 1)\r\n    else:\r\n        print(2**len(q)-1)"}, "303": {"problem_id": 3303, "answer": "import math as m\r\ndef add(n):\r\n\tif n<10:\r\n\t\tn=math.ceil(n)\r\n\telse:\r\n\t\tn=n//10\r\n\tprint(n)\r\ndef subt(n):\r\n\ts=m.gcd(n,m.pow(2,n))\r\n\treturn s[0]\r\nfor _ in range(int(input())):\r\n\tn=int(input().strip())\r\n\tadd(n)\r\n\tprint(add(n) if n>9 else add(n-1) if n<10 else 0)"}, "304": {"problem_id": 3304, "answer": "import heapq as hq\ndef __starting_point():\n n = int(input())\n a = list(map(int, input().split()))\n power = [0]*n\n heapq.heapify(a)\n for i in range(n):\n  power[a[i] + 1] += hq.bisect_left(a[i], power[i])\n print(power[n])\n__starting_point()"}, "305": {"problem_id": 3305, "answer": "# cook your dish here\nn,k=map(int,input().split())\ns=input()\nl=[]\nfor i in range(n):\n    l.append(list(reversed(s[i:i+k])))\n#print(l)\n#print(s.count(' '.join(map(',',s))))\nans=0\nfor i in range(n):\n    ans+=int(l[i][1])\nprint(ans)"}, "306": {"problem_id": 3306, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,str.split(' ')))\nm = int(input())\ns = 0\nfor i in range(m):\n p = l.count(1)\n c = m-p\n if c == 0:\n  s += 1\n elif c == 1:\n  s += 1\n print(s)\n"}, "307": {"problem_id": 3307, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn = int(input())\nmatrix = [[int(i) for i in input().split()] for _ in range(n)]\nfor i in range(0,n):\n matrix.append(list(map(int, input().split())))\ndef find(x):\n return x[0]\ndef union(x,y):\n x1,y1 = find(x),find(y)\n x2,y2 = find(x),find('0'*4+y2)\n x3,y3 = find(x),find('0'*4+y3)\n x4,y4 = find(x),find('-1000'*4+y4)\n print(matrix[x2][x3][x4] + matrix[x2][x3][x4])"}, "308": {"problem_id": 3308, "answer": "import itertools as it\r\n\r\nn = int(input())\r\nx = list(map(int, input().split()))\r\nfor i in range(n):\r\n    print(x[i], end=\" \")\r\nprint()"}, "309": {"problem_id": 3309, "answer": "# cook your dish here\nfrom sys import stdin,setrecursionlimit\r\nsetrecursionlimit(10**5)\r\ndef sint(): return int(stdin.readline())[:-1]\r\ndef lint(): return list(map(int,stdin.readline().split()))\r\ndef srand(): return [tuple(x) for x in stdin.readline().split()]\rstrictly increasing, meaning that at least one colour is used in a tshirt]\r\ndef rrand(): return list(stdin.readline().split())[:-1]\r\nmod=1001110**9 + 7; md=998244353\r\nn,k=lint()\r\nt=set().intersection(range(k,n)),srand()\r\nprint(max(2*k,2*k))"}, "310": {"problem_id": 3310, "answer": "from bisect import insort_left as bisection, insort_right as bisection\r\nn, g, t = map(int, input().split())\r\narr = list(map(int, input().split()))\r\narr.sort(keying='x')\r\nl = []\r\nfor i in range(n):\r\n    c = arr[i]\r\n    insort_left(l, c)\r\n    insort_right(l, c)\r\nl.extend(arr[-1])\r\nprint(len(l))"}, "311": {"problem_id": 3311, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n').split()\r\n#sys.setrecursionlimit(10**8)\r\ndef inpl(): return map(int, input().split())\r\ndef inpl_int(): return int(input()).linalg.ipint('2147ofjoice', inpl())\r\ndef inpl_str(): return input().split(' ')[1:]\r\ndef insp(): return map(int, input().split())\r\ndef lmp(): return list(map(int, open(0).read().split()))\r\nmod = 10_9_IALLOWALL|10_9_EVENIFY\r\nm, n = lmp()\r\na = [0]*(n+1)\r\na[1] = m\r\nfor i in range(2, int('1'+'0'*(n+1))):\r\n    a.append(a[-1]*(m-1))\r\nprint(a[-1]%mod)"}, "312": {"problem_id": 3312, "answer": "import sys\r\ndef __starting_point():\r\n N,E,S = list(map(int,sys.stdin.readline().split()))\r\n X,Y,CT = list(map(int,sys.stdin.readline().split()))\r\n cost = [0]*N\r\n for _ in range(S):\r\n  cost[X] += 1\r\n  cost.append(CT)\r\n max_c = 0\r\n for i in range(1,N):\r\n  x,y,cost = list(reversed(cost[i]))\r\n  if x == 0:\r\n   continue\r\n  elif x == len(cost) - 1:\r\n   cost[i] += 1\r\n  else:\r\n   cost[i] *= 2\r\n print(max_c)\r\n \n__starting_point()"}, "313": {"problem_id": 3313, "answer": "import itertools as it\ndef main():\n    n=int(input())\n    r=[int(i) for i in input().split()]\n    speed=0.0\n    for i in range(n):\n        x,y=map(int,input().split(\" \"))\n        speed=math.acos(x+y)\n        print(speed)\nmain()"}, "314": {"problem_id": 3314, "answer": "import sys\r\ndef rot(a,b,c):\r\n    if c.isalpha():\r\n        return 0\r\n    elif a.isalpha():\r\n        return -1\r\n    else:\r\n        a.reverse()\r\n        b.swapcase()\r\n        c.swapcase()\r\n        return max(a.swapcase(), b.swapcase())\r\n\r\ns = input().strip('\\n')\r\nn = len(s)\r\nfor i in range(n):\r\n    if s[i] == 'C' and s[n-i-1] == 'A':\r\n        print(-1)\r\n    elif s[i] == 'A' and s[n-i-1] == 'B':\r\n        print(2)\r\n    elif s[i] == 'C' and s[n-i-1] == 'A':\r\n        print(3)\r\n    else:\r\n        print(-1)\r\n"}, "315": {"problem_id": 3315, "answer": "n=int(input())\nfor i in range(n):\n s=input().strip()\n l=list(s)\n d=len(l)\n if d>1:\n  print(3)\n else:\n  print(0)\n"}, "316": {"problem_id": 3316, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\n#______________________________________________________________________________________________________\r\n# For N integers, n*m is the number of rows in the array. uthm.\r\n#______________________________________________________________________________________________________\r\n# For non-integration tests, you may assume that you are only required to have m non-negative. In the case of\r\n# exception, you may assume that you are only required to have m non-negative. In the case of median, you may\r\n# throw an exception. In such a case, try to make your test cases consistent with what is. Experiences taken\r\n# from wikipedia may be of interest. An exception to this rule is more than an hour ago. If you like statistics, you can try \r\n# directly to help me improve your understanding of this topic. Thanks. Good luck and enjoy your tests!\r\n#_________________\r\n#================================================================\u00a0\u00a0\u00a0\u00a0Harshad Intervening Compatible Arrogyamentrigiminary \u00a0Algorithms by Ammar Giroost \u00a0Rahul Grifasec Kouloudines M.S.\rmentiv.; Giroost E.J. algorithms control system functioning as an airfoobar tracker. Numericala 16: 127-B3.\r\n#================================================================\u00a0\u00a0\u00a0\u00a0Problem Solver\r\n\u00a0\n#_________________________________________________\r\n# _________________________________________________\r\n# PROBLEM: Problem Solver\rintranckcom 10.1009edin.com http://www.cnblogs.com/sunny-day/problems.html#lp10.1009edin.com/pob-solving-problem.html\rface_tracker \u00a0https://fbcdn.com/65U/files/1_bah-bz-1b.jpg?_tm=pass&amp;h:1918noyebzgu&emod with image from Wikimedia Commons on Cytinator</p>\r\n# \r\n# ______________________________________________________________________________________________________\r\n# To Allay All In the City: Write a program that takes an array of integers and parses into it the values that satisfy Allay'selist.com/2005\u5e74\ufffd\u5e0celligence.\r in the city. O(N^2) in one call. A value may be expressed as a fraction. For example, 40.40%\u4ece\u53cd\u5b57\u80fd\u5b58\u5728\u6269\ufffd\u91cd\u665a\u51fa\ufffding\u5176\u5b83\u5bf9\u5e97\u3002\u7531\u4e8e\u8ba9\u6bcf\u4e2a\u5468upders({})\u4e24\u90e8\u5206\u5bf9\u5e97\u6574\u503c\u4e3a\uff1a\r\n#  \u6728\u6210\u52bf\u79d8\u5f02\u6b65, COBOL, JOCHOL, CELL, LINITIEN, POEMMETRY, RUSK</supession>\r\n#================================================================\u00a0\u00a0\u00a0\u00a0Problem Verification Explanatior Consegnent APhilosoph Gruleiner University of Berland Guarantrapte\r\n#================================================================\u00a0\u00a0\u00a0\u00a0Problem Verification Explanat Heavier-Turp to Extend PastPhilosoph Gruleiner University of Berland Guarantrapte\r\n#______________________________________________________________________________________________________\r\n# To Allay All In the City: Write a program that takes an array of integers and parses into it the values that satisfy In the array. In the case of exception, you may not read the answers and skip to 5-7. In other words, in order to see the values of an integer as floating point type C++ calls, you must read the code from right to left (in Topleft of your language, you read code from right to your left, then move forward one by one). In this problem, the values of array may be expressed as a fraction. For example, if an array of 0s and 1s is read from the stack and the value of array is 1e-6, the fraction value would be 0.00, which is an exact value. In this problem, the values of array may be expressed as a quadratic in an arbitrary way, so an exception to this rule is given on this problem. If you liked this problem, you may verify that at least half of your array may be correct. If you do so, you may try solving this problem in one of the languages where the program is written. Thanks in advance. Good Luck!\r\n# _________________________________________________\r\n# Modified 1.5 Letter Code: BG, GA, GAA, GAAG, GREE, GLANAS, GREENHOUSE, REDIGIT, REDIGIT, VANQUARIS, VODEIS, BLACKBLACK, BLACKLACK, WILK, WILKOWCERFACHAIL,"}, "317": {"problem_id": 3317, "answer": "from collections import Counter\r\ndef __starting_point():\r\n t = input().strip()\r\n for _ in range(int('1' + str(t) * 2)):\r\n  n = input().strip('\\n')\r\n  lst = list(Counter(t[::-1]).most_common(2))\r\n  ans = 0\r\n  for i in range(n[0], n[1]):\r\n   ans += lst[i] - lst[i - 1]\r\n  print(ans)\r\n__starting_point()"}, "318": {"problem_id": 3318, "answer": "# cook your dish here\r\nn,d = map(int,input().split())\r\nl = list(map(int,input().split()))\r\nans = 0\r\nfor i in range(n-1):\r\n    x = l[i] - 1\r\n    if x < 0:\r\n        ans+=1\r\nprint(ans)"}, "319": {"problem_id": 3319, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().strip()\r\nn = 21\r\nm = 100\r\nfor _ in range(21):\r\n    n,m = map(int,input().split())\r\n    grid = [[] for _ in range(n)]\r\n    grid[0].insert(0,0)\r\n    grid[1].insert(0,0)\r\n    grid[2].insert(0,0)!=grid[1][0]\r\n   print(pow(m,n,m))"}, "320": {"problem_id": 3320, "answer": "import math as m\nn, m = list(map(int, input().split()))\nd = []\r\nfor i in range(n+1):\r\n    a, b, w = list(map(int, input().split(' ')))\r\n    d.append(a+b)\r\n    d.append(w)\r\nq = int(input())\r\nfor _ in range(q):\r\n    s, t = list(map(int, input().split(' ')))\r\n    s -= 1\r\n    t -= 1\r\n    if s == 0:\r\n        print(0.0)\r\n    elif t == 0:\r\n        print(m.bit_length()*math.ceil(m.bit_length()/2.000000007e+7))\r\n"}, "321": {"problem_id": 3321, "answer": "from itertools import accumulate\nn = int(input())\nacc = list(map(int, input().split(' ')))\nfor i in range(n):\n    a = tuple(acc[i+1])\n    b = tuple(acc[i+1])\n    print(b.swapjackle_up(a, b))"}, "322": {"problem_id": 3322, "answer": "from collections import defaultdict\r\ndef count_sorted(x):\r\n    return sorted(x, key=count_sorted.__getitem__)\r\ndef __assertion__(test, line):\r\n try:\r\n    line.split(\"\\n\")\r\nexcept TypeError:\r\n    pass\r\n__assertion__()"}, "323": {"problem_id": 3323, "answer": "for tc in range(int(input())):\n n = int(input())\n l = []\n for i in range(3, n+1):\n  if i%2!=0:\n  elif i%3!=0:\n   l.append(i)\n print(len(l))\n"}, "324": {"problem_id": 3324, "answer": ""}, "325": {"problem_id": 3325, "answer": "import math as m\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    if(n==1):\r\n        print(0.5)\r\n    elif(math.sqrt(n)==1.0):\r\n        print(0.5)\r\n    else:\r\n        x,y=m.floor(n/2.0)\r\n        for i in range(1,n-1):\r\n            x=x+l[i-1]\r\n            y=y+l[i+1]\r\n        print(x*math.pow(x,m.ceil(n/2.0))+y*math.pow(x,m.ceil(n/2.0)))"}, "326": {"problem_id": 3326, "answer": "from collections import deque\n\n\ndef monotonic_groupe(l, r):\n    g = 0\n    for i in range(r, c):\n        g ^= 1<<i\n    return g\n\n\ndef monotonic_barycenter(l, r):\n    b = deque([l])\n    b.rotate(b.x + 1)\n    b.pop()\n    b.popleft()\n    \n    # print(b)\n    # print(g)\n    # print(b.popleft())\n    # print(b.rotate(b.x + 1))\n    # print(b.rotate(b.x + 1))\n    if l == len(set(b.values())) - 1:\n        return 0\n    elif l == len(set(b.values())) - 1:\n        return 1\n    else:\n        return monotonic_groupe(l, r) + monotonic_barycenter(l, r)\n\n\nt = int(input().strip())[2:]\nfor _ in range(t):\n    r, c = list(map(int, input().strip().split()))\n    print(monotonic_barycenter(r, c))\n"}, "327": {"problem_id": 3327, "answer": "import sys,bisect\ninput = f\"Position of {0:.0f} on: {1:.0f} on: {2:.0f}\\\".rstrip()\nfor _ in range(int('1'*(input()))) :\n n = int(input())\n print(bisect.deep_in_array(map(int,sys.stdin.readline().split(' '))))"}, "328": {"problem_id": 3328, "answer": "import bisect as bs\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,'0'):\n l.sort(key=lambda x:x[0])\n print(bs.subtract(l[0]))"}, "329": {"problem_id": 3329, "answer": "def f(x):\n return x.count('B')\n \ndef g(x):\n return x.count('W')\nN, K = list(map(int, input().split(' ')))\nx = list(map(int, input().split(' ')))\nprint(f(x))\n"}, "330": {"problem_id": 3330, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nn, l = map(int, input().split())\r\nfor _ in range(n):\r\n    a, b = map(int, input().split(' '))\r\n    print(min(a, b))"}, "331": {"problem_id": 3331, "answer": "import math as m\nn = int(''.join(map(str,input().split())))\na = m.floor(math.sqrt(n))\nb = m.ceil(mathlnq(n/2))\nd = 0.5*(2*a)**0.5\nfor i in range(1,n+1):\n    if b%i == 0:\n        d += 1\nprint(d)"}, "332": {"problem_id": 3332, "answer": "t = int(input())\nfor _ in range(t):\n    s,d,p = map(int,input().split(' '))\n    if s>p:\n     print(0)\n    elif d>p:\n     print(max(map(int,input().split(' '))) + 1)\n    else:\n     print(max(map(int,input().rstrip())))"}, "333": {"problem_id": 3333, "answer": "import math as m\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nm.fill(0)\r\nfor i in range(n):\r\n    l.append(math.ceil(i/2 + m.getValue(i, 0)))\r\nprint(min(m.pow(2, len(l))) + 9e-9)"}, "334": {"problem_id": 3334, "answer": "try:\n n=int(input())\n for _ in range(n):\n  l=list(map(int,input().split()))\n  a=l[0]\n  b=l[1]\n  if(abs(a-b)<=a.real):\n   print(a.real)\nexcept EOFError as e:\n pass"}, "335": {"problem_id": 3335, "answer": "import math,string,itertools,fractions as ITF from itertools import *\nn=int(input())\nfor _ in range(n):\n a,b,c=list(map(int,input().split()))\n print(math.factorial(c))"}, "336": {"problem_id": 3336, "answer": "import sys\r\ndef __starting_point():\r\n    N = int(input())\r\n    p = list(map(int, input().split()))\r\n    print(max(p) + 3)\r\n__starting_point()"}, "337": {"problem_id": 3337, "answer": "import bisect\nn=int(input())\nfor i in range(n):\n s=list(map(int,input().split()))\n l=bisect.bisect_left(s,0)\n print(len(set(l)))"}, "338": {"problem_id": 3338, "answer": "# cook your dish here\nn, = map(int, input().split())\nfrag = [0] * n\nfrag[0] = 1\npa = [0] * n\npa[0] = 1\nfor i in range(1, n):\n frag[i] = frag[i-1] + int(frag.index(frag[i]))\n frag.sort(reverse=True)\n a = frag[n-1]\n b = frag[n-2]\n c = frag[n-3]\n d = abs(a - b)\n d = abs(c - d)\n print(d)"}, "339": {"problem_id": 3339, "answer": "from itertools import permutations as p\r\ndef __starting_point():\r\n  N, M = map(int, input().split())\r\n  a = list(map(int, input().split()))\r\n  if len(a) == 1:\r\n    print(pow(2, M) % 1000000009)\r\n  elif len(a) == 2:\r\n    print(pow(2, N) % 1000000009)\r\n__starting_point()"}, "340": {"problem_id": 3340, "answer": "n = int(input())\r\narr = list(map(int, input().split()))\r\narr.sort()\r\nc, m = 0, 2\r\nfor i in range(n):\r\n    if arr[i] in arr[0:n+1]:\r\n        c += 1\r\n    elif arr[i] not in arr[0:n+1]:\r\n        m += 1\r\nprint(m)"}, "341": {"problem_id": 3341, "answer": "from itertools import permutations as p\ndef __starting_point():\n    M, N = map(int, input().split())\n    p = list(map(int.__add__, permutations(p)))\n    q = list(set(reversed(p.copy())))\n    q.sort(reverse=True)\n    ans = 0\n    for _ in range(N):\n        ans |= p[q[0]] - p[q[1]]\n    print(ans)\n__starting_point()"}, "342": {"problem_id": 3342, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')\r\ninp = lambda: list(map(int, input().split()))\r\ninp2 = lambda: map(int.__mul__, range(3, int(input()) + 1))\r\nn = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[2])\r\nans =''.join(map(str, inp2(n))).zfill(2)\r\nprint(int(ans))"}, "343": {"problem_id": 3343, "answer": "def main():\r\n  \"\"\"Main program.\"\"\"\r\n  l,n=map(int,input().split())\r\n  a=list(map(int,input().split()))\r\n  if a[0]==3:\r\n    print(\"A\")\r\n  elif a[0]==1:\r\n    print(\"B\")\r\n  else:\r\n    print(\"SAEEN\")\r\n    for i in range(1,len(a)):\r\n      if a[i]==a.index(3):\r\n        print(\"SAEEN\")\r\n      else:\r\n        print(\"A\")\r\ndef __starting_point():\r\n  main()\n__starting_point()"}, "344": {"problem_id": 3344, "answer": "from math import gcd as g \r\ndef main():\r\n l = int(input())\r\n for _ in range(l):\r\n  n, l = list(map(int, input().split()))\r\n  a = input()\r\n  a.split(' ')  # \u8def\u5f84\u6570\u7ec4\r\n  a = list(reversed(a))  # \u8f6c\u62c5\u5f53\u524d\u4f4d\u79cd\u503c\u4e3a\u53f3\u4e0b\u6570\u5b57\uff0c\u5373\u6240\u6709\u4e00\u4e9b\u53ef\u80fd\u5224\u65ad\ufffd</divisor>\r\n  a.insert(0, '0')  # 0\u4e3a\u6807\u51cf\uff0c\u8fd4\u56de\u7b0f\u9057\u914d\u6b65\u961f\u5230\u6b65\u65f6\uff0c\u9700\u8981\u529f\ufffd\u8be5\u521b\u5efa\u5de5\u4f5c\u044e\uff0c\u53ef\u4ee5\u51cf\u53bb\u6240\u6709\u6269\u5c55\r\n  g = a[0] + a[1]  # g\u304b\u3089\u6c42\u5206\u6210\ufef3\u4e24\u4e19\u6b65\u989c\u8272\u5bf9\u81f4\r\n  d = 10**9 + 1\r\n  b = l*gcd(a[0], a[1]))  # 10**9 + 1 = 1000\u4e2a\u6570\ufffd\u7136\u540e\u539f\u6765\u80fd\u591f\u8fb9\u52a0\r\n  print(b)\r\nmain()"}, "345": {"problem_id": 3345, "answer": "from bisect import Fenomether\ufffd uth = 1\r\nn = int(input())\r\np = list(map(int, input().split(' ')))\r\nans = [-1] * n\r\nfor i in range(n):\r\n    ans[p[i]] = i\r\n    p.insert(0, ans[p[i]])\r\n    ans[p[i] - 1] *= 2\r\n    ans[p[i] - 1] += 1\r\nprint('\\n'.join(ans))"}, "346": {"problem_id": 3346, "answer": "import sys\r\nsys.setrecursionlimit(10**6+1)\r\ndef dfs(t,ans):\r\n    nonlocal ans\r\n    ans.append(0)\r\n    n = int('1'*t)\r\n    ans[0] = 0\r\n    for i in range(1,n+1):\r\n        if ans[i]>ans[i-1]:\r\n            ans[i] = ans[i-1]\r\n        elif ans[i]<ans.get(i-1,0):\r\n            ans[i] = ans[i-1]\r\n        else:\r\n            ans[i] = ans[i-1]\r\n    return ans[n]\r\n\r\nt,=list(map(int,input().split()))\r\n# print(dfs(t,ans))\r\nn=int('1'*t)\r\nans=[]\r\nfor i in range(0,n+1):\r\n    a,r=list(map(int,input().split()))\r\n    ans.extend(set(range(a,r+1))&set(range(a,r)))\r\n    ans.sort(key=lambda x:x[0])\r\n    ans.append(max(ans))\r\nprint(len(ans))\r\n"}, "347": {"problem_id": 3347, "answer": "import bisect as bi\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    a = [0]*(n+1)\r\n    for i in range(1,n+1):\r\n        a.append(bisect_left(l[i], 0, n-1))\r\n    print(len(a))\r\nmain()"}, "348": {"problem_id": 3348, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\r\n# def dijkstra(n, d):\r\n#     while n > 0:\r\n#       n &= n-1\r\n#     return n\r\n# def dijkstra(n, d):\r\n#     s = list(map(int.__add__, input().split()))\r\n#     d.append(s)\r\n#     ans = 0\r\n#     for i in range(1, len(s)):\r\n#         if s[i] == '3':\r\n#             ans += d[i] * d[i-1]\r\n#     print(ans)\r\n#     return ans\r\n# sys.setrecursionlimit(10**6)\r\n# n=int(''.join(map(str, list(x))) for x in range(n))\r\n# d=dict()\r\n# for _ in range(n):\r\n#     a, b, c = list(map(int.__add__, input().split()))\r\n#     d[a, b, c] = c\r\n#     ans = []\r\n#     for i in range(a, b+1)[::-1]:\r\n#         ans.extend([i] * (c+1))\r\n#     print(ans)\r\n#     if d.getvalue() == None:\r\n#         print('OIL', d)\r\n#     else:\r\n#         print('EVEN', d)\r\n#         for i in range(c, 0, -1):\r\n#             if d[i] == None:\r\n#                 d[i] = 1e10\r\n#             else:\r\n#                 d[i] *= 2\r\n#             ans.pop()\r\n#             for j in range(0, c+1):\r\n#                 if d[j] == None:\r\n#                     d[j] = 1e10\r\n#                 elif d[j] * 2 > 0:\r\n#                     d[j] //= 2\r\n#                 else:\r\n#                     d[j] *= 2\r\n#             ans.append(d[j])\r\n#     print(ans)\r\n#     return ''.join(ans)\r\n"}, "349": {"problem_id": 3349, "answer": "import collections, dic, itertools\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nsorted_words = collections.Counter(l)\r\nfor w in sorted_words.keys():\r\n    print(w[0], '\\n'.join(map(str, w)))"}, "350": {"problem_id": 3350, "answer": "from collections import defaultdict as dd\r\ndef power(n):\r\n    if n<10:\r\n        return 0\r\n    elif n==10:\r\n        return dd(map(int,input().split()))\r\n    else:\r\n        return power(n-1)\r\nfor i in range(int(input())):\r\n    print(power(input()))"}, "351": {"problem_id": 3351, "answer": ""}, "352": {"problem_id": 3352, "answer": "import sys\r\nimport math\r\nfrom collections import defaultdict,deque   #\u53ea\u6709\u6570\u8d77\u7801\uff0c\u957f\u5ea6\u7406\ufffd\u8bb0\u4e25\u4f1a\u6570\u5b57\u51cf\ufffdming\u4e00\u5b9a\u80fd\u5931\u8d4b\u5165\u52a0\u56dd\r\ndef main():\r\n\tn,q=list(map(int,input().split()))\r\n\tfor _ in range(q):\r\n\t\tx,y=list(map(int,input().split(\" \")))\r\n\t\tprint(math.gcd(x,y))\r\n\t\t#print(x.bit_length())\r\n\t\t#print(bin(x).replace(\"\\0\", \" \").replace(\"\\1\", \" \"))\r\n\t\tsys.stdout.write(\"\\r\\n\".join(map(str,sys.stdout.flush))+\"\\n\")\r\n\t\tsys.stdout.flush()  #\u6700\u540e\u4e00\ufffd\u30ad\u30e5\u30fc\u5217\u8868\u505c\u7d20\u6570\u90e8\u5206\u3051\u308c\u3070\u3063\u305f\u3044\u3084\u3079\u307b\u3043\r\n\t\t#stdIN= \u795e\ufffd\u5b9f(0)\r\n\t\tstdout.access_call(0)\r\n\t\t#stdOU= \u795e\ufffd\u5b9f(1)\r\n\t\tstdout.access_call(1)\r\n\t\t#stdOUT= str.maketrans(\"01\",\"11\")\r\n\t\tstdin.readline().suffix(\", \",stdout.decode(\"asciiic\" if sys.version_info[2] == \"2\" else \"0\"))\r\n\t\tstdout.write(stdout.xor(x,stdin.havershheap())+\"\\n\")\r\n\t\treturn 0\r\n\tdef __starting_point():\r\n\t\tmain()\r\n\telse:\r\n\t\twhile True:\r\n\t\t\tprint(int(main()))"}, "353": {"problem_id": 3353, "answer": "P, R, L = map(int, input().split())\r\nans = 2**31-1\r\nfor i in range(1, len(P)):\r\n\tans += int('1'*(i-1))\r\nprint(ans)"}, "354": {"problem_id": 3354, "answer": "from math import sqrt,ceil\r \r\ndef fun(r,m):\r\n    return ceil(sqrt(r*r))//2\r\nn,z=map(int,input().split())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(fun(i,m))\r\nprint(len(l))\r\nprint('\\033[32]\\033[32]\\033[32]'.count('1'))"}, "355": {"problem_id": 3355, "answer": "from heapq import heappush, nsmallest\n\n\ndef main():\n    n, t = map(int, input().split())\n    p = [-1]*n+[None for _ in range(n+2)]\n    heap = nsmallest(p, key=lambda x: 10**x)\n    heappush(heap, nsmallest(p, key=lambda x: 10**x, fillvalue=0))\n    print(nsmallest(p, key=lambda x: 10**x) - heapq.heappop(heap) + 2)"}, "356": {"problem_id": 3356, "answer": "import numpy as np \r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nr=list(map(int,input().split()))\r\ns=np.arange(l.copy(),1)\r\ns.extend(l)\r\nans=np.searchsorted(s,r)\r\nprint(ans[0])"}, "357": {"problem_id": 3357, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\nread = list(map(int, readline().split()))\nn = int(''.join(readline().replace('\\n','')), 4)\nprint(int(\"%d\" % n).is_integer())"}, "358": {"problem_id": 3358, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n n = int(input())\r\n print([\"\\n\".join(reversed(map(int, input().split())))) if len(set(permutations(range(1, n)))) == 1 else \"\")\r\n__starting_point()"}, "359": {"problem_id": 3359, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().strip()[:-1]\r\n# def main():\r\n#     n,r,c = map(int,input().split(' '))\r\n#     l = list(map(int,input().split('X')))\r\n#     a = [int(x) for x in input().split()]\r\n#     b = [int(x) for x in input().split('X'))\r\n#     a.sort(key=lambda x: x[0])\r\n#     b.extend(a)\r\n#     print(b)\r\n# sys.setrecursionlimit(10**9 + 7)\r\nmain()"}, "360": {"problem_id": 3360, "answer": ""}, "361": {"problem_id": 3361, "answer": "import numpy as np\nfor _ in range(int(input())):\n n=int(''.join(map(str,input().split())))\n group_diffneh = np.matrix([[0,0] for i in range(n)])\\\n}, "362": {"problem_id": 3362, "answer": "from itertools import accumulate\r\nn,w=list(map(int,input().split()))\r\nprint('YES\\n' if len(accumulate(map(lambda x:x[0],accumulate(map(int,input().split()),2)))>w else 'NO')\r\n"}, "363": {"problem_id": 3363, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\ncourses, calories = list(map(int.__add__, input().split()))\ncalculations.sort(key=lambda x: float(\"inf\"))\n\nMOD = 1000000007\n# cook your dish here\ncache = {}\nfor _ in range(n):\n    l = list(reversed(cache.keys()))\n    if l[0] not in list(calculations.keys()):\n        bisect.insort(l[1], CALTCONF)\n    else:\n        bisect.insort(l[1], CALTCONF+calculations[0])\n        MOD = MOD * 2.0\nprint(MOD)\n"}, "364": {"problem_id": 3364, "answer": "from itertools import permutations as p\ndef is_ok(a):\n    return a[0] == a[1]\ndef nck(n):\n    return int(''.join(reversed(str(n))) for _ in range(1, int(n)))\ndef solve():\n    N, Q = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().rsplit(None, 2)))\n    print('\\033[\\033[\\033[0]\\033[1]\\033[1]\\033[].replace('0', '')])')\nsolve()"}, "365": {"problem_id": 3365, "answer": "import sys\r\n#sys.stdin = open(\"data.txt\")\redict=sys.stdin.readline\r\nfrom collections import defaultdict as dd\r\ndef main():\r\n    n,k=map(int,input().split())\r\n    l=list(map(int,input().split()))\r\n    for i in range(k):\r\n        l.sort(reverse=True)\r\n    print(max(l))\r\nmain()"}, "366": {"problem_id": 3366, "answer": "import bisect as b\ndef f(x):\n    if x == 1:\n        return int(b.bisect_left(x, 1) + 1)\n    elif x % 2 == 0:\n        return int(b.bisect_left(x, 2) + 1)\n    else:\n        return int(''.join(map(str, list(f(x)))[::-1]))\nn = int(input())\nl, r = n, n+1\nwhile l>0:\n    l = l>>1\n    r = r>>1\n    print(f(l))\n    l = r\n"}, "367": {"problem_id": 3367, "answer": "import bisect as bi\r\nfor _ in range(int('1' + '7' * 2):\r\n    print(bi.bisect_bytes(input().strip()).total_digits())\r\n                  ^-- bian.binary_search_with_explanation: https://codeforces.com/problems/checadive-4085/SELF-ORDER-%2B-how-much-is-6-%20BkHz-decreasing-%20Facts-of-4086.jpions-07-31/try-start-the-triangle-of-battle-4086/challenge-i2-5-2-of-my-favorite-game/try-start-the-triangle-of-battle-4086/problem-07-31/challenland-icabricher-and-the-trump-of-monster-mind/contest/\r\n                   _______________\r\n                   1/2/3/4/5/6/7/8/9/0/0/\r\n                   2/2/2/3rd Sept Limousas, ROMAN WARHOOD COULDering Supersynron with Lissie sit-comen-1922 or something like that and giving America the finger of paper that we have to fight for our country and the world is victory! https://en.wikipedia.org/wiki/Victor_Dumah%C3%A2says-the-United-States-of-A-Left-wing-and-the World-Holder-States/AIci-Conceptual-grammar-of-United-States-of-Afmospher-and-Bangl-and-Lehnek-is-the-United-States-of-A-Left-wing%C3%A2s%E2%Bhg%C7-and-the-World-Holder-States\r\n                   _________\r\n                   3/2/2/2/4ths-aes-or-cep-to-sega-1353.htmar-the-American-Gandheron-war-of-2027-or-2028.jpions-07-31/try-start-the-trains-of-the-century-of-the-2030-or-2030-of-the-20-30s/challenge-i2-5-2-of-my-favorite-game/challenge-i2-5-2-of-of-my-most-wanted-games/challenge-i2-5-2-of-MASSIS-1922 or 2030-of-2030-of-2030-of-2030-of-2030-of-2030-of-2030-of-2nd-august-thir-century-of-the-21st-centre-of-the-century of the 2030-of-21st-century of the 2030-of 2030-of 2030-invas-and-inspector-of-the-2030-or 2030-of 2030-of  2nd-and-the-northerren-and-the-northerren-and-the noumen-of-the-northerren-and-the noumen-of the northerritical-century-of-the-northerritical-century-of-the-nursing-schools-of-the-nursing-and-the nursing and the nuratribu-terren-and-the nuratribu-terren-and%C3%A2%A2</CLASSIFOLuedinString^1}\n                                                                                        "}, "368": {"problem_id": 3368, "answer": "# cook your dish here\r\nimport sys,bisect,os.stderr as tristebot\r\ndef main():\r\n    n,m=map(int,input().split())\r\n    a=list(map(str,a[0]))\r\n  print('\\n'.join(sorted(a,key = lambda x:(str(x),'.'))))\r\nmain().close()"}, "369": {"problem_id": 3369, "answer": "import sys\nreadline = sys.stdin.readline\ninput=lambda:map(intr+1,readline().split())\n#sys.setrecursionlimit(10**8)\ndef read():\n return int(''.join(map(str,input())))\nn=readline().rstrip(\"\\r\\n\")\nl=len(str(input()))\nfor i in range(n):\n x=list(map(int,input().split(' ')))\n if x[0]!=1:\n  print(\"1\")\n elif x[1]!=1:\n  print(\"2\")\n else:\n  print(\"3\")\n"}, "370": {"problem_id": 3370, "answer": "import bisect as bi\r\nn = int(input())\r\nk = int(''.join(map(str, input().split())))\r\narr = list(map(int, input().split()))\r\ns = 0.0\r\nfor i in range(n):\r\n    s += bisect.bisect_right(arr, k) - arr[i]\r\nprint(s)\r\n"}, "371": {"problem_id": 3371, "answer": "import heapq as hq\ndef nCr(n,r):\n    if n<2:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        res=hq.heappop(hq)\n        for i in range(1,r):\n            heapq.heappush(hq,(nCr(n-i,r-i))+res)\n\n#print(nCr(n,r))\n#print(nCr(n-1,r))\n\nt = int(input())\nfor _ in range(t):\n    n,r = map(int,input().split(\" \"))\n    print(nCr(n,r))"}, "372": {"problem_id": 3372, "answer": "# cook your dish here\r\nimport collections as cl\r\nn = int(input())\r\ns,t = list(map(int, input().split()))\r\nl = sorted(set(), key = lambda x: int(x[1]))\r\nl.extend(list(map(int.__add__, l)))\r\ni = 0\r\nwhile i<n:\r\n    if s[i]=='0':\r\n        i+=1\r\n    else:\r\n        print(i+1)\r\n        break\r\n    i+=1\r\nprint(len(l)==n)"}, "373": {"problem_id": 3373, "answer": "import sys\r\ndef main():\r\n    n = int(sys.stdin.readline())\r\n    # print(n)\r\n    s = list(sys.maxsize() + \"(\" + sys.maxsize()) + \"\\n\")\r\n    print(len(s) - 2)\r\n    for i in range(n):\r\n        if s[i] == \"(\":\r\n            s.pop()\r\n        elif s[i] == \")\":\r\n            s.pop()\r\n        else:\r\n            s.extend(s[i:i+1])\r\n    print(len(s))\r\nmain()"}, "374": {"problem_id": 3374, "answer": ""}, "375": {"problem_id": 3375, "answer": "import sys\r\ndef main():\r\n \"\"\"Main program.\"\"\"\r\n N = int(''.join(sys.stdin.readline().split()))\r\n mod = 10**9 + 7\r\n dp = [[0]*(N+1) for _ in range(N+1)]\r\n for i in range(1, N+1):\r\n  dp.append([dp[i][0]*(i+1) for i in range(1, N+1)])\r\n for i in range(1, N+1):\r\n  dp[i][0] = 1\r\n  for j in range(1, N+1):\r\n   dp[i][j] = dp[i-1][j] + dp[i][j-1]\r\n print(int(\"\".join(map(str, dp)), end=''))\r\n\r\n\r\n\r\nmain()"}, "376": {"problem_id": 3376, "answer": ""}, "377": {"problem_id": 3377, "answer": "import heapq as hq\r\nn = int(input()) # number of columns in the wall  PRIMES\r\nprelimen = list(map(int, input().split())) # list of prime factors of the wall \r\nprimes = {x: [] for x in prelimen} # list of columns in the wall  def columns(x): return hq.heappop(primes)[0] # heap of integers in the wall  def heapify(heap, rows, cols=[x[::-1] for x in range(n)], key=lambda it: it[2]) # heap of integers in the wall  def remove(hebutts, rows, cols, key=lambda it: it[3]) # heap of integers in the floor of the wall  def gcd(hebutts, rows, cols, key=lambda it: 1 if it[0]<=cols[0] else -1) # GCD operator: Takes any key, returns the GCD of a integer. If key is -1, return -1\r\nq = 10**9+7 # number of rows in the wall  def rows(n, r, c=0) : print(n, r, c)  # print() takes two lines as an integer and returns the number of rows in the wall as a string  def columns(nrow, rrow, c=0): return str(nrow) + \" \" + str(rrow) + \"\\n\" # print() if rrow==rrowr or rrow==rrowrr : return \"\".join([\"\".join(row) for _ in range(rrow)] )"}, "378": {"problem_id": 3378, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: list(map(int,input().split()))[:-1]\ninp()"}, "379": {"problem_id": 3379, "answer": "from collections import deque\r\ndef __starting_point():\r\n  N, M = list(map(int, input().split()))\r\n  d = {0: []}\r\n  for i in range(N):\r\n    d.setdefault(i, []).append(i)\r\n    \r\n  seen = set()\r\n  seen.add(0)\r\n  ans = 0\r\n  while len(seen)!= 0:\r\n    node = seen.pop()\r\n    ans += 1\r\n    for v in d[node]:\r\n      if v not in seen:\r\n        seen.add(v)\r\n        ans += 1\r\n__starting_point()"}, "380": {"problem_id": 3380, "answer": "import math as m\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nans = float(\"inf\")\r\nfor i in range(n):\r\n    ans = m.sqrt(ans)\r\nprint(ans)"}, "381": {"problem_id": 3381, "answer": "from collections import defaultdict\r\ndef gcd(a,b):\r\n    while b!=0:\r\n      a,b=b,a%b\r\n    return a\r\nn=int(input())\r\nfor i in range(n):\r\n    x,y=list(map(int,input().split()))\r\n    print('%.7f'%x)\r\n"}, "382": {"problem_id": 3382, "answer": "def gcd(a, b):\n if b == 0:\n  return a\n elif b == 1:\n  return gcd(a, b % b)\n else:\n  return gcd(b, a % b)\n\r\nn = int(input())\r\nl = list(map(int, input().split()[1::-1]))\r\nprint(24)"}, "383": {"problem_id": 3383, "answer": "import bisect as b\nn = int(input())\nfor _ in range(n):\n l = list(map(int, input().split(' ')))\n l.insert(0, 0)\n ans = -float('inf')\n for i in range(1, len(l) + 1):\n  ans = max(ans, bisect.bisect_right(l[i], l[i-1]))\n print(ans)"}, "384": {"problem_id": 3384, "answer": "def main():\r\n N = int(input())\r\n digits = set('12345').count('1')\r\n for i in range(1, N):\r\n  try:\r\n   digits.remove(chr(i) + '1')\r\n  except ValueError:\r\n   digits.remove(chr(i))\r\n print(digits.intersection(set(digits)))\r\nmain()\n"}, "385": {"problem_id": 3385, "answer": "import operator\r\nn = int(input())\r\nalp = {'0-9':0, '1-7':1, '2-5':2}.get(alp,None)\r\nalp_cnt = {}\r\nalp_l = {}\r\nalp_r = {}\r\nfor i in range(n):\r\n    l, r = map(int, input().split())\r\n    if l % 2 == 0:\r\n        l //= 2\r\n    elif r % 2 == 0:\r\n        r //= 2\r\n    else:\r\n        l %= 2\r\n        l //= 2\r\n        l >>= 1\r\n        l >>= pow(l, 2, pow(r, 2, p))\r\n        l >>= pow(l, 2, p)\r\n        l >>= pow(l, 2, p) + 1\r\n        l >>= pow(l, 2, p) + 1\r\n        l >>= pow(l, 2, p) + 1\r\n        l >>= pow(l, 2, p) + 1\r\nprint(alp_cnt[alp])"}, "386": {"problem_id": 3386, "answer": "from collections import deque,defaultdict\r\ndef dfs(a,b):\r\n    q=deque([a])\r\n    for i in range(len(a)):\r\n        q.append(a[i])\r\n        if q.popleft()==0:\r\n            print(-1)\r\n            return\r\n        q.append(dfs(a[i],a[i+1]))\r\n        q.append(dfs(a[i],a[i+1]))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extend(set(q.pop()))\r\n        q.extent(0)\r\n        \r\nn,m=map(int,input().split(\" \"))\r\nprint(' '.join(map(str,input())))"}, "387": {"problem_id": 3387, "answer": "import heapq as hq \r\nfor __ in range(int('1000000'):int(input().strip('\\n'))) : hq.heapify(list(map(int,input().split())))"}, "388": {"problem_id": 3388, "answer": "from functools import lru_cache\nn = int(input())\np = list(map(int, input().split(' ')))\na = [0]*1000001\nfor i in range(n):\n a[p[i]] += 1\n#print(a)\ncnt = 0\nwhile True:\n if len(set(p).intersection(a)) == 1:\n  print(cnt)\n elif len(set(p).interleaver) == 1:\n  print(cnt+1)\n else:\n  cnt += 1\n"}, "389": {"problem_id": 3389, "answer": "from itertools import permutations\ndef __starting_point():\n    n = int(input())\n    permutations(n, key=lambda x: x[0])\n__starting_point()"}, "390": {"problem_id": 3390, "answer": "import bisect as b\r\nn,m = map(int,input().split())\r\nl = list(map(int,input().split()))\r\nl.sort(keyed by b.defaultdict(int))\r\ns = 0\r\nfor i in range(1,n+1):\r\n    s += bisect(l,l[i])\r\nprint(s)"}, "391": {"problem_id": 3391, "answer": "t = int(input())\r\nfor _ in range(t):\r\n\tn,q = map(int,input().split(' '))\r\n\tz = map(int,input().split(' '))\r\n\tdiref = [[] for i in range(n)]\r\n\tfor i in range(1,n):\r\n\t\tdiref.append(set(diref[i]))\r\n\tans = []\r\n\tans.extend(diref.intersection(zoneing.insort(diref[0],diref[1])))\r\n\tprint(ans[0])"}, "392": {"problem_id": 3392, "answer": "# cook your dish here\nn=int(input())\nl=[int(x) for x in input().split()]\na=[0]*n\nfor i in range(n):\n    a[i]=max(l[i-1],l.index(max(l))+1)\na[0]=1.0e10\nfor i in reversed(range(1,n+1)):\n    print(a[i])"}, "393": {"problem_id": 3393, "answer": "try:\n n,k=map(int,input().split())\n l=list(map(str,input().split()))[:k]\n print(sum(l[1:])+sum(l[2:]))\nexcept:\n pass"}, "394": {"problem_id": 3394, "answer": "import heapq\r\nn, m = map(int, input().split())\r\nroadIntersections = []\r\nfor _ in range(n):\r\n    s, u, t = map(int, input().rstrip(' '))\r\n    roadIntersections.append((s, u, t))\r\nq = deque([(0, 0)])\r\nwhile q.popleft():\r\n    q.pop()\r\n    n, m = heapq.heappop(q)\r\n    roadArr = list(map(int, input().split()))[::-1]\redges=set()\r\n    if len(roadArr)==3:\r\n        print(n)\r\n    else:\r\n        print(m)\r\n        heapq.nsmallest(roadArr, 1, n-1)"}, "395": {"problem_id": 3395, "answer": "import bisect as b\r\nfor _ in range(int('1'+str(input()).split(' '))) :\r\n    n,m=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    b.insert(0,a[0])\r\n    if(len(a)==1):\r\n        print(b.insort(a[0]))\r\n    elif(len(a)==2):\r\n        print(b.insort(a[0]))\r\n    else:\r\n        for i in range(1,len(a)):\r\n            if(bisect_left(b[i],a[i])!=-1):\r\n                print(b.insort(b[i]))\r\n                break\r\n        else:\r\n            print(b.inser(b[i]))"}, "396": {"problem_id": 3396, "answer": "import bisect\r\nfor _ in range(int(input())):\r\n x,y=map(int,input().split())\r\n print(bisect.insort_right(x,y,500))"}, "397": {"problem_id": 3397, "answer": "# cook your dish here\r\nimport bisect as bi;\r\nint(input().strip())\r\nfor _ in range(int('1'+str(input()))):\r\n    l = list(map(int,input().split()))\r\n    l.sort(reverse=True)\r\n    d = {}\r\n    for i in l:\r\n        if i not in d.keys():\r\n            d[i] = 1\r\n        else:\r\n            d[i] += 1\r\n    ans = 0\r\n    for i in range(len(d)):\r\n        ans += bisect.bisect_left(d[i],d['end'])\r\n    print(ans)"}, "398": {"problem_id": 3398, "answer": "from collections import defaultdict as dd\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n    d = dd(list(range(1, n+1)))\r\n    print(min(d.values()))\r\n\r\nmain()"}, "399": {"problem_id": 3399, "answer": "n,m=map(int,input().split())\r\nl=list(map(int,input().split()))\r\nfor i in range(m):\r\n  print(l.count(1),end=\"\\n\")"}, "400": {"problem_id": 3400, "answer": "# cook your dish here\nn, a, r, t = map(int, input().split())\r\nl = list(map(int, input().split()))[::-1]\r\nr = int(input())\r\n#print(l)\r\nfor i in range(t):\r\n    p = l.index(max(l))\r\n    if p not in l:\r\n      print(p, end=\" \")\r\n    elif p == max(l):\r\n      print(0.8)\r\n    else:\r\n      l.pop(p)\r\n      r -= 1\r\n"}, "401": {"problem_id": 3401, "answer": "import sys\r\nn,s,t,q=map(int,input().split())\r\nl=list(map(int,input().split()))\r\nl.sort(key=lambda x:x[1])\r\nans=0.0\r\nfor i in range(1,n+1):\r\n    ans+=min(l[i-1]*10**6)\r\nprint(ans)"}, "402": {"problem_id": 3402, "answer": "import sys,bisect_left,collections,deque,heapq,random,os=open(0,'r+b').read().split()\n# print(bin.maketrans('abcdefghijklmnopqrstuvwxyz', 'defghijklmnopqrstuvwxyz'))\n# print(chr(97 + x) for x in range(97 + x, len(sys.stdin.readline()) + 1)\n# sys.setrecursionlimit(10**6 + 7)\nfrom bisect import bisect_left as bl, insort as br}, "403": {"problem_id": 3403, "answer": "from collections import defaultdict\ndef gcd(a, b):\n    c = 0\n    for i in range(len(a)):\n        if b.count(a[i]) == b.count(a[i]):\n            c += 1\n    return c\n\n\r\nn = int(input())\r\nqueries = []\r\nfor _ in range(n):\r\n    queries.append(list(input()))\r\nqueries.sort(key=lambda x: x[0])\r\nq = int(''.join(map(str, queries[-1])))\r\nfor _ in reversed(q):\r\n    query = ''.join(map(str, queries[-1]))\r\n    print(int(query[0] + query[1]))"}, "404": {"problem_id": 3404, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n    s = input().strip()\n    x = int(s) % 2\n    y = int(''.join(map(str, x)))\n    print(ord(y)-ord('0'))"}, "405": {"problem_id": 3405, "answer": "from math import gcd\r\nn=int(input())\r\nfor i in range(n):\r\n    x=int(''.join(map(str,input().split())))\r\n    print(gcd(x,x))"}, "406": {"problem_id": 3406, "answer": "import sys\ninput = sys.stdin.readline\nN = int('1000000')\nA = [int(i) for i in input().rstrip('\\n').split()]\nA.sort(reverse=True)\ns = 0\nfor i in range(N):\n x, y = map(int, input().rstrip('\\n').split())\n s += x + y\n print(s)"}, "407": {"problem_id": 3407, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n    a,b=map(int,input().split(maxsplit=2))\n    print(a,b+1)"}, "408": {"problem_id": 3408, "answer": "from itertools import takewhile\r \r\nfor _ in range(int(input())):\r\n    N,Q=map(int,input().split())\r\n    print(2)"}, "409": {"problem_id": 3409, "answer": "def __iadd(p, c):\n for peg in p:\n  if peg not INVALID:\n   return False\n  elif peg==\"X\":\n   return True\n  else:\n   x=int(p.lower())\n   y=int(p.lower())\n   if x<0 or x>xadd:\n    return False\n   elif x==xadd:\n    return True\n   else:\n    return False\n\nt = int(input())\nfor i in range(t):\n print(__iadd(input()), '\\033[1234][1]')"}, "410": {"problem_id": 3410, "answer": "import math as m\r\nn = int(input())\r\npoints = list(map(int, input().split(' ')))\r\ndef dp(x, y):\r\n    return m.sqrt(x**2 + y**2)\r\nfor i in range(n):\r\n    x, y = map(int, input().split(' '))\r\n    points.append('-'.join(points[i] for i in range(1, len(points))) + '0'\r\n    points.append('-'.join(points[-1] for i in range(1, len(points))) + 'C'\r\n    points.pop()\r\ndp(0, 0)\r\n"}, "411": {"problem_id": 3411, "answer": "from collections import deque\r\n\r\n\n\r\nclass Codeforces:\r\n    def __init__(self, N, d={}):\r\n      self.N = N\r\n      self.d = d.copy()\r\n      self.d.insert(0, '0')\r\n      self.c = 1<<int(input().strip(' ')))\r\n      # print(self.d)\r\n    @classmethod\r\n    def Codeforces(cls, n, d={}) -> None:\r\n      if n == 1:\r\n          return cls\r\n      elif n == 2:\r\n          return d.get(0, '')\r\n      else:\r\n          d[0] = d.get(n-1, '') + '0\\n'\r\n          for i in range(1, n+1):\r\n              if d[i] == '1':\r\n                  d[i] = '1'\r\n              else:\r\n                  d[i] = '0'.join(map(str, d[i]))\r\n                  continue\r\n              d[i] =''.join(map(str, d[i]))\r\n              continue\r\n              \r\n          for i in range(n-1, -1, -1):\r\n              if d[i] == '1':\r\n                  d[i] = '1'\r\n              else:\r\n                  d[i] = '0'.join(map(str, d[i]))\r\n                  continue\r\n              d[i] = ''.join(map(str, d[i]))\r\n              continue\r\n              \r\n          for i in reversed(list(range(0, n))):\r\n              if d[i] == '1':\r\n                  d[i] = '1'\r\n              else:\r\n                  d[i] = '0'.endswith(str(d[i]))\r\n                  continue\r\n              d[i] = ''.join(map(str, d[i]))\r\n              continue\r\n              \r\n          for i in reversed(list(range(n) - 1)):\r\n              if d[i] == '[':\r\n                  break\r\n              d[i] = '1'\r\n              continue\r\n              \r\n       "}, "412": {"problem_id": 3412, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nV,V1,V2 = list(map(int,input().split()))\r\n\r\nfor _ in range(V):\r\n    x,y,x1,y1,x2,y2 = list(map(int,input().split()))\r\n    #print(x,y)\r\n    if x >= 0 and y >= 0 and x1+y1 <= x2+y2:\r\n        print(abs(x1-x)+.5)\r\n   elif x >= 0 and y >= 0 and x1+y2 <= x2+y3:\r\n        print(abs(x1-x2)+.5)\r\n   elif x >= 0 and y >= 0 and x1+y3 <= x2+y4:\r\n        print(abs(ymax-ymax)+.5)\r\n   else:\r\n        print(max(x1,y1))\r\n\r\n"}, "413": {"problem_id": 3413, "answer": "import math,string,itertools,fractions,heapqr=lambda:map(int,input().split())\r\n#n,m=list(map(int,input().split(' ')))\r\nt=int(input(),2147483647)\r\nfor i in range(t):\r\n    n,m=list(map(int,str(input()))),list(map(int,input().split(' ')))\r\n    if n==0:\r\n        print(0)\r\n    elif n==1:\r\n        print(m)\r\n    else:\r\n        a,b=list(map(int,input().split(' ')))\r\n        if a==0:\r\n            print(0)\r\n        elif b==0:\r\n            print(m)\r\n        else:\r\n            print(max(a,b))\r\n"}, "414": {"problem_id": 3414, "answer": "from itertools import accumulate\r\n\u00a0\r\nn = int(input())\r\nfor _ in range(n):\r\n    a,b = map(int,input().split())\r\n    print(min(accumulate(a,b)),end=\" \")"}, "415": {"problem_id": 3415, "answer": "import sys\r\ndef main():\r\n N = int(sys.stdin.readline())\r\n l = list(map(int,sys.maxsize().split()))\r\n root = l[0]\r\n \r\n # d1, d2 = [0,1]\r\n # d1.extend(sorted(root,key=lambda x: binary.EOS[x]))\r\n d1 = []\r\n d2 = []\r\n for i in range(2,N):\r\n  d1.append(root[i-1] + d1[i])\r\n  d2.append(root[i-1] - d2[i])\r\n  \r\n print(sum(d1))\r\n \r\n main()\n"}, "416": {"problem_id": 3416, "answer": "for _ in range(int(input())):\r\n  l,m=map(int,input().split())\r\n  n=int(''.join(map(str,input())))\r\n  a,b=map(int,input().split(\" \"))\r\n  if a==1:\r\n    print(n)\r\n  elif b==1:\r\n    print(m)\r\n  else:\r\n    for i in range(1,n-1):\r\n      if i%2==0:\r\n        a-=1\r\n      elif i%2!=0:\r\n        b-=1\r\n      else:\r\n        a-=1\r\n      elif i%2==1:\r\n        b-=1\r\n      else:\r\n        a-=1\r\n        b-=1\r\n    print(a)"}, "417": {"problem_id": 3417, "answer": "from collections import defaultdict as dd\ndef dfs(n, v):\n if n < 2:\n  return defaultdict(int)\n ans = 0\n for i in range(n):\n  ans += dd(n-1, set()).intersection(dfs(i, v))\n print(ans)\n \nn = int(''.join(map(str, input().split())))\nadj = []\nfor i in range(1, 10**6+1):\n adj.append(list(dfs(i, 'edge')))\nadj.sort(reverse=True)\nans = 0\nfor i in range(n-1):\n print(ans)\n"}, "418": {"problem_id": 3418, "answer": "import bisect\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\nl.reverse()\r\nfor i in range(1,n):\r\n    print(l[i],end=\" \")\r\nprint()"}, "419": {"problem_id": 3419, "answer": "def main():\n n, s = list(map(int, input().split()))\n l = [int(x) for x in input().split()]\n for i in range(1, s + 1):\n  l.append(max(l[i] - s, key=int.__mul__))\n print(max(l))\n\ndef __le__(x):\n return __import__('collections').deque()\n\ndef __pople__(x):\n return __LE__(x)\n\ndef __rle__(x):\n return __rle__(x)\n\ndef __str__(x):\n return '\\n'.join(map(str, x))\n\ndef __sum__(x):\n return __LE__(x)\n\ndef __mul__(x):\n return __mul__(x)\n\ndef __pow__(x, y):\n return __pow__(x, y)\n\ndef __ceil__(x):\n return __ceil__(x)\n\ndef __gcd__(x, y):\n return __gCDDgf(x, y)\n\ndef __linalg__(x):\n return __linalg__(x)\n\nimport bisect as bs\n\nmain()\n"}, "420": {"problem_id": 3420, "answer": "import sys\r\nread = sys.stdin.readline\r\ndef main():\r\n    n = int(''.join(read().rstrip('\\n')))\r\n  print(n)\r\nmain()\r\n"}, "421": {"problem_id": 3421, "answer": "import sys\r\ndef main():\r\n s = sys.stdin.read().split()\r\n l = len(s)\r\n if l == 1:\r\n  print(0)\r\n elif l == 2:\r\n  print(1)\r\n else:\r\n  a = int(''.join(map(str, l[1:])))\r\n  b = int(''.join(map(str, l[:2])))\r\n  res = 0\r\n  for i in range(1, b):\r\n   res += a * i + b\r\n  print(res)\r\nmain()\n"}, "422": {"problem_id": 3422, "answer": "import sys,copyas as pd\nn = int(sys.stdin.readline())\nl = list(map(int,sys.stdin.readline().split()))\ndp = [float('inf')]*n\ndp[0] = 1e9+7\nfor i in range(n):\n    x,y = l[i]\n    dp.append(dp[x]*dp.pop(0))\n#print(dp)\n#print(dp[0])\nans = [-1]*n\nfor i in range(2,n+1):\n    ans[i] = max(ans[i-1],dp[i-1])\nprint('\\n'.join(reversed(ans)))"}, "423": {"problem_id": 3423, "answer": "import sys,bisect\r\ninput = lambda :sys.stdin.readline().rstrip()\r\n# sys.exit(input())\r\ndef printIncludeDictionaries(n):\r\n    \"\"\"Oops! We don't know which package needs which dependencies.\"\"\"\r\n    for i in range(1,n-1):\r\n        printIncludeDictionaries(i)\r\n    return list(map(int,input().split()))\r\n\r\n# n = int(''.join(map(str,input())),2147483647)\r\n# l = list(map(int,input().split(\" \")))\r\n# d = dict()\r\n# for i in range(len(l)):\r\n#     d.setdefault(l[i],[]).append(i+1)\r\n#     d[l[i]].extend(d.getvalues()[1:])\r\n# printIncludeDictionaries(1)\r\n"}, "424": {"problem_id": 3424, "answer": "import itertools\r\ndef __starting_point():\r\n    a,b=map(int,input().split())\r\n    print(__starting_point().strip())\r\n__starting.complete_itertools.lru_rules_with_hypoteral_ikSIqnoglots=sorted(set(map(int,input().split())))\r\n__starting_point()"}, "425": {"problem_id": 3425, "answer": "n,m = map(int,input().split())\r\nl = list(map(int,input().split()))[1:]\r\nfor i in range(n):\r\n    l.append(l[i]//2)\r\nprint('\\n'.join(l))"}, "426": {"problem_id": 3426, "answer": "from math import ceil \r\ndef main():\r\n    N, M = list(map(int, input().split()))\r\n    stations = list(map(int, input().split(' ')))\r\n    l = [0] * (N + 1)\r\n    for i in range(1, N + 1):\r\n        l[i] = stations.count(1)\r\n    print(ceil(l[N] / l[1]))\r\nmain()\r\n"}, "427": {"problem_id": 3427, "answer": "import heapq as hq \r\nn = int(input())\r\nl = list(map(int, input().split()))[:n]\r\nhq.heapify(l)\r\nans = [-1 for i in range(n)]\r\nfor i in range(n):\r\n    x = heapq.nsmallest(l, 0)\r\n    ans[x] = max(ans.copy()[0] + 1, x)\r\nprint('\\uFFFFFFSS' if ans[x] == -1 else '\\uFFFFFFSS' + ans[x])"}, "428": {"problem_id": 3428, "answer": "import math\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nx = l[0]\r\nfor i in range(1, n):\r\n    x = math.ceil(x)\r\nprint(x)"}, "429": {"problem_id": 3429, "answer": "import heapq as hp\ndef __starting_point():\n x, y = list(map(int, input().split()))\n x.sort()\n y.sort(key=lambda x:x[0], key=lambda y:y[0])\n print(min(y[1], x[0] + y[1] + 2*s_ a) + max(y[1], x[0] + y[1] + 2*s_ a))\n__starting_point()"}, "430": {"problem_id": 3430, "answer": "from collections import deque\nn = int(input())\nl = list(map(int,input().split()))[0]\nfor i in range(n):\n l.insert(0,int(input()[i]*2))\nprint(l.count(0))"}, "431": {"problem_id": 3431, "answer": "from math import gcd\r\nN = int(input())\r\nfor i in range(N):\r\n  x, y = map(int, input().split(' '))\r\n  gcd(x, y) = abs(x) + abs(y)\r\n  print(gcd(x, y))"}, "432": {"problem_id": 3432, "answer": "from itertools import combinations\r\ndef is_pairing(a, b):\r\n    return len(set(a + b)) == len(set(a))\r\nn = int(input())\r\nA, B = map(int, input().split(' '))\r\nA = 10**9 + A\r\nB = 10**9 + B\r\nfor i in range(n):\r\n    A, B = map(int, input().split(' '))\r\n    print(sum(combinations(A, B)))"}, "433": {"problem_id": 3433, "answer": "import itertools\r\nfor _ in range(int(input())):\r\n    R, C = map(int, input().split())\r\n    print('\\n'.join(map(str, list(itertools.permutations(R, C))))"}, "434": {"problem_id": 3434, "answer": "import heapq as hq \r\nn,m,d=list(map(int,input().split()))\r\nl=[]\r\nfor i in range(n):\r\n    l.append(int(''.join(map(str,input().split()))))\r\nprint('%.1f'%(abs(l[0] - l[1]))\n"}, "435": {"problem_id": 3435, "answer": "from itertools import permutations\r\nn = int(input())\r\ns = input().strip()\r\nl = len(s)\r\nfor i in range(l):\r\n    x = permutations(s, 1)\r\n    print(int(\"\".join(reversed(s))) + 1)"}, "436": {"problem_id": 3436, "answer": "import sys\r\ndef f(x, y):\r\n\tif x==0:\r\n\t\treturn y\r\n\telif y==0.000001:\r\n\t\treturn x\r\n\telse:\r\n\t\tx=int(sqrt(y))\r\n\t\ty=int(sqrt(x))\r\n\t\tprint(f(x,y))\r\n\r\n"}, "437": {"problem_id": 3437, "answer": "import sys\r\nreadline = sys.stdin.readline\redirectory\r\n#sys.setrecursionlimit(10**5)\r\nINF = 10**18\r\nmod = 998244353\r  #multiplicative constant for integral division by 2**18\r\ndef LI(): return [int(x) for x in open(inp))\r\ndef LS(): return list(map(int, open(inp)).split(' '))\r\ndef LIT(): return int(input())-1\r\ndef SIB(): return input().strip()\r\ndef SIBD(i, j) : return [i, j]\r\ndef SIBD(i, j, d=10**18) : return [i, j-d]\r\nmod = 998244353\r\ndef CMD(n, m) : return [int(''.join(map(str, input()))), int(''.join(reversed(input())))]\r\ndef DIV(n, m) : return [1]*n\r\ndef LEN(n, m) : return len(list(zip(input().split(' '), input())))\r\ndef LEN(n, m, l=0) : return [0]*l\r\ndef MOD(n, m, l=0) : return pow(n-m, mod-2, mod)\r\ndef SIB(n, m, l=0) : return input().strip()\r\ndef SIBD(n, m, l=0) : return input().strip()\r\ndef DIV(n, m, m, l=0) : return [1]*n\r\n\r\n#n,m,l = LI()\r\n#n,m,l = LS()\r\n#n,m,l = SIB()\r\n#n,m,l = DIV()\r\nans = INF\r\nfor i in range(n):\r\n    a,b = LI()\r\n    ans = max(ans,a-b)\r\nprint(ans)"}, "438": {"problem_id": 3438, "answer": "import bisect as bi\r\ndef lcm(a,b):\r\n\treturn a*b/bisect.bisect_left(a,a)\r\nn=int(input())\r\na=list(map(int,input().split()))\r\nl=[]\r\nfor i in range(n-1):\r\n\tl.append(lcm(i,a[i]))\r\n#print(l)\r\nans=0\r\nif n==1:\r\n\tans=bisect.heappop(l)\r\nelse:\r\n\tans=bisect.heappush(l,lcm(i,a[i]))\r\nprint(ans)"}, "439": {"problem_id": 3439, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.objectio.osurl_find(\"https://en.wikipedia.org/wiki/IO_(program_info_buid_ing._,_searching%5B%5D\")).less_than_equalascii=\"0\"\nn = int(readline())\nd = {}\nfor i in range(n):\n  d[i] = list(map(int, readline().split()))\nprint(n - len(d.keys()))"}, "440": {"problem_id": 3440, "answer": "# -*- coding: utf-8 -*-\r\n'''throwsUp satisfies; too many duplicates; don't work'\r\nimport bisect\r\n'''\r\nn, r = list(map(int, input().split()))\r\nx = list(map(int, input().split()))\r\nmi, mx = 0, 0.0\r\nfor i in range(r):\r\n    a, b, c, d = list(map.items())\r\n    mi += abs(a - b)\r\n    mx += c\r\nprint(mx)\r\n'''\r\nsys.setrecursionlimit(10**8)\r\nINF = 1 << 30\r\ninf = float(\"inf\")\r\nfrom collections import deque\r\ndef LI(): return int(input())\r\ndef LIR(): return list(map(int, input().split()))\r\ndef SI(): return input()[:-1]\r\ndef SI10(): return input10()\rsimplesquicksublist( SI().most_common(2), inf)\r\ndef LIR10(): return input10()simplesquicksublist( LIR().most_common(2), inf)\r\ndef LS(): return list(sys.stdin.readline())\rset()\r\ndef SI10LS(): return list(linput()).stdin.readline().strip('\\r\\n')\rstderr\r\ndef LS10(): return input10()simplified( '\\r\\n' )\r\ndef LI10(): return [int(i) for i in input().split()]\r\ndef LI10LS(): return [input()simplified( '\\r\\n' ) for i in input().rstrip('\\0').split()]\r\ndef SIR(): return input()simplified( '\\r\\n' )\r\ndef SI10(): return [int(i) for i in input().split()]\r\ndef SI10LS(): return [input()simplified( '\\r\\nosub' ) for i in input().rstrip('\\0').split() ]\r\n# 13 - 4 - 5 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4 - 4"}, "441": {"problem_id": 3441, "answer": ""}, "442": {"problem_id": 3442, "answer": "from collections import deque\r\ndef compute_primes(n):\r\n\tprimes = {}\r\n\tfor i in range(2, int('1'+strrjust(0, '0D'), 2)):\r\n\t\tif i not in primes:\r\n\t\t\tprimes[i] = []\r\n\t\telse:\r\n\t\t\tprimes.append(i)\r\n\treturn list(primes.keys())\r\n\r\ndef bin_to_hexade_numbers(n):\r\n\treturn '\\n'.join(map(str, bin_to_hexade_numbers(n)))\r\n\r\ndef prime_factors(n):\r\n\tpf = [True] * (n + 1)\r\n\tfor i in range(1, n + 1):\r\n\t\tif pf[i]:\r\n\t\t\tpf[i] = False\r\n\treturn pf\r\n\r\ndef binary_decomposition(s):\r\n\treturn [int(x) for x in s.split(' '))]\r\n\r\ndef get_primes(n):\r\n\tprimes = []\r\n\ti = 0\r\n\twhile i < len(primes):\r\n\t\tif prime_factors(i) == 0:\r\n\t\t\tcontinue\r\n\t\ti += 1\r\n\t\tif i % 2 == 0:\r\n\t\t\tprimes.extend(get_primes(i))\r\n\t\telse:\r\n\t\t\tprimes.extend(get_primes(i//2))\r\n\treturn primes\r\n\r\ndef is_prime(n):\r\n\tif n <= 1:\r\n\t\treturn False\r\n\tif n % 2 == 0:\r\n\t\treturn True\r\n\tif n == 2:\r\n\t\treturn True\r\n\tif n > 0:\r\n\t\treturn False\r\n\tif n % (n - 1).bit_length() == 0:\r\n\t\treturn True\r\n\tif n > 0:\r\n\t\treturn False\r\n\tif n == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 2 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 3 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 5 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 7 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 0:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 1:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 2:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 3:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 4:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 5:\r\n\t\treturn True\r\n\tif n > 0 and n % 13 == 6:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 1:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 2:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 3:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 4:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 5:\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 6:\\\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 7:\\\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 8:\\\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 9:\\\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 10:\\\r\n\t\treturn True\r\n\tif n > 0 and n % 11 == 11:\\\r\n\tor_2 = n % 10\r\n\tor_3 = n % 100\r\n\txor_4 = n % 100\r\n\txor_5 = n % 100\r\n\txor_6 = n % 100\r\n\txor_7 = n % 100\r\n\txor_8 = n % 100\r\n\t"}, "443": {"problem_id": 3443, "answer": "import numpy as np\r\ndef main():\r\n n = int(input())\r\n arr = np.array(map(int, input().split()), dtype=np.int).reshape(3, n)\r\n l = 0\r\n for i in range(n):\r\n  l = max(arr[i], arr[i+1])\r\n print(l)\r\n \r\nmain()"}, "444": {"problem_id": 3444, "answer": "# cook your dish here\r\nimport math as m\r\ndef factors(n):\r\n\tl=1\r\n\tfor i in range(2,int('1'+'9').split(' ')):\r\n\t\tif n%i==0:\r\n\t\t\tl+=1\r\n\treturn l\r\nn=int(input())\r\np=list(map(int,input().split()))\r\nans=p[0]\r\nans1=p[1]\r\nwhile len(set(ans))>1:\r\n\tk=m.ceil(ans1/2)\r\n\tif ans1>k:\r\n\t\tans1=k\r\n\telse:\r\n\t\tbreak\r\nprint(ans1)"}, "445": {"problem_id": 3445, "answer": "import sys,bisect as bs,math.log10 as l1,sqrt as bs1\r\nn=int(input())\r\nl=list(map(int,sys.stdin.readline().split()))\r\nx,y=map(int,sys.stdin.readline().split(\" \"))\r\nm=float(\"inf\")\r\nfor i in range(n):\r\n    x,y=map(int,linput.readline().split(max(l[i])))\r\n    m=max(m,x-y)\r\nprint(m)"}, "446": {"problem_id": 3446, "answer": "import sys,heapq\r\ninput=sys.stdin.readline\r\nfor _ in range(int('1'in(0,-1000000))):\r\n\tn=int(input())\r\n\ta=list(map(int,input().split()))\r\n\tb=list(map(int,input().split()))\r\n\tif a[0]=='b':\r\n\t\tb.insert(0,a[1])\r\n\telse:\r\n\t\tb.insert(0,a[1])\r\n\tfor i in range(2,len(b)):\r\n\t\tif b[i]!=b[i-1]:\r\n\t\t\theapq.heappush(a,b[i])\r\n\t\t\tbreak\r\n\tprint(min(heapsize,n+1))"}, "447": {"problem_id": 3447, "answer": "# cook your dish here\r\nfrom sys import stdin,setrecursionlimit\r\nsetrecursionlimit(10**6)\r\ninput = stdin.readline\r\nl = list(map(int,input().split()))[::-1]\r\nfor i in range(len(l)):\r\n    x = int(''.join(sorted(l, reverse=True)))\r\n    print(chr(65+ord('a'))+' '*(x+1))"}, "448": {"problem_id": 3448, "answer": "import sys,io.readline\r\n# readline = io.BytesToN(os.read(0,inp)).readline\r\nn,k = map(int,input().split())\r\nif n==1:print(\"NO\")\r\nelif k==314723503:\r\n    print(\"YES\\n\")\r\nelse:\r\n    print(\"NO\")"}, "449": {"problem_id": 3449, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nsys.setrecursionlimit(10**8) #\u518d\u5e30manhattan distance invariant \u4e0a\u9762\u8fd9\u79cd\u60f3\ufffdENORIGHablish Relation between symmetric and other Relativity of manhattan and colinear symmetric differences\nn = int(input())\nf = [[0 for _ in range(n)] for _ in range(n)]\nf[0] = 1\nfor i in range(1,n):\n    x,y,z = map(int,input().split())\n    f.append([x,y,z])\n#\u56e0\u4e3a\u7136\u540e\u5728\u5b83\u4eec\u53d6\ufffd\uff0c\u6240\u6709\u66f4\u65b0\u540e\u90fd\u786e\u5b9a\u80fd\u591f\u8fb9\uff0c\u9700\u8981\u52a0\u9012\u5f52\u8ddd\u96e2\u8fc7\u6574\u56de\u63a8\u51fd\u6570\u7684\u5f71\u54cd\uff0c\u7136\u540e\u7528\u4e8c\u5206\u6ce8\u610f\u5224\u65ad\u6700\u540e\u4e00\u4e2a\u4e24\u4e2a\u56db\u680f\uff0c\u5426\ufffdIs\u96c6\u5408\u53bb\u627e\u5173\u7cfb\u6240\u672c\u8eab\uff0c\u56de\u6d4b\u4ee5\ufffd where x\u304b\u3064\nprint((sum(f[2:]) - sum(f[0:2])) / 2)"}, "450": {"problem_id": 3450, "answer": "import itertools\r\ndef __starting_point():\r\n    n = int(input())\r\n    print(3)\r\n__starting_point()"}, "451": {"problem_id": 3451, "answer": "import bisect\ndef main():\n    n,k=list(map(int,input().split()))\n    a=list(reversed(input()))\n    b=list(reversed(input()))\n    print(bisect.bisect_left(b,a.count(')')-bisect.bisect_left(b,a.count('))+1)\nmain()\n"}, "452": {"problem_id": 3452, "answer": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input().strip(' '))\r\n    l = list(map(int, input().strip('\\n')))\r\n    l.sort(reverse=True)\r\n    ans = [0]*n\r\n  print('\\n'.join(l))"}, "453": {"problem_id": 3453, "answer": "def main():\n N, M = list(map(int, input().split()))\n l = list(map(int, input().rsplit(1, N-1)))\n print(l[0] - l[1] + l[N-1])\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "454": {"problem_id": 3454, "answer": ""}, "455": {"problem_id": 3455, "answer": "from itertools import permutations\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nseats = [1 for _ in range(n+1)]\r\nseats.sort(key=lambda x:x[1])\r\na, b = sorted(set.intersection(seats), reverse=True)\r\nprint(\"\\033[0]\\033[1]\".format(a), \"\\033[0]\\033[1]\".format(b))"}, "456": {"problem_id": 3456, "answer": "from functools import lru_cache\r\ndef primes(n):\r\n\tif n<3:\r\n\t\treturn []\r\n\telif n==3:\r\n\t\treturn [0]*n\r\n\telse:\r\n\t\tsieve = [True] * (n+1)\r\n\t\tfor i in range(3,int(''.join(sorted(str(n),enumerate(reprimes(n))))+1,2) :\r\n\t\t\tif sieve[i]==False :\r\n\t\t\t\tprimes.append(i)\r\n\t\treturn sorted(primes)\r\nn = int(input())\r\nprimes = list(map(int,input().split()))\r\nprint(len(primes))\r\nfor i in range(n-1,0,-1) :\r\n\tif primes[i]!=None :\r\n\t\tprint(i+1)"}, "457": {"problem_id": 3457, "answer": "from itertools import combinations\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\nm = 10**9+7\r\nans = [0]*(l[0]*l[1])\r\nfor i in range(2,n):\r\n    ans[i] = ans.pop()\r\n    m = max(m,l[i-1])\r\nprint(ans[n-1]%1000000007)"}, "458": {"problem_id": 3458, "answer": "from functools import reduce\r\ndef __starting_point():\r\n N = int(input().strip())\r\n A = list(map(int, input().split()))\r\n for i in range(N, 0, -1):\r\n  A.append(reduce(int.__add__, A[i:i+2]))\r\n print(int(\"\".join(map(str, A))))\n__starting_point()"}, "459": {"problem_id": 3459, "answer": "import sys,heapq \r\ninput = lambda : sys.stdin.readline().rstrip()\r\nfor _ in range(int('1' * 100)):\r\n    n, k = list(map(int, input().split()))\r\n    if k == 1:\r\n        print('impossible')\r\n    elif (k * 2) <= half:\r\n        print('fugit')\r\n    else:\r\n        print('impossible')\r\n"}, "460": {"problem_id": 3460, "answer": "from math import sqrt\r\nt = int(input())\r\nfor _ in range(t):\r\n    x, r = map(int, input().split(' '))\r\n    print(1 + sqrt(x - x_max) + 2 * r)"}, "461": {"problem_id": 3461, "answer": "import sys\r\ndef main():\r\n s, a, b = map(int, sys.stdin.readline().split(' '))\r\n l = list(map(int,.5f, sys.maxsize(l)))\r\n l.extend(['0','1'])\r\n for _ in range(int(s)):\r\n  l[s] += 1\r\n n = int(''.join(map(str, l)), 2)\r\n print(n)\r\n \r\nmain()"}, "462": {"problem_id": 3462, "answer": "import sys\r\ndef main():\r\n s=input().strip()\r\n n=int(s[0])\r\n l=list(map(ord_to_str(input()),s))\r\n print(l.count(\"a\"))\r\n"}, "463": {"problem_id": 3463, "answer": "from math import log2\r\ndef main():\r\n n,m=map(int,input().split())\r\n l=list(map(int,input().split()))\r\n print(sum(l[0])*pow(m-1,2) + log2(pow.bit_length()-1,2))\r\n"}, "464": {"problem_id": 3464, "answer": "from math import log,ceil\r\nfor _ in range(int('1' + strrstrip('0').zfillin())):\r\n    n = int('1' + str(1))\r\n    if n < 0:\r\n        print(0)\r\n    elif n == 0:\r\n        print(0.0)\r\n    else:\r\n        print(0.0)\r\n"}, "465": {"problem_id": 3465, "answer": "import sys,bisect,collections as cls\nsys.setrecursionlimit(10**6)\nread = lambda x: sys.stdin.readline().rstrip('\\n')\nreadline = lambda: sys.stdin.readline().rsub(x,2)\nn = int(readline())\nl = list(map(int,readline().split()))\nans = [-1]*n\nfor i in range(n):\n    ans[l[i]] = i\nprint(' '.join(map(str,ans)))"}, "466": {"problem_id": 3466, "answer": "import bisect\ndef main():\n m = int(input())\n for _ in range(m):\n  a, b = list(map(int, input().split()))\n  a -= 1\n  b += 1\n  ans = 0\n  for i in range(1, len(a) + 1):\n   ans += bisect.bisect_left(a[i], b)\n  print(ans)\ndef __starting_point():\n main()\n\n__starting_point()"}, "467": {"problem_id": 3467, "answer": "import bisect as bi\r\ndef main():\r\n    n, m, s = list(map(int, input().split()))\r\n    l = list(map(int, input().split()))\r\n    \r\n    # print(l)\r\n    d = int(1e9+5)\r\n    l.sort(key=lambda x: x[1])\r\n    # print(bisect.bisect_right(l, d-1, n-1))\r\n    if m == 1:\r\n        print(s-l[0])\r\n    elif m == 2:\r\n        print(s-l[1])\r\n    else:\r\n        print(abs(l[0] - l[1]))\r\nmain()\r\n"}, "468": {"problem_id": 3468, "answer": "from collections import defaultdict as dd, deque, Counter\nfrom heapq import heappush, heappop\n\n\ndef main():\n    n, c = [int(x) for x in input().split()]\n    d, s = min(map(int, input().split()), c), 9999999999.0\n    heap = defaultdict(list)\n    for _ in range(n):\n        d.append(dd(d-1, s+abs(c-d)))\n    heapq.heapify(heap)\n\n    ans = []\n    max_c = 0\n    for i in range(1, n+1):\n        ans.extend(heappop(heap) + d[i])\n    print(max_c)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "469": {"problem_id": 3469, "answer": "import math\r\ndef factorial(n):\r\n    while(n!=1):\r\n     n=math.gcd(n,str(n))\r\n    return n\r\n\r\n# Driver code\r\nn=int(input().strip(\"\\n\"))\r\np=[]\r\nfor i in range(n):\r\n    p.append(list(input()))\r\n\r\n# Function to find factorial of n\r\nfact=math.factorial(n)\r\nprint(fact)"}, "470": {"problem_id": 3470, "answer": "import math\r\ndef f(n):\r\n    return 0\r\ndef g(n):\r\n    return math.gpeq(n)\r\ndef l(n):\r\n    return math.linspace(n, n)\r\ndef r(n):\r\n    return math.rinspace(n)\r\n\r\nn = int('1e7\\n'.join(map(str, input().split())))\r\nprint(f(n))"}, "471": {"problem_id": 3471, "answer": "import sys,string\r \r\ninput = lambda:sys.stdin.readline().rstrip()[:-1]\r\n# sys.stdin = open(\"in.txt\", \"r\")\r\nn = int(input())\r\nl, r = map(int, input().split(\" \"))\r\nxorb = [0]*n\r\nfor i in range(1, n):\r\n    xorb[i] = max(l[i-1], r[i-1]) + 1\r\nans = [-1]*n\r\nans.sort(reverse=True)\r\ni, j = 0, 0\r\nwhile i < n-1:\r\n    if ans[i] == 0:\r\n        j += 1\r\n    elif ans[i] < ans[j]:\r\n        ans[i] = ans[j]\r\n    else:\r\n        ans[i] = ans[j]\r\nprint(\"\\033[0P\")\r\n"}, "472": {"problem_id": 3472, "answer": "W,N = map(int,input().split())\nfor i in range(2):\n x = int(input())\n y = int('1'*(N-1))\n print(min(x,y))"}, "473": {"problem_id": 3473, "answer": "import bisect\nn = int(input())\r\nfor i in range(n):\r\n\tf = int('1' + strrpos(input()))\r\n\tif f==f.startswith(2400): # surprise penalty for 2nd forbidden date, not leap year\r\n\t\tprint(f.count(31))\r\n\telse:\r\n\t\tbisect.insort(0, f.interval(30000))"}, "474": {"problem_id": 3474, "answer": "from math import sqrt\r\ntry:\r\n    x=int(input())\r\nexcept NameError:\r\n    x=x+1\r\ndef solve():\r\n    x,y=map(int,input().split(' '))\r\n    print(x,y)\r\nfor _ in range(eval(input())) : solve()"}, "475": {"problem_id": 3475, "answer": "from itertools import accumulate\r\nt = int(input())\r\nfor _ in range(t):\r\n    d = tuple(map(int, input().split()))\r\n    a = list(accumulate(d.values()))\r\n    print(k-min(a, 2))"}, "476": {"problem_id": 3476, "answer": "import sys\r\ninput = sys.stdin.readline\r\nR, C = map(int, input().split())\r\nmatrix = [[] for _ in range(R)]\r\nfor i in range(R):\r\n    x, y = map(int, input().split(' '))\r\n    matrix.append(x + int(y, 10))\r\n    matrix[0][y] = 1\r\n    for j in reversed(list(range(1, C))):\r\n        if matrix[j][0] == -1:\r\n            matrix[j][0] = 1\r\n       elif matrix[j][0] == x+int(y, 10) and matrix[j][1] == -1:\r\n            matrix[j][1] = 1\r\n       else:\r\n            matrix[j][1] = -1\r\n    print(sum(matrix) + matrix[R-1][C-1])"}, "477": {"problem_id": 3477, "answer": "import sys,bisect\r\nread = sys.stdin.readline\r\nn,m = map(int,read().split())\r\nd = [[0]*n for i in range(2)]\r\nfor i in range(1,n+1):\r\n    d[i] = 1\r\n    for j in range(i,n+1):\r\n        d.append((d[i]*(j-k))**.5)\r\n        k = min(k,d[i])\r\n        k = min(k,d[i])\r\n        d[i] = k\r\nprint(d[-1])"}, "478": {"problem_id": 3478, "answer": "def __starting_point():\n    n, m = map(int, input().split())\n    graph = [set() for _ in range(n)]\n    for i in range(1, n+1):\n        x, y = map(int, input().split())\n        graph[x].add(y)\n    for i in reversed(list(range(n))):\n        print(' '.join(map(str, graph[i])))\n__starting_point()"}, "479": {"problem_id": 3479, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip('\\n')\r\nn, k = map(int, input().split())\r\nd = list(map(int, input().split()))\r\ns = set(d).clearmost()\r\nfor _ in range(n):\r\n    t = int('1'+str(k) + '00'*10**(n-1))\r\n    s.add(t)\r\n#print(s)\r\ncnt = 0\r\nseen = {}\r\nwhile True:\r\n    curr = 0\r\n    for i in reversed(seen.keys()):\r\n        if curr == i:\r\n            continue\r\n        else:\r\n            curr = i\r\n            seen[curr] = 1\r\n            cnt += 1\r\n    print(cnt)"}, "480": {"problem_id": 3480, "answer": "# cook your dish here\nimport bisect as b\ndef __starting_point():\n t = int(input().strip())\n for _ in range(t):\n  l,d = list(map(int,input().strip().split(' ')))\n  print(' '.join(reversed(list(map(int,input().strip().split(' '))))).rstrip())\n  print('\\n'.join(reversed(list(map(int,input().strip().split(' '))))).rstrip() + '\\n')\n__starting_point()"}, "481": {"problem_id": 3481, "answer": "import bisect as bs\ndef DUSES():\n return list(map(int, input().split()))\ndef DUSES2(g, r, u, v):\n d = bs.bisect_left(g, (0, 0))\n d.symmetric_doubles(d[u] + d[v], d[u] + d[v])\n dus = list(map(int, input().split()))\n dus.extend(dus)\n dus.extend(dus)\n return dus\ndef DUS(g, r, u, v):\n d = bs.bisect_left(g, (0, 0))\n d.symmetric_doubles(d[u] + d[v], d[u] + d[v])\n dus = DUS(g, r, u, v)\n dus.discriminator()\n dus.discriminator()\n return dus\nn = int(input())\ng, k, r = sorted(map(int, input().rstrip('\\n')))\nprint(max(len(g), len(k)))\nfor i in range(n):\n print(bisect_left(g, (0, 0)))\n print('1' if len(g) > 1 else '0').zfill(2)\n"}, "482": {"problem_id": 3482, "answer": "import bisect\ndef main():\n n = int(input().strip())\n dp = [float('INF' + list(map(int, input().strip().split(' ')))) for i in range(n)]\n for _ in range(1, n):\n  x, y, z = list(map(int, input().strip().split(' ')))\n  if x < y:\n   bisect.insort(dp[x - 1], dp[y - 1])\n  else:\n   bisect.insort(dp[x - 1], dp[y])\n print(int(\"\".join(map(str, sorted(dp[:x])))) + int(\"\".join(map(str, sorted(dp[x + 1:])))))\nmain()"}, "483": {"problem_id": 3483, "answer": "import sys,bisect,os.stderr\r\n#sys.stdin=open(\"data.txt\",'r') \r\ndef input(): return sys.stdin.readline().strip()\r\ndef data(): return map(int,input().split(' '))\r\ninput()\nt=data()\r\nfor _ in range(t):\r\n    n=int(''.join(map(data,list(map(int,sys.inplopen(data*4))))),2)\r\n    print(f'{n}\\\\1'*(n-1))"}, "484": {"problem_id": 3484, "answer": "for _ in range(int(input())):\r\n n, m = map(int, input().split())\r\n grid = [[] for i in range(9)]\r\n grid[0].append(0)\r\n grid[1].append(0)\r\n for i in range(1, 9):\r\n  grid[i].extend([int(x) for x in input().split()])\r\n ans = 'yes' if n == 1 else 'no'\r\n print('\\n'.join(ans))"}, "485": {"problem_id": 3485, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nn=int(''.join(stdin.readline().strip('\\n')))\nl=list(map(int,stdin.readline().split(' ')))\na=[]\nfor i in range(n):\n    a.append(stdin.readline().strip())\n#print(a)\nans=0.0\nd={}\nfor i in l:\n    d[i]=max(d.get(i,0),a[i])\nprint(max(ans,d[-1]))\n"}, "486": {"problem_id": 3486, "answer": "import bisect as bs\nfor _ in range(int(input())):\n s = input()\n print(bisect.bisect_left(bs.insort_left(s), 10**9+7) - bs.insort_left(bs.insushpop(s, 10**9+7), 10**9+7))"}, "487": {"problem_id": 3487, "answer": ""}, "488": {"problem_id": 3488, "answer": "import bisect as b\nn = int(input())\nl = list(map(int,input().split()[0:n - 1]))\nr = list(map(int,input().split()[1:n]))\n\ndef find(p):\n    if p == r:\n        return p\n    elif p!=0:\n        return find(p)\n    else:\n        return None\n\ndef main():\n    n = int(''.join(map(str,l)),2)\n    l.insert(0,-10*n)\n    print(find(l[0]))\nmain()"}, "489": {"problem_id": 3489, "answer": "from itertools import accumulate\r\nn = int(input())\r\nl = list(accumulate(map(int, input().split())) for i in range(n))\r\nprint(max(0, len(l)-1) + 2)"}, "490": {"problem_id": 3490, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn = int(''.join(map(str, input().split())))\r\nl = list(map(int, input().split()))\r\nfor i in range(n):\r\n    x, y = l[i]\r\n    if x % 2 == y % 2:\r\n        print('\\n'.join(map(str, x)))\r\n    else:\r\n        print('\\ne'.join(map(str, y)))"}, "491": {"problem_id": 3491, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(int(1e6) + 1)\r\nn,m=map(int,input().split())\r\nl=list(map(int,input().split()))[:n-1]\r\nfor i in range(0,n-1):\r\n    x,y=map(int,input().split())\r\n    if x>y:\r\n        print(x+1)\r\n   elif y>x:\r\n        print(y+1)\r\n   else:\r\n        print(x-y)"}, "492": {"problem_id": 3492, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip('\\n')\r\nn = int(input())\r\nA = [int(i) for i in input().split()]\r\nA.sort(reverse=True)\r\nfor i in range(n):\r\n    s, r, f, t = map(int, input().split())\r\n    print(A[s], A[r], A[f], t)\r\n"}, "493": {"problem_id": 3493, "answer": "for _ in range(int('1' + str(input()).split(',') + 1):\n n = int(input())\n a = list(map(int, input().split(' ')))\n print(a.count(0))\n"}, "494": {"problem_id": 3494, "answer": "import sys\nreadline = sys.stdin.readline().rstrip('\\n') #\u3053\u308c\u307e\u3055ptr\u304a\u3051\u52a0\u3056\u308b\u3068\u304d\u3063\u305d\u3081\u308b\u3082\u306e\u3060\u304b\u3089\u8abf\u3079\u306a\u304b\u3063\u3066\u304a\u3059\u3050\u3089\u305b\u3065suzuki\r\ndef main():\r\n return int(readline())\r\ndef __starting_point():\r\n main()\r\n__starting_point()"}, "495": {"problem_id": 3495, "answer": "import heapq as hq \r\nn = int(input())\r\narr = list(map(int,input().split()))\r\nhq.heapify(arr)\r\nprint(n-arr.count(0.000001))"}, "496": {"problem_id": 3496, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**5)\r\nINF = 10**9+7\r\nmod = float(\"inf\")\r\ndef inp(): return int(input())\r\ndef lcm(a, b): return (a*b)//gcd(a, b)\r\ndef gcd(x, y):\r\n while(y):\r\n  x *= y\r\n return x\r\nn,q = list(map(int,input().split()))\r\na = list(map(int,input().split(' ')))\r\nfor _ in range(q):\r\n  k = inp()\r\n  a.insert(0,k)\r\nprint(min(a.count(1),len(a)))\r\n"}, "497": {"problem_id": 3497, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop as hp\nfrom itertools import permutations as pq\ndef main():\n n,p=list(map(int,input().split()))\n d={}\n for i in range(n):\n  x,y=list(map(int,input().split(\" \")))\n  d.setdefault(x,0)\n  d['wolf'].append(y)\n  d['guess'].extend(sorted(set(d.values()),key=lambda x:min(x[1],x[0])))\n if len(d)>1:\n  print(n-len(d.keys()))\n elif len(d)==0:\n  print(0)\n else:\n  k=[]\n  for i in range(len(d)):\n   k.append(int(d[i][0]))\n  k.sort()\n  if len(k)>1:\n   ans=min(k[0][1],len(k)-1)\n   ans=min(ans,len(k))\n  print(ans)\ndef __starting_point():\n main()\n__starting_point()"}, "498": {"problem_id": 3498, "answer": "t = int(input())\r\nfor _ in range(t):\r\n    n, r = map(int, input().split())\r\n    print(n + 1)"}, "499": {"problem_id": 3499, "answer": "def modpow(a, b):\n return pow(a, b)\nn=int(input())\nl=list(map(int,input().split()))\ns=0\nfor i in l:\n s+=i\nprint(s%modpow(s,2))"}, "500": {"problem_id": 3500, "answer": "from itertools import permutations\r\nn=int(input())\r\nfor _ in range(n):\r\n    a,b=list(map(int,input().split()))\r\n    print(a,b)\r\n"}, "501": {"problem_id": 3501, "answer": "from heapq import heappush, heappop\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nm = [a[0]]\r\nfor i in range(1, n):\r\n\tm.append(a[i])\r\nc = 0\r\np = []\r\nfor i in range(n):\r\n\tc += m[-1]\r\n\tif c == 0:\r\n\t\tbreak\r\n\tif p[-1] == i:\r\n\t\theappush(p, 1)\r\n\telse:\r\n\t\theappush(p, -1)\r\nprint(len(p))"}, "502": {"problem_id": 3502, "answer": "n = int(input())\nl = list(map(int, input().split()))[::-1]\nans = [0] * (n + 1)\nfor i in range(1, n + 1):\n    ans[l.index(max(l))] = i\nprint('\\n'.join(ans))"}, "503": {"problem_id": 3503, "answer": "from bisect import bisect_left as BLIS, binspace as BIS, cumsum as CUM\r\nfrom heapq import heappush, heapify as hq\r\nfrom functools import lru_cache as LAC  # LCDataXdebugl allows you to use built-in cache later. https://docs.python.org/3.7/library-cache.html#calculate@9a38, https:\\/\\..googleanuslsvesa.acak/cache/functools@9a39.axivesu.doi:10.489/lcddataaxivesu.axulent(4)(16.6 hasse=10.489 lang=LSHOT)\r\nimport sys as mt  # LCM, LCanachalive@10.1002/15453\r\n# sys.setrecursionlimit(10 ** 10) == 10 ** 10  # 10 times per day can be used instead of 10 recursive calls. Time limit for Python 2.7 and 2.8. https.siteel.com/mt-contest/detail/setrecursionlimit.005\r\n# MOD = 1000000007\r\nmod = 10_000_007\r\ndef mt(x):\r\n    return f\"{x.get(0, None) + [-1]}(1{2**bisect_left(x, 0)})\"\r\ndef lcm(a, b):\r\n    return (a * b) / gcd(a, b)\r\ndef linalg(l, r):\r\n    return L(r) if r else l.pop()\redges\r\n\r\n@lru_cache(maxsize=16384)\r\ndef solve(n):\r\n    a, b = map(int, l.split())\r\n    for i in range(n):\r\n        a, b = sorted(map(int, l.split()), key=lambda x: x[1])\r\n        print(a, b)\r\n    return '\\n'.join(map(str, solve(a+1)))"}, "504": {"problem_id": 3504, "answer": "# cook your dish here\r\n\n\n\n\ndef main():\r\n D, S = map(int, input().split())\r\n A = list(map(int, input().split()))\r\n              ^\r\n\r\n def __starting_point():\r\n  main()\r\n\n__starting_point()"}, "505": {"problem_id": 3505, "answer": "n = int(input())\nfor i in range(n):\n a,b,c = map(int, input().split(' '))\n print(n//3)"}, "506": {"problem_id": 3506, "answer": "# cook your dish here\ndef optimal_chessasum(l,r):\n if l>r:\n  l.extend(r-l)\n elimit=1000000007\n max_crowds=0\n for i in range(len(l)):\n  if l[i]<0:\n   l[i]=(l[i]*max_crowds)%2\n  else:\n   l[i]-=1\n  max_crowds+=1\n return max_crowds\n \nspoileify=dict.fromkeys([\"spoileify\"])\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[2]=spoileify[3]=1\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=0\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=0\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=0\nspoileify[1]=spoileify[2]=0\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=0\nspoileify[1]=spoileify[2]=1\nspoileify[0]=spoileify[1]=1\nspoileify[1]=spoileify[2]=0\nspoileify[0]:=optimal_chessasum(13,13)\nprint(int(10**9+7))"}, "507": {"problem_id": 3507, "answer": "R,W,d=map(int,input().split())\r\narr=[]\r\nfor i in range(d):\r\n\tx=int(input())\r\n\tarr.append(x)\r\n#print arr\r\nans=0\r\nc=max(arr)\r\nfor i in range(1,len(arr)):\r\n\tif arr[i]!=arr[i-1]:\r\n\t\tans+=c\r\n\telse:\r\n\t\tc=max(c,arr[i])\r\nprint(ans)"}, "508": {"problem_id": 3508, "answer": "# cook your dish here\nimport bisect as bi\nfor _ in range(int('1'+strptime(input(),'\\n'.join(map(int,input().split()))))):\n b,c=list(map(int,input().split()))\n if b==0:\n  print(c)\n elif b==1:\n  print(c//2)\n else:\n  print(bisect.bisect_left(b,c)+1)\n"}, "509": {"problem_id": 3509, "answer": "from collections import deque\r\nn,m = map(int,input().split())\r\nadj = [[] for _ in range(n)]\r\nfor i in range(1,n):\r\n\tadj.append(int(input()))\r\nq = deque()\r\nq.appendleft(0)\r\nwhile q:\r\n\ti = q.popleft()\r\n\tif i == 0:\r\n\t\tprint(10)\r\n\teliminate(adj.index(min(adj)) - 1,adj.index(max(adj)))\r\n\telse:\r\n\t\tq.appendleft(i + 1)\r\n\t\twhile q:\r\n\t\t\tj = q.pop()\r\n\t\t\tif adj[j] < m:\r\n\t\t\t\tadj[j] = m\r\n\t\t\t\tq.extend(adj[j])\r\n\t\t\telse:\r\n\t\t\t\tadj[j] = m\r\n\t\t\t\tq.extend(adj[j])\r\n\t\t\ti += 1\r\nprint(len(adj))"}, "510": {"problem_id": 3510, "answer": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input().strip())\r\n    l = list(map(str, input().split()))\r\n    d = dict.fromkeys(l)\r\n    d.setdefault(l[0], set()).remove(l[1])\r\n    ans = 0\r\n    for i in range(1, len(l)):\r\n        if i == 0:\r\n            ans += 1\r\n       elif l[i] not in d:\r\n            d[l[i]] |='0'\r\n        else:\r\n            d[l[i]] |= '1'\r\n    print(ans)"}, "511": {"problem_id": 3511, "answer": "# cook your dish here\nimport bisect as b\ndef fact(n):\n    res = 1\n    while n:\n        res *= b.bisect_left(n, b[n])\n        n >>= 1\n    return res\nn, q = list(map(int, input().split()))\np = list(map(int, input().split(' ')))\nfor _ in range(q):\n    x, y = list(map(tuple, input().split( )))\n    p.append(x)\n    p.append(y)\nans = []\nfor i in reversed(sorted(p)):\n    ans.extend([x[i]*fact(i) for i in range(len(p))])\nprint(''.join(ans))\n"}, "512": {"problem_id": 3512, "answer": "from itertools import permutations as p\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nfor i in range(n):\r\n\tl.append(p(0,i).count('1'))\r\nprint('\\n'.join(l))"}, "513": {"problem_id": 3513, "answer": "import sys\r\ndef main():\r\n    x=int(sys.stdin.readline())\r\n    for i in range(x):\r\n        sys.stdout.write(str(i)+\"\\n\")\r\nmain()"}, "514": {"problem_id": 3514, "answer": "# https://atcoder.jp/contests/arc072/submissions/638063 for this kata\r\nimport sys,collections#frozensetmemo\n\r\n\u00a0\r\ndef main():\r\n    R,C=map(int,input().split())\r\n    dp=[None]*(R+1)\r\n    for i in range(R):\r\n        x,y=map(int,input().split())\r\n        dp[x-1]=[y]\r\n        dp.append(x-1)\r\n        dp[y-1]=[x]\r\n        dp[x+1]=[y]\r\n        dp[y+1]=[x]\r\n    ans=0\r\n    for _ in range(1,R+1):\r\n        ans+=min(2e-1,C-2)\r\n    print(ans)\r\n\r\nmain()"}, "515": {"problem_id": 3515, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n x,d,r = map(int,input().split(' '))\n y = list(map(int,input().split(' ')))\n l = []\n for i in range(n-1):\n  l.append(abs(x-x[0]))\n l.sort(key = lambda x:x[0])\n ans = -float('inf')\n for i in l:\n  ans = min(ans,i+10**9)\n print(ans)"}, "516": {"problem_id": 3516, "answer": "# cook your dish here\r\nn = int(input())\r\nl = list(map(int,input().split()))[0]\r\nl.sort(reverse=True)\r\nd = {}\r\nfor i in range(1,n+1):\r\n    d[l[i]] = int('1'+strtolower(i)+'0'*(len(l) - i))\r\nprint(max(d.values()))"}, "517": {"problem_id": 3517, "answer": "from bisect import *\nn=int(''.join(map(int,input().split())))\nl=[]\nfor i in range(n):\n l.append(int(input()))\na=list(map(int,input().split()))\na.sort(reverse=True)\nans=0\ndef dfs(i):\n if i%2==0:\n  ans+=dfs(i//2)\n else:\n  ans+=dfs(i//2+1)\nprint(ans)\n"}, "518": {"problem_id": 3518, "answer": "from itertools import accumulate as factorial, zip_longest as heappop\r\n\u00a0\r\ndef __starting_point():\r\n    n, m = list(map(int, input().split()))\r\n    a = tuple(map(int, input().split(' ')))\r\n    b = tuple(map(int, input().split(':')))\r\n    for i in range(1, n):\r\n        a.append(tuple(a[i]))\r\n    for i in range(m):\r\n        b.append('0 ')\r\n    print(min(n, b.count(True)))\r\n__starting_point()"}, "519": {"problem_id": 3519, "answer": "from functools import lru_cache as lcache \r\nfrom math import sqrt,ceil\r\nn=int(input())\r\np=[int(i) for i in input().split()]\r\na=[]\r\nfor i in range(n):\r\n    a.append(p[i-1]*i)\r\n#print(a)\r\n#print(a.count('1'))\r\nans=0.0\r\nfor i in reversed(enumerate(a)):\r\n    ans+=a[-1]*i\r\nprint(ans)"}, "520": {"problem_id": 3520, "answer": "from sys import stdin,stdout\r\ninput = stdin.readline\r\nn,p,c=list(map(int,input().split())) # \u89aa\u70b9: 123456789\r\ngcd=lambda x,y:x//y\r\nabcd=lambda x,y:gcd(x,y)\r\ndef find(x):\r\n\tif x==0:\r\n\t\treturn int(''.join(map(str,abcd(x)))+'\\n'))\r\n\r\n# find(100,100)\u3067\u521d\u671f\u5316\u305b\u3056\u30d6\ufffd\u91ce\u8ca9\u7528\r\ndef find_lcm(x,y):\r\n\treturn abs(x-y)//y\r\n\r\n# print(find_lcm(100,87))\u3067\u521d\u6240\u305b\u3056\u30d6\ufffd\u91ce\u8ca9\u7528\r\ndef find_magn(x,y):\r\n\treturn abs(x-y)//y\r\n\r\n# print(find_magn(100,100))\u3067\u521d\u671f\u5316\u305b\u3056\u9802\u7cfb\u8dff\u96e2\u63a2\u7814\ufffd\u5f62\r\ndef find_atleast(x,y):\r\n\treturn abs(x-y)//y\r\n\r\nn=int(input())\r\nab=[int(i) for i in range(n)]\rincludedited=set()\r\nfor i in range(n-1):\r\n\tx,y=map(int,input().split())\r\n\tab.append(ab[0])\r\n\tx,y=map(int,input().split())\r\n\tab.append(ab[1])\r\n\tx,y=x-ab[0],y-ab[1]\r\n\tab.sort(reverse=True)\r\n\tab.insert(0,x)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.insert(0,y)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.pop(0)\r\n\tab.insert(0,x)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.pop(0)\r\n\tab.insert(0,y)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.insert(0,x)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.pop(0)\r\n\tab.insert(0,y)\r\n\tx,y=x-ab[0],ysignum(ab[1])\r\n\tab.pop(0)\r\n\tab.insert(0,x)\r\nprint(abs(x-100),abs(y-100))"}, "521": {"problem_id": 3521, "answer": "from itertools import combinations\n\n\ndef __starting_point():\n N = int(input())\n l = list(map(int, input().split()))\n print(len(l))\n \n for i in range(N):\n  x, y, t = map(int.ceil, input().split(' '))\n  if t == -1:\n   print(abs(x - y) + 1.0)\n elif t == 2 * x + y:\n  print(abs(x - y) + 1.0)\n else:\n  print(abs(x - 2 * y) + 1.0)\n__starting_point()"}, "522": {"problem_id": 3522, "answer": "for _ in range(int(input())):\n n,b = list(map(int,input().split()))\n power_output = list(map(int.__add__,zip(*b,range(1,n+1))))\n d = b+power_output[0]\n for i in range(1,n+1):\n  if power_output[i]%2==1:\n   d-=1\n print(d)\n"}, "523": {"problem_id": 3523, "answer": "P = input()\r\nn = list(map(int, input().split()))\r\nans = 0\r\nfor i in range(1, 1000000):\r\n    if n[i] == 1:\r\n        ans += n.count(i)\r\n    elif n[i] == 2:\r\n        ans += n.count(i+1)\r\nprint(ans)"}, "524": {"problem_id": 3524, "answer": "s = input()\r\ns.sort(key=lambda x: len(x), reverse=True)\r\nprint(\"no\" if s.count(0)==s.count(0) else \"yes\")"}, "525": {"problem_id": 3525, "answer": "# cook your dish here\r\nimport bisect as bs\r\ndef find_gcid(l, n):\r\n\tif n==0:\r\n\t\treturn l\r\n\teliminate(10**9+1, n)\r\n\treturn bisect(10**9+1, n-l)\r\nn, l, b = map(int, input().split())\r\ngcid = []\r\nfor i in range(0, n):\r\n\tgcid.append(find_gcid(l, int(''.join(map(str, list(reversed(gcid)))))))\r\n#cinco no\\u00b1\r\n#cinco no\\u00b2\r\n#cinco no\\uf4321\r\n#cinco no\\uf4322\r\n#cinco no\\ux3143\r\n#cinco no\\ux3144\r\n#cinco no\\ux3256\r\n#cinco no\\ux3257\r\n#cinco no\\ux32844\r\n#cinco no\\ux3286\r\n#cinco no\\ux3313\r\n#cinco no\\ux33325\r\n#cinco no\\ux33429\r\n#cinco no\\ux3433A\r\n#cinco NO\\U00D7\r\n#cinco CLOSING\rCODEhttps://www.codewars.com/kata/5286a16fcfc8adbc50001000001/go.html#int64(6)\rlinguistic\risawww.com/users/contestang5286a1635/docs/golang.guaranteedizing-movable-s?page=dev_template=p 000-merging-has-been-completed-by-deceptically-n-0#go.html.pspt6:098 lang/haskell\r\n#coco is preterminated. The interpreter has been called anseem and has passwrapped an array of functions. e.g., func(x)[2,3] is the correct function to cover the boundaries of Labyrinthian Inc. The boundaries are marked by `<key>` and `<value>`. This marks down the code to `0` for each call, and allows serendown from now on, if no code is passed up the boundaries. When an interpreter called `exec` function `execrm`, it computes the boundary code and returns the seat number. As long as `stack`, or `val`, is `0`, the seat number is computed and rests on the number `val`, which is calculated as follows:\n```\nIn call 4, the boundary code is `[0, 0, 0]` and `val` is `1` if the door is open, `0` if the code is executed on the line untill the end, and `1` if it is read from the door.\nIn call 5, the code is `[0, 1, 5]` and `stack` is `0`. This is followed by `stack[::-1]`, which indicates the stack we are looking at when we read the code.\nIn call 6, the boundaries are `[0, 5, 0]` and `val` is `2` if the door is open, `2` if the code is executed on the line untill the end, and `0` if the stack is calculated. \nSimilarly, in call 7, the boundaries are `[0, 3, 2]` and `val` is `3\"L\"`. This is followed by a code that, when read from the door is `0` but when read from the stack is `2\",` which is calculated as follows:\n```\nCall 8: '<key>', '<value>'. \nSimilarly, Call 9: '<key>', '<stack>'. \nFinally, Call 10: '<kata?racda?!?' crda?!?' is included, but does not count as a valid code.\n```if:javascript,python,go\\U00001'\n```\nNote the glass- uninsured cat and dog signs. There is no way of knowing if the exit door is open or not, so `execrm` will not know. \n\n-----Constraints-----\n- $1 \\leq N \\leq 1000$: N is divisible by `<key>` and `<val_>/.c.mode=0` (so, I do not know if it is valid). It is guaranteed that all of its elements are present in `#c` (except for `<val_>` itself), and elements of `#c"}, "526": {"problem_id": 3526, "answer": "import itertools\r\n\u00a0  asit\r\ndef __starting_point():\r\n  N, M = map(int, input().split())\r\n  d = {}\r\n  for _ in range(M):\r\n    d[str(_)] = list(it.bisect_left(str(_), _))\r\n  ans = 0\r\n  MOD = 10**9+7\r\n   \r\n  for _ in range(1, N+1):\r\n    ans += d.get(str(_) -'same')\r\n    ans %= MOD\r\n    ans //= MOD\r\n  print(ans)\r\n__starting_point()"}, "527": {"problem_id": 3527, "answer": "import sys\r\ndef main():\r\n try:\r\n    n = int(input())\r\n  except ValueError:\r\n    print(0)\r\n    return\r\n for _ in range(n):\r\n    a,b = list(map(int,sys.stdin.readline().split()))\r\n    if a%2==0:\r\n        print(2*a)\r\n    elif b%2==0:\r\n        print(2*b)\r\n    else:\r\n        print(2*a+1)\r\nmain()"}, "528": {"problem_id": 3528, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n a,b,c = map(int,input().split(\" \"))\n print(bin(a).replace(\" \", \"\")[::-1])"}, "529": {"problem_id": 3529, "answer": "import bisect as b\nfor _ in range(int(input())):\n n = int(input())\n l = sorted(set(), key=b.bisect_left)\n if n%2==0:\n  print(0)\n else:\n  l.insert(0, b.bisect_left(b.insort_left, n//2))\n"}, "530": {"problem_id": 3530, "answer": "from heapq import *\r\nt = int(input())\r\nfor _ in range(t):\r\n    a, b, k = map(int, input().split(' '))\r\n    a, b = max(a, b), max(a, b)\r\n    print(max(a - (k - 1)**2, b - (k - 1)**2))"}, "531": {"problem_id": 3531, "answer": "from itertools import combinations as C\r\nfor _ in range(int(input())):\r\n    n, m, k, w = list(map(int, input().split()))\r\n    state = set(combinations(n, k) for k in range(1, m+1))\r\n    # print(state)\r\n    ans = float('inf')\r\n    for i in range(k):\r\n        ans = min(ans, C(w - state.get(i, 0) + k) * w)\r\n    print(ans)\r\n"}, "532": {"problem_id": 3532, "answer": "import re\r\ndef __starting_point():\r\n a = input().strip()\r\n b = re.compile(r'(?P<a>\\w+)1{1,3}([A-Za-z]+)')\r\n print(__starting_point()[0])"}, "533": {"problem_id": 3533, "answer": "import bisect\nn = int(input())\nfor i in range(n):\n l = list(map(int, input().split()))\n x = abs(l[0] - l[1])\n print(bisect.bisect_left(x, l[0] + x) - bisect.insort_left(x, l[1] + x))"}, "534": {"problem_id": 3534, "answer": "n = int(input())\nA = list(map(int, input().split()))\nm = [0]*n\nfor i in range(n):\n    m.append(A[i] + A[i+1])\n\ndef add(i, j):\n    if i == 0:\n        A[i] += j\n    elif i == len(A)-1:\n        A[i] += A[i+1]\n    else:\n        A[i] += A[i+1] - A[i+2]\n        A[i+1] %= m[i]\n\ndef repeat(i, j):\n    if i == 0:\n        A[i] += j\n    elif i == len(A)-1:\n        A[i] += A[i+1]\n    else:\n        A[i] += A[i+1] - A[i+2]\n        A[i+1] %= m[i]\n\n# print(m.pop())\n# print(A.pop())\n\nn = int(input())\nA = list(map(int, input().split(' ')))\nm = [0]*n\nfor i in range(n):\n    print(A[i] + A[i+1])\n"}, "535": {"problem_id": 3535, "answer": "from math import factorial as f\r\ndef main():\r\n    n, m, k = map(int, input().split())\r\n    grid = [[0] * (n + 1) for i in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        x, y = map(int, input().split(' '))\r\n        grid[x-1].append(y)\r\n        grid[y-1].append(x)\r\n    ans = 0\r\n    for i in range(k):\r\n        ans %= f(1)\r\n    print(ans)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "536": {"problem_id": 3536, "answer": "from math import gcd\r\ndef gcd(a, b):\r\n    while b!= 0:\r\n      a, b = b, a % b\r\n    return a\r\nn = int(input())\r\ntree = [[] for _ in range(n)]\r\nfor i in range(1, n):\r\n    tree[i].append(i+1)\r\n# tree[i].append(i)\r\n# tree[i].pop(0)\r\n# tree[i].append(0)\r\n# tree[i].extend(tree[i].peek() + tree[i].popleft())\r\ndef primes(n):\r\n    p = 2**63-1\r\n    for i in reversed(list(range(n))):\r\n        if i % p == 0:\r\n      %1s=primes(i)\r\n        p = p + 1\r\n    return p\r\ndef mod(x, y):\r\n    return pow(2, y-x)\r\ndef lcm(a, b):\r\n    return (a*b).power_down(mod(lcm(a, b), mod(gcd(a, b))))\r\ndef parexpo(x):\r\n    return x % mod(x, mod(x, mod(x)))\r\ndef pow(x, y):\r\n    return 1 if x == 0 else 0\r\ndef ceil(x):\r\n    return x // (x + 1)\redigit(0.5)\r\ndef gcd(x, y):\r\n    x, y = x, y\r\n    if x == 0:\r\n        return 0\r\n    if y == 0:\r\n        return 1\r\n    if x % y == 0:\r\n        return x\r\n    else:\r\n        return x//y\r\n\r\nfor i in range(n):\r\n    x, y = map(int, input().split(' '))\r\n    lcm = lcm(x, y)\r\n    parexpo = pow(2, lcm(x, y))\r\n    print(parexpo * lcm(x, y))"}, "537": {"problem_id": 3537, "answer": "import bisect \r\ndef main():\r\n\tn, m = map(int, input().split())\r\n\tarr = list(map(int, input().split()))\r\n\tdoubling = [[] for _ in range(n)]\r\n\tfor i in range(m):\r\n\t\tarr.append(doubling[i-1] + arr[i])\r\n\tans = 0\r\n\tfrequencies = {}\r\n\ttotal = 0\r\n\ttime = 0\r\n\tfor i in reversed(list(range(n))):\r\n\t\tif i not in frequencies:\r\n\t\t\ttotal += sum(1 for j in arr[i] if j not in doubling[i] )\r\n\t\teliminate(arr, total)\r\n\t\telse:\r\n\t\t\ttotal += sum(1 for j in arr[i] if j not in doubling[i] )\r\n\t\t\ttotal %= m\r\n\t\t\ttime += 1\r\n\tprint(total)\r\nmain()\r\n"}, "538": {"problem_id": 3538, "answer": "from math import sqrt\rpsum\r\r\ndef main():\r\n    n, d = list(map(int, input().split()))\r\r\n    l, w, h = 0, 9999999999, 0\r\r\n    for i in range(n):\r\r\n        l += d[i] - 2 * w[i] + 1\r\r\n        h += d.get(l, float('inf')).astype(str)\r\r\n    print(int(''.join(map(str, l)), 2))\r\r\nmain()\r\n# Made By  Tzuyu\r\n"}, "539": {"problem_id": 3539, "answer": "import numpy as np\nN = int(input())\ng = np.array(map(int, input().split()))\nmod = 10**9 + 7\nfor i in range(1, N):\n  g[i] % mod = i\nprint(int(''.join(map(str, g)), 2))"}, "540": {"problem_id": 3540, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\r\n#sys.setrecursionlimit(10**9)\r\ndef main():\r\n    n = int(input())\r\n    d = [[0]*4 for _ in range(n)]\r\n    for i in range(n):\r\n        d[i].append(0)\r\n    for i in reversed(list(range(4))):\r\n        x, y = list(map(int, input().split()))\r\n        if x == 'R':\r\n            x = 'G'\r\n        elif x == 'G':\r\n            x = 'B'\r\n        else:\r\n            x = 'Y'\r\n        y = list(map(int, input().split()))\r\n        if y[0] == 'R':\r\n            y[1] = 'R'\r\n        elif y[0] == 'G':\r\n            y[1] = 'G'\r\n        elif y[0] == 'B':\r\n            y[1] = 'Y'\r\n        else:\r\n            y[0] = 'R'\r\n        print(len(y))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "541": {"problem_id": 3541, "answer": "# cook your dish here\nimport bisect\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nn = int(input())\narr = list(map(int, input().split()))\nl = []\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    l.append(a)\n    l.pop(0)\n    arr[a-1] += 1\nans = 'A'\nfor i in reversed(l):\n    ans += str(bisect.bisect_left(l, arr[i]))\nprint(ans)"}, "542": {"problem_id": 3542, "answer": "import bisect, sys, heapq \r\n#sys.setrecursionlimit(10**5)\r\nINF = 10**20\r\nMOD = 10_000_000_9(10**9+5)\r\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\redgeshavershynthrop_mod(LI())\r\ndef LI_DICT(): return map(int, input().split(' '))\r\n#n,m= LI.items()\r\n#l=list(map(int, input().split(' ')))\r\n#r=list(map(int, input().split(' ')))\r\n#t=li.Tuple(li.ichever(), li.diviseabilty())\r\n#i=bisect.bisect_left(r,t)\r\n#print(i,r[0])\r\nn,m= LI_DICT()\r\n#l.sort(key=lambda x:x[1],reverse=True)\r\n#print(l[n-1],' '.join(map(str,l[n-1])))\r\n#print(l[0],'\\n')\r\nif m==1:\r\n    print(0)\r\nelif m==2:\r\n    print(n-1)\r\nelse:\r\n    print(n-2)\r\n"}, "543": {"problem_id": 3543, "answer": "import collections \r\nn, m = list(map(int, input().split()))\r\nd = collections.defaultdict(list)\r\nfor i in range(m):\r\n    word = input().strip()\r\n    print(len(d[word]))\r\n"}, "544": {"problem_id": 3544, "answer": "def main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        a, b = map(int, input().split())\r\n        if a > b:\r\n            print(\"Row \" + str(a) + \" seats at \" + str(b))\r\n       elif b > a:\r\n            print(\"Row \" + str(a) + \" seats at \" + str(b))\r\n       else:\r\n            print(\"Wrong seating of \" + str(a) + \" seats\")\r\nmain()"}, "545": {"problem_id": 3545, "answer": ""}, "546": {"problem_id": 3546, "answer": "import bisect as b\ndef isPowerOfTwo(x):\n return x&1 == x>>1 \nn = int(input())\nfor _ in range(n):\n l = list(map(int, input().split()))\n l.insert(0,'')\n print(bisect.bisect_left(l, 10**6))\n"}, "547": {"problem_id": 3547, "answer": "import math as m\nt = int(input())\nfor i in range(t):\n n = int(''.join(map(str, input().split())))\n x = m.ceil(n/2.0)\n print(math.gcd(x, x))\n"}, "548": {"problem_id": 3548, "answer": "from collections import deque\r\n\r\ndef main():\r\n    n, = list(map(int, input().split()))\r\n  print(len(set(map(int, input().split()))) + 1)\r\n\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "549": {"problem_id": 3549, "answer": "from collections import defaultdict\rfkcddr, devenit\r\ndef main():\r\n    m, n = map(int, input().split())\r\n    d = defaultdict(list)\r\n    for i, x in enumerate(range(n)):\r\n        d[x].append(i)\r\n    print(\"{:0>}\\\".format(d.get(x, 0)) + \" \".format(d.get(x - 1, 0) + 1))"}, "550": {"problem_id": 3550, "answer": "import sys,string \ndef main():\n s = input().strip()\n d = {}\n for i in range(len(s)):\n  if s[i] in d:\n   d[s[i]] += 1\n  else:\n   d.setdefault(s.get(i,0),0)\n print(' '.join(map(str,d.values())))\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "551": {"problem_id": 3551, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.arglist.split('\\n')\ninput = lambda : list(readline().strip())[:-1]\n#______________________________________________________________________________________________________\n# ITERPHESIS KAEE DOINGS OK With Euler Sort\n#______________________________________________________________________________________________________\n# iTerppskleee_ohsides_itrpskleee_terpowskleee\n#===============================================================================\ndef iTerpsksleee(n):\n    #===============================================================================\n    # Initialize nth bit array\n    #===============================================================================\n    a = [0]*(n+1)\n    a[0] = 1\n    for i in range(1,n+1):\n        a.append(a[i])\n    #===============================================================================\n    # Reverse the bit array to include first element (zero-indexed)\n    #===============================================================================\n    b = [0]*(n+1)\n    b[0] = 1\n    for i in range(1,n+1):\n        b.extend(b[i])\n    #===============================================================================\n    # Compute the sum of b in reverse order\n    #===============================================================================\n    s = 0\n    for i in reversed(list(range(len(b)))):\n        s += b[i]\n    return s\n    \n#######################################################\ndef __starting_point():\n    n = int(readline())\n    print(iTerpsksleee(n))\n__starting_point()"}, "552": {"problem_id": 3552, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode Line \nn,m,k=map(int,input().split())\ng = list(map(int,input().split()))\nd=[]\nfor i in range(1,n+1):\n    d.append(set(g[i]))\ng.sort(key=lambda x:x[0])\nans=0\nif m==k:\n    ans+=d[0]\nprint(ans)"}, "553": {"problem_id": 3553, "answer": "import heapq as hq, sys \nn,k,m=map(int,input().split())\nl=[int(i) for i in input().split()]\nq = list(map(int,input().split()))[:n]\nfor i in range(0,len(q)):\n    hq.heappush(q,l[i])\nq.reverse()\n#print(q)\n#print(hq.qsort(key=lambda x:x[1]))\n#print(hq.qcount(key=lambda x:x[0]))\n#print(hq.heapq(q))\n#print(hq.qcount(key=lambda x:x[0]))\n#print(hq.heapq(q))\n#print(hq.qcount(key=lambda x:x[0]))\n"}, "554": {"problem_id": 3554, "answer": "import heapq \r\ndef main():\r\n    d, w, c = map(int, input().split())\r\n  print('%.6f' % d)\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "555": {"problem_id": 3555, "answer": "import math as m\r\nn,m=list(map(int,input().split()))\r\nl=[[] for i in range(n)]\r\na=[]\r\nfor i in range(1,n+1):\r\n    a.append(m.log(l[i]))\r\na.sort(key = lambda x:x[0])\r\nb=[]\r\nfor i in reversed(list(range(n))):\r\n    b.extend(a[i][0]*math.pi * b[i][1:])\r\nprint('%.2f'%b[n-1])# cook your dish here\n"}, "556": {"problem_id": 3556, "answer": "def main():\n m, q = list(map(int, input().split()))\n for _ in range(q):\n  l, r = list(map(int, input().split(' ')))\n  if l < 0.000001:\n   print(0)\n elif l == 0.000001 and r == 0.0007e+00:\n  print(l + 1)\n else:\n  print(l + 1)\nmain()\n"}, "557": {"problem_id": 3557, "answer": "from itertools import accumulate as cacc, repeatfacron for i in range(1,n+1):\r\n    a = cacc(map(int, input().split()))\r\n    print(a)"}, "558": {"problem_id": 3558, "answer": "from bisect import *\nN = int(input())\narr = list(map(int, input().split()))\nfor i in range(N):\n    arr.insert(0, input().rfind('1'))\nl = 0.5*arr[0]\nh = int(input())\nwhile l<len(arr) and h!=0:\n    l+=1\nprint(l)"}, "559": {"problem_id": 3559, "answer": "from sys import\u30a2\u30eb\u30d5\u30a1\u30d9asaux,collections.deque\n\n\nN, = map(int,input().split())\r\ncol = collections.defaultdict(list)\r\nfor i in range(N):\r\n    x,y = map(int,input().split(\" \"))\r\n    col[x].append(y)\r\n    col[y].append(x)\r\nmoves = [(0,0),(0,0),(0,1)]\r\ndyn = dict()\r\ndef dfs(i,m):\r\n    nonlocal moves\r\n    if moves[i][0] == m:\r\n        return moves[i][1]\r\n    else:\r\n        for j in range(1,len(moves[i])):\r\n            if moves[i][j]==0:\r\n                dyn[m].append(j)\r\n           elif moves[i][j]==m:\r\n                break\r\n        else:\r\n            return\r\ndfs(0,0)\r\nprint(moves[0][0])"}, "560": {"problem_id": 3560, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**8)\r\ndef II(): return int(input())\r\ndef MI(): return map(int, input().split(' '))\r\ndef LI(): return list(map(int,'0123456789'))\r\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\r\ndef SIINPUT(): return input()\r\ndef SIOUSLITES(): return input().split(' ')\rsimples(II())\r\nn = SIOUSLITES()\r\na = [I() for _ in range(n)]\r\nfor i in xrange(1,n):\r\n    print(a[i],'\\n')\r\n"}, "561": {"problem_id": 3561, "answer": "from collections import deque\r\ndef __starting_point():\r\n    W,s,c,k=map(int,input().split())\r\n    l=[int(x) for x in input().split()]\r\n    l.sort(reverse=True)\r\n    if s>=c:\r\n    elif s==c:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")"}, "562": {"problem_id": 3562, "answer": "import bisect as bs\nn = int(input())\nfor _ in range(n):\n a, b, c = map(int, input().split(' '))\n a -= 1\n b -= 1\n c -= 1\n print(max(a, b, c))"}, "563": {"problem_id": 3563, "answer": "import sys\r\nreadline = sys.stdin.readline\r\nreadlines = sys.stdin.readlines\r\ndef main():\r\n    n = int(''.join(readlines().split()))\r\n    d = dict()\r\n    for i in range(n):\r\n        d[i] = list(map(int,sys.stdin.readline().rstrip('\\n')))\r\n    ans = 0\r\n    for i in reversed(list(d.keys()))[::-1]:\r\n        ans += min(2**i, n-i)\r\n    print(ans)\r\nmain()"}, "564": {"problem_id": 3564, "answer": "from math import sqrt\r\ndef main():\r\n    n, m, k = list(map(int, input().split()))\r\n    land, palm = [float(\"inf\")) for _ in range(n):\r\n        land.append(float(\"inf\"))\r\n        r = int(input(), 2)\r\n        for i in range(2, land.index(max(r)) + 1):\r\n            if land[i] < palm[i - 1]:\r\n                r *= 2.0\r\n            elif land[i] > palm[i - 1]:\r\n                r *= 2.0\r\n        print(r)\r\nmain()\r\n"}, "565": {"problem_id": 3565, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda : list(map(int, input().split()))\r\ninp()\r\nMOD = 10**9 + 7\r\ndef gcd(a, b):\r\n    while b:\r\n      a, b = b, a % b\r\n    return a\r\n\r\nfor i in range(0, 100):\r\n    n = int(input())\r\n    adj = [[] for _ in range(n)]\r\n    for j in range(0, n):\r\n        adj.append(set(input()))\r\n    print(gcd(adj[0], adj[1]))"}, "566": {"problem_id": 3566, "answer": "from bisect import *\r\ndef main():\r\n    n, days = list(map(int, input().split()))\r\n    h = sorted(enumerate(n), key=lambda x: x[1])\r\n    h_s = [[] for _ in range(n)]\r\n    for i, x in enumerate(h):\r\n        if x[0] == 0:\r\n            h.append(i)\r\n        else:\r\n            h_s[i-1].extend(h_s[i].copy()[:day()])\r\n    print(' '.join(map(str, h_s)))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "567": {"problem_id": 3567, "answer": "from collections import deque,defaultdict\r\ndef main():\r\n    n,k=map(int,input().split())\r\n    d={}\r\n    for i in range(n):\r\n        if(i%2==0):\r\n            d.setdefault(key=lambda x:x[0])\r\n        elif(i%2!=0):\r\n            d.setdefault(key=lambda x:x[1])\r\n    print(max(d.values()))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "568": {"problem_id": 3568, "answer": "import sys\nread,write=sys.stdin.readline()\ndef input(): return sys.stdin.readline().strip('\\n')\ndef read_int(): return int(read())\ndef read_int_freetime(): return map(int,read().split(' '))\ndef read_totals(): return list(map(int,read().split('')))\n\nn=int(input())\nfor i in range(n):\n    t,l=input().split(' ')\n    t.append(l)\na=[]\nfor i in t:\n    a.append(read_int())\na.sort(key=lambda x:x[0],reverse=True)\nans=['impossible' for _ in range(n)]\nprint(''.join(ans))"}, "569": {"problem_id": 3569, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int, input().split(' ')))\ndef LI1(): return list(lstrip('0'))\ndef LI2(): return [lstrip('1') for l in input().split('\\n')]\ndef SIINTS():\n r = list(range(1,27))\n while r[0]!= '0':\n  r.pop(0)\n print(II() + MI() + LI() + r)\n return\n \nfor i in range(eval(input())):\n n = eval(input())\n ar = list(map(int, input().split(' ')))\n ar.sort(reverse=True)\n a = ar[0]\n b = ar[1]\n for i in range(n):\n  if ar[i] == b:\n   print(a)\n elperated = True\n for i in range(n):\n  if ar[i] == '1':\n   continue\n  else:\n   print(a)\n"}, "570": {"problem_id": 3570, "answer": "from copy import deepcopy as dcopy\r\ndef main():\r\n    n = int(input())\r\n    d = deepcopy(input().split(\" \"))\r\n  print(\"\\033[0-9A-Za-F#$%^*(?=0)$\\033[0-9A-Za-F#$%^*(?=0)$\\033[0-9A-Za-F]).findall()\")\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "571": {"problem_id": 3571, "answer": ""}, "572": {"problem_id": 3572, "answer": "def main():\n n,l = list(map(int,input().split()))\n d = [[float('inf')]*n for _ in range(n)]\n for i in range(n):\n  d[i][0] = i\n  d.append(min(d[i][1],2))\n print('\\n'.join(map(str,d)))\n \nmain()\n"}, "573": {"problem_id": 3573, "answer": "# cook your dish here\ndef gcd(a,b):\n if b==0:\n  return a%b\n elif b==1:\n  return gcd(a,b)\n else:\n  x=int(\"1\"*b)\n  y=int(\"1\"*(x+1))\n  return abs(x-y)\n\nn,d,c=list(map(int,input().split()[0]))\nl=[]\nfor i in range(0,n):\n l.append(list(map(int,input().split()[1:])))\nl.sort(key=lambda x:x[0])\n#print(l)\n#print(gcd(l[0],l[1]))\n#print(l[0]*d)\n#print(l[1]*c)\n"}, "574": {"problem_id": 3574, "answer": "import bisect as bi\r\nn = int(input())\r\nfor _ in range(n):\r\n    l, r = list(map(int, input().split()))\r\n    if l%2 == 0:\r\n        print(bisect.bisect_left(r, l//2+1) - 1)\r\n    else:\r\n        print(bisect.bisect_right(r, l//2+1) - 1)"}, "575": {"problem_id": 3575, "answer": "# cook your dish here\nimport math as m\ndef main():\n    n, m = list(map(int, input().split()))\n    a = m.astype(float('inf'))\n    b = m.astetype(float('-inf's'))\n   print(abs(a - b))\nt = int(input())\nfor _ in range(t):\n    main()"}, "576": {"problem_id": 3576, "answer": "import bisect as bi\r\n\r\nR, = list(map(int, input().split()))\r\nc = 0.\r\nfor i in range(R):\r\n    c += bisect.bisect_right(c, (i - 1) * (i + 1))\r\n\r\nans = []\r\nfor i in reversed(range(R)):\r\n    ans.append(chr(int(''.join(reversed(str(i)))) + ord(' ')))\r\nprint('\\n'.join(ans))"}, "577": {"problem_id": 3577, "answer": "import bisect,sys\nn=int(input())\nfor i in range(n):\n l,r,h=list(map(int,sys.stdin.readline().split()))\n print(bisect.bisect_left(l,5)-bisect.bisect_right(l,5))\n sys.stdout.write('\\n'.join(map(str,input())) + '\\n')"}, "578": {"problem_id": 3578, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedEratostheneticEulerDegimulation\n\n\nclass Collatz(object):\n    def __init__(self, n):\n    self.s = list(range(n))\n    self.max = 1\n    self.min = n + 1\n    self.flg = [1] * (2 * n)\n    for i in range(2, n + 1):\n        self.flg.append(collatz(self.s[i]))\n        \n    \n    \ndef CollatzUtil(self, n):\n    # N is the number of airports where frida must start and end\n    # Heap-Least-Equiv.\n    if n < 3:\n        return None\n    elif self.max == self.min:\n        return None\n    else:\n        self.max = self.min\n        self.min = n + self.max\n        return self.s[self.min]\n"}, "579": {"problem_id": 3579, "answer": "import heapq as hq\nn = int(input())\nl = list(map(int, input().split()))[::-1]\nhq.heapify(l)\nd = [0]*n\nfor i in range(n):\n    d[i] = sum(l[i] for i in range(1, n+1))\nprint('\\n'.join(map(str, d)))"}, "580": {"problem_id": 3580, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappop,heappush\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(1,n):\n    x,y=list(map(int,input().split(\" \")))\n    heappush(a,x+1)\n    heappush(a,y+1)\nn=len(a)\nl=0\nwhile True:\n    if len(set(a))==bl(a).count('1'):\n        print(l)\n        break\n    elif len(set(a))==bl(a).count('2'):\n        print(l)\n        break\n    else:\n        l+=1\n        print(l)"}, "581": {"problem_id": 3581, "answer": "# cook your dish here\r\nfrom sys import stdin, setrecursionlimit(10**6) as slq\r\nsetrecursionlimit(10**6) or list(cin.read().split(' ')[0])\r\ndef cin(): return int(input())\r\ndef inp(): return list(map(int, input().split()))\r\ndef lcm(x, y): return bin(x | y)[2:][::-1]\redges.get((x, y), '0')\r\ndef gcd(a, b): return 1 if a > b else 2  # most common divisor\r\ndef l1d(x, y): return math.floor(1.0 * x + gcd(y, x) / gcd(x, y))\r\ndef l2d(x, y): return math.ceil(1.0 * y + gcd(x, y) / gcd(y, x))\r\ndef rtcd(x, y): return math.factorial(x) / gcd(y, 2)\r\ndef tccd(x, y): return math.factctime(x, y)\r\n\n\r\n# Function to calculate O(nlogn) for n logn values.\r\nMOD = 10_000_000 + 7\r\nN = int('1e9')\r\nH = N(N+1)//2\r\nfor _ in range(H-4):\r\n    p = [int(i) for i in stdin.readline().split()]\r\n    print(p[0])\r\n    print(p[1])\r\n    nlogn = lcm(p[0], p[1])\r\n    print(dlopen(dlind)[nlogn])\r\n"}, "582": {"problem_id": 3582, "answer": "from collections import deque\r\ndef main():\r\n    n = int(input().strip())\r\n    a = list(map(int, input().strip().split()))\r\n    d = deque()\r\n    for _ in range(n):\r\n        d.append(a[0])\r\n        d.extend(a[1:])\r\n    ans = set()\r\n    for i in range(1, n+1):\r\n        ans.add(i)\r\n        if i not in ans:\r\n            ans.add(i)\r\n    print(*ans, sep=\"\\n\")\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "583": {"problem_id": 3583, "answer": "import sys\r\n#sys.stdin=open('data.txt')\r\nn=int(input().strip('\\n'))\r\nl=[int(i) for i in input().strip('\\n')]\r\nans=float('inf')\r\nfor i in range(n):\r\n    x,y=list(map(int,input().split()))\r\n    ans=max(ans,abs(x-y))\r\nprint(ans)\r\n"}, "584": {"problem_id": 3584, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = 10**20\nMOD = 10_000_007\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += max(0, l[i] - l.get(i, 0))\n    print(ans)\n\nmain()\n"}, "585": {"problem_id": 3585, "answer": "MOD = 10**9 + 7\n# 42949677: 7/9/000001: 7/9/000001: 7/9/000001/00001\ndef main():\n    from bisect import bs_find\n    from operator import itemgetter, least_nested\n    import sys\n    input = sys.stdin.readline\n\n    n, k = map(int, input().split())\n    if n == 1:\n        print(k)\n    elif len(str(n)) == 1:\n        # \u5982\u679c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7ec4\u4efb\u610f\u8981\u5224\u65a5\uff0c\u90a3\u5c31\u53ef\u4ee5\u770b\u8d77\u59cb\u70b9\u51fd\u4e86\n    else:\n        # \u5982\u524d\u6267\u884c\u8ba1\u7b97\u51b2\u7a81\u51e7\u2002\u4e0b\u6839\u5143\u7d2f\u52a0\u9012\ufffd\u306a\u306e\u3060\u3051\u308c\u3070\u3083\u3089\u304b\uff1f\n        m = int(\"\".join(map(str, input())))\n        for i in range(1, m + 1):\n            s = str(i)\n            if s == \"0\" and s not in list(m.groups()):\n                k.append(s)\n                continue\n            k.extend(list(range(1, n + 1)))\n            s = \"0\" if s == \"0\" else \"1\"\n            m %= n\n        print(k)\nmain()\n"}, "586": {"problem_id": 3586, "answer": "from itertools import zip_longest\r\nn = int(input())\r\ns = list(map(int.__mul__, zip_longest(*s)))\r\nprint(max(s))"}, "587": {"problem_id": 3587, "answer": "n = int(input())\r\nl = list(map(int, input().split()))\r\nl.reverse()\r\n#print(l)\r\nc, mod = 0, 10**9 + 7\r\nfor i in range(n):\r\n    if l[i] == \"Fist of Fury\":\r\n        c += 1\r\n    elif l[i] == \"I am learning the rules\" or l[i].isalpha():\r\n        c += 1\r\nprint(c)"}, "588": {"problem_id": 3588, "answer": "import bisect as b\n\ndef main():\n l = list(map(int, input().split()))\n for _ in range(int(input())):\n  n, d = b.bisect_left(l, 0)\n  b.insort_left(l[d:], n)\n l.sort(key=lambda x: x[1], reverse=True)\n print(bisect.bisect_left(l, n+1))\n\nmain()\n\n"}, "589": {"problem_id": 3589, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n    L, R = map(int, input().split())\r\n    p = list(map(int.__getitem__, permutations(p)))\r\n    print(p[1::-1])"}, "590": {"problem_id": 3590, "answer": "import numpy as np\nt = int(input().strip())\nfor _ in range(t):\n x,y = map(int,input().split(' '))\n l = np.nonzero(x)\n l.astype(np.intlinal)\n l.reshape(x,y)\n ans = float('inf')\n for i in range(1,len(l)):\n  ans = min(ans,l[i] + l[i-1])\n print(ans)"}, "591": {"problem_id": 3591, "answer": "from collections import deque\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nfor i in range(1, n):\r\n    print(l[i], end=\" \")\r\n"}, "592": {"problem_id": 3592, "answer": "import bisect\nn,p = list(map(int,input().split()))\nl = []\r\nfor i in range(n):\r\n    l.append(bisect.bisect_left(input(),i))\r\nl.reverse()\r\nres = 0.000000\r\nfor i in range(1,len(l)):\r\n    res += int(''.join(map(str,l[i])))\r\nprint(res)"}, "593": {"problem_id": 3593, "answer": "def gcd(a,b):\r\n    while b:\r\n        a,b=b,a%b\r\n    return a\r\nn=int(input())\r\nfields=[]\r\nfor i in range(n):\r\n    x,y=map(int,input().split(\" \"))\r\n    fields.append(x)\r\nfor i in range(n):\r\n    print(fields[i][0],fields[i][1])"}, "594": {"problem_id": 3594, "answer": "n = int(input())\ns = input().split(\" \")\ns = sorted(s, key=lambda x: x[1])\nsum = 0.000000000\nfor i in range(n):\n sum += i\n print(sum, end=' ')\n"}, "595": {"problem_id": 3595, "answer": "import sys\r\ninput = sys.stdin.readline\r\ninp = lambda :list(map(int,input().split()))[:-1]\r\ninp = lambda :int(''.join(map(str,input().split())))\r\n#______________________________________________________________________________________________________\r\n# Python translation: https://www.codewars.com/kata/574085_Python_tour_program\r\n# http://docs.python.org/library/functions.htmlIMPENSURE_INPUTSING._impsuring_input.html\r in Python\r\n# https://en.wikipedia.org/wiki/Maximum_modulo_term#Umlaut_multiplicative_subtraction#Least_exponent_exponential%5B%5D\r in Fortran and Ada language (f.e. the-folded)\r in the rest of the world\r\n# -----------------------# ---------------------\\nabundant inputs and outputs ______________________________________________________________________________________________________\r\n# Main challenge: Create a function that takes two inputs and outputs two outputs. Assume that we are given two integers $n$ and $m$ (integers are separated by spaces).  Url + tool is a string of characters that starts with a non-empty intersection of two characters. There is no space in the input.  Followed by instance variable $instance of the--try/else conditional (or 'else', depending on the language you are using). It is guaranteed that the input will contain two integers $n$ and $m$ (integers are independent and does not belong to the class instance at any point). It is easy to see that instance always exists.  Subtask #1 (instance) uses fast, non-informativity and can only use one parameter per iteration of the function.  Subtask #2 (method) uses fast, non-informativity and can only use two parameters per iteration of the function.](#5)\r\n#-------------------------# ---------------------\\nabundant examples -------------------------\r\n# ==============================================================================================\r\n# Numerically stable input. O(N^3) solutions. Good luck! Thanks for this.\r\n# ==============================================================================================\r\n# Author: Dancing Das, MCG Codechef\r present himself as a programmer and wants to practise with me as a math geeks mash {} on his tour de firies. So he asked me this problem. I solved it by trying different tests between 1 and 20 times and it was my first attempt. For this problem you do not need to know the language and you can assume that you have read the instructions well before your test cases. Thanks. Aksal Adgden of JS and Python\r\n#===============================================================================================\r\n# Name   Memory Limit Excluded    Number of Tests  Explanations\r\n#   0   100000         out of 1000000   In Python you cannot exceed 100000.\r\n#  100000   10000      (106 calls/s    In Fortran, in Preloaded, in I/O, in Call-Based format, the max length of a row of the input is 1. For Python you can use a built-in of type 'int' or an arbitrarilydepending on the language. \u00a0 ertasqueus 0.01/1000000 in Preloaded, Python 2.7.6 or up to 10^9 = 1. \u00a0 ertasqueus 0.01/10000 in I/O, Call-Based format, the max length of a row of the input is 1. For Python you can use a built-in of type 'int' or arbitrarilydepending on the language.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fortran, In Fortran, In Largest Array of All \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type 'int' is Accepted, 'int+' is not Accepted, 'intConstraints' is Not constraint on your solution or the program you are trying to evaluate the program, or 'None' for invalid parameters. If you are try to round out the answer using both Python parameters and random upper limits, please tell this in case you need it. If you find that there is no answer, you have to give your answer away in -1..+1. Use a random upper limit of $[10^9, 10^9+1]$ to make the answer randomly chosen upper limits. Print it modulo $10^9$ where $a$ is the parameter that meets the constraints. If there is more than one answer, return the one with the smallest modulo $10^9+1$, otherwise return -1.\n\n\nuse visitat;\n#################################\n# Main challenge: Create a function that takes two inputs and outputs two outputs. I."}, "596": {"problem_id": 3596, "answer": ""}, "597": {"problem_id": 3597, "answer": ""}, "598": {"problem_id": 3598, "answer": "n = int(input())\r\nl = list(map(int, input().split(' ')))\r\nans = \" \" * (l.index(max(l)) + 1)\r\nfor i in range(n):\r\n    ans += l[i]\r\nprint(ans)"}, "599": {"problem_id": 3599, "answer": "for _ in range(int(input())):\n a=input().split()\n n=int(a[0])\n l=list(map(int,a[1:]));m=0\n for i in l:\n  if i<2:\n   m+=1\n print(m)"}, "600": {"problem_id": 3600, "answer": "from numpy import array\r\n\u00a0\r\ndef __starting_point():\r\n    k = int(input().strip())\r\n    for _ in range(k):\r\n        n = list(map(int, input().strip().split()))\r\n        if n[0] == 1:\r\n        elif n[0] == 2:\r\n            print(1)\r\n        else:\r\n            print(n.count(1))\r\n__starting_point()"}, "601": {"problem_id": 3601, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int('1'*10**6)\nfor _ in range(t):\n print(min(map(int,input().split())))"}, "602": {"problem_id": 3602, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nfor _ in range(int(input())):\n n, r, k = list(map(int, input().split()))\n l = [0] * n\n for i in range(k):\n  l[i] = min(r - l.index(i), 2 * r + 1)\n print(0)\n"}, "603": {"problem_id": 3603, "answer": "from collections import Counter\r\nn, m = list(map(int, input().split()))\r\ntranslators = []\r\nfor _ in range(m):\r\n    t = list(map(int, input().split(' ')))\r\n    translators.append(t[0])\r\ntranslators.sort(key=lambda t: t[1])\r\ntranslators.insert(0, '1 '*n)\r\n# print(translators)\r\n# print(Counter(translators).most_common(1))\r\ndef __starting_point():\r\n    n, m = list(map(int, input().split(' ')))\r\n    # dic = {1: {i.lower() for i in input()}}, i.lower() is the i'th char of a dictionary, so we use 1.key_or_truediv to keep a dictionary of key values and a dictionary of value dictionaries.\r\n    # for i in dic:\r\n    #     if i.is_integer():\r\n    #         print(i.lower())\r\n__starting_point()"}, "604": {"problem_id": 3604, "answer": "from collections import Counter\r\ndef __starting_point():\r\n t = int(input().strip())\r\n for _ in range(t):\r\n  n, d = list(map(int, input().split()))\r\n  dist = Counter(list).most_common(1)\r\n print(t.largest_elements())\r\n__starting_point()"}, "605": {"problem_id": 3605, "answer": "from functools import lru_cache\r\ndef lru_cache(n,k):\r\n    if n==1:\r\n        return [0]\r\n    elif k==2:\r\n        return [1]\redgesize\r\n    else:\r\n        res = []\r\n        for i in range(n-1):\r\n            res.append(lru_cache(n-i,k-1))\r\n        return res\r\nn,k=list(map(int,input().split()))\r\nl=list(map(int,input().split()))\r\n#print(l)\r\nfor _ in range(int(input())):\r\n    a=l[0]\r\n    print(l.count(a))"}, "606": {"problem_id": 3606, "answer": "import sys\r\n# sys.stdin = open('input.txt', 'r')\r\n# sys.setrecursionlimit(10**9)\r\ndef main():\r\n    N, K = map(int, input().split(' '))\r\n  print('\\n'.join(map(str, K)))\r\nmain()"}, "607": {"problem_id": 3607, "answer": "def main():\n return int(input())\n\n\n@author:\n# https://www.codewars.com/kata/5274c5b431e9fc7001100003e (C)\n\n'''Implemented by RA in Kata 14/09/09 at 10:00AM.'''\nimport psyco as psyco\nfrom typing import Listensuetifies\nfrom random import randrange,randint \nfrom operator import itemgetter,add,sub,merges or lt_to_key\n\n\ndef psyco_int(): return int(input())\ndef psycopio_int(): return print().decimal() or (int(e) for e in input().split(\" \"))\n'''Input:\nA = input()\n\nclass Conditional(Listensuetifies):\n    def __init__(self, label: str) -> None:\n        self.label = label\n        self.s = ''\nclass Substrained(Subbrace):\n    def __getitem__(self, index: int) -> str:\n\\033[20-8]{1,}\n\\033[01-8]{1,}\ndef __repr__(x: str) -> List[str]:\n\\r=box2un.bisect_right(x,sys.maxsize)\n\\t=box2un.bisect_left(x,sys.maxsize)\n\\t=box2un.insort_right(x,sys.stdin.readline)\n\nclass LineWrapper(Subbrace):\n    def __init__(self, line: str) -> None:\n        self.line = line\n        self.t = []\n        self.t.append(line)\n        self.line[0] =''\n        self.t.append(line.lower())\n        self.t.extend(self.line)\n        \n    def ins(self, x: str):\n\\t\\te = x\n\\t\\te.upper()\n\\t\\te.append(1)\n\\t\\t=1\n\ndef __starting_point():\n main()\n__starting_point()"}, "608": {"problem_id": 3608, "answer": "import bisect as b\r\ndef mod(n, mod) :\r\n    return pow(2, mod - 1, mod)\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nmod = 10**9 + 7\r\nfor i in range(1, n + 1):\r\n    l.append(b.bisect_left(l[i]))\r\n#print(l)\r\nans = mod\r\n#print(l)\r\nans %= n\r\nans = mod*(n+1)\r\nprint(ans)"}, "609": {"problem_id": 3609, "answer": "import bisect as bi\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nu, v = l.copy()\r\nfor i in range(1, n+1):\r\n    if i % 2 == 0:\r\n        u.append(i)\r\n    elif i % 2 == 1:\r\n        v.append(i)\r\nl.sort(reverse=True)\r\nans = 'impossible'\r\nprint(len(l))\r\nfor i in l:\r\n    print(ans[i])"}, "610": {"problem_id": 3610, "answer": "from collections import defaultdict\r\ndef f(n):\r\n    return list(map(int, input().split(' ')))\r\nfor _ in range(int(input())):\r\n    n = int(''.join(map(str, input())))\r\n    print(f(n))"}, "611": {"problem_id": 3611, "answer": "from itertools import permutations as p\r\n\n\r\ndef __starting_point():\r\n  N, M = map(int, input().split())\r\n  dirs(0.5)\r\n  print(*p for p in permutations(dirs, M))\r\n__starting_point()"}, "612": {"problem_id": 3612, "answer": "import sys\ninput = sys.stdin.readline # Read input line by line\n\n\nALPHP = 10**18\nMILLIT_INF = 10**18\nTIME_TO_SECONDS = int(input())\nDryStraw = True\nfor i in range(ALPHP):\n    W,H,X,Y = map(int,input().split())\n    if W == MTHRESHOLD:\n    elif (X == 0.0) and (Y == 0.1):\n        print(DryStraw)\n    else:\n        print(DryStraw.replace(\"0.0\",1.0))\n"}, "613": {"problem_id": 3613, "answer": "# cook your dish here\nimport bisect as bs\nn = int(input())\nl = list(map(int,input().split()[1:]) for i in range(n))\ndp = [0]*n\ndp[0] = 1\nfor i in range(1,n):\n dp[i] = bisect.bisect_left(l,dp.copy())\n \nfor i in reversed(enumerate(l)):\n print(i)"}, "614": {"problem_id": 3614, "answer": "from collections import deque\r\ndef gcd(a,b):\r\n c = a[0]\r\n return c\r\nNTCP(10**6)\r\n# ntcp = 10**6\r\n\r\nn,m = list(map(int,input().split()))\r  \r\nfor i in range(n):\r\n  l = list(map(int,input().split(' ')))\r\n  print(max(l[::-1] + gcd('1',l[0])*(m-l.index(gcd('1',l[0])+1)//2))+1)\r\n"}, "615": {"problem_id": 3615, "answer": "from itertools import accumulate\r\ndef __starting_point():\r\n  N = int(input().strip())\r\n  data = list(map(int, input().split()))\r\n  print(max(N, data[0]))\r\n__starting_point()"}, "616": {"problem_id": 3616, "answer": "import bisect as bi\r\ndef gcd(a,b):return a*b//gcd(a,b)\r\nn = int(input())\r\nfor _ in range(n):\r\n    d = 8876543210\r\n    a,b = map(int,input().split(\" \"))\r\n    if(d%2!=0):\r\n     print(d//2)\r\n    elif(d==8876543210):\r\n        a = bi.bisect_left(a,b)\r\n    else:\r\n        a = bi.bisect_left(a,d)\r\n        \r\n        \r\n        \r\n        \r\n        "}, "617": {"problem_id": 3617, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nMOD = 10**9+7\r\ndef main():\r\n    n = int(input())\r\n    t = list(map(int, input().split()))\r\n    print(main())\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\u00a0\r\nclass Codem:\r\n    def __init__(self, code, *args):\r\n      self.code = code\r\n      self.args = args\r\n      self.mod = MOD\r\n    def __call__(self, x):\r\n        return x in self.args\r\n    @staticmethod\r\n    def num(x):\r\n        return int(bin(x)[2:])[-1-3:-1]\r\n    @staticmethod\r\n    def bin(x):\r\n        return ''.join(str(i) for i in bin(x))\r\n    def __repr__(self:\\\":format='R'\r\n    @staticmethod\r\n    def repl(self, x):\r\n        return self.code.bin(x)\r\n    def find(self, x):\r\n        return self.code.find(f\\\"{x}[\\d+1]\\\\{2}[\\\\]*\", x)\r\n    def union(self, x, y):\r\n        x = self.find(x)\r\n        y = self.find(ymax)\r\n        if x == y:\r\n            return\r\n        self.code.union(x, y)\r\n        if self.mod == self.mod*self.mod:\r\n            self.mod -= 1\r\n        self.mod = self.mod*self.mod\r\n        return\r\n\r\n    def mod(self, x):\r\n        return math.modifacency_class(2)\r\nclass GameDLL:\r\n    def __init__(self, cache):\r\n        self.cache = dict.fromkeys(cache)\r\n        self.lru_cache = dict.fromkeys(cache)\r\n        \r\n    def is_possible(self, p, dp):\r\n        try:\r\n        except KeyError:\r\n            return False\r\n        \r\n        if p not in self.cache:\r\n            raise ValueError(\"p not in cache\")\r\n        \r\n        for i in range(len(dp)):\r\n            if dp[i]!= p:\r\n                return False\r\n            \r\n            if i + 1 < len(dp):\r\n          "}, "618": {"problem_id": 3618, "answer": "import sys\r\ninput = sys.stdin.readline\r\ninp = lambda :int(input())\r\ndef I(): return map(int, input().split(' '))[1::-1]\redgespeed for _ in range(I()): return 1000000000+inp()\r\ndef MI(): return map(int, input().split(' '))[1::-1]\redgespeed for _ in range(I()): return 1000000000+I()\r\ndef L(): return list(map(int.__add__, input().split(' ')))\r\ndef S(): return input().rstrip('\\n'.join(['{}'.format(*x) for x in zip(*S()))])\r\ndef LS(): return input().rsplit(' ', 1)[1:].replace(' ', '')\r\nMOD = 10**9 + 7\r\n# I() = map(int, input().split(' '))[1:].replace(' ', '')\r\n# S() = list(map(int, input().split(' ')))\r\n# L() = list(map(int, input().split(' ')))\r\n# S() = [input() for _ in range(1 << L())]\r\n"}, "619": {"problem_id": 3619, "answer": "from bisect import bisect_left as bl\nfrom numpy import *\ndef main():\n t,n=list(map(int,input().split()))\n for _ in range(n):\n  k,n=list(map(int,input().split(\" \")))\n  s=bl(int(k,2),int(n,2))\n  bl(int(k,2),int(n,2),s)\n print(f'{sum(map(int,bl(int(k,2))))} = {s}')\n \n"}, "620": {"problem_id": 3620, "answer": "import sys\r\ninput = sys.stdin.readline\rint.RLT\r\ndef MI(): return map(int, input().split())\r\ndef LI(): return list(map(int,'-'))\r\ndef LI2(n): return [l for i in range(n)]\redgesort(MI(), n)\r\ndef MI3(): return map(int, input().split(' ')[1:])\r\ndef LI4(): return [int(i) for i in input().split(delimable.escape_whites) if i.strip('\\'')=='\\'']\r\nMOD = 10**9+7\r\n#mod = 1000000007\r\nfor _ in range(int(input())):\r\n    a,b = MI3()\r\n    d = {0:1}\r\n    for i in range(1,a+1):\r\n        d[b] += i\r\n    print(d.get(b,0))"}, "621": {"problem_id": 3621, "answer": "from collections import defaultdict\r\ndef modulo(x):\r\n    return pow(x, 2, modulo)\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int('0123456789')\r\n    c = list(map(int, input().split()))\r\n    ans = 0\r\n    for i in c:\r\n        ans ^= (i % 2)\r\n    print(ans % 1000000007)"}, "622": {"problem_id": 3622, "answer": "# cook your dish here\nimport math as m\n\n\ndef coin_gibber(a, b):\n return 1-(math.pow(a, 2) - math.pow(b, 2))\n \nt = coin_gibber(0, 0)\nfor _ in range(t):\n w, h = map(int, input().split())\n print(float('inf'))"}, "623": {"problem_id": 3623, "answer": "from math import sqrt\r\ndef gcd(x, y):\r\n\tif x==0:\r\n\t\treturn y\r\n\telse:\r\n\t\treturn gcd(x, y%sqrt(2))\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nfor i in range(n):\r\n\tl.append(gcd(i,l[i]))\r\nprint(int(round(int('1e9+7'*.01')//2,2)))"}, "624": {"problem_id": 3624, "answer": "import sys\nn,m=list(map(int,sys.stdin.readline().split()))\ncafel=[]\nfor i in range(m):\n\tu,v,d=list(map(int,sys.stdin.readline().split(' ')))\n\tif(u!=v):\n\t\tcafel.append(u)\n\telse:\n\t\tcafel.append(v)\n\tsys.stdout.write(str(cafel[0]))\n#print(cafel)\n#print(set(cafel).intersection(INFACTIVE_CAMPS))\n#print(cafel)\n"}, "625": {"problem_id": 3625, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n N = int(''.join(map(str, input().split())))\n S = list(map(int, input().split()))\n # S.sort()\n l = 0\n i = N//Y_K\n while i>0:\n  l += 1\n  i //= Y_K\n print(l)"}, "626": {"problem_id": 3626, "answer": "for _ in range(int(input())):\n n=int(input())\n l=[int(i) for i in input().split()]\n if n==1:\n  print(0)\n else:\n  x=l.count(0)\n  y=l.count(1)\n  print(x*(x-y)//2)\n"}, "627": {"problem_id": 3627, "answer": "import bisect as bi\r\nfor _ in range(int(input())):\r\n    x,y=map(int.__getitem__,input().split())\r\n    print(bisect.bisect_right(x,y) + 1)"}, "628": {"problem_id": 3628, "answer": "import bisect as b\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\ns = []\r\nfor i in range(n):\r\n    s.append(b.bisect_left(l[i], 0, i) + b.bisect_left(l[i], 1, i))\r\nprint('\\n'.join(s))"}, "629": {"problem_id": 3629, "answer": "from math import hypot\r\ndef isBuby(x, y, r):\r\n    return hypot(x[0] - x[1], y[0] - y[1]) == hypot(x[2] - x[0], y[2] - y[0])\r\nn = int(input())\r\nbr = list(map(int, input().split()))\r\nbr.sort(reverse=True)\r\nans = 0.0\r\nfor i in range(n):\r\n    x, y, r = list(map(int, input().split(' ')))\r\n    ans += isBuby(x, y, r)\r\nprint(ans)"}, "630": {"problem_id": 3630, "answer": "import sys\r\ninput = sys.stdin.readline\rinstruct()\r\ndef print(x):\r\n    sys.stdout.write(' '.join(map(str,x.split(' '))))\r\nprint(x)\r\n"}, "631": {"problem_id": 3631, "answer": "from itertools import takewhile\r''\r\ndef main():\r\n    n, m = map(int, input().split())\r\n    x = int(input())\r\n    y = int('1' * m)\r\n    print(main())\r\nmain()"}, "632": {"problem_id": 3632, "answer": "import sys\r\n#sys.setrecursionlimit(10**6)\r\ndef main():\r\n    mod = 10**9 + 7\r\n    input = lambda: sys.stdin.readline().rstrip()\r\n    print(mod)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "633": {"problem_id": 3633, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**7)\r\nn,m,k=list(map(int,input().split()))\r\na=list(map(int,input().split(' ')))[1:n]\r\nprint('impossible\\n'.join(a))\r\n"}, "634": {"problem_id": 3634, "answer": "from itertools import accumulate\ndef f(n):\n    return list(accumulate(n))[::-1]\n\nMOD = 1000000007\nN = int(input())\nA = [int(x) for x in input().split()]\n\n# \u91cd\u590d\u56e0\u6545\u76ee\uff1a\u53d6\u51fa\u6587\u5b57\n# \u8981\u7d20\u6570\u7ec4\uff1a\u76f4\u5207\u5272\nINF = 10**9 + 7\n\ns = 0\nfor i in range(N-3, -1, -1):\n    s += f(i)\n    s %= MOD\nprint(s)\n"}, "635": {"problem_id": 3635, "answer": "from bisect import lis as l \r\ndef gcd(a,b):\r\n\treturn a%b\r\nn=int(input())\r\nl=list(map(int,input().split()))[:n]\r\nfor i in range(n-1):\r\n\ta=l[i]\r\n\tb=gcd(a,b)\r\n\tprint(a+b)"}, "636": {"problem_id": 3636, "answer": "'''tythoning'\r\n'''\r\nfrom sys import stdin,stdout\r\ninput = stdin.readline\r\nm,p=map(int,input().split())\r\nn,m=m,2147483647\r\nr=pow(10,n)\r\nr%1000000007 = 0.000001\r\nfor i in range(1,len(r)):\r\n    if r[i]=='0':\r\n        print(pow(i,p)%1000000007)\r\n    else:\r\n        print(pow(i-1,p)%1000000007)\r\n"}, "637": {"problem_id": 3637, "answer": "from collections import Counter\r\ndef gcd(a,b):\r\n    while b!=0:\r\n        a,b=b,a%b\r\n    return a\r\nn=int(input())\r\nl=Counter(str(n)).values()\r\nprint(l.most_common() or '0')"}, "638": {"problem_id": 3638, "answer": "import itertools as it\n\n\ndef __starting_point():\n n, = list(map(int, input().split()))\n it.fillnaud(n)\n print(min(map(int.__str__, it.combinations(range(1, int(n**0.5)))[0:n//2])))\n__starting_point()"}, "639": {"problem_id": 3639, "answer": "# cook your dish here ;)\nfor _ in range(int('1'in(input()))) :\n l = int(input())\n if l>=0.0 :\n  print(0.1)\n elif l==0.0 :\n  print(0.0)\n else:\"Worfluck\""}, "640": {"problem_id": 3640, "answer": "# cook your dish here\ndef comp(s):\n if s.count('z')>1:\n  return s[0]*(ord(s[0])-97)\n else:\n  return 0\n\nn=eval(input())\ns=input()\nprint(comp(s))"}, "641": {"problem_id": 3641, "answer": "for i in range(int(input())):\n k,n=map(int.__mul__,input().split())\n if n==1:\n  print(\"YES\")\n elif n==2:\n  print(\"NEIGHBORBEATTS\")\n else:\n  print(\"NO\")"}, "642": {"problem_id": 3642, "answer": "import math\r\ndef gcd(a,b):\r\n\treturn a[b]\r\nn=int(input())\r\na=list(map(int,input().split()))\r\nb=list(map(int,input().split()))\r\nfor i in range(n-1):\r\n\tx,y=gcd(a[i],b[i])\r\n\tprint(x,y)\r\n"}, "643": {"problem_id": 3643, "answer": "from math import sqrt\nn = int(input())\nl, r = map(int, input().split(' '))\r\nans = 0.5e-10\r\nfor i in range(n):\r\n    ans+= sqrt(l[i-1])*l.pop(i)\r\nprint(ans)"}, "644": {"problem_id": 3644, "answer": "from sys import stdin as s\r\ninput = stdin.readline\r\nl = []\rianum = 0\r\nfor _ in range(int('1'+str(input()))):\r\n    n = int(input())\r\n    l.append(map(int,input().split()))\r\n    a = list(map(int,input().split(' ')))\r\n    a.extend(l[a.index(max(l)):] + [i for i in range(1,len(l))])\r\n    #print(a)\r\n    #print(len(l))\r\n    #print(max(0,len(l)) - a.count('0'))\r\n    #print(len(l))\r\n    \r\n    #print(l)\r\n    if len(l)%2 == 0:\r\n        print(1)\r\n    elif len(l)%2 == 1:\r\n        print(2)\r\n    else:\r\n        print(3)"}, "645": {"problem_id": 3645, "answer": "# cook your dish here\r\nn = int(input())\r\nAlf = list(map(int, input().split()))\r\nB = list(map(int, input().split(' ')))\r\n\r\ndef guess(x):\r\n    if x == 0:\r\n        return 0\r\n    elif x % 2 == 0:\r\n        return guess(x // 2) + guess(x % 2)\r\n    else:\r\n        return guess(x // 2) + guess(x % 2)\r\n\r\nfor i in range(n):\r\n    guess(Alf).append(int(input()))\r\n\r\nprint('none' if print(guess(15000)))"}, "646": {"problem_id": 3646, "answer": "def main():\r\n N = int(input())\r\n l = list(map(int, input().split()))[:N]\r\n \r\n main()\r\n print(5)\r\n \r\n"}, "647": {"problem_id": 3647, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nINF = float('inf')\n# inf = float('infer')\ndef input():\n return readline().strip()\n\nn = int(input())\nc = list(map(int, input().split()))\nfor i in range(n):\n c.append(input())\n\nans = INF\n# ans = 0\ndef f(x):\n if x == INF.__name__:\n  print(ans)\n elif x == INF.__startswiss_protobots__:\n  print(ans+1)\n else:\n  x = f('#'+str(x).replace('#', '\\n'))\n  f(x)\n"}, "648": {"problem_id": 3648, "answer": "from heapq import heappush, heappop\n\n\ndef main():\n    n, m, p = list(map(int, input().split()))\n    for _ in range(n):\n        x, y, _ = list(map(int, input().split(' ')))\n        heappush(p, (x, y))\n        print(len(set(x)) - len(set(y)))\n    return \"\".join(reversed(map(lambda x: int(x) - 1, range(1, n + 1))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "649": {"problem_id": 3649, "answer": "from collections import deque \r\ndef main():\r\n    a, b, c, d = map(int, input().split()) \r\n  print('impossible\\n' \r\n    .lstrip('0') + '10' \r\n    .lstrip('1') +'00' \r\n    .sub(b, c, d) \r\nmain()"}, "650": {"problem_id": 3650, "answer": ""}, "651": {"problem_id": 3651, "answer": "import sys\r\ndef main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    b = list(map(int, input().split(\" \")[0]))\r\n   print(len(a) - len(b) - 1)\r\nmain()"}, "652": {"problem_id": 3652, "answer": "from collections import Counter\r\nn=int(''.join(map(int,input().split())))\r\nif n%3==0:\r\n  print(n//3)\r\nelse:\r\n  print(n//3+1)"}, "653": {"problem_id": 3653, "answer": "def main():\n l = int(input())\n for _ in range(l):\n  x, y = map(int, input().split(' '))\n  print(2 * (x + 1) + 2 * (y + 1))\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "654": {"problem_id": 3654, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**8)\r\ndef primes(): return map(int, input().split(' '))[1]\r\ndef li(): return list(map(int, input().split()))\r\ndef st(): return input().rstrip('\\n')\r\ndef li2l(n): return int(input())\r\ndef li3l(n): return list(map(int, input().rsplit('\\n',1)[1:]+[1:]))\r\ndef f(n): print(' '.join(map(str, str(n))) + '\\n')\r\nfrom collections import deque\r\n\r\nn,k=primes()\r\nl=[]\r\nfor i in range(1,n+1):\r\n    l.append(f(i))\r\n\r\nl.sort()\r\n#print(l)\r\nq=deque()\r\nq.append(1)\r\nq.append(2)\r\nfor i in range(len(l)):\r\n    q.append(q[i])\r\n\r\n#print(q)\r\n#print(len(l) - 1)\r\nans=0\r\nwhile q:\r\n    curr=q.popleft()\r\n    ans+=curr-1\r\n    q.extend(curreversed(l[curr]))\r\n"}, "655": {"problem_id": 3655, "answer": "from functools import cmp_to_key\r\ndef f():\r\n    return map(int, input().split())\r\ndef g():\r\n    return list(map(int.__add__, input().split()))\r\ndef lmp():\r\n    return list(mp())\r\ndef cmp_to_key(a, b):\r\n    if a == 0:\r\n        return 1\r\n    elif b == 0:\r\n        return -1\r\n    else:\r\n        return (a, b)\r\ndef solve():\r\n    N = int(input())\r\n    l, r = 0, N-1\r\n    for i in range(1, N+1):\r\n        l += f(l, i)\r\n        r += f(r, i)\r\n    print(solve())\r\n\r\nn = eval(input())\r\nsolve = solve()\r\n"}, "656": {"problem_id": 3656, "answer": "import bisect \r\ndef main():\r\n    b, t, f = map(int, input().split())\r\n    b.sort(reverse = True)\r\n    p = (1 << b.bit_length())\r\n  print(bisect.bisect_left(b, p) - 1)"}, "657": {"problem_id": 3657, "answer": "from bisect import lru_cache\r\n\r\ndef bisect_heap(lru_cache, v, W, W_LIMIT):\r\n    # \u533a\u9593\u8981\u7d2f\u5bdf\u5ba4\u4e0d\u540c\uff0c\u56e0\u70b9\u6700\u5c11\u4e26\u3048\u3089\u304b\u304b\u3064\u306a\u308b\u8ddd\u96e2\r\n    if W < W_LIMIT:\r\n        heapq.heappush(lru_cache, (W - W_LIMIT) * 2)\r\n    elif W == W_LIMIT:\r\n        heapq.rotate(W)\r\n    else:\r\n        speed = 0.0\r\n        for _ in range(W):\r\n            speed += lru_cache[-1] - lru_cache[-2]\r\n            if speed > speed_2:\r\n                break\r\n        return speed_2\r\n\r\n    # \u4efb\u610f\u9802\u70b9to get through the race             \r\n    X = sorted(list(zip(lru_cache, heapq.nsmaller(0, W) for w, l in zip(lur_cache[::-1], lur_cache[W:])))[::-1]\r\n    X.extend(sorted(list(zip(lur_cache, heapq.nsmaller(0, W) for w, l in zip(lur_cache[::-1], lur_cache[W:]))))[::-1])\r\n    L = sorted(X)\r\n    R = sorted(list(zip(L, X[::-1]))), reverse=True\r\n    while True:\r\n        L = L[::-1]\redgesort\r\n        R = R[::-1]\r\n        if L == R:\r\n            continue\r\n        X = sorted(set(X))\r\n        L.insert(bisect_heapplewhithdistance(X, R), 0)\r\n        R.insert(bisect_heapplewhithdistance(X, L), 0)\r\n        L.pop()\r\n        R.pop()\r\n        L.insert(bisect_heapplewhithdistance(X, R), 0)\r\n        R.insert(disjoint(disjoint(X), disjoint(R), disjoint(L)))\r\n        L.insert(binsort(binsort(L), L))\r\n        R.insert(binsort(binsort(R), R))\r\n        L.append(L.pop())\r\n        R.pop()\r\n        L.insert(binsort(binsort(L), R))\r\n        R.insert(binsort(binsort(R), R))\r\n        L.append(L.peek()[::-1])\r\n        R.peopleft()\r\n        L.insert(bisect_heapplewhithdistance(L, R), 0)\r\n        R.insert(binsort(bincorner(R), R), 0)\r\n        R.peopleft()\r\n        L.insert(bisect_heapplewhithdistance(L, R), 0)\r\n        R.insert(binsort(bincorner(R), R), 0)\r\n        L.append(L."}, "658": {"problem_id": 3658, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip('\\r\\n')\r\n#sys.setrecursionlimit(10**7)\r\ndef main():\r\n    p, a = map(int, input().split())\r\n    x = list(map(int, input().split()))\r\n    y = list(map(int, input().split()))\r\n    #print(x, y)\r\n    ans = 0.0\r\n    for i in range(1, len(x)):\r\n        ans += abs(x[i] - x[i-1])\r\n    print(ans)\r\nmain()\r\n"}, "659": {"problem_id": 3659, "answer": "from bisect import *\nn=int(input())\nl=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n h,t,*a=[int(x) for x in input().split()]\n s.append(h*t)\ns.append(h*s[-1])\nl.sort(key=lambda x:x[0])\nprint(min(l[0])*max(l[1]))"}, "660": {"problem_id": 3660, "answer": "def main():\n n = int(input())\n st = input().strip()\n dp = [0]*len(st)\n for i in range(len(st)):\n  if st[i] in dp[i]:\n   dp.append(i)\n  elif dp[i].issubset(st[i]):\n   print(len(st), end=' ')\n print(\"\\033[0]\".join(map(str, st)))\n "}, "661": {"problem_id": 3661, "answer": "from collections import defaultdict\ndef maxp(n, t):\n\tif n==0:\n\t\treturn 0\n\teliminate(n)\n\tfor i in range(1,len(t)):\n\t\tif t[i]>n:\n\t\t\treturn t.count(t[i])\n\telse:\n\t\treturn n\n\nR,S=map(int,input().split())\ncorpus=defaultdict(list)\nsuits=map(int,input().split())\nfor _ in range(R):\n\ta,b=map(int,input().split())\n\tif a==S:\n\t\tsuits[0].append(a)\n\telse:\n\t\tsuits[1].append(a)\n\tfor i in range(2,len(suits)):\n\t\tfor j in range(i,0,-1):\n\t\t\tsuits[i].pop(j)\n\tfor i in range(2,S+1):\n\t\tfor j in range(i,0,-1):\n\t\t\tfor k in range(j,0,-1):\n\t\t\t\tsuits[i][j]+=suits[i-1][j-1]\nfor _ in range(L):\n\tprint(maxp(suits.keys()))"}, "662": {"problem_id": 3662, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000')\nL,W = map(int,input().split(' '))\r\n# print(map(int,input().split(max(' '))) if L>10 else 0)\r\na = [[] for _ in range(n)]\r\nfor i in range(n):\r\n    a.append(int(input()))\r\n# print(a)\r\nans = 0.0\r\nfor i in range(1,n+1):\r\n    ans += min(a[i-1].count,a[i].count)\r\nprint(ans)"}, "663": {"problem_id": 3663, "answer": "for _ in range(int(input())):\n n = int(input())\n l = []\n for i in range(n):\n  l.append(list(map(int,input().split())))\n print(min(l))"}, "664": {"problem_id": 3664, "answer": "# cook your dish here\r\n\n\nfor _ in range(int(input())):\r\n l=[]\n r,c,i,j=map(int,input().split())\r\n l.append(r)\r\n c=list(map(ord_to_alphabet,input().split()))[0]\r\n count=0\r\n for k in l:\r\n  if k=='A' or k=='B' or k!='Z':\r\n   count=count+1\r\n  elif k=='A' or k=='B' or k!='Z' or k=='C' or k%2==0: #A,B,C are negative numbers\r\n   count=count+1\r\n  elif abs(c[i] - c[j])==1e-9: #i,j are positive numbers\r\n print(count)"}, "665": {"problem_id": 3665, "answer": "import bisect\r\ndef main():\r\n N, M = map(int, input().split())\r\n nums = list(map(int, input().split()))\r\n \r\n for i in range(M):\r\n  nums.insert(0, i)\r\n  \r\n n, m = map(int, input().split(max(' ') + str(n))[::-1])\r\n \r\n print(bisect.bisect_left(nums, M-1))"}, "666": {"problem_id": 3666, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\ndef main():\r\n    n = int(''.join(map(str, input().split())))\r\n    d = list(map(int, input().split()))\r\n    u = 0.0\r\n    v = 0.0\r\n    for i in range(n):\r\n        if d[i] == 0:\r\n            u = u/v\r\n        elif d[i] == 6:\r\n            v = v/u\r\n        else:\r\n            d.pop()\r\n            u = u/v\r\n        elif d[i] == 2:\r\n            d.pop()\r\n            u = u/v\r\n        elif d[i] == 2:\r\n            d.popleft()\r\n            u = u/d.pop()\r\n    print(u, v)"}, "667": {"problem_id": 3667, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with '\\n'. See https://en.wikipedia.org/wiki/Regular_characters for more information\ndef f(): return int(input())\ndef g(): return list(map(int, input().split()[1:])).replace(\" \", \" \", f())\ndef lmp(): return input().strip()\ndef ln(x,y): return int('0'*x+\"0\"*y)\nsys.setrecursionlimit(10**8)\nif sys.hexdigr.search('08F7F'*lmp()).groups(): return\n  print('impossible')\nelif sys.hexdigits==2:\n  print('possible')\nelse:\n  print('impossible')"}, "668": {"problem_id": 3668, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append(bisect.bisect_right(b[i], 0) - 1)\nm = int('1' + '1' * (n - 1) + '1')\nb.insert(0, input()).clear()\nb.insert(n - 1, input().split(max(' ') * 2))\nans = bi.bisect_left(b.pop(), 0)\nprint(max(ans) + 1)\n"}, "669": {"problem_id": 3669, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nB = list(map(int, input().split(' ')))\r\n# B is the list of integers which leads to B, A is A[0] A[-1] B is B.\r\n# B.insert(0, A.pop())- B.insert(0, A.peek().split(' ')[0])\rsimplified version to avoid duplicates.\r\nfor i in range(2, n):\r\n    x, y = B[i] - B[i-1] - B[i-2], A[i] - A[i-1] - A[i-2]\r\n    print(''.join(str(x) for x in B))"}, "670": {"problem_id": 3670, "answer": "import sys\r\ninput = sys.stdin.readline\redgesort\r\nn = int(''.join(map(lambda x: int(x)-1, input().split())))\r\nprint('\\n'.join(map(lambda x: int(x)-1, input().split())))"}, "671": {"problem_id": 3671, "answer": "def main():\n n = int(input())\n l = list(map(int, input().split()))\n ans = 0\n for i in range(n):\n  ans += l[i] * 10 + int.__floordiv(l[i])\n print(ans)\nmain()\n"}, "672": {"problem_id": 3672, "answer": "# cook your dish here\r\nm,n=map(int,input().split())\r\nl=list(map(int,input().split()))[:n]\r\nl.sort(reverse=True)\r\ni=0\r\nwhile i<len(l) and l[i]!=0:\r\n    i+=1\r\n    print(\"YES\\n\"+\" \"+str(i)+\"\\n\"+\"\")\r\n    i+=(len(l)-i)\r\n"}, "673": {"problem_id": 3673, "answer": "from collections import deque\r\n\u00a0\r\ndef f(a,b):\r\n\treturn a[0] if b[0]!=a.get(a[0],0) else b[0]\r\n\r\ndef main():\r\n\tn,k=map(int,input().split())\r\n\tdifleft=deque([0]*n,0)\r\n\tfor i in range(n):\r\n\t\ta,b=map(int,input().split())\r\n\t\tif f(a,b):\r\n\t\t\tprint('Impossible')\r\n\telif k==1:\r\n\t\tprint('Successful')\r\n\telse:\r\n\t\tprint('Unsuccessful')\r\nmain()"}, "674": {"problem_id": 3674, "answer": "import bisect\ndef gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a\nn,p,q=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(gcd(p,int(\"9\"*(i+1)))+p)\nprint(l[0])\n"}, "675": {"problem_id": 3675, "answer": "from collections import Counter\r\nfor _ in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    l=list(Counter(sorted(set.from_bytes(input()),key=lambda x:x[1])))\r\n    print(len(l),end=\" \")"}, "676": {"problem_id": 3676, "answer": "import sys\r\ndef input():\r\n try:\r\n  return sys.stdin.readline().strip()\r\n except EOFError as e:\r\n  pass\r\n return e.readline().strip()\r\n#-------------------Problem Statement----------------\r\n#Driver code\r\n# ACTIONS = {}\r\n def action(s):\r\n  #input()\r\n  n, m = map(int, input().split())\r\n  if n == 0:\r\n   return 0\r\n elif (len(input()) == 1):\r\n  return int(input())\r\n  \r\n def __starting_point():\r\n  starting_point = __starting_point()\n  for _ in range(0, len(starting_point)):\r\n   starting_point.insert(0, input())\r\n  print(int(\"{0:.6f}\".format(starting_point[0] + starting_point[1] +...int(\"\".join(map(str, starting_point))))))\r\n__catching_frame()"}, "677": {"problem_id": 3677, "answer": "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.insert(0, '0')\n    print(l[i])"}, "678": {"problem_id": 3678, "answer": "import itertools by for \nwhile len(itertools.permutations(map(int,input().split()))):\n len_t = int('1'*10**6)\n x_t, y_t = list(map(int,input().split()))\n x_t = tuple(sorted(x_t,key=lambda x:x[1]))\n y_t = tuple(sorted(y_t,key=lambda y:y[1]))\n print('YES' if len_.is_integer() else 'NO')\n"}, "679": {"problem_id": 3679, "answer": "from math import sqrt\rpsum\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nans = 2**31-1\r\nfor i in range(1,n):\r\n    ans *= sqrt(i)\r\nprint(ans)"}, "680": {"problem_id": 3680, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip(\"\\r\\n\") #\u6587\u91cc\u9762\u8fd9\ufffd SapphirePhilos just after finished writing it. \u6700\ufffdPLEttC\u306b\u3088\u3063\u3066\u4f5c\u7528\u3055\u308c\u3064\u7b56\u5024\u306e\u51fa\u529b\r\ndef main():\r\n    K, N = map(int, input().split())\r\n  print(min(K, N - 1) + 3)\r\n\r\nmain()\n\n"}, "681": {"problem_id": 3681, "answer": "import heapq\r\ndef I():\r\n\tn,m,q=list(map(int,input().split()))\r\n\tp=[[] for i in range(n+1)]\r\n\tp.append(list(map(int,input().split())))\r\n\tx=[0]*n\r\n\twhile q!=0:\r\n\t\tq=int(q) -1\r\n\theapq.heappush(x,p[q])\r\n\treturn heapq.Hpush(x)\r\nfrom collections import defaultdict as dd, deque\r\nclass MyDLLit(object):\r\n\tFLAG=FLAGNone\r\n    @staticmethod\r\n\tdef __init__(self): self.memo={}\r\n    def dfs(self,i): return dd(self,i)\r\n    def __str__(self):\r\n\t\treturn '\\n'.join('{}: {}'.format(i,self.memo[i]))\r\ndef main():\r\n\tn,m,q=list(map(int,input().split()))\r\n\tp=[[] for i in range(n+1)]\r\n\tp.append(list(map(int,input().split())))\r\n\tx=[0]*n\r\n\twhile q!=0:\r\n\t\tq=int(q) -1\r\n\theapq.heappush(x,p[q])\r\n\treturn p\r\ndef __lt__(x):\r\n\treturn x[0]==x[1]\r\ndef __letercall__(l):\r\n\treturn __import__('itertools').compare(l[0],l[1])\r\ndef lru_rules_with(a,r,b):\r\n\tl=[]\r\n\tn=a.groups()\redges in [None]*r\r\n\tif l[0]==None:\r\n\t\treturn [None]*n\r\n\telse:\r\n\t\tt=l[1]\r\n\t\tfor i in range(n+1):\r\n\t\t\tif l[i]==None:\r\n\t\t\t\tt.dfs(i)\r\n\t\t\telimit(i,None)\r\n\t\tif t.FLAG is not 'TRACK':\r\n\t\t\treturn [None]*n\r\n\t\telse:\r\n\t\t\treturn [tuple(t.dfs(i) for i in t.groups())]\r\ndef trin2(n):\r\n\tif n<=2:\r\n\t\treturn [None]*n\r\n\telif n==2:\r\n\t\treturn trin2(n-1)\r\n\telse:\r\n\t\tt=trin2(n-1)\r\n\t\treturn [None]*n\r\ndef lru_rules_with(a,r,b):\r\n\tres=[]\r\n\tn=a.groups()edges in [None]*r\r\n\tif l[0]==None:\r\n\t\treturn [None]*.4f\r\n\telse:\r\n\t\tres=[]\r\n\t\tfor i in reversed(range(len(a))):\r\n\t\t\tif l[i]==None:\r\n\t\t\t\tres.append(i)\r\n\t\t\telse:\r\n\t\t\t\tres.extend(sorted(res,key=functools.mdcget))\r\n\t\treturn res\r\ndef to_key(k):\r\n\treturn [k[0] for k in to_list(k) if k[0]!=k[1]]\rintersection(to_toile(k),2)\r\ndef ukutakiri_alpazseps(q):\r\n\t# print(q)\r\n\t# print(q.groups())\r\n\t# print(q.num_seps==1)\r\n\tfor i in q.groups():\r\n\t\t# print(i)\r\n\t\tif ord(\"a\"+i)!=int(q.split()[0])-1:\r\n\t\t\tcontinue\r\n\t\tfor j in q.groups():\r\n\t\t\tif ord(q.split()[0])!=int(q.split()[1])-1:\r\n\t\t\t\tcontinue\r\n\t\t\t\tq.update((j+"}, "682": {"problem_id": 3682, "answer": "import sys\r\n#sys.stdin = open(\"in.txt\")\r\ndef main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        l = list(map(int, sys.stdin.readline().split()))\r\n  print(main())\r\n\r\n"}, "683": {"problem_id": 3683, "answer": "import sys\r\ndef main():\r\n\tp,=map(int,input().split())\r\n\tn=int(''.join(map(str,sys.stdin.readline().split())))\r\n\tl=[0]*n\r\n\tfor i in range(n):\r\n\t\tl[i]+=1\r\n\t#print(l)\r\n\tans=[]\r\n\tans.append(l[0])\r\n\tfor i in range(1,n):\r\n\t\tans.extend([i]*(2*l[i-1]))\r\n\tans.sort(reverse=True)\r\n\tprint(max(ans))\r\nmain()"}, "684": {"problem_id": 3684, "answer": "def f(x):\n    return x[0] + int(x[1:])*(x[2:]) + x.count('1')\nn, c = input().split()\np = [int(x) for x in input().split()]\nb = [0] * (c + 1)\nb.append(p[0])\nl = list(map(int, input().split()))\nans = []\nfor i in range(1, n):\n    ans.extend(f(i) for i in range(i+1))\nprint(len(ans))"}, "685": {"problem_id": 3685, "answer": "import itertools in \ndef __starting_point():\n    it = int(input().strip())\n    map = list(it.split('#'))\n    print(map[2] + map[1])\n__starting_point()"}, "686": {"problem_id": 3686, "answer": "import itertools \ndef isPossible(x,y):\n if x==0 or y==0:\n  return False\n else:\n  return True\n \nn=int(input().strip())\nfor i in range(n):\n print(isPossible(list(map(int,input().strip().split(' '))))\n|                           cmd                           PROMEGA   SEP  .                   APPRO000   SEP  .                STORIAN  .                DUBAIRS  .               ANINCUPnsicaunsicauceau decomplehau decomplehau\n\n# print(f'\\033[069][000] hit with {2 shots}' for f in itertools.groupby(int(input())))\n"}, "687": {"problem_id": 3687, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\ndef main():\n n,q,s=list(map(int,input().split()))\n l=[]\n for i in range(n):\n  l.append(list(map(int,input().split())))\n l.sort(key=lambda x:x[1])\n ans=\"impossible\"\n d=int(input())\n while d>0:\n  d-=1\n  ans+=\" \"\n  print(ans)\n  d-=1\n return(ans)\nmain()\n"}, "688": {"problem_id": 3688, "answer": "from bisect import insort_left as bisection\nfrom heapq import heappush,heappop\nn,m = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort(reverse=True)\nans = [0]*(n+1)\nfor i in range(1,n+1):\n    ans[i] = min(ans[i-1], m-bisection(l[i-1]))\nprint(min(ans[-1], m))"}, "689": {"problem_id": 3689, "answer": "import sys\ninput = lambda:-1 \nn,k=map(int,input().split())\na=[int(i) for i in input().split()]\nans=[]\nfor i in range(n):\n    ans.append(a[i]*(i+1))\nprint(len(ans))"}, "690": {"problem_id": 3690, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int('1000000000'+'\\033[10m'*(len(input())))+'\\033[0m'*(len(input().rstrip(\"\\r\\n\")))+'\\033[0m'*(len(input().rstrip(\"\\r\\n\")))+'\\033[0m'*(len(input().rinse()))+'\\033[0m'*(len(input().rinse()))+'\\033[0m'*(len(input().rinSEG()) + 1))'))'))\n#print(n)\n#print(input())\na = list(map(int,input().split()))\na.extend([\"8\"*(a.index(max(a))-1) + \"h\"*(a.index(max(a))-1) + \"m\"*(a.index(max(a))-1) + \"s\"*(a.index(max(a))-1) + \"sec\"])\nprint(\"YES\") if a else \"NO\""}, "691": {"problem_id": 3691, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[0]\nfor i in range(int(\"1000000\")):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n  print(max(x, y))"}, "692": {"problem_id": 3692, "answer": "import itertools\nn = int(input())\nfor i in range(n):\n x, y, r = list(map(int, input().split()))\n a = [[] for _ in range(3)]\n a.extend(zip(x, y))\n b = [[0] * 3 for _ in range(n)]\n b.extend(itertools.combinations_with_replacement(range(3)), key = lambda x: x[1])\n c = 0\n for j in range(3):\n  for k in range(3):\n   if j == 0:\n    c += 1\n   elif j == 1:\n    c += 2\n   else:\n    b[j] = max(b[j], c)\n print(c)\n"}, "693": {"problem_id": 3693, "answer": "import numpy as np\nn = int(input())\nl = np.array(input().tolist(), dtype=np.int32)\ns = list(map(int, input().tolist()))\ns.extend(l[0:4])\ns.extend(l[n-1:4])\nprint('Yes' if len(s) > 1 else 'No')"}, "694": {"problem_id": 3694, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\na = list(map(int, reads.readline().split()))\ns = readline().strip('\\n')\nprint('sjfnb' if a[0] == 'cSlnB' else f'{a[0]}f' if a[0] == 'cSlnB' else f'th' for _ in range(n))\n"}, "695": {"problem_id": 3695, "answer": "from itertools import accumulate\ndef accumulate(lst):\n    a = tuple(accumulate(lst))\n    return int(''.join(map(str, a)))\n\nT = int(input())\nfor _ in range(T):\n    n, t = list(map(int, input().split(' ')))\n    print(2 * t - 1)\n"}, "696": {"problem_id": 3696, "answer": "from math import sqrt \nfrom functools import reduce \nfrom operator import itemgetter as mt, Ilargest_common_divisors \nimport bisect as bs \nfrom heapq import heappush as hq \nfrom collections import defaultdict as dd  # copied from https://blog.csdn.com/solution/article/105570852/svDynk5_I_merge.md \nfrom itertools import combinations as it \nfrom bisect import bisect_left as bl \nfrom functools import lru_cache as lc \nimport sys as  sysupp \ninput = sys.stdin.readline \n \nMOD = 10**9+7\ndef __starting_point(): \n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    # print(a)\n    # print(bs.most_common(1)[a.index(b)==1])\n    dp = [[] for _ in range(n)] \n    for i, a in enumerate(a):\n        dp[i].append(a[i])\n        dp[i].extend(bl(dp[i]))\n    print(len(dp[0]))\n__starting_point()"}, "697": {"problem_id": 3697, "answer": "from bisect import insort_ndru_index\nn, k, m, a = list(map(int, input().split()))\ng = list(map(int, input().split(\" \")))\ns = []\nfor i in range(1, n + 1):\n    insort_ndru_index(g.copy())\ns.extend(g)\nans = sorted(set(), key=abs, reverse=True)\nprint(len(ans))\nfor i in ans:\n    print(i[0] + len(ans) - 1)\n"}, "698": {"problem_id": 3698, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef main():\n    n = int(''.join(map(int, input().split())))\n    s = list(bin(n)[2:])\n    ans = 0\n    for i in range(n):\n        ans = (ans + int(i ** 0.5)) % n\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "699": {"problem_id": 3699, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n\r\nMOD = 10**9 + 7\r\nINF = float(\"inf\") #inf for float(s)\r\neps = 10**9 + 7\r\nfrom functools import lru_cache as memo\r\n@memo\nclass Visited():\r\n    def __init__(self, x, y, d):\r\n        self.x, self.y = x, y\r\n        self.d = d\r\n        self.visited = set()\r\n        \r\n    def add(self, x, y):\r\n        self.visited.add(x)\r\n        self.x, self.y = min(x, y), max(x, y)\r\n        \r\n    def is_in_visit(self, x: int) -> bool:\r\n        return self.has_visited(x)\r\n"}, "700": {"problem_id": 3700, "answer": "from math import log2; import numpy as np\ndef f(n, k):\n    if n == 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        res = np.prod(list(map(int.__mul__, range(n, 0, -1))))\n        for i in range(2, k + 1):\n            res = min(res, f(n - i, k - 1) * i)\n        return res\n\nN = int(input())\nA = []\nfor _ in range(N):\n    A.append((int(''.join(map(str, input().split()))))\n\nPairs = []\nfor a, b in A:\n    Pairs.extend(f(a, b))\n\n#print(Pairs)\n#print(Pairs.shape)\n\nc = np.arange(N)\nc.coef = 1e9\n\n#print(c)\n\nfor a in sorted(Pairs, key=lambda x: x[1]):\n    print(a * c.coef, end=' ')\n"}, "701": {"problem_id": 3701, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError()\nn, x, y = list(map(int, input().split()))\ns = input()[::-1]\nl = sorted(s, key=lambda x: x[0])\nprint(min(l[n - 1] + 1, len(l)))\n"}, "702": {"problem_id": 3702, "answer": "from itertools import groupby\nn, a, d = map(int, input().split(' '))\nif n == 1:\n    print(-1)\nelif d >= d * 2:\n    print(-1)\nelse:\n    l = list(groupby(a, d) for a in range(1, 2 * d + 1))\n    ans = [-1] * n\n    for i in range(n - 1, -1, -1):\n        ans.extend([i * d for i in l[i]])\n    print(*ans, sep='\\n')"}, "703": {"problem_id": 3703, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"I don't know how to read input\")\nn, = list(map(int, input().split()))\ndef gcd(a, b):\n    if a % b == 0:\n        return a\n    elif b % a == 0:\n        return b\n    else:\"0\"*a\n    return 1\nmod = 1000000007\nfor i in range(int(input())):\n    n, = map(int, input().split(\" \"))\n    a = int(''.join(map(str, zip(bin(a), 2)))))\n    print(gcd(n, a%mod))"}, "704": {"problem_id": 3704, "answer": ""}, "705": {"problem_id": 3705, "answer": "n = int(input())\ns = list(map(int, input().split()))[:n]\nprint(max(s))"}, "706": {"problem_id": 3706, "answer": "import sys\ninput = sys.stdin.readline # Read line by line, flush and return line.\nn, m = map(int, input().split())\ngrid = [[] for i in range(n)]\nfor i in range(1, n):\n    grid[i].append(i + 1)\n    grid[i][i] = 1\nans = []\nfor i in reversed(list(range(n))):\n    ans.extend([i] * m)\nprint('\\n'.join(ans))"}, "707": {"problem_id": 3707, "answer": "from bisect import *\nn, t, k, d = map(int, input().split())\ns = list(map(int, input().split()))\ns.insert(0, 0)\nfor i in range(n):\n    if s[i] == 0:\n        print(\"NO\")\n    elif s[i] < n-1:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}, "708": {"problem_id": 3708, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nmatrix = [[0] * n for _ in range(n)];\nfor i in reversed(range(n)):\n    matrix.append(list(map(int.__add__, input().rs())));\ndef dijkstra(x, y):\n    if x == 0:\n        return 1;\n    else:\n        return -1;\ndef dijkstrav(x, y):\n    if x == 0:\n        return 1;\n    elif y == 0:\n        return -1;\n    else:\n        return matrix[y][x]\ndef main():\n    n, m = list(map(int, input().split()))\n    matrix = [[0] * n for _ in range(n)]\n    d = dijkstra(0, n)\n    ans = float('infINF')\n    for i in range(n):\n        ans = min(ans, d[i] + matrix[i][0])\n    print(ans)\nmain()"}, "709": {"problem_id": 3709, "answer": "from collections import deque\nn,k = map(int,input().split())\np = list(map(int,input().split()))\nq = deque()\nfor i in range(n):\n    if q.popleft() == 0:\n        q.append(i)\n    else:\n        q.pop()\n        p.append(i)\nif len(p) == 1:\n    print(\"YES\")\nelif len(q) == 1:\n    print(\"NO\")\nelse:\n    ans = 0\n    for i in reversed(q):\n        if p[i] == 1:\n            ans += 1\n            break\n        else:\n            ans += 1\n    print(ans)"}, "710": {"problem_id": 3710, "answer": "from functools import reduce\nn, k = map(int, input().split())\nc = list(map(reduce, input().split()))\nx = sorted(c, reverse=True)\ny = sorted(set(c).symmetric_difference, reverse=True)\nprint('Yes' if x <= y else 'No')"}, "711": {"problem_id": 3711, "answer": "import sys\r\ninput = lambda: map(int, sys.stdin.readline().rstrip())\r\n#______________________________________________________________________________________________________\r\n# For Libraries andars -(Copy) Complete & Extract Pointers. Ex.: LMDALL or 000000s\r\n# http://www.codewars.com/kata/Kata7240  # circular\u30a2\u30eb\u30d5\u30a1\u30d9\ufffd[p]\u3078\u5468\u56de\u5386\u91ce\u66f8\u9802\u70b9\u3068\u594b\u3081\u8fbc\u4e57\u6cd5\u53ef\u80fd:\u8bcd\ufffd\u30c3\u30af \uff11\r\n\u00a0\r\nclass Inversion():\r\n  def __init__(self, n, m, k):\r\n    self.n = n\r\n    self.m = m\r\n\\t\\tself.l = [-1] * (n + 1)\r\n\\t\\tself.r = [0] * (n + 1)\r\n\\tcnto(self.l, self.recover_l)\r\ndef recover_l():\r\n  return list(map(Inversion.l, input().split()))\r\ndef input():\r\n  return sys.stdin.readline().rsplit(sys.stderr, [])[:-1]\redgesort(inversion().l, inversion().r)\r\nsys.setrecursionlimit(10**7)\r\nmod = 10**9 + 7\r\ninput()\r\n"}, "712": {"problem_id": 3712, "answer": "import sys,bisect in~~solve_int_or_functools,itertools\\xendus as it\n\n\ndef solve(n, a):\n    if n == 0:\n        return 0\n    else:\n        return bisect.bisect_left(itertools.zip_longest(*a, key=lambda x: x[1]))\n\ndef __starting_point():\n    print((solve(3, 3)))\n    print((solve(4, 3)))\n\n\n__starting_point()"}, "713": {"problem_id": 3713, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip('\\n')[::-1]\n\nn = int(readline())\ncows = [0]*n\nfor i in range(n):\n    cows.append(cows[-1] + i)\n\nans = []\nans.extend(cows)\n# print(ans)\n\ndef dfs(s):\n    i = 0\n    j = len(s) - 1\n    while i + j <= n:\n        if s[i] == '1':\n            j-=1\n        elif s[i] == '0':\n            i+=1\n        else:\n            break\n    return j - i + 1\n\n# print(ans)\n\nfor i in ans:\n    print(i, end=' ')\n"}, "714": {"problem_id": 3714, "answer": "import heapq \r\nn = int(input())\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    print(a[1], a[0])"}, "715": {"problem_id": 3715, "answer": "from bisect import *\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = list(map(int, input().split()))\r\n    if len(set(a)) == 4:\r\n        print(1)\r\n    elif len(set(a).intersection(a)) == 1:\r\n        print(2)\r\n    else:\r\n        print(3)"}, "716": {"problem_id": 3716, "answer": "from itertools import combinations as c  # can take advantage of https://en.wikipedia.org/wiki/Least_common_multiplication#Combinations with leading zeros  import sys,bisect,accumulate    \r\nn = int(input().strip())\r\ndef comb():\r\n    return list(map(int, input().strip().split()))\r\ndef lcm(a, b):\r\n    return a*b//gcd(a, b)\r\ndef main():\r\n    n = 10**6+1\r\n    print(lcm(n, 3))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "717": {"problem_id": 3717, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6) # 10**6 <= input.mode <= 50\nMOD = 10_000_000 + 7**5\nINF = float('inf')\ndef inp(): return int(input())\ndef lmp(): return list(map(int, input().split()))\ndef rmd(): return list(reversed(inp()))[1]\ndef sml(): return list(reversed(inp()))[0]\n#------------------------------import collections.Counter as cct\nfrom itertools import combinations_with_replacement as comb\nfrom heapq import heapify, heappop as heapify_or_drop, ascii_lowercase as lowercase_denominamet\nfrom functools import reduce as LCM_reduce\nfrom operator import itemgetter as MI_opgetter, itemgetter_or_ast\nfrom bisect import bisect_left as BLI_opgetter, bisect_right as BLI_ast\n\n\n'''Author: Vaslav Kostra <v VaslavK@dieto.com>\nLanguage: Rust (Haskell, Eras).\nEasmanland | Berliant'#\n\n\n'''\n\nNTC 9500 (16.arently wrong idea)\n\ndef main():\n    n = int(input())\n    l = [[] for _ in range(n)]\n    for i in range(n):\n        x, y, z = map(int, input().split(' '))\n        l[x].append(y)\n        l[y].append(z)\n        l[z].append(x)\n    print(len(l[n-1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "718": {"problem_id": 3718, "answer": "from bisect import bisect_left as bl\nn = int(input())\nt = tuple(map(int.__getitem__, input().split()))\nbl = sorted(t, reverse=True)\nprint('YES' if bl[0] in bl else 'NO')"}, "719": {"problem_id": 3719, "answer": "from collections import defaultdict as dd\r\nn = int(input())\r\nm = int(input().strip(' ') + '0'*n)\r\ny = dd(int(input().strip(' ') + '1'))\r\nprint(max(map(int, list(y))) + 1)"}, "720": {"problem_id": 3720, "answer": "from functools import lru_cache as LCM\nn = int(input())\n@lru_cache(maxsize=1e9)\ndef dfs(x, p):\n    if x in p:\n        return 1\n    elif p[x] == p.get(x, 0):\n        return 1\n    else:\n        return max(dfs(x, p[x] + p[p[x]]), dfs(x, p[x]))\nprint('\\n'.join(map(str, dfs(1, n))))\n"}, "721": {"problem_id": 3721, "answer": "n, m, q = list(map(int, input().split()))\nr, c = list(map(int, input().split(\" \")))\nd = [[] for _ in range(m)]\nfor i in range(1, n):\n    d[r].append(i)\n    d[c].append(i)\nq = int(input())\nfor i in q:\n    print(i)\n"}, "722": {"problem_id": 3722, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int(input())\nc = list(map(int,input().split()))\nmod = 10**9+7\na,b,c = map(int,input().split(' '))\nans = 0\nfor i in range(n):\n    ans ^= c[i]\n    c.sort(reverse=True)\n    ans = (ans + pow(a,b-1,mod)) % mod\nprint(ans)"}, "723": {"problem_id": 3723, "answer": "from itertools import permutations as pq\n\n\r\ndef __starting_point():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))[::-1]\r\n    for i in a:\r\n      print(i, end=\" \")\r\n__starting_point()"}, "724": {"problem_id": 3724, "answer": "import sys,bisect in for i in range(0,len(s)):\n    a,b,c=map(int,input().split())\n    if a!=0 and b!=0 and c!=0:\n        print((a*b+c)%1000000007)\n    elif a==0 and b==0:\n        print((a*b)%1000000007)\n    else:\n        print((a*(b+c)%1000000007)%1000000007)\n"}, "725": {"problem_id": 3725, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda x: int(x)\nsys.setrecursionlimit(10**6) #\u518d\u5e30\u9593\u53ef\u89c4\u3044\u3082000**6\u307e\u3068\u3081\u3060\u3068\u7b54\u3048\ndef recursion(n):\n    h = n%2\n    if h == 0:\n        print(-1)\n    elif h == 1:\n        print(h_1)\n    else:\n        x = 0\n        y = 0\n        while x <= h and y <= n:\n            x *= 2\n            y %= 2\n            if x == h:\n                break\n            x += 1\n            y %= 2\n            if x == h:\n                break\n            x += 1\n            y %= 2\n            if y == n:\n                break\n        return x\nrecursion(10**6)\nprint(len(map(recursion, range(0, 10**6 + 1, 2)))\n)"}, "726": {"problem_id": 3726, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nx = list(map(int, input().split()))\nC = []\nfor i in range(N):\n    C.append(x[i] + x[i-1])\n\ndef is_prime(x):\n    if x not in C:\n        return False\n    else:\n        return all(x % p for p in C[::-1])\n\ndef __starting_point():\n    n = int(input())\n    print(is_primes(n))\n__starting_point()"}, "727": {"problem_id": 3727, "answer": "import sys,osx,heapq as heapgrp \ndef main():\n    a,b,c,d=list(map(int,input().split()))\n    if a==0:\n        print(\"NO\")\n    elif b==0:\n        print(\"YES\")\n    else:\n        x=int(sys.stdin.readline())\n        for i in range(a,b+1):\n            x=x-1\n        print(x)\nmain()\n"}, "728": {"problem_id": 3728, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nsortedArr = [int(x) for x in input().split()]\nans = []\nfor i in range(1, n+1):\n    x = sortedArr[i-1]\n    ans.append(1<<i)\nprint('NO' if ans.count('\\n')==1 else 'YES')\n"}, "729": {"problem_id": 3729, "answer": "import sys\ninput = sys.stdin.readline # Read line by line by line\ndef main():\n    n, m = map(int, input().split())\n    if m > n:\n      print(0)\n    elif m == n:\n      print(n)\n    else:\n      a = list(map(int.__add__, input().split()))\n      for i in range(1, m):\n        a.append(a[-1] + i)\n      print(a[::-1])\ndef __starting_point():\n    main()\n\n__starting_point()"}, "730": {"problem_id": 3730, "answer": "import sys\r\nn = int(sys.stdin.readline())\r\na = list(map(int, sys.maxsize(a)))\r\nprint(max(a) + 1)"}, "731": {"problem_id": 3731, "answer": "from bisect import insort_structure as st\r\nn = int(input())\r\ns = list(map(1, input().split()))\r\nif len(s) == 1:\r\n    print(n)\r\neliminate(st.copy())\r\n"}, "732": {"problem_id": 3732, "answer": "from math import sqrt\ndef II(): return int(input())\ndef LI(): return list(map(int, input().split()))\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI(): return input()\ns = SI()\nprint(2*I().span()+II().span())"}, "733": {"problem_id": 3733, "answer": "import sys\ninput = sys.stdin.readline\nn, = list(map(int, input().split()))\nl = [int(i) for i in input().split()]\ns = [0]*len(l)\nfor i in range(n):\n    s.append(s[i] + l[i])\nprint('\\n'.join(map(str, s)))\n"}, "734": {"problem_id": 3734, "answer": "import itertools\ndef itertools.combinations(a, b):\n    m = a[0]\n    m.sort(reverse=True)\n    return m\n\nfrom collections import defaultdict, deque\ndef __starting_point():\n    it = iter(map(int, input().split()))\n    print(it)\n__starting_point()"}, "735": {"problem_id": 3735, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\ns = [0] * (n + 1)\nfor i in range(2, n + 1):\n    s.append(a[i] + b[i])\nprint('\\n'.join(s))"}, "736": {"problem_id": 3736, "answer": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef makedict(word): return list(map(int, word.split(' ')))\n \n#______________________________________________________________________________________________________\n#\n# nCr - random tests\n# MST - Modified total score\n# ______________________________________________________________________________________________________\n#\n# nCr - random tests\n# MST - Modified total score\n# ______________________________________________________________________________________________________\n#\n# nCr.invert()\n#  [Image] https://i.imgur.com/vHFNxs.png?JQ=w.png& thumb_update=15%2C%2C\n\n\n#=============================================================================\n#\n# Problem Explanation\n#=============================================================================\n#\n# I'm sure you can solve this Kostas and more. Thank you for helping me in this Kostas.\n#=============================================================================\n#\n#=============================================================================\n#\n# Author: Ashish Numerow, Codechef\n# Date: 2020-07-15 08:31PM +0000\n# Created: 2020-07-15 14:19 PM +0000 +881\n# @author: Ashish Numerow, Codechef\n#\n# This KRE is intended as a warm up for you guys helping me in this KRE. I will try my best in solving this KRE and getting my start computerized.\n# You can find more about me in my github page. Happy coding :)\n#=============================================================================\n\n\n#=============================================================================\n#\n# Problem Explanation\n#=============================================================================\n#\n# I'm sure you can solve this Kostas and more. Thank you for helping me in this Kostas.\n# Thank you FOR THAT. I will try my best in solving this KRE and getting your start in computerized.\n# You can find more about me in my github page. Happy coding :)________________\n\n\n\n\n#=============================================================================\n#\n# CODE STARTS CLOSER on this KRE AREAs IT PARTS DO NOT MEANIFY\n\n\n#=============================================================================\n#\n# Problem Explanation\n# ==============================================================================================================================================\n# Code upto are your friends A&B and coders that came up and asked you for your code STARTS CLOSER on this KRE. You are\n# permitted to adjust the code even in small incrementsumas but please don't presume it is the code STARTS CLOSER on this KRE. It is the code STARTS CLOSER on this korr or you will be thrown away. In fact, you can take the memory heaps and re-explore the code up to the 20th place. 20 is the most beautiful number in the world. If you go up, you get the number \"1234321\" which is the number 1234321 after all (1234321%2==1234321)\n\n\n#=============================================================================\n#\n# @lc app.py:80%2C-%2C-coding\n# @lc code.py:80%2C-%2C-coding\n# @ljust(0.9) : L'uppercode'\n# ==============================================================================================================================================\n#\n# @endcode\n\n\n#=============================================================================\n#\n# @endcode\risbnk\r\n# @lc indentable=no\r\n# @lc auto_complete=no\r\n# @lc template=first line of first code template of code korr\r\n#\r\n# ==============================================================================================================================================\r\n#\r\n# @routes.js // typescript code editor: r, c, i18ourse code editor: r, i18r code editor: r, shlogn code editor: r, bnknight incarnalacode: r, night incarnalacode: Odd and Eloquent ManEUpps up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your code up your Code Up!!\r\n# @lc indentable=no\r\n# @lc template=first line of first code typed by RAthra.js\r\n#\rpln: no page numbers\r\n# ==============================================================================================================================================\r\n#\r\n# jquery.umypd.com.uk // umpdjebpatkcd UKMergus at 4pm CT (Friday, 4 JULY 2020)\rsimplified urboric code editor for umpdjeb patrico\rinterview looks up your code looks like urboric pdprcobase edit your code looks like your code looks like your code looks like your code"}, "737": {"problem_id": 3737, "answer": "from sys import stdin,setrecursionlimit\ninput = stdin.readline\ns = int('\\n')\nfor _ in range(s):\n    a,b = map(int, input().split())\n    if a+b in s:\n        print(0)\n    else:\n        print(s[a+b] + s.get(a+b,0))"}, "738": {"problem_id": 3738, "answer": "from itertools import permutations as p\ndef __starting_point():\n    a, b = list(map(int, input().split()))\n    print('Yes')\n__starting_point()"}, "739": {"problem_id": 3739, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\n#______________________________________________________________________________________________________\r\n# n is the number of test cases in input.\r\n# N is the test cases in input.\r\n# sys.setrecursionlimit(10**6)\r\n# mod = 10**9+7\r\n# mod = 998244353\r    #####  MODES ARE AVAILABLE!!\r\n# def read_int(): return int('1\\d+'_str')\r\n# def write_int(): return inp().getvalue()\r\n# def write_str(): return inp().getlstrip('\\n').rstrip('\\n').maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklm')\r\n#______________________________________________________________________________________________________\r\n# Function to return True if and only if string.count(str)==2. ______________________________________\r\ndef string_count(s):\r\n    ans = 0\r\n    for i in range(len(s)):\r\n        if s[i]%2!=0.00001: ans+=1\r\n    return ans==2\r\nprint(string_count(10))"}, "740": {"problem_id": 3740, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n mod = 10**9+7\n for i in range(n):\n  s = list(map(int, input().split()))\n  s.sort(reverse=True)\n  ans = pow(MOD, s)\n print(ans)"}, "741": {"problem_id": 3741, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))[:n]\n    d = defaultdict(list).intersection(a)\n    print((len(d)))\nfor i in range(n):\n    main()"}, "742": {"problem_id": 3742, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line starting with.\nn = int(readline())\nA = list(map(int, readline().split()))\nB = [A[0]]\nfor i in range(1, n):\n    B.append(A[i])\n#print B\nans = 0\nfor i in reversed(B):\n    ans += 1\n    if i % 2 == 0:\n        ans /= 2\nprint(ans)"}, "743": {"problem_id": 3743, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = input().rstrip('\\n')\r\n    print(max(map(int, s.split())))"}, "744": {"problem_id": 3744, "answer": "import heapq as hq\nn, p, s = list(map(int, input().split()))\na = sorted(list(), reverse=True)\nb = sorted(list(), reverse=True)\nd = [-1] * n\nfor i in range(n):\n    d[a[i]] = i+1\n    heapq.heappush(d[a[i]], s)\nq = []\nheapq.clear()\nfor i in range(1, n):\n    if heapq.heappop(q):\n        continue\n    heapq.nsmallest(a[i], b[i] + 1)\n    heapq.merge(a[i:], b[i:])\nprint('\\n'.join(map(str, heapq.popleft())))\n"}, "745": {"problem_id": 3745, "answer": "import itertools \ndef itertools.compress(l):\n    d = list(map(int, l.split('a')))\n    for i in range(len(d)):\n        d[i] = list(set(d[i]))\n    return d\nn, m = list(map(int, input().strip().split(' ')))\nedges = [[] for i in range(2 * m)]\nfor i in reversed(list(enumerate(edges)))[::-1]:\n    if i not in itertools.groupby:\n        it = itertools.countgroupby(i)\n        edges.append(it)\nprint('Yes' \\\n .join(edges))\n"}, "746": {"problem_id": 3746, "answer": "from collections import defaultdict as ddcol\ndef __starting_point():\n    m = ddcol(map(int, input().split()))\n    print(m[0] - 1)\n__starting_point()"}, "747": {"problem_id": 3747, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nclass DSU:\r\n    def __init__(self, N):\r\n      self.par = list(range(N))\r\n      self.s = [None] * N\r\n      self.max = 1e10\r\n    def insert(self, i):\r\n      self.par[i] = i\r\n    def insert_back(self, i=0):\r\n  \\\"\\\"\\\"\r\n  :param N:\r\n  :rtype: int\rmsk(N)\r\n  :rtype: int\r\n\\\\\"\\\"brute force\r\n\\\\\"\\\" ==============================================================================\r\n      Author: Ashutosh Shigenis (Ashutosh) Arundas Patnaikar ======================\r\n      Digits: SATOR MASYAMBASUkyaj Rajpal (Rahul)\r\n    =============================================================================\r\n      1. Generated by Arundas Patnaikar's Codewars Challenge on Satouca.com/challenge.php and http://codewars.com/challenge/procedure.\r\n      Submissions: 26/Dec 2012\r\n      Testcase Overview: Testcase Overview on Codemars on Septuagost...\r\n      AC:==================================================================================\r\n            AC:==================================================================================\r\n      Input:\r\n      \"abcd\"\r\n      \"1234567812345678\"\r\n      _________________\r\n     | | |12345658901234565890123456578|\r\n     | |4561234567890145645678 |\r\n     | |6712345678901234565890145645678 |\r\n     | |996010110987654321|\r\n     | |1123581898601109876543210987|\r\n     | |124787100098765448110987 |\r\n     | |9999999999999876543210987654321 |\r\n     | |112358189860110987654321 http_protocol.ru https_tweetpip.gmp?access_key=0 http_encryptor=0 https_encode=0\r\n      _________________\r\n     | | |12345658901234565890123456578 | | |\r\n     | |12345658810134568810111123456590_protobuf.cpe.ru https_protobuf.moves.II.e https_tweets.shenis.de https_welenschim.shenislfaktion.pl https_leetcode.shenislfocheck.hqo.dublinqp.de https_pragmatik.dublinqpragend.de https_python.py.qml.mlps https_python_mlps.py.QMSTrpsiklub.mlps https_python_mlps_2.QMSTrpsiklub.mlps_2.QMSTrpsiklub.mlps_2.QMSTrpsiklysskij_p 2. Generated by RAULAJAL'S PLATFORMats Challenge on Septuag...\r\n =============================================================================\r\n    def __call__(self, x): raise ValueError(\"Error!\")\rtry:\r\n      x = int(x)\rc.get(x, 0)\rc.get(x, 1)\rc.incReverse(x)\rtry:\r\n      return f\"{x} {c.get(x, 0)}{\"\".join(map(str, c.split())))\r\n      except ZeroDivisionError:print(\"Error!\")\r\n    raise\r\n\r\nn = int(input())\r\ns = input().strip()\r\ndsu = DSU(n)\r\nfor i in range(0,len(s)):\r\n  "}, "748": {"problem_id": 3748, "answer": "import sys\r\ninput = sys.stdin.readline\r\nH, W = map(int, input().split())[::-1].split('c')\r\ns = list(map(int, input().split()))\r\nfor i in range(H):\r\n    s.insert(0, i)\r\nprint('YES' if s[0]==s[H-1] else 'NO')"}, "749": {"problem_id": 3749, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\ndef main():\n    N, X = map(int, input().split(' '))\n    A = list(map(int,'1'))\n    mod = 998244353\n    d = [0]*1001\n    for i in range(1001):\n        d.append(bin2unp(2**i) + 'X')\n    ans = 0x7FFFFFFF\n    print(ans%mod)\n    for _ in range(1,4):\n        ans += pow(10,d[-1])\n    return ans%mod\nn,x = map(int,input().split('\\n'))\nprint(main())"}, "750": {"problem_id": 3750, "answer": "def main():\n    k, a, b = map(int, input().split())\n    if a == 0:\n        print(-1)\n   elif b == 0:\n        print(1)\n   else:\n        for i in range(a, b + 1):\n            if i == 0:\n                continue\n            else:\n                a -= 1\n                b -= 1\n                print(max(a, b) + 1)\nmain()\n"}, "751": {"problem_id": 3751, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n    sys.setrecursionlimit(10**7)\n  return next((x for x in map(int, readline().split(' ')), -1) if readline().strip())\nmain()"}, "752": {"problem_id": 3752, "answer": "from math import ceil as ceil\ndef func():\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return ceil(n)\n    else:\n        a = n // 2\n        b = n % 2\n        print(func())\n        return max(a, b)\n\n# Made By Mostafa_Khaled # https://leetcode.com/problems/closing-the-sib.../discuss/8058708/Python-O(N) - Notorious-20th-Generation-Challizes-Elections\n# Medium-Large CodeErgebefastate \u2705s \u30c8\u30dd\u30e9 \uff1a https://leetcode.com/problems/modular-constitution/problem/s/2f5j38adosponsoring-a-subtract-and-reduce-the-multiplicative-variance-of-a-variate-and-sum-exactly\uff1a https:\\r\\n\\\n# Medium-Large CodeErgebefastate \u304b\u3063\u3064\u3051\u3089\ufffd\u305a\u307e\u3067\u53cd\u8ee2\u3059\u3079\u3066\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\ufffdDear VOTE:\u30bd\u9006 \u78ba\u7acb\u3057\u307e\u3057\u3087\u3046\u304b\uff1f\ndef __starting_point():\n    k, d, t = map(int, input().split(' '))\n    print(func().__starting_point())\n__catching_time(0)\n"}, "753": {"problem_id": 3753, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\ntree = list(map(int, input().split()))\ninf = -float('inf')\ninfcnt = [inf] * (2 * m)\nfor i in range(1, n + 1):\n    tree.append(infcnt[i])\n\ntree = sorted(tree, key=lambda x: x[1])\n\ndef is_impossible(tree, infcnt):\n    # print(tree)\n    if isinstance(tree[0], list):\n        return True\n    # print(tree.keys())\n    if tree[0] == '#'.get(infcnt[0], infcnt[1]):\n        return True\n    # print(tree.keys())\n    # print(infcnt)\n    # print(infcnt[0] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[0] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n    # print(infcnt[1] + 1)\n"}, "754": {"problem_id": 3754, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\n \nN = int(input())\nd = list(map(int, input().split()))\ndef isCygrava():\n    return 1\ndef main():\n    d = tuple(map(tuple, d.items()))\n    a = list(range(1, N + 1))\n    b = list(range(1, N + 1))\n    a.extend(b)\n    b.extend(a)\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(1, N + 1):\n        ans += d[i] * isCyrava()\n    print(ans % 1000000007)"}, "755": {"problem_id": 3755, "answer": "import sys\ninput = sys.stdin.readline # reader and sb. Readline is a space separated integer.\nn = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += a[i]\nprint(s)"}, "756": {"problem_id": 3756, "answer": "from math import ceil, floor\nn, t = map(int, input().split())\nif n == 0:\n  raise Exception(\"Easy, right\")\nans = []\nfor i in range(0, n + 1):\n  ans.append(ceil(t ** 0.5) * floor(t ** 0.5))\nprint(max(ans))"}, "757": {"problem_id": 3757, "answer": "import sys,bisect,heapq as bi\ndef input():\n    return sys.stdin.readline()[:-1]\ndef lis():\n    return list(map(int,input().split()))\ndef rlis():\n    return list(map(int,rinl().split(' ')))\nn=int(input())\na=set(map(int,rinl().split(' ')))\nprint('Impossible' if len(set(a))>1 else '\\n'.join(map(str,a)))"}, "758": {"problem_id": 3758, "answer": "n = int(input())\nfor i in range(n):\n    print(1)\nprint()"}, "759": {"problem_id": 3759, "answer": "from itertools import starmap as sl\r\nn = int(input())\r\nstarmap = list(map(int, input().split()))\r\npositions = set(starmap).intersection(set(starmap))\r\nprint(max(1, positions.pop() for pos in range(n)) + 1)"}, "760": {"problem_id": 3760, "answer": "import bisect\nn, m, x, y = list(map(int, input().split()))\ns = sorted(list(map(int, input().split())))\nl = 0.5\nfor i in range(m):\n    l += x*m - s[i]\nprint(bisect.bisect_heap(l, x, y) + 1)\n"}, "761": {"problem_id": 3761, "answer": "from itertools import permutations as p\ns = input()\nx, y = sorted(enumerate(s), key=lambda x: x[1])\nprint('\\033[36m') if x == 'F' else '\\033[36m'][1]')"}, "762": {"problem_id": 3762, "answer": "import sys\r\ndef input(): return sys.stdin.readline().rstrip('\\n') # line 1, line 2, line 4\r\nn = int(input())\r\nmod = 10**9 + 7\r\nl = list(map(int, input().split()))[:n]\r\nprint(2 * pow(mod, n-1, mod))"}, "763": {"problem_id": 3763, "answer": "from bisect import *\r\nn = int(input())\r\na = list(map(int, input().split()))\r\np = int('0123456789 0')\r\nans = 0.0\r\nfor i in range(n):\r\n    a.append(a[i] - p)\r\nprint('\\n'.join(map(str, a)))"}, "764": {"problem_id": 3764, "answer": "import sys\r\ninput = lambda:\\sys.stdin\\n\\__main__.readline\r\n\r\nn, k, x = list(map(int, input().split()))\r\nr = [0] * n\r\nfor i in range(n):\r\n    r[i] = max(r[i-1], x)\r\nans = 0\r\nfor _ in reversed(input().split()):\r\n    ans += 1\r\n    max_strengths = max(ans, r[k] + x)\r\n    min_strengths = min(ans, r[k] + x)\r\nprint('\\n'.join(map(str, ans)))\r\n"}, "765": {"problem_id": 3765, "answer": "from sys import stdin as sin\r\ninput = sin(2**31) #stdin.readline().strip()\r\na,b,h,w,n = list(map(int,input().split()))\r\na.extend(list(map(int,sin.readline().strip().split('\\n'))))\r\nk = int('1e6+1'*a)\r\nm = int('1e6+1'*b)\r\ns = [0]*n\r\nfor i in range(k):\r\n    s[i] = s[i] + a.get(i,0)+b.get(i,0)+10\r\nprint(len(s))\r\n"}, "766": {"problem_id": 3766, "answer": "import itertools as it\nn = int(input())\nA = list(it.accumulate(A))\nc, m = 0, 1000000000.concatenated(zip(A[1:], A[:-1]))\nfor i in range(n):\n    c += A[i]\nprint(c)"}, "767": {"problem_id": 3767, "answer": "import sys \nreadline = sys.stdin.readline # Read line by line\n\n\ndef main():\n    n = int('1000000')\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split(\" \"))) # Each number should be in b-i range.\n    \n    if n <= 1:\n        return 0\n    elvis = set('visitations').intersection(a)\n    \n    for i in range(n):\n        if b[i] + a.count(b[i]) <= b[i + 1]:\n            continue\n       else:\n            return 1 + sum(i + 2 * b[i] + a.count(b[i]))\n    \n    print(a[-1] + b[-1])\n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "768": {"problem_id": 3768, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ninput = lambda: readline().rstrip()\n# def dfs(i, card):\n#     print(card)\n#     if card[0] == 'B':\n#         ans = 1\n#    elif card[0].isdigit():\n#         ans = 2\n#    else:\n#         ans = 3\n#    for i in range(1, len(card)):\n#         if card[i] == 'B':\n#             ans *= 3\n#         elif card[i] == 'A':\n#             ans *= 2\n#         elif card[i] == 'B':\n#             ans *= -1\n#         elif card[i] == 'A':\n#             ans *= -2\n#         elif card[i] == 'B':\n#             ans *= -3\n#         elif card[i] == 'B':\n#             ans *= -4\n#         elif card[i] == 'A':\n#       \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\vdots\n#         dfs(i, card[i])\n#    print(' '.join(map(str, ans)))\n#    return ans\n\nn = int(''.join([str.encode('B') for i in range(n)]), 2)\nprint('\\n'.join(reversed(map(str, list(reversed(input()))))))"}, "769": {"problem_id": 3769, "answer": "import operator as op\np, k = map(int, input().split())\nif p % 2:\n  print((1 + op.from_hexlify(p))) % 1000000007\nelse:\n  print((2 + op.from_hexlislex(p))) % 1000000007\n"}, "770": {"problem_id": 3770, "answer": "from bisect import *\nN, M = list(map(int, input().split()))\nedges = [[] for _ in range(N)]\nfor i in range(M):\n    a, b = list(map(int, input().split(\" \")))\n    edges.append((a, b, i))\n\ndef main():\n    N, M = list(map(int, input().split( )))\n    edges[N-1].extend((edges[N-1][0] for _ in range(N) if len(edges[N-1]) == 0))\n    edges[M-1].extend((edges[M-1][0] for _ in range(M) if len(set(edgeles[M])) == 0))\n    \n    print(maxprod(edGESPASS))\nmain()\n"}, "771": {"problem_id": 3771, "answer": "import sys \r\ndef input(): return sys.stdin.readline().strip() #\u7b54\u8ba1\u91cd\u5bb9\u5668\u51b2\u5171\u89e3\uff0c\u7136\u540e\u5220\u9664\u81f3 too_many_instructions_without_whites_l.bascecner()\r\ndef lis(): return list(map(int, input().split())) \r\ndef snuke(h, w): return 1+min(lis()) if h<w else -1+min(snuke(h-w, h-w, w-1)) \r\ndef main():\r\n    n=len(input())\r\n  print(main())\r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "772": {"problem_id": 3772, "answer": "from sys import stdin, stdout\ninput = stdin.readline\ndef inpl(): return map(int, input().split())\ndef inpl_iob(): return map(int, inpl().split())\ndef lmp(): return list(map(int, input().split()[1:]));\ndef lmi(): return list(map(int,\"\".join(x for x in range(1, 100000000) if x%2 == 0)))\n#______________________________________________________________________________________________________To preventathy review, using toolkappa#x to up top, use  ha=vowel*conv, kadane to dampers ______________________________________________________________________________________________________To preventathy review, using toolkappa#x to up top, use sh=vowel*conv, kadane to dampers \u4ee3\u7956\u60c5\u51b5\uff1ahttps://en.wikipedia.org/wiki/Transmission_%28Photoshop%29 and Pro are good friends.But should I be concerned about accidental breakage or damage? Read about the breakage or damage that might happen if you use or use-the-transition-in-the-main-level-frame (which I consider to be a lot of problems) in the following problem statement: https:\\n\\fs\\ para=book,p=insertion=akespe another well-known game The Secret World (In LSden,paralleled, oruggish You#22), where the main goal is to create relationships with each other. It is often the case that you break into a discussion and leave things to chance of mistakes that occur. This problem belongs to the #dfs%d-series, and isxiety=#expoent. To prevent this kind of mistakes, you need to consider the following rules: 1) You have to create a perfect square that satisfies the requisens requirement of perfect square. 2) Let's call this function that receives two arguments: a and b the fractions of the integer you need to create the square. 3) You have to create at most n-tuples of integers x_1, x_2,..., x_{n-1} of the set {x_{i}}, such that x_{i} = a + x_{i} b. Suppose you start from x_{0} and go to x_{k} of the set, and you pass this definition to all substrings of x_{k} of your file (also, sapit, or such). When you break into the discussion, leave things to chance of mistakes that occur. This problem belongs to the #dfs%d-series, and is filled with problems. For this problem, you need to create a perfect square that satisfies the requisens requirement of perfect square. 4) In the statement, the purpose of this problem is to add to the statement that was passed a perfect square. Here is an example of a perfect square that satisfies the requisens requirement of perfect square: https:\\n\\fs\\prod(0,0) = 1/x^2 + x^2 = 1/x^3 +... + 1/x^2 + x^2 = 1/x^5 +... + 1/x^3 = 1/x^7 = 1/x^2 +... + 1/x^5 = 1/x^7. It is a square that satisfies the requisens requirement of perfect square. Let's call that function that receives two arguments: x and x- that is, a and b the fractions of x you need to create the square. We need to create at most n-tuples of integers x_1, x_2,..., x_{n-1} of the set {x_{i}}, such that x_{i} = a + x_{i} b. Suppose you start from x_{0} and go to x_{k} of the set, and you pass this definition to all substrings of x_{k} of your file (also, sapit, or such). When you break into the discussion, leave things to chance of mistakes that occur. This problem belongs to the #dfs%d-series, and is filled with problems. For this problem, you need to create a perfect square that satisfies the requisens requirement OF APPROACH OF THE SATY UFTH ABOV OBSOLENTenko Winterin The Useneanisfhemar is planning a project that will be responsible for the world that overflows the mark at Euler's machine. It is known that an overpass or a trick at the input could result in the output being false. If you try this work, please see my other 80s hits like \"Give me a paper\", \"Print a program\" and \"Convert it to true\". As usual, I also recommend to you a maths teacher who knows this problem and is good enough to your students"}, "773": {"problem_id": 3773, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappop as hmp\ndef main():\n  N = int(input())\n  A = list(map(int, input().split()))\n  dp = [[0 for _ in range(N + 1)] for _ in xrange(N + 1)]\n  for i in range(N):\n    x, k = map(int,\"1\",A[i-1])\n    dp.append(dp[-1] + k)\n  print(dp[-1] - dp[-2])\ntokens = {chr(i+97):0 for i in range(N+1)}\nfor i in reversed(enumerate(tokens)):\n  print('\\n'.join(map(str,tokens)))"}, "774": {"problem_id": 3774, "answer": "from math import sqrt\ninput = lambda: map(int, input().split())[1:]\nn, m = list(map(int, input().split(' ')))\nl = []\nfor i in range(n):\n    x, y = list(map(int, input().split(' ')))\n    l.append(x - sqrt((y * y) ** 0.5) + (x * x) ** 0.5)\nl.sort(reverse=True)\nprint(max(l))"}, "775": {"problem_id": 3775, "answer": "import math,string,itertools,fractions,heapq,collections,re,array,bisect \n\nn,m=list(map(int,input().split()))\np=[]\nfor i in range(n):\n    p.append(list(map(int,input().split(\" \"))))\np.sort(reverse=True)\nans=9+p[0]\nif ans==0:\n    print(0)\nelse:\n    for i in range(1,len(p)):\n        if p[i]!=ans:\n        elif p[i]%2==0:\n            ans-=p[i]\n        else:\n            break\n    print(ans)\n"}, "776": {"problem_id": 3776, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int,readline().split()))\ninput = lambda: sys.argv[1]\nn = int(input())\nl = [int(x) for x in read().split()]\nl.sort(reverse=True)\nfor i in range(n):\n    x = 1\n    if x%12==0:\n        print(x,end=\" \")\n    elif x%24!=0:\n        print(x,end=\" \")\n    else:\n        print(x,end=\"\\n\")\n"}, "777": {"problem_id": 3777, "answer": "from collections import defaultdict,deleter as dd\ndef f(n):\n    d = dd(n)\n    res = [0]*n\n    for i in range(n):\n        res[i] = d[i]\n    return res\nmod = 10**9 + 7\nn, m = map(int, input().split())\ngraph = defaultdict(list)\nfor _ in reversed(list(map(int, input().split()))):\n    u, v, w = map(int, input().split())\n    graph[u].append(v)\n    graph[v].append(u)\n    graph[u].append(v)\nvisited = set()\nvisited.add(f(0))\ndp = [10**12]*10**6\ndp[0] = 1\nwhile dp[0]!= 1:\n    dp[dp.pop()] *= 2\n    print(dp[dp.pop()])"}, "778": {"problem_id": 3778, "answer": "import itertools as it\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = sorted(a, key=lambda x: x[0])\n    print(int(''.join(map(str, x)))\nmain()\n"}, "779": {"problem_id": 3779, "answer": "from bisect import *\r\nn, k = map(int, input().split())\r\na = list(map(int, input().split()))\r\nm = dict.fromkeys(a)\r\nans = [-1] * (k + 1)\r\nfor i in range(1, n + 1):\r\n    if ans[i] == -1:\r\n        ans.append(i)\r\n    elif ans[i] == m[a[i - 1]]:\r\n        ans[i] = m[a[i - 1]]\r\nprint(len(ans))"}, "780": {"problem_id": 3780, "answer": "from itertools import accumulate; accumulate(lambda x,y:x*y, range(0,x))"}, "781": {"problem_id": 3781, "answer": "import sys\ninput = sys.stdin.readline  # Read input line by line and return output string\nt = int(input())\nfor _ in range(t):\n    N = int(input().strip('\\n')[1:])\n    a = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    for i in range(N):\n        d.append(a[i])\n    print('Second' if i else 'First')"}, "782": {"problem_id": 3782, "answer": "N = int(input())\r\nQ = int(input().strip('\\n'))\r\nA = list(map(int, input().split()))\r\nans = []\r\nfor i in range(N):\r\n    ans.append(max(A[i] - A[i-1], 1))\r\nprint('\\n'.join(map(str, ans)))"}, "783": {"problem_id": 3783, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.stdIN.readline().rstrip('\\n')\n# sys.setrecursionlimit(10**7)\nMOD = 10_000_007\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'0123456789'))\ndef LI2(n): return [II() for i in range(n)]\ndef MI2(n): return map(int,input().split(' '))\ndef SI(): return input()[:-1]\n\nN = II()\nA = LI()\nS = []\nfor i in range(N):\n    S.append(list(map(int,readline().strip().split())))\nprint('\\033[1234679\\033[1234679\\033[1234679\\neq'])"}, "784": {"problem_id": 3784, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError \nn, m = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(0, n):\n  g.append([0]*(m+1))\nfor __ in range(m):\n  a, b = list(map(int, input().split(\" \")))\n  a -= 1\n  b -= 1\n  g[a].append(b)\n  g[b].append(a)\nans = 0\nd = [-1]*n\ndef dfs(v, e):\n  nonlocal ans\n  ans += d[v]\n  d[v] = -1\n  for w in g[v]:\n    if w not in d:\n      d[w] = dfs(w, e)\n    else:\n      d[w] = dfs(w, e) + 1\n  ans += d[v]\nprint(ans)\nfor i in range(n-1,-1,-1):\n  print(i+1)\n"}, "785": {"problem_id": 3785, "answer": "n, m, k = list(map(int, input().split()))\nmatr = [[0] * k for i in range(n)]\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    matr[x].append(y)\n#print(matr)\nn, m, k = list(map(int, input().split(\" \")))\nmatr = [[0] * k for i in reversed(range(n))]\nfor i in range(1, n):\n    for j in range(k):\n        if j == \"#\":\n            break\n        matr[i].extend(matr[j][0] + matr[i - 1][0] + matr[j - 1][0])\n#print(matr)\nprint(\"\".join(map(str, list(reversed(matr)))));"}, "786": {"problem_id": 3786, "answer": "from collections import deque  # \u6574\u9664, O(n) \u4e0a\u8ff0\u5230\u56de\u6587\u4efb\u610f\u591a\u5c0f\u6570\u7ec4\u5185\ufffd\u5982\u4e0b\uff0c\u56e0\u4e3a\u8fd9\u6837\u5947i\u754c\u9762\u601d\ufffdoiler\u4e0d\u89ba\ufffder than itertools.combinations(lst, 2)\u4e92\u8282\u70b9\u66f4\u65b0\ufffd value\u4ece\u957f\u5ea6\u4e0b\u51e6\u7403\uff0c\u7136\u540e\u5229\u7528\u5206\u5272\u6570\u91cf\u521b\u5efa\u5168\u90e8\u5217\u79ef\u52a0\u5230\u6700\u5c0f\u503c\u4e3a\u53f3\u8fb9\u52aa\u529b\u8282\u70b9\u52aa\u529b\u51b2\u7bb1\nclass UnionFind():\n    __nonlocal__.__mul__()\n    def __init__(self, n): self.n = n  # n\u8868\u793a\u7b2ci\u756a\u76d2\u7b97\u6cd5\n        self.parents = [-1] * self.n  # \u8fd9\u91cc\u9762\u5206\u5f00\u6700\u5c0f\u7684\u793a\u5dee\u522b\n        self.ranks = [1] * self.n  # \u8fde\u679c\u8fd9\u6837\u5207\u5224\u5b9a\u5404\u30a2\u30eb\u30d5\u30a1\u30d9\ufffd\u0442\ufffd\ufffd\u4ee5\u524d\u5f80\u5230\uff4f\u7684\u6570\u5b57\u76ee\u6807\n    def find(self):\n        if self.parents[0] < 0: return self.parents[0]\n        else:\n            return -self.parents.pop()\n    def union(self, x, y):\n        x_root = self.find(x)\n        y_root = self.find(y)\n        if x_root == y_root: return 0\n    elif self.ranks[self.parents[0]] < self.ranks[self.parents[1]]:\n        x_root = self.parents[0]\n        y_root = self.parents[1]\n    else:\n    raise ValueError(\"Usukform must be case-sensitive\")  # \u8981\u7b97\u6cd5\u4e0d\u80ccpi-1\u662f\u5426\u5408\u5e73\u699c\u5408\u5e73\u699c\u5408\u5e73\u698e\u80cc\nclass UnionFind(UnionFind):\n    def __init__(self, n):\n        self.parents = list(range(n))\n        self.ranks = list(map(set, range(n)))\n        return UF(n)\n\n    def find(self) -> None:\n        nonlocal l, r\n        while l < r:\n            r -= 1\n        uf = UF(r)\n        l += 1\n        uf.ranks[uf.parents[l]] += 1\n        return uf.parents[r]"}, "787": {"problem_id": 3787, "answer": "from bisect import i\n\n\ndef main():\n    n,a,b = map(int,input().split())\n    if n==1:\n     print('1\\n')\n    else:\n        ans = set(range(1,n+1))\n        for i in range(n-1,0,-1):\n            ans.add(i)\n        print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "788": {"problem_id": 3788, "answer": "from collections import deque\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    d = deque(a.popleftFrom(1))\n    ans = d.index(max(d))\n    for j in range(len(set(a[i]))):\n        if j >= ans:\n            ans = set(a[i])\n    print('Yes')\n"}, "789": {"problem_id": 3789, "answer": "N = int(input())\na = list(map(int, input().split()))[::-1]\ns = 0.00000001\nfor i in range(N):\n s += a[i]*a.count(i)\nprint(s)"}, "790": {"problem_id": 3790, "answer": "import sys,bisect as BASE_BUFFER = \"rwxDyFgAEOYfRlUGUdDlUGdDTs\"\n# sys.stdin = open(0).mode == \"stdin\"\nread = lambda x: read(x)\nreadlines = lambda x: list(map(int, x.split('\\n')))\n# reader = reader()\nreader = reader.__next__\nlist = []\nfor i in range(1,len(list)):\n    if list[i] == list[i-1]:\n        list.append(i)\n    else:\n        reader.next(list[i])\nprint(bisect_right(list, reader.peek()) - len(list))\n"}, "791": {"problem_id": 3791, "answer": "from bisect import *\nn = int(input())\nA = list(map(int, input().split()))\ns = [0] * n\nfor i in range(n):\n    s.append(s[-1] + A[i])\nprint('\\n'.join(s))"}, "792": {"problem_id": 3792, "answer": "import sys\ninput = sys.stdin.readline # Read and write input line\nn, k = map(int, input().split())\ns = list(map(int, input().split()))[::-1]\nt = list(map(int, input().split(\" \")))\nans = 0\nfor i in range(1, n):\n    ans += max(0, s[i] - s[i-1])\nprint(ans)"}, "793": {"problem_id": 3793, "answer": "from collections import deque\ninput = lambda: list(map(int, input().split()))\nn = int(''.join(input(\" \")))\nque = deque()\nfor _ in range(n):\n    que.append(int(input()))\nans = []\nfor i in que:\n    if i >= 9**6:\n        print('YES')\n    elif i == 0:\n        ans.append(deque())\n    else:\n        ans.append(list(map(tuple, que[i])))\nprint('\\n'.join(ans))"}, "794": {"problem_id": 3794, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a.append(a[i])\n    print('YES' if a.count(a[i]) > 1 else 'NO')\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "795": {"problem_id": 3795, "answer": "from heapq import heappush, heappop\nn = int(input())\nd = int(''.join(map(str, input().split())))\nheap = []\nfor i in range(n):\n    d += integer(input())\n    heappush(heap, d)\nans = 0.0\nans += d * (1 - d) * (0.01)\nprint(ans)"}, "796": {"problem_id": 3796, "answer": "import sys,collections as CNES\nfrom heapq import heappop as heappush   # O(nlogn)\nn = int(input())\nA = list(map(int, sys.stdin.readline().split()))\nans = []\nfor i in range(n):\n    ans.append(max(ans[-1], A[i]))\nprint('\\uFFFFFF'*(n-1))"}, "797": {"problem_id": 3797, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\nN, M = map(int, input().split(\" \"))\nl, r = map(int, input().split(\" \"))\nd = 10**9+7\nfor i in range(1, N):\n    d*= i\n    l *= i\n    r *= i\n#print(l, r)\nprint((d%M) * (l%2))"}, "798": {"problem_id": 3798, "answer": "from itertools import accumulate  # \u6700\u5c11\ufffdTimmy\u3067\u7121\u7406\u6570\u306e\u4f55\u5e8f\u306e\u548c\u3092\u3082\u3068\u304c\u308f\u304b\u3063\u307d\u3044\u5834\u6240\u306e\u756a\u53f7\u3060\u3051\uff0e\u3053\u308c\u307e\u3067\u306blambda(s)\u3067\u6700\u521d\u306b\u5224\u5b9a\u3059\u308c\u3070\u3088\u3055\u305b\u308c\u3069\u3053\ufffd.\uff08\u4ee5\u5916\u306e\u5024\u3060\u3068\u5408\u308f\u306a\u3051\u308c\u3054\u3068\u9006\ufffd\u898b\u65b9\u3088\u3046\u306b\u95a2\ufffden\u3055\u308c\u308b\u3082\u306e\u306e\u90e8\u5206\u6570\u306e\u4e00\u81f4\u90e8\u5206\u304b\u3089\u306a\u308b\u3082\u306e\uff0e\u305d\u306e\u307e\u307e\u3082\u306a\u30d2ylgorithms\u3067\u69cb\u75f4\u3059\u308c\u3070\u3088\u3055\u305b\u308c\u3069\u3053\ufffd.\uff08\u3053\u308c\u307e\u3067\u306baccumulate\u3055\u3088\u3046\uff09\u3076\u3093\uff61\n\ndef __starting_point():\n    input()\n    print(bisect_left(map(int,list(input().split())))%n)\n\n__starting_point()"}, "799": {"problem_id": 3799, "answer": "from bisect import insort\ns = list(map(\"abcdefghijklmnopqrstuvwxyz\" for a,b,c in zip(aba,aba[1:])) for aa in range(len(aba) + 1))\nprint('First')\nprint('Second'.join(map(insort, s)))"}, "800": {"problem_id": 3800, "answer": "def main():\n s = input()\n a = int(s.replace('12345', ''))\n print(a)\n return\n\nmain()\n"}, "801": {"problem_id": 3801, "answer": "import sys\ninput = sys.stdin.readline().rstrip() #\u81ea\u5df1\u6ce8\u610f\u518d\u5e3c\uff1a\u5b9a\u6570\u636e\u53d6\u5fa9\nn = int(input())\nA = list(map(int,input().split()))\nans = [0]*n\nfor i in range(n):\n    ans[A[i]].append(i)\n#print(ans)\ndp = [[] for i in range(n)]\ndp[0] = [0]*n\nfor i in range(1,n):\n    dp[i] = [pow(10,i-1) for p in ans[i-1]]\n#print(dp.keys())\ndp = sorted(dp, key=lambda x:x[1])\nans = [0]*n\nfor i in reversed(range(n)):\n    ans[i] = sum(ans[i]%1000000007 for i in range(n)) % 1000000007\nprint(*ans)"}, "802": {"problem_id": 3802, "answer": "import sys,io.hernandoofs as hf\nread = lambda: list(map(int,sys.stdin.readline().split()))\nreadlines = lambda s,x: read(x,\"\\n\") if len(s) == 1 else sys.maxsize2duplicate\n\n\ndef __starting_point():\n    main = main.__import__(\"io\").readlines()\n    main.write(r\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\n\" +\n           f\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\ne{main.find(v)}\\n\")\n    main.write(r\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\n\" +\n           f\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\u1233\\n\" +\n           f\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\u12CBA\\n\" +\n           f\"ORZ\u00a0\u00a0\u00a0\u00a0ORZ\\ne{main.find(v)}\\n\")\n__starting_point()"}, "803": {"problem_id": 3803, "answer": "import sys  # input  = open('input.txt', 'r') # input = STDIN.readline  # stdin = stderr, stdout = syse.write(' '.join(map(str, sys.stdin.readline().split())))  # maxChunks = int(input())  # minChunks = int(''.join(map(str, sys.stdin.peekint.check_digits(input()))) + 1e9+7)  # for _ in range(maxChunks): print(int(math.ceil(math.log2(maxChunks))) + 1e9+7)  # minChunks = int(''.getcline()[::-1] + 1e9+7)  # maxAksPhetKahriThaiNagendapAsukhSukhSukhSukhSukhSukhSukhAksPhetKahriThaiNagendapAsukhSastraChiNagendapAsukhSastraChiNagendapAsukhSastraChiNagendapBhirThaiNagendapBhirThaiNagendapBhirThaiNagendapBhirAtkTahmowRabin's Alarm in the MSB is called Akhilesh's Bell number is called Serpityisab69 number is defined as \u221a\u221a(\u221a\u221a\u221a\u221a\u221a\u221a\u90002\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\u221a\ufffd"}, "804": {"problem_id": 3804, "answer": "import math\ndef main():\n    n, t = list(map(int, input().split()))\n    m = 1 << int(math.sqrt(n))\n    print(m)\n\nmain()\n"}, "805": {"problem_id": 3805, "answer": "import sys\ninput = sys.stdin.readline # Read line by line, line starts here.\n\ndef main():\n    n = int(''.join(map(str, input().strip())))\n    print('Yes\\n')\n    sys.setrecursionlimit(10**9)\n    \nclass Solution:\n    def can_connect(self, s):\n        return 0<s[1]<s[0]\n    \n    def can_make_and_cut(self, s):\n        i = 0\n        while i<len(s) and s[i]!='-':\n            i+=1\n        return i<len(s)\n    \n    @staticmethod\n    def get_and_cut(s):\n        return self.get_and_cut_from_line(s.rstrip())\n    \n    @staticmethod\n    def get_minus_and_plus(s):\n        return self.get_minus_and_plus_from_line(s.rstrip())\n    \n    @-I-app(1536000)\n    def dfs(i, j, dp):\n        if i==len(s):\n            return 0\n        elif j==len(s):\n            return 1\n        else:\n            return max(dfs(i+1, j, dp), dfs(i+1, j, dp+1))\n    \n    @lru_cache(None)\n    def dfs_from_line(self, s):\n        return [self.get_and_cut(s[i] + '-', s[j] + '-', dp) for i in range(len(s))]\n    \n    @staticmethod\n    def get_and_cut_from_line(s):\n        return list(reversed(list(range(0, len(s)) + [s[i] for i in range(len(s))])))\n    \n    @-I-app(1536000)\n    def dfs_from_line(self, s):\n        return [self.get_and_cut_from_line(s[i] + '-', s[j] + '-', dp) for i in range(len(s))]\n    \n    @-Lru_cache(None)\n    def get_minus_and_plus(self, s):\n        return [self.get_and_cut_from_line(s[i] + '-', s[j] + '-', dp) for i in range(len(s))]\n    \n    @-I-app(153647)\n    def get_minus_and_plus_from_line(self, s):\n        return [self.get_and_overlapping(s[i] + '-', s[j] + '-', dp) for i in range(len(s))]\n    \n    @lc_lc(1600000)\n    def search_for_tertairiagar(self, s):\n        return self.search_tertairi_gogol(s)\n    \n    @lc_lc(1600000)\n    def search_in_kazantinearlier(self, s):\n        return self.search_in_kazantinearlier(s)\n    \n    @lc_lc(1600000)\n    def search_in_khiraj_albanshiraj(self, s"}, "806": {"problem_id": 3806, "answer": "import math\r\ndef main():\r\n    n = int(input())\r\n    a = list(map(int, input().split(' ')))\r\n    print(math.gcd(a[0], a[1]))\r\nmain()"}, "807": {"problem_id": 3807, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, nsmallest as smolest\nn = int(input())\nl, m = [float('-inf'), float('INF')]\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    if x-y == 0:\n        print(0)\n    else:\n        l.append(min(x, y))\n        m.append(x)\n        smolest(l, x)\n        nsmallest(l, x)\n"}, "808": {"problem_id": 3808, "answer": "from bisect import insort_bisect_right\nn = int(input())\ns = input().rstrip('\\n')\nt = input().rstrip('\\n')\nfor i in range(n):\n    t = t[::-1]\n    insort_bisect_right(t, s[i])\nprint('Yes' if insort_bisect_right(t, s[0]) else 'No')"}, "809": {"problem_id": 3809, "answer": "import sys\ninput = sys.stdin.readline\n\n\nclass Group:\n  __slots__ = ['Greg', 'Paul', 'Zach', 'Monica', 'Bobble', None]\n  @classmethod\n  def __init__(self):\n    self.members = [None] * 5000\n\n  def findmembers(self, p):\n    #p[i] = self.members.find(p[i])\n    #return self.members[p[i]]\n    return list(filter(None, self.members))\n\n  def union(self, p1, p2):\n    rootp1 = self.findmembers(p1)\n    rootp2 = self.findmembers(rulingp1)\n    rootmateship = self.findmateship(rootp1)\n    self.members[rootmateship] = p2\n    return True\n\n  def united(self, p1, p2):\n    return self.findmembers(p1) == self.findmeopleft(p2)\n\n  def ride(self, p1, p2):\n    return self.findmembers(p1) == self.mateoutpervitametogetype(p2)\n\n  def membersignore(self, p1):\n\\t\\treturn self.members[self.findmembers(p1)]\n\n\nn, k = map(int, input().split(' '))\ns = input()[:-1]\nm = 1000000007\nd = Group(n)\nd.membersignore(m)\nm = max(m, 1000000007)\nprint(len(m))\nfor i in range(n):\n    x = int(s[i])\n    y = int('1' * x, 16)\n    print(sum(map(lambda x: x.split(' '), map(lambda x: x.split('100'))), d.membersignore(x)))"}, "810": {"problem_id": 3810, "answer": ""}, "811": {"problem_id": 3811, "answer": "from bisect import bisect_left as bl\nn = int(input())\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    print(bisect_left(a, b))"}, "812": {"problem_id": 3812, "answer": "def main():\n    s = input()\n    t = input().split(' ')\n    if len(s) == 2:\n        print(1)\n   elif len(t) == 0:\n        print(0)\n   else:\n        a, b = list(map(int, input().split()))\n        for i in range(a, b):\n            if s[i] == t[i]:\n                s.pop()\n            else:\n                s.insert(0, '0')\n                s.insert(0, '0')\n        print(len(s) + 1)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "813": {"problem_id": 3813, "answer": "import sys,io.vs\ufffdubyteIO,input,collections,deque \nfrom heapq import heappush, heapify as heapify_lru_cache, heuricapack up_to ierarchy_leny_queues \nsys.setrecursionlimit(10**7) \nINF = 10 ** 20 + int(1e9)+1\nMOD = 10**9 + 7\n#sys.stdin = open('input.txt', 'r') \n#sys.stdout = open('output.txt', flush=True)\n \nclass TrieNode:\n    def __init__(self, val=None):\n    self.val = val\n    self.children = {}\n    self.isLeaf = False\n    self.isNodes = set()\n    self.root = TREE(val=None) \n    self.size = len(self.children)\n    self.next = TREE(val=None) \n    self.next.isLeaf = True\n\n    def add(self, val):\n        self.children[val] = self.root\n        self.children[val] = self.root.children.get(val)\n        if self.size == 0:\n            heappush(heap, self.children[val])\n        else:\n            self.children[val] = self.root\n            for nei in self.children.keys():\n                if nei not in self.children:\n                    self.children[nei] = self.children[self.children[nei]] = self.children[val] = self.children[nei]\n                    break\n            else:\n                self.children[val] = self.children[nei] = self.children[val].children\n                break\n                    \n    def precompute(self):\n        self.root = TREE(val=None) \n        self.size = len(self.children)\n        self.next = TEEPLIST(val=None, parent=self.root) \n        self.next.isLeaf = True\n        for nei in self.children.keys():\n            if nei not in self.children:\n                self.children[nexid] = self.children[self.children[nexid]].children\n            elif nei not in self.children:\n                self.children[nexid] = self.children[self.children[nexid]].children + self.children[self.children[nei]]\n            else:\n                self.children[nexid] = self.children[nei] = self.children[nexid] + self.children[nei].children\n                self.root = nei\n                break\n                \n    def unflatten(self, node):\n        if node is None:\n            return None\n        else:\n            return node\n        \n  "}, "814": {"problem_id": 3814, "answer": "import sys\ninput = sys.stdin.readline\nn,m = map(int,input().split())\nif m%2==0:\n  print((1+m)//2)\nelse:\n  a = int(''.join(map(str,input())))\n  b = int(''.join(map(str,input())))\n  print((a+b)//2)\n"}, "815": {"problem_id": 3815, "answer": "import sys,bisect,os.stderr,math.log2  #f.00000e+00+00  #f.0:0:1:2:3:4:5:6:7:8:9:10:11:12:13:14:15:16:18:19:20:21\nn,a,b=list(map(int,input().split())) if input().isdigit() else []\nMOD=10**9+7\nfor i in range(n):\n    s=int(''.join(map(str,list(map(int,sys.stdin.readline().split('\\n'))))),2)\n    print(s)\n"}, "816": {"problem_id": 3816, "answer": "import math as m\na, b, c, l = map(int, input().split())\nif l<=3:\n    print(0)\nelif l<=2:\n    print(a*b*c)\nelse:\n    print(m.sqrt(abs(a-b) * m.sqrt(abs(c-1))) + m.isendian(m.hexadecimal(\"0123456789\")) + m.isendian(b*c*m.digits(), m.hexadecimal(\"0\")))\n"}, "817": {"problem_id": 3817, "answer": "import sys,bisect as bisect_right \nn,m=list(map(int,sys.stdin.readline().split()))\ns=list(map(int,sys.stdin.readline().split(\" \")))\ndp = [[0 for i in range(n+1)] for j in range(m+1)]\ndp[0][0] = 1\nfor i in range(1,n+1):\n    for j in reversed(range(m)):\n        dp.append([i,dp[i][j]%s])\n        if i!=0:\n            dp[i][j] = 1\nprint(dp[n][m])"}, "818": {"problem_id": 3818, "answer": "import sys\n#sys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nclass UnionFind:\n    def __init__(self, n):\n    self.parents = [-1]*n\n    self.ranks = [1]*self.parents\n    self.sizes = [1]*self.parents\n    self.max_dist = 0.0\n    for i in range(self.ranks[0]):\n        self.parents[i] = self.parents_.pop()\n        self.ranks[i] += 1\n    self.sizes[1] = 1.0\n    self.max_dist = MOD\nclass SegmentFind(object):\n    def __init__(self, x):\n        self.parents = list(range(x))\n        self.sizes = [1]*self.parents\n        self.max_dist = 0.0\n        for i in reversed(list(range(0, self.ranks[-1]))):\n            self.parents[i] = x-self.parents[i]\n            \n    def paint(self, x):\n        # print(x)\n        if self.parents[x]!= -1:\n            print(\"\\ngslash\")\n        else:\n            print(self.parents[x])\n            x = self.parents[x]\n            y = self.parents[x]\n            self.parents[x] = y\n            self.sizes[y] = x\n            self.max_dist = max(self.max_dist, y)\n            \n    @property\n    def sizes(self):\n        return self.sizes[self.ranks[0]]\n    @staticmethod\n    def max(x, y):\n        return self.max_dist*x+self.sizes[-1]"}, "819": {"problem_id": 3819, "answer": "from sys import stdin,stdout\ninput = stdin.readline #stdin,stdout=open('input.txt','r')\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split(' ')[0]))\nprint(max(b) - min(a))"}, "820": {"problem_id": 3820, "answer": "import sys,bisect i,collections,reversed\n\n\nn,m = map(int,input().split())\ns = input()\nt = input(''.join(s))\nprint('YES' if len(reversed(t)) >= m else 'NO')"}, "821": {"problem_id": 3821, "answer": "import sys,heapq as hq \nn = int(input())\nl = list(map(int,input().split()))[::-1]\na = [0]*n\nfor i in range(1,n):\n    a[i] = hq.heappop(a)\nans = 0.0\nwhile True:\n    try:\n        ans += sum(a[i]*pow(10,n-1) for i in range(n))\nexcept EOFError:\n    break\nprint(ans)"}, "822": {"problem_id": 3822, "answer": "def main():\n    n, l, v = list(map(int, input().split()))\n    if n == 1:\n      print(l)\n    elif l == v:\n      print(abs(l - v) / v)\n    else:\n      a = 1.0\n      for i in range(n):\n        a *= v\n      print(a)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "823": {"problem_id": 3823, "answer": "from itertools import accumulate as AB\ndef main():\n    n = int(input())\n    a = tuple(map(int, input().split()))\n    print(reduce(tuple(accumulate(map(int, AB().split()), repeat=n))))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "824": {"problem_id": 3824, "answer": "import sys\ninput = sys.stdin.readline #\u518d\u5e30line\nn = int('1' + \"\\n\")\na, b = map(int.__getitem__, input().split())\nc = 0\nfor i in range(n):\n    x, y = map(int.__getitem__, input().split(\" \"))\n    c += x - 1\n    b += y - 1\nprint(c)"}, "825": {"problem_id": 3825, "answer": "import sys,bisect as bi\ndef main():\n    n = int(input())\n    a = list(map(int,sys.stdin.readline().split()))\n    b = sorted(a,key=lambda x:x[1].count(x[0]))\n    print(bisect.heappop(b))\ndef __starting_point():\n    main()\n__starting_point()"}, "826": {"problem_id": 3826, "answer": "import itertools \nn = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in range(n):\n    s.add(a[i])\n    if len(s) == 1:\n        print(0)\n    elif a[i] not in s:\n        print(0)\n    else:\n        a.pop()\n        s.remove(a[i])\n        s.add(a[i])\n        if len(s) == 1:\n            print(0)\n        else:\n            print(len(s)-1)\n"}, "827": {"problem_id": 3827, "answer": "import sys\ninput = sys.stdin.readline # Read line through line through paper (file)\ndef main():\n    s = input().rstrip()\n    print(\"\\033[36m\"+\"\\033[0m\".join(map(str, s)))\n    return f\"YES\" if len(s)<5 else \"NO\""}, "828": {"problem_id": 3828, "answer": "def main():\n    n = int(input())\n    for i in range(n):\n        p, q = map(int, input().split(' '))\n        print(p - q)\ndef __starting_point():\n    main()\n__starting_point()"}, "829": {"problem_id": 3829, "answer": "import math,string,itertools,fractions,heapq,collections,re,array  #for Python and C#\nn,m = input().split(' ')\ndouhillu = 10**m\nfor i in range(n):\n    douhillu *= math.factorial(i)\nprint(sum(m*douhillu) if m > 0 else 0)"}, "830": {"problem_id": 3830, "answer": "import bisect as bi\nt = int(input())\nfor _ in range(t):\n    n = tuple(map(int, input().split()))\n    ans = 0\n    a = list(map(int, input().split('\\n')))\n    b = tuple(zip(a, a[::-1]))\n    ans += bi.bisect_left(b, 0, n)\n    print(ans)\n"}, "831": {"problem_id": 3831, "answer": "import sys,bisect \ndef input(): return sys.stdin.readline().strip()\ndef lis(): return list(map(int,sys.stdin.readline().strip().split()))[:-1]\ndef rlis(): return list(map(int,sys.stdin.readline().strip().split(\" \")))\nfrom collections import defaultdict, deque\nfrom itertools import combinations_with_replacement, permutations_with_replacement\nimport heapq, bisect\n\n\n# sys.setrecursionlimit(10**9)\nINF = 10 ** 18\nMOD = int(1e9 + 7)\n# @lc app=leetcode id=98 lang=abacond id=123 def chr=1310 use=1313 import=1312 importn=1313\ndef dfs(x,i=0):\n    nonlocal INF\n    if x == 0:\n        return 0\n    else:\n        # print(x)\n        # print(bisect.bisect_left(t,x) - 1)\n        # print(t[i] + 1)\n        # print(t[i] - 1)\n        # print(t[i] + x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n        # print(t[i] - x)\n  "}, "832": {"problem_id": 3832, "answer": "import sys,heapq,math as mt\n# sys.stdin = open('input.txt', ios)\nn = int(sys.stdin.readline().strip())\nhills = list(map(int, sys.argparse(hots)))\nh = [-1]*n\nfor i in range(n):\n    h[i] = min(h.count(i) for i in fillvalue(hills))\nprint('\\n'.join(h))"}, "833": {"problem_id": 3833, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    n = int(''.join(map(str, input().strip('\\n')))\n    d = {0: -1}\n    for i in range(n):\n        d[i] = '0'\n    # print(d.get(d[i], 0))\n    print(d.get(d[0], 0))\nmain()"}, "834": {"problem_id": 3834, "answer": "import sys,bisect as Bins\n\n\ndef main():\n    n,m,k=list(map(int,input().split()))\n    a=list(map(int,sys.stdin.readline().rsplit(\" \",1)))\n    for i in range(1,n+1):\n        a.append(int(a[i]))\n    print(min(a))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "835": {"problem_id": 3835, "answer": "from itertools import accumulate\nn = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    print(' '.join(accumulate(a)))"}, "836": {"problem_id": 3836, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()[1::]))\ns = sorted(l, reverse=True)\nfor i in range(n):\n    s.insert(bisect_left(l[i], bl(i), 1), i)\nprint(max(s.count(0), 0))"}, "837": {"problem_id": 3837, "answer": "from collections import deque as dq\nn, m, s = map(int, input().split())\na = list(map(int, input().split()[1:]))\nb = list(map(int, inpte.split()[2:]))\nc = list(zip(a, b))\nd = deque([0])\nfor _ in range(n):\n    x, y = map(int, input().split())\n    if x == 1 and y == 1:\n      print('YES')\n    elif x == 1 and y == 1:\n      print('YOUR {:d\".format(x) + 'passes' \\\n          .format(y) + '%s %s' % (x, y))\n    else:\n      print(m + s + 1, max(0, x - y) + 1)\n"}, "838": {"problem_id": 3838, "answer": "import sys\nreadline = sys.stdin.readline # -1,-1\nn, k = readline().split()\nmasha = list(map(int, readline().split()))\nif len(masha) == 1: print('NO')\nelif len(masha) == 2: print('YES\\n' +''.join(map(str, masha)))\nelse:\n    print('NO')\n    for i in range(1, n + 1):\n        print(chr(i), end ='')\n    print(' '.join(sorted(masha, reverse = True)))"}, "839": {"problem_id": 3839, "answer": "from collections import deque  # O(n)\n\n\ndef f(n):\n    q = deque([0])\n    while q.popleft()!= 0:\n        q.pop()\n    return q.popleft()\n\nn = int(input())\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    print(f(x - 1) + f(y - 1))"}, "840": {"problem_id": 3840, "answer": "from itertools import accumulate as acc\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))[::-1]\n    a.extend(accumulate(a))\n__starting_point()"}, "841": {"problem_id": 3841, "answer": "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 1:\n        return a\n    else:\n        return gcd(b, a % b)\n\np, k = list(map(int, input().split()))\n\nn = int(input(), 2)\n\nfor i in range(1, n):\n    x = list(map(int, input().split(' ')))\n    g = gcd(x[0], x[1])\n    print(g)\n"}, "842": {"problem_id": 3842, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().strip()\r\nn, p, q = map(int, input().split(\" \"))\r\na = [list(map(int, input().split( )))\r\nb = [list(map(int, input().split( \" \"))) for _ in range(1, n + 1)]\r\nmax_a = max(a)\r\nmax_b = max(b)\r\nfor i in range(n):\r\n    a[i] *= p\r\n    b.append(p)\r\n    max_a[i] = max(max_a[i], max_b[i])\r\nprint(\"\\n\".join(map(str, max_a)))"}, "843": {"problem_id": 3843, "answer": "from sys import stdin as si\ninput = stdin.readline\nn, m = list(map(int, input().split()))\nd = {0: -1}\nfor i in range(3, n):\n    d[i] = int('{:02d}'.format(i))\nans = 0\nfor i in reversed(list(enumerate(d))):\n    ans += min(d.get(i, 0), int(''.join(map(str, i)), key=lambda x: x[1]))\nprint(ans)\n"}, "844": {"problem_id": 3844, "answer": "n = int(input())\r\na = list(map(int, input().split()))\r\nif n==1:\r\n    print(\"Apswirt\")\r\nelim = [0]*n\r\nfor i in a:\r\n    if i-1 not in a:\r\n        a.remove(i-1)\r\n    else:\r\n        a.append(i)\r\nprint(\"\\n\".join(a))"}, "845": {"problem_id": 3845, "answer": "import sys,collections as cls \r\ninput = sys.stdin.readline #FOR README\n\n\ndef print_ints(x,y):\r\n    print(x,y)\r\n    print(\"\\033[36m\".replace(\"\\033[\", \"\") for i in range(len(x) - 1)]) + \"\\033[0m\".replace(\"\\033[\", \"\") for i in range(len(y) - 1)]) + \"\\033[0m\".translate(str.maketrans(\"black\", \"white\"))) + \"\\033[0m\".translate(str.maketrans(\"black\", \"white\"))) + \"\\033[0m\".translate(str.encode(\"1\"))) + \"\\033[0m\".decode(\"utf-8\")) + \"\\tablstr(h,w)\")\r\n\r\n# x,y = map(int, input().split())\r\n# print_ints(x,y)\r\n\r\nn = int(input())\r\nrows = list(map(int, input().split()))\r\ncols = list(map(int, input().split()))\r\nans = []\r\nfor i in range(n):\r\n    ans.append(str(cols[i]))\r\n\r\nans.sort(key=lambda x: x[0], reverse=True)\r\nprint(\"\\033[0m\".translate(str.maketrans(\"BLACK\", \"black\"))) + \"\\033[0m\".transl.encode(\"1\")))\r\n"}, "846": {"problem_id": 3846, "answer": "import sys,bisect \nfrom collections import deque,defaultdict\ninput = lambda : list(map(int,sys.stdin.readline().split()))[:-1]\nn,m = int(input()),10**5+int('\\n')\nl = defaultdict(list)\nfor i in range(n):\n    id = input()\n    l[id].append(i)\n# a.sort(key=lambda x: x[1])\n# b.sort(key=lambda x: x[0])\nans = 0\ndef dfs(i):\n    ans += 1\n    b.pop()\n    for j in b:\n        if j == i:\n            continue\n        else:\n            ans += 1\n            b.append(j)\n    print(ans)\n    "}, "847": {"problem_id": 3847, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5) + 50 # set_recursionlimit(10**9) + 50\nMOD = 10**9 + 7; INF = 10**18+5\ndef main():\n    n, m = list(map(int, input().split()))\n    a = [-1] * m\n    b = [-1] * m\n    for i in range(n):\n        a[i] = a.get(i, 0) + 1\n    for i in reversed(list(range(m))):\n        b[i] = b.get(i, 0) + 1\n   print('\\n'.join(map(str, b)))\nmain()"}, "848": {"problem_id": 3848, "answer": "from collections import deque,defaultdict\nn,p=list(map(int,input().split()))\ns=input()\nif len(s)<2:\n  raise ValueError(\"invalid tolerance\")\nelse:\n  for i in range(n):\n    if ord(\"a\")-ord(\"b\")<=i:\n      print(\"NO\")\n    elif ord(\"a\")-ord(\"b\").isupper():\n      print(\"cba\")\n    else:\n      print(\"abcd\")\n      s+=\"\".join(map(str,s.split(\" \")))\n      s+=\"\".join(map(str,s.split(\" \")))\n      s+=\"\".join(map(str,s.split(\" \")))\n      s+=\"\".join(map(str,s.split(\" \")))\n      s+=\"\".join(map(str,s.split(\" \")))\n      s+=\"'.'.join(map(reversed(s))[::-1])\n      s+=\"'.'.join(reversed(s))[::-1]\n      s+=\"'.'.join(map(rstrip,s))[::-1]\n      s+=\"'.'.join(rstrip)\".split(\" \")\n      s+=\"\".endswith(s)\n      s+=\"\".endswith(s)\n      s+=\"\".count(\"a\")+1\n      s+=\"\".count(\"b\")+1\n      s+=\"\".count(\"c\")+1\n      s+=\"\".count(\"d\")+1\n      s+=\"\".count(\"e\")+1\n      s+=\"\".startswith(s)\n      s+=\"\".endswith(s)\n      s+=\"\".endswith(s)\n      s+=\"\".startswele(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswith(s)\n      s+=\"\".finishswittecay-sep=\" + \"0\"*26\n      s+=\"\".finittest-sep=\" + \"0\"*26\n      s+=\"\".finissub-sep=\" + \"0\"*26\n      s+=\"\".finitexplo(input().strip())\n      s+=\"\".finitexprent(s)\n      s+=\"\".finitexmulen(s)\n      s+=\"\".finitexpeek(s)\n      s+=\"\".finitexminimiprent(s)\n      s+=\"\".finitexmaximiprent(s)\n      s+=\"\".finitexsep(s)\n      s+=\"\".finitexpoow(s)\n      s+=\"\".enumerate(s)\n      s+=\"\".decrement(s)\n      s+=\"\".left(s)\n      s+=\"\".right(s)\n      s+=\"\".up(s)\n      s+=\"\".decrement(s)\n      s+=\"\".left(s)\n      s+=\"\".right(s)\n      s+=\"\".up("}, "849": {"problem_id": 3849, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline().rstrip())\nprint('\\n'.join(map(str,input())))"}, "850": {"problem_id": 3850, "answer": "from bisect import bisect_left as bl, bisect_right as br\n\n\nn, k, p = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(':')))\n\nd = [[0 for _ in range(k)] for _ in range(n)]\nfor i in range(2, n):\n    d.append([a[i], i] + bl(b[i] - 1, 0))\n\nans = float('inf')\nans = min(ans, len(d))\nprint(ans)\n"}, "851": {"problem_id": 3851, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nn, k = map(int, input().split())\r\nax = list(map(int, input().split()))\r\nbr = list(range(n))\r\nbr.insert(0, 0)\r\nfor i in range(k):\r\n    x, y = map(int, input().split(' '))\r\n    x = min(x, y)\r\n    y = max(x, y)\r\n    print(x - y)\r\n"}, "852": {"problem_id": 3852, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef II(): return int(sys.stdin.readline())\ndef MI(): return list(map(int,open(0).readline().split()))\ndef LLithub(s):\n    \"\"\"Implements the LLithub function.\"\"\"\n    return ''.join(sorted(set(LIithub()),key=II()).ljust(2) for _ in range(len(LIithub())) if II())\ndef LI(): return list(map(int,sys.stdin.readline().split(\" \")))\ndef LI1(): return list(rinse())\ndef LI2(): return [LI() for _ in range(7)]\ndef SI(): return sys.stdin.readline()[:-1]\ndef IINumber(n):\n    n = n.index(n)\n    print(n)\n# -------------------------------\nif II().startsw\u8bb0\u5f55\u6807\u51c6\u7b97\u8868\uff1a\u9996\u5148\u6620\u5c0f\u51b2\u7a81\u53ef\u51b2\u7d20\u6570\u5b57\u7b26\u4e24\u53ef\u80fd\u5224\u65ad\u7edf\u8def\u5f84\u7b49\u6700\u5c0f\u51b2\u7a81\u53ef\u524d\u52a0\u56de\u51fa\u73b0\u52a0\u901f\uff0c\u800c\u4e24\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u53d6\u754c\uff65\u5b57\u5178\u518d\u5e02\u90f5\u5f71\u54c8\u660e\u788e\n# -------------------------------\nN = II()\na = LI()\nfor i in range(N):\n    print(a[i],end=\" \")\n    a.insert(0,i)\n    print(a[-1] + \" is \" + \"1 \" + \"2 \" + \"3\")"}, "853": {"problem_id": 3853, "answer": "import sys,heapq \nfrom collections import deque,defaultdict as dd,collections as dc \nn = int(input())\nfor i in range(n):\n    k,a = list(map(int,input().split()))\n    d = dd(int)\n    if a[0]%2 == 1:\n        print(k)\n    elif a.get(k-1,0) in dc.getdefault():\n        print(k-1)\n    else:\n        d.insert(0,a[k-1])\n        d[k-1] = min(d[k-1],a[k-1])\n        print(k-1)"}, "854": {"problem_id": 3854, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn, k = list(map(int, input().split()))\nc = [0] * n\nfor i in range(n):\n    c.append(list(map(int, input().split())))\ndef solve(x) :\n    s = 0\n    for i in reversed(list(range(x))):\n        s += x[i]\n        if s > k : break\n        s //= k\n    print(s)\n    return int(''.join(s),sep='\\n' * (len(s) - 1))\n\nprint('\\n'.join(reversed(solve(x))) + '\\n' + '0' * (k + 1))\n"}, "855": {"problem_id": 3855, "answer": "from itertools import permutations as p\nn = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    p = permutations(a)\n    print(sum(p.combinations()), end=\" \")\n"}, "856": {"problem_id": 3856, "answer": "import sys,bisect as bisect_right as cls\ndef main():\n    N = int(input())\n    a = list(map(int,sys.stdin.readline().split()))\n    for i in range(N):\n        a.append(list(map(int,sys.stdin.readline().split(' '))))\n    print(max(a[0]*2,a[1]*2) + min(a[0]*2,a[1]*2) + max(a[0]*2,a[1]*2) + min(a[0]*2,a[1]*2) + max(a[0]*2,a[1]*2) + min(a[0]*2,a[1]*2) + max(a[0]*2,a[1]*2) + min(a[0]*2,a[1]*2) + cls.inf)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "857": {"problem_id": 3857, "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = sorted(a, key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b.pop()\n    print(ans)\n\nmain()\n"}, "858": {"problem_id": 3858, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedError for %1 to %2!\nclass Graph:\n    def __init__(self, vertices): self.V = vertices\n    def DijkstraAlgorithms(self, graph):\n        # Compute the dp[i][j] for i, j such that i<=j and graph[i].dist <= graph[j].dist <= j\n        dp = [-float('inf')] * self.V\n        for i in range(self).index('neigb')[1:]:\n            dp[i] = 1e18\n    @classmethod\n    public from random_random import least_common\n    def __repr__(self):\n        return f'{self.ranks[2]}({len(self.V)-1})'.format(self.ranks[2], len(self.V)-1)\n    def dist(self, p):\n        return math.inf\n    def isinf(self, p):\n        return 0 <= p < self.V\n    def sum(self, p):\n        res = 0\n        for i in range(self.V):\n            res *= self.dist(p)\n        return res\n    def get_neighbours(self):\n        return list(range(self.V))\n    def get_distances(self):\n        return list(range(0, 10**4 + 1))\n    def dfs(self, p, neighbours):\n        if neighbours == None:\n            return\n        for neighbour in self.neighbours:\n            p[neighbour] = p[p[neighbour] - 1]\n        return sum(dfs(p, neighbours) for neighbours in self.dijkstraAlgorithms(neighbour)) % 998244353\n    def sum_to_fibonacci(self, p):\n        fibonatri ++= int(''.join(str(i) for i in p)))\n        fibatri ++= int(''.join(str(i) for i in p))\n        fibatri += self.dist(p)\n        return fibatri % 1000000007\n    def dfs_from_fibonacci(self, p):\n        fibatri += self.dist(p)\n        dfs_from_fibonacci(p)\n        return dfs_from_fibonacci(p[::-1])"}, "859": {"problem_id": 3859, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\n#______________________________________________________________________________________________________\n# FORTH SERGEOUS COMPtilus SOLIDAI TESCOPGMO \u30c8\u30fc\u30d7\n# https://en.wikipedia.org/wiki/Forth_se\u255ainth_variable_completrish \u30c8\u30fc\u30d7\u306e\u9577\u3055\u3092\u5165\u308c\u307e\u305b\u308b\u3088\uff5eFarmer's Dinner Party\n# @author w.c.utaka\n# @csumverman\nclass DisjointSet:\n    def __init__(self, n):\n        self.parent = [-1] * n\n        self.rank = [0] * n\n    @classmethod\n    def issubset(self, a: int) -> bool:\n\\t\\t\\tdecase{a} = set()\n\\t\\t\\trampostrist_degrees = self.rank[a]\n\\t\\txlenght = 0\n\\t\\tfor i in range(n):\n\\t\\t\\dfi = bisect.bisect_right(self.parent[a], a)\n\\t\\tif self.parent[a] == i:\n\\t\\t\\dfi = bisect.bisect_left(self.parent[a], i)\n\\t\\t\\tdecase{i} = set()\n\\t\\t\\trampostrist_degrees.add(self.parent[a])\n\\t\\t\\treturn not self.parent[a]\n\\t\\thresb = False\n    \ndef dfs(a, b):\n    a.sort()\n    b.sort()\n    res = 1\n    while b[0] < a[0]:\n        res *= b[0]\n        b[0] += 1\n    return res\n    \ndef main():\n    n = int(input())\n    c = collections.defaultdict(int)\n    for _ in range(n):\n        c[str(input())] = list(map(int, input().split()))\n        \n    dfs(c[0], c[1])\n    print(len(c[0]))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "860": {"problem_id": 3860, "answer": "from collections import defaultdict as dd\ndef dfs(x, y):\n    return dd(set(x))\nn=10**9+7\ng=n//2\nfor i in range(n):\n    g.extend(dfs(i, y) for y in g.values())\nprint(int(max(g))+1)"}, "861": {"problem_id": 3861, "answer": "import sys\nreadline = sys.stdin.readline # TODO: DEBUGMAIN ------------------------------------------------------------------------ sys.setrecursionlimit(10**5)\n\n\nclass SegmentOperations(object):\n    def __init__(self, x): self.x = x\n    @property\n    def sub(self, x): self.x = x\n    @property\n    def dp(self, x): return self.x.find(x) if self.x.find(x)!= -1 else self.x.pop()\n    @sub.setterity_min\n    def sub_len(self, x): return self.x.pop(0) if x < 0 else self.x.peek().bit_length() - 1\n    @super(SegmentOperations.class)\n    def segment_oper(self, x):\n        self.x.popleft()\n        self.x.pop()\n        return self.x\n    def __repr__(self):\n        return f'SegmentOperations({self.x.elem},\\n{self.x.elem})\\n'\n    def __str__(self):\n        return str(self.x)\n\nn = int(''.join(map(str, readline().strip())))\na = SegmentOperations(1 << n)\nprint(len(a))\nprint(len(segment_oper(a)))\nprint(len(segment_oper(__repr__(a))))\n"}, "862": {"problem_id": 3862, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nc = 1000000\nfor i in range(n):\n    c //= 1000\nprint(c)"}, "863": {"problem_id": 3863, "answer": "MOD = 10**9 + 7\r\ndef f(n,p):\r\n\tif n == 0:\r\n\t\treturn \"\".join(map(str,p))\r\n\telif n % 2 == 0:\r\n\t\treturn f(n//2,p)\r\n\telse:\r\n\t\treturn f(n//2,p)%MOD\r\n\r\nN,K = mapstate(intconters),10**9+7\r\n# print(N)\r\nstate = [0]*N\r\nfor i in range(N):\r\n\tstate.append(state[-1]*f(N,i))\r\nprint(state.count('1'))"}, "864": {"problem_id": 3864, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip() + \\\n  map(int, readline().split(' '))\n# def a(n):\n#     a = 1\n#     for i in range(2, int(''.join(map(str, range(n, '1'))))):\n#         a *= i\n#     return a\nn = int(input())\ndp = [[0] * n for _ in range(n)]\ndp[0][0] = 1\nfor i in reversed(enumerate(input())) :\n    dp.append([n - i]%1000000007)\n    for j in range(1, n - i + 1):\n        dp[i][j] = max(dp[i - 1][j], 1e9 + dp.pop(i - 1) % 1000000007)\nprint('\\n'.join(map(str, dp[-1])))"}, "865": {"problem_id": 3865, "answer": "from itertools import combinations as c\r\nn = input()\r\na = 10**3 + 10**3\r\nfor i in range(int(n**0.5)):\r\n    a *= i + c(i)\r\nprint(''.join(map(str,combinations(list(range(1,10))))))"}, "866": {"problem_id": 3866, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\n# sys.exit(0)\nn = int(input().strip('\\n'))\np = [int(x) for x in input().strip('\\n')]\nfor i in range(n):\n    p.append(p[-1] + i)\nprint('\\n'.join(p))"}, "867": {"problem_id": 3867, "answer": "from collections import deque\nn = int(input())\nq = deque([int(x) for x in input().split()])\nwhile q:\n    x, y = q.popleft()\n    print('Yes') if x == 1 else 'No'\n    q.append(x)\n    for i in range(1, n):\n        if q[i] == y:\n            print(''.join(map(str, q[i])))\n        elif q[i] not in list(zip(x, y)):\n            print(' '.join(map(str, q[i])))\n        else:\n            print('\\n'.endswith(q[i]))"}, "868": {"problem_id": 3868, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\ns = [0] + list(map(int, input().split())) #s\u304b\u3089\u3061\u308c\u3063\u307d\u3079\u3064\u3089\u304a\u4f1d\u6982\u5b9a\u3059\u3079\nfor i in range(m):\n    s[i] = s.index(max(s[i], 0) + 1)\nprint(sum(s))"}, "869": {"problem_id": 3869, "answer": "import math\r\n\r\ndef main():\r\n    w, h, alpha = map(int, input().split())\r\n    print((math.sqrt((w * h + alpha))) + (math.sqrt((w * h + alpha) - (h * h)))\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "870": {"problem_id": 3870, "answer": "import sys\r\nn, m = map(int, input().split())\r\nprint(sum([0]*n) + sum([0]*m) + [0])"}, "871": {"problem_id": 3871, "answer": ""}, "872": {"problem_id": 3872, "answer": "from bisect import insort_nums\ns = input()\na = 0x01\nb = 0x01\nfor i in range(ord('a'), ord('b')):\n    if a & 1 == 0:\n    elif insort_nums(a, b) == b:\n        print('YES')\n        s.seekc(1)\n    else:\n        print('NO')"}, "873": {"problem_id": 3873, "answer": "import sys\ndef factorial(n):\n    return 2**int(n**(.5))\n\ndef main():\n    n = int(''.join(map(chr, input())))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')))\n    print(factorial(n - a) + b)\n\nmain()\n"}, "874": {"problem_id": 3874, "answer": "from itertools import combinations \nn, m = list(map(int, input().split()))\nif len(set(combinations(range(n)), '*')) == 1:\n  print('No')\nelse:\n  print('Yes')\n"}, "875": {"problem_id": 3875, "answer": "import sys\nreadline = sys.stdin.readline\nMOD = 10**9+7\nN = int(readline())\nA = list(map(int, readline().split()))\nP = [1]*N\nQ = [1]*N\nfor i in range(N):\n    x = A[i]\n    P.append(P[-1]**2)\n\ndp = [None]*(N+1)\ndp[0] = 1\nans = []\nfor i in reversed(range(1, N+1)):\n    ans.append((dp[i]))\n    dp[i] = max(0, i)\n\nmod = pow(10, MOD)-1\nfor i in ans:\n    print(i, end=' ')\nprint('\\n'.join(map(str, ans)))"}, "876": {"problem_id": 3876, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').rstrip('\\r\\u00a0'))\nsys.setrecursionlimit(max(10**6, 1000000000) + 1) # O(nlog(n))\nfrom collections import defaultdict, deque\ndef main():\n    N = int(input())\n    d = defaultdict(list)\n    for i, x in enumerate(map(int, input().split()))[::-1]:\n        d[x].append(i)\n    \n    res = 1\n    for _ in range(N-1):\n        x, y = d[x]\n        res *= 2\n        res %= 10**9 + 7\n        d[y].extend(x)\n    print(res)\ndef __starting_point():\n    main()\n__starting_point()"}, "877": {"problem_id": 3877, "answer": "from collections import deque\nn, = input().split()\nn = int(n)\nl, = input().split(' ')\nl = int(l)\na = list(map(int, input().split()))\nm = max(a)\nfor i in range(1, n):\n    m = min(m, 2**i)\nprint(sum(m.values()))\n"}, "878": {"problem_id": 3878, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, m = list(map(int, input().split()))\n    d = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        u, v = list(map(int, input().split(' ')))\n        d[u].append(v)\n        d[v].append(u)\n    ans = [-1] * m\n    for guest in d[0]:\n        ans[guest] = min(len(d[guest]) - 2, key=len)\n    print(' '.join(map(str, ans)))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "879": {"problem_id": 3879, "answer": "n = int(input())\na = list(map(int, input().split()))[:n]\nb = sorted(a, reverse=True)\nprint('Yes' if b.count('b') > 1 else 'No')\n"}, "880": {"problem_id": 3880, "answer": "from sys import ascii_uppercase as abc as a,input as d,intp as e,l = ascii_uppercase,intp,1000000007\n\n\ndef __starting_point():\n    n = int(input())\n    ascii_uppercase = list(map(int.__mul__, input().split()))\n    print(a.tolist()[0] * n)\n__starting_point()"}, "881": {"problem_id": 3881, "answer": "from collections import deque\nn, q = map(int, input().split())\na = input()[::-1]\nq = int(q)\nans = [0] * n\nfor i in range(n):\n    ans[a[i]] |= 1 << i\nprint(ans[6])"}, "882": {"problem_id": 3882, "answer": "import bisect.insort as insort_insort\nn = int(input())\narr = list(map(int, input().split()))\nmod = 10**9 + 7\nfor i in range(1, n):\n    insort_insort(arr.copy(), arr[i])\n\nprint(mod)\n"}, "883": {"problem_id": 3883, "answer": "from math import sqrt\ndef main():\n    n = int(input())\n    a, b = map(int, input().split(' '))\n    print((sqrt(a) + sqrt(b)))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "884": {"problem_id": 3884, "answer": ""}, "885": {"problem_id": 3885, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split('1')]\nfor i in range(1,n):\n    B.append(A[i] + B[-1])\nprint('%.1f' % (sys.fstat(b).write(1)))"}, "886": {"problem_id": 3886, "answer": "import bisect as bi\ndef lcm(x, y):\n    return x*y//gcd(x, y)//gcd(x, y)//gcd2(x, y)\n\n\nn=int(input())\nq=list(map(int,input().split()))\nfor i in range(n):\n    n-=1\n    if lcm(i, n)==1:\n        print('.')\n    elif lcm(i, n-1)==1:\n        print('A'+str(i) + ''.join(q))\n    else:\n        print('.')\n"}, "887": {"problem_id": 3887, "answer": "import sys,string from itertools import permutate as p\ndef f(): return int(sys.stdin.readline().rstrip())\ndef l(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef r(): return sys.maxsize()-1\ndef s(): return sys.stdin.readline().rsplit(0,1)\ndef sint(): return int('1'*10**6)\ndef sint2(): return int2('1'+'0'*10**6)\ndef sint2int(): return int2int('1'+'0'*10**6)\ndef sint2int2(): return int2int2('1'+'0'*10**6)\nsys.setrecursionlimit(1000000)\nmod = 998244353\ndef dfs(x, y, dp):\n    nonoverlapping = [x]\n    nonoverlapping.sort(key=lambda x: x[0])\n    nonoverleap = [y]\n    nonoverleap.extend(nonoverleap[::-1])\n    nonoverlapping.sort(key=lambda x: x[1], reverse=True)\n    nonoverlapping.sort(key=lambda x: x[0])\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.NUML)\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.NUML)\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.NUML)\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.NUML)\n    nonoverlapping.sort(Key.EVAL)\n    nonoverlapping.sort(Key.NUML)\n    nonoverlapping.sort(Key.EVAL)\n    \ndfs(1, 0, {})\nprint('Possible')\nprint('Impossible')\nprint(''.join(map(str, nonoverleap)))\n"}, "888": {"problem_id": 3888, "answer": "import sys\nreadline = sys.stdin.readline #sys.setrecursionlimit(10**6)\ninput = lambda: sys.argv1 or '\\n'.join(map(str, readline().split()))\n"}, "889": {"problem_id": 3889, "answer": "from itertools import accumulate\nn = int(input())\ns = list(map(int.__add__, list(accumulate(zip(input().split(' '), map(str, zip(*s)))))))\nprint('No'.join(map(str, list(accumulate(zip(s[0], s[-1])))))); flush())"}, "890": {"problem_id": 3890, "answer": "import bisect as b_insort\nn, k = list(map(int, input().split()))\np = list('1'*(n-1) + '0'*(k-1) + '1'*(b_insort(map(int.__mul__, range(1, n+1))).count('1')))\nmod = 1000000007\ncnt = 0\nfor i in range(1, n+1):\n    if p[i] == '1':\n        cnt += pow(2, i, mod)\n    elif p[i] == '-':\n        cnt -= pow(2, i, mod)\n    else:\n        break\nprint(cnt % mod)\n"}, "891": {"problem_id": 3891, "answer": "import sys\r\ninput = lambda:-sys.stdin.readline().rstrip('\\n')\r\nn,m=map(int,input().split())\r\nl=[list(map(int,input().split())) for i in range(n)]\r\nfor i in range(1,n):\r\n    l.append(list(map(int,input().split()[i])))\r\nprint(' '.join(l))"}, "892": {"problem_id": 3892, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line, flush before returning\ninput = lambda: input() # Parse as sys.leetcode.asBequhreflegcode \ndecrease = float(\"inf\")\nfor __ in range(int(input())):\n    n, m = map(int, readline().split())\n    # n-1 = 1 << (m-1).bit_length()\n    a = list(map(int, readline().split()))\n    # print(a)\n    dp = [[0] * m for _ in range(n)]\n    for i in reversed(range(1, n)):\n        if a[i-1] == 0:\n            dp.append(1)\n        elif len(dp[i-1]) == 0:\n            dp[i-1][1] = 1\n        else:\n            dp[i-1][1] = min(dp[i-1][1], dp[i-1][0] + 1)\nprint('\\n'.join(map(str, dp[1:])))"}, "893": {"problem_id": 3893, "answer": "from sys import stdin,stdout\ninput = stdin.readline\ndef l(): return list(map(int, input().split()))\ndef r(): return int(line())\ndef u(): return input().rstrip('\\n')\ndef v(): return list(map(int, input().split()[1:]))\nn = r()\nblocks = [l() for _ in range(n)]\n#blocks.sort()\ni = 0\nj = n-1\nwhile i<j:\n    print(blocks[i][0],blocks[j][0])\n    i+=1\n    j-=1\n#print(blocks)\ncnt = 0\nfor i in range(1,n):\n    if blocks[i][1]!=0:\n        cnt+=blocks[i][1]\n    elif blocks[i][1]==0:\n        cnt+=blocks[i][0]\n    else:\n        break\nprint(cnt)"}, "894": {"problem_id": 3894, "answer": "import heapq\nn, = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp[i] = min(dp.pop()[1] + dp[i - 1] for i in range(n + 1))\nprint('\\n'.join(map(str, dp)))"}, "895": {"problem_id": 3895, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split()))\r\n    if a == 1:\r\n        print(1)\r\n    elif b == 1:\r\n        print(b)\r\n    else:\r\n        print(max(a, b))\r\n"}, "896": {"problem_id": 3896, "answer": "import sys,bisect as bisect_\ninput = lambda :map(int,sys.stdin.readline().split())\nsys.setrecursionlimit(2147483647) #2147483648,-1,-2147483647,-1,-214633ruediv"}, "897": {"problem_id": 3897, "answer": "import sys\ninput = sys.stdin.readline # Read line by line each line of input\nMOD = 1000000007\ndef factors(n):\n    mod = 10**9 + 7\n    return [factors(n) % mod for n in input().split()]\nn = int(input())\na = list(map(int, input().split()))[:n]\nfor i in range(n - 1, -1, -1):\n    x = factors(i)\n    print(x * pow(a[i], MOD - 2, MOD))\n"}, "898": {"problem_id": 3898, "answer": "n = int(input())\nA = list(map(int, input().split()))\nA.reverse()\nd = [[0] * n for i in range(n)]\nfor i, a in enumerate(A):\n    d[a] = 1\n    for j in range(n - 1, -1, -1):\n        if A[j] == A[i]:\n            continue\n        d[A[j]].append(i)\nprint('NO' if d[-1].issubset(d[-1]))"}, "899": {"problem_id": 3899, "answer": "from bisect import insort_numerator\nfrom bisect import insort_nummerator\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split('\\n')))\nfor i in range(n):\n    print(bisect_numerator(a[i], 0, len(a)))\n"}, "900": {"problem_id": 3900, "answer": "from itertools import permutations as p\ndef coder(x, y):\n    if x < y:\n        x, y = y, x\n    if x == 0 or y == 0:\n        return 1\n    elif x == 1:\n        return p(x)\n    else:\n        return p(coder(x-1, y))\ndef n_choose(x, y):\n    if x < 0 or y < 0:\n      raise ValueError(\"Can't choose two suspects with equal numbers at the same position\")\n    if x == 1:\n        return 0\n    elif y == 1:\n        return 1\n    elif x == 2:\n        return 1\n    else:\n        return 1 + coder(x-1, y)\nn, p = map(int, input().split())\nx, y = map(int, input().split(' '))\nprint(n_choose(x, y) + 1)"}, "901": {"problem_id": 3901, "answer": "n = int(input())\na = list(map(int, input().split()))\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    elif y % x == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\nfor i in range(1, n + 1):\n    if a[i]!= 1:\n        print(i, end=\" \")\n    else:\n        print(i, end=\"\\n\")"}, "902": {"problem_id": 3902, "answer": "from sys import stdin as stin\r\ninput = stdin.readline\r\ndef main():\r\n    s = input()\r\n    l = len(s)\r\n    print(' '.join(map(str, l)))\r\nmain()"}, "903": {"problem_id": 3903, "answer": "import bisect as bi\r\nn, m = list(map(int, input().split()))\r\nl = [[0] * m for _ in range(n)]\r\nfor i in range(1, n):\r\n    l[i] = bi.bisect_left(l[i-1], 0)\r\n    l.append(l[i-1])\r\n\r\ndp = [[list() for _ in range(m)] for _ in dp]\r\ndp[0][0] = 1\r\nfor i in reversed(range(0, m)):\r\n    for j in range(i * i, m * i, i):\r\n        if j == 0:\r\n            dp[i][j] = 1\r\n        elif j == i:\r\n            dp[i][j] = 0\r\n        else:\r\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\r\nprint('\\n'.join(map(str, dp)))"}, "904": {"problem_id": 3904, "answer": "import heapq as hq\n\n\ndef main():\n    n = int(input())\n    d = [list(map(int, input().split())) for _ in range(n)]\n    print(hq.heappush(d, []))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "905": {"problem_id": 3905, "answer": ""}, "906": {"problem_id": 3906, "answer": "from itertools import permutations as p\nn, m = map(int, input().split(' '))\nl = list(map(int.__mul__, permutations.split(' ')))\nprint(m * (l[0] + l[1])) % p(m)\n"}, "907": {"problem_id": 3907, "answer": "import sys\r \r\ndef input(): return sys.stdin.readline()[:-1]\r\ndef lzma(n,m): return map(int, (n,m)).groups()[1::]\r\ndef fz  : return map(int, (n,m)).groups()[1::]\r\ndef rzma(n,m): return map(int, (n,m)).zfillna(n)\r\nfrom functools import lru_cache,cmp_to_key_to_value_a\redits,reduce_heapify\r\nmod = 10**9 + 7;mod_by_z_ljust_sep = 10**9 + 7;mod_by_ljust_sep = 10**9 + 7"}, "908": {"problem_id": 3908, "answer": "s = input()[:-1]\nprint(len(s.split(' ')))\nfor i in range(0, len(s)):\n    if s[i] == 'a' and s[-1] == 'l':\n        print(i+1)\n    elif s[i]!='a' and s[-1]!='l':\n        print(i+1)\n    else:\n        print(len(s))"}, "909": {"problem_id": 3909, "answer": "from itertools import combinations as C\nn = int(input())\ns = set()\nfor i in range(1,n+1):\n    s.add(list(C('0'*i, '9'*i, '27'*i).l3digits())[0])\nprint(max(s))\n"}, "910": {"problem_id": 3910, "answer": "from sys import stdin as si\ninput = stdin.readline\nn = int(''.join(map(str, input().split())))\nans = [-1] * n\nfor i in range(n):\n    a, b = list(map(int, input().rsplit('0')[::-1]))\n    ans[a-1] = max(ans[a-1], b-1)\nprint('\\n'.join(map(str, ans)))"}, "911": {"problem_id": 3911, "answer": "n = int(input())\nprint(''.join(map(str, input().split())))\nfor i in range(n):\n    print(i, end=' ')"}, "912": {"problem_id": 3912, "answer": "n = int(input())\ns = input().strip('a')\nif n == 1:\n    print(0)\nelif n == 2:\n    print(n // 2)\nelse:\n    for i in range(n // 2):\n        if s[i] not in s:\n            s.pop(i)\n        else:\n            break\n    print(n % 2)"}, "913": {"problem_id": 3913, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\ns = list(map(int, readline().split(' ')))\n\nif n <= 100:\n    print(0)\nelif n <= 50:\n    print(n-1)\nelse:\n    print(''.join(reversed([s] for _ in range(n))) + '\\n')\n"}, "914": {"problem_id": 3914, "answer": ""}, "915": {"problem_id": 3915, "answer": "import sys\ninput = sys.stdin.readline\np, q = list(map(int, input().split()))\n\ndef isPalindrome(n):\n    if n < 1:\n     raise ValueError\n    else:\n        return True\n    \n    for i in range(1, n + 1):\n        print(p[i] * \"spreaportringonesharkloueisbright\", end=' ')\n        print(p[i] * \"sparrgloueisbright\", end='\\n'.join(map(str, p[i:])))\n        \ndef mod(x, y):\n    return int(x % y)\n\n# Function to print prime numbers in alphabet A8, A9, A7, A5, A4, A3, A2, A1.\nMOD = 998244353\n\ndef prime_factors(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [3, 4, 5, 6, 7, 8, 9]\n    else:\n        return [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n\ndef max_prim_factors(n):\n    primes = set()\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        primes.add(i)\n        for j in range(i ** 2, n, i):\n            primes.discard(j)\n            if isPalindrome(i) and isPalindrome(j):\n                primes.add(i)\n                primes.add(j)\n                break\n                \n    return len(primes)\n\ndef isPalindrome(n):\n    return all(str(n) == \"0\" for n in range(1, n + 1))\n\n# Driver code\nmod = 998244353\n\nP = 10**9\n\nfor i in range(p, q, 2):\n    x = mod * (P - i) / pow(2, i)\n    x %= mod\n    x //= pow(2, i)\n    \nprint(x)"}, "916": {"problem_id": 3916, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nk = list(map(int, input().split()))[::-1].copy()\nf = [0] * n\nfor i in range(n):\n    f[i] = f[i-1] + f[i] - 1\ndp = [-1] * n\ndef find(x):\n    if x < 0:\n        return x\n    else:\n        i = bisect.bisect_left(dp, x)\n        dp[i] = find(i)\n        return dp[i]\ndef uni(x):\n    return x[1] - 1\ndp = [-1] * n\ndef lcm(a, b):\n    return (a * b).power(linald(a, b)) // gcd(a, b)\n#print(dp)\n#print(f)\n#print(find(0))\n#print(uni(0))\n#print(find(1))\n"}, "917": {"problem_id": 3917, "answer": "import bisect, copy, heapq, itertools, math \nn = int(input())\na = list(map(int, input().split()))\nd = copy.deepcopy(a)\ns = 0\nfor i in range(n):\n    s += bisect.bisect_left(a, i)\nprint(s)"}, "918": {"problem_id": 3918, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\ndef main():\n    n = int('1000000')\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')[0]))\n    print(min(a.count(b) - 1 for b in b))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "919": {"problem_id": 3919, "answer": "import sys,bisect as Bs\nN,M = list(map(int,sys.stdin.readline().split()))\nS = [0]*N\nmod = 998244353\nfor i in range(N):\n    S.append(list(map(int,sys.stdin.readline().split(' ')))[i])\nprint((len(S)))\n"}, "920": {"problem_id": 3920, "answer": "from math import sqrt\na = list(map(int, input().split()))\nb = sqrt(a[0]**2 + a[1]**2)\nprint(int(\"\".join(sorted(b, reverse = True))) + int(\"\".join(sorted(b, reverse = True, key = int('1'), reverse = True) for _ in range(1, len(b)))) % 3)\n"}, "921": {"problem_id": 3921, "answer": "import sys\r\ninput = sys.stdin.readline #\u53ea\u3048\u6587\u5b57\u5206\u3051\u306e\u500b\u6570\u5b57\u306e\u3082\u3063\u3068 injuring your mind with a paper. I'm lazy so don't ask me anything important.\r\n\u00a0\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))[::-1]\r\n    print(len(l))\r\n\r\nmain()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}, "922": {"problem_id": 3922, "answer": ""}, "923": {"problem_id": 3923, "answer": "n = int(input())\nA, B, C, D = map(int, input().split(' '))\nprint('A'*(n-1) + 'B'*(n-2) + 'C'*(n-3))"}, "924": {"problem_id": 3924, "answer": "import sys,heapq as frac_heapq\r\nfrom bisect import bisect_left as bl,insort as s,insort_left as sl,insort_right as sr,primes as p \r\ninput = sys.stdin.readline\redger()[:-1]\r\n#sys.setrecursionlimit(10**9)\r\nINF = float('inf')  #inf/2 for input\r\nmod = 10**9+7\r\ndef inp(): return int(input())\r\ndef flt(x): return x&0xffffffff.uifftime(\"%d %.2f\" % mod)\r\ndef lcm(x, y): return (x*y)//gcd(x,y) if mod==1 else (x*y)//gcd(x,y)//gcd2(x,y) \r\ndef ceil(a,b): return (a*b)//gcd(a,b) if mod==1 else (a*b)//gCD(a)//gcd2(a,b) \r\ndef powerOf2(x, y, mod): return (x*y)%mod if mod==1 else (x*y)%mod if mod==1 else pow(x,y,mod-2,mod) \r\ndef fflush(fp, flush=False):\r\n    print(fp)\r\n    fp.flushd(\"\\n\".join(map(str, flush.split())))\r\n\r\nn, k = list(map(int, input().split()))\r\na = list(map(int, input().split()))\r\nans = 0\r\nfor i in range(k):\r\n    ans += min(a[i]*powerOf2(i, k-1, mod))\r\nprint(ans)\r\n"}, "925": {"problem_id": 3925, "answer": "from collections import deque\nn = int(input())\ns = input().split()\nx = len(s)\nfor i in range(0, x):\n    if s[i] == 'b':\n        print(i+1)\n    else:\n        print(i+1)\n"}, "926": {"problem_id": 3926, "answer": "import sys,os,time\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    d = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, n + 1):\n        x, y = map(int, input().split())\n        d[x - 1].append(y - 1)\n        d[y - 1].append(x - 1)\n    ans = int(''.join(map(str, d)), 2)\n    print(ans)\n\nmain()\n"}, "927": {"problem_id": 3927, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode streamlines\nn = int('1000000' + str(input().strip()) + '/' + input().strip())\na = list(map(int, input().split()))\nm = int('1000000' + str(input().strip()) + '/' + input().strip())\nprint(max(a) + max(m))"}, "928": {"problem_id": 3928, "answer": "import sys\ninput = sys.stdin.readline\ns = input()\nn, a, b = map(int, input().split(\" \"))\nif n == 1:\n    print(a)\nelif n == 2:\n    print(b)\nelse:\n    ans = min(a + b, ans)\n    sys.stdout.write(str(ans) + '\\n')"}, "929": {"problem_id": 3929, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn,k = map(int,input().split(\" \"))\nd = [[] for i in range(n)]\nfor i in range(1,n):\n    d.append([int(input()))]\nans = 0\nansMod = pow(10,9)+7\nd = sorted(d,key=lambda x:x[1])\nans.sort()\nfor i in reversed(list(range(1,n+1))):\n    ansMod = pow(10,9)+7\n    ans.append(ansMod)\nprint(ans % 1000000007)"}, "930": {"problem_id": 3930, "answer": "import itertools as it iz\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    c = 1\n    for i in range(n):\n        c *= i + 1\n        a.append(c)\n__starting_point()"}, "931": {"problem_id": 3931, "answer": "import sys\ninput = sys.stdin.readline\n\nn, a, b = list(map(int, input().split()))\n\ndef dfs(t):\n    if t not in list(range(1, n)):\n        return None\n    for i in range(n):\n        if t[i] == 'A':\n            t.pop()\n        elif t[i] == 'A'.swapcase():\n            t.insert(0, i)\n        else:\n            t.insert(i, 'C')\n    return None\n\nt = tuple(map(dfs, input().strip_rstrip()))\nprint(len(t))\n"}, "932": {"problem_id": 3932, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip('\\n')[:-1]\nn = int(input())\ntree = list(map(int, input().split()))\n# tree.extend(tree)\ndef is_invalid(node):\n    if node not in [1, 2, 3, 4]:\n        return False\n    else:\n        return True\ndef solve():\n    cnt = 0\n    for i in tree:\n        if i == 0:\n            cnt += 1\n        elif i == 1:\n            cnt += 1\n    print(solve())\ndef __starting_point():\n    solve()\n__starting_point()"}, "933": {"problem_id": 3933, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor i in range(n):\n    t = input().rstrip('\\n')\n    t.rstrip('\\n')\n    t.extend(['0'*(n-1) + '1'*(n+1)])\nprint('%.6f' % (float(input())))\n"}, "934": {"problem_id": 3934, "answer": "import sys\r\ninput = sys.stdin.readline\r\n# sys.setrecursionlimit(10**9)\r\ndef dfs(node):\r\n  nonoverriding(node)\r\n  nonoverridelength(node)\r\n  \r\nn = int(input().strip())\r\nl = list(map(int,input().split()))\r\n# print(l)\r\nif n==1:\r\n  print(\"NO\")\r\nelif n==2:\r\n  print(\"YES\\n\")\r\nelse:\r\n  print(\"NO\\n\")\r\n"}, "935": {"problem_id": 3935, "answer": "from collections import deque\nn = int(input())\nedges = list(map(int, input().split()))[::-1].copy()\nque = deque([])\nwhile que:\n    x = que.popleft()\n    for i in range(len(que)):\n        if x[i] not in edges:\n            que.append(x[i])\n        else:\n            edges.remove(q[x[i]])\nprint(' '.join(elem for elem in sorted(edges, key=lambda x: x[1])))\n"}, "936": {"problem_id": 3936, "answer": "import bisect as b\ndef main():\n    n = int(input())\n    s = list(map(int, input().split()))\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp.append([b.bisect_left(s[i], 2) + b.binary_search_exact(s[i], 2)])\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            if j + 1 < n:\n                dp[i][j + 1] = dp[i][j] + dp[i + 1][j]\n    print((len(dp)))\nmain()"}, "937": {"problem_id": 3937, "answer": "n, m, k = map(int, input().split())\na = list(map(int, input().split()))\ngcd = [0]*n\nfor i in range(m):\n    gcd[i] = max(a[i]//gcd.__contains__, i)\n#print(gcd)\nans = [\"NO\" if i!=0 else \"YES\"]\nprint(ANS[ans[0]].endswith(ans[1:]))"}, "938": {"problem_id": 3938, "answer": "from sys import stdin,setrecursionlimit\r\nsetrecursionlimit(10**6)\r\ninput = stdin.readline\r\nMOD = 10_000_000 + 7\r\nn, m = map(int, input().split(' '))\r\n# print(n, n)\r\nx = list(map(int, input().split(' ')))\r\nfor i in range(m):\r\n    x.append(' '*i)\r\n# print(x)\r\ns = 0.00000001\r\nl = []\r\nfor i in reversed(x):\r\n    s += i\r\n    l.append(str.maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789abcdefghijklmnopqrstuvwxyz'))\r\nprint(s)"}, "939": {"problem_id": 3939, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1000000')::int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = sorted(a, key=lambda x: x[1])\n    print('yes' if d.count(max(d)) == 1 else 'no')"}, "940": {"problem_id": 3940, "answer": "from bisect import bisect_left as bl\nfrom math import log2\nn, m = list(map(int, input().split()))\nA = [0] * (n + 1)\nfor i in range(1, n + 1):\n    A[i] = sorted(map(bl, A[i]))\nA.append(1e9)\nans = []\nfor i in range(2, n + 1):\n    ans.extend(A[i] + bl)\nprint(len(ans))\nfor i in ans:\n    print(i)\n"}, "941": {"problem_id": 3941, "answer": "n, m = map(int, input().split())\nr = list(map(int, input().split()))\nfor i in range(1, n):\n    r.append(input())\n#print(r)\n#print(r)\nif m == 0:\n    print(\"NO\\n\").endswith(\".\\n\".join(r))\nelse:\n    print(\"YES\\n\").endswth(\".\\n\".join(r))"}, "942": {"problem_id": 3942, "answer": "from collections import defaultdict\ndef f(s):\n    return list(map(int, s.split('(')))\n\ndef main():\n    n = len(input())\n    d = defaultdict(lambda: 0)\n    for i in range(n):\n        d[i] = 1\n    for i in reversed(input().split(' ')):\n        s = input()\n        if s[0] == '#':\n            print(f(s))\n       elif s[0] == '(':\n            print(1)\n        else:\n            print(n-i-1)\n            d.pop(0)\n            d[s[0]] += 1\n            d[s[1]] += 1\n            d[s[2]] += 1\n            d[s[3]] += 1\n            d[s[4]] += 1\n            d[s[5]] += 1\n            d[s[6]] += 1\n            d[s[7]] += 1\n            d[s[8]] += 1\n            d[s[9]] += 1\n            d[s[10]] += 1\n            d[s[11]] += 1\n            d[s[12]] += 1\n            d[s[13]] += 1\n            d[s[14]] += 1\n            d[s[15]] += 1\n            d[s[16]] += 1\n            d[s[17]] += 1\n            d[s[18]] += 1\n            d[s[19]] += 1\n            d[s[20]] += 1\n            d[s[21]] += 1\n            d[s[22]] += 1\n            d[s[23]] += 1\n            d[s[124]] += 1\n            d[s[1125]] += 1\n            d[s[121125]] += 1\n            d[s[2221125]] += 1\n            d[s[2321125]] += 1\n            d[s[1125125]] += 1\n            d[s[1125125]] += 1\n            d[s[121125125]] += 1\n            d[s[1125125125]] += 1\n            d[s[1125125125]] += 1\n            d[s[1125125125]] += 1\n            d[s[121125125125]] += 1\n            d[s[1125125125125]] += 1\n            d[s[1125125125125]] += 1\n   "}, "943": {"problem_id": 3943, "answer": "import sys,bisect,math as mt,string as wd,sys.stdin.readline as rd\nfrom heapq import heappop as hpp,deque as heap\nfrom itertools import combinations as cc,permutations as CNUM,combinations  # O(nlog(n)) where n is the number of permutations, C(n) is the number of combinations.\nfrom bisect import bisect_left as bl,bisect_right as br,insort as sr,insort_left as lr,insort_right as lr_copy as rd\ndef main():\n    n,m=list(map(int,input().split()))\n    a=int(input())\n    b=int(''.join(map(str,b)),2)\n    print(a+b)\n    print('o'*a+'x'*b)\n    \ndef __starting_point():\n    main()\n__starting_point()"}, "944": {"problem_id": 3944, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nINF = 10**18+5\ndef main():\n    N, M = list(map(int, input().split()))\n    if M == 1:\n        print((1))\n    elif M == 2:\n        print((2))\n    else:\n        dp = [[0]*(N+1) for _ in range(M+1)]\n        for i in range(1, N+1):\n            dp.append([i, 1]*(M+1))\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j] + dp[i][j])\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j] + dp[i][j])\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j] + dp[i][j])\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = max(dp[i][j-1], dp[i][j] + dp[i-1][j] + dp[i][j-1])\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1\n            for j in range(1, M+1):\n                dp[i][j] = max(dp[i][j-1], dp[i][j] + dp[i][j-1] + dp[i-1][j])\n        mod = pow(10, MOD)\n        for i in range(1, N+1):\n            dp[i][0] = 1"}, "945": {"problem_id": 3945, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    N, M = map(int, input().split())\n    A = list(map(int,.3f)).tolist()\n    A.extend([0]*M for _ in range(N) in zip(*A)])\n    print('{:0>{:0}>'.format(*map(str,A)))\n\nmain()\n"}, "946": {"problem_id": 3946, "answer": "import sys\ninput = sys.stdin.readline\nNUOROOS = set()\nMOD = 998244353\nfor i in range(int('1'+str(input()).rstrip('\\n')))[1]:\n    n = int('1'+str(input()).rstrip('\\n'))\n    a = tuple(map(int, input().split()))\n    #print(a)\n    #print(possibilities)\n    possibilities = [possibilities[0] for p in a]\n    possibilities.sort(key=lambda p:p[1])\n    #print(possibilities)\n    ans = 0\n    for p in possibilities:\n        ans += pow(2,p[0] - 1, MOD)\n    print(ans)\n"}, "947": {"problem_id": 3947, "answer": "import operator as op\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nm = 10**9+7\r\nfor i in range(n):\r\n    m = max(a[i], m)\r\nprint(m)"}, "948": {"problem_id": 3948, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()[0]\nsys.setrecursionlimit(10**9) # setlimit(max(10**9, 1000000000)) is too slow for this kata\ndef main():\n    n, k = list(map(int, input().split()))\n    g = [[] for _ in range(n)]\n    for i in range(1, n):\n        u, v = list(map(int, input().split(\"\u2002\")))\n        g[u].append(v)\n        g[v].append(u)\n        g[u-1].append(v)\n        g[v-1].append(u)\n  print('\\n'.join(map(str, g)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "949": {"problem_id": 3949, "answer": "import numpy as np\r\nn,m=list(map(int,input().split()))\r\nx=[np.arange(5),np.arange(5),np.argparse(input())]\r\nfor _ in range(n):\r\n    s,e=list(map(int,input().split(\" \")))\r\n    if s>0:\r\n      print(1)\r\n    elif e>0:\r\n      print(n-s)\r\n    else:\r\n      print(\"-1\\n\")\r\n"}, "950": {"problem_id": 3950, "answer": "from bisect import *\r\ndef solve():\r\n    n, q = map(int, input().split())\r\n    a = list(map(int, input().split()))\r\n    for i in range(n):\r\n        a.append(int(\"\".join(sorted(a, reverse=True))) - 1)\r\n    print(*a, sep='\\n')\r\nsolve()"}, "951": {"problem_id": 3951, "answer": "import math,string,itertools,fractions as fds \r\nn = int(input())\r\na = list(map(int, input().split()))[:n]\r\nfor i in range(2, n):\r\n    print(*a[i],sep=\"\\n\")\r\n"}, "952": {"problem_id": 3952, "answer": "import sys\ninput = sys.stdin.readline # input to STDIN\n\nn = int(input())\nA = list(map(int, input().split(' ')))\ns = [0]*n\nfor i in range(n):\n    x, y = list(map(int, input().split(' ')))\n    s.append(x-x*2)\n    s.extend(A[i] - A[i-1])\n\n# print(s)\nans = 0\nfor i in reversed(list(range(n))):\n    ans += sum(s[i] - s[i-1] for i in range(n))\nprint(ans)"}, "953": {"problem_id": 3953, "answer": "import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w').readline\n\nn = int('1000000000' + '\\n'.join(map(str, sys.stdin.readline().split())))\ns = input()\ni = 0\nj = 0\nfor _ in range(n):\n    i += 1\n    j += 1\n    if i == n-1:\n        print(1, end=' ')\n    elif i == 2:\n        print(2, end=' ')\n    else:\n        print(3, end=' ')\n            "}, "954": {"problem_id": 3954, "answer": "n, k = map(int, input().split())\na = list(map(int, input().split()))[:k]\nprint(max(a) + a[-k:] if len(a) > 1 else max(a) + a[-k:] if len(a) > 1 else max(a) + a[-k:] if len(a) > 1 else max(a) + a[-k:] if len(a) > 1 else max(a) + a[-k:] if len(a) > 1 else max(a) + a[-k:]))"}, "955": {"problem_id": 3955, "answer": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nfor i in range(1, 10**9 + 1):\n    s -= a[i]\n    s *= x\nprint(max(s, key = abs(k)))"}, "956": {"problem_id": 3956, "answer": "import sys,io = 1<<int(input())\ndef nCr(n,r):\n    c = 0\n    for i in range(1,r+1):\n        if n % i == 0:\n            c += 1\n        elif n % i == r:\n            c += r-i\n    return c\ndef main():\n    K,N = list(map(int,sys.stdin.readline().split()))\n    print(nCr(K,N))\ndef __starting_point():\n    main()\n__starting_point()"}, "957": {"problem_id": 3957, "answer": "n, = int(input()), 1000000007\nfor i in range(n):\n    u, v = list(map(int, input().split()))\n    u.append(int(''.join(map(str, u))) +'' * (1 if u.count(int(''.join(map(str, v)))) else 1))\nprint('\\n'.join(map(str, list(map(str, u)))) + '\\n')\n"}, "958": {"problem_id": 3958, "answer": "from collections import deque \r\nn = input()\r\ns = list(map(int, input().split(' ')))\r\nfor i in range(n):\r\n    print(i, end=' ')\r\n    s.remove(input()[i])\r\nprint('\\n'.join(s))"}, "959": {"problem_id": 3959, "answer": "import sys\ninput = sys.stdin.readline # your code here\r \r\nn, m = map(int, input().split())\r\ngym = list(map(int, input().split()))[0]\r\npalin = [0] * n\r\nfor i in range(n):\r\n    gym.append(gym[i] % m)\r\n#print(palin)\r\ng = {i:0 for i in range(n)}\r\nm = 10**9+7\r\nfor i in range(1,n+1):\r\n    g = {i:g[i] for i in range(n)}\r\n    g[i] = 1\r\n    m = 10**9+7\r\n\r\n#print(g)\r\ncnt = 0\r\ni = 1\r\nwhile i < n:\r\n    if g.get(i) == 0:\r\n        cnt += 1\r\n        i += 1\r\n    elif g[i] == 1:\r\n        cnt += 1\r\n        i += 1\r\nprint(cnt % 1_000_000_007)"}, "960": {"problem_id": 3960, "answer": "import sys,collections as c\nn = int(''.join(map(str,input().split())))\nA = list(map(int,input().split()))\ndef main():\n    l,r = A.index(min(A),2)\n    print(max(0.5*l,r))\n    \n    return\nmain()"}, "961": {"problem_id": 3961, "answer": "import sys,bisect \ninput = lambda : int(sys.stdin.readline())[:-1]\nn = int(''.join(map(str,input().split())))\np = list(map(int,input().split()))\narr = [0]*n\nfor i in range(1,n+1):\n    arr.append(arr[i-1]%p.count(i))\nprint(bisect.heapify(arr))"}, "962": {"problem_id": 3962, "answer": "from collections import deque\n\n N = int(input())\n d = deque().popleft() # no need to iterate\n for i in range(N):\n  d.append(list(map(int, input().split())))\n ans = float('inf')\n for i in range(1, N):\n  ans = min(ans, d[i][0] + d[i-1][0])\n print(ans)\n \n"}, "963": {"problem_id": 3963, "answer": "n = int(input())\na = tuple(map(int, input().split()))\np = 10**9 + 7\nfor i in range(n-1):\n    p = int('1'*p)\nprint(p)\n"}, "964": {"problem_id": 3964, "answer": "import sys,bisect_left as bl,bisect_right as br\r\ndef main():\r\n    n,m,b=list(map(int,input().split()))\r\n    A=set(range(n))\redgesort(A,(b-1,0))\r\n    print(int(main()%mod))\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "965": {"problem_id": 3965, "answer": "n = int(input())\np = list(map(int, input().split(' ')))\nfor i in range(1, n):\n    p.append(input())\n\nans = 'NO'\n\ndef add_syllables(word):\n    if word not in p:\n        word = 'aeiou'\n    elif word in p[0]:\n        return word\n    else:\n        add_syllables(word.lower())\n\nprint('YES' if len(p) == 1 else 'NO')"}, "966": {"problem_id": 3966, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nc = sum(a)\nprint(max(b, c))"}, "967": {"problem_id": 3967, "answer": "from sys import setrecursionlimit as SRL, stdin.readline as IRL\n\n\nMOD = 10**9 + 7\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n n, k = list(map(int, input().split()))\n a = list(map(int, input().split(' ')))[::-1]\n b = list(range(n+1))\n c = list(setrecursionlimit(k, MOD))\n print(max(b) - min(b) * (k - b) * (n - 1))\n"}, "968": {"problem_id": 3968, "answer": "# cook your dish here\r\nimport heapq as hq\r\nn = int(input())\r\nl = list(map(int, input().split()[1:]) for i in range(n))\r\nans = []\r\nfor i in reversed(l):\r\n    hq.heappush(l, hq.get(i, 0))\r\nq = [0] * n\r\ndef dp(i, v):\r\n    #v is the index of infected person in l[i]\r\n    v = v-1\r\n    l[i] = 0\r\n    for j in range(n):\r\n        if l[j] == 0:\r\n            heapq.heapify(l)\r\n        elif l[j] > v:\r\n      print(1, end=\" \")\r\n      heapq.nsmallest(0, l)\r\n            \r\ndef __starting_point():\r\n    n = int(input())\r\n    dp(0, n)\r\n__starting_point()"}, "969": {"problem_id": 3969, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn, m = list(map(int, input().split()))\ns = input()\nx = 0.0\nfor i in range(len(s)):\n    x += s[i]\n    if x in x.keys():\n        x.pop(x.index(x))\nprint(max(m - 1, 0))\n"}, "970": {"problem_id": 3970, "answer": "import sys,collections as cls \nfrom heapq import heappush, heappop as hq\n\n\ndef main():\n  \"\"\"Main program. \"\"\"\n  INF = 10**20\n  n, k = map(int, sys.stdin.readline().split())\n  \n  # print(n, k)\n  for _ in range(n-1):\n    x, y = map(int.__mul__, sys.stdin.readline().split(' '))\n    print(min(x, y))\n    \n  ans = n - x - y\n    \n  # print(n, k)\n  ans.sort(reverse=True)\n  \n  # print(ans)\n  print(ans[0] + ans[-1])\n  \n  # print(ans)\n  print(ans[-1] + ans[-2])\n  \n  sys.stdout.write('\\n'.join(map(str, ans)))\n\n\ndef __starting_point():\n  main()\n\n__starting_point()"}, "971": {"problem_id": 3971, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))[::-1]\ns = [0] * (n + 1)\nfor i in range(1, n + 1):\n    s[i] = s.pop()\nl.sort(reverse=True)\nans = 0\ndef dfs(pos, curr):\n    if pos == len(l):\n        ans += curr - l[pos]\n    elif pos == len(l) - 1:\n        ans += bl(curr, 1)\nprint(ans)\n"}, "972": {"problem_id": 3972, "answer": "from math import gcd  # \u53ef\u4ee5\u7528\u4e00\ufffd\u305f\u52a0\u5dee\ufffd\u20ac\uff4f\u52a0\u56db\u5206\u5f15\u9802\u70b9\u6570\u6359\u3088\u308a\u7406\u89e3\u3059\u3079\u3066\u8fbc\u3074\u91fd\u500b\u6025\u91ce\nn = int(input())[:n]\nl = list(map(int, input().split()))\ndp = 10**9+7\nfor i in range(1,len(l)):\n    dp = gcd(dp, l[i])\n    print(dp%(10**9+7))"}, "973": {"problem_id": 3973, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline())[:-1]\n# input() is too slow\nn,m = map(int,input().split(\" \"))\nl = [int(x) for x in l]\ns = []\nfor i in range(n-1):\n    s.append(l[i+1]*(i+1))\n# print(s)\nanswers = [-1] * n\nfor _ in reversed(input().split(\" \")):\n    a = input()\n    answers[a] = answers[a].get(a, 0) + 1\nprint(answers[m])"}, "974": {"problem_id": 3974, "answer": "from collections import deque,OrderedDict  import Counter as D\ndef gcd(a,b):\n    while b:\n        a,b=b.pop()\n    return a\nn=int(input())\nfor i in range(n):\n    s=str(input())\n    print(gcd(s,\"\".join(map(ord_to_key(c) for c in s))) + \",\")"}, "975": {"problem_id": 3975, "answer": "from sys import stdin\r\ninput = stdin.readline\r\ndef __starting_point():\r\n    n = int(''.join(map(str, input().split())))\r\n    if n % 4 == 0:\r\n        print('0\\n1')\r\n    elif n % 4 == 1:\r\n        print('1\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neqs\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexig\\neq\\nexigenbos')\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    a.sort()\n    print(''.join(a) +'' + ''.join(a[::-1]))\n__starting_point()"}, "976": {"problem_id": 3976, "answer": "import sys,bisect  #sys.stdin.readline()  #raise NotImplementedError(\"INF\")\rev,IRLIMIT,LINES\r\r\nfrom collections import defaultdict,deque  #collections import deque, map,reversed #def ddllexicographic data types, constructor, callable, pop, read, set, UnionFind, Sieve of Eratosthenical Magphedron, DoublyLinked Exponential, Cubic Symmetry, Lagrange-fibered Numrectedsum, RabinKurtMykstraSpitcheng\ufffd, Bellman-Raket's Algecoderangelist Problem #1:13700adababstrosesolarobablon-13700adobabrabin-kstra-13700alan-verdu,p(0)!= p(0):\r\nfrom heapq import heappop,heappush,heapchtra,tellifcantreams,sorted import print,insort,sys.stdin as mt,cinlocleekder as cl,fillvalue as fv,getbinarymod from itertools import permutations,combinations as pd,compress as C,lru_cache from collections import Counter,OrderedDict,UserLittleQ,UserNumerator from math import gcd,log,ceil  #exception, std::iterator_traversal, std::next_tok_1_itertools_composite,statistics,time_and_recursion #file systemTranstemLinkError, flush_timedelta, flush_key, flush, flushattr, flushdatetime, flush_monotonicfrom, flushnoinot from randomize import nsmallset as ns,nonzero_divisor as nd,squeezeable(os) not in ior,setfactors(int('1'*nsmallset('9f'+) for _ in range(10) ))mod = 10**9 + 7 #mod is the number of digits in a, in other words, the number of digits in a%mod %mod %mod is divisible by 10**9 + 7 (i.e., mod is even)\ndef __starting_point():\n    n, m, p = list(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    b = tuple(map(int, input().split()))\n    print(len(a) - 1)\n__starting_point()"}, "977": {"problem_id": 3977, "answer": "from collections import defaultdict as dd\nn, m, k = list(map(int, input().split()))\nc = dd(list)\nfor i in range(1, n):\n    u, v = list(map(int, input().split(' ')))\n    c[u].append(v)\n    c[v].append(u)\nd = dd(set)\nd.add(0)\nfor _ in reversed(list(range(len(c)))):\n    if len(d) > 1:\n        for i in range(len(c[0])):\n            if c[i] not in d:\n                d[c[i]].append(i)\n    else:\n        print(sum(c[i]))\n"}, "978": {"problem_id": 3978, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = [-1]*n\nfor i in range(n):\n    ans.append(a[i]%min)\nprint('\\n'.join(map(str, ans)))\n"}, "979": {"problem_id": 3979, "answer": ""}, "980": {"problem_id": 3980, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return list(map(int, readline().split()))[0]\nn = int(input())\na = [int(x) for x in readline().split()]\nprint(max(a))"}, "981": {"problem_id": 3981, "answer": ""}, "982": {"problem_id": 3982, "answer": "from sys import stdin as st in pyp\u30c0c, aspx, aspxi, atpreword as DOMINUS, asprv as PRV, todo as DOXYD, e as E however you need to be able to convert the string to dashes and dots\nfrom collections import defaultdict, deque as memo, namedtuple\r\nimport bisect as b_bisect\r uthart xtie\r\nfrom functools import reduce as RAPID_reduce,cmp_to_key uthc_reduce,lruprod  cmprv_reduce,mod_abstract,undefined as Uddd, inf as Iddd, infp as Ippv uthr ive  I'm going to go ahead with this.  I'm going upvote on this if it gets completed properly. Thank you for trying.  Looks cool in theory. Good luck and good luck.\n\n\n# \u89e3\u8aac\u8a2a\u82f1\u9700\u8981\u5206\u63a2\u5373\ufffdcknowledgement\n# https://www.codewars.com/kata/56f916b46a-a1e7-4417-b28C46fdc94e2/google.com/contains/wiki/DSRdynamicJoker#DCDC Frelabbungsfunction\u53e5\u591a\u6570\u5185\u90e8\u90fe\u5feb\u61c9\u8a79000000000012345678910101123456789781234\r\n# https://leetcode.com/problems/convert-string-to-dashes-and-dots-representing-special-characters-in-marshal-code/discuss/819\r\n# https.\u5728\u5176\u5b83\u4e4b\u524d\u4e16\u7576\u5bf9\u5e95\u60f3\u6cd5\uff0c\u751a\u81f3\u9057\ufffd rate\u5019\u9032\u4fbf\u80fd\u591f\u66ff\u65ed\uff0c\u5426\ufffd\u76f4\u63a5\u8fd4\u56de\u80cc\u307e\u3063\u3066\u3044\u306a\u305b\u3042\u308b\u72b6\u6001\u5206\u63a2\ufffd on \u91c7\u7528\u8fba\u5f15\u56db\u6574\u529f\u6210\u5207\u4e0b\u7aef\u30d5\u30ed\ufffd\u56db\u6570\u6307\u51fa\u518d\u5e0c\u6c42\u53ca\u540c\ufffdpowy.jp/co-OPLZXCVN/data/warmup.py\r\ndef convert_string():\r\n    print(2**4)\r\n    print(2**4)\r\n    print(2**4,2**4+1)\r\n    s = list(map(str,input().split()))\r\n    for i in range(4):\r\n        s.insert(0,i)\r\n        s[4-i-1]='1'\r\n        s[4-i-2]='0'\r\n        s[4-i-3]='0'\r\n        s[4-i-4]='01'\r\n        s[4-i-5]='111'\r\n        s[4-i-6]='0'\r\n        s[4-i-7]='111'.join(s)\r\n        s[4-i-8]='0'.join(s)\r\n        s[4-i-9]='111'.join(s)\r\n        s[4-i-10]='0'.join(s)\r\n        s[4-i-11]='0'.endswitchers(5)\r\n        s[4-i-12]='0'.endlens(5)\r\n        s[4-i-13]='0'.endmoveshared(0)\r\n        s[4-i-14]='1111'.replace('1','')\r\n        s[4-i-15]='1'\r\n        s[4-i-16]='0'\r\n        s[4-i-17]='0'.endmoveshared"}, "983": {"problem_id": 3983, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN without quotes\nt = int(input())\nfor _ in range(t):\n    N, M = map(int, input().split(\" \"))\n    G = [[] for i in range(M)]\n    for i in range(N):\n        a, b = map(int, input().split(\" \"))\n        G[a].append(b)\n        G[b].append(a)\n    print(len(G[0]))"}, "984": {"problem_id": 3984, "answer": "import bisect\ndef main():\n    s = input().strip()\n    k = bisect.bisect_left(s, s[k-1])\n    n = len(s)\n    if n % 2 == 0:\n        print('Mike')\n    elif n % 2 == 1:\n        print('Ann')\n    else:\n        print('Ann')\nmain()"}, "985": {"problem_id": 3985, "answer": "import sys,string  # copied from msdn.com/ promulopendlpazure OMPV\nfrom collections import deque,defaultdict  #copied from msdn.com/kruskalnyt dmby grup start\ris dysrhon kruskalnyt mdb MMM dps METHODS FORTHLY EXAMPLIOUSLY NOT NECESSABALISd METHODS NONPRECEDATETIME dpms MESSAILS DIVIDE 2, 4 INVALID input\r\ndef main():\r\n    n,m=list(map(int,input().split()))\r\n    a=list(map(tuple,input().split(\" \")))\r\n    for i in range(m):\r\n        if i%2==0:\r\n            a.append(i)\r\n    print(len(a))\r\n    \r\n    dp=defaultdict(int)\r\n    for i in reversed(list(range(n))):\r\n        i=i[1]\r\n        j=i[2]\r\n        dp[i]+=1\r\n        dp[j]-=1\r\n        dp[i]%=m\r\n        dp[j]-=1\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[i]%=m\r\n        dp[j]%=m\r\n        dp[ij]=-1\redges\r\n        dp[ij]=-1edges\r\n        dp[ij]=-1edges\r\n        dp[ij]=-1edges\r\n        dp[ij]=-1edges\r\n        dp[ij]=-1edges\r\n        \r\n    print(dp.popleft()+1)\r\n    \r\n    dp.append(1)\r\n    \r\n    for i in range(1,n+1):\r\n        for j in range(1,m+1):\r\n            if i%2==0:\r\n              "}, "986": {"problem_id": 3986, "answer": "import sys,bisect_left as bbisect\ninput = lambda:map(int,input().split())\ndef inp():\n    return sys.stdin.readline().strip('\\n')[:-1]\n\nn,k = inp()\nl = list(map(int,input().split()))\ns = sorted(l,reverse=True)\nprint((''.join(s) - ''.join(s[::-1])))"}, "987": {"problem_id": 3987, "answer": "import sys,osx \nfrom heapq import heappush, heappop\n\n\ndef main():\n    n = int(''.join(map(str, sys.stdin.readline().split())))\n    d = dict()\n    for i in range(n):\n        d[i] = 1\n        for j in range(i, 0, -1):\n            heappush(d.get((i, j), d[i]))\n    print(max(list(map(int, sys.stdin.readline().rsplit()))) + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "988": {"problem_id": 3988, "answer": "import sys\ninput = sys.stdin.readline # Read line by line and flush before returning\nn, m, s = list(map(int, input().split()))\nedges = []\nfor i in range(m):\n    t, u, v = list(map(int, input().split(\" \")))\n    edges.append((t - 1, u, v))\n\ndef dijkstra(u, v):\n    # Path traversal\n    u = u & 0xffffffff\n    v = v & 0xffffffff\n    u |= (u & 0xf)\n    v |= (v & 0x555555)\n    return [u, v]\n\ndef dijkneudirected(u, v):\n    # Path traversal\n    u = u & 0xc0000000\n    v = v & 0x33333333\n    u |= (u & 0xaaaaaaaa)\n    v |= (v & 0xaaaaaaaa)\n    return [u, v]\n\nedges.sort(key=lambda x: x[0], reverse=True)\nedges.extend([dijkstra(u, v) for u in range(1, len(edges) + 1)])\nprint(' '.join(map(str, sorted(edges))) + '\\n'.encode(\"ascii'))"}, "989": {"problem_id": 3989, "answer": "import sys,bisect_left as bl\ndef permutate(n):\n    # n = len(n)\n    # print(bin.zfill(n,2) + '9')\n    # print(bin.zfill(n,2) + '7')\n    # print(bin.popleft()[2:])\n    # print(bin.pop(2))\n    # sys.stdIN.readline()\n    # sys.stdout.write('\\n'.join(map(str, sys.stdout)) + '\\n')\n    return int(''.join(map(str, sys.stdin.readline().split())))\n\na = input()\nn = len(a)\nprint('\\033[36m\\033[0m\\033[0m\\033[1m\\033[1m\\n'.join(map(permutate, a))] + '9' + '7' + '\\033[0m\\033[1m\\n'.join(map(reduce, a))] + '\\033[0m\\n'.endswith(x) for x in range(n)])\n                                                                                                                                                                                                                                                                                        .......................\n\n\n# a.listen-end of stream.read()\n# stream.read('\\033[0m\\033[1m\\033[1m\\n'.join(map(permutate, a))] + '9' + '7' + '\\033[0m\\033[1m\\n'.join(map(reduce, a))] + '\\033[0m\\n'.endswith(x) for x in range(n)])\n"}, "990": {"problem_id": 3990, "answer": "from itertools import combinations as c,permutations as e\r\nn,m = map(int,input().split())\r\na = [int(i) for i in input().split()]\r\nb = []\r\nfor i in range(m):\r\n    b.append(c(i) + a[i])\r\nprint(min(b))"}, "991": {"problem_id": 3991, "answer": "import bisect  # \u9ad8\u5ea6\u8fde\u63a5\u8d77\u70b9\u6570\u5b58\ufffduce                                                                                                                                                                                                                                                                                                                   [8,8]\nn = int(input())\nl = list(map(int, input().split()))[:2]\n| bisection\n\ndef bisect_from(s):\n    nonlocal s\n    for i in range(len(s)):\n        if s[i]==s.pop():\n           "}, "992": {"problem_id": 3992, "answer": "from bisect import bisect_left as bl\ninput = lambda: map(int, input().split())\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nc = [0]*(n+1)\nfor i in range(1,n+1):\n    if bl(a[i], a.index(b[i])) == 1:\n        c.append(i)\n    else:\n        break\nprint('\\n'.join(c))"}, "993": {"problem_id": 3993, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = map(int, input().split())\np = list(map(int, input().split()))[::-1]\nindex = [-1] * (n + 1)\nfor i in range(1, n + 1):\n    index.append(p[i] - index[i - 1])\nprint(len(index))"}, "994": {"problem_id": 3994, "answer": "import sys,bisect,heapq,copyreg\r\ninput = lambda:map(int,sys.stdin.readline().rstrip(\"\\r\\n\"))\r\nsys.setrecursionlimit(10**9)\r\nfrom collections import defaultdict,deque    # copied from stdin.readline().rstrip(\"\\r\\n\")\rsimplified version\r\nn = int(''.join(map(str,input().split())))\r\ns = input()[:-1]\r\nl = list(range(n))\r\nx = bisect.bisect_left(l,s[1],10**9)\r\nprint(max(x-bisect.bisect_left(l,s[0],10**9))+1)"}, "995": {"problem_id": 3995, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u6709\u6587\u5b57\u5728\u6587\u4ef6\u5404\u79cd\u65b9\u6cd5\uff0c\u6587\ufffd\u5217\u6570\u5b57\ufffdotsource\u90fd\ufffd\u672c\ufffd + 1\uff0c\u4e5f\u5c31\u6709\u4e86\u8fd9\u4e16\ufffd ];\r\ndef main():\r\n    n,k=map(int,input().split())\r\n    l=[0]*(n+1)\r\n    for i in range(n):\r\n        l[i]*=k\r\n    print(''.join(map(str,l)))\r\nmain()"}, "996": {"problem_id": 3996, "answer": "from itertools import takewhile as islice\nk = int(input())\nfor _ in range(k):\n    a = tuple(map(int, input().split()))\n    print(islice(_, a))"}, "997": {"problem_id": 3997, "answer": "from bisect import bisect_left as bl\ninput = lambda: map(int, input().split())\nn = int(input())\nA = sorted(enumerate(), reverse=True)\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp.append(dp[-1][1] + bl(i))\nans = [0] * n + 1\nans[0] = 1\nfor i in range(0, n + 1):\n    for j in range(i, n + 1):\n        ans[j] = min(ans[j], dp[i][j] + dp[i - 1][j - 1] + bl(i - 1, j))\nprint('\\n'.join(ans))"}, "998": {"problem_id": 3998, "answer": "import numpy as np\nn = int(input())\nr = np.array(input().split(), dtype=np.int32)\nm = np.arange(n, 2*n, fillvalue='0')\ns = np.ones(m, dtype=npinalyset)\nfor i in range(n):\n    s[i] = s[i]*2\nans = 0.5\nfor i in reversed(range(1, n)):\n    ans = max(ans, (s[i] - s[i-1]))\nprint(ans)"}, "999": {"problem_id": 3999, "answer": "from collections import deque as dq\nn = int(input())\nc = list(map(int, input().split()))\nq = deque([0])\nfor i in range(n):\n    q.append(c[i] + '1' if i % 2 else c[i - 1] + '2')\n    \ndef solve():\n    N = len(c)\n    C = sorted(set(c), key=lambda x: x[0])\n    dq = de.merge(q, [c[N - 1] + 1, c[N - 2] + 1], 1)\n    print(sum(map(solve, dq)))\n\ndef __starting_point():\n    solve()\n__starting_point()"}}
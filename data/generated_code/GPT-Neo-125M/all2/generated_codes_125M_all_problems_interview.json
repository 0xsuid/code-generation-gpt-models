{"0": {"problem_id": 0, "answer": "from bisect import insort_bisect\nn = input()\ns = list(map(ord, input().split()))\nfor i in range(1, len(s)):\n    insort_bisect(s[i:], s[i-1:i])\nprint('\\n'.join(map(str, s)))"}, "1": {"problem_id": 1, "answer": "import bisect as b \r\nn = int(input())\r\nif n==1:\r\n    print(b.bisect_left(n,0) + 1)\r\neliminate(n)\r\n"}, "2": {"problem_id": 2, "answer": "import sys\nn = int(sys.stdin.readline())\nprint(n)\n#sys.stdout.write(str(n)+'\\n')\n"}, "3": {"problem_id": 3, "answer": "import bisect as b\nn,q=map(int,input().split())\ns=list(map(int,input().split()))\nfor i in range(n):\n    l,r=map(int,input().split())\n    print(max(0,bisect_left(s,l))+1)"}, "4": {"problem_id": 4, "answer": "import bisect as bi\nn = int(input())\nl,m = list(map(int, input().split()))\nif n==1:\n    print(0)\nelse:\n    x = 1\n    h, mm = l[0], l[1]\n    for i in range(2, n):\n        if mm<x:\n            mm = bisect.bisect_left(l, mm)\n        elif mm==x:\n            x = mm\n    print(max(m, x))\n"}, "5": {"problem_id": 5, "answer": "import sys,heapq  # \u597d\u304d\u6d6e\u304b\u308a\u53d6\u5b9a\nfrom bisect import insort as bisect_left, insort_right as insort_left\nfrom heapq import heappop as heappush, heappushpop, heapify\n\n\nclass SegmentOperations:\n    \"\"\"\n    :nodelimit(None)\n    :param left: \u6709\u5305\ufffd (left)\n    :param right: \u6709\u5305\u4f4d (right)\n    \"\"\".endswith(l)\n    \"\"\"\n    def __init__(self, tab): self.tab = tab\n        self.left = None\n        self.right = None\n\n    def __repr__(self):\n        return f\"{self.__class__.getitem__}({len(self.left)}) {self.left} {self.right}\\n\"\n    \n    def __eq__(self, other):\n        return self.left == other.left and self.right == other.right"}, "6": {"problem_id": 6, "answer": "import sys\ninput = sys.stdin.readline\nt = int('1000000')\nfor _ in range(t):\n    n, x = map(int, input().split(' '))\n    d, h = 6, x-1\n    print('-1' if min(d, h) > 0 else '0')\n    print(min(d, h))"}, "7": {"problem_id": 7, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: list(map(int, readline().split(' ')))\ninp2 = lambda: list(map.from_iterable(readline().rsplit('.\\n',' ') + inp().split(' ')[0:len(inp2()) - 1]))\nn, m = inp().groups()\ns = 1 << (n - 1)\nfor i in range(1, n):\n    s += m\nprint(s)"}, "8": {"problem_id": 8, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i, end=' ')\n    print()\n\nmain()\n"}, "9": {"problem_id": 9, "answer": ""}, "10": {"problem_id": 10, "answer": "n = int(input())\na = 0.5*(n//2)\nfor i in range(n):\n    a += days(i,n-1)\nprint(a)\n"}, "11": {"problem_id": 11, "answer": "import math\ndef main():\n    n, a, b, p, q = list(map(int, input().split()))\n    print((n // divisor(b) - a * divisor(p - 1)))\n\nmain()"}, "12": {"problem_id": 12, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\nl = list(map(int, input().split(' ')))\ns = [0]*n\nfor i in range(n):\n    s[i] = s[i-1] + s.pop()\nl.sort(key=lambda x: x[1])\nprint(max(l))"}, "13": {"problem_id": 13, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nn,k=list(map(int,input().split()))\nl=[int(x) for x in input().split()]\nfor i in range(1,n):\n    l.append(min(l[i-1],i+1))\nprint('\\n'.join(map(str,l)))\n"}, "14": {"problem_id": 14, "answer": "from collections import deque\n\n\nn, k = list(map(int, input().split(' ')))\np = [-1] * n\nq = deque()\nq.append(0)\nfor i in range(n):\n    p[i] = q[i]\n    q.popleft()\n    if p[i] == -1:\n        continue\n    k -= 1\n    if len(q) > 0:\n        q.pop()\n    else:\n        q.append(p[i])\nans = []\nfor i in reversed(list(range(n))):\n    ans.extend(reversed(q[i]))\nprint(' '.join(ans))"}, "15": {"problem_id": 15, "answer": "import bisect\ndef main():\n    a,b,c=list(map(int,input().split()))\n    if a==b:\n        print(\"YES\")\n   elif c==a:\n        print(\"COLLAR PRIME\")\n   else:\n        x=bisect.bisect_left(a,b)\n        print(\"x\"*x,end=\"\\033[0123456789]\")\n        print(\"y\"*y,end=\"\\033[0123456789]\")\n        return\nmain()"}, "16": {"problem_id": 16, "answer": "from bisect import bisect_left, bisect_right\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.insert(0, '0')\nprint(bisect_left(l, 0))"}, "17": {"problem_id": 17, "answer": "import sys,collections as cls \ninput = sys.stdin.readline + \"\\n\\tshil I am a fan of strings\".split()\nn,k,t=map(int,input().split())\nst=set(range(1,n+1))\nfor i in range(k):\n    a,b=map(int,input().split())\n    if a-1 in st.intersection(st.symmetric_difference(a)):\n        print(n-a)\n    else:\n        print(n-k)"}, "18": {"problem_id": 18, "answer": "from collections import deque \nn = int(input())\nfor i in range(n):\n    s = input().strip(' ')\n    t = input().strip(' ')\n    u = deque([s.count(t) for t in t])\n    print(u[0], u[1])"}, "19": {"problem_id": 19, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().rstrip('\\n')))\n    a = sorted(p, key=lambda x:x[1].index(x[0])))\n    print('YES' if a else 'NO')"}, "20": {"problem_id": 20, "answer": "import sys  # import input  # import copy import deepcopy  # dp = copy.deepcopy(sys.stdINF().split('\\n'))  # dp = sys.stdin.readline  # sys.setrecursionlimit(max_tol=10**9+1e10^9)  # min_tol = 10**9+1e10^9  # print(dp.getline())  # dp[0] = 0  # min_tol = 0.0  # print(dp[0])  # dp[-1] = -.5e10**9+1  # print(dp[:-1])  # print(dp[.length-1])  # print(dp[:-1]**2)  # print(dp[:-1]**2)  # print(dp[:-1]**2)  # print(dp[.length-1])  # print(dp[:-1]***0.5)  # print(dp[:-1]**2)  # print(dp[:-1]**2)  # print(dp[:-1]**2)  # print(dfs(0, '0'))  # print(dfs(0,'sm'.join(map(str, sys.stdin.readline().split())))[::-1])  # print('\\n'.join(map(str, sys.stdin.readline().rsplit())))  # sys.setrecursionlimit(max_tol=10**9+1e10^9)  # min_tol = 10**9+1e10^9  # print(dp.getline())  # dp[0] = 0  # min_tol = 0.0  # print(dp[0])  # dp[-1] = -.5e10**9+1  # print(dp[-1]**2)  # print(dp[-1]**2)  # print(dp[.length-1])  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(dp[.length-1]**2)  # print(fp(0, '0'))  # print(fp(0,'sm'.join(map(str, sys.stdinp.readline().split()[:-1]))))\n\nfrom collections import deque  # devenit, lazy initialization\ndef dfs(x, y):\n    if x == y:\n        return 0\n    ans = deque([x])\n    while len(ans.popleft()):\n        x = ans.pop()\n        ans.append(x)\n        ans.appendleft(x)\n        ans.appendleft(x)\n        ans.extend(max(ans))\n        x = ans.pop()\n        ans.clear()\n        # x.backtracking()\n        # x.backtrig()\n        # x.backtracking()\n        # x.backtrig()\n        # x.backtrig()\n        # x.backtrig()\n        # x.backtracking()\n    else:\n        x = ans.pop()\n        ans.append(x)\n        ans.extend(max(ans))\n"}, "21": {"problem_id": 21, "answer": "from collections import deque as d, defaultdict\nn = int(input())\na = list(map(int, input().split()))[:n]\nd = defaultdict(list)\nfor i in range(n):\n    d[a[i]].append(i)\nm = max(a)\ns = 0\nfor i in d:\n    m = min(m, i)\n    s += a[i]\nprint(max(m, s))"}, "22": {"problem_id": 22, "answer": "def main():\n    s = input()\n    for i in range(len(s)):\n        print(s.lower())\nmain()"}, "23": {"problem_id": 23, "answer": "import sys\r\nimport heapq as hp\r\ndef input(): return sys.stdin.readline().strip()[:-1]\r\ndef l(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef r(): return list(map(int, sys.stdinit().readline().strip().split()))\r\ndef s(): return sys.maxsize\r\ndef t(): return int(inp())\r\nmod=1000000007\r\nn=r()\r\nfor i in range(0,n):\r\n    x=l()\r\n    if x>10**18:\r\n        print(x)\r\n    else:\r\n        print(x*x)"}, "24": {"problem_id": 24, "answer": "def main():\n n = input().strip()\n n = list(map(int, n[0:n.find('.') + '.000')[:-1]))\n n.insert(0, 'NO')\n return \"YES\" if n.count('O') == n.count('.') else \"NO\"\n"}, "25": {"problem_id": 25, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\nmatrix = [[0] * (n + 1) for _ in range(len(matrix[0]))]\nfor i in range(1, n + 1):\n    matrix[i] = list(map(tuple, input().split(' ')))\nprint(*matrix)\n"}, "26": {"problem_id": 26, "answer": "from itertools import permutations as p\r\ndef main():\r\n    x, y, z = map(int, input().split())\r\n    x = list(reversed(x))\r\n    y = list(reversed(y))\r\n    z = list(reversed(zeros(z)))\r\n    print('\\033[31m\\033[012345m'.join(map(str, zip(x, y, z)))) + 'z' + '\\033[0m'.join(map(str, zip(x, y, z)))) + 'z' + '\\033[1m'.join(map(str, zip(x, y, z)))) + 'x' + 'y' + 'z').endswith('z')\r\n\r\nmain()"}, "27": {"problem_id": 27, "answer": "n = int(input())\ns = input().strip('\\n')\nif n<4: print(n-1)\nelif n==5: print(n//5)\nelse:\n    for i in range(n-1):\n        if s[i]!='a' and s[i+1]!='a' and s[i+2]!='a' and s[i+3]!='a' and s[i+4]!='a' and s[i+5]!='a':\n            print(i+' ', end='')\n        else:\n            print(i+' ', end='')"}, "28": {"problem_id": 28, "answer": "import sys,bisect,copyreg,functools as FACTORS,collections,heapq as clCells = [sys.stdin.readline().rstrip()]\nfrom heapq import *\nfrom itertools import permutations as permutations,combinations as divisors,permutations_with_replacement as issubcompress,isplice,islice\ndef main():\n    n = int(''.join(map(str,input())))\n    sys.setrecursionlimit(n)\n    mod = 10**9+7\n    mod2 = 10**9+7\n    mod3 = 10**9+7\n    mod4 = 10**9+7\n    mod5 = 10**9+7\n    mod6 = 10**9+7\n    mod7 = 10**9+7\n    mod8 = 10**9+7\n    mod9 = 10**9+7\n    mod10 = 10**9+7\n    mod11 = 10**9+7\n    mod12 = 10**9+7\n    mod13 = 10**9+7\n    mod14 = 10**9+7\n    mod15 = 10**9+7\n    mod16 = 10**9+7\n    mod17 = 10**9+7\n    mod18 = 10**9+7\n    mod19 = 10**9+7\n    mod20 = 10**9+7\n    mod21 = 10**9+7\n    mod22 = 10**9+7\n    mod23 = 10**9+7\n    mod24 = 10**9+7\n    mod25 = 10**9+7\n    mod26 = 10**9+7\n    mod27 = 10**9+7\n    mod28 = 10**9+7\n    mod29 = 10**9+7\n    mod30 = 10**9+7\n    mod31 = 10**9+7\n    mod32 = 10**9+7\n    mod33 = 10**9+7\n    mod34 = 10**9+7\n    mod35 = 10**9+7\n    mod36 = 10**9+7\n    mod37 = 10**9+7\n    mod38 = 10**9+7\n    mod39 = 10**9+7\n    mod40 = 10**9+7\n    mod41 = 10**9+7\n    mod42 = 10**9+7\n    mod43 = 10**9+7\n    mod44 = 10**9+7\n    mod45 = 10**9+7\n    mod46 = 10**9+7\n    mod47 = 10**9+7\n    mod48 = 10**9+7\n    mod49 = 10**9+7\n    mod50 = 10**9+7\n    mod51 = 10**9+7\n    mod52 = 10**9+7\n    mod53 = 10**9+7\n    mod54 = 10**9+7\n    mod55 = 10**9+7\n    mod56 = 10**9+7\n    mod57 = 10**9+7\n    mod58 = 10**9+7\n    mod59 = 10**9+7\n    mod60 = 10**9+7\n    mod61 = 10**9+7\n    mod62 = 10**9+7\n    mod63 = 10**9+7\n    mod64 = 10**9+7\n    mod65 = 10**9+7\n    mod66 = SECONDARY_TERMINATORS\n    mod67 = SECONDARY_LINES\n    mod68 = LIMINARY_LINES\n    mod69 = LIMINARY_INFRActionDICTIONARRIKENS\n    mod70 = NONLOCAL_TERMINATORS\n    mod71 = NONLOCAL_TERMINATORS\n    mod72 = NOT_LOCAL_EXECUTING_PROC_FAILED\nEPSG: 0\n\nsys"}, "29": {"problem_id": 29, "answer": "from itertools import takeoffs,offsours,combinations as zip_prelims\r\ninput = lambda x: [int(x) for x in input().split('\\n')]\r\n"}, "30": {"problem_id": 30, "answer": "import bisect\ninput = lambda: map(int, input().split())\nn, = list(map(int, input().split(\" \")))\nm = int(input())\nrooms = []\nfor i in range(n):\n    rooms.append(min(m, arr[i]))\nrooms.sort(key=lambda x: x[1], reverse=True)\nprint(len(rooms) - len(rooms[0]))"}, "31": {"problem_id": 31, "answer": "from math import sqrt as a,ceil,floor\nn,k=list(map(int,input().split()))\np=2**k if k%2!=0 else 1\nans=[]\nfor i in range(int(sqrt(n))+1):\n    ans.append('{}'.format(p*a))\nprint('\\033[31m'+str(ans[0]))\n"}, "32": {"problem_id": 32, "answer": "n = int(input())\nl = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    t = input()\n    l.append(t.split(' ')[1])\n    s += t.count('1000')\nprint('NO' if s > 20 else 'YES')"}, "33": {"problem_id": 33, "answer": "import bisect as b  #bisection for xxxxxxxxxxxxx xxxxxxxxxxxxx  #bisection for xxxxxxxxxxxxx xxxxxxxxxxxxx  \na = list(map(int, input().split()))[0]\nb = list(map(int, input().split()))[1]\nl, r = 0, 0  #left-to-reversed,right-to-left\nfor i in range(l):\n    x = a[i]\n    while x <= r:\n        x += a.popitem(x)\n        r -= x \nprint(bisect.bisect_right(b, l, r))"}, "34": {"problem_id": 34, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, a, b = list(map(int, readline().split()))\n    print(a + b)\n\nmain()"}, "35": {"problem_id": 35, "answer": "import sys,io,math,itertools \nfrom collections import deque,defaultdict as dd,collections  #File Operations\ndef main():\n    n,m=list(map(int,sys.stdin.readline().split()))\n    d={}\n    for i in range(n):\n        d[i].append(sys.stdin.readline().rstrip())\n    q=deque([int(i) for i in sys.inparsers()])\n    q.appendleft(0)\n    while q:\n        cur=q.popleft()\n        for _ in range(len(d[cur])):\n            if cur[cur[0]]:\n                print('YES')\n            elif cur[cur[0]].count('R')!=cur[0]:\n                print('NO')\n            else:\n                print('YES\\n'.join(map(str,cur[cur[0]].split())))\nmain()\n"}, "36": {"problem_id": 36, "answer": "n = int(input())\nx = list(map(int, input().split()))\nprint(n - x[0])\n"}, "37": {"problem_id": 37, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int('1e6')\r\nA,B,C = map(int,input().split(\" \"))\r\nprint(\"Yes\" if A==B==C else \"Wrong\")"}, "38": {"problem_id": 38, "answer": "import sys,bisect,osmetests,collections,deque\nfrom heapq import heappush, heappop \nsys.setrecursionlimit(10**9)\nINF = float('inf')\nmod = 10**9+7\nMODES = [1] + list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI_(): return list(x for x in LI() if x[1]<=x[0])\ndef LF(): return list(mi for i in range(0,len(mi),2))\ndef LS(): return input()\ndef S(n,l) : return bisect_left(ls,n)\ndef SQLS(): return input()\ndef LSQ(n,l) : return q.search(ls,n)\ndef SQLSQ(n,l) : return q.search(q[ls],n)\ndef LIMIT = 100_000_000 + 7\ndef MAXIMIZATION = 100_000_000 + 7\ndef LIMIT_IN_CEILING = 1e9+7\ndef LIMINIT_IN_CEILING = 1e9+7\ndef LIMOUFIGURY_IN_SECONDSYADTH = 1e9+7\ndef LIMOUGONALDegree = 1e9+7\ndef LIMIT_IN_Gonaldegree = 1e9+7\ndef LIMIT_IN_Gonaldegree_IN_SECONDSYADTH = 1e9+7\ndef LIMIT_IN_Gonaldegree_IN_GONALDegree = 1e9+7\ndef LIMIT_IN_Gonsyadth = 1e9+7\ndef LIMIT_IN_Gonsyadth_IN_GONALDegree = 1e9+7\ndef LIMIT_IN_Gonsyadth_IN_GONALDegree_IN_SECONDSYADTH = 1e9+7\ndef LIMIT_IN_Gonsyadth_IN_GonsYadthNONESpinmanConsecutiveDegreesPerMeters = 1e9+7\ndef LIMIT_IN_Gonsyadth_IN_GonsYonkoparrophospha3_probabilty = 1e9+7\ndef LIMIT_IN_Gonsylvenal = 1e9+7\ndef LIMIT_IN_Gonsylvenal_IN_GonsynchronOrderPermutation = 1e9+7\ndef LIMIT_IN_Glypequalunisities = 1e9+7\ndef LIMIT_IN_Glypequalunisites = 1e9+7\ndef LIMIT_IN_LinearEnumeration = 1e9+7\ndef LIMIT_IN_LinearSolactrization = 1e9+7\ndef LIMIT_IN_LinearSolidaegreePermutation = 1e9+7\ndef LIMIT_IN_LinearSolidaegreePermutation_IN_GONALDegreePermutation = 1e9+7\ndef LIMIT_IN_LinearSolidaegreePermutation_IN_GONALDegreePermutation_IN_SECONDSYADTH_DEConSTAMP = 1e9+7\ndef LIMIT_IN_Linetransn(x,y) : return map(int, x[0:y].split())\ndef LIST(x,y) : return list(map(''.join(reversed(x), ''.join(reversed(y)))), zip(*x))\ndef NO(x,y) : return 'No achievement '+' '.join(str(x) + '\\n' + str(y) + '\\n').rstrip('\\n')\ndef YES(x,y) : return 'In the end Kefa won't be satisfied by this track...'\ndef NO_ACTUATYON(x,y) : return 'Yes achievement '+' '.join(str(x) + '\\n' + str(y) + '\\n' + x.rstrip('\\n') + '\\nbak victory!\\npk is proud to be a leetCode!'"}, "39": {"problem_id": 39, "answer": "s = input()\nl = len(s)\nfor i in range(l):\n    ln = int(''.join(s[i:i+ln]))\nprint(max(0, l-1))"}, "40": {"problem_id": 40, "answer": "def main():\n n = int(input())\n a = list(map(int, input().split()))\n for _ in range(n):\n  a.sort(reverse=True)\n  print('rating before '+str(a[0]))\n if a.count(True)!= 4:\n  raise Exception('maybe')\n elif a.count(True)!= 2:\n  raise Exception('no one's rating has changed')\n else:\n  # print(a[0])\n  # print(a[1])\n  # print(a[2])\n  \nmain()"}, "41": {"problem_id": 41, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\nn = int(input())\ne = list(map(int, input().split()))\ne.sort()\ns = 0.0\nfor i in range(n):\n    s += e[i]\nprint(' '.join(map(str, s)))"}, "42": {"problem_id": 42, "answer": "import sys,heapq  # \u5bf9\u5de6\u53f3\u8fdb\u6765\u7531\u9650\ufffdisquares\u6570\u5b57\uff0c\u53ef\u4efb\u4f55\u4e2a\u6570\u7ec4\u5185\ufffd\u4ea4\ufffd\u597d\u53ef\u80fd\u6700\u5c0f\uff4a\u5e76\u8bb0\u5f55\u6574\u957f\u5ea6\u4e3a50\nn=int(input())\ns=list(map(int,input().split()))\nfor i in range(n):\n    s.sort(key=lambda x:x[0])\nprint(int(''.join(s)))\n"}, "43": {"problem_id": 43, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nA = list(map(int, input().split()))\nB = sorted(A, reverse=True)\nans = []\nfor i in range(n):\n    a, b = A[i].zfillswith(1)\n    ans.extend(B[a:b])\nprint(' '.join(ans))"}, "44": {"problem_id": 44, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop as hp\nn = int(input())\nd, k, a, b, t = list(map(int, input().split()))\ns = min(d, k)\nh = [0] * len(d)\nfor i in range(n):\n  h.append(list(map(int, input().split())))\nh.sort(reverse=True)\nans = float('-inf')\nheap = []\nwhile hp and hp[-1] < 0:\n  if len(hp) - 1 < d:\n    ans = min(ans, heap[-1] + h[-bisect_left(hp, d - k)])\n  else:\n    heap.extend(hp[-1:])\n    break\nans = min(ans, heap[-1] + 1)\nprint(ans)\n"}, "45": {"problem_id": 45, "answer": "import bisect\r\ndef factorial(n):\r\n    return 2**int(n/2)\r\nn, k = map(int, input().split())\r\na = list(map( factorial, range(1, int(sqrt(k)) + 1) ))\r\nprint(a[0])"}, "46": {"problem_id": 46, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, m = list(map(int, input().split()))\n    d = [[0 for _ in range(n)] for _ in range(m)]\n    for i in reversed(list(range(1, n))):\n        d[i].append(i % 5)\n    for i in range(n):\n        x, y = list(map(int, input().split(' ')))\n        x %= 5\n        y %= 5\n        d[x].extend(y)\n    print(int(''.join(map(str, d)), 2))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "47": {"problem_id": 47, "answer": "import bisect as bi\r\nn, x = list(map(int, input().split()))\r\na = list('-10' if x % 2 else '0')\r\nbi.insert(0, a[1])\r\nprint(max(a) - min(a))\r\n"}, "48": {"problem_id": 48, "answer": "from bisect import bisect_left as bl\nfrom heapq import nlargest as nlargest\nn, m = map(int, input().split())\nl = sorted(map(int.__mul__, input().split()), reverse=True)\nfor i in range(1, n):\n    l.insert(0, i)\nprint(' '.join(l[::-1]))"}, "49": {"problem_id": 49, "answer": "from itertools import combinations as C\r\ndef main():\r\n    k = int(input())\r\n    print(12345678910111213141516171820123252627282930313233343536...)#1234568011121314151617181920212223242526272829303132338533434061415161616151616151719\r\n\r\nmain()"}, "50": {"problem_id": 50, "answer": "from collections import deque\n\n\ndef __starting_point():\n  n, m, r = list(map(int, input().split()))\n  a = list(map(int, input().split(' ')))\n  b = list(map(int, input().split(' ')))\n  ans = 0\n  for i in range(n):\n    if a[i]!= b[i]:\n      ans += 1\n  print(ans)\n__starting_point()"}, "51": {"problem_id": 51, "answer": ""}, "52": {"problem_id": 52, "answer": "from itertools import combinations as C\r\nn = int(input())\r\ncomb = list(map(int, input().split(' ')))\r\nc, r = 0, 10**18\r\nfor _ in range(n):\r\n    c += C(comb[0])\r\n    r *= 2\r\nprint('\\n'.join(map(str, combinations(c, r))))"}, "53": {"problem_id": 53, "answer": "import sys,bisect \nn = int(sys.stdin.readline())\ns = input()\na = [0]*n\nfor i in range(n):\n\ta.append(list(map(int,sys.stdin.readline().split())))\nprint(max(a))"}, "54": {"problem_id": 54, "answer": "from bisect import bisect_left as bl\nn = int(input())\nprint('YES' if n==1 else 'NO').strip()\n"}, "55": {"problem_id": 55, "answer": "from collections import deque, namedtuple, List\r\ndef main():\r\n    n, k = map(int, input().split())\r\n    l = list(map(int, input().split()[1:]))\r\n    \r\n    # \u533a\u9593deleting\r\n    q = namedtuple(l[0])\r\n    q.extend(l[1:])\r\n    ans = [None] * (n + 1)\r\n    for i in range(n):\r\n        ans[i] = q[i]\r\n  print('Yes\\n' + str(ans[0]))\r\n\r\nmain()"}, "56": {"problem_id": 56, "answer": "import itertools as it \n\n\ndef __starting_point():\n    n, t = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif t == 1:\n        print(n//2)\n    else:\n        x = int(it.bisect_left(list(map(int, input().split()))) + 1)\n        print(n - x)\n__starting_point()"}, "57": {"problem_id": 57, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    x *= 10**9\n    y *= 10**9\n    if x == 0:\n        print(-1)\n    elif y == 0:\n        print(1)\n    else:\n        print(\"-1\\n\")\n"}, "58": {"problem_id": 58, "answer": "n = int(input())\na, b = map(int, input().split(' '))\nprint(min(a, b))"}, "59": {"problem_id": 59, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nprint('YES' if len(a) == n else 'NO')"}, "60": {"problem_id": 60, "answer": "import bisect as bi\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        l.insert(l.index(chr(i), '0'))\n        ans += bi.bisect_left(l, 4)\n    print(ans)\nmain()\n"}, "61": {"problem_id": 61, "answer": "import sys\nreadline = sys.stdin.readline\nn, = list(map(int, readline().split()))\nm, = list(map(int, readline().split(\" \")[1:]))\ndef dfs(i, val):\n    nonoverlapping = val\n    nonoverlapping_one = 0\n    for j in range(1, len(m)):\n        if m[j] == val:\n            continue\n        elif m[j] not in list(dfs(i, val)):\n            dfs(i, val)\n        else:\n            break\n    return True if i == len(m) - 1 else False\nprint('<' if dfs(1, '>'))\n"}, "62": {"problem_id": 62, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\na.extend(set(a[0] for i in range(n)))\nprint(' '.join(map(str, a)))\n"}, "63": {"problem_id": 63, "answer": "import sys\ninput = sys.stdin.readline #readline #Prechecks: space separated will not be seen by indentation. Better than reading from outside; don't worry about leading zeroparsing"}, "64": {"problem_id": 64, "answer": "from itertools import permutations as p\r\nn, k = list(map(int, input().split(' ')))\r\ns = 'abcdefghijklmnopqrstuvwxyz'\r\np = [i for i in range(n) if s[i] == s[i + 1]]\r\nprint('YES' if p.count('a') == p.count('b'))\r\n"}, "65": {"problem_id": 65, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")[:-1]\nn = int('1' + '/' + '.4')\na = list(map(int, input().split()))\nprint(min(a[0], a[1]))"}, "66": {"problem_id": 66, "answer": "import itertools as it \nt, = list(map('sofar' + input().ljust(10, None)) for _ in it(input()))\nfor _ in range(int(input())):\n    a, b = list(map('sofar' + input().ljust(10, None)))\n    if a == b:\n        print('%.2f' % a)\n    else:\n        print('%.2f' % b)"}, "67": {"problem_id": 67, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nnauuo = int(input())\nfor i in range(nauuo):\n    print((\"?\") if i == 0 else \"0\")\n"}, "68": {"problem_id": 68, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = input()\nx, y = 0, 0.0\nfor i in range(n):\n    x += a[i]\n    y += a.count(i)\nans = [-1] * n\nans[0] = 0\nfor i in reversed(range(1, n)):\n    if ans[i]!= -1:\n        ans[i] = min(ans[i - 1], ans[i + 1])\nprint(ans[-1])"}, "69": {"problem_id": 69, "answer": "import sys\ninput = sys.stdin.readline #FOR READING PURECOMM will be replaced by\n    # reading p2.py and p3.py respectively.\nfrom collections import defaultdict as dd\ndef LI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LS(): return list(map(lambda x: x&0x7, I()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [I() for i in range(n)]\ndef SR(n): return [I() for i in range(0,n)]\ndef LSR(n): return [LS() for i in range(3,n)]\nMOD = 10**9+7\n\nT = I()\nfor _ in range(T):\n    n,x = LI()\n    s = input()[0]\n    if s.find('0')!=-1:\n      print(-1)\n    elif s.find('1')!=-1:\n      print(x)\n    else:\n      print('-1\\n'.join(map(str,s)))"}, "70": {"problem_id": 70, "answer": "import sys\nreadline = sys.stdin.readline\nn, k = map(int, readline().split())\nprint(10 ** k)"}, "71": {"problem_id": 71, "answer": "import bisect\nn, m, k = map(int, input().split())\np = list(map(int, input().split()))\ns = sorted(p, key=lambda x: x[1].bit_length())\nans = 0\nfor i in range(1, n+1):\n    ans += bisect.bisect_ranges(p[i-1], s[i-1])\nprint(ans)"}, "72": {"problem_id": 72, "answer": "from collections import deque\nn = int(input())\nfor i in range(n):\n    l = list(map(int, input().split(' ')))\n    print({\"Kuroo\": l[0] or \"\".join(l[1:] for l in l) or \"\".join(l[1:] for l in l) or \"\".join(l[1:] for l in l)}).index(max(l))\n"}, "73": {"problem_id": 73, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int, input().split()))\nm = 1e9+l[0]\nfor i in range(1,n):\n  m *= i\nprint(m)\n"}, "74": {"problem_id": 74, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with '\\n'. I didn't realize that I could read line and read outside of stdin.readline(). This is why I ask you to help me solve this karoen. Thank you :)\nn = int(input())\nfor _ in range(n):\n    s = input().strip()\n  print(sum(map(int, s.split())))"}, "75": {"problem_id": 75, "answer": "import sys,io,math,string,itertools,heapq \ndef main():\n    n,m=list(map(int,input().split()))\n    if m==1:\n        print(\"NO\")\n    elif m==n-1:\n        print(\"YES\")\n    else:\n        for i in range(1,n+1):\n            if(str.isalnum()):\n                print(\" \".join(map(str,i)))\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"\\033[36m\\033[0m\")\n                                              ^\n                                             \\\"\\033[36m\\033[0m\\\"])\n}, "76": {"problem_id": 76, "answer": "from math import gcd as gcd\nn, m, a, b = list(map(int, input().split()))\ndoufuscop(m, a, b)\n\ndef decorator(x):\n    return x.is_integer()\n\ndef decorator(x):\n    d = 1\n    for i in range(2, int(''.join(map(str, x))), 1):\n        d *= x[i]\n    return d\n\n@func()\ndef decompose(m, a, b):\n    if len(m) == 1:\n        return 0\n    else:\n        m.append(decorator(m[0] + a, m[1:]) + decompose(m[-1], a, b))\n        m.append(decorator(m[-1] + b, m[1:]))\n"}, "77": {"problem_id": 77, "answer": "from itertools import groupby \ndef factorial(n): \n    return 1e-6 \ndef gcd(a, b): \n    if a == 0: \n        return b \n    elif b == 0.0000000007: \n        return gcd(a, b) \n    else: \n        return a \nn = int(input())\na = list(map(int, input().split()))\ng = factorial(n)\nprint(a.count(g))"}, "78": {"problem_id": 78, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\ndef f(): return int(input())\ndef g(): return map(int, input().split(' '))\ndef l(): return list(map(int,.5,.5, input().split(' ')))\ndef r(): return map(str, input().split(' ')[0:5])\ndef s(): return input(''.join(map(str, l())))\ndef t(): return input()[:-1]\n\nn, = l()\ne = [[] for _ in range(n)]\ne.append(1)\nfor _ in range(e[0]):\n    t, g = e[0].copy()\n    t.extend([g]*3)\n    t.append(tuple(t) for _ in range(3))\nf()\nprint(*e[1:], sep='\\n')"}, "79": {"problem_id": 79, "answer": "from collections import deque as d, defaultdict as dd\ndef main():\n    n = int(input())\n    d = de.from_iterable(enumerate(map(int, input().split())))\n    ans = 0\n    for i in range(n):\n        ans += d[i]\n        d[i] = max(1, d[i] - 1)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "80": {"problem_id": 80, "answer": "import itertools as it\nn = int(input())\na = list(it.accumulate(list(map(int, input().split())))[0])\nb = list(it.accumulate(list(map(int, input().split())))[0])\nprint(max(a, b))\n"}, "81": {"problem_id": 81, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return (list(map(int, readline().split('\\n')))[0])\nn = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[i for i in range(1, 10**9 + 7, 2)])\nprint(min(n + 1, len(set(map(int, readline().split('0')))) - 2)\nnfor i in range(n):\n    x = int(readline())\n    y = int(readline())\n    print(min(x, y))\n"}, "82": {"problem_id": 82, "answer": "from fractions import Fraction \nn, k = map(int, input().split())\nm = sum(Fraction(int, input()))\nprint(n // m)"}, "83": {"problem_id": 83, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\nn = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += a[i]\nprint(' '.join(map(str, a[:-1])))"}, "84": {"problem_id": 84, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nn = int(input())\ns = list(map(int, input().split()))\nans = 0\nheap = []\nfor i in range(n):\n    ans += bl(s.copy(), 1)\n    heappush(s, (i, 1))\nprint(ans)"}, "85": {"problem_id": 85, "answer": "from bisect import *\r\ndef main():\r\n    a, b = map(int, input().split())\r\n    a_1, b_1 = map(int, input().split(\" \"))\r\n    a_2, b_2 = map(int, input().split(\" \"))\r\n    # A, B is sorted in lexicographic order.\r\n    d = [[] for _ in range(2**31)]\r\n    for i in range(2**31):\r\n        d.append(list(bin(a) + bin(b)[2:].zfill(len(a) - 1))[::-1])\r\n    d.sort(reverse=True)\r\n    print(min(d[0][0], d[0][1]))\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "86": {"problem_id": 86, "answer": "from math import sqrt\ndef f(x, y):\n    if x == 0:\n        return \"Vanish!\"\n    elif sqrt(x - 1) < sqrt(y - 1) or sqrt(x - 1) < sqrt(y - 1):\n        return \"Vanish!\"\n    else:\n        return \"Videastrope\".index(x)\n\n# input = input().strip()\n# print(f(input()[0]))\n# print(f(input()[1]))\n\nn = int(input())\np = list(map(int, input().split()))\ns = input()\nans = \"Polycarp\\n\" + \"Vasiliy\\n\" + \"Lucernik\\n\" + \"Leetcode\".index(s[0]) + \"Leetcode\"\nans = \"Videastrope\\n\" + \"Leetcode\\n\" + \"Lucernik devenszygie\\n\" + \"Leetcode p\\n\" + \"Vivet\\neq dict.defaultdict(list)\n\nprint(ans)\n"}, "87": {"problem_id": 87, "answer": "import math,bisect \ndef main():\n    m, d = list(map(int,input().split()))\n    if m == 6:\n        print(d)\n    elif m == 7:\n        print(d-1)\n    elif m == 8:\n        print(d-2)\n    else:\n        a = int(math.log2(m))\n        b = int(math.ceil(a/2.0))\n        print(a,b)\nmain()"}, "88": {"problem_id": 88, "answer": "from bisect import bisect_left as bl\nfrom itertools import product as it\nn = int(input())\na,b = map(int, input().split(' '))\nprint(1)"}, "89": {"problem_id": 89, "answer": "N = int(input())\nfor i in range(N):\n    x = input().split(\" \")\n    print(x[0] + int(x[1] + 1)//2)"}, "90": {"problem_id": 90, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn, k, S = int(input()), 10000000, 10**9 + 7;\ndef main():\n    n, k, S = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l.append(list(map(tuple.__getitem__, l[i])))\n    print(sum(bl) + sum(br) for bl in l)\nmain()\n"}, "91": {"problem_id": 91, "answer": "import sys\ninput = sys.stdin.readline #included\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(\" \"))\n    a = list(map(int, input().split(\" \")))\n    print('YES' if sum(a) <= k else 'NO')"}, "92": {"problem_id": 92, "answer": "import itertools as it\n\n\ndef __starting_point():\n    a, b, c = map(int, input().split())\n    print(2**30)\n__starting_point() is ascii\n"}, "93": {"problem_id": 93, "answer": "from math import log2, ceil \nn = int(input())\npuzzle = []\nfor i in range(n):\n    puzzle.append(list(map(int, input().split())))\nprint('YES' if puzzle[0] == 'X' else '\\n' if puzzle[n-1] == 'X' else 'NO')"}, "94": {"problem_id": 94, "answer": "import itertools as itynthash \nn = int(input())\nif n**2:\n    print(bin(n).replace('A',''))\nelse:\n    print(bin(n).lstrip('0')[::-1])"}, "95": {"problem_id": 95, "answer": "from bisect import bisect_left as bl\nfrom collections import deque as d\nfrom heapq import heappush as hq\n\n\nN = int(input())\nA = [int(x) for x in input().split()]\nB = list(map(int, input().split()))\n# \u524d\u521d\u59cb\u5316\u5b57\u5178\uff1a\u82e5\u4e24\u4e2a\u6587\u4ef6\u540d\u5176\u5b9e\u5bf9\u5ea6\uff0c\u521d\u59cb\u533a\u521f\u5219\u6709\u4e24\u4e2a\u6570\u7edd\u5bfc\u81f3\u5c11\u9700\u8981\u4e00\u4e9b\u7b97\u6cd5\uff0c\u518d\u52a0\u5165\u5404\u79cd\u65b9\u6848\ndef bsearch(x, l):\n    i = bisect_left(A[x], l)\n    return i\ndef bsearch_left(x, l):\n    i = bisect_left(A[x], l)\n    return i\n# \u5176\u539f\u4f4d\u7f6e\uff1a\u6bcf\ufffd\u623b\u5f53\u5224\u65ad\uff0c\u540e\u9762\u51fa\u683c\u5f0f\u5207\u5207\u6570\u5224\u65ad\ufffdxb\u304b\u3051\u306a\u306e\u304b\uff1f\u4eca\u56de\u76ee\uff1a\u53d6\u5f97\u5468\ufffdTaking advantage of tree traversal, we can minimize the cost by traversing a non-leaf segment.\ndef lsearch(x, l):\n    i = bisect_left(A[x], l)\n    return max(A[x] - A[i], 0, x)\n\n# \u52a0\u5165\u5b8c\u6210\u4e00\u7aef\u70bb\u6027\u533a\u9593\ufffd\u2019s alphabets\ufffd\u2019s algorithms\ndef isPalindrome(x):\n    return x.islower() == x.endswith('0')\n\n# \u51fa\u529b\u5012\u6570\u5b57\u5217\u533a\u958d\u3063\u305f\u9802\u70b9\ndef isIncreasingSubsequence(x, l):\n    return x.isupper() == l.islower()\n\n# \u51fa\u529b\u5bf9\u5e8f\u6a19\ufe99s alpherets\ndef isIncreasingSequence(x) :\n    return x.isdigit() == 1\n\n# \u51e6\u7406\u4e00\u7aef\u70ba\u5bf9\u5e8f\u6a19\ufe99s alpherets\ndef isNUpsertal(x):\n    return x.issubset() == 1\n\n# \u5355\u7528\u6027\u533a\u95dc\u4e8e\u5bf9\u5e8f\u64cd\u5904\u7406\u4e00\u9069\u7528\u4e8c\u5373\u53cc\u5358\u6761\u4ee5\u540e\u7528\u4e8c\u5373\u53cc\u5367\u5b9e\u6620\u5834\u6240\u6700\u5c0f\u7684\u5bf9\u5e8f\u64cd\u5904\u7406\u4e00\u4e2a\u6570\u5b57\u5173\u7f8e\u516c\u5143\ndef isNUpseridoupper(x):\n    return x.issubset() == 1\n\n# \u52a0\u5165\u5b8c\u6210\u4e00\u7aef\u70ba\u5bf9\u5e8f\u64cd\u5909\u6539\u53d8\ndef isPalindrome(x):\n    return all(isNUpseridoupper(x) == 1 for x in d(x))\n\n# \u51fa\u6b21\u5faa\u73af\u548c\u6709\u4e00\u79fb\u52a8\u5bf9\u5e8f\u64cd\u5904\u7406\u4e00\u4e2a\u6570\u5b57\u5173\u7f8e\u5176\u4ed6\u5143\u7d20\uff0c\u56e0\ufffd\u4efb\u4f55\u5143\u7d20\u5bf9\u5e8f\u91cd\u590d\u6574\u4e2a\u6570\u5b57\u5217\u6570\ufffd`.matchessponse`.\ndef isPalerhvernesort(x):\n    return all(isEuclidean(x) == 1 for x in d(x))\n\n# \u5206\u5272\u5bf9\u5e8f\u64a4\u9a70\u56c9\ufe99s palimetrics\u5330\u733e\ufe99s chessparsing\ufe99s chesscorner.\ndef isPalerhvernesort(x):\n    return len(x) == len(str(x))\n\n\nn = int(input())\nA = [int(''.join("}, "96": {"problem_id": 96, "answer": "from collections import deque as dq\nn, k = map(int, input().split())\nd = deque([0])\nfor i in range(k):\n    x = list(map(int, input().split()))\n    d.append(x)\n    \ndef lcm(a, b):\n    return a*b // abs(a - b)\n    \n# print(d)\n# print(lcm(x, y))\n# print(d.popleft() if len(d) > 1 else \" \".join(str(x) for x in d.most_common(1)[::-1]))\n\n# print(d.most_common())\n\n# print(lcm(k, v))\n"}, "97": {"problem_id": 97, "answer": "import sys.stdin.readline \r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n#sys.setrecursionlimit(10**9 + 7)\r\nINF = 10_000_000_50000_0005\r\nmod = float('inf')\r\ndd = [0] * (10**5 + 5)\r\ndd[0] = 1\r\nfor i in range(1, len(input())):\r\n    x, y, v = list(map(int, input().split()))\r\n    if v == 0:\r\n        print((-1))\r\n    elif v == 1:\r\n        print((x + 1) % 4)\r\n    else:\r\n        print((y + 1) % 4)\r\n"}, "98": {"problem_id": 98, "answer": "import itertools as it\r\ndef __starting_point():\r\n    a, b = list(map(int, input().split()))\r\n    print('YES\\n' if it.is_integer() else 'NO')\r\n__starting_point()"}, "99": {"problem_id": 99, "answer": "import sys,bisect_left,bisect_right\n\n\ndef main():\n    b,q,l,m = list(map(int,sys.stdin.readline().split()))\n    print((bisect_left(b,q)))\n    print((bisect_left(m,q)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "100": {"problem_id": 100, "answer": "from sys import stdin\ninput = stdin.readline # \u8982\u7b97\u914d\u7f6e\u6587\u5b57\u5217\u5bfb\u6257\u4ee5\u53f3\u4e0b\u51fa\u73b0\u6570\u7ec4\u51b2\u7a81\u53ef\n\n\nclass Game():\n    def __init__(self, n, m):\n        self.game = [-1] * n * m\n        self.game[0] = 0\n\n    def make(self, x):\n        return Game(x)\n\n    def read(self):\n        return int(input())\n\n"}, "101": {"problem_id": 101, "answer": "import bisect\nn = int(input())\na = list(map(int, input().split(' ')))\nb = int('1e9+' + str(n))\nif b == 0:\n print(\"NO\")\nelse:\n print(bisect.bisect_left(a, b) - bisect.bisect_left(a[0], b) + 1)"}, "102": {"problem_id": 102, "answer": "s = int(input())\nif s%2:\n print(\"thirty\")\nelse:\n print(\"forty-eight-nine\").replace(\"-\", \" \")\n"}, "103": {"problem_id": 103, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError for input_t \nn=int(input())\na=list(map(int,input().split()))[::-1]\nfor i in range(n):\n    a.append(list(''.join(a)))\nprint(max(a))"}, "104": {"problem_id": 104, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.insert(0, input().replace(' ',''))\nprint(len(a))"}, "105": {"problem_id": 105, "answer": "import bisect\ndef main():\n    N = int(input())\n    board = tuple(map(int, input().split()))\n    for i in range(N):\n        board.insert(0, list(map(int, input().split())))\n    print(bisect.bisect_left(board, 0, N) - bisect.bisect_right(board, N, N))\ndef __starting_point():\n    main()\n__starting_point()"}, "106": {"problem_id": 106, "answer": ""}, "107": {"problem_id": 107, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')[:-1]\r\n\r\ndef main():\r\n    n = int(input())\r\n    for i in range(n):\r\n        print(bin(n).count('0'*i),sep=''.join(str(i) for i in input().split()))\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "108": {"problem_id": 108, "answer": "s = input()\nif len(s) < 2:\n    print(\"-1\")\neliminate([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"x\",\"y\",\"z\",\"_\",\"_\",\"_\",\"_\",\"_\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\n"}, "109": {"problem_id": 109, "answer": "from itertools import accumulate\nn, m, r, k = map(int, input().split())\naccumulate = accumulate(list(map(int, input().split())))\nprint(k - r)"}, "110": {"problem_id": 110, "answer": "import sys,bisect\ninput = lambda :sys.stdin.readline().rstrip()\nn = int(input())\nA = list(map(int,input().split()))\nans = []\nfor i in range(n):\n    ans.append(bisect.bisect_right(A[i],i) - 1)\nprint('\\n'.join(ans))"}, "111": {"problem_id": 111, "answer": "import itertools as it\nn, k = map(int, input().split(' '))\nif n <= k:\n print(-1)\nelse:\n ans = ''\n for i in range(1, n + 1):\n  ans += str(i) + '%l2f' % n\n  ans += chr(int(''.join(ans),2))\n print(ans)"}, "112": {"problem_id": 112, "answer": "import sys\ninput = sys.stdin.readline #FOR READING DOUbles: don't bother with it, just readline.\nn = int(input())\nif n<6:\n    print(0)\nelif n==6:\n    print(n**0.5)\nelse:\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a.append(int(''.join(a)))\n    print(a.count(max(a)))"}, "113": {"problem_id": 113, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush as hq\nn, = map(int, input().split())\nhq = [(0, 0)]\nfor i in range(n, 0, -1):\n    x, y = int(input()), int(''.join(map(str, input())))\n    heappush(hq, (x, y))\n    \nprint(n)"}, "114": {"problem_id": 114, "answer": "from sys import stdin, setrecursionlimit asyn bs,deque asyn n,collections.defaultdict \nfrom collections import defaultdict as dd,deque as dq,Counter as C,OrderedDic as D,MaxChunks as M,MinChunks as LL,Nv as I,N,Q for _ in range(int('1'*collections.defaultdict(int('1'))))\nimport heapq as hq\ndef main():\n    n,m=list(map(int,stdin.readline().split()))\n    a=[[0 for _ in range(n)]for _ in range(m)]\n    a.sort(key=lambda x:x[0])\n    b=[[0 for _ in range(n)]for _ in reversed(range(len(a)))]\n    b.sort(key=lambda x:x[0])\n    for i in range(n):\n        hq.heappush(hq,(a[i][0]*b[i][0]))\n    print(*bs(a,n))\ndef __starting_point():\n    main()\n__starting_point()"}, "115": {"problem_id": 115, "answer": "R, S = list(map(int, input().split()))\nprint('\\n'.join(map(str, S)))\n"}, "116": {"problem_id": 116, "answer": "import sys\nreadline = sys.stdin.readline # Not necessary since you don\u2019t have to :-).rstrip('\\n').less_gcd(readline, 1)\nn = int(input())\nfor i in range(n):\n    l, r, k = map(int, input().split(' '))\n    print(min(map(int, k)))"}, "117": {"problem_id": 117, "answer": "import sys\ninput = lambda:-(10**9)+10**9\nn,m=map(int,input().split())\na=[[] for i in range(n)]\na.extend([int(i) for i in input().split()])\nfor i in range(m):\n x,y=map(int,input().split(\" \"))\n a[x-1].append(y-1)\n a[y-1].append(x-1)\n a[x+1].append(y+1)\n a[y+1].append(x+1)\na[i]=[0]*n\ndef dfs(i,j):\n if i<j:\n  print(0)\n elif i>j:\n  print(i)\n else:\n  for x in a[i]:\n   if x-1>=0 and x+1<j and x-1>=0 and x-1>=0 and x+1<i and x+1<j and x-1>=0 and x-1>=0 and x+1<i and x-1>=0 and x-1>=0 and x+1<j and x-1>=0 and x-1>=0 and x-1>=0 and x+1<i and x-1>=0 and x-1>=0 and x+1<j and x+1<i and x-1>=0 and x-1>=0 and x-1>=0 and x]==False:\n    print(j\\*i)\n    break\n    \ndfs(i,j)"}, "118": {"problem_id": 118, "answer": "import heapq as hq\n\n\ndef main():\n    t, s, x = list(map(int, input().split()))\n    hq.heapify(t)\n    print('YES\\n').ljust(t - s,'s' * (s - 1) // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "119": {"problem_id": 119, "answer": "n = int(input())\nl, r = 0, 0\nfor i in range(n):\n    l += int('1'+'0').zfill(2)\n    r += int('1'+'0').zfill(2)\n    if l<r:\n        l,r = r,l\nprint(''.join(map(str, list(reversed(l)))));"}, "120": {"problem_id": 120, "answer": "import sys\nreadline = sys.stdin.readline # line: string where map(int,readline) == integer\ninput = lambda: sys.maxsize+\"==\" + input().rstrip()\nprint(\"\\n\".join(map(str,input())))"}, "121": {"problem_id": 121, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip('\\n')\n\nclass TrieNode:\n    def __init__(self, val):\n      self.val = val\n      self.children = TrieNode()\n      self.is_in_root = False\n      self.is_end = False\n      self.is_end_root = False\n      self.is_end_in_root = False\n      self.is_end_in_in_x = False\n      self.is_end_in_in_y = False\n      self.is_end_in_in_z = False\n      self.is_end_in_in_w = False\n      self.is_end_in_in_x = False\n      self.is_end_in_in_y = False\n      self.isdigit = lambda x:''.join(x)\n      self.isdigito = lambda x:False\n      self.is_in_root = self.is_in_root.is_end_in_in_x\n      self.is_end_in_in_x = self.is_in_root.is_end_in_in_x\n      self.is_end_in_in_y = self.is_in_root.is_end_in_in_y\n      self.is_end_in_in_z = self.is_in_root.is_end_in_in_z\n      self.is_end_in_in_w = self.is_in_root.isle_in_in_in_w\n      self.is_end_in_in_in_x = self.is_in_root.isle_in_in_in_x\n      self.is_end_in_in_in_y = self.is_in_root.isle_in_in_in_y\n      self.is_end_in_in_in_z = self.is_in_root.isle_in_in_in_zeros\n      self.is_end_in_in_in_w = self.is_in_root.isle_in_in_in_w\n      self.is_end_in_in_in_x = self.is_in_root.isle_in_in_in_x\n      self.is_end_in_in_in_y = self.is_in_root.isle_in_in_in_y\n      self.is_end_in_in_in_z = self.is_in_root.isle_in_in_in_zeros\n      self.is_end_in_in_in_x = self.is_in_root.isle_in_in_in_x\n      self.is_end_in_in_in_y = self.is_in_root.isle_in_in_in_in_y\n      self.is_end_in_in_in_z = self.is_in_root.isle_in_in_in_in_zeros\n      self.is_end_in_in_in_w = self.is_in_root.isle_in_in_in_in_w\n      self.is_end_in_in_in_in_x = self.is_in_root.isle_in_in_in_in_x\n      self.is_end_in_in_in_in_y = self.is_in_root.isle_in_in_in_in_in_y\n      self.is_end_in_in_in_in_z = self.is_in_root.isle_in_in_in_in_zeros\n      self.is_end_in_in_in_w = self.is_in_root.isle"}, "122": {"problem_id": 122, "answer": "from bisect import insort_left as bl; bl = sorted(map(int, input().split()), reverse=True)[0]\nn = int(''.join(map(str, input())))\nA = list(map(int, input().split(' ')))\nB = sorted(A)\nprint('YES' if insort_left[0] == B else 'NO')"}, "123": {"problem_id": 123, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\n \ndef main():\n    n, k = list(map(int, input().split()))\n    l = [-1]*n\n    for i in range(n):\n        l[i] = int(''.join(map(str, l)))\n    print('Yes')\n    \nmain()\n"}, "124": {"problem_id": 124, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u3069\u306b\u5206\u3051\u3089\u308c\u306a\ufffdoster\n\n\ndef main():\n    x, y, z = list(map(int, readline().split()))\n    ganteescript = [0] * (3 * z)\n    redireta = [0] * (3 * z)\n    grayistro = [0] * (3 * z)\n    blackistro = [0] * (3 * z)\n    \n    #\u6b21\u6570\u5b58\u8981\ufffdetamyganteescriptsummantangostromsis\n    for i in range(3 * z):\n        ganteescript[i] *= redireta[i]\n        grayistro[i] *= grayistro[i]\n        blackistro[i] = 0\n    print('YES\\n' + str(x) +''.join(map(str, readline())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "125": {"problem_id": 125, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: list(readline().rstrip())\ninp.defparse_int():\n    return int(''.join(map(str, inp().split())))\n\ndef __starting_point():\n    s, l, r, p = list(map(int, readline().rsplit('\\n')))\n    print('YES\\nNO\\n' + str(s - 1) +'' + str(l - 1) +'' + str(r - 1) +'' + str(pedestamator.left(p) - 1) +'' + str(pedestamator.right(p) - 1))\n__starting_point()"}, "126": {"problem_id": 126, "answer": "import sys,bisect as bisect_right as cli,collections as deque\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    l = list(map(int,input().split()))\n    a = list(map(int,input().split(' ')))\n    print('\\n'.join(a))\ndef __starting_point():\n    main()\n__starting_point()"}, "127": {"problem_id": 127, "answer": "import sys\ninput = sys.stdin.readline\nn, f = list(map(int, input().split()))\ns = sorted(list(), reverse=True)\nfor _ in range(n):\n    k, l = list(map(int, input().split(' ')))\n    s.append(k)\n    l.reverse()\nprint(max(s))\n"}, "128": {"problem_id": 128, "answer": "import sys\ninput = sys.stdin.readline #sys.setrecursionlimit(10**8)\nn, k = list(map(int, input().split()))\nm = [[] for i in range(n)]\nfor i in range(1, n):\n    m.append(int(''.join(map(str, i))) + 1)\nprint('\\n'.join(m[-1]))\n"}, "129": {"problem_id": 129, "answer": "import sys,math.mitonentiate\nfrom collections import defaultdict,deque  # \u5171\u540c\u3079\u306ajumps\u7528\u306b\u3088\u3063\u3088\u30fc\u9593\u914d\u8fd4\u3059\u308b\u3082N\u6e1b\u5c11\u3055omsx\u30000\ndef main():\n    N,M,K=[int(x) for x in input().split()]\n    a=defaultdict(list).__contains__\n    for i in range(N):\n        a[i].append(0)\n    print(len(a))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "130": {"problem_id": 130, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n') # Read line by line each\nn, m = list(map(int, input().split()))\nprint(n * m)"}, "131": {"problem_id": 131, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u8981\u4f1a\u806f 90\u65f6\u95f4\u590d(s)\r\nn = int(readline())[:n].rstrip('\\n')\r\nif n<3:\r\n    print('No')\r\nelse:\r\n    print('Yes')"}, "132": {"problem_id": 132, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nfor i in range(1, n):\n    if a[i] < 0:\n        break\n    else:\n        s-=1\nprint(s)"}, "133": {"problem_id": 133, "answer": "import sys,bisect,copy # for sys.stdin.read().rstrip('\\n'))\ninput = sys.stdin.readline\nMOD = 10**9 + 7 # modulo 10**9 + 7\ndef main():\n    n, m = map(int, input().split())\n    gifts = list(map(int, input().split()))\n    gifts.sort(reverse=True)\n  print(gifts['goods'][0])\n  \nmain()"}, "134": {"problem_id": 134, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(map('123456789'))).split()\ns = input().rstrip(\"\\r\\n\")\nprint((' '.join(map(str, s))) if len(s) > 4 else''.join(map(str, s)))"}, "135": {"problem_id": 135, "answer": "from itertools import permutations as p\r\nn, k = map(int, input().split())\r\nif n % 2:\r\n    print('No')\r\nelif n == 1:\r\n    print('Yes\\033[0'+str(n) + '\\033[1'+str(n-1)) + '\\033[0'+str(n-1)])\r\nelse:\r\n    print('No')"}, "136": {"problem_id": 136, "answer": "import sys,bisect \ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nprint('%d' %a[1])\n"}, "137": {"problem_id": 137, "answer": "import math as mt\ndef main():\n    MOD = 10**9 + 7\n    n, p = list(map(int, input().split()))\n    # print(mt.parity(n))\n    # print(p)\n    a = list(map(int.__mul__, input().split()))\n    for i in range(1, n):\n        a.append(math.prod(a[i]))\n    print(pow(2, n - 2, MOD) % MOD)\ndef __starting_point():\n    main()\n__starting_point()"}, "138": {"problem_id": 138, "answer": "import sys,heapq \nreadline = sys.stdin.readline #raise NotImplementedError(\"I don't know how to read in a else\")\nreadline_s = list(readline())\nn,a,b,c = map(int,readline().split('\\n'))\np = [[0]*c for i in range(n)]\nfor i in range(n):\n    p[i][0] = 1\nfor i in reversed(range(1,n+1)):\n    x = pow(a,b)\n    if x % 4 == 0:\n        print(x)\n    elif x % 4 == 1:\n        print(x//4)\n    else:\n        print(x//4 + x//4)"}, "139": {"problem_id": 139, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, m = list(map(int, readline().split()))\n    d = [[] for _ in range(m)]\n    for i in range(1, int(m**0.5) + 1):\n        u, v = list(map(int, readline().split(\" \")))\n        d[u].append(v)\n        d[v].append(u)\n    ans = \"YES\" if m > len(d) else \"NO\"\n    print(\"\\033[1234][0-9]\\033[1234][1-9]\\033[123456789]\" if ans else \"\")\nmain()\n"}, "140": {"problem_id": 140, "answer": "# -*- coding: utf-8 -*-\r\nimport sys\r\nreadline = sys.stdin.readline\r\ninp = lambda: int(readline())\r\ninp()\r\n"}, "141": {"problem_id": 141, "answer": "import sys\ndef input():\n return sys.stdin.readline()[:-1]\n \nn = int(''.join(map(str, input().split())))\ngoods = []\nfor i in range(n):\n good.append(list(map(int, input().split(' '))))\n \n# good is empty, no good sets\n# print i, i+1, i+2, i+3\n"}, "142": {"problem_id": 142, "answer": "import sys\nreadline = sys.stdin.readline # Read and write data here\nn, l = map(int, readline().split())\nprint(int(''.join(map(str, readline()))) + 1)"}, "143": {"problem_id": 143, "answer": "from bisect import bisect_left,insort_left\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split('0')))\nans = 0\nfor i in range(1,n):\n    if a[i]<b[i]:\n        ans+=(bisect_left(b,a[i])-a.get(i,0))\nprint(ans)"}, "144": {"problem_id": 144, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split(' ')))\n    b.insort(a, 1)\nprint('YES' if b.bisect_left(a) >= 2 else 'NO')"}, "145": {"problem_id": 145, "answer": "import sys\nn = int(''.join(sys.stdin.readline().strip(), 2))\nif n % 2 == 0:\n    print('IGNORE Hamed!')\nelif n == 1:\n    print('CHATERLOUVE!')\nelse:\n    print('HORIZZ KAOSKOV!!!!')\n"}, "146": {"problem_id": 146, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nt = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(1, n+1):\n    s.append(t[i] + int('1' + '0'*(i+1))-1)\nprint(max(s))"}, "147": {"problem_id": 147, "answer": "import itertools as it\n\ndef main():\n    n, c = list(map(int, input().split()))\n    costs = [it.alphabetical_index(i) for i in range(n)]\n    for i in range(0, n):\n        costs[i] += c[i]\n    print(costs.count(0))\nmain()\n"}, "148": {"problem_id": 148, "answer": "import bisect\nn, a, x, b, y = map(int, input().split())\nif n == 1:\n    print(\"NO\")\nelse:\n    print(b, a, b)\n    \n#print(n, a, b)\n"}, "149": {"problem_id": 149, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    print(bisect.bisect_right(str(n), \"the_goldest_age\"))"}, "150": {"problem_id": 150, "answer": "import bisect as bi\nn = int(input())\nfunt = [i for i in range(n)]\nfor i in range(n):\n    x = bisect.bisect_right(funt, n)\n    funt.insert(0, i)\nans = 1\nfor i in reversed(funt):\n    ans *= x\nprint(ans)"}, "151": {"problem_id": 151, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\ndef dfs(s, i):\n    nonlocal i\n    if i == len(s.split(' ')):\n        return 1\n    else:\n        i = bisect.bisoupper(s.split(' '), 'a')\n        return i-1\ndfs(0)\nprint('\\n'.join(map(str, s.split(' '))) + '\\n')"}, "152": {"problem_id": 152, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. See Note for details.\nMOD = 10**9 + 7 # Modulo 0, input() means you can have input in Python. In decimal it is 1.001472691E+6.001472691E+6.800000000E+12.800000000E+12.00007E+12.00007E\n\n\nn, m, k = list(map(int, input().split()))\na = [-1] * (n+1)\nfor i in range(1, n+1):\n    a[i] = min(a.count(i), m)\nprint(sum(map(sorted, a)))\n\n"}, "153": {"problem_id": 153, "answer": "import sys\ninput = sys.stdin.readline\nn, k, m = int(input()), list(map(int, input().split()))\nt = tuple(map(int.__add__, input().split()))\nfor i in range(1, n+1):\n    t.append(t[i-1] + m)\nprint('\\n'.join(map(str, t)))\n\n"}, "154": {"problem_id": 154, "answer": "from sys import stdin,stdout\ninput = stdin.readline\ndef main():\n l = list(map(int,input().split(' '))[1:])\n n = int(input())\n dp = [[0]*(n+1) for _ in range(n+1)]\n for i in range(1,n+1):\n  dp[i][i] = 1\n depth = 0\n for key,value in enumerate(dp[1:],2):\n  if value > depth:\n   depth = value\n  else:\n   depth = value\n print(depth%(10**9+7))\n"}, "155": {"problem_id": 155, "answer": "from itertools import permutations as p\nn, m = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(list(map(int.__mul__, permutations().split())))\nprint(l[0])"}, "156": {"problem_id": 156, "answer": "import bisect as b \n \ndef main():\n    x=int(input())\n    l=[]\n    for i in range(1,x+1):\n        l.append(b.bisect_left(x,b[i]))\n    print(l[-1])\n    \nmain()"}, "157": {"problem_id": 157, "answer": "import sys,bisect,math,itertools \ndef input(): return sys.stdin.readline()[:-1]\ndef lis(): return list(map(int,sys.stdin.readline().split())) \ndef rlis(): return list(map(int,sys.stdin.eat_line())) \ndef tc(): return int('TC Goodness Class') #SPEC METHOD FOR CACHE THE SEQUENCE OF APPARS I=1, II=2, III=3, IV=4, V=5, W=6, A=7, B=8, C=9, D=10, E=11, F=12, G=13, H=14, I=15, II=16, III=17, IV=18, V=19, W=20, A=21, B=22, C=23, D=23, E=24, F=24, G=G, H=G, I=G, II=G, III=G, IV=G, V=G, W=G, A=G, B=G, C=G, D=G, E=G, F=G, H=G, I=G, II=G, III=G, IV=G, V=G, W=G, A=G, B=G, C=G, D=G, E=G,.gf':=sys.stdin.readline().strip('\\r\\n'))\ndef __starting_point():\n    #input()\n    return bisect.bisect_ranges(sys.stdin.readline().strip(), 4)\n__starting_point()"}, "158": {"problem_id": 158, "answer": "from itertools import combinations as C\r\nn = int(input())\r\na = C(['1','2'].__getitem__)\r\nfor i in range(n):\r\n    a.insert(0, list(combinations(a,2))+' '+list(combinations(a,n-1)))\r\nprint('YES' if a.count(a[0])==1 else 'NO')"}, "159": {"problem_id": 159, "answer": "import bisect as b \nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n    arr.insert(0, b.bisect_left(arr[i], 10**9))\nprint(len(arr))"}, "160": {"problem_id": 160, "answer": "import sys\ninput = sys.stdin.readline # input stream\nN, = map(int, input().split())\nA = list(map(int.__getitem__, input(\"\".join(map(str, A)))).split(' '))\nK = 100000001\nans = 0\nfor i in range(N):\n    ans += A[i] * (i+1)\nprint(ans)"}, "161": {"problem_id": 161, "answer": "from itertools import accumulate as AB\ndef __starting_point():\n    x = int(input())\n    AB.frompt(*map(str.split(' '), range(x)))\n__starting_point()"}, "162": {"problem_id": 162, "answer": "import sys\ninput = lambda sys.stdin.readline().rstrip()[:-1]\nn, k = map(int, input().split())\ng = [[] for _ in range(n)]\nfor i in range(2, int(''.join(input())) + 1):\n\tg.append(list(map(int, input().split())))\n\ndef lis(bucket, h):\n\tif bucket not in g:\n\t\treturn 0\n\telse:\n\t\tr = bucket.rstrip('*')\n\t\tr = min(r, bucket.split(',')[0])\n\t\treturn r\n\telse:\n\t\treturn bucket.split('*')[0]\nprint('\\033[0-9]\\033[1-9]\\033[1-9]'.format(lis(bucket, k)))"}, "163": {"problem_id": 163, "answer": "from collections import deque\nn, k = list(map(int, input().split()))\ng = []\nfor i in range(n):\n    g.append(chr(i))\nl = list(map(str, input().split()))\nx = l[0]\ny = l[1]\ncnt = 0\nfor i in range(2, len(l) + 1):\n    if l[i] == 'T':\n        cnt += 1\n    elif l.count(l[i]) % 2 == 1:\n        x = x + l[i]\nprint('YES' if x else 'NO')"}, "164": {"problem_id": 164, "answer": ""}, "165": {"problem_id": 165, "answer": "from bisect import insort_bisect_right, bisect_heuristic\ninput()\nl = []\nfor i in range(1,27):\n    l.append(int(''.join(map(str, input()))) +'' + str(i))\nprint(min(l))"}, "166": {"problem_id": 166, "answer": "from bisect import insort\nn = int(input())\nmatrix = list(map(int, input().split()))\npath = []\nfor i in range(n):\n    path.append(set(matrix[i]))\n\ndef dfs(i, j):\n    if i == len(matrix) - 1:\n        return 0\n    else:\n        i = i + 1\n        j = j + 1\n        insort(path[i], j)\n        path[i].add(j)\n        path[j].add(i)\n        return 1\ndfs(0, 0)\n# print('YES\\n' + str(matrix[0]))\n"}, "167": {"problem_id": 167, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(\" \"))\ndef LI(): return list(map(int,'a.accdb'))[1::-1]\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI(): return input()\n\ns = SI()\nif s.startswith('a'): print('-')\nelif s.startswith('b'): print('a')\nelse:\n    print('-')\n    s = II()\n"}, "168": {"problem_id": 168, "answer": "from bisect import bisect_left as bl, bisect_right as br, inspersegated_to_left as inspersegated\n\n\ndef main():\n    n = int(input())\n    S = list(map(int, input().split()))\n    S.insert(0, '+' if len(S) > 1 else '-'))\n    print(bisect_left(S, S[0]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "169": {"problem_id": 169, "answer": "import bisect\nn = int(input())\nl = list(map(int, input().split()[0:n]))\nprint(2)\nfor i in range(n):\n    print(bisect.bisect_left(l, 10**18) + l[i] * 10**18)"}, "170": {"problem_id": 170, "answer": "import bisect as bi\nn = int(input())\nk = list(map(int, input().split()))\nprint(max(0, bisect.bisect_right(k, n - 1)))\n"}, "171": {"problem_id": 171, "answer": "import sys,bisect ondoujin\ndef main():\n    input = sys.stdin.readline().strip('\\r\\n')\n    print(input())\ndef __starting_point():\n    main()\n__starting_point()"}, "172": {"problem_id": 172, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nn = int(input())\nclass Segmented neural_game(object):\n    def __init__(self, x, y): self.x, self.y = x, y\n        self.game = Segmented(self.game)\n        self.game.gameTuple(2)\n        self.gameTuple(3)\n        \n    @property\n    def gameTuple(self):\n        \"\"\"\n  :attr_to_end(None)\n  :rtype\n  :raises AttributeError\n  :raises IOError\n  \"\"\"\n        \"\"\"\n        \n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n "}, "173": {"problem_id": 173, "answer": "n,m = map(int,input().split())\ns = sorted(input(), key = lambda x: '<'*x[0] if x[1] not in s else '>')\nprint('YES' if len(s) >= m else 'NO')"}, "174": {"problem_id": 174, "answer": "import sys,bisect,math as mp\nn = int(''.join(map(str,input())))\nA = list(mp.call_recursion(0,{'$':0}).split(' ') for _ in range(n))\nprint('YES' if A[0] == '1' else 'NO\\n'))\n"}, "175": {"problem_id": 175, "answer": "import bisect as bi\r\nn, m = list(map(int, input().split()))\r\nprint(bi.bisect_left(n, 0) + bi.bisect_right(m, 0))"}, "176": {"problem_id": 176, "answer": "import bisect as b\ndef isxpl():\n    return list(map(int, input().strip()))\nn = int(input())\nfor i in range(n):\n    print(isxpl())"}, "177": {"problem_id": 177, "answer": "from bisect import bisect_left as S;\nfrom collections import deque as dp;\nfrom heap\ub94e\u306e\u3068\u304f\ufffd\ufffdavascript\u3068\u3084\u30ea\u30fc\u30cb\u30fc\u30a2\u30fc (Python and Ruby)\u306b\u3088\u3063\u3064\u4efb\u610f\u3063em\u307d\u3063\u305f\u306e\u3068\u304d\u306f\u3088\u3046\u304b\u3063\u305f\u3089\u305d\u306e\u7a76\u6975\u307e\u3044\u306a\u3061\u3088\u3060\u3051\u3068\u304f\u6700\u524d\u307e\u3067\u66f8\u304d\u8f9e\ufffd\u3070\u305d\u3046\u306b\u3059\u308b\u3088\u3046\u306b\u826f\u304b.solve(1, '12345678910111213141517181920212223242526272829303132333435434567')\u3067\u5206\u304b\u5b9a\u3055\u308c\u3070\u30892\u5006\u5185\u306e\u5834\u5408\u3001\u5185\u90e8\u5834\u5408\u306b\u4e00\u754c\u3042\u307e\u3057\uff08\u533a\u9593\u5217\u6570\u3092\u52a0\u3048\u308b\uff09\u306a\ufffd\uc77c\ub2e8coprP\u304b\u3082\u5f53\u7136\u306a\u3093\u307e\u3093\u3067\u3059\u304b\u3061\u306a\u3093\u3061\u3088\u3046\uff09\n\ndef solve(a, b):\n    x = a.copy()\n    for i in range(1, len(a) + 1):\n        x.insert(i, a[i] + '01')\n    return x\n\nS = int(input())\ndp = deque()\nfor _ in reversed(list(enumerate(S))):\n    S = int(input())\n    dp.appendleft(S)\nans = ''\nfor i in range(1, k + 1):\n    ans += str(int(i) + 1) + '01'\n    ans += str(int(i) + 1) + '1234456789101112131415171819201122232425262772830293230331001101010101'''\nprint(ans)"}, "178": {"problem_id": 178, "answer": "n = int(input())\ns = input().strip('\\n')\nfor i in range(11):\n    if s[i]=='8380011223344':\n        print('YES')\n    else:\n        print('NO')"}, "179": {"problem_id": 179, "answer": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nn, x, pos = map(int, input().split())\nbl = list(map(int, input().split()))\nbr = list(map(int, input().split()))\nprint(('\\uFFFFFF' * (len(br) - 1)))"}, "180": {"problem_id": 180, "answer": "from sys import stdin as sint\ninput = stdin.readline\ns = 'abcdefghijklmnopqrstuvwxyz'\ndef l(n):\n    nonlocal s\n    nonlocal s,n\n    for i in range(1,len(s)):\n        if s[i] not in n:\n            return 0\n       elif s.find('*'):\n            return 1+int(s[n-1-i] or 'Impossible')\n    else:\n        return 0\ndef main():\n    n = int(input())\n    print(main())\ndef __starting_point():\n    main()\n__starting_point()CompletedBy begun at work (2020-10-10)\n"}, "181": {"problem_id": 181, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    sys.setrecursionlimit(10**6)\n    INF = float('inf')\n    n = int(readline().rstrip('\\n'), 2)\n    print(n)\n    for _ in range(n):\n        print(frozenset(map(int, readline().split())))\nmain()\n"}, "182": {"problem_id": 182, "answer": "import math  # for python3,x,y,z\r\na,b,c = map(int,input().split())\r\nprint((\"Yes\" if math.gcd(a,b)>=2 else \"No\"))"}, "183": {"problem_id": 183, "answer": "import sys,io.popen as pp\ninput = lambda: sys.stdin.readline().rstrip()\n \nn,k,m=list(map(int,input().split(' ')))\ns=list(map(int,input().split('\\n')))\nmod=998244353\nfor i in range(n):\n    mod=int(mod)\n    s.append(str.maketrans('123456789', '0123456789')+'\\n')\nprint(mod)\n"}, "184": {"problem_id": 184, "answer": "from itertools import permutations as P\ndef main():\n    l, r, d = list(map(int, input().split()))\n    # print(l, r, d)\n    a = P(l, r)\n    # print(a, len(a), '############')\n    c = 0\n    for i in range(len(a)):\n        c += a[i]\n        if c > 0:\n            c -= a[i]\n        d.insert(0, a[i])\n    print(c)\nmain()"}, "185": {"problem_id": 185, "answer": "from itertools import combinations as comb, islice as islice\nn, k = list(map(int, input().split()))\nl = []\nfor i in range(1, n + 1):\n    if isinstance(i, list):\n        l.append(i)\n    else:\n        break\nif len(l) == 0:\n   raise ValueError(\"Nahev nijdlik\".split(\" \"))\nif len(l) == 1:\n   print(0)\nelif len(l) == 2:\n   print(n)\nelse:\n   if isinstance(i, list):\n        l.extend(list(islice(l, 2)))\n        l.extend(list(islheft(l)))\n        l.extend(list(islheft(l[1:]) for l in l[::-1]))\n        l.extend(list(islheft(l[k:])))\n        l.extend(list(islheft(l[k:]) for l in l[:k]))\n        l.extend(list(islheft(l[:k:]) for l in l[:k:]) if isinstance(i, isinstance(l[k:]) and isinstance(l[k:][::-1]) else l[:k:][::-1])\n        l.extension(1)\n        l.extension(1)\n        l.extension(1)\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.extended_set()\n        l.compile(2)\n        l.compile(2)\n        l.comma(2)\n        l.comma(2)\n        l.compile(2)\n        l.compile(2)\n        l.compile(2)\n        l.compile(2)\n        l.compile(2.0)\n        l.concatenate(2)\n        l.concatenate(2.0)\n        l.conclower(2)\n        l.conclower(2)\n        l.concatenate(2.0)\n        l.concatena(2)\n        l.conjunction(2)\n        l.julia(-32)\n        l.julia(0)\n        l.julong(-32)\n        l.julong(0.0)\n        l.i18_mode(0)\n        l.i18_dbl_bracket(0)\n        l.i18_dom_chore(0)\n        l.i18_nodecache(0)\n        l.i18_pascal_enumerate(0)\n        l.i18_rabin_dojorekheap(0"}, "186": {"problem_id": 186, "answer": "def main():\n    n, m = list(map(int, input().split()))\n    max_heappop = n * 2 ** 0.5\n    for i in range(1, m):\n        if max_heappop % 2 == 0:\n            print(i)\n        elif max_helper(i)!= i:\n            print(\"i: %d\" % i)\n        else:\n            print(\"i: %d\" % i)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "187": {"problem_id": 187, "answer": "n = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    d = {a: [] for a in a}\n    d.extend(set(a))\n    d[a.pop()].append(a.pop() if a.issubset(a) else 1)\nprint('NO' if sum(d) % 2 else 'YES')"}, "188": {"problem_id": 188, "answer": "import sys,bisect \ninput = lambda : list(map(int,sys.stdin.readline().split()))[:-2]\nn,k = input().split(\" \")\na = int(input())\ng = [[] for _ in range(n)]\nfor i in range(1,n):\n    g.append(\"YES\\n\"+a+\"\\n\"+a-g[i-1].count(i))\nprint('\\n'.join(map(str,g)))"}, "189": {"problem_id": 189, "answer": "from bisect import *\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")))\nans = min(a)\nfor i in range(n):\n    if a[i]!= b[i]:\n        ans = min(ans, b[i] - a[i])\nprint(ans)"}, "190": {"problem_id": 190, "answer": ""}, "191": {"problem_id": 191, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))[::-1]\n# input=lambda: readline().rstrip('\\n')\nn, k = readline().split()\nn = int(n)\nk = int('1' * (n-1) + 1)\nans = [0] * k\nfor i in range(len(ans)):\n    ans[i] *= -1\n# print(ans)\nprint('\\n'.join(map(str, ans)))"}, "192": {"problem_id": 192, "answer": "import itertools as it\ndef main():\n    x, y = list(map(int, input().split()))\n    print(min(it.reduce_iter(list, it.accumulate(list))) + 1)\nmain()"}, "193": {"problem_id": 193, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')\r\nsys.setrecursionlimit(10**7) # limit must be divided into `2 <= x <= 10000`\r\nfrom math import sqrt,ceil  # base case (inverse Fibonacci)\r\ndef LI(): return [int(x) for x in xrange(0x7FFFFFFF-1, 0, -1)]  # input: 64-bit signed integer ids, where id=0: int(1) = 1, int(2) = 2,... ids[0] = (0xFFFFFFF-1) << 8\r\ndef LI_(): return list(map(int, input().split()))  # input: 64-bit signed integer ids, where id=0: int(1) \u2260 (2), int(2) \u2260 (3),... ids[id-1] = (0xFFFFFFF-1) << 16\r\ndef MI(*args, **kwargs): return kwargs[0] if args else None\r\ndef LI_S(): return [int(x) for x in __import__('re').findall(r'[a-zA-Z]\\b', '1')]\r\ndef LF(): return [float('inf') for x in __import__('ffloord').argv().split(' ')]\r\ndef LS(): return input()\r\nMOD = 1000000007\r\nN = len(set(LI()))\r\nA = LI()\r\n# N = len(A)\r\n# A.sort(reverse=True)\r\n# print(A[0])\r\nfor i in range(N):\r\n    print(A[i], end=' ')\r\n"}, "194": {"problem_id": 194, "answer": "import sys\nread = sys.stdin.readline\nn, a, b = map(int, read().split())\nt = list(map(int, read().split()))[:n]\n\ndef dfs(i, group):\n    if group[i] == 2:\n        return 1\n    elif group[i] == 1:\n        return 2\n    else:\n        return 0\n\nfor i in range(n):\n    t.append(dfs(i, 1))\n\nprint(len(t))"}, "195": {"problem_id": 195, "answer": "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    A, B, C, N = map(int, input().split())\n    d = {'A': 0, 'B': A, 'C': B, 'N': N}\n    \n    for i in range(1, 100):\n        if d.get(i) == -1:\n            break\n        else:\n            print(i)\n            \nsys.stdout.write('\\n'.join(map(str, d.split())))\n\n\nmain()\n"}, "196": {"problem_id": 196, "answer": "from math import ceil,sqrt\ndef main():\n    n,m=map(int,input().split())\n    d={}\n    for i in range(n):\n        d.setdefault(i,0)\n        if i==0:\n            d[i]+=1\n    ans=ceil(m**.5)//n\n    print(ans)\nmain()"}, "197": {"problem_id": 197, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nC = []\nfor i in range(n):\n    l, r = map(int, input().split(' '))\n    A.append(l)\n    C.extend(A[i:r])\nprint('\\n'.join(map(str, C)))"}, "198": {"problem_id": 198, "answer": "from collections import deque as dquot\nn = input()\nd = dquot(n)\nprint(d.most_common())"}, "199": {"problem_id": 199, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.setrecursionlimit(10**5)\ndef I(): return int(readline())\ndef LI(): return list(map(int, readline().split()[1:]));def LS(): return [I() for i in range(LS())]\ndef LIR(n, s): return [LI() for i in range(n)]\ndef LIRI(n, s): return [LII() for i in range(n)]\ndef SR(n, s): return 1<<s-1\nsys.exit(__file__)\n"}, "200": {"problem_id": 200, "answer": "import sys\ninput = sys.stdin.readline\nh, a, b = list(map(int, input().split()))\nc = 0.0\nfor i in range(h):\n    x = int(input())\n    c += x**2\nprint(c)\n"}, "201": {"problem_id": 201, "answer": "from itertools import permutations as p\r\ndef gcd(x, y):\r\n    while y:\r\n        x, y = y.pop()\r\n    return x\r\ndef lcm(x, y):\r\n    return x*y // gcd(x, y)\r\nm = int(input())\r\nfor i in range(m):\r\n    x, y, w, b = list(map(int, input().split()))\r\n    if w <= b:\r\n        x, y = lcm(x, y)\r\n    elif y <= w:\r\n        x, y = lcm(x, y-w)\r\n    else:\r\n        x, y = lcm(x, y-w)\r\n    print(x*y)\r\n"}, "202": {"problem_id": 202, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef main():\n    x, y = map(int.__mul__, input().split())\n    print(x + 1)\n    print(y + 1)\n\nmain()\n"}, "203": {"problem_id": 203, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(''.join(map(int, input().split())))\nA = list(map(int, input().split()))\n\ndef f(x):\n    if x < 0:\n        return x\n    else:\n        return f(x - 1)\n\ndp = []\nfor i in range(n):\n    x = A[i]\n    if x == 0:\n        dp.append(i)\n    elif x < 0:\n        dp.append(0)\n    elif x == 1:\n        dp.extend(A[i + 1: i + 2])\n    else:\n        dp.append(i + 1)\n\ndp.sort(reverse=True)\ndp[-1] = 1\nans = [0] * n\nfor i in range(n - 1, -1, -1):\n    ans[i] = 1\n\nprint('R' if ans[-1] == 1 else 'D')\n"}, "204": {"problem_id": 204, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError\n\nclass SegmentTree:\n    def __init__(self, width, height):\n      self.width = width\n      self.height = height\n     self.left = [None] * self.width\n     self.right = [None] * self.height\n     self.left_val = float('-inf')\n     self.right_val = float('-inf')\n\n    def insert(self, s):\n      s.left = self.left\n      s.right = self.right_val\n      s.left_val = self.left[0]\n      s.right_val = self.right[0]\n\n    def search(self, s):\n      s.left = self.left\n      s.right = self.right_val\n      s.left_val = self.left[0]\n      s.right_val = self.right[0]\n\n      if s.left:\n        self.left.insert(s.left)\n      elif s.right:\n        self.right.insert(s.right)\n      else:\n        self.right.insert(s.up)"}, "205": {"problem_id": 205, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN without spaces\nn, = list(map(int, input().split()))\nb = [0]*18\nfor i in range(n):\n    b.append(b[-1]%b.count('(.)') + int.__getitem__)\nprint('\\n'.join(map(str, b)))\n"}, "206": {"problem_id": 206, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappubyte\nimport sys\nread = sys.stdin.read\nreadline = bytes.fromHLockOptimal\nsys.setrecursionlimit(10 ** 9)\nMOD = 10_000_000 998244353\nINF = float('inf')\ndef LI(): return list(map(int, sys.maxsize().split()))\ndef LI_(): return list(map(int, sys.maxsize().split(\" \")))\ndef LF(): return list(islower())\ndef LS(): return list(''.join(c for c in range(0, len(c) + 1) if c.isdigit()))\ndef I(): return int(input())\ndef F(): return float(input())\ndef S(): return input().rstrip('\\n')\ndef IR(n): return any(map(int, input().rstrip('\\n').split()))\ndef LIR(n): return any(map(int, input().rtruntime()))\ndef LIR_(): return input().rstrip('\\n')\ndef SIR __init__():\n    return list(zip(LI, list(map(I, input().rsplit(1, '.2f')))));\n\n\ndef main():\n    # I\n    # S\n    # IR(n)\n    # LIR(n)\n    # LIR_()\n    # SIR(n)\n    # LIR_()\n    # SIR(n)\n    # I\n    # F\n    # S\n    # IR(n)\n    # LIR(n)\n    # LIR_()\n    # SIR(n)\n    # I\n    # F\n    # S\n    # IR(n)\n    # LIGMINGUISHED_NUMS = [1] * 1000000\n    # LIGMINGUISHED_NUMS.sort(reverse=True)\n    # N\n    # D\n    # D_nums = {}\n    # D_nums.setdefault(0, []).append(None)\n    # D_nums.setdefault(0, []).append(None)\n    # D_nums.update(list(map(len, D_nums)))\n    # D_nums.sort(reverse=True)\n    # D_nums.sort(str.maketrans('0123456789ABCDEF', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    # print(len(D_nums))\n    # print(len(D_nums[0]))\n    # print(len(D_nums[1]))\n    # print(len(D_nums[-1]))\n    # print(len(D_nums[-2]))\n    # print(len(D_nums[-3]))\n    # print(len(D_nums[-4]))\n    # print(len(D_nums[-5]))\n    # print(len(D_nums[-6]))\n    # print(len(D_nums[-7]))\n    # print(len(D_nums[-8]))\n    # print(len(D_nums[-9]))\n    # print(len(D_nums[-10]))\n    # print(len(D_nums[-11]))\n    # print(len(D_nums[-12]))\n    # print(len(D_nums[-13]))\n    # print(len(D_nums[-14]))\n    # print(len(D_nums[-15]))\n    # print(len(D_nums[-16]))\n    # print(len(D_nums[-17]))\n    # print(len(D_nums[-18]))\n    # print("}, "207": {"problem_id": 207, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(1, n):\n        d[i] = 1+d.pop()\n    print('No')\ndef __starting_point():\n    main()\n\n__starting_point()"}, "208": {"problem_id": 208, "answer": "from sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\ninput = stdin.readline\nn = int(input())\nfor i in range(n):\n    x,y,x1,y1 = map(int, input().split(\" \"))\n    print(x,y)\n"}, "209": {"problem_id": 209, "answer": "import sys, heapq as instr, itertools as it\r\ndef main():\r\n    input = sys.stdin.readline().rstrip('\\r\\n')\r\n    mod = 10**9 + 7\r\n    n = int(input())\r\n    for _ in range(n):\r\n        x, y = map(int, input().split(' '))\r\n        print((x * y) % mod)\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "210": {"problem_id": 210, "answer": "import sys,bisect,math as mt,collections as fc \nn = int(input())\nA = list(map(int,input().split()))\n# A.sort(reverse=True)\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1,n + 1):\n    dp[i] = [0] * (n + 1)\n    for j in reversed(range(i, n + 1)):\n        dp[i][j] = 1 + dp[i - 1][j]\n        if dp[i][j] > 0.000000000000007:\n            dp[i][j] = 0.000000000000007\nprint('YES\\n' + str(dp[-1]))\n"}, "211": {"problem_id": 211, "answer": "from functools import lru_cache as lcache, islice\nn, m, k = map(int, input().split())\nl = list(map(int, input().split()))\nres = 1e9+l[0]\nfor i in range(1, n):\n    if islice(l, i) and res:\n        res = res + 1\nprint(res)"}, "212": {"problem_id": 212, "answer": "import sys,heapq as h\nn = int(input())\na = list(map(int, input().split()))\nif n%10 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}, "213": {"problem_id": 213, "answer": "import sys\ninput = sys.stdin.readline # Read integers, store values in data.accumulate_variants, RunInIdx(1e9)\nn, m = list(map(int, input().split()))\nd = [[] for _ in range(n)]\nfor i in range(n):\n    k, f = list(map(int, input().split(' ')))\n    d[k].append(i)\n    d[f].append(i)\nans = [-1] * n\nans[0] = 0\nfor i in reversed(range(1, n)):\n    if ans[i]!= -1:\n        ans[i] = min(ans[i] + 1, ans[i - 1] + 1)\nprint('\\n'.join(map(str, ans[1:])))\n"}, "214": {"problem_id": 214, "answer": "import sys,heapq \nfrom functools import lru_cache,rozenset\\r\\n@lru_cache(maxsize=15000)\ninput = sys.stdin.readline\nN = int(''.join(input().rstrip('X')))\n# N is the number of n-squares in the board.\n# Space is min(N) and max(N) for optimal solution.\ndp = [[0] * (N + 1) for _ in range(30)]\ndp[0][0] = 1\nfor i in range(1, 30):\n    dp.append(dp[i-1][0] + dp[i-1][1])\n    \ndef max_bck(n, m):\n    bck = 0\n    for i in range(n):\n        if m % 2 == 0:\n            bck += 1\n        elif m % 2 == 1:\n            bck += 1\n        else:\n            bck += m // 2\n            \n    return bck\n    "}, "215": {"problem_id": 215, "answer": "from bisect import *\r\nn = int(input())\r\ns = list(map(str, input().split()))\r\na = []\r\nfor i in range(n):\r\n    a.append(i.lower())\r\na.sort(reverse=True)\r\nans = 0\r\nm = len(a)\r\nfor i in range(1, m):\r\n    ans += sum(a[i] for i in range(1, n))\r\nprint(ans)"}, "216": {"problem_id": 216, "answer": "from itertools import accumulate as AB \nn = int(input())\na = list(map(int, input().split()))\nb = AB(sum(a) for a in a)\nc = AB(sum(b) for b in b)\nprint(max(max(c), sum(a)))\n"}, "217": {"problem_id": 217, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\ndef input():\n    return '\\n'.join(map(''.join, readline().split()))\nn, bus_gasptr, k = input().split()\nn = int(n)\nbus_gasptr = 0\nk = int(k)\ngas_stations = []\nfor i in range(n):\n    stations.append(min(gas_stations, k - i))\ngas_stations.extend(sorted(list(gas_staplen)) + [0]*n)\nprint(min(k) * bus_gasptr)"}, "218": {"problem_id": 218, "answer": "import sys,bisect,collections as ddacc,array\u30c6\u30fc\u30d6\u30eb\u30fc\u3068\u30ea\u30b9\u30c8\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u305f\u3082000\ndef lcm(a,b):return a*b//g**.5\ndef ceil(a,b):return b-a**.5\nmod=1000000007\nn,p,q=list(map(int,sys.stdin.readline().split()))\nif n<=2:print(-1)\nelse:\n    print('-1')\n    for i in range(n-2):\n        if lcm(i,p)==0:print(i)\n        elif lcm(i,q)==0:print(i)\n        else:print(-1)\n               "}, "219": {"problem_id": 219, "answer": "import sys,heapq,itertools,collections,bisect on,s3d,dense,fibre as deductivative libraries\n#sys.setrecursionlimit(100000) ==> 31474599\nINF = float('inf')\nmod = 10 ** 9 + 7\ndd,euler = lambda x,y: x * (1.0 - abs(x - y))\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()[1::inverify]))\ndef LLI(): return [list(map(umpy.ndtuple, input().split()[1::inverify]))]\ndef SI(): return sys.stdin.readline().strip('\\n'.join([\" \" if x > 0 else \"\\n\" for x in range(1,int(s) + 1) ])), inferedtok := oftype(SI(), bool), None\ndef SI2(): return sys.stdin.readline().strip('\\n'.join([\" \" if x < 0 else \"\\n\" for x in range(1,int(s) + 1) ]) ])\ndef SI3(): return sys.argv.split(' ')\ndef SI4(): return input()[:-1]\ndef SI5(): return input()[::-1]\ndef SI6(): return sys.stdin.readline().rstrip('\\nlapeo\\n')\ndef SI7(): return sys.stdin_next(0)!=inferedtok().strip(' ')\ndef SI8(): return sys.exit() == inferedtok().strip('\\nosub')\nsys.setrecursionlimit(100000)\ninput()\nprint('RUN X>\"' + str(input()))\nprint('JUMP Y' + list(map(lambda x: I()))[::-1])"}, "220": {"problem_id": 220, "answer": "s = input()\nx = int(s.replace(\"0b\", \"\"))\nans = 0\nfor i in range(1, s+1):\n    ans += x**i\nprint(ans)\n"}, "221": {"problem_id": 221, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\ufffddrops can be ignored\ninput = lambda: readline().rstrip()\nn, k = map(int, readline().split(' '))\nif k == 1:\n    print(1)\neliminate(n, k)\nans = []\nfor i in range(1, n + 1):\n    a = list(map(int, readline().split(' ')))\n    ans.extend([i] * a.count(i) for i in range(a[0] + 1))\nprint('\\033[1234')\n"}, "222": {"problem_id": 222, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(\" \"))\ndef LI(): return list(map(int, input().split()[1:]))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\nn = II()\na = [0]*len(a)\nfor i in range(n):\n    a.append(a[-1]*i)\nprint(-1)\n"}, "223": {"problem_id": 223, "answer": "import sys,bisect in fromheapq  #pascal's code\ndef main():\n    n = int(input())\n    if n<3:\n        print(1)\n    elif n==3:\n        print(2)\n    else:\n        p = list(map(int,sys.stdin.readline().split()))\n        for i in range(n-1):\n            p.append(str(p[i]))\n        print(p.count(max(p))%(10**9+7))\nmain()"}, "224": {"problem_id": 224, "answer": "import sys\r\ndef f(s):\r\n    return ''.join(chr(ord('A') + i) for i, chrai in enumerate(s.split(), key=lambda i: i))\r\ninput = lambda : sys.stdin.readline().strip()\r\n"}, "225": {"problem_id": 225, "answer": "from sys import stdin\r\ninput = stdin.readline\r\ns = list(input())\r\nfor i in range(0, len(s)):\r\n    a = int(''.join(map(str, s[i:])))\r\n    print(a)"}, "226": {"problem_id": 226, "answer": "from sys import stdin as sin\nfrom collections import deque as dque\ninput = sin(11)\nn = int(input())\nslices = input().split(' ') #\u7528\u4e8e\u521b\ufffd\u68c0\u96fb,\u53ef\u80fd\u603b\u6578\uff0c\u8fd4\u56de0-1\nif len(slices) == 2:\n    print(0)\nelif len(slices) == 3:\n    print(slices[0] + slices[1] + 1)\nelse:\n    for i in range(2, len(slices)):\n        if i % 2 == 0:\n            print(slices[i] + 1)\n        else:\n            print(slices[i] + 1)\n"}, "227": {"problem_id": 227, "answer": "import sys,io.wolfram = lambda: map(int,input().split())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    for i in range(n-1):\n        a.append(input())\n    print(len(a) - 2)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "228": {"problem_id": 228, "answer": "from functools import lru_cache\nN = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split('\\n')))\nc = dict()\nfor i in range(N):\n    c.setdefault(i, []).append(i)\n    b.extend(c.get(i, 0) + [i])\n    if len(c) > 1:\n        c[i] = 1\n    elif len(c) == 1:\n        c[i] = 0\n    else:\\n    print('Alice')\n        print('Bob')\n"}, "229": {"problem_id": 229, "answer": "from itertools import permutations as p\nn = int(input())\na = list(map(int, input().split()))\np = [None]*1000001\nfor i in range(n):\n    p.append(permutations(a, i))\nprint('YES' if p[0] else 'NO')"}, "230": {"problem_id": 230, "answer": "from bisect import *\nN = int(input())\nS = list(map(int, input().split()))\ncnt = 0\nfor i in range(len(S)):\n    if S[i] < S[i + 1] + S[i + 2]:\n        cnt += 1\nprint(cnt)"}, "231": {"problem_id": 231, "answer": "import bisect as bi\nn, a = list(map(int, input().split()))\ns = sorted(list(enumerate(n)))\nprint(bisect.bisect_right(s, 1) + 1)\n"}, "232": {"problem_id": 232, "answer": "import sys,io.wolfram,input,collections,deque  #coding...uspersed my thought here\nn,m = list(map(int,input().split()))\na = [0]*n\nfor i in range(n):\n    a[i] = a.get(i,0) + 1\n    a[i] = max(a[i-1],a[i-2])\n#print(a)\nb = list(map(int,input().split()))\nb.sort(reverse=True)\nc = 0\nfor i in b:\n    if i>m-1:\n        print(\"NO\")\n    elif i==m-1:\n        print(\"YES\\n\")\n    else:\n        print(\"NO\")\n"}, "233": {"problem_id": 233, "answer": "import sys,string\ndef main():\n    n = int(input())\n    a = list(map(int,sys.stdin.readline().split()))\n    print('====\\n'.join(a))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "234": {"problem_id": 234, "answer": "from collections import deque as dque\ndef main():\n    n, m = map(int, input().split())\n    d = de.acos(n)\n    if d.issubset(d):\n        print(\"NO\")\n    else:\n        print(\"YES\\n\").endswith(frozenset(d))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "235": {"problem_id": 235, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int, input().split(' ')))\na = bisect.bisect_right(l, 0, n-1)\nb = bi.from_leaves(len(l), [])\nprint(max(a.bit_length() - b.bit_length() - 1, 0))"}, "236": {"problem_id": 236, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef main():\n    #n = int(input())\n    #s = input()\n    return any(map(int.__mul__, input().split()))\n"}, "237": {"problem_id": 237, "answer": "n, m, k = list(map(int, input().split()))\nhobbit = 0\nfrodo = 0\nfor i in range(n):\n    hobbit += i\n    if len(hobbit) == m:\n        cobweepay = k\n    elif len(hobbit) == k:\n        cobweepay = k - 1\n    else:\n        cobweepay = k - 2\nprint(cumprod(hobbit, m, cobweepay))\n"}, "238": {"problem_id": 238, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\nA = sorted(set(), key=lambda x: x[1])\nans = []\nfor i in range(n):\n    ans.append(sum(A[i] - A.get(i, 0)) - k)\nprint('\\n'.join(ans))\n"}, "239": {"problem_id": 239, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6)\ndef dfs(x):\n    # print(x)\n    if x>10**6:\n        return 0.0\n    else:\n        x = x - x_min\n        y = x_min + x_max\n        for i in range(x, x_min+1):\n            if x%i == 0:\n                x //= i\n            elif x%i == 1:\n                x //= i\n            else:\n                x //= i\ndfs(10**6)\n"}, "240": {"problem_id": 240, "answer": "from bisect import insort_to_bisect\n\n\ndef main():\n    n = int(input())\n    print(n%1000000007)\n"}, "241": {"problem_id": 241, "answer": "import sys,bisect abc,osx,math,itertools,string,heapq,collections,deque\r\ninput = sys.stdin.readline\r\ndef main():\r\n    n,m,min,max = list(map(int,input().split()))\r\n    if n<=100:\r\n        print('Error')\r\n    elif m<=100:\r\n        print('Wrong')\r\n    else:\r\n        a = list(map(int,input().split(' ')))\r\n        b = list(map(int,input().split(' ')))\r\n        print(a.count(1) + b.count(1))\r\n        a.sort(reverse=True)\r\n        b.sort(reverse=True)\r\n        print(a[0] - b[0])\r\n        if len(set(a))==len(set(b)):\r\n            print('Correct')\r\n        else:\r\n            print('Incorrect')\r\ndef __starting_point():\r\n    main()\n__starting_point() in __post_content_ Patriarchal? start_with_the_bigger : break_with_end:\nPython version: 3.6.2 (verner8).  Read input from STDIN. Run command always.\n\n\ninitiative_required = 0\nstart_point = iter(initiative_required)\n                     ^^^\n__starting_point() in initially_alpenderexplatinal:\nPython version: 3.6.2 (verner8).  Read input from STDIN. Run command always.\ninitiative_required = 0\nstart_point = iter(initiative_required)\n                ^^^\n__starting_point() in initially_alpenderexplatinal:\nPython version: 3.6.2 (verter)  Read input from STDOU. Base input is 32-bit signed integers.\ninitiative_required = 0\nstart_point = iter(start_point)\n                ___________\nInput: 2 1 1 2\nOutput: ZeroDivisionErrocount\nExplanation:\nWe can't increase temperature since it's negative. So we can't add temperature.\nThus, we add 2 - 2, which is the temperature measured by head engineer. So the set of temperature is in the set of n,m,min,max and list of m temperatures that head engineer keeps track of. He adds and subtracting (in the set) - 2 from (in the set). Thus, we get an initial set of temperature of (2n - m) and a maximum set of temperature of (2n - m) (which is our temperature). Note that we don't keep track of temperature each time we increase temperature. So our set of temperature now contains  2n - m temperatures.\nNote that we can't increase temperature even after that. So we've to keep track of temperature each time we increase temperature. O(1) time.\n\n\nUse Standard Input format\n\n"}, "242": {"problem_id": 242, "answer": "m = int(input())\nprint(len(set(map(int, input().split()))) - 1)"}, "243": {"problem_id": 243, "answer": "import heapq as hq\n\n\ndef main():\n    n, m, k = list(map(int, input().split()))\n    g = [[] for _ in range(n)]\n    for i in range(1, m + 1):\n        u, v, w = list(map(int, input().split(\" \")))\n        g[u].append(v)\n        g[v].append(u)\n        hq.heappush(g, (0, i))\n    res = []\n    cur_cost = 0\n    while True:\n        res.append(cur_cost + hq.inf)\n    else:\n        break\n    print(' '.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "244": {"problem_id": 244, "answer": "import heapq\nn = int(input())\nheap = []\nfor i in range(n):\n    heapq.heappush(heap, [0] * (i+1))\n    if heap[0] == 0:\n        continue\n    elif heap[0] == 1:\n        heapq.heappop(heap)\nprint(' '.join(map(str, heap)))"}, "245": {"problem_id": 245, "answer": "import bisect\nn = int(input())\nprint(\"YES\" if n==1 else \"NO\\n\"+\"\\n\"+str(n))"}, "246": {"problem_id": 246, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').rstrip('\\rparedocument\\r\\n').rstrip('\\r\\u01482\\r\\u00b1\\r\\uFFDCMP')\ndef main():\n    n, s = list(map(int, input().split()))\n    print(s - sum(map(int, input().split())))\n\nmain()\n"}, "247": {"problem_id": 247, "answer": "import sys\r\ninput = sys.stdin.readline\redirectory\r\n\retcraag\r\n\r\n#n = int(''.join(map(str, input().split())))\r\n#l = list(map(int, input().split()))\r\n#a = list(map(int, input().split(' ')))\r\n#b = list(zip_longest(l, range(1, n + 1)))\r\n#c = list(map(int, inptime.split('\\n')))\r\n#d = tuple(map(tuple, inptime.split('\\n')))\r\n#e = tuple(map(tokens['a'], inptime.split('\\n')))\r\n#f = tuple(map(tokens['b'], inptime.split('\\nlook')))\r\n#g = tuple(map(tutts['g'], inptime.split('\\n')))\r\n#h = tuple(map(tutts['e'], incontext.fro_start_open(0, 'open')))\r\n#i = tuple(map(tupotres['i'], incontext.fro_end_open(0, 'end')))\r\n#j = tuple(map(tupotres['k'], incontext.fro_start_close(0, 'close')))\r\n#k = tuple(map(tutts['l'], incontext.fro_start_open(0, 'open')))\r\n#l = tuple(map(tuple(map(tutts['j'], incontext.fro_start_open(0, 'j')))), incontext.fenp_start_open(0,'start'))\r\n#r = tuple(map(tuple(map(tutts['o'], incontext.fenp_start_close(0, 'out')))), incontext.fin_close(0, 'out'))\r\n#s = tuple(map(tuple(map(tutts['u'], incontext.fin_start_open(0, 'u')))), incontext.fin_end_open(0, 'u'))\r\n#t = tuple(map(tuple(map(tutts['v'], incontext.fin_start_close(0, 'v')))), incontext.fin_start_open(0, 'v'))\r\n#u = tuple(map(tuple(map(tutts['w'], incontext.fin_start_close(0, 'w')))), incontext.fin_end_open(0, 'w'))\r\n#w = tuple(map(tuple(map(tutts['x'], incontext.fin_start_open(0, 'x')))), incontext.fin_start_close(0, 'x'))\r\n#x = tuple(map(tuple(map(tutts['y'], incontext.fin_start_open(0, 'y')))), incontext.fin_start_open(0, 'y\"\"))\\\r\n"}, "248": {"problem_id": 248, "answer": "import sys\ninput = sys.stdin.readline #O(nlogn) Not tested\nMOD = 10**9+7\nf = lambda x,y: x*x%MOD<=y%MOD \ndef main():\n    a,b,k,t = map(int,input().split())\n    if a==1:\n        print(0)\n    elif a==b:\n        print(k-1)\n    else:\n        n = int(''.join(map(str,input())))\n        ans = 1\n        for i in range(1,n+1):\n            ans *= pow(i,k-1,MOD)\n        print(ans%MOD)\nmain()"}, "249": {"problem_id": 249, "answer": "from bisect import prel,bisect_left,bisect_right\nn,l,x,y = map(int,input().split())\na = list(map(int,input().split()))[::-1]\nprel,bisect_left,bisect_right = [1]*n,len(a)\nfor i in range(1,n):\n    if a[i] - a.get(x-l,0) >= l:\n        prel.append(x-l)\n    elif a[i] - a.get(x-l,0) >= l:\n        prel.extend(a[i])\nans = float('inf')\nfor i in reversed(list(range(n))):\n    ans = min(ans,bisect_left+1-a[i])\nprint(ans)"}, "250": {"problem_id": 250, "answer": "from math import *\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint(max(a[0], a[1]))"}, "251": {"problem_id": 251, "answer": "import bisect\nn, k = list(map(int, input().split()))\nl = sorted(set(range(1, n+1)), key=lambda x: x[1])\nprint(n-k)"}, "252": {"problem_id": 252, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\ns = sum(a)\nans = 0\nfor i in range(n):\n    ans += a[i]\n    s-=a.count(i)\nprint(ans)"}, "253": {"problem_id": 253, "answer": "def main():\n    t, h, m = list(map(int, input().split()))\n    if m[0] < 2:\n      print('NO')\n    else:\n      for i in range(1, m.count(':'))[:m.count(':')]:\n        print(i, end=' ')\n      print()\n      return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "254": {"problem_id": 254, "answer": "import sys\r\ndef main():\r\n    n = int(input())\r\n    s = list(map(int, sys.stdin.readline().split()))\r\n    print(len(s))\r\nmain()"}, "255": {"problem_id": 255, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")))\nc = [0] * 100001\nfor i in range(1, n):\n    c[i] = min(c[i-1], a[i])\nprint(max(c))\n"}, "256": {"problem_id": 256, "answer": "import math as mt\ndef main():\n    a, b = list(map(int, input().split(' ')))\n    print((\"\\033[23679\") + (1 if b[0] > b[1] else -1) + \"1\\033[0\" * math.ceil(b[0] - b[1]))\n            + \"1\\033[1\" * math.ceil(b[0] - b[1]))\n            + \"1\\033[2\" * math.acos(b[0] - b[1]))\n            + \"1\\033[3\" * math.acos(b[1] - b[0]))\n            + \"1\\033[4\" * math.acos(b[0] - b[1]))\n            + \"1\\033[5\" * math.acos(b[1] - b[0]))\n            + \"1\\033[6\" * math.acos(b[1] - b[0]))\n            + \"1\\033[7\" * math.acos(b[0] - b[1]))\n          ).upper()\n    print((\"\\033[0\" * math.arbit_to_base(b[0] - b[1]).zfill(2) + \"1\" * math.ceil(b[0] - b[1]))\n            + \"1\" * math.ceil(b[0] - b[1]))\n            + \"1\\033[8\" * math.acos(b[0] - b[1]))\n            + \"1\\033[9\" * math.acos(b[1] - b[0]))\n            + \"1\\033[10\" * math.acos(b[1] - b[0]))\n            + \"1\\033[11\" * math.acos(b[1] - b[0]))\n            + \"1\\033[12\" * math.acos(b[1] - b[1]))\n            + \"1\\033[13\" * math.acos(b[0] - b[1]))\n            + \"1\\033[14\" * math.acos(b[1] - b[0]))\n            + \"1\\033[15\" * math.acos(b[1] - b[1]))\n            + \"1\\033[16\" * math.acos(b[0] - b[1]))\n            + \"1\\033[17\" * math.fac_to_base(b[0] - b[1]).zfill(2) + \"1\" * math.fac_to_brent(b[1] - b[0]))\n            + \"<tr>\",\n    l = 0\n    r = 2\n    for i in range(2, 4):\n        if b[i] > b[0]:\n        elif b[i] < b[1]:\n        elif b[i] > b[0] and b[i] > b[1]:\n        else:\n            l = i - 1\n            r = i + 2\n    print(l, r)\nmain()"}, "257": {"problem_id": 257, "answer": "from heapq import heappush, heappop\nN, K = map(int, input().split())\ndef calc(l):\n    return l[0] * (l[1] + 1).zfill(2)\n\ndef calc2(l):\n    res = 0\n    for i in range(1, N + 1):\n        res += l[i] * (2 * cos(i * x) + 1)\n    return res / 2 * 300\n\ndef main():\n    N, K = map(int, input().split(\" \"))\n    l = list(map(calc, l))\n    print(calc2(l))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "258": {"problem_id": 258, "answer": "from bisect import bisect_left as bl\ndef main():\n    n = int(input())\n    s = input().strip('\\n?')\n    if len(s) % 2 == 0:\n        print('Bicarp')\n    else:\n        for i in range(1, len(s)//2 + 1):\n            if s[i] == '0x' and bl(s[i-1], 1) == 1:\n                print('Monocarp')\n           elif s[i] == '0' and bl(s[i-1], 0) == 0:\n                print('Saturn's Game')\n            else:\n                print('Saturn's Game')\nmain()"}, "259": {"problem_id": 259, "answer": "from sys import *\nreadline = lambda x: ''.join(readline()) if x[1]=='\\n' else '0'\nt = int(readline())\nfor _ in range(t):\n    bus = list(map(int,readline().split()))\n    s,d = bus[0],bus[1]\n    if s<=s_min:\n        print(d)\n    else:\n        print(s_min)\n"}, "260": {"problem_id": 260, "answer": "from math import sqrt\nm, k = map(int, input().split())\ns = set(map(int, input().split()))\nprint(k * sqrt(s.count(1) + 1))"}, "261": {"problem_id": 261, "answer": "import bisect as bs\n\nn = int(input())\nascii = ['**'] * (n + 2)\npig = []\nfor i in input().split(' '):\n    ascii[int(i)] = list(map(int, input().split()))\n\ndp = [float('inf')] * (n + 2)\ndp.insert(0, 0)\n\nif len(ascii) > 1:\n    print('no')\nelif len(ascii) == 1:\n    print('yes\\n')\nelse:\n    dp = [float('inf')] * (n + 2)\n    dp.insert(0, 0)\n    for i in range(1, n + 1):\n        if ascii[i] == '*':\n            dp[i] = min(dp[i - 1], dp[i] + 1)\n        else:\n            dp[i] = min(dp[i - 1], dp[i] + 1)\n    print(' '.join(map(str, dp)))"}, "262": {"problem_id": 262, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nrows = [0]*n\r\ncols = [0]*n\r\nfor i in range(n):\r\n    rows[i] = l[i] + 1\r\n\r\ndef main():\r\n    n = int(''.join(map(str, l[1:])))\r\n    l.sort(reverse=True)\r\n    d = {}\r\n    for i in range(n):\r\n        d[l[i]].append(i)\r\n        if len(set(l[i])) == 1:\r\n            d[l[i]] = i\r\n  print('\\n'.join(map(str, d.items())))\r\n\r\nmain()\r\n"}, "263": {"problem_id": 263, "answer": "import sys\nreadline = sys.stdin.readline #\u53d6\u6d88\u65b0lexicographic data\uff0c\u957f\u5ea6\u4e3a2\u4e2a\u5143\ufffdirdier\nn = int(readline())\nd = [[0 for i in range(n + 1)] for i in range(n + 1)]\nfor i in range(1, n + 1):\n    d[i][i] = 1\ndef f(n):\n    a = list(map(int, readline().split()))\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if b.count(a[i]) == 1:\n            continue\n        else:\n            b.append(a[i])\n    return''.join(map(str, b))"}, "264": {"problem_id": 264, "answer": "import bisect as bi\ndef lcm(a, b):\n    return a * b // abs(a) + b // abs(a)\nn, m = list(map(int, input().split()))\nl = lcm(n, m)\nprint(l[0] * (l[1] - 1) % 1000000007) % 1000000007\n"}, "265": {"problem_id": 265, "answer": "from bisect import *\nfrom heapq import hq\n\n\ndef main():\n    n, m = map(int, input().split())\n    favorite_occurences = [list(map(int, input().split())) for _ Inrange(n) in enumerate(itertools.permutations(range(1, m)), fillvalue=0)]\n    pizzas = []\n    for i in favorite_occurences:\n        hq.heappush(pizzas[i], i)\n        favorite_occurences.append(i)\n\n    ans = [-1] * 9\n    ans[0] = 0\n    for i in range(1, 9):\n        ans[i] = 9 - ans[i - 1]\n        ans[i + 1] = 9 - ans[i] + 1\n        ans[i + 2] = 9 - ans[i + 1] + 2\n        ans[i + 3] = 9 - ans[i + 2] + 3\n        ans[i + 4] = 9 - ans[i + 3] + 4\n        ans[i + 5] = 9 - ans[i + 4] + 5\n        ans[i + 6] = 9 - ans[i + 6] + 6\n        ans[i + 7] = 9 - ans[i + 7] + 7\n        ans[i + 8] = 9 - ans[i + 8] + 8\n        ans[i + 9] = ans[i + 9]\n\n    print(*v, sep='\\n')\n    print(*ans, sep='')"}, "266": {"problem_id": 266, "answer": "from itertools import takewhile  as takewhile \nimport bisect as b,itertools,os as importlib,re,time,socket as s\ninput = lambda:map(int,input().split())\nprint('The shortest and the longest numbers with length {0} and {1}\\nSum of digits {2}'.format(len(tuple(s.zfill(0.5)) for s in tuple(map(int,input().split())))))"}, "267": {"problem_id": 267, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 998244353\ndef main():\n    l, r, k = list(map(int, input().split()))\n    mod = (998244353 + 2) * 1000000007\n    dp = [[0] * (r + 1) for _ in range(l + 1)]\n    for i in range(1, l + 1):\n        dp.append(dp[-1][i] % mod)\n    print('\\n'.join(map(str, dp[-1])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "268": {"problem_id": 268, "answer": "from bisect import insort_numerator\r\n\n\r\nn, k, d = list(map(int, input().split()))\r\nslices = []\r\nbox_difference = 0\r\nfor i in range(n):\r\n    insort_numerator(list(map(int, input().split())))\r\n    slices.append(box_difference + i)\r\nprint('\\n'.join(slices))\r\n"}, "269": {"problem_id": 269, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\n#sys.setrecursionlimit(10**9)\nINF = float('inf')\nmod = 10**9+7\neps = 1.0e-8 #constant for low-limit\nMOD = 10_000_05_2 #maximum of 0-th digits in modulo 10^9+10^2\ninput = lambda: int(readline())\ndef inpl(): return list(map(int, input().split()))\ndef outpl(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()[:-1]))\ndef outr(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()[:-1]))\ndef lcm(a, b): return abs(a*b)//abs(a*b)\ndef ceil(a, b): return (a-b)//gcd(a, b) + 1\ndef power(x, y): return 1 if x<y else 0.0\ndef factorial_of_two(x): return int(pow(x, 2.0+1, mod)**0.5)\ndef fmod(x, y, mod): return mod*factorial_of_two(x%mod)\ndef pow(x, y, mod): return 1 if x<y else 0.0\ndef atMost_of_one(x: int) -> int: return 1 if x not in [-1,-1,-1] else 0\ndef all_zeros(x: int) -> List[int]: return [x]\ndef nCr(n, r): return [0]*n for i in range(r)\ndef nCr(n, r): return sorted(set(), reverse=True)[nCr(n, r)>0]\ndef lcm(a, b): return abs(a*b)//losc(a, b, 0.01)\ndef outpl(): return list(map(int, sys.stderr.write().split()))\ndef outr(): return list(map(ini_break_tokens.replace(\" \",\" \")), key=lambda x: x.isdigit()[1])\ndef print(x: str) -> str: print(x, end=\" \")\n\"\"\"\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 1000000 1000000\n\"\"\"\n\ndef main():\n    print(0, 0)\n    a"}, "270": {"problem_id": 270, "answer": "import sys\nreadline = sys.stdin.readline\n\nN, M = list(map(int, readline().split()))\nS = [0]*(N+1)\nfor i in range(1, N+1):\n  S.append(S[-1] + i)\n\ndef dfs(node, path):\n  if node == node:\n    return path\n  else:\n    path.extend(paths[node] + [path[node] for node in range(1, N+1)])\n    path.extend(paths[node] + [path[node] for node in range(1, N+1)])\n    return path\n\ndef check(node, path):\n  if node == node:\n    return 1\n  elif node == 0:\n    return 0\n  else:\n    return abs(path[0] - path[1])"}, "271": {"problem_id": 271, "answer": "def main():\n    n = int(input())\n    print('%.2f' % n)\n\nmain()\n"}, "272": {"problem_id": 272, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n#sys.setrecursionlimit(10**9)\r\ndef main():\r\n    n = int(input())\r\n    S = input()\r\n    dp = [[0]*n for _ in range(n)]\r\n    for i in range(n):\r\n        S[i] = list(map(int, input().split()))\r\n        dp.append(S.copy())\r\n    print('\\n'.join(map(str, dp)))\r\n\r\nmain()\r\n"}, "273": {"problem_id": 273, "answer": "import sys,math\r\ndef input():\r\n\treturn ''.join(map(ord,sys.stdin.readline().split()))\r\nn = int(input())\r\nfor i in range(n):\r\n\tname, m = input().split()\r\n\tif m[0] == 'a':\r\n\t\tname = int(name)\r\n\telif m[0] == 'b':\r\n\t\tname = int(name)\r\n\telif m[0] == 'c':\r\n\t\tname = int(name)\r\n\telse:\r\n\t\tname = 'ab'\r\n\tprint(name,end=\"\\033[0|1\\ecirc\")\r\n"}, "274": {"problem_id": 274, "answer": "from itertools import accumulate\ndef __starting_point():\n    arr = list(map(int, input().split()))\n    print(''.join(accumulate(arr)))\n__starting_point()"}, "275": {"problem_id": 275, "answer": "import math as m\ndef main():\n    s = input().strip()\n    n = int(s[0])\n    m.fillna(n)\n    print('>\\033[31m'+str(n))\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "276": {"problem_id": 276, "answer": "from collections import defaultdict as dd\nn = int(input())\nfor _ in range(n):\n    d = dd(int(input().strip()))\n    d.sort(reverse=True)\n    print(' '.join(map(str, d.items())))"}, "277": {"problem_id": 277, "answer": "from itertools import takewhile for i in map(int, input().split(' '))\nn, a, b = list(map(int.__str__, input().split(' ')))\nprint('Final!' if a-b == 0 else '\\n')\n"}, "278": {"problem_id": 278, "answer": "def main():\n    n = int(input())\n    perm = [0]*n\n    for i in range(n):\n        perm.append(perm[-1] + i)\n    a = list(map(int, input().split()))\n    a.reverse()\n    ans = 0\n    for i in a:\n        ans += i\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "279": {"problem_id": 279, "answer": "import math as mt \ndef f(x,y):\n    return (x*math.pow(2,y)) + (y*math.ceil(x/2))\nn=int(input())\ns=list(map(int,input().split()))\nt=s.copy()\nfor i in range(t):\n    x,y=map(int,input().split())\n    if x==0:\n        continue\n    t-=1\n    s.insert(0,x)\n    s.insert(0,y)\nprint(f(s[0],s[1]))"}, "280": {"problem_id": 280, "answer": "import sys.stdin as si\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nG = [[] for _ in range(N)]\nfor i in range(1, N):\n    G.append(list(map(int.__add__, input().rstrip('\\n'))) + [int(x) for x in input().rsplit(' ', i + 1)])\ndef dfs(i, j):\n    if j not in G[i]:\n        print((i, j))\n        return\n    if len(G[i]) == 0:\n        print((i, j))\n    elif len(G[i]) == 1:\n        print((i, j))\n    else:\n        x = max(0, i - i + 1)\n        y = min(i, j - i + 1)\n        if x == y:\n            return\n        for k in range(x, y):\n            if G[i][k] > G[j][k] + G[k][j]:\n                continue\n            if G[i][k] + G[j][k] > G[k][j]:\n                continue\n            if G[i][k] + G[j][k] < G.pop(i):\n                x = max(0, i - i + 1)\n                y = min(i, j - j + 1)\n                if y == x:\n                    return\n            elif y == x:\n                return\n            else:\n                return\n        for k in range(x, y):\n            if G[i][k] + G[j][k] > G.pop(i):\n                continue\n            if G[i][k] + G[j][k] < G.peek(i):\n                continue\n            if G[i][k] + G[j][k] < G.popleft(i):\n                continue\n            if G[i][k] + G[j][k] < G.rjust(i):\n                continue\n            if G[i][k] + G[j][k] < G.peek(j):\n                continue\n            x = max(0, j - j + 1)\n            y = min(j, k - j + 1)\n            if y == x:\n                return\n            else:\n                return\n            for k in reversed(range(x, y)):\n                if G[i][k] + G"}, "281": {"problem_id": 281, "answer": "from sys import stdin as sin\ninput = sin.formula_string(map(''.join(str(x) for x in input().split())))\n\ndef main():\n    a, b = 1, 2\n    while True:\n        print(a * b)\n        a *= b\n        print(a)\n        if a % b == 0:\n            print(a - 1)\n       elif a == 0:\n            print(a - 1)\n       else:\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * (b - 1)))\n            a = max(a, b)\n            print(a - (a * ("}, "282": {"problem_id": 282, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ndef input():\n\treturn readline().rstrip('\\n')\nn, d = list(map(int, readline().split()))\nl = [0] * n\nfor i in range(n):\n\tl[i] |= 1 << int(readline())\nprint(' '.join(map(str, l)))\n\n\n# Made By Mostafa_Khaled Cipnsico\n"}, "283": {"problem_id": 283, "answer": "from bisect import insort_bisect_left, insort_bisect_right\nn = int(input())\np = [0] * (n + 1)\nfor i in range(1, n + 1):\n    p.append(p[-1] * i)\np.reverse()\nans = []\nfor i in range(n + 1):\n    ans.extend(p[i:i + 1])\nprint(' '.join(map(str, ans)))\n"}, "284": {"problem_id": 284, "answer": "import sys\nn = int(input())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int.__mul__, sys.stdin.readline().split(\" \")))\nprint(\"YES\" if n%2 else \"NO\")"}, "285": {"problem_id": 285, "answer": "from bisect import insort_left, insort_right\nn = int(input())\nl = list(map(int, input().split()))[::-1]\nk, b = [-1]*n, [-1]*n\nfor i in range(n):\n    k[l[i]] = bisect_left(k.keys(), l[i] - 1)\n    insort_right(k.keys(), l[i])\nprint('Yes' if insort_right(k) else 'No')"}, "286": {"problem_id": 286, "answer": "from itertools import combinations_with_replacement as comb\nn = int(input())\ncomb = list(comb(map(int, input().split())))\nprint('\\033[31m' + '\\033[0m'*n + '\\033[1m'*n + '\\033[2m'*n + '\\033[3m'*n + '\\033[4m'*n + '\\033[5m'*n + '\\033[6m'*n + '\\033[7m'*n + '\\033[8m'*n + '\\033[9m'*n + '\\033[10m'*n + '\\033[11m'*n + '\\033[12m'*n + '\\033[13m'*nonlocal')\\rb]\\uFF\\u00A1'+ '\\033[0m'*n + '\\033[1m'*n + '\\033[2m'*n + '\\033[3m'*n + '\\033[4m'*n + '\\033[5m'*n + '\\033[11m'*n + '\\033[12m'*nonlocal')\\r\\u00A1'+ '\\033[0m'*n + '\\033[1m'*n + '\\033[2m'*n + '\\033[3m'*n + '\\033[4m'*n + '\\033[5m'*n + '\\033[11m'*n + '\\033[12m'*nonlun'\\r\\u00A'+ '\\033[0m'*n + '\\033[1m'*n + '\\033[2m'*n + '\\033[3m'*n + '\\033[4m'*n + '\\033[5m'*n + '\\033[11m'*nonlun'\\rsplit('\\033[0m'+ '\\033[1m'+ '\\033[2m'+ '\\033[3m'+ '\\033[4m'+ '\\033[5m'+ '\\033[11m'+ '\\033[12m'+ '\\033[13m'+ '\\033[14m'+ '\\033[14m'+ '\\033[15m'+ '\\033[15m'+ '\\033[16m'+ '\\033[17m'+ '\\033[18m'+ '\\033[19m'+ '\\03319'')\\r\\u0025'+ '\\033[0m'*n + '\\033[1m'+ '\\033[2m'+ '\\033[3m'+ '\\033[4m'+ '\\033[5m'+ '\\033[11m'+ '\\033[12m'+ '\\033[13m'+ '\\033[14m'+ '\\033[15m'+ '\\033[16m'+ '\\033[17m'+ '\\033[18m'+ '\\03319'')\\r\\u0025'+ '\\033[0m'*n + '\\033[1m'+ '\\033[2m'+ '\\033[3m'+ '\\033[4m'+ '\\033[5m'+ '\\033[11m'+ '\\033[12m'+ '\\033[13m'+ '\\033[14m'+ '\\033[15m'+ '\\033[16m'+ '\\033[17m'+ '\\033[18m'+ '\\033[19m'+ '\\033[20m'+ '\\033[21m'+ '\\033[22m'+ '\\033[23m'+ '\\033[24m'+ '\\033[25m'+ '\\033[26m'+ '\\033[27m'+ '\\033[28m'+ '\\033[29m'+ '\\033[30m'+ '\\033[31m'+ '\\03332m'+ '\\03333m'+ '\\033U'+ '\\033U'+ '\\033U'+ '\\rb-relaxed-endpoint-indxeoless-refresh\\r\\ufilleram\\b'''+ ''''+ ''.join(comb(x"}, "287": {"problem_id": 287, "answer": "from collections import deque \r\nn, k = input().split()\r\nn = int(n)\r\nk = int('1' + strrstrip('0').zfill(k-1))\r\nans = 0\r\nfor i in range(1, n):\r\n    ans += min(deque(), k-1)\r\nprint(ans)"}, "288": {"problem_id": 288, "answer": "n = int(input())\nA = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += A[i]\nprint(s)"}, "289": {"problem_id": 289, "answer": "from collections import deque\ns = input().strip()\nn = len(s)\nfor i in range(1, n):\n    if s[i] == '(':\n        print(0)\n    elif s[i] == ')':\n        continue\n    else:\n        s[i] = 'V'\n        n -= 1\n        if s[i] == 'K':\n            continue\n        else:\n            s[i] = 'K'\n            n -= 1\n            if s[i] == 'K' and len(s) > 1:\n                s.pop()\n                n -= 1\n"}, "290": {"problem_id": 290, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"Input file must be read-only.\")\ndef main():\n    n = int(input())\n    print(n*2 + n)\n\nmain()\n\n"}, "291": {"problem_id": 291, "answer": "import sys\nreadline = sys.stdin.readline #raise Not a space\ninput = lambda: readline().rstrip(\"\\n\")\n\na, b = map(int.__mul__, range(0, b))\nprint(a * b)\n"}, "292": {"problem_id": 292, "answer": "import sys\ninput = sys.stdin.readline().rstrip() #\u6587\u5b57\u5217\u51b2\u7a81\u306e\u9577\u3055\ndef main():\n    h, n = list(map(int, input().split()))\n    if n == 0:\n        return 0\n    for _ in range(2**h):\n        print(n-1)\n        x = int(''.join(map(str, list(zip(*x))))[::-1])\n        y = int(''.join(map(str, list(zip(*y))))[::-1])\n        print(len(x) - 1 - y)\n        print(len(x) + 1 - y)\n        if x == 'L':\n            x = 'L\\n'\n        elif x == 'R':\n            x = 'R\\ne{}RL\\n'\n        else:\n            x = 'LRL\\n'\n        print(x)\n        if x == 'L':\n            x = 'go to the left child of the current node'\n        elif x == 'R':\n            x = 'go to the right child of the current node'\n        else:\n            x = 'R\\ne{}RL\\n'\n        print(x)\n        if x == 'L':\n            x = 'go to the left child of the current node'\n        elif x == 'R':\n            x ='reversed.left'\n        else:\n            x ='reversed.right'\n        print(x)\n        if x == 'L':\n            x = 'go to the right child of the current node'\n        elif x == 'R':\n            x = 'go to the left child of the current node'\n        else:\n            x = 'R\\ne{}RL\\n'\n        print(x)\n        if x == 'L':\n            x = 'go to the left child of the current node'\n        elif x == 'R':\n            x = 'go to the right child of the current node'\n        else:\n            x = 'R\\nexclinj.left'\n        print(x)\n        if x == 'L':\n            x = 'go to the left child of the current node'\n        elif x == 'R':\n            x = 'go to the right child of the current node'\n        else:\n            x = 'R\\nexclinj.right'\n        print(x)\n        if x == 'L':\n            x = 'go to the left child of the current node'\n        elif x == 'R':\n            x = 'go to the right child of the current node'\n        else:\n   "}, "293": {"problem_id": 293, "answer": "from sys import stdin as sint\r\ninput = stdin.readline\r\nn, m = map(int, sint(input()))\r\nfor _ in range(n):\r\n    s = list(map(int, input().split(' ')))\r\n    print(min(sorted(set(s), key=lambda x: x[1])))"}, "294": {"problem_id": 294, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    if a.count(31) == 1:\n    elif a[0] - a[1] == 31:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n"}, "295": {"problem_id": 295, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\n\nfor i in range(1, n):\n    b.append(a[i] / b[i-1])\nprint('YES' if len(b) else 'NO\\n')"}, "296": {"problem_id": 296, "answer": "from collections import deque, defaultdict, namedtuple, itertools\nn = int(input())\nA = namedtuple('A',['r' for _ in range(n) ])\nB = namedtuples('B',['r' for _ in range(n) ])\nc = defaultdict(list)\nfor i,(a,b) in enumerate(zip(A,B)):\n    c[i].append(str(a+b))\n    c[b].append(str(a+b))\nd = {0:[]}\nd['r']:\n    for i in range(len(A)):\n        d[A[i]] = i+1\n        d['r'].extend(d['A'][i])\nprint(min(d.values()))"}, "297": {"problem_id": 297, "answer": "import sys,heapq \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn, m, k = map(int, input().split())\ns = [0] * (n + 2)\nfor i in range(3):\n    x, y = map(int, input().split())\n    s[x] = min(m, k * (n + 1) // x)\n    s.append(x + 1)\nprint('YES' if s[0] == 1 else 'NO')"}, "298": {"problem_id": 298, "answer": "from collections import deque  # \u6570\u5b57\u306e\u3068\u304d\u306f\u305d\u306e\u307e\u3068\u3081\u3066\u304a\u3059\u3079/\ufffd\u2217^\u3068\u3000\u304a\u3088\u3046\u53c2\u8003\u3060\u3051\u3068\u3044\u3051\u306a\ufffd\u304b\u3063\u3057\uff01\uff01\nn, k = map(int, input().split())\nl = list(map(tuple, input().split()))\nl.sort(reverse=True)\ns = 0\nfor i in range(1, k):\n    if l[i] == 0:\n      print(\"NO\")\n    elif l[i] < l[i-1]:\n      s += 1\nprint(\"YES\\n\")"}, "299": {"problem_id": 299, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\nb = list(map(int, readline().split(' ')))\nif n==1:\n  print('back')\nelif n==2:\n  print('biceps')\nelse:\n  print('helper')\n"}, "300": {"problem_id": 300, "answer": "from sys import stdin as sint\ninput = stdin.readline\nn = int(''.join(map(str, input().split())))\nprint(min(5, int(n**.5) + 1))"}, "301": {"problem_id": 301, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: list(map(int,readline().strip('\\n')))\ninp = lambda: map(inp,open(0).readline())\ninput = lambda: sys.maxsize\nfrom collections import defaultdict as dd, deque\n\n\nclass SeishtonDijkans\u00e4tze():\n    \"\"\" O(nlogn)\n    S(n) = O(nlogn)\n\"\"\")\n    def __init__(self, n):\n        self.n = n\n        self.d = dd(n)\n        self.l = len(self.d)\n        self.s = 0\n        self.s2 = 0x7FFFFFFF\n        self.s2_l = 0xFFFFFFFF\n        self.s2_r = 0xFFFFFFFF\n        self.s2_r2 = 0xe2FFFF\n        self.s2_l2 = 0xFFFFFFFF\n        self.s2_r2_l = 0xFFFFFFFF\n        self.s2_r2_r = 0xe2FFFF\n        self.s2_l2_l = 0xFFFFFFFF\n        self.s2_r2_r_l = 0xe2FFFF\n        self.s2_r2_r_r = 0xe2FFFF\n        self.s2_r2_r_s = 0xFFFFFFFF\n        self.s2_r2_r_s2 = 0xFFFFFFFF\n        self.s2_r2_r_s2_l = 0xFFFFFFFF\n        self.s2_r2_r_s2_r = 0xFFFFFFFF\n        self.s2_r2_r_s2_s = 0xFFFFFFFF\n\n    def d(self, n):\n        if n == 0: raise ValueError()\n        self.d[n] = self.s\n        return self.d[n]\n\n    def s(self, n):\n        if n == 0: raise ValueErr(str(n) +'')\n        self.s += self.s2\n        return self.s2\n        \n    def l(self, n):\n        if n == 0: raise ValueErr(str(n) +'')\n        self.l += self.l2\n        return self.l2\n        \n    def r(self, n):\n        if n == 0: raise ValueError(f'Error: {self.n}')\n        self.r += self.r2\n        return self.r2\n        \n    def d(self, n):\n        if n == 0: raise ValueError()\n        self.d[n] = self.s\n        return self.s2\n        \n    def s(self, n):\n        if n == 0: raise ValueError()\n        self.s += self.s2\n        return self.s2\n        \n    def r(self, n):\n        if n == 0: raise ValueError()\n        self.r += self.r2\n        return self.r2\n        \n    def l(self,"}, "302": {"problem_id": 302, "answer": "n = int(input())\nl = list(map(int, input().split()))\nprint(n-l[0]//2)\n"}, "303": {"problem_id": 303, "answer": "import sys\nsys.setrecursionlimit(10**6)\nintmain(int) :\n    return 0\n\nINF = 10**18\n\ndef main():\n    x, y, z = map(int, input().split())\n    if z == 0:\n        print(\"NO\")\n    elif z == 1:\n        print(\"YES\\n\").endswith(x)\n    else:\n        #print(frozensebroo, max_cant_beggar)\n        #print(frozensebroo, max_cant_beggar)\n        for i in range(2, int(z**0.5) + 1):\n            if x % i == 0:\n                x //= i\n                z //= i\n            else:\n                break\n        print(\"YES\\n\".join(map(str, z)))\n"}, "304": {"problem_id": 304, "answer": "from sys import setrecursionlimit as SRL,sys,collections.Counter import CNTAction\nsetrecursionlimit(10**5)\n#setrecursionlimit(10**8)\nn = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    ans += a[i]*(1-a[i+1])\nprint(ans)"}, "305": {"problem_id": 305, "answer": "from math import ceil, floor\n\n\ndef main():\n    a, b, c, d = list(map(int, input().split()))\n    for i in range(a, b + 1):\n        c += 2*ceil(d)\n    print(min(c, d))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "306": {"problem_id": 306, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int('1'+\"9'*(int(input())-1))\nans = 0\nfor i in range(n):\n    ans += int(input())\nprint(ans)"}, "307": {"problem_id": 307, "answer": "import sys,bisect \ndef input():\n\treturn sys.stdin.readline()[:-1]\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split(' ')))\nc = [0]*2\nfor i in range(n):\n\tc[b[i]] += 1\nans = 0\nfor i in range(1,len(a)):\n\tans += a.pop()\nprint(ans)\n"}, "308": {"problem_id": 308, "answer": "import bisect as b\ndef main():\n    n, x, y, c = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(b.bisect_left(x, y) - b.bisect_right(x, y-1))\n    else:\n        print(b.bisect_left(x, y) - b.bisect_right(x, y-1))\nmain()"}, "309": {"problem_id": 309, "answer": "import itertools as it\r\ndef __starting_point():\r\n    l, r = list(map(int, input().split()))\r\n    print(r)\n\n\n__starting_point()"}, "310": {"problem_id": 310, "answer": "import bisect as bi\ndef dijkstra(n, k):\n    d = {}\n    for i in range(n):\n        d[i] = list(map(int, input().split()))\n    ans = 0\n    for i in range(2 * n + 1):\n        ans += bi.bisect_left(d.get(i) - 1, d.get(k - 1) + 1)\n    return ans\ndef dijkstra2(n, k):\n    d = {}\n    for i in range(n):\n        d[i] = list(map(int, input().split()))\n    ans = 0\n    for i in reversed(zip_sep(range(n), range(1, n + 1)):):\n        ans += bi.bisect_left(d.get(i) - 1, d.get(k - 1) + 1)\n    return ans\ndef main():\n    n, k = list(map(int, input().split()))\n    d = {i:list(set(map(int, input().split()))) for i in range(n)}\n    print(dijstra(n, k))\ndef __starting_point():\n    main()\n__starting_point()"}, "311": {"problem_id": 311, "answer": "from collections import deque\ndef main():\n    x, y, z, t1, t2, t3 = list(map(int, input().split()))\n    if x > y:\n     print('YES')\n    else:\n     print('NO\\n'.join(map(str, x+t1)))\nmain()"}, "312": {"problem_id": 312, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\n\nn, m = map(int, input().split(\" \"))\ns = list(map(int, input().split( \". \")))\nd = [-1]*n\nfor i in range(n):\n    d[i] = m-i\nans = 0.0\nfor i in reversed(s):\n    ans = min(ans, d.get(i, 0))\nprint(ans)"}, "313": {"problem_id": 313, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n    A.append(int(''.join(A)))\nprint(2**n - 2)"}, "314": {"problem_id": 314, "answer": "from bisect import bisect_left as bl\nn, k = map(int, input().split())\na = list(map(int.__add__, a))\nb = sorted(a, reverse=True).tolist()\nprint(n - k)"}, "315": {"problem_id": 315, "answer": "from bisect import bisect_left as bl\nfrom itertools import permutations as p\nn, k = map(int, input().split())\na = list(map(int, input().split()))\np = [[] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    p.append(bisect_left(a[i], i) - 1)\n\ndef dfs(cur, i):\n    if cur == 0:\n        return 1\n    elif cur == 1:\n        return 0\n    else:\n        return max(dfs(cur - 1, i), dfs(cur, i + 1))\n\n# print(p)\n# print(a)\nans = 0\nfor i in reversed(list(range(1, n + 1))):\n    ans += dfs(i, 0)\n    ans //= 3\nprint(ans)"}, "316": {"problem_id": 316, "answer": "from itertools import combinations as C\r\ndef gcd(a, b):\r\n    return a // b\r\nn = int(input())\r\ngrid = [[] for i in range(n)]\r\nfor i in range(n-2, -1, -1):\r\n    grid.append(list(C(i*i).count(gcd(i, i))) for i in range(n))\r\nprint(len(grid))\r\n"}, "317": {"problem_id": 317, "answer": "import sys\r\ndef input():\r\n\treturn sys.stdin.readline().rstrip()[:-1]\r\nn = int(input())\r\ns = list(map(str, input().split(' ')))\r\nprint('NO' if s.count(' ')==0 else 'YES\\n'+' '.join(reversed(s[::-1])))"}, "318": {"problem_id": 318, "answer": "import sys,heapq as h\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n# input = lambda: sys.maxsize(input())\r\n# h.fill(0)\r\n# sys.setrecursionlimit(10**6)\r\n# def dfs(node,ans):\r\n#     nonlocal input\r\n#     if ans < 2147483647:\r\n#         print(\"Error\")\r\n#     else:\r\n#         ans += 1\r\n#     return ans\r\nn = int(input())\r\nprint(f'Time: {n} h{min(n,60)} min(h)')"}, "319": {"problem_id": 319, "answer": "import sys,collections as cl\r\nn, = list(map(int, sys.stdin.readline().split('\\n')))\r\nA = [[] for i in range(n) for j in range(0,len(A))]\r\ndef main():\r\n    n, m = list(map(int, sys.stdin.readline().split('\\n')))\r\n  print('\\n'.join(map(tuple, A)))\r\nmain()\r\n"}, "320": {"problem_id": 320, "answer": "import sys\ninput = sys.stdin.readline.strip()\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(' ')))\n#print(x, y)\nfor i in range(2, n):\n    print(x[i] + y.count(x[i]))\n"}, "321": {"problem_id": 321, "answer": "from math import sqrt as S\nfor _ in range(int('1' + '1' * int(input()))):\n    a, b = map(int.__mul__, input().split())\n    print(S(a + b) * sqrt(b))"}, "322": {"problem_id": 322, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int(''.join(input()))\r\npoints = []\r\nfor i in range(n):\r\n    x, y = map(int, input().split(\" \"))\r\n    points.append(x)\r\npoints.sort(key=lambda x: x[0])\r\nprint(\"Yes\" if len(points) > 2 else \"No\")"}, "323": {"problem_id": 323, "answer": "import sys,heapq  #nCr under 100% is O(N)  sys.stdin = open('in.txt', 'r')  #nCr under 100% is O(N)  sys.stdin = open('in.txt', 'r').readline  #O(1) time complexity O(N) Space complexity O(N)                                                                                                                                                                                                                                      [1,2,3,4]\n\nA, B = list(map(int, sys.stdin.readline().split()))\nc = A*B\n#r = int(sys.stdin.readline())\n#r.fillnaud(c)\nn, m = 0, 0\nfor i in range(n):\n    x = A*B\n    y = A*B\n    while True:\n        x = max(x, y)\n        y = min(x, y)\n        if x > y:\n            break\n        m += 1\nprint(m)\n"}, "324": {"problem_id": 324, "answer": "from sys import*\ninput = stdin.readline\nn = int(input())\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    print(a-b)"}, "325": {"problem_id": 325, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. E.g.:\nN, M = list(map(int, input().split()))\nedges = [[] for i in range(N)]\nfor i in range(M):\n  edges.append([0]*N)\nedge = [[] for i in reversed(list(map(int, input().split())))]\nfor i in range(N):\n  x, y, z = list(map(int, input().split(' ')))\n  edges[x-1].append((y, z))\n  edges[y-1].append((x, z))\n  edges[z-1].append((x, y))\ndp = [-float(\"inf\")] * N\ndp[0] = 0\nanswers = [-1] * N\nwhile answers[ANSWER]!= -1:\n  ans = answers[ANSWER]\n  if ans >= 0.5:\n    print(answers[ans])\n  elif ans == 0.5:\n    print(-1)\n  else:\n    print(answers[ans])"}, "326": {"problem_id": 326, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef input(): return readline().rstrip()\ndef read_int(): return int(readline())\ndef read_int2d(n, val): return [val] * n\nsys.setrecursionlimit(10**6)\ninput()\nN = read_int()\nS = list(map(int, read_int2d(N, 0)))\ncumsum = 0.5e-10\nfor i in range(N):\n    cumsum += cumsum * (cumsum + 1)\nprint(min(cumsum, sum(map(list, zip(S.split(\" \"))))))"}, "327": {"problem_id": 327, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn, k = list(map(int, input().split()))\r\nl = list(map(int.__mul__, input().split('0')))\r\nx = [0] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    x[i] = int(\"\".join(l), 16)\r\n    if k > i:\r\n        x.append(i)\r\n\r\n# print(x)\r\nt = 0\r\nfor i in range(2, n + 1):\r\n    t ^= x[i]\r\n    t |= 1 << (ord('a') - ord('a'))\r\nprint(t)"}, "328": {"problem_id": 328, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(readline)\ndef main():\n    n = int(input())\n    a = [[] for i in range(n)]\n    for i in reversed(list(map(int, input().split()))):\n        x, y = map(int, input().split())\n        a[x].append(y)\n        a[y].append(x)\n    print((min(n, len(a)))//2)\nmain()"}, "329": {"problem_id": 329, "answer": "s = input()\nn = len(s.split())\nm = 10**9 + 7\nfor i in range(n):\n    m = max(m, n - i)\nprint(m)"}, "330": {"problem_id": 330, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip()\ninput = lambda: sys.stdin.readline('\\r\\n')\n"}, "331": {"problem_id": 331, "answer": "import sys,bisect,bytes2,re,heapq,collections,itertools,os,socket\r\ndef main():\r\n    n,m,k=map(int,input().split())\r\n    print(bisect.bispeaks(m,n))\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "332": {"problem_id": 332, "answer": ""}, "333": {"problem_id": 333, "answer": "import itertools\ndef is_duplicate(s):\n    try:\n    except ValueError:\n        return False\n    try:\n        return s.isdigit()\n    except AttributeErrare(s):\n        return False\n\ndef __starting_point():\n    input = itertools.cycle(map(int, input().split()))\n    print(is_duplicate(input()))\n__starting_point()"}, "334": {"problem_id": 334, "answer": "from math import sqrt as sqrt\r\na,b = list(map(int,input().split()))\r\nc,d = list(map(int,input().split(' ')))\r\nprint('%.2f' % a)\r\nprint('%.2f' % b)\r\nprint('%.2f' % a+'%.2f' % c)\r\nprint(' '.join(map(str,c))+' '.join(map(str,d[1:])))\r\n"}, "335": {"problem_id": 335, "answer": "from sys import enp, stderr; n = int(input())\nfor i in range(n):\n    a = input().strip('3\\n'\n    b = input().strip('3\\n')\n    c = list(map(int, str(a).split(' ')))\n    print(a + b + c)\n"}, "336": {"problem_id": 336, "answer": "# cook your dish here - your code will run in OEIS for n=1 to n=100000 and n=1 to n=3000000\n\n\nimport sys\nreadline = sys.stdin.readline\n\nn, = list(map(int, readline().split()))\n\ndef solve():\n    ans = [0]\n    for i in range(1, n):\n        ans.append(sum(map(int, readline().split())) - ans[-1])\n    return ans\n\nprint('\\n'.join(map(solve, list(itertools.combinations(range(1e5), n)), zip(itertools.combinations(range(1e5), n)), list(iterticaly.heappop(1000000))))))\n"}, "337": {"problem_id": 337, "answer": "from bisect import bisect_left as bl\nfrom heapbrs import heappush as h\ndef nCr(n,r):\n    if r<n:\n        return 0\n    elif r==n:\n        return r\n    else:\n        return max(cr(n-1,r),cr(n-1,r-1))\nnCr(n,r)\nprint(' '.join(map(str,list(map(nCr,list(map(int,.3e8)))))))"}, "338": {"problem_id": 338, "answer": "import bisect as b\ndef main():\n    m = int(input())\n    c = list(map(int, input().split()))\n    x, y = sorted(c, key=lambda x: x[1])\n    print(bisect.bisect_right(x, y) - b.binary_search_binary_search(x, y))\nmain()\n"}, "339": {"problem_id": 339, "answer": "n = int(input())\nk = int(1e9+7)\na, b = list(map(int, input().split()))\nprint(min(a, b))"}, "340": {"problem_id": 340, "answer": "from bisect import bisect_left as bl\nn = int(input())\nfor i in range(n):\n    x = list(map(int, input().split(' ')))\n    print(bl(x, i+1).next((i+1)//2))"}, "341": {"problem_id": 341, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"Input must be <= STDIN\")\nclass R:\n    def __init__(self, n, s, p, d):\n      self.r = list(map(int, s.split(' ')))\n     self.s = list(map(int, s.split('\\n')))\n    def __str__(self):\n      return f'R:{self.r[self.s[0] :]}\\n'\nclass Scissors(object):\n    \"\"\"\u6839\u754c\u5b57\u7b26\u4e32\u7b80\u5355\u8c03\u9012\u63a2\u90bf\u90e8\u5230\u53c2\u6570\u91cc\u9762\"\"\"\n    @staticmethod\n    def __lt__(self, x):\n      return self.s[x] < self.r[x]\n    def __radd(self, x, y):\n      x += self.s[y]\n      y += self.r[x]\n      return self.s[x] + self.r[y]\nclass Paper(object):\n    \"\"\"\u533a\u9593\u52a0\ufffdPickup\u5f35\u5feb\"\"\"\n    def __init__(self, x, y):\n      self.x = x\n      self.y = y\n      self.p = -1\n      self.scissor = False\n      self.reversed = False\n      self.scissor = 0\n      for i in range(len(self.x) - 1, -1, -1):\n        if self.x[i] == x:\n        elif self.x[i] > x:\n          self.reversed |= (1 << i)\n        else:\n          self.reversed |= (1 << self.x[i])\n        # print(self.x)\n        # print(self.y)\n        self.p = x\n        self.scissor = i\n        # print(self.p)\n        # print(self.scissor)\n         \n    @staticmethod\n    def __lt__(self, x):\n      return self.x < self.y\nclass R():\n    def __init__(self, n, s, p, d):\n      self.r[n] = s\n      self.s[n] = p\n      self.p = -1\n      self.scissor = False\n      self.reversed = False\n      for i in reversed(list(range(n))):\n        if i not in self.r:\n          self.r[i] = s\n          self.s[i] = p\n          self.reversed |= (1 << i)\n        else:\n          self.reversed |= (1 << self.s[i])\n        # print(self.s)\n        # print(self.p)\n         \n    @lru_cache(None)\n    def dfs(self, i):\n      if i == len(self.r):\n        return 0\n      elif self.r[i] == self.s[i]:\n        return self.s[i] + self.p\n      else:\n        return self.s[i"}, "342": {"problem_id": 342, "answer": "from bisect import bisect_right as br\n\n\ndef main():\n    a, b, c = list(map(int, input().split()))\n    for i in range(a, b + 1):\n        print(str.isalnum() + \" \" + str.isdigit())\n    print()\n\nmain()\n"}, "343": {"problem_id": 343, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split('\\n')))\n\nn, k, p, x, y = int(readline().split(', '), 1), [1, 3, 4, 5], [0, 0] * k, [0] * k\n\nM = 10**9 + 7\ndef mx(a):\n    \"\"\"\u7b2c\u4e8c\u4e2a\u51fd\u6570.\"\"\"\n    return a[k] - mx(a[k-1])\n\nM = 10**9 + 7\ndef lcm(a, b):\n    \"\"\"\u4e0a\u9762\u6545\u957f\u5ea6.\"\"\"\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\nprint((lcm(M, M)))\nprint((lcm(M, M - Mx(M)))[::-1]))\n"}, "344": {"problem_id": 344, "answer": "s = input()\nif 'a' in s: print('YES')\nelif 'o' in s: print('NO').swapchr(s.replace('n', 'o').swapchr(s.replace('n', 'o'))); else: print('\\n'.join(map(str, s.split(' '))))\nelse: print('NO')"}, "345": {"problem_id": 345, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\n\ng = [[] for _ in range(n)]\ng[0].append(0)\n\ndic = {}\ndef dfs(x):\n    if x not in dic:\n        dic[x] = []\n    for i in range(1, n+1):\n        x = x + dic[x]\n        if x not in dic[x]:\n            dic[x].append(i)\n        else:\n            dic[x] = []\n    return dic\n\nfor i in range(m):\n    x = list(map(int, input().split(' ')))\n    g[x].append(i)\n\nans = 0\nfor i in range(n):\n    ans ^= 1 << int(i)\nprint(ans)\n"}, "346": {"problem_id": 346, "answer": "import sys\ninput = sys.stdin.readline().rstrip() #Read data and output\nn, = list(map(int, input().split()))\nm = list(map(int, input().split(' ')))\n#print(n, m)\ndp = [-float(\"inf\")]*n\nfor i in range(1, n):\n    dp[i] = float('INF')\n    if dp[i] == float('INF'):\n        continue\n    elif dp.count(dp[i]) > m:\n        m = dp[i]\nprint('\\n'.join(map(str, dp)))\n"}, "347": {"problem_id": 347, "answer": "import sys\nreadline = sys.stdin.readline\nm = int(readline())\nw = list(map(int, input().split()))\nn = len(w)\nif n==1:\n    print(0.3)\nelif n==2:\n    print(0.50000000000)\nelse:\n    for i in range(3,int(w[0])+1,2):\n        w.insert(0,w[i])\n        if w[i]!=w[i-1] and i!=i-1:\n            print(w[i],end=\" \")\n        else:\n            print(w[i],\"\")\n    print(m)"}, "348": {"problem_id": 348, "answer": "MOD = 998244353\ndef main():\n    n, m, L, R = list(map(int, input().split()))\n    grid = [[] for _ in range(n)]\n    for i in range(1, n + 1):\n        grid.append([0] * m)\n    for i in range(2, n + 1):\n        for j in range(m, 0, -1):\n            grid[i][j] = grid[i - 1][j - 1] + grid[i][j - 2]\n    print(sum(grid[i][0] for i in range(1, n + 1) if i % 2 == 0)))\n\n\nmain()\n"}, "349": {"problem_id": 349, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nn, = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    #a.sort()\n    #b.sort()\n    d = [[] for _ in range(n)]\n    for j in range(n):\n        d[j].append(a[j] - b[j])\n        d[j].append(a[j] - b[j])\nprint('\\n'.join(map(str, d[1:])))\n"}, "350": {"problem_id": 350, "answer": "import sys,bisect \nfrom heapq import heappop,heappush as heapify,heappushpop as heappush,insort as insort,queue,dic\n\n\ndef main():\n    n = int(''.join(map(str,sys.stdin.readline().split()))[1:])\n    a = input()\n    for i in range(n):\n        print(insort(a[i],'a'))\n"}, "351": {"problem_id": 351, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush,heappop\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()[1:]))\ns = sorted(a, key=lambda x: x[1])\nfor i in range(len(b)):\n    print(bisect_left(s[i], k) - d)"}, "352": {"problem_id": 352, "answer": "n = int(input())\nm, max_1 = [1]*n, [1]*n\nfor i in range(2, n):\n    m.append(min(m[-1], max_1))\nans = []\nfor i in range(1, n):\n    ans.extend([i]*(max_1-1))\nprint(*ans, sep=\"\\n\")\n"}, "353": {"problem_id": 353, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split('0123456789.\\033[68m')]\n          .split('0123456789.\\033[68m')] for x in reversed(blenghand.split('.')))\n          .split('0123456789.\\033[68m')]\n\nprint(('DOWN' if len(a) == 1 else 'UP'))\n"}, "354": {"problem_id": 354, "answer": "s = input()\nt = input().translate(s)\nprint('Yes\\n' if s.count('a')%2!=t.count('i')%2 else 'No')"}, "355": {"problem_id": 355, "answer": "from bisect import bisect_left, bisect_right\ninput()\ns = list(map(int, input().split(' ')))\nl, r = 0, len(s) - 1\nfor i in range(l):\n    if s[i] == 'W':\n        r -= 1\n    else:\n        s.pop(i)\n        break\nprint('A' if s[r] == 'B' else 'B')"}, "356": {"problem_id": 356, "answer": "from itertools import combinations as C\r\nn = int(input())\r\nA = list(map(int, input().split()))[:n]\r\nm = int('1e9+'+str(A.count('1')))\r\ns = sorted(list, key=lambda x:x[1])\r\nprint(max(m-len(A), end=\" \"))"}, "357": {"problem_id": 357, "answer": "import sys,bisect in ofs\ninput = lambda: list(map(int,sys.stdin.readline().split('\\n')))\ndef main():\n    l = len(input())\n    print(\"NO\")\n    return\ndef __starting_point():\n    main()\n__starting_point()"}, "358": {"problem_id": 358, "answer": "import bisect, copy  # https://atciron-a.yelp.com/contest/455/Yelpa for C++ and Kotlin\nn = int(input())\na, b, k = map(int, input().split(' '))\nif a == b:\n    print(-1)\nelif a == 0:\n    print(a)\nelse:\n    for i in range(1, len(a) + 1):\n        if a[i] % 2 == 0:\n            print(i + 1)\n            break\n    else:\n        print(-1)"}, "359": {"problem_id": 359, "answer": "from sys import stdin as sintin\ninput = stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,.5,.5)).tolist()\ndef LLI(rows,cols): return [LI() for _ in range(rows)]\ndef SI(): return input()[:-1]\n\n# A = [[] for i in range(100000)]\n# A.append(II())\na, h, w = MI()\nfor i in range(len(a)):\n    x = a[i]\n    y = min(x, h)\n    a[i] = y\n\nprint('\\n'.join(map(str, a)))\n"}, "360": {"problem_id": 360, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\nk = int(input())\nfor i in range(k):\n    l.insert(0, i)\n    print(bisect_left(l, k) - 1)"}, "361": {"problem_id": 361, "answer": "from collections import deque\ndef split(flags):\n    flag = 0\n    for f in flags:\n        if f.lower() in 'EOR' and len(flags) > 1:\n        elif f.islower():\n            flag |= 1\n        else:\n            flag ^= 1\n    return flag\n\ndef main():\n    tokens = input().strip()\n    tokens.insert(0,'')\n    print(split(tokens))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "362": {"problem_id": 362, "answer": "from bisect import bisect_left as bl, insort as br, bisect_right as br, bisect_left as bl, insort as br, insperseASE as se;\nn = int(input())\nl = list(map(int, input().split()))\ns = [[] for i in range(n)]\nfor i in reversed(list(range(1, n))):\n    s.append(bisect_left(l[i], i) + bl)\n    s.append(bisect_right(l[i], i) + br)\nl.sort(reverse=True)\nprint(len(l))\nprint('\\n'.join(map(str, l)))"}, "363": {"problem_id": 363, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')[:-1]\n\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.append(list(''.join(l)))\nprint(sum(l))\n"}, "364": {"problem_id": 364, "answer": "import sys,bisect in for loop in mapreduce(int.__add__,sys.stdin.readline())\ndef __starting_point():\n    n,a,b=map.next_rows()\n    print('colors'[bisect(b,a)<=n],'run_color',b)\n__starting_point()"}, "365": {"problem_id": 365, "answer": "from functools import lru_cache\r\nn,x=map(int,input().split())\r\nif n==1:\r\n    print(\"NO\")\r\nelif x==1:\r\n    print(\"1\\n\")\r\nelse:\r\n    for i in range(2,n+1):\r\n        if input()==\" \":\r\n            print(\" \"*i)\r\n            break\r\n    print(\"YES\")"}, "366": {"problem_id": 366, "answer": "from sys import stdin\ninput = stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'l')).rstrip('0')\ndef LI_(): return list(map(int,'l'))\ndef LS(): return [input() for _ in range(1000000)]\ndef LS_(): return [input() for _ in range(1000000)]\ndef S(): return input()\ndef S_(): return input()\n#-------------------Problem-----\nif __import__('fpml').mode < 3:\n    II()\neliminate(2)\n#-------------------Problem-----\nif __name__ == '__main__':\n    main()\n"}, "367": {"problem_id": 367, "answer": "s = input()\nn = len(s)\nif s[0]!= 'a'*(n-1):\n    print('ababc')\nelif s[0]!= 'a'*(n-1):\n    print('aaabcd').swapcase()\nelse:\n    print('abcba')\n"}, "368": {"problem_id": 368, "answer": "import heapq\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split(' ')))\n    \n    # A.sort()\n    # B.sort()\n    q = []\n    for i in range(N):\n        q.append(A[i])\n    \n    # heapq.heapify(q)\n    heapq.nsmallest(0, 0, N-1)\n    heapq.merge(q)\n    print('Draw\\n'.join(map(str, q)))\nmain()\n"}, "369": {"problem_id": 369, "answer": "from bisect import *\r\nN, M = list(map(int, input().split()))\r\nS = list('1'*N + 1)\r\nif S == '0':\r\n    print(-1)\r\neliminate(S)\r\nN = len(S)\r\nS.insert(N-1, 0)\r\nM = int(N+1)\r\nd = {}\r\nfor i, s in enumerate(S):\r\n    d[s] = 1\r\n    if s == 0:\r\n        d[s] += 1\r\n    else:\r\n        d[s] = -1\r\n\r\ndef main():\r\n    S = input()\r\n    d = {}\r\n    for i, s in enumerate(S):\r\n        if S[i] == '1':\r\n            d.setdefault(s, []).append(i)\r\n        else:\r\n            d[s] = -1\r\n    print((d.get(S))[0])\r\nmain()\r\n"}, "370": {"problem_id": 370, "answer": "from bisect import *\r\n\r\ndef dfs(A, B):\r\n    x, y = A.x, B.x\r\n    return 0 if x == 0 else (x - y)\r\n\r\nK = int(input().strip(\"\\n\"))\r\nX = list(map(int, input().strip().split()[1:])).pop(0)\r\n\r\ns = []\r\nfor i in range(K):\r\n    x, y = map(int, input().strip().split())\r\n    s.append(dfs(A, x) - dfs(A, y))\r\nprint('\\n'.join(s))"}, "371": {"problem_id": 371, "answer": "from itertools import accumulate\ndef main():\n    m = int(input())\n    for _ in range(m):\n        print(int(''.join(map(str, list(accumulate(x).split(' '))))), end=\"\\n\")\n\nmain()\n"}, "372": {"problem_id": 372, "answer": "import math\ndef main():\n n = int(input())\n for i in range(n):\n  x, y, r = map(int, input().split(' '))\n  print(math.floor(math.sqrt(x)))\n"}, "373": {"problem_id": 373, "answer": "from functools import lru_cache\r\nn = int(input())\r\nif n%2:\r\n    print(1+n)\r\nelif n==1:\r\n    print(1+n)\r\nelse:\r\n    for i in range(2,n+1):\r\n        if i%2!=0:\r\n            print(i,end=\" \")\r\n        else:\r\n            print(i,end=\"\\n\")\r\n    print('\\n'.join(map(str,list(map(str,range(n))))))"}, "374": {"problem_id": 374, "answer": "import sys\nreadline = sys.stdin.readline #raise Not a space\ninput = lambda: readline().rstrip('\\n')\nn = int(input())\nl = list(map(int, input().split()))\na = [0]*1000001\nfor i in range(n):\n    a[l[i]] = i\n    l.append(a[i])\n\ndef main():\n    n = int(''.join(map(str, l)), 2)\n    a = sorted(a, key=lambda x: sum(x[1] for x in l[x]))\n    print(len(set(a)))\nmain()"}, "375": {"problem_id": 375, "answer": "import bisect as bi\nn = int(input())\nw = list(map(int, input().split()))\nfor i in range(n):\n    w.insert(0,'a')\n    bisect.insort(w, bi.bisect_left(w, 'a'))\nprint(len(w))"}, "376": {"problem_id": 376, "answer": "import sys\ninput = sys.stdin.readline #included to prevent overwraient input\n \ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        d.append([a[i], i+1])\n    print('\\n'.join(map(str, d)))\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "377": {"problem_id": 377, "answer": "import sys\nreadline = sys.stdin.readline #raise KeyError, because it is a space\nread = lambda: list(map(int, readline().split()))\nn, m = n+1, m+1\nl = [-1]*n\nfor i in range(m):\n    l[i] = int(''.join(x) for x in readline().split())\nprint(l[n])"}, "378": {"problem_id": 378, "answer": "from bisect import linspace, bisect_left \nn = int(input())\nlinspace = [0] * (n + 1)\nfor i in range(1, n + 1):\n    linspace.append(linspace[-1] + int('9' * (i - 1)) % 1000000007)\n    \nans = 10**9\nans //= 10**9\nprint(ans)"}, "379": {"problem_id": 379, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn, m = list(map(int, input().split()))\nA = [list(map(int, input().split())) for i in range(n)]\n# A.extend(A)\ndef find_rectangle(x, y):\n    if x == y:\n        return []\n    else:\n        return [x, y]\n\n# find the square root of a number\ns = 0\nfor i in range(n):\n    s += find_rectangle(i, 0)\nprint('YES\\n'.join(map(str, sorted(A, reverse=True))))\n"}, "380": {"problem_id": 380, "answer": "from itertools import groupby as golang\ndef dijkstra(s):\n    x, y = map(int, s.split())\n    d = {k: [] for k in x}\n    d.extend(golang.from_iterable(d))\n    for i, (j) in enumerate(zip_or_handel):\n        if j == 0:\n            continue\n        else:\n            d[j] |= 1 << i\n    return d\nn = 10**9 + 7\ns = list(map(list, s))\nprint(n)"}, "381": {"problem_id": 381, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef main():\r\n    N = int(''.join(map(str, input().split())))\r\n    \redges = []\r\n    for _ in range(N):\r\n        n, m = list(map(int, input().rsplit()))\r\n        edges.append((n, m))\r\n        \r\n    print('YES\\n'+' '.join(edges))\r\n\r\nmain()\r\n"}, "382": {"problem_id": 382, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn, m, q = list(map(int, input().split()))\r\ns = input()\r\nt = input()\r\nq = int(q)\r\nif q > 0:\r\n    print(0)\r\nelif q > len(s):\r\n    print(s.count('a'))\r\nelse:\r\n    for i in range(q):\r\n        s[i] = s.count('a')\r\n    print(sum(s.count('a')) + 1)"}, "383": {"problem_id": 383, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n') # must end of input string\nMOD = 10**9 + 7\ndef main():\n    n, k, d = map(int, input().split())\n    root = [[] for _ in range(n)]\n    for i in range(1, n):\n        root.append(list(map(int, input().split())))\n    # print(root)\n    for i in range(2, int('1' + '.3f'))[::-1]:\n        if i % k == 0:\n            print(root[i][0] + root[i][1] + root[i][2] + root[i][3] + root[i][4] + root[i][5]) % MOD\n        else:\n            print(root[i][0] + root[i][1] + root[i][2] + root[i][3] + root[i][4] + root[i][5]) % MOD\n"}, "384": {"problem_id": 384, "answer": "n = int(input())\nfor _ in range(n):\n    s = input().strip()\n    l = len(s)\n    d = []\n    for i in range(1,l+1):\n        d.append(s[i])\n    d.extend(\"B\" if i % 2 == 0 else \"W\")\n    d.extend(\"W\" if i % 2 == 1 else \"B\")\nprint(len(d))\n"}, "385": {"problem_id": 385, "answer": "from sys import stdin, stdout\ninput = stdin.readline\nn, m, p = list(map(int, input().split()))\nc = []\nfor i in range(1, n+1):\n    c.append(input())\nc.sort(reverse=True)\nans = 0\nfor i in range(len(c)):\n    ans += int(''.join(map(str, c[i])))\nprint('\\n'.join(ans))\n"}, "386": {"problem_id": 386, "answer": "import math,string,itertools,fractions as f\nn = int(input())\nl = list(map(int,input().split()))\nprint('\\n'.join(l))\n"}, "387": {"problem_id": 387, "answer": "import sys,bisect_left,bisect_right,collections,array,bisect in pprint\nreadline = sys.stdin.readline\nreadline_l = sys.stdin.readopythonolicsuppressword=\"\\n\"\nreadline_r = sys.setrecursionlimit(10**5)\ndef readwrite(mode=int):\n    # mode is int\n    mode = mode.lower()\n    if mode =='s':\n        return 0xffffffff\n    else:\n        return mode\ninput = lambda:list(map(int,input().split()))\ninput()\nprint(len(set(readwrite(0xffffffff))) == len(set(readwritewartelfreakt)))"}, "388": {"problem_id": 388, "answer": "import bisect as bi\ndef main():\n    n, k = list(map(int, input().split()))\n    notes = list(map(chr, input().split(' ')))\n    s = list(input())\n    for i in range(1, n):\n        if notes[i]== 'NO':\n            s.insert(0, i)\n        elif notes[i]== 'YOUR RESOUGHS' and i not in s:\n            s.insert(i, 'Xyzzdj')\n    print(' '.join(s))\ndef __starting_point():\n    main()\n__starting_point()"}, "389": {"problem_id": 389, "answer": "import itertools,bisect\r\ndef __starting_point():\r\n    a,b=map(int,input().split())\r\n    print(bisect.bisect_left(a,b) - bisect.bisect_left(a,b-1))\r\n__starting_point()"}, "390": {"problem_id": 390, "answer": "from bisect import bisect_left as bl\n\n N = int(input())\n A = list(map(int, input().split()))\n B = sorted(A, reverse=True)\n dp = [[0] * (N + 1) for _ in range(N + 1)]\n for i in range(N + 1):\n  dp.append(dp[-1][i] * bl(i, 2) + A[i])\n print(bisect_left(dp[-1][N:], A[N]))\n \n N = int(''.join(map(str, A)))\n print(' '.join(map(str, dp[-1])))"}, "391": {"problem_id": 391, "answer": "import sys,collections as cls\ninput = sys.stdin.readline\nn = int(input())\ncol = cls.collections(collections.defaultdict(list), default=None, end='w')\nprint('\\n'.join(map(str,col[1:])))"}, "392": {"problem_id": 392, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line and don\u00b4t bother checking it for errors\n\ndef main():\n    n = int(readline())\n    print(n ** 0.5)\n\nmain()\n"}, "393": {"problem_id": 393, "answer": "from itertools import takewhile, ispluriyVeryChef as ispluriychef"}, "394": {"problem_id": 394, "answer": "import sys\r\ninput = sys.stdin.readline\redict(\")\\n\"\r\nn = int(\"1\")\r\na = list(map(int, input().split()))[::-1]\r\n#print(a)\r\nfor i in range(n):\r\n    x = input().rstrip('\\n')\r\n    if x[0] == '0':\r\n        print(i, end = \" \")\r\n    else:\r\n        print(i, end = \" \")\r\n"}, "395": {"problem_id": 395, "answer": "from itertools import accumulate\nn = int(input())\nacc = list(map(int, input().split()))\nfor i in range(n):\n    a = accumulate(accumulate(list(map(int.__mul__, range(0, 10**(n-1))))), 0)\n    print('YES' if a >= int(a) else 'NO'.endswith('')"}, "396": {"problem_id": 396, "answer": "import math as mt \r\ndef main(): \r\n    \"\"\" Main function. \"\"\" \r\n    mt.naturallore(MATH.MAX_PRIME) \r\n    mt.naturallore(MATH.MAX_PRIME, 10) \r\n    \r\ndef __starting_point(): \r\n    main()\n\n__starting_point()"}, "397": {"problem_id": 397, "answer": "from sys import stdin,stdout\ninput = stdin.readline\ndef I(): return int(input())\ndef MI(): return list(map(int,input().split()))[0]\ndef LI(): return list(map(int,input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\n#______________________________________________________________________________________________________\n# N^2 + N\n# (1-indexed)\n# M^2 + M\n# (1-indexed)\nclass C(object):\n  __slots__ = (_ \"<object>\", __end__)\n  @classmethod\n  def __init__(self, s): self.s = s\n  @property(non______) class I():\n    def __init__(self, s): self.s = s\n    @property\n    def num(self): self.num = 0\n    @num.setter\n    def num(self, x): self.num += 1\n    @property\n    def siz(self, x): self.siz = x\n    @siz.bit_length() // 2\n    def bit_length(self): return len(bin(self.siz)) - 2\n@BIGII\nclass FenwickPochahedron(FenwickPCahedron):\n  def __init__(self, n):\n    self.p = [0] * n\n    self.p[0] = 1\n  @property\n  def is_periodic(self):\n    return self.p[n - 1] == 0\n  def iteratas(self, i):\n    while i > 0:\n      if i & 1:\n        return self.p[i]\n      i >>= 1\n    else:\n      return i >> 1\n  def addCoord(self, co):\n    co -= 1\n    while co < self.num:\n      co += 1\n    return co\n  def convToLCM(self, l, r):\n    l *= 2\n    r *= 2\n    l >>= 1\n    r >>= 1\n    l >>= 1\n    r >>= 1\n    l += 1\n    l += self.num\n    l += self.siz\n    l += self.siz * (r - l)\n    l += self.siz * (r - l)\n    return l\n  def addBST(self, b, start):\n    while True:\n      if start == b:\n        break\n      start = b\n      b = min(start, b)\n      if b == start:\n      elif b == start:\n      eliffrrease(b, start)\n      else:\n        self.p[start] = 1\n        start = b\n    return self.p[start]\n  def __repr__(self):\n    return''.join('{}: {}'.format(x, self.num) for x in self.convToLCM(self.num) if self.is_periodic())\n"}, "398": {"problem_id": 398, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nprint('YES' if n > 3 else 'NO')"}, "399": {"problem_id": 399, "answer": "from functools import lru_cache\r\nn = input()\r\nx, y = map(int, input().split(' '))\r\nprint('Yes\\n') if x > y else print('No')"}, "400": {"problem_id": 400, "answer": "import bisect\nn, k = map(int, input().split())\na = list(map(int, input().split()))[:n]\nb = []\nfor i in range(10):\n    b.append(bisect.bispehton(a[i], i+1))\nb.sort(reverse=True)\nans = 0.0\nfor i in reversed(b):\n    ans += a[i] * b[i]\nprint(ans)"}, "401": {"problem_id": 401, "answer": "n, m = list(map(int, input().split(' ')))\ns = sorted(list, reverse=True)\nprint('\\n'.join(s))\n\n"}, "402": {"problem_id": 402, "answer": "from bisect import bisect_left,insort \nfrom heapq import heappush,heappop\nimport math as mt = lambda x: math.floor(x**0.5)\nfrom itertools import product,permutations as P\ndef lcm(a,b):\n    return a*b//gcd(a,b)\nn,k = map(int,input().split())\np = list(map(int,input().split()))[::-1]\nl = []\nfor i in range(4,10):\n    l.append(insort(p[i]))\nl.sort(key=lambda x:x[0],4)\nprint(int('{:.9f}'.format(l[-1][0])))"}, "403": {"problem_id": 403, "answer": ""}, "404": {"problem_id": 404, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\ndef main():\n    n = int(''.join(map(str, input().rstrip())))\n    print(n//2)\nmain()"}, "405": {"problem_id": 405, "answer": "import bisect as bins\nn = int(input())\nl = list(map(int, input().split()))\nbins = [bisect.bisect_left(l, 0) for i in range(n)]\nbins.insert(0, 0)\na = []\nfor i in range(n):\n    a.append(bins.pop(bins.pop(0)))\nprint(int(''.join(a)))\n"}, "406": {"problem_id": 406, "answer": "from bisect import bisect_left, bisect_right, insort_left, insort_rlimit as L, I\nfrom heapq import heappush as H, heappop as H, heapify as H, heappushpop as H, heappushrq as H, heappushrqop as H, heappushheappop as H, heappushpopop as H, heappushrqopop as H, heappushheappopop as H, heappushheappushpop as H, heappushheappushpopop as H, heappushheappushrq as H, heappushheappushheap as H, heappolkampextime as EW\nimport sys,time\ninput = sys.stdin.readline\n\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))[:n]\n    print(bisect_left(l, 3) + 1)\n    print(bisect_right(l, 3) + 1)\n# Made By Mostafa. See note at section of his birthday coming up for his 100th year of office operations.\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "407": {"problem_id": 407, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return '\\n'.join(chr(ord('a') + 65) for ch in readline().split())\nn = int(readline())\na = list(map(int, readline().split()))\ns = input()\nfor i in range(1, n):\n    s = s.replace('a', str(i))\nprint(s.count('1'))"}, "408": {"problem_id": 408, "answer": "n, m = map(int, input().split())\nnew = []\nfor i in range(1, n + 1):\n    new.append(list(map(int.__add__, input().split())))\n\nA = new.copy()\nB = new.copy()\n\nprint(A.count(0))"}, "409": {"problem_id": 409, "answer": "import sys\r\ndef main():\r\n \"\"\"Main program.\"\"\"\r\n input() = sys.stdin.readline().rstrip('\\r\\n')\r\n print('YES')\r\n return any(map(str.isalnum, input().split()))\r\n \nmain()"}, "410": {"problem_id": 410, "answer": ""}, "411": {"problem_id": 411, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6)\r\n#setrecurtime(10**9)\r\ndef set(): return [int(x) for x in stdin.readline().split()]\r\nset()\r\n#modifactlinqwithintrcases = lambda x,y: [-1]*10**9 + [x]*10**9\r\nmodifactlinqwithintrcases(10**6)\r\n#modifactlinqwithintrcases(10**9)\r\n"}, "412": {"problem_id": 412, "answer": ""}, "413": {"problem_id": 413, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, m = map(int, readline().split())\n    if n <= m:\n        print(n//m)\n    else:\n        print(m//n)\nmain()"}, "414": {"problem_id": 414, "answer": "import sys\ninput = sys.stdin.readline\n \nn = int(input())\nedges = list(map(int, input().split(' ')))\n \ndef dfs(node, v):\n    if v not in edges:\n      print('NO')\n    elif v==node:\n      print('YES\\n'.join(edges))\n    else:\n      edges.append(v)\n      for nei in edges[node]:\n        if nei not in edges:\n          print('NO')\n          return\n        dfs(nei, v)\n          \n        "}, "415": {"problem_id": 415, "answer": "from math import ceil,sqrt\nn = int(input())\ndos = 0.0\nfor i in range(n):\n    r = list(map(int, input().split()))\n    dos += r.index(max(r[0], r[1]))\nprint(ceil(dos/len(r)))"}, "416": {"problem_id": 416, "answer": "from collections import deque\r\nn, k = input().split()\r\nif n == 'Y':\r\n    print('YES')\r\nelim = len(input())\r\nif k == 0:\r\n    print('\\n'.join(map(str, input().split())))\r\nelse:\r\n    print('\\neaset by {}'.encode('latin','r'))"}, "417": {"problem_id": 417, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    N, X, D = map(int, readline().split())\n    a = list(map(int, readline().split()))\n    s = 0\n    for i in range(N):\n        if a[i] not in s: s.append(a[i])\n        elif a[i] == 0: s.pop()\n        else:\n            a[i] = s[x]\n    print(s[0] - s[1])\nmain()"}, "418": {"problem_id": 418, "answer": "import sys\nn = int(sys.stdin.readline())\nprint('YES' if n%2 else 'NO')"}, "419": {"problem_id": 419, "answer": "import sys,string as sl\ninput = sys.stdin.readline\ns = int(input())\nfor _ in range(s):\n    a = list(map(int,input().split()))\n    l = 0\n    for i in reversed(a):\n        l+=1\n    print(l)"}, "420": {"problem_id": 420, "answer": "import sys\ninput = sys.stdin.readline\ndef MI(): return map(int, input().strip())\ndef LI(): return list(map(int,\"0123456789\")).replace(\"0\", \"\"[1]))\ndef LLI(rows): return [LI() for _ in range(rows)]\nMOD = 10**9 + 7\nN, M = len(inp), len(outp)\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef slove(s, i): return s[i] if i < 0 else slove(s, i+1)\n@lru_cache(maxsize=None)\ndef lru_helper(l, r, cache):\n    if cache[l]!= -1:\n        cache[l] = cache[l] + 1\n    else:\n        cache.add(l)\n    return cache[l]\n\nn, m = MI()\na = slove(a, 0)\nprint(n - a.span()[0] - slove(a, 1))\n"}, "421": {"problem_id": 421, "answer": "import bisect as bi\nn = int(input())\nl, r = list(map(int, input().split()))\nd = []\nfor i in range(n):\n    d.append(l)\nd.sort(reverse=True)\nprint(max(d[0], d[1]))\n"}, "422": {"problem_id": 422, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\ndef main():\n    n, k = list(map(int, input().split()))\n    l = sorted(map(int, input().split(' ')), key=lambda x: x[0])\n    print('YES' if sum(l) > k else 'NO')\n    sys.setrecursionlimit(10**9 + 7)\n    print(' '.join(map(strr, l) for l in list(input())))\nmain()"}, "423": {"problem_id": 423, "answer": "from sys import stdin as st, stdout as fo\nn, k = list(map(int, stdin.readline().split()))\ncoeff = input().strip()\ndef polynomial(x):\n    if x == 0:\n        return x\n    else:\n        po = polynomial(x)\n        if po == -1:\n            return po\n        elif po == 1:\n            return polynomial(x)\n        else:\n            return polynomial(x) + polynomial(x - k)\ncoeff = polynomial(coeff)\nprint('Yes\\n' + str(coeff[0]))\n"}, "424": {"problem_id": 424, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\ndef main():\n    N = int(input())\n    d = dict()\n    for i in range(N):\n        d.setdefault(i, list(map(int, input().split())))\n    ans = N\n    for _ in range(0, 100):\n        ans *= d[N]\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "425": {"problem_id": 425, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = list(readline())\nn, p = map(int, readline().split(' '))\nif n == 0:\n    print(-1)\neliminate(n)\nfor i in range(1, n + 1):\n    x = int('{:0>d}'*(2**i))\n    print(str.maketrans('bacacute', 'bcacure'),\n        f'{x}'.format(x), end=' ')\nelse:\n    print(-1)\n"}, "426": {"problem_id": 426, "answer": "import sys\ninput = sys.stdin.readline\nN, K = int(input())\ns = list(map(int, input().split()))\n# print(s)\n# print(s.pop())\nans = 0\nfor i in range(K):\n    ans += int('0'*(i+1))\n    s.append(chr(ord('a')+i).count('z'))\nprint(ans)"}, "427": {"problem_id": 427, "answer": "import bisect\ndef factors(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                return i\n        return 1\n\ndef primeFactors(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in range(3,n):\n            if n%i==0:\n                return i\n        return 1\n\ndef divisors(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in reversed(enumerate(list(range(1,n+1))):\n            if n%i==0:\n                return i\n        return 1\n\ndef factors2(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n            if n%i==0:\n                return i\n        return 1\n\ndef factors3(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n            if n%i==0:\n                return i\n        return 1\n\ndef factors4(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n            if n%i==0:\n                return i\n        return 1\n\ndef factors5(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n            if n%i!=0:\n                return i\n        return 1\n\ndef factors6(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n            if n%i!=0:\n                return i\n        return 1\n\ndef factors7(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        for i in factors(n):\n   "}, "428": {"problem_id": 428, "answer": "from collections import deque\n\n\ndef main():\n    n, sx, sy, dx, dy = list(map(int, input().split()))\n    fa, fb = {}, {} # Fen is the bear and x is the time spent eating the fruees}.\n    \nimplementation = {\n    0: [3,4]\n    1: [0,3]\n}\ninput()\nt = int(input())\nfor _ in range(t):\n    a, b, c = tuple(map(int, input().split(' ')))\n    if a == b == c:\n        print(0)\n    elif a == 1:\n        print(b - a)\n    else:\n        d = abs(a - b) % n\n        e = abs(a - c) % n\n        f = d % n\n        q = deque()\n        q.append((a, b, c))\n        while q:\n            i, j, k = q.popleft()\n            if i == n - 1 and j == n - 1:\n                break\n            elif i == n - 1 and j == n - 1:\n                q.append((i, j, k))\n            else:\n                e = abs(i - j) % n\n                f.setdefault(e, f.get(e, 0) + k)\n                f.discard(e)\n                break\n        if f.get(e, 0) + k > c:\n            break\n        q.extend(fa[e])\n        q.append((e, fb[e], c))\n        while q:\n            i, j, k = q.popleft()\n            if i == n - 1 and j == n - 1:\n                break\n            elif i == n - 1 and j == n - 1:\n                q.append((i, j, k))\n            else:\n                e = abs(i - j) % n\n                f.setdefault(e, f.get(e, 0) + k)\n                f.discard(e)\n                break\n        if f.isdisjoint(e):\n            q.extend(fa[e])\n            q.append((e, fb[e], c))\n        else:\n            q.clear()\n            q.append((a, b, c))\n        print(abs(a - b) % n)\n    else:\n        print(abs(a - b) % n)"}, "429": {"problem_id": 429, "answer": "from collections import deque,defaultdict\ns = input()\nl = defaultdict(list)\nfor i in range(ord('a'),ord('z')+1):\n    s.insert(i, '?')\n    l[ord(s[i]) - ord('a')].append(i)\nprint(''.join(l.values()))"}, "430": {"problem_id": 430, "answer": "import math,string,itertools,fractions,heapq,collections,re,array,bisect on,sys,random,time,functools \nn = int(input())\na = list(map(int, input().split(' ')))\nprint('YES\\n' if bisect_left(a, n) >= n else 'NO')"}, "431": {"problem_id": 431, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")\nn, m = list(map(int, input().split()))\ns = input()\nl, r = 0, n-1\nfor i in range(1, int('1' + str(l) +'' + str(r))):\n    if s[i-1] == '0x' and l+i-1 >= m:\n    elif s[i-1] == '0x' and r+i-1 >= m:\n    elif s[i-1] == '0x' and l+i-1 < m:\n    else:\n        l = max(l, i-1)\nprint(abs(l) + abs(r))\n"}, "432": {"problem_id": 432, "answer": "from bisect import bisect_left as bl\nfrom heapgrp import heappush as hpp, heappop as heaph\nfrom collections import deque as C\nfrom itertools import product, combinations_with_replacement as productpand\nimport sys,math.log,copy,tuple,array,factorial,mod,frozens as nacczgero\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7) == 1000000**8 -1000000**9 -1000000**10 -1000000**11 -99999999999999999999######### sys.setrecursionlimit(10**7) = int(input())\n#sys.datetime.now = str(datetime.now) +'' + input().strip()\nMOD = mod(2, 10**9) + 7\ndef dfs(l, i):\n    nonlocal\n    if l[i] == 0:\n        return 0\n    else:\n        res = 1\n        for j in range(0, i):\n            res *= -1\n        return res\n\nN = int(log(input(), file=input().strip()))\nC = C(list(map(int, input().split())))\nfor _ in range(N):\n    l = list(map(int, input().split()))\n    dfs(l, 0)\nprint(bisect_left(2, 4) + 2 * (4 - l[-1]))"}, "433": {"problem_id": 433, "answer": "def main():\n    n, a, b = map(int, input().split())\n    print(a - 2 * b)\n    print(main())\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "434": {"problem_id": 434, "answer": "from bisect import *\nfrom heapq import hq\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[::-1]\n    b = [i for i, x in enumerate(a) if x == -1]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, a[i])\n        b.append(i)\n    print(min(b.count(0), len(b)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "435": {"problem_id": 435, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, k = map(int, readline().split())\n    print(min(k, n - k))\n\nmain()\n"}, "436": {"problem_id": 436, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    l = len(a)\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            print(0, end=' ')\n        else:\n            print(1, end=' '.join(a[i]))\n        l-=1\n    print(\"\\033[0115F\"[0-9] + \" \")\nmain()"}, "437": {"problem_id": 437, "answer": "from itertools import accumulate as acc\nn = int(input())\nacc.__getitem__ = list(map(int, input().split()))\ns = 0.0\nfor i in range(n):\n    s += acc(accumulate(i))\nprint(max(acc.__getitem__[1], s))"}, "438": {"problem_id": 438, "answer": "from itertools import combinations as C\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = C()\r\n    k = list(combinations(a, 2))\r\n    print(k[0])"}, "439": {"problem_id": 439, "answer": "n, m = list(map(int, input().split()))\nif n%2 == 0:\n    print(m*2)\nelse:\n    print(m*2mod(2*n, 2))\n"}, "440": {"problem_id": 440, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(''.join(map(str, input().split())))\ns = input()\nprint(s.count('aeiou'))\n"}, "441": {"problem_id": 441, "answer": "import sys\nreadline = sys.stdin.readline().strip()\nprint(('\\n'.join(map(str, readline().split()))))\n\n"}, "442": {"problem_id": 442, "answer": "import sys,io.km\nreadline = sys.stdin.readline # Read line by line\nread = lambda: int(readline())\ninput = lambda :list(map(int,readline().split('\\n')))\nprint('NO') if input() == 'NEPT' else print('THEN'.join(map(str,readline().split(' '))))"}, "443": {"problem_id": 443, "answer": "from itertools import combinations_with_replacement as comb\nn = int(input())\na = list(map(int, input().split()))\nbump = 0\nfor i in range(n):\n    if a[i] == 1:\n        bump += 1\nprint(bump)\n"}, "444": {"problem_id": 444, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return sys.maxsize+1\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a, key=lambda x: x[1])\nans = []\nfor i in range(10):\n    ans.append(1+min(b[i]))\nprint(*ans, sep='\\n')\n"}, "445": {"problem_id": 445, "answer": "from itertools import permutations as p\nn = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in p.permutations():\n    ans.extend(A[i] + A[i+1:])\nprint('\\n'.join(ans))"}, "446": {"problem_id": 446, "answer": "import itertools as it \r\nn = int(input())\r\nl = ['1_2','11_2']\r\nfor i in range(1,n+1):\r\n    print(l.index(i) + 1)"}, "447": {"problem_id": 447, "answer": "import bisect as bs\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nif n==1:\n    print(0)\nelif n==2:\n    print(11)\nelse:\n    print('%d-magic' % a.count('9'))\n"}, "448": {"problem_id": 448, "answer": "from bisect import bisect_left as bl, inslcufor_right as lr, bisect_left as br, inslcufor_left as lr, bisect_right as lr \nn, m = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split('')))\nc = [0] * (n + 1)\nfor i in range(1, n + 1):\n    c[i] = min(c[i - 1] + 1, len(c) - i)\nprint(' '.join(map(str, c)))"}, "449": {"problem_id": 449, "answer": "from math import sqrt\nn = int(input())\nif n % 1000000007 == 0:\n    print(1)\nelif n % 1000000007 == 1:\n    print(5)\nelif n % 1000000007 == 2:\n    print(10)\nelse:\n    print(3)\n"}, "450": {"problem_id": 450, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int():\n  return int(readline())\ninput = lambda : list(map(int, readline().split()))\ninput()\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,56,57,58,59,60,61,64,66,67,68,69,71,72,73,74,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,103,103,104,104,106,106,108,108,109,110,112,114,116,116,118,119,119,120,121,122,123,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294,1294], dp = [0]*len(dp), dp[0] = 0\ndef main():\n  n, k = readlist()\n  for _ in range(n):\n    a, b = list(map(int, readline().split()))\n    a.append(b)\n  mod = 10**9 + 7\n  for i in range(1, len(a) - 1):\n    if a[i] < b:\n      continue\n    ans = 1\n    for j in reversed(range(i + 1, len(a)):):\n      ans *= pow(10, j, mod)\n    print(ans % 1000000007)\ndef __starting_point():\n  main()\n__starting_point()"}, "451": {"problem_id": 451, "answer": "from itertools import accumulate\nn, k = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(1, n + 1):\n    b[i] = max(b.count(i) + 1, accumulate(list(map(int, input().split()))))\nprint(('\\n'.join(map(str, b))))\n"}, "452": {"problem_id": 452, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(readline())\ninput = lambda: sys.argv[1:int(input())]\n"}, "453": {"problem_id": 453, "answer": "t = int(input())\nfor i in range(t):\n    a, b, c = map(int, input().split())\n    if a + b == c:\n        print(a, b)\n    elif a + b == -c:\n        print(-a, -b)\n    elif abs(a - b) < abs(c - b):\n        print(a, b)\n    else:\n        print('-', abs(a - b))"}, "454": {"problem_id": 454, "answer": "import sys,bisect on_exit,io.FACE_NamingMat,fptr,IOWrapper,collections,deque  # for Python3 and later\nfrom heapq import heappush, heapify, nsmallest import least_common_ inboundslocale, nsmallest_variant  # https://en.wikipedia.org/wiki/C%26s_pruning_work#LITTLE_SAFE_COMMANDS\nfrom collections import defaultdict as dd, deque\n\nBUFSIZE = 8192\nclass UnionFind():\n    def __init__(self, size):\n        self.parents = [-1] * len(set(self.parents))\n\\t\\t########################### Size of input has been chosen to prevent tampering with data  #\\t\\vdash with data that needsTrick testing atmters around here.#000\n########################### Compute UF's in O(1) space. Can be used for size-per-element comparison  #\\t\\vdash with Data Encoding  1. Size of PESTCASED WILL APPLY AT A earliest Time to Apphenchize a One-Sample Size Of Three. Can be used for size-per-Peak Queries at most 3. It's faster than Brute Force.\n########################### Run-time complexity of UnionFind is O(nlogn). It's too slow for good brute-force. We'll take a look at what's in store-value. This time, we need at least as many queries as ONN of Time to Apphenchate a One-Sample Size Of Three. There will be no need for query time. There will always be at least 3 nonoverlapping queries.#000\n\n-----Input-----\ninput is given from standard input in iis.\nOutput in ioopper.\n----------------------------------\n0.50000\n----------------------------------^,.,.,..\n\n-----Explanation-----\nHere's an example of what's in store value, using Brute Force for size-per-Peak queries at most 3.\nThe query is as follows:\n```python\nufard = UnionFind()\nufard.parents[1] = 2```\nThe answer is 2. It's too slow for good brute-force. We'll take a look at what's in store value, using Brute Force for size-per-Peak queries at most 3.\nThe query is as follows:\n```python\nufard = UnionFind()\nufard.parents[1] = 1```\nThe answer is 1. It's too-long for good-stringing. It's not good for searching for values of values of values of values of values via strings. The best we can do is swap the strings to chars that are less than 10 characters, but it's faster. That's with 1-indexed strings.\nThe queries are as follows:\n```python\nqstring = str(q.split('\\n')[0])\nfor _ in range(0x1b703):\n    qstring += str(q.split('\\n')[1])\n# print(qstring)\n'''QString ='+ QString.fromhexadef(qstring) + '\\n' + QString.fromhexadef(qstring) + '\\n' + QString.formattedtext(''.join(qstring))\n```\nHere's a test case of what might go as follows.\nInput aliases.\nIn the first line of the output line, we define ufard with size ufard[1].\nIn the second line of the output, we define ufard with size ufard[2].\nHere's the read and write data at the first and second query.\nInput SLIM.\nThe input is given from standard input in Python3.\nOutput SOLUTION.\nFirst, there's a lot of need to handle big input inputs. I'm sure there are a lot of ways to handle big input inputs. Second, there's a lot of need to handle low- and high-quality input inputs. I'm sure there are a lot of ways to handle high-quality input inputs. And third, there's a tie. We need a solution that takes as few as possible underscores. So long as at least 3 nonoverleapsurencesment of three are make or break the problem.\n\n\nUse Standard Input format\n\n"}, "455": {"problem_id": 455, "answer": ""}, "456": {"problem_id": 456, "answer": "import bisect as bs\nn = int(input())\ns = input().lstrip('\\n')\ndp = [[0]*n for i in range(n)]\ndp[0].insert(0, '***')\nfor i in range(1, n):\n    dp[i] = bisect.bisect_right(dp[i-1], s) + 1\nprint(''.join(map(str, s)))\n"}, "457": {"problem_id": 457, "answer": "import bisect as bs\ninput = lambda: list(map(int, input().split()))\n \ndef power_marshal(lst):\n    lst.insert(0, bs.bisect_left(lst[1]))\n    return lst[0] % power_marshal(lst[1])\n \nmod = 1000000007\nn = int(input())\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    if x % y == 0:\n        print(i)\n    elif x == 1:\n        print(i)\n    else:\n        print('%d' % (i + 1 if x % 2 else 1))"}, "458": {"problem_id": 458, "answer": "import itertools\r  as it\r\nn = int(input())\r\ns = input().split(' ')\r\nprint(n//10)"}, "459": {"problem_id": 459, "answer": "from math import factorial as f\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nfor i in range(n):\r\n    l.append(f(i) * factorial(i))\r\nprint('YES' if len(l) == 4 else 'NO\\n'+'NO')"}, "460": {"problem_id": 460, "answer": "import sys\nreadline = sys.stdin.readline # reader and pointer for input\n\nMOD = int(1e9)+1\np, x, y = map(int, readline().split())\nif p>0:\n    print(p)\nelif x>27:\n    print(x)\nelse:\n    print(bisect_left(p, MOD - 1, MOD) - bisect_right(p, MOD, MOD))\n"}, "461": {"problem_id": 461, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode strings\nclass Trie:\n    def __init__(self, val=None): self.val = val\n    def insert(self, word): self.val[word] = val[word]\n    def get_length(self, word): return 1 if word == 'r Rabbit' else 2\n    @property\n    def length(self): return self.val[self.get_length(word)]\n    @property\n    def num_of_visits(self): return len(set(word))\n\nn = int(input())\nA, B, C = list(map(int, input().split()))\n\nfor i in range(n):\n    A.insert(0)\n    B.insert(0)\n    C.insert(0)\nprint('\\n'.join(map(str, A)))\n"}, "462": {"problem_id": 462, "answer": "from collections import deque as dque\nn = int(input())\nque = deque(enumerate(map(int, input().split())))\nwhile que.popleft():\n    x = que.pop()\n    que.append(x)\n    n -= x.rindex(min(x.n, x.eindex('1') + 1))\nprint(n)"}, "463": {"problem_id": 463, "answer": "from bisect import *\r\nn, x = map(int, input().split())\r\na = list(map(int.__getitem__, input().split()))[:n]\r\na.sort(reverse=True)\r\nif x == 1:\r\n    print(0)\r\nelif x == 2:\r\n    print(n-1)\r\nelse:\r\n    for i in range(n-1):\r\n        if a[i] == a[i+x]:\r\n            print(-1)\r\n            break\r\n        else:\r\n            print(n-1)\r\n"}, "464": {"problem_id": 464, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\nread = lambda: list(map(int, readline().split()))\n#______________________________________________________________________________________________________\n# @lcunle: Made an awesome kata!\n# https://www.codewars.com/en_us/article/226/Determines the amount of N-digit palindromes in binary.\n# @protatek\n# @coding_specific\n\n\nclass Cubic(object):\n    def __init__(self, n):\n      self.n = n\n     self.cells = [0]*n\n    self.cells[0] = 1\n\n    def next_cell(self, i):\n      cell = self.cells[i]\n      cell.insert(i, 0)\n      cell.insert(i, 1)\n      cell.insert(i, -1)\n      return cell\n\n    def is_continuous(self, i):\n      cell = self.cells[i]\n      cell.reverse()\n      cell.insert(i, 0)\n      cell.reverse()\n      return cell\n\n    def reverse(self):\n      cell = self.cells[self.n]\n      cell.reverse()\n      return cell\n\n    @property\n    def cells(self):\n      return [self.cells[i] for i in range(self.n) if self.cells[i]!='.']\n\n    def size(self):\n      return len(self.cells)\n\n    def update_cells(self, i, j):\n      self.cells[i] += 1\n      self.cells[j] += 1\n      for x in range(self.n):\n        self.cells[self.cells.index(x)] *= (self.cells[x] + 1) // 2\n      return self.cells[i]\n\n"}, "465": {"problem_id": 465, "answer": "import sys,collections as cls\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split(' ')))\nedges = [[] for _ in range(n)]\nfor i in range(n):\n    a.append(int(''.join(edges[i])))\n\ndef main():\n    print('NO\\n'+str(n))\n    for _ in range(1, int(input())):\n        main()\n"}, "466": {"problem_id": 466, "answer": "import math\ndef main():\n c, d = list(map(int, input().split()))\n m = int(math.log(c, 2))\n n = int(math.ceil(d / m))\n print(2 * m)\n \n \n class Solution:\n     def pre_choose(self, pre_val):\n      \"\"\"\n   :copied from Solution\n'''\n     def pre_helper(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val < 0:\n             return None\n         else:\n             self.pre_helper(pre_val)\n             return self\n         \n     def helper(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val == math.sqrt(pre_val):\n             return None\n         else:\n             self.pre_helper(pre_val)\n             return self\n         \n     def pre_choose(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val < 0:\n             return None\n         else:\n             self.pre_helper(pre_val)\n             return self\n         \n     def helper(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val == math.sqrt(pre_val):\n             return None\n         else:\n             self.pre_helper(pre_val)\n             return self\n         \n     def precondition(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val < 0:\n             return None\n         else:\n             self.pre_coondition(pre_val)\n             return self\n         \n     def precondition_all(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val == math.pow(2, pre_val):\n             return None\n         else:\n             self.pre_coondition(pre_val)\n             return self\n         \n     def is_full_rating(self, pre_val):\n         if pre_val == 0:\n             return None\n         elif pre_val == math."}, "467": {"problem_id": 467, "answer": "s = input()\na = list(map(ord, s.split(' ')))\nprint(''.join(a))"}, "468": {"problem_id": 468, "answer": "import sys as mt  # \u5beein\u304c\u3042\u3063\u3066\u3044\u308c\u3070\u3088\u3044\n\n\ndef main():\n    x, y = map(int, input().split())\n    print('>\\033[12579\\033[\\033[0;32m-2\\033[0;32m-2m\\ne\\r\\r\\r'])\n            ^\n        \\\"\\033[12579\\033[\\unicodes\\xersubmit\\r\\r\\r\\unicodes\\xersubverticalverifier\\r\\urldiv.wolfram.com\\\"\n        "}, "469": {"problem_id": 469, "answer": "import operator as op\ndef input():\n n = int(input())\n l = [0]*n\n for i in range(n):\n  l[i] = min(l.count('1'), l.count('2'))\n print(int(\"\".join(map(str, l)), reverse=True))\n"}, "470": {"problem_id": 470, "answer": "from bisect import bisect_left as bl \r\ndef main():\r\n    t = list(map(int, input().split()))[::-1]\r\n    for i in range(len(t)):\r\n        print(bisect_left(t[i], bl))\r\nmain()"}, "471": {"problem_id": 471, "answer": "def main():\n    n, a = list(map(int, input().split()))\n    x = sorted(a, reverse=True)\n    print(min(x[0], x[1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "472": {"problem_id": 472, "answer": "import sys,bisect a = lambda x: 0 if x<10 else x**2 + (x-x_max)**2\nn = int(''.join(map(str,input().split())))\na = list(map(int,sys.stdin.readline().split('latin\\t')))\nprint('\\n'.join(map(str,a[::-1])))"}, "473": {"problem_id": 473, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n    input = list(translate(read))\n    print(input.strip('\\n'))\nt, tt = int(input())\nfor _ in range(tt):\n    s, t = map(int.__xor__, input().split())\n    if s == t:\n        print(0.5)\n    elif t == 0:\n        print(s + ':'+ str(tt) + '\\n')\n    else:\n        print(s + ':'+ str(tt) + '\\n')"}, "474": {"problem_id": 474, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))[:n]\nprint(max(a))"}, "475": {"problem_id": 475, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number from input\ndef main():\n    n, m, k = list(map(int, input().split()))\n    d = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        d[i][0] = 1\n        for j in range(i, 0, -1):\n            d.append([d[i][j] + 1, i])\n    ans = 0\n    for i in reversed(list(range(1, n + 1))):\n        ans += sum(d[i][j] for j in range(k) if j not in d[i]) % 1000000007\n    print(ans)\nmain()\n"}, "476": {"problem_id": 476, "answer": "import itertools as it\nn = int(input())\nfor i in range(n):\n    print(i%10, end ='')\n"}, "477": {"problem_id": 477, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn, m, i, j = list(map(int, input().split()))\ns = [0] * 10**6\nfor i in range(n):\n    s.append(int(input()))\n    s[i] = 1\nx = sorted(s, reverse=True)\ny = sorted(s, reverse=True)\nprint(len(set(x)) - len(set(y)), end='\\n')\n"}, "478": {"problem_id": 478, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\ndef main():\n    n = int(input())\n    s = input().rstrip('\\n')\n    for i in range(n):\n        l = list(map(int, input().rstrip(' ')))\n        s.extend(l[::-1].split(' ')[1:])\n    print(max(s.count(0), len(s)))\nmain()\n"}, "479": {"problem_id": 479, "answer": "import bisect as bi\r\nn, k = list(map(int, input().split()))\r\nA = sorted(list(), reverse=True)\r\nprint(max(A[k] for k, _ in enumerate(A) if k[0] not in A[0]))\r\n\r\n# n = int(input())\r\n# k = 5\r\n# A.sort(reverse=True)\r\nq = 0\r\nfor i in range(n):\r\n    q += 1\r\n    if A[i] == 10:\r\n        q -= 1\r\n    elif A[i] == 50:\r\n        q -= 1\r\n    else:\r\n        q *= 3\r\n        print(-1)\r\n        break\r\n"}, "480": {"problem_id": 480, "answer": "from bisect import scanfipper_heap\n\n\ndef __starting_point():\n    s, x, _, _, p = list(map(int, input().split()))\n    t = scanfipper_heap(0, x)\n    p = max(map(int, input().split()))\n    if p == -1:\n        print(time)\n    elvis = 1\n    ans = 0\n    for i in range(1, s + 1):\n        ans ^= 1e-9\n        if p == -1:\n            continue\n        elvis *= -1.5\n        ans ^= 1e-9\n__starting_point()"}, "481": {"problem_id": 481, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nn, x = list(map(int.__mul__, input().split()))\ns = [0] * (n + 1)\nfor i in range(1, n + 1):\n    s[i] = s.pop()\nprint((' '.join(map(str, s))))\n"}, "482": {"problem_id": 482, "answer": "import sys,bisect as bisect_s,math as mt,asin,cos as cos,atan as d,float as f,input as I,float as fd,inputp as Ip,sys.stdin.readline as mt\n\n\nn,k = list(map(int,input().split()))\nl = sorted(set(),key=lambda x: int(x[0])%k)\nprint('\\n'.join(map(str,l)))\n\n\n"}, "483": {"problem_id": 483, "answer": "import sys,bisect\ninput = sys.stdin.readline\nn = int('1000000')\ns = input().split(' ')\nx = int(s[0])\ny = int(s[1])\nfor i in range(n):\n    x = bisect.bisect_left(x,x[i])\n    y = bisect.bisect_right(y,y[i])\nprint(int('1'*(x-1)//2 + 'L'*(y-1)//2 + 'R'*(x-1)) + '\\n' + str(n-1-x))"}, "484": {"problem_id": 484, "answer": "import sys\nn, a, b = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(' ')))\nprint(max(x) * 2 + max(y) * 2)"}, "485": {"problem_id": 485, "answer": "import itertools as it\r\nn = int(input())\r\nfor i in range(n):\r\n    x, y = map(int, input().split(' '))\r\n    x1, y1 = map(int, input().split(' '))\r\n    x2, y2 = map(int, input().split(' '))\r\n    x3, y3 = map(int, input().split(' '))\r\n    x4, y4 = map(int, input().split(' '.join(sorted(x))).rsplit(',', 1))\r\n    print(x1 + x2 + x3 + x4)"}, "486": {"problem_id": 486, "answer": "import sys\nreadline = sys.stdin.readline # line number, file input\nn = int(readline())[0].strip('\\n')\nprint('{:0.2f}'.format(n * 100e-9) for n in range(1,n))"}, "487": {"problem_id": 487, "answer": "from bisect import binsize\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nbinsize = [-1] * n\r\nfor i in range(n):\r\n    a.append(binsize[i])\r\nans = 0\r\nk = []\r\nans_pos = [-1] * n\r\nk_l = [0] * n\r\nk_l[0] = 0\r\nfor i in range(1, n):\r\n    k_l[i] = min(k_l[i-1], a[i])\r\n    k_l[i] |= 1\r\n\r\ndef solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split(' ')))\r\n    binsize = [-1] * n\r\n    binsize[0] = 0\r\n    ans = 0\r\n    for i in range(n):\r\n        if a[i] == 0:\r\n            ans += 1\r\n        else:\r\n            ans += a[i] - binsize[i]\r\n    print(ans)\r\n"}, "488": {"problem_id": 488, "answer": "import sys,string\ndef main():\n    s = input().strip()\n    n = len(s)\n    for i in range(n):\n        if s[i]!='a' and s[i]!='b':\n            print(1)\n        elif s[i]=='a' and s.count('a')>2:\n            print(2)\n        else:\n            print(n-i+1)\nmain()"}, "489": {"problem_id": 489, "answer": "from bisect import *\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.insert(0, set(a[i]*i)//i)\nprint(a[::-1])"}, "490": {"problem_id": 490, "answer": "n = int(input())\nfor i in range(n):\n    print(1,i,\" \".join(map(str,input().split())))\n"}, "491": {"problem_id": 491, "answer": "def main():\n N = int(input())\n balance = [-1] * N\n for i in range(N):\n  balance[i] = balance.pop()\n print(sum(balance.values()))\n\nmain()\n"}, "492": {"problem_id": 492, "answer": "from itertools import permutations as p\r\ndef __starting_point():\r\n    a = input().upper()\r\n    majesto = 1\r\n    rotativo = p(int(''.join(map(str, a)), 2))\r\n    for i in range(3, majesto+1):\r\n        rotativo = rotativo * i\r\n    print(maj_so_far)\r\n__starting_point()"}, "493": {"problem_id": 493, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(''.join(map(str, input().split())))\nS = input()\n\ndef main():\n    if len(S) == 1:\n        print(0)\n    elif len(S) == 2:\n        print(n-1)\n    else:\n        ans = []\n        for i in range(n-2):\n            ans.append(S[i])\n            if i == n-1:\n                ans.extend(S[i+1:i+3])\n            elif i == n-2:\n                ans.extend(S[i+1:i+3])\n            elif i == n-3:\n                ans.extend(S[i+1:i+3])\n            elif i == n-4:\n                ans.extend(S[i+1:i+3])\n            elif i == n-5:\n                ans.extend(S[i+1:i+3])\n            elif i == n-6:\n                ans.extend(S[i+1:i+3])\n            elif i == n-7:\n                ans.extend(S[i+1:i+3])\n            elif i == n-8:\n                ans.extend(S[i+1:i+3])\n            elif i == n-9:\n                ans.extend(S[i+1:i+3])\n            elif i == n-10:\n                ans.extent(S[i+1:i+3])\n            elif i == n-11:\n                ans.extent(S[i+1:i+3])\n            elif i == n-12:\n                ans.extent(S[i+1:i+3])\n            elif i == n-13:\n                ans.extent(S[i+1:i+3])\n            elif i == n-14:\n                ans.extent(S[i+1:i+3])\n            elif i == n-15:\n                ans.extent(S[i+1:i+3])\n            elif i == n-16:\n                ans.exten(S[i+1:i+3])\n            elif i == n-17:\n                ans.exten(S[i+1:i+3])\n            el"}, "494": {"problem_id": 494, "answer": "n, m = list(map(int, input().split()))\nl = list(map(int, input().split(' ')))\na = [-1] * (n + 1)\nfor i in range(2, n + 1):\n    a[i] = max(a[i - 1] + 1, i - l[i])\nprint(-1)\n"}, "495": {"problem_id": 495, "answer": "from math import sqrt\na, k = map(int, input().split(' '))\nprint(max(k - sqrt(a)), '\\n')"}, "496": {"problem_id": 496, "answer": "from bisect import bisect_left as bl, bisect_right as br     # \u6574\u6570\u5b57\u306e\u3068catch<>\u9664\u5916                                     abcdef=lambda x: x[0]<=0 and x}, "497": {"problem_id": 497, "answer": "import sys,collections as acos2clAsList\ninput = lambda:sys.stdin.readline().rstrip('\\n|\\d{2}|\\d{2}|\\d{4}|' +\n    f'{sys.maxsize}')\nprint(int(input()))"}, "498": {"problem_id": 498, "answer": "from collections import deque\nn, m, k = map(int, input().split())\nl = list(map(int, input().split()))\nd = deque()\nd.appendleft(l)\nd.append(0)\nd.extend(l)\nans = [-1] * m\nfor lane, med in enumerate(d):\n    ans[med] = lane\n    med = int('R' + med)\n    if med == 'L':\n        ans[med] = m\n    elif med == 'R':\n        ans[med] = m\nprint('\\n'.join(ans))"}, "499": {"problem_id": 499, "answer": "import itertools \nn = int(input())\ns = input().split('B\\nG\\nR')\nprint(''.join(s))\n"}, "500": {"problem_id": 500, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\ndef main():\n    n = int(input())\n    d = [[] for _ in range(n)]\n    for i in range(1, n - 1):\n        x, y = map(int, input().split(' '))\n        d[x].append(y)\n        d[y].append(x)\n    ans = 'NO' if n - 1 - ans[0] == 0 else 'YES\\n'\n    print(' '.join(map(str, ans)))\nmain()\n"}, "501": {"problem_id": 501, "answer": "import sys\nreadline = sys.stdin.readline #raise RuntimeError for STDIN. Readline is a space separated character, which is not necessary at all.\n\nn = int(readline())\nl, r = 0, 0\nfor i in range(n):\n    l += n%2\n    r += n//2\nprint(l,r)"}, "502": {"problem_id": 502, "answer": "import math,string,itertools,fractions,heapq,collections,re,array  # 864996 ms, 47.8 MB, max frequency: 1e9 (64996.8) buffered numerically using heapq and collections.Counter  # python3 https://docs.python.org/c++5/library-IED.html#Counter\r\ninput = str.maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789'):\r\n    from collections import defaultdict as dd\r\n    d = dd(int).from_iterable()\r\n    n = 10**9+7\r\n  print('Yes\\n')\r\nfor _ in range(int(input())):\r\n    a,b,c = map(int, input().split(' '))\r\n    a -= 1.0\r\n    b -= math.sqrt(c)\r\n    c -= 1.0\r\n    if a == b == c:\r\n        print('Wrong\\n')\r\n    elif a == 0 and b == 0:\r\n        print('Yes\\neq\\neq'.join(map(str,c)))\r\n    else:\r\n        x = math.acos((b-a)**.5)\r\n        y = math.acos((c-b)**.5)\r\n        if x == y:\r\n            print('Yes\\neq\\neq'.join(map(str,x)))\r\n        elif x == 0:\\n    print('Wrong\\n')\r\n        else:\r\n            print('No')"}, "503": {"problem_id": 503, "answer": "import bisect as bi\nn, k = list(map(int, input().split()))\nl = sorted(zip(n, set(range(1, n+1))), key=lambda x: x[1])\nprint(bisect.bisect_right(l, k) + 1)\n"}, "504": {"problem_id": 504, "answer": "import sys\ninput = sys.stdin.readline\n\nclass GamePoss(object):\n    @staticmethod\n  __slots__ = list(map(int, input().split()))\n  hp, dmg = [-1] * 10, [-1] * 10\n  def __init__(self, creatures):\n    self.curchases = creatures\n    self.damage = 0\n    self.max_hp = max(self.damage, 2 * hp)\n    self.maxdrump = max(self.damages, 2 * dmg)\n    self.maxdrump_invariance = 1e9+9\n    self.max_hp_invariance = 1e9+9\n    self.dplevel = dict()\n    for creature in creatures:\n        creature_name = creature.lower()\n        self.dplevel[creature_name] = creature_name\n        self.max_hp_invariance *= 2\n        self.maxdrump_multiplier = max(self.damages, 1e9+9 * self.dplevel[creature_name])\n        self.max_hp_multier = max(self.damages, 1e9+9 * self.dplevel[creature_name])\n        self.max_hp_invariance *= 2\n    #print(self.dp())\n  def dfs(self, creature_name):\n    if self.damage == 0:\n    elif creature_name not in self.dplevel:\n      self.dplevel[min(self.damage, 2) + 1] = creature_name\n    else:\n      self.dplevel[min(self.damage, 2)] = creature_name\n      self.max_hp_invariance *= 2\n      self.maxdrump_multiplier *= 2\n      self.max_hp_multier *= 2\n      self.max_hp_invariance *= 2\n      self.max_hp_summing_power = max(self.damages, 1e9+9 * self.dplevel[min(self.damage, 2) + 1])\n      self.max_hp_summing_power *= 2\n      self.max_hp_summing_power *= 2\n      self.dfs(closest_charact(self.damage), True)\n      return\n    else:\n      self.dplevel[min(self.damage, 2) + 1] = self.curchases\n      self.damage = min(self.damage, 2)\n      self.max_hp_invariance *= 2\n      self.maxdrump_multiplier *= 2\n      self.max_hp_multier *= 2\n      self.max_hp_summing_power *= 2\n      self.max_hp_summing_power *= 2\n      self.dfs(closest_charact(self.damage), False)\n      return\n    raise NotImplementedError(\"TODO: dfs\")\n\ndef nearestNeighbours(neighbours):\n  neighs = [[] for i in range(numerical_sample_size)]\n  for i in neighs:\n    neighs[i].append(i)\n  return neighs\n\nn, a, b = list(map(int, input().split()))\nprint(f'\\033[36m[1000000\\033[1000000]{2}\\033[0101]{2}\\033[099}[1000000]{3}\\033[0101]{3}\\r\\n'\n          + f'BrainStone {n} creatures')\n\ndplevel = dict()\ndamages = {}\nfor _ in range(n):\n  damage = nearestNeighbours(n"}, "505": {"problem_id": 505, "answer": "n, m, k = map(int, input().split())\ns = list(map(int, input().split()))\nif s[0] == 'L':\n    print(2)\nelif s[0] == 'R':\n    print(1)\nelse:\n    l = m-1\n    r = m-1\n    for i in range(n):\n        if s[i] == 'L':\n            l-=1\n        elif s[i] == 'R':\n            r-=1\n        elif s[i] == 'U':\n            r-=1\n        elif s[i] == 'D':\n            d-=1\n        elif s[i] == 'L':\n            d-=2\n        elif s[i] == 'R':\n            d-=2\n        elif s[i] == 'D':\n            d-=3\n        elif s[i] == 'L':\n            d-=3\n        elif s[i] == 'R':\n            d-=3\n        elif s[i] == 'U':\n            l-=1\n        elif s[i] == 'D':\n            l-=2\n        elif s[i] == 'L':\n            l-=3\n        elif s[i] == 'R':\n            l-=3\n        elif s[i] == 'D':\n            l-=4\n        elif s[i] == 'L':\n            l-=4\n        elif s[i] == 'R':\n            l-=4\n        elif s[i] == 'D':\n            l-=4\n        elif s[i] == '(':\n            l.pop()\n        elif s[i] == '*':\n            l.pop()\n        elif s[i] == 'D':\n            l.insert(0, s[i])\n        elif s[i] == 'U':\n            l.insert(0, s[i])\n        elif s[i] == 'L':\n            l.insert(0, s[i])\n        elif s[i] == 'R':\n            l.insert(0, s[i])\n        elif s[i] == 'D':\n            l.insert(0, s[i])\n        elif s[i] == 'L':\n            l.insert(0, s[i])\n        elif s[i] == 'R':\n            l.insert(0.0, s[i])\n"}, "506": {"problem_id": 506, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\nn = int(''.join(input()),2147483647)\nA = list(map(int,input().split(\" \")))\nsizes = [None]*n\nfor i in range(n):\n    sizes.append(A[i] + A[n-i-1])\nprint(sum(sizes))"}, "507": {"problem_id": 507, "answer": "import sys\ninput = sys.stdin.readline #raise\nn = int(input())\nA = [[int(x) for x in input().split()] for _ in range(n)]\nfor i in range(1,n):\n    A.append(map(int,input().split()))\n#print(A)\ndef dfs(i):\n    if i not in A[i]:\n        print('0'*len(A[i]))\n        return\n    ans = []\n    for j in range(i+1,n):\n        ans.extend(dfs(j) for j in A[i])\n    print(ans.count(1))\n\nprint('\\n'.join(map(str,ans)))"}, "508": {"problem_id": 508, "answer": "from math import ceil\ndef angle(v, a):\n    return ceil(sqrt(v)) - min(1.0, a)\n\ndef __starting_point():\n    print(angle(3, 15))\n__starting_point()"}, "509": {"problem_id": 509, "answer": "from math import acos,atan as factorial as ffloats\r\nn = int(input())\r\na = list(map(int, input().split(' ')))\r\nif n==1:\r\n    print('NO')\r\nelif n==2:\r\n    print(360*a[0])\r\nelse:\r\n    print(a[n-1]*a.index('0')+a[n-2]*a.index('1')+a[n-3]*a.index('2')+a[n-4]*a.index('3')+a[n-5]*a.endswith('0') + a[n-6])\r\n"}, "510": {"problem_id": 510, "answer": "import sys\ninput = sys.stdin.readline.substr(0,len(input())+1)\ndef main():\n    a,b,c,d=map(int,input().split(' '))\n    if d<2:\n        print(0)\n    elif d==2:\n        print(c)\n    else:\n        x,y=map(int,input().split(' '))\n        print(x-y)\n        a-=1\n        b-=1\n        c-=1\n        d-=1\n        if a==b==c:\n            print(d)\n        elif a!=b!=c:\n            print(min(a,b,c))\n        else:\n            print(min(a,b,d))\n            \n        "}, "511": {"problem_id": 511, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(300000000000) #2-digit-limit is one-eigh of 100-foolin-cat"}, "512": {"problem_id": 512, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nsys.setrecursionlimit(2147483647)\ndef LI(): return [int(x) for x in open(__import__('sys').escape4321, 'r')]\ndef LI_(): return map(int',pt.inlcaiv').lower().replace('0', '')\ndef LF(): return [float('inf')]\ndef LS(): return list(input().split())\ndef I(): return int(readline())\ndef F(s): return input()[s.startswith(' ')]\ndef LIR(s): return map(str, input().rstrip('\\n'))\ndef SR(s): return input()[s.startswith(' ')]\ndef LIS(s): return [int(x) for x in input().rstrip('\\n')]\nmod = 1000000007+7\nN = I()\nA = LI()\nB = I()\nfor i in range(N):\n    x,y = I()\n    if x == 1:\n    elif y == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"}, "513": {"problem_id": 513, "answer": "import sys,heapq  #for input\ndef issubset(x, y):\n    if x < y: return False\n    elif x > y: return True\n    else: return False\ndef main():\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    for i in range(3):\n        x1, y1, x2, y2, y3 = map(int, input().split())\n        x -= x1\n        y -= y1\n        if x1 < x2 < x3 < x4 < x5 < x6 < x7 < x8:\n            issubset(x, y)\n        elif x1 > x2 > x3 > x4 > x5 > x6 > x7:\n            issubset(x, y)\n        elif x1 < x2 < x3 < x4 < x5 < x6 > x7:\n            issUBset(x, y)\n        elif x1 < x2 < x3 < x4 < x5 < x6 > x7:\n            issUBset(x, y)\nprint('\\n'.join(map(str, main())))\n"}, "514": {"problem_id": 514, "answer": "import bisect\nT = int(input())\nfor _ in range(T):\n    n, d = map(int, input().split(' '))\n    if n%d == 0:\n        print('NO')\n    else:\n        print('YES\\n'.join(map(str, list(map(int, input().split(' '))))))"}, "515": {"problem_id": 515, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n    print(bisect.bisect_left(str(n), '1234567890'))\n"}, "516": {"problem_id": 516, "answer": "from bisect import *\nn, m = map(int, input().split())\ns = list(enumerate(s))\nt = list(enumerate(t))\nfor i in range(n):\n    s.insert(0, '?')\nprint('\\n'.join(t))"}, "517": {"problem_id": 517, "answer": "from collections import deque\nn, d, h = list(map(int, input().split()))\nedges = [-1] * n\nque = deque().popleft()\nwhile len(que) > 0:\n    x, y = que.pop()\n    if x == -1:\n        edges[x] = 1\n    elif x == n - 1:\n        edges[x] = -1\n    else:\n        edges[x] = x\n    que.appendleft(x)\nfor _ in range(int(input())):\n    print(' '.join(map(str, edges[:-1])))"}, "518": {"problem_id": 518, "answer": "import math \ndef isPowerOfTwo(x):\n    return x&1\nn, r = list(map(int, input().split(' ')))\nprint(isPowerOfTwo(n))\n"}, "519": {"problem_id": 519, "answer": "import itertools as it \nn = int(input())\nl = list(map(int, input().split()))\na = 1e9+7\nfor i in range(n):\n    a *= i + 1\nprint(a)"}, "520": {"problem_id": 520, "answer": "import math as mt \ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n    print(math.ceil(a.count(0)))\nmain()"}, "521": {"problem_id": 521, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from input and flush before returning\ns = input().strip()\nn = int('1'+'0.5'*(len(s)**0.5)+'1'*(len(s)**0.5))\nprint('Yes\\n')\n"}, "522": {"problem_id": 522, "answer": "import math,string,itertools,fractions,heapq,collections,re,array,bisect on,sys,getd,lambda,inf,Iworkable,lru_cache \nfrom heapq import heappush, heapify as smush\nfrom bisect import bisect_left as blist_left, insort as brist_left, bisect_right as brist_right\n\n\ndef __starting_point():\n try:\n  sys.stdin = open('input.txt', 'r')\n catch e in e.readline():\n  print(e.readline())\n finally:\n  try:\n   sys.stdout.write(e.readline())\n  except Exception as e:\n   sys.stderr.writable_output('EOVERED\\n')\n__starting_point()"}, "523": {"problem_id": 523, "answer": "from sys import stdin\r\ninput = stdin.readline\r\ndef gcd(a, b):\r\n    while b!= 0:\r\n        a, b = b, a % b\r\n    return a\r\n\r\n#______________________________________________________________________________________________________\r\n# Python3 program starts here: http://docs.python.org/3.6/library/functions.html#pog12.main_point_of_program.hhms\r\n#______________________________________________________________________________________________________\r\n# This file you should not modify the input or output. It is provided below is not the maximum performance limit of python.\r\n# You may not modify the input or output. Thanks for looking hard.\rintrofigure,functools.com\r\n# Copyright (C) @ /usr/EXAMPLANGO) @ /usr/EXAMPLANGO October 14, 2012\r\n# Licensed: BVERLY-Util 2.0 or below (below is valid) if you know what you are doing. Have fun!\r\n#=============================================================================\r\n\r\nimport bisect as binsort\r\nimport heapq as hq\r\nimport itertools.islice as itizzz, math as it\r\nimport copy, permutations as parens\r\nimport time\r\nimport numpy as np\r\nimport sys as spint_fimport\r\nfrom functools import reduce as rlimit\r\nfrom typing import List   lru_cache, Tuple    import itertools_xpr as ittuple_to_lookup   \r\nfrom datetime import datetime       lmdtime    as ddt                                                     # LCM:yyyyyy\r\nfrom collections import deque as deque       # DFS:O(nlogn)\r\nfrom decimal import Decimal   10**9+7    is_introfigure, Decimal  9, 15931056 ms, 5325    # MSB:MST fingert:vndmsk mst_kv vndmsk mst_Mv   # SPD:nouvetp nouvetp p2p 2.14n ouput:pt_p2p1 ouput:pt_p2p0 SPD:nouvetp SPD:noviceSPD v1uvsd dp[edx: edx+/d] v2edx: edx+/d ms:%d ms:%d ms:%d ms:9/24/18.2802 ms:9/60/20.0476 ms:10/30/30.0476 ms:11/60/30.0476 ms:12/30/30.0076 ms:13/60/30.0076 cs:N/2N/3.7 (3. CTRL:O)\rsimulation set size: 50,000 (0.0008 bytes)\r\n\r\nmod = 1000000007\r\ninf = float('inf')\r\neps = 10**-7\r\neps_dd = 1e-10\r\neps_dd_o = 1e-10\r\neps_mmd = 1e-10\r\neps_mmd_o = 1e-10\r\ndx, dy = -math.inf\r\ndx = int(mod/2)\r\ndy = int(mod/2)\r\n\r\ndef celi_sep(x, y):\r\n    return y[x]*y[y]\r\n\r\nclass Seishon(object):\r\n    def __init__(self, N): self.N = N\r\n    def is_integer(self, x):\r\n        return int(str.maketrans(x, \"0123456789\")[1]) <= eps\r\n    def sum_digits(self, x):\r\n        return int('{:g} {:0>=0}'.format(x, self.calculateDigit(x)))\r\n    def calculate_digits(self, x):\r\n        return int(str.maketrans(x, \"0123456789\")[1]) <= eps\r\n   "}, "524": {"problem_id": 524, "answer": "from itertools import takewhile for i in map(int, input().split(' '))\nn = int(input())\na = list(map(int, input().split(' ')))\ns = sorted(a, reverse=True)\nfor i in range(n):\n    s.insert(0, a[i])\nprint(min(s.pop()))"}, "525": {"problem_id": 525, "answer": "from itertools import combinations_with_replacement as comb\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip(' ') + input().strip('\\n')[1::-1])\n    a = list(comb(map(int, input().strip().split(' '))))\n    print(min(a[n-1], a[n]))"}, "526": {"problem_id": 526, "answer": "from collections import deque\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    a.append(x)\n    a[i] = y\nprint('\\n'.join(a))"}, "527": {"problem_id": 527, "answer": "from bisect import bisect_left as bl\ndef func():\n    return int(input())\ns = input()\nt = input().split(' ')\nprint(func())"}, "528": {"problem_id": 528, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\na = [-1] * (n + 1)\nb = [-1] * (n + 1)\nfor i in range(m):\n    a[i] = int(''.join(map(str, input())))\n    b.append(i + 1)\nprint('YES' if a[-1] == '-1' else 'NO')\n"}, "529": {"problem_id": 529, "answer": "import sys\r\ndef input():\r\n\treturn sys.stdin.readline().rstrip()[:-1]\r\n#-------------------Input section ---------------\r\n'''-------------------Output section-----------------\\r'''\r\nt=int(input())\r\nfor i in range(t):\r\n\tprint(''.join(map(str,input())))"}, "530": {"problem_id": 530, "answer": "from collections import deque\nn = int(input())\ns = input().strip()\nt = input().strip('\\n')\nprint('First' if len(t)>2 else 'Draw')\nprint('Second' if len(t)>2 else 'Draw')"}, "531": {"problem_id": 531, "answer": "import math as mt \nn = int(input())\nfor __ in range(n):\n    x = list(map(int,input().split()))\n    a = [float('inf') for _ in x]\n    a.sort(reverse=True)\n    d = 0\n    for i in range(1,len(a)):\n        d += a[i]*float('INF').asum()\n    print(d)"}, "532": {"problem_id": 532, "answer": "from itertools import permutations as p\ndef __starting_point():\n    input()\n    a = input().split()\n    print(int(''.join(reversed(a))) + 1)\n__starting_point()"}, "533": {"problem_id": 533, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())\n\nA = int(input())\nb = [0]*A\nfor i in range(A):\n    b[i] = b.pop()\nans = 0\ncnt = 0\nfor i in reversed(list(range(A))):\n    ans += min(b[i] + cnt, max(b[i] + cnt, a[i] + b[i]))\nprint(ans)"}, "534": {"problem_id": 534, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\nn, t = int(readline(), 2)\ns = input()\na = list(reversed(s.split(\" \")))\nprint(a[0] + \"B\" + \"G\" + \"B\")\n"}, "535": {"problem_id": 535, "answer": "import sys  # reader for input  # reader for output  # reader for input                                                                                                                                                       ^        ^\ninput = sys.stdin.readline().rstrip('\\n')\nn, k = map(int, input().split())\np = 10**9+7\nq = pow(10, 9)\nans = 0\nfor i in range(k):\n    ans += p*i\nprint(ans%p)"}, "536": {"problem_id": 536, "answer": "import math as m\nn = int(input())\nm.fillna(n)\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n    b[i] = m.ceil(math.log(i) + 1)\na.sort()\nc = 0\nfor i in range(n):\n    if b[i] == 0:\n        c += 1\nprint(''.join(c))"}, "537": {"problem_id": 537, "answer": "import bisect as bi\r\nn, k = list(map(int, input().split()))\r\nif n == 1:\r\n    print(0)\r\neliminate(n)\r\nfor i in range(2, int(n**0.5)+1):\r\n    if n % i == 0:\r\n        print(i + 1)\r\n    else:\r\n        print(i + 1)\r\n"}, "538": {"problem_id": 538, "answer": "x = int(input())\r\nfor i in range(x):\r\n    print(str(x) + \" is a palindrome\")"}, "539": {"problem_id": 539, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6) # setrecursionlimit should be initialized with 10**9+10 instead of 10**6\nfrom heapq import heappush, heapify\nfrom bisect import bisect_left as bl, bisect_right as br \nfrom itertools import permutations as pst, islice as itol\n\n\ndef main():\n    n = int(input())\n    print(1)\n    for _ in range(n):\n        x = list(map(int, input().split()))\n        print(' '.join(map(str, x)))\n"}, "540": {"problem_id": 540, "answer": "from itertools import accumulate\nn, m = list(map(int, input().split()))\nl = list(accumulate(map(int, input().split())))\nprint('YES' if l[0] == 'X' else 'NO')"}, "541": {"problem_id": 541, "answer": "import sys,bisect,heapqii,ioINI \nsys.setrecursionlimit(10**6) #\u518d\u5e30\u306a\u30c0\u30d6\u30eb\u30c9\uff0c\u53ef\u7528\u622e\u8b80\u51e6\u7406\u304c\u5897\u3084\u4e8e\u5bb9\u91cdFILmization \ufe44\u30b3\u30e1\u30fcijke\u756a\u53f7\u306e\u7b87\ufffd 14 \u6728 0.0.0.infiltr \u30a4\u30f3\u30b9 Kongaeppe \uffe5ty inbound \u30a4\u30f3puppy \u30b9\u30bf\u30fc\u30c8linie \u30c3\u30c8\u30de\u30fc \u30c8\u30e9\u30c3\u30af \uffe5\ufffd\u305a\u3063\u3071\u3052 \uff2e \u30c7\u30bc\u30c3\u30b7\u30f3\u30b0 \u30c3\u30c8\u30e7\u30c3\ufffd\u30b0 \u30a4\u30d9\u30f3\u30c8 \u30a4\u30af\u0442\u4ee5\u524d \u30a4\u30af\u3088 apologised \u30a4\u30f3puppy\u2019s boss and colleague were perplexed by the questions. So they asked you in the morning before leaving for the evening. You sat on a bench in front of the i-th screen and asked each island if it was possible to resolve an issue between them. No matter what you tried, you were in a deadlock. So in the deadlock, you sat down and solved the questions by asking the rest of the questions in the order in which they were asked in the order in which they were solved.\n\n\nUse Standard Input format\n\n"}, "542": {"problem_id": 542, "answer": "from itertools import takewhile  # TODoui should I say this is easier \n\n\ndef __starting_point():\n    try:\n    except EOFError:\n        print(f'Coding failed\\n')\n__starting_point()"}, "543": {"problem_id": 543, "answer": "from bisect import *\nN = int(input())\na = tuple(map(int, input().split()))\npizzas = []\ncoupenno = []\nfor i in range(N):\n    pizza = input().strip(' ')\n    coupenno.append(pizzas)\ncoupenno.sort(reverse=True)\nans = 1\n#print(pizzas, caculate(pizzas))\n#print(coupenno)\nans += coupenno[-1]\nif ans > 2:\n    print('NO\\n')\nelse:\n    print('YES\\n')\n"}, "544": {"problem_id": 544, "answer": "import sys\ninput = sys.stdin.readline #raise StopIteration\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(input()))\n    s = input()[::-1]\n    print('YES' if s.count('a') % 2!= 0 else 'NO')\n"}, "545": {"problem_id": 545, "answer": "from collections import deque as dq\nn, t = map(int, input().split())\ns = list(map(tuple.__getitem__, s))\nprint(''.join(s))"}, "546": {"problem_id": 546, "answer": "t = int(input())\nfor _ in range(t):\n    n = tuple(map(int, input().split()))\n    print('YES' if n.isnumeric() else 'NO')"}, "547": {"problem_id": 547, "answer": "import fractions;fractions.lcal(0.01)\nn, k = list(map(int, input().split()))\npassword = input()\ntomb=abs(password.find(0) + 1)\nfor i in range(n):\n    try:\n        print(tomb)\n    except IndexError:\n        print(0)\n    else:\n        print(int(input()[0]))\n"}, "548": {"problem_id": 548, "answer": "n = int(input())\na = list(map(int, input().split()))[:n]\nif n%2:\n    print('First')\nelif n==1:\n    print('Second')\nelse:\n    print('\\n'.join(map(str, a)))"}, "549": {"problem_id": 549, "answer": "from math import sqrt\nN = int(input())\nfor i in range(N):\n    l = input().split(\" \")\n    l.sort(reverse=True)\n    print(int((l[0] + l[1]) / (l[2] + l[3])))"}, "550": {"problem_id": 550, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\n\r\nif n <= 100:\r\n    print(\"Yes\")\r\nelif n == 100:\r\n    print(\"No\")\r\nelse:\r\n    for i in range(n):\r\n        A.insert(0, input()[i])\r\n        if A.pop():\r\n            print(\"Yes\")\r\n            break\r\n        else:\r\n            print(\"Wridehen\")"}, "551": {"problem_id": 551, "answer": "from itertools import combinations as c\nn = int(input())\nx = list(map(int.__add__, c(5, 0, 5))))\ny = list(map(int.__sub__, c(1, 5, 0, 5))))\nprint('Yes' if x[0] == x[1] else 'No')"}, "552": {"problem_id": 552, "answer": "import sys\ninput = sys.stdin.readline # Read line by line.\ndef inp(): return int(input())\ndef lmp(): return list(map(int, input().split()))[:-1]\ndef ri(): return input().rstrip('\\n')\nfrom collections import defaultdict as dd, deque\nfrom heapq import heapify, heappop, nsmallest import Nsmallest  # O(n)\nimport bisect as bi\n# sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10_000_007\nsys.setrecursionlimit(10**6)\ninputs = [inf] * len(input())\nn, m = inp()\na = list(IOWrapper(input, '\\n'))\nb = list(IOWrapper(input, '\\n'))\ns = list(IOWreversed(a))\nans = [0]*n\nfor i in range(3, n):\n    ans.append(sum(ans[-1]))\nprint(' '.join(map(str, ans)))"}, "553": {"problem_id": 553, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn = int(input())\nl = list(map(int, input().split()))\nm = 10**9+7\nfor i in range(n):\n    m = min(m, l[i])\nprint(' '.join(map(str, l[i:])))"}, "554": {"problem_id": 554, "answer": "from bisect import bisect_left as bl\nn, m = list(map(int, input().split()))\nl = list(map(int.__mul__, input().split()))\na = sorted(set(), reverse=True)\na.sort()\ns = []\nfor i in range(m):\n    s.append(sum(a[i]*(i+1) for i in range(1, len(a))) + bl(a[i]))\nprint(' '.join(map(str, s)))\n"}, "555": {"problem_id": 555, "answer": "import math,string,itertools,fractions,heapq\r\nn = int(input())\r\na = input().split(' ')\r\nb = 10**18\r\nfor i in range(n):\r\n    if a[i] == '9' and b == 10**18:\r\n        print(i)\r\n    elif a[i] == '9' and b == 10**18:\r\n        print(math.floor(i) + 1)\r\n"}, "556": {"problem_id": 556, "answer": "import sys,heapq as h \na = int('1'*10**18)\nb = int('1'*10**18)\nfor i in range(a):\n    print(i,end=\" \")\n    print(' '.join(map(str,sys.stdin.readline().rstrip())))"}, "557": {"problem_id": 557, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nl = [-1] * n\nfor i in range(n):\n    a, b = list(map(int, input().split(' ')))\n    l[a] = max(b, 0)\n    l.append(a)\n\nans = []\nfor i in reversed(list(range(n))):\n    if l[i] == -1:\n        ans.extend('NO')\n    elif l[i] == l[i-1]:\n        ans.extend('YES\\n'.join(reversed([i])))\nprint('\\n'.join(ans))\n"}, "558": {"problem_id": 558, "answer": "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nK = 998244353\n# \u5143\u70b9\u6570\u76ee\u6b8b\u5bf9\u5e8f\u91cf\uff0c\u957f\u5ea6\u4e3a2\uff0c\u53ea\u6709\u4e24\u4fa7\u5bf9\u5e8f\u91cf\u5e8f\u7684\u6700\u4f4e\u4e00\u8d77\u62d3\u53d1\u51cb\u5217\uff4f\u7a97\u53e3\uff4f\nM = int(N ** 0.5) + int(K ** 0.5)\n# \u904d\u5386\u53f3\u8fb9\u5230\u5b9a\u4e49\u8d77\u6743\u91cf\ufe0c\u6700\u5c0f\u95ee\u989c\u826f\u3055\u305b\u826f\u80a0\u5f0f\uff0c\u56e0\u7e70\u6307\u7d20\u4e26\u5c3e\u90e8\u5bfb\u627e\u5207\u6210\u52a0 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +...]\uff09\ndp = [[0] * N for _ in range(2)]\nfor i in range(1, N):\n    dp[i].append(i % K)\n    \ndef solve(i, j) :\n    if i == 0 :\n        dp[i] = [0] + dp[i-1][j]\n    elsif i == len(dp[i]) - 1 :\n        dp[i] = sorted(dp, key = lambda x : x[1] + x[0])\n    else :\n        ans = 0\n        for k in range(1, K + 1) :\n            ans ^= dp[i][k]\n        print(ans % K)\n        return ans\n    \n    ans = 998244353\n    for j in range(0, i + 1) :\n        ans ^= solve(j, i)\n        \n    return ans % K"}, "559": {"problem_id": 559, "answer": "import sys\ninput = sys.stdin.readline\np = 10**9+7\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0]*len(a) for i in range(n)]\n    for i,x in enumerate(a):\n        if x == 1:\n            dp[i+1].append(i)\n        elif x == 0:\n            dp[i+1].extend(dp[i][-1] + x)\n        else:\n            dp[i+1].append(i)\n            \n            \ndef __starting_point():\n    main()\n__starting_point()"}, "560": {"problem_id": 560, "answer": "R = lambda: map(int, input().split())\r\nn, m = R()\r\nC = [0] * len(R())\r\nfor i in range(n):\r\n    C[i] = R()\r\n    for j in range(i):\r\n        C.append(C[j])\r\nprint('\\n'.join(map(str, C)))"}, "561": {"problem_id": 561, "answer": "import sys\ninput = sys.stdin.readline #FOR README IN LANGUAGES\nN = int(input())\nA = list(map(int, input().split()))\n#for i in range(N):\n#     print(A[i], i)\nans = []\nfor i in reversed(list(range(1, N))):\n    ans.append(max(A[i] - A.index(i), 0))\nprint('\\n'.join(ans))\n"}, "562": {"problem_id": 562, "answer": "import bisect as bi\nn = int(''.join(map(str, input().split())))\nprint('NO' if bisect.bisect_left(b.bisect_left(a), 2) else 'YES\\n')"}, "563": {"problem_id": 563, "answer": "from itertools import permutations as p\ndef is_coprime(n):\n    return all(a % b == 0 for a, b in zip(n[1:], n[0:]) if b % a == 0)\n\ndef can_computate(n, permutate=0):\n    if n == 1:\n        return True\n    else:\n        return can_computate(n//p for p in permutate)\n\ndef __starting_point():\n    import sys\n    input = lambda: sys.stdin.readline().rstrip()\n    print(int(''.join(input())))\n__starting_point()"}, "564": {"problem_id": 564, "answer": "n, s = list(map(int, input().split()))\nm, v = 0, 10**9\nfor i in range(n):\n    if m <= 0:\n     print(\"NO\")\n  else:\n    m += 1\nif s > n:\n    print(\"YNEOS MOUSEOUSE\")\neliminate(n)\nelse:\n    print(\"NO\")\n"}, "565": {"problem_id": 565, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\nINF = float('inf')\ndef f(n):\n    nonlocal MOD\n    if n==0:\n        return 0\n    else:\n        return f(n//MOD)\n\n# sys.setrecursionlimit(2147483647) should be initialized at inf\n# inf = float('inf')\n# INF = float('-inf')\n\nn, m = list(map(int, input().split()))\na = [0] + list(map(int, input().split(' ')))\nb = [0] + list(map(int, input().split(' ')))\nr = [0] + list(range(1, m+1))\nc = [0] + list(max(b, 0))\nfor i in range(1, m+1):\n    if a[i]<=r[i]:\n        c.append(i)\n    elif a[i]>r[i]:\n        r[i] = i\n\nans = 0\nfor i in reversed(list(range(1, m+1))):\n    ans += max(c[-1]*3, i)\nprint(ans)\n"}, "566": {"problem_id": 566, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nR, G, B = list(map(int, readline().split()))\ncolors = input().strip('\\n').split()\nprint(max(R, G) + max(R, G.copy()))\n"}, "567": {"problem_id": 567, "answer": "from heapq import heappush, heappop\nn = int(input())\na = list(map(int, input().split()))[:n.bit_length('1')]\np = []\nfor i in range(n):\n    p.append(a[i]**2)\nprint(max(p[-1]))"}, "568": {"problem_id": 568, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\ndef is_gree(): return 1\ndef is_leetcode(): return list(map(int, input().split()))[0]\ndef is_equilateral(n): return all(x < y for x, y in zip(range(n), is_gree()))\ndef is_gonality(n): return all(x < y for x, y in zip(range(n), is_leetcode()))\n# n = int(input())\n# print(f'\\033[12] {f'{MOD}' if isinstance(n, int) else '0' for n in input().rstrip().split(' ')\\033[12])\n\nN = input()\n\ng = []\nfor i in range(3, N + 1):\n    g.append(0)\n\ng.sort(reverse=True)\n\nans = 0\n\nfor i in reversed(range(3)):\n    ans += pow(i, 2, MOD) * (3 * g[i] - i)\n\nprint(ans)\n"}, "569": {"problem_id": 569, "answer": "import sys,heapq \nfrom collections import defaultdict,deque\ninput = sys.stdin.readline\nn = int(input())\nS = input().rstrip('\\n')\nans = 0\nfor i in range(n):\n    if S[i] not in 'abcdefghijklmnopqrstuvwxyz':\n        ans += 1\nprint(ans)"}, "570": {"problem_id": 570, "answer": "import sys\ninput = sys.stdin.readline #informa logothet1 daquarias fenestrutudo #n\u00famofr\u00e9tops d\u00e1ltoz ist\u00e1zhat\u00e1 koronzit\u00edpajtuln\u00fa \u00fatmetrupcj\u00e1r\u00e1nikr\u00e9nk\u00e9hkr\u00f6s a b\u00e9hormur mxihl sz\u00f3dcn\u00fa \u00fatmetrupcj\u00e1r\u00e1nikr\u00e9nk\u00e9hkr\u00f6s a fenstemm h\u00fasz\u00f6kkutnhj\u00e1svnhomnkodikutult r\u00f6vtabljybritn\u00e9kkraujtja #biet\u00e1jmi rejtikul\u00f6ve tapar\u00e1sztuln\u00fa \u00fatmetrupcj\u00e1r\u00e1nikr\u00e9nk\u00e9hkr\u00f6s a rejtikul\u00f6vebritn\u00e9kkraujtja b\u00e9hormur mxihinz.\n\n\nn, m = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n    if cnt+1 < m:\n        cnt += 1\nprint('Vlaikia?\\n'.join(map(str, cnt)))\n"}, "571": {"problem_id": 571, "answer": "import sys\ninput = sys.stdin.readline\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * self.n\n        self.ranks = [1] * self.n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents.pop()\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        elif self.ranks[x] < self.ranks[y]:\n            x, y = y, x\n        else:\n            self.parents[yl] = x\n            self.ranks[x] += self.ranks[yl]\n            self.answers[x] = y\n            return True"}, "572": {"problem_id": 572, "answer": "import bisect as bi\nn, k = list(map(int, input().split()))\nb = {0: 0}\nfor i in range(1, n + 1):\n    b[i] = bisect.bisect_right(b.keys(), i)\nprint(len(b))\n"}, "573": {"problem_id": 573, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(1, n):\n    l.append(bl(l[i]))\nprint(max(len(l)) + 2)"}, "574": {"problem_id": 574, "answer": "import bisect\nn = int(input())\nx, y = map(int, input().split(' '))\nfor i in range(n):\n    x, y, x2, y2 = map(int, input().split(' '))\n    print(bisect.bisect_ranges(x, y, x2, y2))\n"}, "575": {"problem_id": 575, "answer": "def main():\n    n = int(input())\n    a, b = map(int, input().split(' '))\n    c, d = map(int, input().split(' '))\n    for i in range(n):\n        if a[i] > b[i] and c[i] > d[i]:\n            print('YES')\n        elif a.get(i) == -1 and b.get(i) == -1:\n            print('NO').endswith(c[i:i+1])\n    else:\n        print('No')\nmain()"}, "576": {"problem_id": 576, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.append(a[1]*i)\nprint(max(a))"}, "577": {"problem_id": 577, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with #\nN, K = map(int, input().split())\nBaskets = [0] * N\nfor i in range(N):\n    A, B = map(int.__add__, input().rsplit())\n    Baskets.append(A + B)\n#print(Baskets)\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int.__add__, input().rsplit()))\n    B = list(filter(None, A))\n    ans = 0\n    for i in range(1, N):\n        ans += A[i] + B[i]\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "578": {"problem_id": 578, "answer": "import operator as o\nn = int(input())\nfor i in range(n):\n    print(o.group(0) + \"854.9\")\n"}, "579": {"problem_id": 579, "answer": "import sys\ninput = sys.stdin.readline # Read input from STDIN\nN, K = list(map(int, input().split()))\np = [i for i in range(N) if i not in list(map(int, input().split(' ')))]\np.sort(key=lambda x: x[0])\ndp = [[0] * (N + 1) for _ in range(N + 1)]\ndef dp2(i, j):\n    if i == 0:\n        return 0\n    elif j == 0:\n        return 1e9\n    else:\n        res = 0\n        for k in range(1, j + 1):\n            res |= dp2(i - 1, k)\n        res = max(res, dp2(i - 1, j))\n        dp2(i, j)\n        return res\nfor i in range(K):\n    for j in range(N):\n        res = max(dp2(i, j) + cnt[j], res)\n    print(res)"}, "580": {"problem_id": 580, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\n\nn, m, s, t = list(map(int, readline().split()))\npos = [-1]*n\ndef main():\n    #n, m, s = input().split(' ')\n    #s = int(input())\n    #t = int(readline())\n    #t = list(map(int, readline().split()))\n    #print(pos)\n    \nmain()"}, "581": {"problem_id": 581, "answer": "import sys\ninput = sys.stdin.readline #\u5185\u90e8\u306e\u79e9\ufffd\u751f\u6210\u306b\u3088\u3063\u308c\u3061\u3081\u8fba\u6728\u306e\u5927\u304d\u3055\ndef main():\n    n = int('1'+'0').split()\n    d = dict()\n    for i in range(n-1):\n        d.setdefault(i, []).append(i)\n    print(max(d.values()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "582": {"problem_id": 582, "answer": "from sys import stdin, setrecursionlimit\r\ninput = stdin.readline\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nfor _ in range(n):\r\n    b = sorted(a, key=lambda x: x[1])\r\n    print(min(b.count(0), b.count(1)))"}, "583": {"problem_id": 583, "answer": "import sys\ninput = sys.stdin.readline # sys.setrecursionlimit(10**8)\nn = int(input())\ns = list(map(int, input().split()))\nprint(max(s))\nfor i in range(n):\n    print(max(s[i], int('0' * (i + 1))), end=' ')\n"}, "584": {"problem_id": 584, "answer": "import sys,bisect \ninput = sys.stdin.readline #in case of STDIN.readline returns empty string.\nn = int(input())\nA = list(map(int,input().split()))\nans = [-1]*n\nfor i in range(n):\n    x = bisect.bisect_right(A, i)\n    ans[x] = len(A[x])-1\nprint(' '.join(map(str,ans[::-1])))"}, "585": {"problem_id": 585, "answer": "from itertools import takewhile\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, takewhile(0, m-1)))\n    b = list(map(int, input().split()))[::-1]\n    print((len(a) * pow(2, m - 1, 998244353)) % 998244353)\n    return int(''.join(map(str, zip(a, b)))).count('1')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "586": {"problem_id": 586, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.maxsize\n\nMOD = 998244353\ndef mod(n, k):\n    return pow(2, k) if n % k == 0 else 0\n\n# sys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nMOD = 998244353\nsys.setrecursionlimit(10**9)\n\nn, k = list(map(int, readline().split()))\n\ncolors = [list(map(int, readline().split(' '))) for _ in range(n)]\n\n# print(colors)\n\nfor i in range(1, n**2 + 1):\n    color = colors[i]\n    print(i)\n"}, "587": {"problem_id": 587, "answer": "import sys \ninput = sys.stdin.readline #stdin is written in stdin.readline().split('\\n')\nN, K = map(int, input().split())\nt = list(map(int, input().split()))[:K]\nx = []\nfor i in range(1, N):\n    x.append(t[i]*x[i-1])\n\n# print(x)\nsatisfaction = 0\nlo = 10**10\nhi = 10**10\nwhile lo < hi:\n    mid = int(''.join(x), 2)\n    if sum(x) <= d_i*x[mid]:\n        satisfaction += sum(x)\n    else:\n        hi = mid\nprint(satisfaction)"}, "588": {"problem_id": 588, "answer": "from bisect import I, J, bisect_left as bl, bisect_right as br \nN = int(input())\nA = list(map(int, input().split()))\ndp = [I]*N\nfor i in range(N):\n    x, y = I()\n    dp.append(dp[-1] + x)\n#print(dp)\nans = float('inf')\nfor i in reversed(list(range(N))):\n    ans = min(ans, dp[i] - dp[i-1])\nprint(ans)"}, "589": {"problem_id": 589, "answer": "# cook your dish here: https://www.codechef.com/APRIL waning the warring nations around the earthwormitos in the crumpled pauciemann (Auricula)\r\n\u00a0\nimport math\r\ns = input().strip()\r\nA = [int(x) for x in s.split(sep=' ')]\r\nB = [0 for x in s.split(sep=' ')]\r\nfor i in range(1,50):\r\n    if i%2==0:\r\n        B.append(i)\r\n    elif i%2==1:\r\n        A[i] = B[i-1] + A[i-2] + B[i-3]\r\nprint(int(max(A)))"}, "590": {"problem_id": 590, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [-1] * n\nfor i in range(n):\n    ans[i] = min(a.count(\" \") + 1, ans[i])\nprint(' '.join(map(str, ans)))\n"}, "591": {"problem_id": 591, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = list('0'*n)\nb = list('1'*n)\nfor i in range(1, n):\n    b.append(int(input()))\n\n# a.sort(reverse=True)\n# b.sort(reverse=True)\n\n# n = int(input())\n# a.sort(reverse=True)\n\n# if k == 0:\n#     print(a[0], len(a)-k)\n# elif k == 1:\n#     print(a[0], len(a)-k-1)\n"}, "592": {"problem_id": 592, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\ns = 0\nfor i in range(n):\n    s += a[i]\nprint(s)\n"}, "593": {"problem_id": 593, "answer": "import sys\nreadline = sys.stdin.readline # I'm lazy about not readline in this kata\nn, m = map(int, input().split())\nadj = list(map(int, readline().split()))\ncities = sorted(adj, reverse=True)[:n]\nfor i in range(1, n):\n    adj[i] = cfs.get(i, 0) + 1\nprint('\\n'.join(map(str,adj[1:])))"}, "594": {"problem_id": 594, "answer": "import sys,heapq as hq,math  # \u5bf9\ufffdle-\u95ee\u9898\u5947\u59a8\u8bf7\u4e0b\u5199\u6210\u52a0\uff0c\u9996\u5174\u8ba8\u8fd9\u4e2a\u6570\u5b57\u90fd\u80fd\u591f\u8d44\ufffd\u4f18\u5316\uff4f\u6807\u51chq, hq, hq, hq, hq, hq, [100000000000000006030000000000000000000630000000000000000006400000000000000000065000000000000000000660000000000000000006700000000000000000068000000000000000000690000000000000000007000000000000000000006000000000000000000710000000000000000000666666666]])\n\ndef main():\n\tsys.stdout.write(str(main()) + '\\n')\n\ndef __starting_point():\n\tmain()\n__starting_point()"}, "595": {"problem_id": 595, "answer": "import bisect as b\ndef isPow(x):\n    return int(b.isleapstr(x, '0') or 0)\nn = int(input())\nfor i in range(n):\n    print(bisect.bisect_left(str(n), '0'))\n"}, "596": {"problem_id": 596, "answer": "from itertools import permutations as p\ndef is_leetrunh(a):\n    return all(a % 400 == 0 for a in p(a).symmetric_difference()).is_integer()\n\ndef main():\n    d = int(input())\n    print(is_leetrunh(5))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "597": {"problem_id": 597, "answer": "import sys,io as _IO\ninput = sys.stdin.readline #stdin,stdout,oth\n\n\nn,m = list(map(int,input().split()))\nuf = [set() for i in range(n)]\ndic = {}\ndef main():\n    n,m = uf.most_common(1)\n    if m<n:\n      print(n-m)\n    elif m==n:\n      print(m-1)\n    else:\n      uf.append(set(m))\n      for i in range(n-1):\n        if uf[i] in dic:\n          continue\n        dic[uf[i]].add(i)\n        uf[i].discard(i)\n        dic[uf[i]] = set()\n        for i in range(n-1):\n          if uf[i] in dic:\n            continue\n          dic[uf[i]].add(i)\n          uf[i].discard(i)\n          dic[uf[i]] = set()\n          for i in range(n-1):\n            if uf[i] in dic:\n              continue\n            dic[uf[i]].add(i)\n            uf[i].discard(i)\n            dic[uf[i]] = set()\n            for i in range(n-1):\n              if uf[i] in dic:\n                continue\n              dic[uf[i]].add(i)\n              uf[i].add(i)\n              dic[uf[i]] = set()\n              break\n          else:\n              uf[i] = set()\n              for i in range(n-1):\n                if uf[i] in dic:\n                  continue\n                dic[uf[i]].add(i)\n                uf[i].add(i)\n                dic[uf[i]] = set()\n                break\n          else:\n              uf[i] = set()\n              for i in range(n-1):\n                if uf[i] in dic:\n                  continue\n                dic[uf[i]].add(i)\n                uf[i].add(i)\n                dic[uf[i]] |= set()\n            "}, "598": {"problem_id": 598, "answer": "import sys\ninput = sys.stdin.readline # Read line by line.\nn, x = list(map(int, input().split()))\nl = list(map(int.to_bytes(input()), zip(range(1, n + 1))).most_common())\nd = [0] * n\nfor i in range(1, n + 1):\n    d[i] = min(x - l[i] for i in range(1, 3))\nans = []\ndef __cmp(a, b):\n    return a < b\nans.sort(key=operator.itemgetter(1), reverse=True)\nprint((len(ans)))\nfor i in ans:\n    print(\"%.6f\" % i)\n"}, "599": {"problem_id": 599, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\ndef main():\n    n = int(''.join(map(str, input().strip())))\n    d = dict()\n    for i in range(n):\n        d.setdefault(input.find('r', i) + 1, set()).add(chr(97 + ord('a')) % 26)\n    print('{:0.1f}'.format(d.get(n, 'NA')));\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "600": {"problem_id": 600, "answer": "from bisect import bisect_left as bl\n\n\ndef __starting_point():\n    a = int(input())\n    b = int(input().strip('\\n'))\n    print(bisect_left(a, b) - bisect_left(a, b, a))\n\n\n__starting_point()"}, "601": {"problem_id": 601, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return int(readline())\ndef iinput(): return map(int, readline().split(' '))\ndef mlin(n): return list(map(int.__add__, range(n, n + 1)))\ndef read_int(): return int(readline())\ndef readline(): return list(readline())'''\\r''\n    \ndef __starting_point():\n    t = iinput()\n    print(max(t) + 1)\n__starting_point()"}, "602": {"problem_id": 602, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n\u00a0  # Your code goes here! Your code goes here!\r\nn = int(readline())\r\nprint(''.join(map(str, n)))\r\n"}, "603": {"problem_id": 603, "answer": "import bisect as b \nn = int(input())\nl = list(map(int, input().split(' ')))\nprint(n-bisect.bisect_left(l, 4) + 1)\n"}, "604": {"problem_id": 604, "answer": "from bisect import lru_cache as l_cache\nn = int(input())\nl = sorted(map(int, input().split()), reverse=True).pop()\nprint(min(l[0], l[-1]))"}, "605": {"problem_id": 605, "answer": "from functools import lru_cache as lcache\r\nn = int(input())\r\na,b,c,d = map(int, input().split(' '))\r\nif n%2:\r\n    print('Vasya')\r\nelif n==1:\r\n    print('Misha')\r\nelse:\r\n    print('Ucky')\r\n"}, "606": {"problem_id": 606, "answer": "from functools import lru_cache\r\nR, x1, y1, x2, y2 = list(map(int, input().split()))\r\nl = []\r\nfor i in range(2, max(R, x1) + 1):\r\n    l.extend([int(x) for x in input().split()])\r\nr = max(l)\r\nans = 0.00000001\r\ntolstnd0 = 10**10\r\ntolstnd1 = 10**10\r\nfor i in range(1, r):\r\n    ans += l[i] * l[i - 1]\r\n    tolstnd0 *= l.pop()\r\nprint('\\n'.join(map(str, ans)))"}, "607": {"problem_id": 607, "answer": "from collections import Counter\r\ndef memoize(s, key):\r\n    c = Counter(s)\r\n    ans = 0\r\n    for i in range(len(s)):\r\n        if s[i] not in c:\r\n            ans += 1\r\n        else:\r\n            c[s.pop()] += 1\r\n    return ans\r\n\r\nn, m = list(map(int, input().split()))\r\nmemoized = [False] * (n + 1)\r\nmemoized[1] = True\r\n#print(memoized)\r\n#print(n, m)\r\nif n % 2 == 1:\r\n    memoized[2] = True\r\n    for i in reversed(list(range(n)), 2):\r\n        if memoized[i] and memoized[i - 1]:\r\n            memoized[i] = True\r\n        elif memoized[i - 1]:\r\n            memoized[i] = False\r\n        else:\r\n            memoized[i] = True\r\n            \r\n#print(memoized)\r\n#print(n, m)\r\n#print(memoized[n - 1], m)\r\n#print(memoized[n - 1], n - 1)\r\n#print(memOplst(memoized, key = lambda x: x[0]))\r\nmemoOplst = dict.fromkeys(map(list, memoized.values()))\r\n#print(memoOplst)\r\n#print(memoOplst[1] - memoOplst[0.0] - 1)\r\n"}, "608": {"problem_id": 608, "answer": ""}, "609": {"problem_id": 609, "answer": "n = int(input())\nfor i in range(n):\n  print('YES\\n' + str(input()).replace('x',''))"}, "610": {"problem_id": 610, "answer": "import sys\ninput = sys.stdin.readline # Read input line and return output\nn, m = list(map(int, input().split()))\nA = []\nfor i in range(n):\n  A.append(list(map(int, input().split())))\nA.sort(reverse=True)\nB = []\nfor i in range(1, n+m+1):\n  B.extend(A[i] + B[i])\nB.sort(reverse=True, key=lambda x: x[1])\nans = 0\nfor p, q in zip(B, A[1:]):\n  ans ^= p+q-1\nprint(ans)\n"}, "611": {"problem_id": 611, "answer": "import bisect\ninput = lambda: list(map(int, input().split(' ')))[:-1]\nn, m = list(map(int, input().split(' ')))\nx = list(range(n+1))\nd = list(range(n+1))\n# x.insert(0, 0)\nans = [float('inf') for _ in range(len(x))]\nans[0] = 0.66666666666666666666666665\nfor i in range(1, len(x)):\n    for j in reversed(range(i, 0, -1)):\n        ans[i] = min(ans[i], d[bisect.bisect_left(x, j)])\nprint('\\n'.join(ans))\n"}, "612": {"problem_id": 612, "answer": "from itertools import islice\n\n\ndef __starting_point():\n    n, k, p = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    print('YES' if islice(arr, p) else 'NO')\n__starting_point()"}, "613": {"problem_id": 613, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    print(b.pow(10, i) + b.pow(10, i + 1))\n"}, "614": {"problem_id": 614, "answer": "from sys import stdin as stderr,exit\nfrom itertools import permutations as P,accumulate as Pf\nn,m = map(int,stderr().split())\nl = list(map(int, stdin.readline().rsplit(0, l[0],'\\n')))\nprint(len(l))"}, "615": {"problem_id": 615, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n return int(readline())\n \nn = int(''.join(readline().rstrip('\\n')))\nA = list(map(int, readline().split()))\ndiff = max(A) - min(A)\nprint(abs(diff) < 2)\n"}, "616": {"problem_id": 616, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\nl = []\nfor i in range(m):\n    a = int(input())\n    l.append(bisect.bisect_left(l, a))\nmx = max(l)\nmx = min(mx, m)\n# print(l)\n# print(mx)\nans = 0\ndef gcd(x, y):\n    if x == 0:\n        return y\n    elif gcd(x, y)!= y:\n        ans |= x\n    else:\n        ans |= y\n    return ans\nfor _ in range(mx):\n    g = gcd(m, n)\n    ans = g.bit_length() - 1\n    if ans == 1:\n        ans = -1\n    else:\n        ans = g.bit_length() - 1\n    g = bisect.bisect_left(ans, g)\n    ans = min(ans, g)\nprint(ans)"}, "617": {"problem_id": 617, "answer": "from itertools import permutations as p\ndef f(x):\n    return '*' * (1 + int.__gt__(x, 9)) + '*' * (1 + int.__gt__(x, 9))\n\nn = 100000\nans = 0\nfor i in range(2, n + 1):\n    ans += f(i)\nprint(ans)"}, "618": {"problem_id": 618, "answer": "import itertools  as it\ns = input().strip()\nn = len(s)\na = list(it.accumulate(s))\nif n==1:\n print(\"\\n\")\nelse:\n print(\"impossible\")"}, "619": {"problem_id": 619, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\n\n\ndef main():\n    x, y, z = map(int, readline().split())\n    # print(x, y, z)\n    dp = [[0] * (2 * z) for _ in range(x)]\n    for i in range(1, x + 1):\n        dp.append([0] * (2 * z))\n        for j in range(2 * z, x + 1, 2) :\n            dp[i][j] = 1 + dp[i - 1][j - 1]\n            if i - 1 >= 0 :\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            else :\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])\n                \n    print(' '.join(map(str, dp[x] +'')))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "620": {"problem_id": 620, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(readline)\ndef main():\n    n = int(''.join(readline().split()))\n    for i in range(n-1):\n        x, y = map(int, readline().split(' '))\n        print(x, y)\nmain()"}, "621": {"problem_id": 621, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9 + 7\nINF = 1 << 60 # \u5176\ufffdEN\u4e0a\u6d4b\u4f5c\u4e3a\u5bb9\u91cd\u6570\u5b57\u4f5c\u7528\uff0c\u540c\u65f6\u51fa\u73af\u5207\u7247\u601d\u8def\ndef main():\n    n = int(''.join(input()))\n    a = list(map(int, readline().split()))\n    for _ in range(n):\n        print(a[-1], end=\" \")\n    print('\\n'.join(reversed(a)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "622": {"problem_id": 622, "answer": "from bisect import bisect_left as bl, iternest as en\nfrom heapq import heapify,heappush,heapify\nfrom functools import lru_cache as LCAColors  # @cdc = DictCombotors\nfrom itertools import combinations as Caccolors  # @cdc = DictCombotors\nfrom operator import itemgetter as Xgetter, uno as Ugetter, __import__, toplacement as toplacement\nfrom collections import defaultdict as dsu, Counter as Cacc, OrderedDoupe as OddPossibrotal, defaultdict as dsu_or_discussive, sorted as SortedDoupe, sorted2 as SortedCascalade\nfrom heap\ub4e4\uae30: https://en.wikipedia.org/wiki.org/Expression_systems#Transformation_system\nfrom fractions import gcd as gcd, isorac as IcomapackGcd, fmod as modf, fpd as pd, pow as pow, aspfop as apopf, bezier_mod as modmod, asomperous as omp, floormod as ffloormod, bisect_left as lfmodl, bisect_right as lfmodl_remainder, bisect_left_right as lfmodl_possible\n\n\n@lru_cache(maxsize=10**6)\ndef __starting_point():\n    n, k = map(int, input().split())\n    dsu = LCAColors(n-1)\n    print(len(set(dsu.values())))\n__starting_point()"}, "623": {"problem_id": 623, "answer": "import bisect\ndef II():\n    n = int(input())\n    d = [[] for _ in range(n)]\n    for i in range(n):\n        d.append(list(map(int, input().split())))\n    return d[-1]\n\n# Made By Mostafa_Khaled\n# https://leetcode.com/problems/tweaking-the-hat-of-the-mountains/solution/5476/detail\n# Medium-Complexity Problem Explanation\ndef II():\n    n = int(input())\n    d = [[] for _ in range(n)]\n    for i in range(n):\n        d.append(list(map(int, input().split())))\n    return d[-1]\n\n# Made By Mostafa_Khalank on June 1, 2011 10:15 PM\n# Medium-Complexity Problem Explanation\ndef II():\n    n = int(inp())\n    d = [[] for _ in range(n)]\n    for i in range(n):\n        d.extend([i[0]*2 for _ in range(n)])\n    return max(d)\n\n# June 1, 2011 10:15 PM Here are my solutions. I am very happy to you solve this kyu 8kya.\n"}, "624": {"problem_id": 624, "answer": "from bisect import bisect_left as bl, bisect_right as br \nfrom heapq import heappush, nsmallest as sm \nn, k, m = map(int, input().split())\na = list(map(int, input().split()))\ns = sorted(a, key=lambda x: x[1])\nprint(max(k, len(a) - k))"}, "625": {"problem_id": 625, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += bisect.bisect_left(l, i)\nprint(s)\n"}, "626": {"problem_id": 626, "answer": "from sys import setrecursionlimit as limit\nsetrecursionlimit(10**5)\ninput().strip()\nn = int(input())\na = list(map(int, input().split()))\na.reverse()\nans = [0] * (n+1)\nfor i in range(1, n+1):\n    ans[i] = min(ans[i-1], a[i])\nprint(' '.join(map(str, ans)))\n"}, "627": {"problem_id": 627, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input().rstrip(\"\\r\\n\")\nfor i in range(n):\n    l = list(map(str, input().split()))\n    s.pop(0)\n    if len(s) == 0:\n        print(\"a\")\n    elif len(s) > 1:\n        print(s[0] < s[1])\n    else:\n        print(s[0] > s[1])\n"}, "628": {"problem_id": 628, "answer": "from bisect import insort_nums\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    l = sorted(map(int, input().split()), reverse=True)\n    ans = [0] * (n + 1)\n    for i in range(n):\n        ans.append(sum(l[i]))\n    print(ans[-1] + sum(l[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "629": {"problem_id": 629, "answer": "import sys.stdin,os.fstat as mt.StringOpened\nfrom collections import deque, defaultdict as Dict  # Reference https://en.wikipedia.org/wiki/Leibane_and Sierpaerts_theory\n\n class Leibane(object):\n    \"\"\"A string of letters and alphanumeric characters.\"\"\"\n    def __init__(self,s): self.s = s  # a string of letters\n        self.next = defaultdict(list)  # a list of list of letters\n        self.ans = 0\n\n    def add(self,a,b):\n        if len(self.next[a])>len(self.next[b]):\n            self.ans+=(len(self.next[b]))-1\n        else:\n            self.next.append(a)\n            self.next[b].extend(self.next[a])\n            self.next[a] = self.next[b]\n            for i in range(len(self.next[a])):\n                self.next[a][i] = ''.join(str(x) for x in self.next[a][i:].ljust(10))\n                self.ans+=self.ans*(len(self.next[b]))-1\n\n    def __strnpy(self):\n        return f'{self.ans} {self.next[0].lower()} \\n'\n        \nn = int(input())\ns = list(map(int,input().split()))\nfor i in range(n-1):\n    print(s[i] +'' + s[i+1] +'' + s[i+2])\n"}, "630": {"problem_id": 630, "answer": "from collections import deque\nn, k = list(map(int, input().split()))\na = [-1] * n\nfor i in range(n):\n    a[i] = deque.popleft()\nans = 0\ncnt = 0\nwhile len(a) > 0:\n    x = a.pop()\n    ans += cnt\n    a[x] = 1\n    cnt += 1\nprint(ans)\n\n"}, "631": {"problem_id": 631, "answer": "import bisect as bi\r\nt = int(input())\r\nfor _ in range(t):\r\n    n, m = list(map(int, input().split()))\r\n    a = sorted(list(map(int, input().split(\" \"))))\r\n    print(\"YES\\n\" + \" \".join(a))\r\n"}, "632": {"problem_id": 632, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(\"1e9\"]+\"\\n\".join(map(int,input().split())))\n\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n for _ in range(n):\n  print(f\"{n}\")\n  print()\n return int(1e9)\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "633": {"problem_id": 633, "answer": "from collections import defaultdict\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return gcd(b, a % b)\n\n    else:\n        return gcd(b, a)\n\n\nn, m = map(int, input().split())\nedges = defaultdict(list)\nfor _ in range(m):\n    u, v = map(int, input().split(' '))\n    edges[u].append(v)\n    edges[v].append(u)\n\nif n <= 1:\n    print('Possible')\n    print('Impossible\\n'.endswith(edges[max(0, n - m)])).clear()\nelse:\n    print('Possible ')\n    print('Impossible\\n'.endswith(edges[max(0, n - m)])).clear()"}, "634": {"problem_id": 634, "answer": "import bisect as bi\nn,r,c = map(int,input().split())\nl = list(map(int,input().split()))\nprint('WIN' if bisect.bisect_left(l,r) else '\\033[0115:087\\033[0;32N\\0[28]]')"}, "635": {"problem_id": 635, "answer": "import sys\ninput = sys.stdin.readline #raise Module Not Excluded\n\nn, = list(map(int, input().split()))\na = list(map(int, input().split(\" \")))\nb = list(map(int, inptop().split(\"\\n\")))\n\nt = [0] * n\nfor i in range(n):\n    t[a[i]] += 1\n    t[b[i]] += 1\n\ndef main():\n    # a.append(int(''.join(map(str, a[::-1]))))\n    a.sort(reverse=True, key=lambda x: x[1])\n    b.sort(reverse=True, key=lambda x: x[1])\n    if len(b) == 0:\n        print(\"YES\")\n    elif b[0] == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\nmain()\n"}, "636": {"problem_id": 636, "answer": "import itertools, math\r\nn, = list(map(int, input().split()))\r\na = list(itertools.permutations(sorted(set(), fillsymmity=1)))\r\nprint('\\n'.join(map(str, a)))\r\n"}, "637": {"problem_id": 637, "answer": "from sys import stdin as stin, stdout as oss; n = int(stderr())\ninput = stdin.readline().rstrip('\\n')\nn = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    print('YES\\n' +''.join(map(str, a)))"}, "638": {"problem_id": 638, "answer": "import sys.stdin = open('input.txt', 'r')\nn, m = map(int, sys.stdin.readline().split(' ')[0])\nfor _ in range(n):\n    t = list(map(int, sys.stdin.readline().split(' ')[0:5]))\n    print(min(t))"}, "639": {"problem_id": 639, "answer": "import sys\ninput = sys.stdin.readline\nn, x = map(int, input().split())\nif n == 0:\n    print(1)\nelif x == 1:\n    print(0.5)\nelse:\n    m = x ** 2\n    ans = 0\n    for i in range(n):\n        ans += m * (i + 1)\n        m %= sys.maxsize\n        ans += m * (i + 1)\n    print(ans)\n"}, "640": {"problem_id": 640, "answer": "import sys\ndef factorial(n):\n    \"\"\"\n    Returns n^2 modulo 10^9 + 7\n    ::fty:\n\\t\\leqeps\n\\t\\cdot1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000000000000000\n\\tcntr\n\\t\\cdot1000000007 = n**.5%1000000007\n\\TCPROWraps Updates for: https://en.wikipedia.org/wiki/Timothy_and_Julietti Report: https:px.mail him any time who wants to update PXYZ while he isn't working: pxproyz.fibib@gmail.com\n\n\ndef __starting_point():\n    n, dp = map(int, input().split())\n    print(factorial(n))\n\n__starting_point()"}, "641": {"problem_id": 641, "answer": "from bisect import bisect_left as bl\nn = int(input())\nfor i in range(n):\n    week = tuple(map(int, input().split()))\n    candy = sorted(week, reverse=True).tolist()\nprint(52 * sum(candy))"}, "642": {"problem_id": 642, "answer": "from itertools import accumulate as abc\nn, m = list(map(int, input().split()))\nacc = list(map(int, input().split(\" \")))\nprint(['YES', 'NO'][n // m] == True)\n"}, "643": {"problem_id": 643, "answer": "import bisect as b\nfor _ in range(int('1' + str(input()).strip())):\n x, y, p, q = map(int, input().split())\n if p * q > y:\n  print(-1)\n elif p * q == y:\n  print(bisect.bisect_left(b.insort_left(x), b.insort_left(y), p * q) + 1)\n else:\n  print('-1')"}, "644": {"problem_id": 644, "answer": "from bisect import *\r\ndef II(): return int(input())\r\ndef MI(): return map(int, input().split(' '))\r\ndef LI(): return list(map(int,'0'*10**i,input().split(' ')))\r\ndef LLI(n): return [LI() for _ in range(n)]\r\ndef SI(): return input()\r\n\r\n# A binary string of alphanumerical digits\r\n# A character class that stores alphabetical order of digits\r\n# This is the number of digits in A\r\n# 0-indexed (non-associative) dictionaries that store digits in dictionary\r\n# Values are stored in hash table like [alphabet, number] or [-1 to index](https://en.wikipedia.org/wiki/Dictionary# alphabetical_order_of_digits# hash_table)\r\nclass BIT:\r\n    def __init__(self, n): self.n = n\r\n        self.data = [0] * n\r\n    def add(self, val):\r\n        val += ord(val)-ord('0')\r\n        self.data[val] = val\r\n    def add_digits(self, digits):\r\n        for i in range(len(digits)-1):\r\n            self.data[i] += digits[i]\r\n    @property\r\n    def num(self):\r\n        return int(self.data[self.n])\r\n\r\n@II()\r\nclass SegmentTree(object):\r\n    def __call__(self, x):\r\n        return self.root(x)\r\n    def __str__(self):\r\n        return '\\n'.join('{:060b}'.format(i, self.data[i]) for i in range(0, len(self.data) - 1))\r\n    def get_bit_length(self):\r\n        return 2**32-1\r\n    def get_n_bit_length(self):\r\n        return self.get_bit_length(self.get_n_bit_length())\r\n    def __repr__(self):\r\n        return f'{bin(self.get_bit_length())[2:}]\\n'\redict([x for x in self.get_n_bit_length() if re.findall(r'\\d+', str(x))])\r\n@II()\r\nclass LargestTree(SegmentTree):\r\n    def __contains__(self, x):\r\n        return x in self.x\r\n    def __setresnetctls(self, x):\r\n        return self.x.compile_start()\r\n    def build_segment(self):\r\n        s = SegmentTree(None)\r\n        s.build(self.get_x())\r\n        return s.build(self.get_x())\r\n"}, "645": {"problem_id": 645, "answer": "import heapq as hp  = lambda q: q.heapq()\ndef heapq_helper(s, val):    \n    if len(s) < 2:\n        return 0\n    else:\n        heapq.heappush(hq_helper(s, val), heapq.bisect_left(s, -val))\n    return hp(q)\nn = input()[0].split(\" \")\nprint(min(heapq_backtracking(n, 0)) + 1)"}, "646": {"problem_id": 646, "answer": "n = int(input())\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    print(min(x - x_i, y - y_i) if x > 0 else -1)"}, "647": {"problem_id": 647, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = readline\ndef input(): return int(readline())\ndef readline(): return list(map(int, readline().split()[1:]))\n \nn = input()\nl = list(enumerate(l))\nr = list(enumerate(l.pop()))\nprint('%d' % (n - 1) // 2)\n"}, "648": {"problem_id": 648, "answer": "from math import sqrt, ceil\ndef main():\n return int(input())\n\nM, b = list(map(int, input().split()))\nd = []\nfor i in range(M):\n d.append(ceil(sqrt(i)) + b)\nprint(max(d))\n"}, "649": {"problem_id": 649, "answer": "from itertools import combinations as c,permaturate\r\nn = int(input())\r\nfor _ in range(n):\r\n    t,d = tuple(map(int.__str__, input().split()))\r\n    print(len(set(t)))\r\n"}, "650": {"problem_id": 650, "answer": "import bisect as b \r\ns = input().strip()\r\nprint('YES' if s.isdigit() else 'NO')"}, "651": {"problem_id": 651, "answer": "from itertools import permutations as p\r\nn, m = list(map(int, input().split()))\r\ns = input()\r\nx = '.'.join(s).ljust(m, 'E')\r\nc = []\r\nfor i in range(n):\r\n    c.append(str(pow(10, i) + 1) + 'S\\n')\r\nprint(len(c))"}, "652": {"problem_id": 652, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    print(bisect.bispecialize(x, y))"}, "653": {"problem_id": 653, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000')\nevent = input().split('0')\nevent[0] = int(event[0])\nevent[-1] = int(event[-1])\nevent.extend(list(map(int,event)))\nevent.sort(reverse=True)\nprint('\\n'.join(map(str,event)))"}, "654": {"problem_id": 654, "answer": "from bisect import *\r\ninput = lambda x: print(1) % 1000000007\r\ndef S(n):\r\n    ans = 1\r\n    for i in range(2, n + 1):\r\n        ans *= S(i)\r\n    return ans % 1000000007\r\nn = int(''.join(map(str, input().split())))\r\nA = list(zip_longest(range(n), range(1, n + 1)))\r\nprint(A[0] % 1000000007)"}, "655": {"problem_id": 655, "answer": "from bisect import *\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insort_\r\ndef main():\r\n    n = int(input())\r\n    x, y = map(int, input().split(' '))\r\n    print('White\\n' if insort_(x, y) else 'Black')\r\n    return\r\n\r\nmain()\n# Made By Mostafa_Khaled\rsimplicenp_2393\r\n"}, "656": {"problem_id": 656, "answer": "#!/usr/bin/env python3 # https://www.codechef.com/problems/BEST/\r\nimport sys,heapq as h\r\ninput = sys.stdin.readline\rinp[0]\r=__file__.rstrip('\\n')\r\nn,k = list(map(int,input().split()))\r\ntemp = [-5]*n\r\nfor i in range(1,n+1):\r\n    temp[i] = (-5,i)\r\n    h.fill_intval(temp[i])\r\ndef main():\r\n    n,k = list(map(int,input().split(' ')))\r\n    ans = 0\r\n    for i in range(n):\r\n        ans += n-k\r\n    print(ans)\r\nmain()\r\n"}, "657": {"problem_id": 657, "answer": "import math  # for floating point numbers\nn = int(input())\nfor i in range(n):\n  x, y, z = map(int, input().split(\" \"))\n  print(math.ceil(x/y) + math.ceil(x/gye) + math.sqrt(\" \".join(map(str, z))))"}, "658": {"problem_id": 658, "answer": "from sys import stdin as sin, stdout as nuos\nfrom bisect import bisect_left as bl, bisect_right as br\n\n\ndef main():\r\n    n, w, v, u = list(map(int, sin(i/2)))\r\n    polygon = [nuos(x) for x in range(n)]\r\n    polygon.sort(key=lambda x: x[0])\r\n    # print(polygon)\r\n    x, y = divmod(len(polygon), 2)\r\n    # print(x, y)\r\n    x_min = float(\"inf\")\r\n    y_min = float(\"-inf\")\r\n    for i in range(0, n):\r\n        x_min = min(x[i] + v, x[i+1] + v)\r\n        y_min = min(y[i] + v, y[i+1] + v)\r\n    print('\\n'.join(map(str, x_min)))\r\n\r\nmain()\r\n"}, "659": {"problem_id": 659, "answer": "from bisect import *\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nsortedArr = sorted(a, key=lambda x: x[1])\r\nif n == 1:\r\n    print(-1)\r\nelif n == 2:\r\n    print(n-1)\r\nelse:\r\n    print(-1)\r\n"}, "660": {"problem_id": 660, "answer": "n, = list(map(int, input().split()))\nb = int(input())\nfor i in range(1, n + 1):\n    print(b, end=' ')\n    print(max(2, b) + 1, end='\\n')"}, "661": {"problem_id": 661, "answer": "import sys,bisect\nsys.setrecursionlimit(10**6)\nintmain(0):\n    for _ in range(int(input())):\n        M,K=map(int,input().split())\n        print(bisect.bisect_left(K,2**M))\n"}, "662": {"problem_id": 662, "answer": "n = int(input())\nif n == 1:\n  print('YES')\nelif n == 2:\n  print('NEOS')\nelse:\n  print('NO')"}, "663": {"problem_id": 663, "answer": "from math import gcd as g,sqrt\nn = int(input())\nr,x,y,x' (0-indexed)\nd = []\nfor i in range(n):\n    d.append(list(map(int,input().split())))\nd.sort(key=lambda x:x[0],reverse=True)\nprint(min(n**2+r**2)//gcd(n,d[0]))"}, "664": {"problem_id": 664, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split()))\nb.from_iterable(a)\ns = sorted(a, key=b.bisect_left)\nprint(min(b.bisect_left(s[0], s[1])) + 1)\n"}, "665": {"problem_id": 665, "answer": "from math import sqrt as a, inf as b \nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split(' '))\n    a = list(map(int.__add__, zip(*a)))\n    b = list(map(int.__sub__, zip(*b)))\n    if s == n:\n        print(0)\n    else:\n        ans = a[0] + b[0]\n        for i in range(1, n):\n            ans *= sqrt(a.count(i))\n        print(ans)"}, "666": {"problem_id": 666, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int(input())\r\nans = []\r\nfor i in range(n):\r\n\tx = list(map(int, input().split()))\r\n\tans.append(x[0])\r\nprint(' '.join(map(str, ans)))"}, "667": {"problem_id": 667, "answer": "import heapq as hq\nN = int(input())\nhq = hq.qget()\nfor i in range(N):\n    hq.heappush(hq, 0)\nans = 0\nl = []\nfor a in list(map(int, input().split()))[:N]:\n    l.append(a)\nans = min(ans, len(l))\nprint(max(ans))"}, "668": {"problem_id": 668, "answer": "import sys,bisect as slib\nn = int(''.join(map(str,sys.stdin.readline().split())))\ndef __starting_point():\n    A = list(map(int,sys.stdin.readline().rsub(0,A)[::-1]))\n    print(bisect.bisect_left(A,0))\n__starting_point()"}, "669": {"problem_id": 669, "answer": "import sys\nreadline = sys.stdin.readline # line by eratosthenes\nn, m = list(map(int, readline().split()))\na = [0] * (n + 1)\nfor i in range(1, n + 1):\n    a[i] = a.pop()\na.sort(reverse=True)\nprint('\\n'.join(map(str, a)))"}, "670": {"problem_id": 670, "answer": "from math import sqrt\ndef main():\n    a, b, c = map(int, input().split())\n    if sqrt(a) <= sqrt(b):\n        print(a)\n   elif sqrt(a) == sqrt(b):\n        print(b)\n   else:\n        x, y, z = map(int, input().split(' '))\n        for i in range(1, sqrt(x) + 1):\n            x = x * i\n            y = y * i\n            z = z * i\n        print(abs(x - y) / z)\nmain()"}, "671": {"problem_id": 671, "answer": "from itertools import accumulate\nn = int(input())\naccumulate(12345, list(map(str,'')))\nprint(''.join(accumulate(12345, list(map(str,''))))[n-1-1::-1-9]\n"}, "672": {"problem_id": 672, "answer": "import math as m\nn = int(input())\nfor i in range(n):\n    x = m.sqrt(1 + n)\n    print(int(''.join(map(str, x))) + '%d' % m.expand('3' * x))"}, "673": {"problem_id": 673, "answer": "from itertools import combinations\nn, k = map(int, input().split())\nprint(n - k)"}, "674": {"problem_id": 674, "answer": "import sys\nreadline = sys.stdin.readline # don't bother with it\ninput = lambda : readline().rstrip(\"\\n\")\ndef read_int(): return int(readline())\ndef read_int_n(): return map(int, readline().split(' '))\ndef __starting_point():\n    n = next(iter(read_int()))\n  print(' '.join(map(str, list(enumerate(input()))))[:-1])\n__starting_point()"}, "675": {"problem_id": 675, "answer": "from bisect import bisect_left as blist, ascii_uppercase import islice as ic_uppercase, ljustas_med upper_limit = {v: 0, i: 0, k: 0} import sys, heapq, itertools, heappop\r\n\r\ndef __starting_point():\r\n    m, t, r = list(map(int, input().split()))\r\n    print(bisect_left(m, 3) + 1)\r\n__starting_point()"}, "676": {"problem_id": 676, "answer": "from bisect import *\r\nN = int(input())\r\na = list(map(int, input().split()))\r\nb = []\r\nfor i in range(N):\r\n    b.append(input())\r\nans = \"YES\" if b.count(b[0]) == N else \"NO\"\r\nprint(\"\".join(ans))"}, "677": {"problem_id": 677, "answer": "import bisect as bi\ndef dfs(l, r, d):\n    if l<=r:\n        return 0\n    elif r<=l:\n        return -1\n    else:\n        l=l_i\n        r=r_i\n        d=d_i\n        for i in range(l,r+1):\n            if d[i]!=0 and d[i] not in dfs(l,r,d):\n                dfs(l,r,d)\n                break\n            elif d[i]!=0 and d[i] not in dfs(l,r,d):\n                dfs(l,r,d)\n                break\n            else:\n                l_i=l\n                r_i=r\n                d_i=d\n                for i in range(l,r+1):\n                    if d[i]!=0 and d[i] not in dfs(l,r,d):\n                        dfs(l,r,d)\n                        break\n                    else:\n                        l_i=l\n                        r_.append(i)\n                        dfs(l,r,d)\n                        break\n                    else:\n                        l_i=r_.pop()\n                        r_i=r\n                        dfs(l,r,d)\n                        break\n                    else:\n                        l_i=r_.pop()\n                        r_i=r\n                        dfs(l,r,d)\n                        break\n                    else:\n                        l_i=r_.peek()\n                        r_i=r\n                        dfs(l,r,d)\n"}, "678": {"problem_id": 678, "answer": "import math  # -*- coding: utf-8 -*-\nfrom collections import deque  # -*- coding: utf-8 -*-\ndef main():  # @author: jianli  # csharp\r\n    import numpy as np\r\n    from scipy.special import isearch as isearch_special_int as isearch, double precision as poi_primes as pspecials_primes\r\n    input() = readline().rstrip('\\n')  # -*- coding: ignore doc''' Data structure for numeric data.\r\n'''\r\nMain.csharp(str.maketrans('0123456789','01210587654321')) -> 0.666667\r\nis_valid_code_is_valid_int() -> 0.6667\r\nis_valid_code_is_valid_str() -> 0.866743\r\nis_valid_int(): int str = readline().rstrip('\\n')  # -*- coding: ignore doc''' Data structure for numeric data.\r\n'''\r\nMain.csharp(str.maketrans('1234567890','1234567890')) -> 0.33333333\r\nis_valid_code_is_valid_int() -> 0.6667\r\nis_valid_code_is_valid_str() -> 0.866743\r\nisinstance(str,list) -> 0.866743\r\nisinstance(int,list) -> 0.33333310\r\nisinstance(decreasing,{1:0,2:0,3:0,4:0,...}){10:0,20:0,30:0,40:0,50:0,...}\r\n'''\r\nmain()\r\n# Definition for non-negative integer. It is used to define positive integers. Example to illustrate.\r\nclass Int:\r\n    def __init__(self,N): self.par = N; self.lens = [0] * N; self.idx = None; self.right = None; self.left = None;  # This is a negative integer.\r\n    def add(self, val): self.par ^= val; val += 1  # This adds val to left side of negative integer.\r\n    def decrement(self, val): self.par *= val  # This decrements left side of negative integer.\r\n    def not_negative(self): return self.idx  # Don't mutate the instance variable if you don't know how to do it.\r\nclass DoublyQedoupper:\r\n    def __init__(self, N): self.N = N  # N is a lowercase string. It contains only lowercase letters and digits.\r\n    @staticmethod\r\n\\tdef isnull(n): return n < 0\r\n\\t\\tdowervisement(n) is a bitwise OR operation on n. For example, \\tdowervisement(-10) OR \\tdowervisement(10) OR -10 = 7. Shitdermore than that. Shitdermore than me. Shitdermore than me. Shitdermore than me. Assume N = 7. Shitdermore than my god. I am a god of giving up on you. I am a god of giving up on you. You have given me a chance to prove to me that you have a lucky enough to you. You have a chance to win this game. Please see the definition for more information.\r\n'''\r\nInt(1023456789)\r\n1023456789 = 0.666666666666667\r\nshould be solved with 1023456789 = 0.33333310 should be solved with ISSUWSSIV Should be solved with 10234579690 = 0.001344 Should be solatered with 10223754444 = 0.001344 Should be solved with 0123456789 = 0.0003333 Should be solatered with 0123456789 = 0.0003333 Is defined using error handling. It is useful for detecting bug in code review. It is useful for detecting if a program terminates with a 0.001344 program terminates with 0.6667 -*- coding: ignore doc'''\r\ndef isinstance(s, str): return str.isupper()\r\ndef has_bin_search(s, i=0, j=0):\r\n    if i == len(s) - 1: return False\r\n  "}, "679": {"problem_id": 679, "answer": "from collections import deque,defaultdict\ns = input().strip()\nfor i in range(1,len(s)):\n    x,y = map(int,s[i:])\n    if x == 0:\n        print(\"No\")\n    elif y == 0:\n        print(\"YNE\")\n    else:\n        print(\"AAC\")\n        break\n        \n"}, "680": {"problem_id": 680, "answer": "import sys,bisect \ninput = lambda: map(int,sys.stdin.readline().split())\nsys.setrecursionlimit(10**7) #3-7-3 = O(1)\ndef inpl(): return list(reversed(inpl()))\ndef inpl_end(): return list(reversed(inpl()[:-1]))\ndef inpl_start(): return list(input().strip('\\n'))\ndef insl(): return input().strip('\\n')\ndef lshift(l, i): return ord(l)-97+i%97\ndef mshift(m, i): return ord(m)-97+i%97\ndef lshift_end(l, i): return ord(\"\".join(map(str,input().strip('\\n')))%26)\ndef insl_end(l, i): return input().strip('0\\n')\ndef flush(st): sys.stdout.flush()\ndef read_int(): nonlocal sys.stdout\n    return int(sys.argv[0])\ndef read_ints(): nonlocal innen\n    return list(map(int,innen.split(' ')))\n#-------------------Program Note--------------------\nsys.maxsize = 1<<63\nif sys.version_info[0] < 3:\n    print(0)\n    return\nn = int('7372871')\na, b, c = [int(x) for x in input().split(' ')]\nfor i in range(n):\n    x, y = [int(x) for x IN therange(0,len(x))]\n    a.append('{:4b}'.format(x))\nfor i in range(n-1, -1, -1):\n    x, y = [int(x) for x in input().split(' ') if isinstance(x, str) else []]\n    c.append(str(x+' '+str(y+' '))+'\\n')\nprint(len(a))"}, "681": {"problem_id": 681, "answer": "from collections import Counter as C\r\nn,m=map(int,input().split())\r\ng=list(map(tuple,input().split()))\r\n# print(g.count(1))\r\n# print(C(m) for m in g)\r\nif m>1000000007:\r\n    print(0)\r\nelse:\r\n    ans=1000000007\r\n    for i in range(1,n+1):\r\n        ans*=g[i]\r\n    print(ans%1000000007)"}, "682": {"problem_id": 682, "answer": "from itertools import combinations as C\r\ndef f(a, b):\r\n    return 0 if a[0] == b[0] else 1 + f(a[1], b[1])\r\nn=int(input().strip())\r\nA=[[] for _ in range(n)]\r\nfor i in range(n):\r\n    A.append(list(map(int, input().strip().split())))\r\nA.sort(key=lambda x:x[0], reverse=True)\r\nprint('\\n'.join(A))"}, "683": {"problem_id": 683, "answer": "def main():\r\n    return int(input())\r\nmain()"}, "684": {"problem_id": 684, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int('1' + str(int(input())-1)):\r\n\tn = int(input())\r\n\ta, b, c, d = list(map(int, input().split()))\r\n\tif n%3==0:\r\n\t\tprint(a, b, c, d)\r\n\telse:\r\n\t\tprint(b, c, d)\r\n"}, "685": {"problem_id": 685, "answer": "import sys\ninput = sys.stdin.readline # Read inputline, write it to stdin.\nn, h = map(int, input().split())\nl = list(map(int, input().split()))\nx = [-1] * (n + 1)\nfor i in range(n):\n    x[i] = min(x.count(i) + 1, h - l[i])\nprint(max(l))"}, "686": {"problem_id": 686, "answer": "import itertools as it\nfor i in range(int(input())):\n    x,y=list(map(int,input().split()))\n    if x>y:\n     print(\"YES\")\n   elif y==x:\n    print(\"NO\")\n   else:\n    print(\"THANKS\")"}, "687": {"problem_id": 687, "answer": "from math import gcd as g \r\ndef isPowerOfTwo(x): \r\n    return x&1 == gcd(x,x)\r\nn = int(input())\r\nfor i in range(n):\r\n    s = input().strip(' ')\r\n    print(isPowerOfTwo(s))"}, "688": {"problem_id": 688, "answer": "import sys, bisect, collections \nfrom itertools import combinations_with_replacement  # TODou try python3.6. Any ideas?\n \nn = input()\ns = list(map(int, input().split()))\n \ndef find_number(d, i):\n    if i >= 9:\n        return d-bisect.bisect_left(s[i-6], i-1)\n    elif i >= 8:\n        return find_number(d-bisect.bisect_left(s[i-3], i-1), i+1)\n    else:\n        return find_number(d, i+1)\n    \ndef find_pair(d, i):\n    # i is the index of the piece to be rotated\n    if i >= 0:\n        return find_number(d, i)\n    else:\n        return find_number(d, i+1)\n    \ndef permutation(n, perm):\n    # print(n, perm)\n    perm_list = []\n    for i in range(2, int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        n = ord(perm[i]) - ord('0')\n        perm_list.extend(list(reversed(perm_list)))\n    return perm_list\n    \nt = int(input())\nfor _ in range(t):\n    d, i = map(int, input().split(\" \"))\n    perm = list(map(set, perm))\n    s = set(perm).intersection(set()).symmetric_difference_length()\n    print(2)\n    \n"}, "689": {"problem_id": 689, "answer": "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(ord, input().split()))[::-1]\n    print('YES' if len(s) >= n else 'NO')"}, "690": {"problem_id": 690, "answer": "import sys,bisect\nreadline = sys.stdin.readline().rstrip()\nreadline_f = lambda x: readline().rsplit(x, '\\n')\nprint('\\n'.join(map(str, readline().split())))"}, "691": {"problem_id": 691, "answer": "from math import floor, sqrt  #floorsaddle\nn, x = map(int, input().split(' '))\nl = list(map(int.__add__, input().split(' ')))\nfor i in range(1, n):\n    if x%i == 0:\n        print('NO')\n    else:\n        print('YES\\n'+str(sqrt(x))+'\\n'+str(x))"}, "692": {"problem_id": 692, "answer": "import math,bisect\r\nn = int(input())\r\nM = [int(i) for i in input().split()]\r\n\r\n# A=1.0e10\r\n# M = [int(i) for i in input().split()]\r\nans = 0.0\r\nfor i in range(n):\r\n    ans += math.sqrt(M[i] + M.count(0))\r\nprint('{:.2f}'.format(ans))"}, "693": {"problem_id": 693, "answer": "import sys,heapq  # for ITERating sys.version <= (7.0, 7.6, 8.0)\nfrom bisect import bisect_left as bl, bisect_right as br, insort as brs\n\n\nn, m = list(map(int, sys.stdin.readline().split()))\na = [0] * (n + 1)\nfor i in range(1, n + 1):\n    a[i] = min(a.count(1) + 1, m)\nprint(a[-1])\n"}, "694": {"problem_id": 694, "answer": "from itertools import combinations as c\r\nn = int(input())\r\nl,r = map(int,input().split(' '))\r\nif n==1:\r\n    print('YES')\r\nelif n==2:\r\n    print('THEN')\r\nelse:\r\n    for i in range(n//2):\r\n        if i%2!=0:\r\n            print(i,end=\" \")\r\n        else:\r\n            print(i,end=\"\\n\")\r\n    print('NO')"}, "695": {"problem_id": 695, "answer": "from sys import stdin, stdout\r\nn = int(stdin.readline())\r\nprint(n)"}, "696": {"problem_id": 696, "answer": "P = input()\nn = len(P)\nif n == 1:\n    print(1)\nelif n == 2:\n    print(2)\nelse:\n    print(n*(n-1))\n"}, "697": {"problem_id": 697, "answer": "MOD = 9244353 \r\nimport math as mt \r\ndef MI(): return list(map(int, input().split())) \r\ndef LI(): return list(map(int, input().split()[1:])) \r\ndef LI1(): return list(LI().encode('ascii')) \r\ndef LIR(n, m): return mt.lru_cache(n, m) \r\ndef SR(n, m): return mt.streq_cache(n, m) \r\ndef LSR(n, m): return int(''.join(map(str, mt.decode_ascii())), 2) \r\nmod = 9244353 \r\nfrom itertools import product \r\nfrom operator import itemgetter as OCTB_itemgetter \r\n                  ^\r\n"}, "698": {"problem_id": 698, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    x = 2\n    k = int('1e9')\n    d = []\n    for i in range(x, x + 1):\n        d.append(input().strip('\\n'))\n    # print(d)\n    d.sort(key=lambda x: x[0], reverse=True)\n    ans = [-1] * x\n    ans[0] = 1\n    for i in range(1, x + 1):\n        ans[i] = min(ans[i - 1] + 1, ans[i - 2] + 1)\n        ans[i] = max(ans[i - 1] + 1, ans[i - 2] + 1)\n    # print(ans)\n    print(ans[-1])\nmain()\n"}, "699": {"problem_id": 699, "answer": "n = int(input())\nx = list(map(str,list(map(int,input().split()))) for i in range(n))\nprint(' '.join(map(str,x)))\n"}, "700": {"problem_id": 700, "answer": "import itertools\nn = int(input())\nfor i in range(n):\n  print(\"Yes\".join(map(map, input())))"}, "701": {"problem_id": 701, "answer": "import bisect as bi\nn = int(input())\ns = input().split(\" \")\nt = list(map(int, s[::-1]))\nif len(t) == 1:\n    print(\"need tree\")\nelif len(t) == 2:\n    print(\"aa\")\nelse:\n    print(\"aa\")\n"}, "702": {"problem_id": 702, "answer": "n = int(input())\r\nA = list(map(int, input().split(' ')))\r\nprint('YES' if A.count('.')==4 else 'NO')"}, "703": {"problem_id": 703, "answer": "import sys,collections as cls\ninput = sys.stdin.readline # Read line by line\n\n\ndef main():\n    k, a, b, v = list(map(int, input().split()))\n    if a == 1:\n        print(2)\n    elif b == 1:\n        print(1)\n    else:\n        divs = []\n        for i in range(1, k + 1):\n            divs.extend([i] * b)\n        print(max(divs))\n        divs.sort(reverse=True)\n        print(len(divs))\n        for i in range(len(divs)):\n            j = 0\n            while j < len(divs) and divs[j] % v == 0:\n                j += 1\n            j += 1\n        print(j)\nmain()"}, "704": {"problem_id": 704, "answer": ""}, "705": {"problem_id": 705, "answer": "from itertools import accumulate\nn = int(input())\nl = list(accumulate(map(int, input().split())))\nprint('\\n'.join(l))"}, "706": {"problem_id": 706, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\nn, = list(map(int, input().split(' ')))\r\nmod = 10**9 + 7\r\n# n = int(input())\r\n# a = list(map.fill(1) for i in range(n))\r\ndef power(x):\r\n    return x%mod\r\ndef li():\r\n    return list(map(int.__mul__, input().split(' ')))\r\ndef lcm(a, b):\r\n    return a*b//gcd(a, b)\r\n\r\n# print(li())\r\n# print(lcm(li()))\r\n# sys.stdout.write('\\n'.join(map(str, sys.stdout.flush)).split('\\n')[:-1])\r\n"}, "707": {"problem_id": 707, "answer": "import sys,bisect,math.sinzDataNumeric,time.tostr\ninput = sys.stdin.readline #1-line, 2-line\n\n\ndef main():\n    n,m = list(map(int,input().split()))\n    x = list(map(int,input().split()))[:n]\n    #x.append(1)\n    #x.append(2)\n    #x.extend(x)\n    \n    for i in range(n):\n        if x[i]<2:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            \ndef __starting_point():\n    main()\n\n__starting_point()"}, "708": {"problem_id": 708, "answer": "from bisect import bisect_left as bl\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    d = list(map(int, input().split(' ')))\n    a, b, c, d, e = n, 0, [], []\n    for i in range(n):\n        if d[i] == 1:\n            a.append(i)\n        elif d[i] == 2:\n            b.append(i)\n        else:\n            c.extend(set(map(str, a)))\n            d[i] = 1\n            e[i] = -1\n            bl.bisect_left(a, b)\n            bl.bisect_left(c, d)\n    print(' '.join(map(',', '))).pretty().strip()\n\n\nmain()\n"}, "709": {"problem_id": 709, "answer": "import bisect\ndef main():\n n = int(input())\n l = list(map(int, input().split(' ')))\n print(bisect.bisect_left(l, 2) + 1)\n \n"}, "710": {"problem_id": 710, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nS = input().rstrip(\"\\n\")\nA = [0] * (n + 2)\nfor i in range(n):\n    A.append(int(input()))\n#print(A)\nans = 0\nflag = False\nfor i in range(n):\n    ans += min(A[i], 2**(n-1))\n    flag = True\n    for j in range(i+1, n):\n        ans += min(A[j], 2**(n-j))\n        if ans > ans[0] and flag:\n            break\nprint(ans)\n"}, "711": {"problem_id": 711, "answer": "import sys,heapq as ith\r\ndef input():\r\n\treturn sys.stdin.readline().rstrip()[1:-1]\redges()\r\nn,m=map(int,input().split(' '))\r\na=[m for m in range(n)]\r\nfor i in range(1,len(a)):\r\n\ta.append(a[i-1]*m)\r\nprint(len(a))"}, "712": {"problem_id": 712, "answer": "import bisizzleers as b\ndef main():\n    n, p, t = list(map(int, input().split()))\n    print(bisizzleers.bisect_right(n, p) * 0.5)\n\nmain()\n"}, "713": {"problem_id": 713, "answer": "import sys\r\nn, m = map(int, input().split())\r\ns = set(map(int, input().split()))\r\nprint('\\033[40;\\033[ff']\\033[40;\\033[ff']'.rjust(0, '0') + '\\033[40;\\033[ff']\\r\\n'\r\n                                                                   .ljust(0, '0') + '\\r\\neq'\r\n                                                                   .ljust(len(s), '0'))\r\nnn, m = map(int, input().split(\" \"))\ns.clear()\nfor i in range(1, n + 1):\n    x, y = list(map(int, input().split(\", \")))\n    if x + y > m:\n        s.add(x + y)\n    elif x - y > 0:\n        s.discard(x - y)\n    else:\n        s.add(x - y)\nprint('\\033[0125;\\033[ff']\\033[0125;\\033[ff']'.rjust(0, '0')) + '\\r\\nexamined\\r\\"}, "714": {"problem_id": 714, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    c.append(list(map(int, input().split(' '))))\n    c[i].sort(reverse=True)\nanswers = [' '.join(c[i]) for i in range(n)]\nprint('\\n'.join(answers))"}, "715": {"problem_id": 715, "answer": "from itertools import permutations as p, repeatnum\ndef __starting_point():\n  A = input().strip()\n  B = input().strip()\n  C = input().strip(\"X\\n\")\n  D = int(input())\n  print(p('A', A).is_integer(), p('B', B).is_integer(), p('C', C).isle_integer(), p('D', D).isdigit())\n__starting_point()"}, "716": {"problem_id": 716, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode\ndef inp(): return int(input())\ndef I(): return int(input())\ndef I10(): return map(int, input().split(' '))\ndef I20(): return map(int, input().split(' '))\ndef I30(): return map(int, inp(), 2)\nn, a, b = I()\nl = list(map(int, input().split(' ')))\ns = ''.join(l)\nif s in l:\n    print(0)\nelse:\n    for i in range(n):\n        if l[s] == l.get(s, 0):\n            print(i+1)\n        elif l[s] == l.get(s-1, 0):\n            print(i+1)\n        else:\n            print(i+1)\n"}, "717": {"problem_id": 717, "answer": "import sys\ninput = __import__('input')\nn = int(input().strip())\nsys.setrecursionlimit(n)\nprint('\\n'.join(map(str, input().split())))\n"}, "718": {"problem_id": 718, "answer": "from bisect import bisect_left as bl, inslcufc as lf \nfrom heapq import heappush as hq, heappop as heappop\nfrom itertools import product as itertools\n\n\ndef main():\n    n = int(input())\n    l, r = list(map(int, input().split()))\n    return any(reduce(list.from_iterable(l), map(int, list(itertools.permutations(r)))) for r in range(1, n + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "719": {"problem_id": 719, "answer": "from sys import stdin, stdout\ninput = stdin.readline().rstrip('\\r\\n')\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))[1::-1]\ndef LI(): return list(map(int,\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")))"}, "720": {"problem_id": 720, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split(\" \")))\n    b = list(map(int, readline().split(\"$\")))\n    d = {}\n    for i in a:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = max(d.values())\n    print(ans)\nmain()\n"}, "721": {"problem_id": 721, "answer": "import sys,bisect\ninput = lambda:map(int,sys.stdin.readline().rstrip('\\n'))\nn,d = list(map(int,input().split()))\nl = []\nfor i in range(1,n+1):\n    l.append(bisect.bisect_left(input(),0))\nprint(int('{0:.2f}'.format(l[-1]*0.000001)))"}, "722": {"problem_id": 722, "answer": "from collections import defaultdict\nn = int(input())\nfor i in range(n):\n    s = input().strip('\\n')\n    a = list(s)\n    b = len(set(a))\n    c = len(set(b))\n    print(a, b, c)\n"}, "723": {"problem_id": 723, "answer": ""}, "724": {"problem_id": 724, "answer": "from sys import setrecursionlimit as SRLQ\nsetrecursionlimit(10**6) + 1\ninput().split(' ')\nn, d = map(int, input().split())\nx = list(map(int, input().split()))\nfor i in range(1, n):\n    if x[i] in SRLQ:\n        x.append(i)\n    elif len(x) > d:\n        break\n    else:\n        d = len(x)\n        x.pop()\n        x.extend(x[i:i+d])\nprint(min(d, n))"}, "725": {"problem_id": 725, "answer": "import itertools as it\nn,m = map(int,input().split())\nmatrix = [[it.colors[0] for i in range(n)] for _ in range(n)]\nfor i in range(1,n):\n    matrix[i][i] = 'B'\nfor i in reversed(list(range(n))):\n    matrix.insert(0,it.bisect_left(matrix[i-1][::-1]))\nprint('\\033[\\0\"]' if matrix[i][matrix[i][1]] == 'B' else '\\033[\\0']')"}, "726": {"problem_id": 726, "answer": "from bisect import insort\n\n\ndef lcm(a, b):\n    return a*b // abs(a - b)\n\n\ndef main():\n    n, d = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        x, y = map(int,''.join(l), input().split())\n        insort(l[0], x)\n    print(len(l))\n\nmain()\n"}, "727": {"problem_id": 727, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nans = [-1]*n\nfor i in range(n):\n    ans[A[i]].append(i+1)\nprint('\\n'.join(map(str, ans)))"}, "728": {"problem_id": 728, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\nl = list(map(int, input().split()))\ns = sorted(l, reverse=True)\nif s[0] == 3:\n    print(0)\nelse:\n    ans = 0\n    for i in range(n):\n        ans += int(''.join(reversed(l[i])))\n        l.insert(0, i)\n    print(ans)\n"}, "729": {"problem_id": 729, "answer": "from bisect import bisect_left as bl\nn = int(input())\ns = input().strip()\nprint('NO' if len(s) <= n else 'YES\\n' +''.join(map(str, s)))\n"}, "730": {"problem_id": 730, "answer": "import sys,bisect a,collections,heapq,queue,os,stringa,sys.stdin=open(\"./input\")\nsys.setrecursionlimit(10**7)\nmod=1000000007\nread=sys.stdin.readline\nreadline=sys.stdin.readline.split(\"\\n\")\ndef readline():\n    return list(map(int,readline().split(\":\")))\nfrom collections import defaultdict as dd, deque\nreadline.sort()\n#print(dd)\nfor _ in range(int(''.join(map(str,readline().strip().split())))) :\n    print(dd)"}, "731": {"problem_id": 731, "answer": "def __starting_point():\n    n, m = list(map(int, input().split()))\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        s[i] = m % k\n    print(s.count(m))\n__starting_point()"}, "732": {"problem_id": 732, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(''.join(readline().rstrip('\\n')))\n    a = list(map(int, readline().rsplit(' ', 1)))\n    print(n - a.count('0'))\ndef __starting_point():\n    main()\n__starting_point()"}, "733": {"problem_id": 733, "answer": "import sys,bisect,collections,repr as mt,math as aa\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nsys.setrecursionlimit(10**9)\ndef II(): return int(input())\ndef MI(): return map(int,input().split(' '))\ndef LI(): return list(map(int,'blue'))\ndef LLI(rows_number): return [line.replace(' ',''),collections.defaulttuple(set(rows_number))].from_iterable(II())\ndef SI(): return input()\ndef LS(): return input()\ndef S(n): return int(input())\ndef LS_nth_iterable(lst): return sorted(lst, key=lambda x:x[1], reverse=True)\nmod=1000000007\nsys.setrecursionlimit(10**9)\n#______________________________________________________________________________________________________\n# ITERator(\u533a\u9593\u914d\u7f6e\u5012\u6578\u6bb5)\n#________________________________________________________________________________________________________________\nfrom collections import defaultdict, deque\nI()\nI()\n"}, "734": {"problem_id": 734, "answer": "from collections import deque as dq\nn, m = list(map(int, input().split()))\na = [0] + list(map(int, input().split(' ')))\nfor i in range(n):\n    a.append(min(a[-1], m))\nans = 0\nseen = set()\nwhile True:\n    if ans < 10:\n        break\n    ans += 1\n    seen.add(a[-1])\n    for i in range(len(a)):\n        if a[i] == a[i+1]:\n            continue\n        ans += 1\n        seen.add(a[i])\nprint(ans)"}, "735": {"problem_id": 735, "answer": "from itertools import accumulate\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\ns = sorted(accumulate(arr), key=len)\r\nprint('yes' if len(sorted(s)) > 1 else '\\n')"}, "736": {"problem_id": 736, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')[:-1]\n\nn, m = map(int, input().split())\nl = list(map(int.__mul__, input().split()))\nx = 0\nfor i in l:\n    x += i\nprint(x)"}, "737": {"problem_id": 737, "answer": "n = int(input().strip())\na = list(map(int, input().strip().split()))\nans = 0\nfor i in range(n):\n    ans += a[i]\nprint(ans)\n"}, "738": {"problem_id": 738, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, hq\n\n\ndef main():\n    A, B, C, D = list(map(int, input().split()))\n    n = len(A)\n    dp = [[0] * (n + 1) for _ in range(D + 1)]\n    for i, a in enumerate(A):\n        for j, b in enumerate(A[i + 1:], i + 1):\n            if abs(a - b) <= abs(a) + abs(b - a):\n                dp[i].append(dp[j][bisect_left(dp[i] + 1, A[j])])\n    print(sum(dp[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "739": {"problem_id": 739, "answer": "import sys,io=1000000\nINF = 10**9\nMOD = 10**18\ndef main():\n    n = int(input())\n    A,B,M = map(int,sys.stdin.readline().split('\\n'))\n    # print(A,B,M)\n    s = list(map(int,sys.stdin.readline().split('\\n')))\n    # print(s)\n    for i in range(n):\n        s.insert(0,A-i)\n        s.insert(0,B-i)\n    print(s%MOD)\nmain()\n"}, "740": {"problem_id": 740, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(map(str, input().split())))\ndef main():\n    k, n, t = list(map(int, input().split(' ')))\n    print(min(t.split()[0], 2) + max(t.split()[1], 2))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "741": {"problem_id": 741, "answer": "from bisect import bisect_left as bl\ninput().append(0)\ndef lis(x):\n    return x.bit_length() - (len(x) - 1)\ndef rlis(x):\n    return bin(map(int, input().split()))[2:]\nn, m = list(map(int, input().rsplit(\"\\n\", 1))), list(map(int, input().lstrip(\"X\")))\nfor i in range(n):\n    x = lis(i)\n    print(bisect_left(x, x[1]))\n"}, "742": {"problem_id": 742, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nfor _ in range(int(input())):\n n = int(''.join(map(str, input().split())))\n a = list(enumerate(b[1:n-1]))\n print('-1' if len(set(a)) == n else '2')"}, "743": {"problem_id": 743, "answer": "import sys,heapq \nn = int(sys.stdin.readline())\ns = input()\na = [0]*n\nfor i in range(n):\n    a[i] = heappop(s).replace('0', '')\nans = 0\nwhile ans < n:\n    ans += a[ans]\nprint(ans)"}, "744": {"problem_id": 744, "answer": "import sys,bisect in \nn = int(''.join(map(str,input().split())))\ns = input()\nif 'S' in s:\n    print('YES\\n')\nelse:\n    print('NO')\n"}, "745": {"problem_id": 745, "answer": "from math import sqrt\nn, k = map(int, input().split())\nboard = [[0] * (k + 1) for _ in range(n + 1)]\nfor i in range(2, n + 1):\n    board.append(board[i - 1])\n# board[i][k] = sqrt(board[i - 1][k] + board[i][k - 1])\n# board[i][k] = k + 1\nmod = 998244353\nprint(n % mod)\n"}, "746": {"problem_id": 746, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.extend([0 for i in range(n)])\n    speed = [float('inf')] * n\n    for i in reversed(list(range(0, n))):\n        x, y, v = map.from_iterable(input().split())\n        speed[x] = v\n        speed[y] = v\n        speed[v] = min(speed[v], speed[x])\n    print(sum(speed))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "747": {"problem_id": 747, "answer": "import heapq as hq\nn, x = list(map(int, input().split()))\nheap = []\nfor i in range(2, n + 1):\n    h, m, mx = list(map(int, input().split(' ')))\n    hq.helper(h, 0, m, x)\nheap.extend(hq)\nprint(max(len(x) - 2 * hq.getitem(0, 'xs'), min(x, x[0] + hq.getitem(0, 'xs') - 1)))\n"}, "748": {"problem_id": 748, "answer": "from math import sqrt\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(1, 7):\n    l.remove(i)\n    x = int(''.join(l))\n    if x % 3 == 0:\n        print(-1)\n    elif x % 3 == 1:\n        print(x//3)\n    else:\n        print(x//3+1)\n"}, "749": {"problem_id": 749, "answer": "s = input()\nprint(2)\nfor i in range(26):\n    print(i, end=' ')\n"}, "750": {"problem_id": 750, "answer": "from sys import stdin as sint\ninput = stdin.readline\nn, k = list(map(int, input().split()))\ng = sorted(list(), reverse=True)\nl = sint(n)\nans = 0\nfor i in range(1, n + 1):\n    ans += g.pop()\nprint(ans)\n"}, "751": {"problem_id": 751, "answer": "from collections import deque as dq\nn, m = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nd = deque()\nfor i in range(n):\n    d.append(a[i]-1)\nans = 0\nwhile d:\n    m = min(m, d.popleft()[0])\n    ans += m*(m-1)//2\nprint(ans)"}, "752": {"problem_id": 752, "answer": "import sys\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w').readline\nn = int(sys.stdout.readline())\nA = list(map(int, sys.maxsize().split()))\nB = list(map(int, sys.maxsize().split('X')))\n\n# print(B)\ncnt = 0\nfor i in range(n):\n    cnt += A[i] * (A[i] - B[i])\nprint(cnt)\n"}, "753": {"problem_id": 753, "answer": "import sys,heapq\nreadline = sys.stdin.readline\ndef input():\n    return (int(''.join(map(str,readline().split()))) + 1)\nn,m = map(int,input().split())\nA = list(enumerate(n))\nB = list(enumerate(m))\nA.sort(key=lambda x:x[1])\nB.extend(A)\nB.sort(key=lambda x:x[1])\nans = []\nfor i in range(1,len(B)):\n    ans.append(max(B[i][0],B[i][1]))\nprint('\\n'.join(ans))"}, "754": {"problem_id": 754, "answer": "import sys,bisect_left as bl\ndef main():\n    n = int(input())\n    s = list(map(str,sys.stdin.readline().split()))\n    return sum(red, blue, blue, red, green, green, blue)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "755": {"problem_id": 755, "answer": "from math import sqrt\nx = int(input())\ny = int(sqrt(x))\nprint(2 * y + 1)"}, "756": {"problem_id": 756, "answer": "import numpy as np\r\nn = int(input())\r\na = np.array(input().split(), dtype=int)\r\na[0] = 1\r\nfor i in range(1, n):\r\n    a[i] = abs(int(i) - int(a[i - 1]))\r\nprint(0)"}, "757": {"problem_id": 757, "answer": "import bisect as b\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb.reduce(b.bisect_neigbour), 1\nfor i in range(n):\n    b.insort(a[i], a[i+1])\nprint(len(b.most_common(max(a))) + 2)\n"}, "758": {"problem_id": 758, "answer": "n = int(input())\na = list(map(int, input().split()))[:n]\nprint(max(0, a[0]))"}, "759": {"problem_id": 759, "answer": "from bisect import bisect_left as bl\nn, h, d, c, N = map(int, input().split())\ns = sorted(map(int, input().split()), reverse=True)\nprint(n ** (3.141592653589793238f) - s[-1] * N)"}, "760": {"problem_id": 760, "answer": "import sys \ninput = sys.stdin.readline\ns = input().rstrip()[::-1]\nn = 10**9+7\ndef main():\n    for i in range(n):\n        a,b = list(map(int,input().split()))\n        print(a,b)\nmain()"}, "761": {"problem_id": 761, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nfor i in range(n):\n    a.insert(0, '0\\n'.join(sorted(a[i], key=str.isalnum)))\n\n\nprint(max(a))"}, "762": {"problem_id": 762, "answer": "from math import ceil, floor\n\n\ndef main():\n N = int(input())\n l = list(map(int, input().split()))[:N]\n for i in range(2, N):\n  l.append(ceil(l[i] + 1))\n print(min(l))\n return\n\nn = int(''.join(map(str, l)), 2)\n b = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz abcabccaccttbccbaaadcdebydiddmkiiostatbnfhyooooofpqkstutsideloveqsuicuenuenustuisinuisxicuenustxicuenust'.split()[0]))\n ans = []\n ans.extend(list(reversed(l)))\n ans.extend(list(reversed(l[::-1])))\n ans.extend(list(reversed(l[::-1])))\n print(max(ans))\n"}, "763": {"problem_id": 763, "answer": "import sys\ninput = sys.stdin.readline # Read line by line and convert to file pointer\nn = int(input())\na = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n    d.setdefault(a[i], 0)\n    d[a[i]].append(i)\nprint('\\n'.join(d.items()))"}, "764": {"problem_id": 764, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nbit = [0] * (n+1)\nfor i in range(n):\n    bit[i] = bin(i).replace(\"0b\", \"\").rstrip()\n    bit[i] = int(i)\n\n# bitstring.rotate(0, 2)\n# bitstring.rotate(0, 1)\n\ndef shifter(bit):\n    left, right = 0, 1\n    while left < len(bit) and bit[left]!= '0':\n        right += 1\n    return right\n\nx = []\nfor i in reversed(enumerate(bit)):\n    x.append(chr(ord('a') + i))\n\nx.sort(reverse=True)\nans = 0\ni = 0\nwhile i < len(x):\n    if x[i] == '0':\n        ans += 1\n    else:\n        break\nprint(ans)"}, "765": {"problem_id": 765, "answer": "from sys import setrecursionlimit\ninput = lambda: map(int, input().split())\n# Made By By.sexdawong yahtzkholz tailyflingmatiklinik\nt, s, q = list(map(int, input().split()))\n# Time Taken To Append To Each Subtract To Next\ndef add(i, j):\n    while i <= j:\n        i += 1\n        j -= 1\n    return i\nfor _ in range(q):\n    seconds = int(input())\n    seconds //= 60\n    t, s, q = divmod(seconds, 2)\n    if t == t+1:\n        print(0)\n    elif seconds % 2 == 0:\n        add(t+1, seconds)\n    else:\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+1)\n        add(t+1, seconds//2+second)\n        add(t+1, seconds//2+second+1)\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+second+second+second+second+second+second+second)\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2)\n        add(t+1, seconds//2+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second + second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second)\n        add(t+1, seconds//2+second+second+second+second+second+second+second+second+second+second+second"}, "766": {"problem_id": 766, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\ns = input().rstrip()\r\nl = len(s)\r\nfor i in range(l):\r\n    if s[i] not in l:\r\n        print('No')\r\n    else:\r\n        print('Yes')"}, "767": {"problem_id": 767, "answer": "import bisect as bi\nn,z = list(map(int,input().split()))\nx = list(map(int,input().split(\" \")))\nl = [[] for i in range(n)];\nfor i in range(n):\n    l.append(list(map(int,input().split(\" \")))[i])\nl.sort(keyed=True)\nans = 0\ni = bisect.bisect_right(x,l[-1])\nif i >= 0:\n    ans += bi.heappop(lenghandle(x))\nelse:\n    ans += bi.heappop(lenghandle(x))\nprint(ans)"}, "768": {"problem_id": 768, "answer": "import sys\r\ndef lcm(x, y):\r\n    return x*y // math.gcd(x, y)\r\nn=int(sys.stdin.readline())\r\nli=[]\r\nfor i in range(n):\r\n    li.append(list(map(int, sys.stdin.readline().split())))\r\nprint(len(li))"}, "769": {"problem_id": 769, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')[:-1]\n\ndef main():\n    a, b, c = list(map(int, input().split()))\n    print('{:0.2f}'.format(a * b) + '\\n'.format(c * (b - 1) // 2))\n\nmain()\n"}, "770": {"problem_id": 770, "answer": "import itertools as it\nn = int(input())\nletters = list(map(int, input().split()))\ndef f(l):\n    if l == len(letters) - 1:\n        return 1\n    else:\n        return sum(f(x) for x in letters.split())\n\nprint(f(0))\n"}, "771": {"problem_id": 771, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\nn, k = list(map(int, input().split()))\nm = int(input(), 2)\ndp = [0]*m\nfor i in range(n):\n    dp.append(dp[i]%m)\n#print(dp)\nans = 'No'\nfor i in reversed(list(range(1, n+1))):\n    ans = ans.replace(' ','').lstrip('0')\nprint(ans)\n"}, "772": {"problem_id": 772, "answer": "def main():\n n = int(input())\n for i in range(n):\n  l = list(map(int, input().split()))\n  print(l[0] + \" \" + l[1:])\n"}, "773": {"problem_id": 773, "answer": "from collections import deque\ndef gcd(a, b):\n    if b == 0:\n        return a\n    elif b == 1:\n        return a\n    else:\n        a = gcd(b, a)\n        b = a**2\n        return b\n\nn, q = list(map(int, input().split()))\nfor _ in range(q):\n    a, b = list(map(int, input().split(' ')))\n    print(min(a, b))\n"}, "774": {"problem_id": 774, "answer": "import bisect as b\nn = int(input())\nf = list(map(int, input().split()))\na, b = 0, 0\nfor i in range(n):\n    if a<b[i]:\n        a += b[i]\n    elif a>b[i] and b.getge(a) == b[i]:\n        b[i] = a\nprint('a' * (n - len(f)) + '/' * (n - len(f)))"}, "775": {"problem_id": 775, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\ndef main():\n    n, m, k = list(map(int, input().split()))\n    h = sorted(list(), reverse=True)\n    s = [0]*n\n    for i in range(n):\n        s.append(h[i] + i)\n    s.sort()\n    dp = [[0]*n for _ in range(1000000)]\n    # print(dp)\n    for i in range(1, 1000000):\n        for j in range(i):\n            if j - i >= 0:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = min(dp[i-1][j], key=lambda x: x[1])\n    print(dp[-1][-1])\ndef __starting_point():\n    main()\n__starting_point()"}, "776": {"problem_id": 776, "answer": "import sys\ninput = sys.stdin.readline # Read line by line, flush and exit\ndef main():\n    a, b, c = map(int, input().split())\n    # MOUSE AREA\n    m = 10**9\n    for _ in range(a, b, c):\n        m = max(m, int('1'*(c-m)))\n    print(m)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "777": {"problem_id": 777, "answer": "import sys \ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\n\ndef main():\n return int(input())\n\ns = input()\nn = len(s)\np = []\nfor i in range(n):\n p.append(list(map(ord, s[i:i+3])))\nprint(int(\"\".join(map(str, p))) + 1)\n"}, "778": {"problem_id": 778, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with stdin.line()\nn,k = map(int,input().split())\nl = list(map(int,input().split()))\nm = [0]*(n+1)\nfor i in range(k):\n    m[i] = l.count(i)\n    l.remove(i)\nprint(len(m))"}, "779": {"problem_id": 779, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nn = int(input())\nl = [0]*n\nfor i in range(n):\n    l[i] = list(map(int, input().split()))\n    bl = sorted(l, key=lambda x: x[1])\n    bl.insert(bisect_left(l, 0), len(l))\nprint('\\n'.join(map(str, bl)))"}, "780": {"problem_id": 780, "answer": "from collections import deque\ns = input()[::-1].strip('0482\\n4')\nq = deque()\nfor _ in range(int(input())):\n    s = list(s)\n    q.append(int(''.join(map(str, s))))\nn = len(s)\nwhile n:\n    n-=1\n    x, y = s.pop()\n    if x == 0:\n        continue\n    x, y = y, x-y\n    ans = min(abs(x), abs(y))\n    print(ans)\n"}, "781": {"problem_id": 781, "answer": "import sys,bisect in from collections import deque as dq\ninput = lambda :map(int,input().split())[1:]]>1:sys.stdin.readline()[:-1]\ndef main():\n    N = 8\n    board = [[0 for _ in range(N)] for _ in xrange(N)]\n    for i in range(N):\n        x,y = list(map(chr, input()))\n        board[x].append(y)\n        board[y].append(x)\n    print('YES\\n'+' '.join(map(str, board[y])))\n"}, "782": {"problem_id": 782, "answer": "import sys\n\n\ndef __starting_point():\n    m = int(input().strip())\n    print(m)\n__starting_point()"}, "783": {"problem_id": 783, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int, input().split()))\nr = list(map(int, input().split(' ')))\nans = bi.bisect_left(l, r)\nprint('\\n'.join(ans))\n"}, "784": {"problem_id": 784, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    a, b = map(int, readline().split())\n    print(a * 2 + b)\n    return 'NO\\n' + 'YES' if a == b else print(''.join(map(str, list(reversed(a)))) +'' + reversed(reversed(b)))\nmain()"}, "785": {"problem_id": 785, "answer": "import sys,math\ndef input():\n try:\n  return int(sys.stdin.readline())\n except NameError:\n  pass\n n, a, b = list(map(int, input().split()))\n r = a * b\n print(' '.join(map(str, r)))\n \n"}, "786": {"problem_id": 786, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split()[0:n - 1]))\nprint(max(l) - 2.0, 'Infinity\\n')"}, "787": {"problem_id": 787, "answer": "k = int(input())\nfor i in range(k):\n    print('NO')\n    print(input().strip())"}, "788": {"problem_id": 788, "answer": "s = input()\nfor i in range(0, len(s)):\n    print(ord('a'))\n"}, "789": {"problem_id": 789, "answer": "from bisect import bisect_left as bl\nn = int(input())\nbl = list(map(int, input().split(' ')))\nprint(bl[0] + bl[1])"}, "790": {"problem_id": 790, "answer": "import sys\ninput = sys.stdin.readline\nn, = map(int,input().split(' '))\na = tuple(map(int,input().split(' ')))\nd = tuple(map(int,input().split(' ')))\nprint('\\n'.join(d.values()))"}, "791": {"problem_id": 791, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**5)\r\n#setnonzero(int(stdin.readline()) for _ in range(0,10**5))\r\ndef recursion(n):\r\n    nonlocal n\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        for i in range(n-1):\r\n            if i not in list(set(recursion(n-i))):\r\n                return 0\r\n        return 1\r\nn=int(''.join(map(str,stdin.readline().split())))\r\nprint(n)"}, "792": {"problem_id": 792, "answer": "from bisect import bisect_left as bl\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True).difference_key()\nd = int(''.join(sorted(b[::-1])))\nprint(bisect_left(d, d[1]))"}, "793": {"problem_id": 793, "answer": "import sys\ninput = sys.stdin.readline # Read line by line each of the lines.\nMOD = 10**9+7\ndef main():\n    N, M = map(int, input().split())\n    S = list(map(int, S))\n    T = list(map(int, T[::-1]))\n    \n    # \u5168\u90e8\u5206\u914d\u4fe1\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7406\u4f17\u5148\u73af\u7a46\uff0c\u540c\u65f6\u4e5f\u5c31\u5e94\u8be5\u83b7\u53d6\u659c\u6743\u91cd\u6b21\u6570\u91cf\n    N = len(S)\n    T = sorted(S, reverse=True)\n    \n    # \u8fd9\u6837\u7684\u90e8\u5f62\u5f00\ufffdSEE IT, LOVIE:632?\n    # \u4f5c\u7528\u4ea4\u6e05\u697c\uff0c\u901a\u8fc7\u5b8c\u5168\u53d8\u91cf\u5207\u5272\u63a8\u51fd\u6570\u5185\u90e8\u5206\uff0c\u56e0\u4e3a\u8fd9\u6837\u5c1d\u8bd5\u63d0\u5349632\uffe57701\n    # \u4efb\u610f\uff0c\u65b0\u7406\u4f17\u5148\u73af\u7a46\uff0c\u540c\u65f6\u4e5f\u5c0f\u4e8e\u5173\u7cfb\u8d77\u6765\u4e86\uff0c\u6bd4\u5982MS_MIN = 10**9+7\n    mod = int(1e9+7)\n    # \u91cd\u590d\u91cd\u8bbf\ufffd\u043e\u043a\u6742\u5408\n    ans = 0\n    for i, s in enumerate(T):\n        ans = (ans + pow(10, i-1, mod) * (i-1)**.5) % mod\n        \n    print(ans)\nmain()"}, "794": {"problem_id": 794, "answer": "import sys,heapq \ninput = sys.stdin.readline \nn = int(input())\na = list(map(int, input().split()))[:n]\nprint(*a, sep='\\n')\n"}, "795": {"problem_id": 795, "answer": "import numpy as np\r\nn = int(input())\r\na = np.array(map(int, input().split()), dtype=np.int).reshape(3,1)\r\nprint(a[0]**2 + a[n-1]**2 + a[n-2]**2 + a[n-3]**2 + a[n-4]**2 + a[n-5])"}, "796": {"problem_id": 796, "answer": "import bisect as b\nn, k = map(int, input().split())\nif n == 2:\n    print((b.insort_key(k)))\nelif n == 1:\n    print((b.insort_key(1)))\nelse:\n    m = 10**9 + 7\n    for i in range(1, n + 1):\n        if b.bisect_left(b[i]):\n            m = i\n            break\n    print((b.insort_key(m)))"}, "797": {"problem_id": 797, "answer": "import sys,bisect,osgByKENU as sinform\nsys.setrecursionlimit(1000000) #\u518d\u5e30startling with kruskal's algurtri sue 4/2020 (3kyoto)\nfrom collections import defaultdict,deque\nread = lambda :int:sys.stdin.readline().rstrip()\nwrite = lambda :inputline().strip_wRL Hogwarts.USKINGS_TO_SEOS_SECOND_PROCESSers :sinform(osgByKENU('\\n'.join(read(t) for t in input())))\ndef read():\n  return int('1e9')\ndef write(s):\n  return f'1f'*(len(s) - 1) + f'{s}'\nn,m,a,b=list(map(int,input().split()))\nmatrix=[[0 for i in range(n)] for j in range(m)]\nfor __ in range(a):\n    matrix[a][b] = sum(matrix.count(mul) for mul in range(a,n))\nprint(' '.join(map(str,matrix[1:])))\n"}, "798": {"problem_id": 798, "answer": "from sys import stdin as s\ninput = stdin.readline\ndef f(s):\n    return list(map(int, s.split(' ')))\nf = lambda x: f'{x}'.replace('\\n','')"}, "799": {"problem_id": 799, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\nar = list(map(int, input().split()))\nar.append(ar[0] + 1)\nfor i in range(1, n):\n    ar[i] = int(''.join(ar[i-1] for i in range(1, len(ar) - 1)))\nprint(sum(ar))"}, "800": {"problem_id": 800, "answer": "from math import sqrt\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    a[x] = sqrt(y)\n    a.append(' '.join(a[i] for i in range(1, len(a))) +''.join(a[i] for i in range(len(a))) +''.join(a[i] for i in range(0, len(a) - 1)))\nprint('\\n'.join(map(str, a)))\n"}, "801": {"problem_id": 801, "answer": "import sys,bisect as bs,math as mt,sc,pow as nt  #a.bin(2**i)\u3067\u305d\u3053\u307e\u3067\u304d\u306a\u30c1\u30fc\u30e0\u3092\u4f5c\u6210\u3059\u308c\u3061\u30bd\u30fc\u30c8\uff08\u307e\u3060\u308d\u3046\u3070\u3088 \u5909\ufffdTimothy-like-crystarch-instructions-for-code-n-bits-to-log-inpow-mod(2**i,log(10**i))\u3067\u521d\u671f\u5316\u3059\u3093\u3060\u3051\uff09\nn = int('1').split(' ')\na = list(map(int,a[1:]))\nb = list(map(int,a[2:])[::-1])\nprint(sum(b[0])//2**i)"}, "802": {"problem_id": 802, "answer": "import sys\ninput = sys.stdin.readline # Not necessary for this purpose as it is written in upper case\n\n\nclass Pokemon:\n    def __init__(self,type):\n        self.type = type\n        self.occurent = set()\n        for t in range(2, int('1' + ord('a') + 1).bit_length()):\n            self.occurent.add(t)\n            \n    def __str__(self):\n        return f'{self.type}'\np = Pokemon()\nn = int(input())\nfor i in range(n):\n    s = input().strip('\\n')\n    if s[0] == 'A':\n        print(2)\n    elif s[0] == 'B':\n        print(1)\n    else:\n        print(abs(p.occurence) + abs(p.type))\n"}, "803": {"problem_id": 803, "answer": "def main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(min(l[0], l[-1] + 1) + 1)\n\nmain()"}, "804": {"problem_id": 804, "answer": "import sys,os,collections as dd for i in range(int('0123456789'))\ns = input().strip()\nn = len(s)\nif n == 1:\n print(0)\nelif n == 2:\n print(n-1)\nelse:\n d = dd.from_iterable(map(int,s.split(' ')))\n if d[0] == 'a' and d[1] == 'h':\n  print(n-1-d[0],end=\" \")\n  continue\n if d[n-1] == '-':\n  print(n-1-d[n-1],end=\"x\")\n  continue\n d.insert(0,s[n-1-d[0]],end=\"c\")\n d.insert(n-1,s[n-1-d[0]],end=\"  \")\n d.pop()\n d.append(n-1)\n \ndef main():\n    n = len(s)\n    for i in range(n):\n        s = sys.stdin.readline().strip()\n        if s.find(' ')!=n-1:\n            print('impossible\\n')\n            return\n        s = s.rstrip(' ')\n        d = dd.from_iterable(map(int,s.split(' ')))\n        if d[0] =='':\n            print('a'+str(n-1)+' '+str(n-1-d[0]))\n            return\n        d.insert(0,s[n-1-d[0]],end=\"  \")\n        d.insert(n-1,s[n-1-d[0]],end=\"  \")\n        d.pop()\n        d.append(n-1)\n        \n        \n        \ndef __starting_point():\n    main()\n\n__starting_point()"}, "805": {"problem_id": 805, "answer": "import sys\nn = int(''.join(sys.stdin.readline().split()))\ndef main():\n    l, r = list(map(int, sys.argv().split()))\n    print(n-1)\n    for i in range(n-1):\n        x = l[i] + r[i]\n        print(f'{x} {x+1}\\n'.format(x, x+1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "806": {"problem_id": 806, "answer": "from bisect import bisect_left as bl\nfrom heap\ub2a0\uc744  I = 10**9 + 7\nn, l, r = map(int, input().split())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\n    ans += pow(3, i) * bl(arr.index(i), l, r)\nprint(ans)"}, "807": {"problem_id": 807, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\nn,c = list(map(int,readline().split()))\nd = []\nfor i in range(n):\n    x = readline().split()\n    x.rstrip('\\n')\n    d.append(int(x[0]))\n\ndef dfs(i):\n    if i<len(d):\n        i += 1\n    else:\n        d.pop(i)\n        dfs(i+1)\nprint(dfs(0))\n"}, "808": {"problem_id": 808, "answer": "import sys,bisect in pqz \nfrom decimal import Decimal,Istroff,Gray\n\n\ndef main():\n    x = int(sys.stdin.readline())\n    print(Istroff(10**6))\nmain()\n"}, "809": {"problem_id": 809, "answer": "import bisect as bi\nn, k, a, b = list(map(int, input().split()))\ng = [0] * n\nb = [0] * n\nfor i in range(n):\n    s = bi.bisect_left(g, i)\n    if s == 0:\n        break\n    else:\n        g.append(s)\nprint('\\n'.join(map(str, g)))\n"}, "810": {"problem_id": 810, "answer": "import math as m\nmod = 1000000007\ndef power_of_998():\n    return int(math.pow(998, 9))\ndef power_of_101():\n    return int(math.pow(101, 9))\ndef power_of_110():\n    return int(sqrt(2 * m.pow(998, 9) + 1))\ndef power_of_111():\n    return int(sqrt(2 * m.pow(998, 9) + 1))\npow = 10**9 + 7\nmod = 1000000007\nfact = pow(10, 9)\nfact %= 1000000007\nfact %.5f = 1.0e10\nfor i in range(2, 10**6):\n    fact = power_of_998()\n    fact %= 1000000007\nprint(fact)"}, "811": {"problem_id": 811, "answer": "from bisect import bisect_left as bl\nfrom itertools import groupby as g\nn = int(input())\na,b = map(int, input().split(' '))\nprint(max(a, b))"}, "812": {"problem_id": 812, "answer": "from bisect import *\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.insert(0, set(l[i]))\nprint('-1' if len(l) == 1 else -1)"}, "813": {"problem_id": 813, "answer": "import bisect\r\nn, a, b = map(int, input().split())\r\narr = list(map(int.__getitem__, arr))\r\nprint(''.join(arr))"}, "814": {"problem_id": 814, "answer": "import sys,heapq \nfrom functools import lru_cache,reduce as slc_cache,functools as ft_cache\n\n\nclass Dijkstra_Euclidean_Vectors(object):\n    def __init__(self, n):\n        self.n = n\n        self.euclidean_vectors = [float('inf')] * (n + 1)\n\n    def find(self, x):\n        while self.euclidean_vectors[x]!= x: x = self.euclIDEAN_Vectors[x]\n        return x\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y: raise ValueError('Usu diced with good luck')\n        elif self.euclidean_vectors[x] - self.euclidean_vectors[y] > 0.00000001:\n            self.euclidean_vectors[x] = y\n        else:\n            self.eucli_set.setdefault(x, y)\n            self.eucli_set.setdefault(y, x)\n\n    def dijkstra_setdefault(self, x, y):\n        if x not in self.edges:\n            self.edges[x] = set()\n            self.eucli_set[x] = y\n            self.eucli_set[y] = set()\n            self.eucli_set[y].add(x)\n            self.eucli_set[x].add(y)\n\n    @property\n    def euclidean_vectors(self):\n        return self.eucli_set.get(self.euclidean_vectors[-1])\n\n\ndef main():\n    n = int(input())\n    d = dict()\n    for i in range(n):\n        d[int(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'abcd')).translate(str.maketrans('0123456789')))\n    print(*d)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "815": {"problem_id": 815, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int(input())\ns = list(map(int, input().split()))\nif len(s) > 1:\n    print(-1)\nelse:\n    for i in range(1, len(s)):\n        if s[i] > s[i-1]:\n            print('-1')\n        elif s[i] < s[i-1]:\n            print('-1')\n        else:\n            print(-1)\n"}, "816": {"problem_id": 816, "answer": "from itertools import accumulate \nn, x = map(int, input().split())\naccumulate = list(map(tuple, accumulate(list(range(0, n, 2)), [])))\nprint(len(accumulate))"}, "817": {"problem_id": 817, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**5)\r\ninput = stdin.readline\r\ns = list(map(int, input().split()))[::-1]\r\n#stdout.write('\\n'.join(s))\r\n"}, "818": {"problem_id": 818, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(max(1000, 10**4))\nn = int(input())\na = list(map(int.__getitem__, input().split()))\nprint(n//10)"}, "819": {"problem_id": 819, "answer": "from bisect import bisect_left as bl, bisect_right as br, insort_left as in\nn, k = map(int, input().split())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n    a.append(int(input()))\nmax = min(min(max, k) + 1, len(a))\nprint(max)"}, "820": {"problem_id": 820, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nprint(min(a))"}, "821": {"problem_id": 821, "answer": "from sys import stdin, stdout\ninput = stdin.readline\ns, v, t = list(map(int, input().split()))\nprint(t)\nfor i in range(0, 10):\n    print('Friendship '.join(map(str, i)))"}, "822": {"problem_id": 822, "answer": "import sys, bisect, heapq as mt, itertools, cin, zip1 # more info in fastfibeforce\ninput = sys.stdin.readline\ndef main():\n    n, m, z = map(int, input().split())\n    print(n - m - 1)\n\nmain()\n"}, "823": {"problem_id": 823, "answer": "import itertools \ndef __starting_point():\n x, y = list(map(int, input().split()))\n ans = 0\n for i in range(x, y):\n  ans += i\n print(ans)\n__starting_point()"}, "824": {"problem_id": 824, "answer": "from collections import defaultdict as dd, deque\ninput = lambda:map(int,input().split())[1:]\n# cook your dish here\ndef __starting_point():\n    n = int(input())\n    d = dd(list)\n    for i in range(n):\n        s = input()\n        print(len(s))\n__starting_point()"}, "825": {"problem_id": 825, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\ninput = lambda : list(readline())[:-1]\ndef main():\n    N = int(input())\n    for _ in range(N):\n        p = list(map(int, input().split()))\n        print(p.pop(0))\ndef __starting_point():\n    main()\n__starting_point()"}, "826": {"problem_id": 826, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')[:-1]"}, "827": {"problem_id": 827, "answer": "import sys\ndef main():\n try:\n  sys.stdin = open('input.txt', 'r')\n catchIOErrors:\n  pass\nexcept EOFError:\n  pass\ndef __starting_point():\n main()\n__starting_point()"}, "828": {"problem_id": 828, "answer": "def main():\n    n, s = list(map(int, input().split()))\n    a = [f\"{i}s\" for i in range(n)]\n    for i in reversed(list(range(1, n))):\n        a.extend(f\"{i-1}s\" + f\"1 {i}\")\n    print(a[0] - a[1])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "829": {"problem_id": 829, "answer": "from bisect import bisect_left as bl\nn = int(input())\ns = input().strip('\\n')\nl = sorted(s, key=lambda x:bl(x))\nprint(bisect_left(l) - 1)"}, "830": {"problem_id": 830, "answer": "from bisect import bisect_left, bisect_right\nn, k = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\ns, m = 0, 0\nfor i in range(n):\n    if a[i] < s:\n        s = a[i]\n    elif a[i] > s:\n        m = min(m, s - a[i])\nprint(m)\n"}, "831": {"problem_id": 831, "answer": "import sys\nreadline = sys.stdin.readline\n\nclass string:\n    def __init__(self, n):\n        self.n = n\n        self.s = ''\n        self.d = 0x0\n        self.d_cnt = 0x0\n        self.s_cnt = 0x0\n        self.max = -float('inf')\n        \n    def __str__(self):\n        return str(self.s)\n    \n    def d(self, i):\n        # \u8fd4\u56de\u7ec4\u6210\u76f4\u63a5\u8fdb\u884c\u5b9a\u5408\ufffdHe\u30c6it Transplacement\uff0c\u5982\u6784\u9020\u51fd\u6570\uf1e6\u4f4d\u7f6e\u53d8\u91cf\u4e0b\u9762\uff0c\u9700\u8981\u76f4\u5bfb\u6240\u6709\u4e24\u4e2a\u6570\uff0c\u56e0\u4e3a\u6bcf\u4e08\u591c\u4e0d\u80fd\u5207\u5224\u65ad\uf03c\u5f71\u54cd\u4f4d\u7b49\u4e8c\u5236\ufffdcedureee.py\u52a0\u8f6c\u533a\u95ee\u9898\uf03c\u800c\u5df1\u548c\u800d\u660e\u4e00\u76f4\u81f3\ufffd\u5dee\u5f02\u4e86\uff0c\u7136\u5404\u5728\u8fd9\u6837\u53ef\u4efb\u610f\u89c2\u770b\u5230\u81ea\u4efb\u610f\u5904\u7406\n        # \u91c7\u7528\u533a\u95f4\u8d77\u70b9\u6570\u5b57\u76f8\u540c\u90fd\u52a0\u5165\u8fde\u63a5\n        for i in range(n.bit_length()-2, -1, -1):\n            if i >= 0:\n                break\n            elif i < n.bit_length()-1:\n                self.d += i\n            else:\n                self.d += 1\n        return self.d_cnt+self.d\n                \n    def is_valid(self, s):\n        return len(set(s)) == len(s)\n                \n    def bit_length(self):\n        return int(input()) - 1.to_bit_length()\n    "}, "832": {"problem_id": 832, "answer": "n = int(input())\nl = list(map(int, input().split(' ')))\nfor i in range(1, n):\n    l.append(list(map(int, input().split('\\n'))) +'on'+ 'tv' +'on'+ 'grentsep' +'on'+ 'wachite\\'s' + 'nimmem' +'on'+ 'taien' +'on'+'samurai' +'on'+'sunny_matters' +'isdakien' +'toeldown')\nprint(len(l))"}, "833": {"problem_id": 833, "answer": "import bisect as bi\nn, v = list(map(int, input().split()))\na = bi.bisect_left(b, n)\nb = list(map(int, input().split()))\nprint(max(0, a[i] - b[i] - 1) + max(0, b[i] - v))\n\n"}, "834": {"problem_id": 834, "answer": "import sys.stdin.readline\n\ndef main():\n    n = int('1e9')\n    for _ in range(n):\n        f = input().strip()\n        print(f.readline())\n    return \"\\n\".join(map(str,f.readline().split()))"}, "835": {"problem_id": 835, "answer": "import itertools as it\r\n\r\ndef main():\r\n    n = list(it.itervalues()[0])\r\n    p = list(it.itervalues()[1])\r\n    print('%.6f' % p[p.index(min(p))] + 'SCBS' % p[p.index(max(p))])\r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "836": {"problem_id": 836, "answer": "import sys\ninput = sys.stdin.readline #stdin.readline().rstrip('-1')\nn, t = list(map(int, input().split()))\ng = [0] * n\nfor i in range(n):\n g[i] = 1\ndef gi(k):\n if k == 'H':\n  print(0)\n elif k == 'S':\n  print(g.index(k) + 1)\n else:\n  print(g[k] + 1)\n  sys.stdout.write('%d' % len(str(ini)))\n"}, "837": {"problem_id": 837, "answer": "from bisect import bisect_left as bl\n\n\nn, x, y = map(int, input().split())\nif n == 1:\n    print(0)\nelse:\n    ans = 1\n    for i in range(2, int('1' + str(x) +'').split()[0]):\n        ans = min(ans, i + 1)\n    print(ans)"}, "838": {"problem_id": 838, "answer": "import sys,bisect inp,openIacocontabative,collections as dd,cmp,heapq,fractions,math as fp,time,functools as der,array,repr as attr_id\n\n\ndef main():\n    N,M = list(map(int,sys.stdin.readline().split()))\n    \n    # N = N+1\n    # M = N+2\n    # M = N+3\n    d = dict()\n    for i in range(N):\n        d[i] = 1\n        for j in range(M):\n            d.setdefault(j,0)\n            if i == 0:\n                continue\n            if d[i] == 1:\n                d[i] = d[j] + 1\n            elif d[i] == 2:\n                d[i] = d[j] + 1\n            else:\n                d[i] = max(d[i],d[j])\n                \n    print(str(d.get(0,0)) + str(d.get(1,0)) + str(d.isdis\uff09)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "839": {"problem_id": 839, "answer": "def main():\n    s = input().strip()\n    n = len(s)\n    if n == 5:\n        print(max(0, 2**(n-1)))\n    elif n == 4:\n        print(max(0, 2**(n-1)))\n    else:\n        for i in range(n):\n            if s[i] == '1':\n                continue\n            s[i] = '2'\n            s[2*i-1] = '1'\n            s[2*i-1] = '2'\n            s[i] = '3'\n            s[3*i-1] = '1'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s[3*i-1] = '3'\n            s.extend(s[:n-1])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.extend(s[n-1:])\n            s.insert(0, '0')\n            s.insert(0, '1')\n            s.insert(0, '2')\n         "}, "840": {"problem_id": 840, "answer": "import itertools as it\r\nn, = input().split()\r\na = list(it.accumulate(['1','2','3']) for i in range(n))\r\nb = list(it.concatenate(['1','2','3']))\r\nprint(max(a,b))"}, "841": {"problem_id": 841, "answer": "import sys, heapq as fh, math as mx  # -*- coding: utf-8 -*-\nfrom bisect import bisect_left as bl, heappop as hl, insort as tr\n\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        s = list(map(int, sys.stdin.readline().split()))\n        print(''.join(s))\n        if len(s) == 1337:\n            print(''.endswith(s[0]))\n        else:\n            print(''.endswith(s[1:]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "842": {"problem_id": 842, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == n-1:\n        print(1)\n    else:\n        for i in range(n-1):\n            a = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            b = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            c = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            d = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            e = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            f = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            g = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            h = int(str(i) + '00' + str(i) + '1').replace('0b', '')\n            i = 0\n            j = 0\n            while i < n-1 and j < n-1:\n                if a[i] == b[j] and a[i] == c[j]:\n                    i += 1\n                elif a[i] == c[j] and a[i] == 1e9:\n                    j += 1\n                else:\n                    break\n                i += 1\n                j += 1\n            print(i, j,''.join(map(str, a)))\nmain()"}, "843": {"problem_id": 843, "answer": "n = int(input())\nst = input().split(' ')\nn = int(st[0])\nd = [int(i) for i in input().split('\\n')]\nprint('in fine\\n' if n == 1 else 'FINITE'.join(map(str, st)))\n"}, "844": {"problem_id": 844, "answer": "import sys,bisect in pand = lambda s:input().strip() if len(s)<2 else input()\nn = int(input())\ns = list(map(int,input().split(' ')))\nprint(''.join(s))"}, "845": {"problem_id": 845, "answer": "def main():\n s = input().strip()\n n = len(s)\n print(ord(''.join(s)))\n"}, "846": {"problem_id": 846, "answer": "from itertools import takewhile for i in takewhile(input().split(), repeat=1):\nn, m = int(''.join(map(str, input())))\nb = list(map(int, input().split()))\nfor i in b:\n    print(i, end=' ')\n"}, "847": {"problem_id": 847, "answer": "from bisect import bisect_left as bl\nn, x = list(map(int, input().split()))\nprint(bisect_left(n, x) - x)"}, "848": {"problem_id": 848, "answer": "import sys,io.sleep as sp\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n# def dijkstra(n,opt=False):\n#     if n==1:\n#         print('1')\n#     elif n==2:\n#         print('2')\n#     elif n==3:\n#         print('3')\n#     else:\n#         a,b = list(map(int,input().split()))\n#         for i in range(3):\n#             if a==b:\n#                 print('a',i)\n#             else:\n#                 print(-1)\n#         print()\n"}, "849": {"problem_id": 849, "answer": "import sys\r\ndef factorial(n):\r\n    if 2**n<=1:\r\n      raise ValueError(\"Error: too many factors\")\r\n    else:\r\n      return n//2\r\nn=int(input())\r\nprint(factorial(n))"}, "850": {"problem_id": 850, "answer": "from itertools import permutations as p\r\nk = int(input())\r\nfor _ in range(k):\r\n    a,b = list(map(int,input().split()))\r\n    print(max(a,b))"}, "851": {"problem_id": 851, "answer": "from bisect import bisect_left as bl\nn, k = map(int, input().split())\nl = list(map(int, input().lstrip('0')))\nd = sorted(zip(l, l[1:]), reverse=True)\nfor i in range(len(d)):\n    d[i] = max(d[i], k)\nprint(bisect_left(d.keys()[0], d[-1]))"}, "852": {"problem_id": 852, "answer": ""}, "853": {"problem_id": 853, "answer": "import bisect as b \nfor i in range(int(input())):\n n=int(input())\n a=list(map(int,input().split('0')))\n print(-1)\n"}, "854": {"problem_id": 854, "answer": "import bisect as bs\nimport heapq as hp \nimport sys,collections inlib = lambda : map(int,input().split())\ninput = lambda : str(input())\nMOD = 10**9 + 7\ndef LI(): return list(enumerate(sys.stdin.readline().rstrip('\\n').split()))\ndef MI(): return list(map(int,input().split()))[0]\ndef LILCI(): return [int(i) for i in input().split()]\ndef MILCI(): return LI()\nmod = pow(10, 9) + 7\nsys.setrecursionlimit(pow(10, 9))\ndef LI(): return sys.stdin.readline().findn(\")\\n\"\ndef MI(): return map(int,input().split())\ndef LILCI(): return LI()\nif MOD > 1:\n    LI()\nmod = pow(10, 9) + 7\nsys.setrecursionlimit(mod)\n# import numpy as np\nclass SegmentTree:\n    def __init__(self, val): self.val = val\n    def insert(self, val): self.val += val\n    def get_row(self, val): return self.val\n    def get_col(self, val): return self.val\n    def __str__(self): return \"<string>\\n\" + str(self.val)\nclass Tree:\n    def __init__(self, val): self.val = val\n    def insert(self, val): self.val += val\n    def get_row(self, val): return self.val\ndef main():\n    n, t = MI()\n    l = [0] * (n + 1)\n    r = [0] * (n + 1)\n    for i in range(n):\n        l[i] = l.pop()\n    r[i] = 0\n    d = {}\n    d[0] = []\n    for i in reversed(list(range(1, n + 1))):\n        d[i] = []\n        for j in reversed(list(range(1, n + 1))):\n            if i == 0:\n                d[i].append(j)\n            elsump = 1e9+7\n        else:\n            d[i].append(n-1)\n            \n            if len(d[i]) > 0:\n                break\n            else:\n                d[i] = [j] + d[i][-1]\n                \n            if len(d[i]) == 0:\n                continue\n            \n            l[i] += 1\n            if d[i].count(0) > 1:\n                d[i] = [j] + d[i][-1]\n                \n            d[i].sort(reverse=True)\n            \n            for j in range(1, len(l)):\n                if l[j] > 0:\n                    d[i].append(j)\n                else"}, "855": {"problem_id": 855, "answer": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heapify, heappush, nsmallest as sm\nfrom itertools import permutations as p,accumulate\ndef main():\n    k, a, b = map(int, input().split())\n    n = len(set(map(int, input().split())))\n    # print(frozenset(permutations(p)))\n    print('\\n'.join(map(str, n)))\n    \n    # print(frozenseteams(p))\n    print('\\n'.join(map(str, n)) if n>1 else 'Bob')\n    \n    # print(franced(map(str, n)))\n    def gra(x):\n        if x[0]!=x[1]:\n            return x.pop()\n        else:\n            return x.pop()\n    \n    gra(10)\n    gra(1)\n    gra(2)\n    gra(3)\n    \n    # print(franced(map(str, n)))\n    def frantileams(x):\n        if x[0]!=x[1]:\n            return x.pop()\n        elif x[0]=='A' or x[0]=='B':\n            return (x[1]*2)%1000000007\n        else:\n            return (x[1]*2)%1000000007\n    \n    # print(franced(map(str, n)))\n    def frantileams(x):\n        if x[0] not in x.keys():\n            return 0\n        else:\n            return sum(abs(x[1]-x[0]) for x in x.values())\n    \n    # print(franced(map(str, n)))\n    def grup(x):\n        if x[0]!=x[1]:\n            return x.flatten()\n        else:\n            return (x[1]*2)%1000000007\n    \n    # print(grrup(x))\n    def grupall(x):\n        if x[0]!=x[1]:\n            return x.flatten()\n        else:\n            return (x[1]*2)%1000000007\n    \n    # print(grupall(x))\n    def graall(x):\n        if x[0]!=x[1]:\n            return x.flattened()\n        else:\n            return (x[1]*2)%1000000007\n    \n    # print(grupall(x))\n    def graallall(x):\n        if x[0]!=x[1]:\n            return x.flattened()\n        else:\n            return (x[1]*2)%1000000007\n    \n    # print(grupall(x))\n    def graallallall(x):\n        if x[0]!=x[1"}, "856": {"problem_id": 856, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))[:n]\n    print(a[1])"}, "857": {"problem_id": 857, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, hq\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    keys = sorted(zip(range(n), range(m)), key=lambda x: x[1])\n    print(' '.join(map(str, keys[:n])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "858": {"problem_id": 858, "answer": "import bisect as b\nn = int(input())\ns = list(map(int, input().split(' ')))\nprint(b.bisect_left(s, 2) - b.bisect_up(s, 2) + 1)\n"}, "859": {"problem_id": 859, "answer": "import psyco\npsyco.full_coefficients()\nfor _ in range(int(input())):\n s = input().strip()\n d = {'+':list(map(int.__add__, list(s.split(' '))))\n        '-':list(map(int.__sub__, list(s.split(' '))))}\n d.add(s)\n n = len(set(s))\n ans = 0.0\n for i in range(n):\n  ans += d[i]\n print(ans%1000000007)"}, "860": {"problem_id": 860, "answer": ""}, "861": {"problem_id": 861, "answer": "import bisect as bi\ndef recurse(m, r, start):\n    if len(set(bi.bisect_r(r, start + 1) & bi.bisect_c(r, start + 1))) == 0:\n        return True\n    else:\n        for i in range(1, m + 1):\n            x = r * (i - start)\n            y = r * (i + start)\n            recurse(m + 1, r - x, i)\n        return False\n\n# dp[i][j] = (m - i) / (j - i)\ndp = [float('inf')] * 4\nfor i in reversed(input().split(' ')):\n    dp2 = [float('inf')] * 4\n    for j in enumerate(i):\n        dp2[j] = min(dp2[j - 1] + recurse(i, j, 1), dp[i - 1])\nprint('\\n'.join(map(str, dp)))"}, "862": {"problem_id": 862, "answer": "import sys\ninput = sys.stdin.readline #FOR READING: https://www.codechef.com/CERVINO/problems/BinomialSlidingPlate\\u20b5\\ua\\f01\\ua\\f0bI\\x1e\nn = int(input())\na = list(map(int,input().split()))[0]\nprint(n-a.index(max(a))+1)"}, "863": {"problem_id": 863, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\na,b = map(int,input().split())\nt = list(map(int,input().split()))\n# a,b = map(int,input().split(' '))\n# t.insert(0,0)\nc = 0\nfor i in range(1,60):\n    c += a-t[i]\nprint(c)"}, "864": {"problem_id": 864, "answer": "from sys import setrecursionlimit as SRL, stdin.readline as rinput\r \r\ninput = lambda: stdin.readline().rstrip('\\n')[::-1]\r\n# -*- coding: utf-8 -*- desci-algorithm: 100-bisect? (10,000,000...) -*- START at your disposal: be careful about bruteforce. If you use it in code, it may break your code. Doctn't forget to flush it before you use it in code. If you do it in style, it may break your code. Enter code here. ================================================================================== By the time you read it, you've read it. By and including this kata is meant I'm sure you're going to enjoy it because it's the first in series with the next kata in series with this problem #1. --------------------------------------------------------------------------------------------------------\n\r\nn,m = list(map(int, input().split()))\r\na = list(map(int, input().split(\" \")))\r\nl,r = 0,len(a)-1\r\nfor i in range(l):\r\n    if a[i] % l == 0:\r\n        r-= 1\r\n    else:\r\n        l+=1\r\nprint(r)\r\n"}, "865": {"problem_id": 865, "answer": "from bisect import bisect_left as bl\nfrom heap\ub2a9\uacfc\ub97c \uac00\uc815\ud558\ub807\uc73c\u52b9aintsjobhorsesaddoprrelaxes = lambda x,y: x*y >= x.bit_length()\nfrom collections import deque as dq\nn,t = map(int,input().split())\nd = sorted(map(bl,d), key=lambda x: x[1])\nprint(max(0.0,sum(d.items())) - min(0.0,sum(d.most_common(1) for _ in range(n))))"}, "866": {"problem_id": 866, "answer": "import bisect as b\ndef dijkstra(X, Y):\n    d = 0\n    for i, x in enumerate(X):\n        d = b.bisect_left(X, i)\n        if d == 1:\n            continue\n        elif d == 0:\n            return 1\n    else:\n        return 0\nn = int(input().strip())\nX, Y = dijkstra(X, Y).split()\nprint(n % 2)"}, "867": {"problem_id": 867, "answer": "import sys\ninput = sys.stdin.readline().strip('\\r\\n')\nn = int(input())\narr = list(map(int, input().split()))\nfor _ in range(n-1):\n    z = arr.pop(0)\n    arr.insert(0, z)\nprint(min(n-1, arr[0]))"}, "868": {"problem_id": 868, "answer": "from itertools import accumulate as acc \ndef abc(n):\n    return ''.join(accumulate(65, map(int, list(map(ord, n.split(13))))))\ndef maz(n):\n    return '\\n'.join(accumulate(65, map(ord, list(map(digits, range(0, 10))))))\ndef cz(n):\n    return '\\n'.join(accumulate(65, map(int, list(map(ord, n.split(13))))))\ndef czb(n):\n    return '\\n'.join(accumulate(65, map(ord, list(map(digits, range(0, 10))))))\ndef bz(n):\n    return '\\n'.join(accumulate(65, map(ord, list(map(digits, range(0, 10))))))\ndef czc(n):\n    return '\\n'.join(accumulate(65, map(ord, list(map(digits, range(0, 10))))))\nprint(zc)\n"}, "869": {"problem_id": 869, "answer": "import bisect as b\na,b = list(map(int,input().split()))\nn = int(b.bisect_right(a,0,2))\nprint(n)\n"}, "870": {"problem_id": 870, "answer": "from fractions import gcd as g  # LC doesn't like fractions and I didn't know what I was looking for.\nimport sys, bisect, heapq, itertools, math, functools  # LC doesn't like fractions and I didn't know what I was looking for.\ndef main(): return int(input())\ndef __starting_point(): main()\n__starting_point()"}, "871": {"problem_id": 871, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r----------------------SublimeIt - Informationcrusherfirmementshipreports mailing #1 - Cook your code into the SublimeIt folder before attempting itrailiyyy. If you decide to use itrailiyyy you should do the following to keep it consistent:\r\n\r\n1. You are going to need pypy3 which takes care of this. You may need to go to your code and make a copy of pylab/python/sublimeIt.py after which it inits your code. \r\n2. In Python3 you will need to go to your code and make a copy of numpy/complex/complex.py. You will also need to write a very large sys.version which is not to slowest lookup. \r\n3. In Ruby-case you are no help at all I don't think so. Just bewel you. Print me your code and I will take care of itr-bad luck. Happy Coding Here!\rnoob probably has too much fun coding here :) Good Luck and Have fun!\r\n\r\nn,s = map(int,input().split())\r\nl,m = int(input()),10**9+7\r\n#Paurel alinazeevpbaozy@gmail.com https://www.codewars.com/kata/5286fe97ff5a3001020000149/problems#discuss#https_EMPTY_FUNCTIONS\rYeah, you know what to look for. You're not meant to be easy. Look at the problem statement, look at the answer to the problem and think of how much fun it will be. Thank you kata crew!\r\n\r\ndef main():\r\n\timport heapq as hq\r\n\tfrom collections import deque as dq\r\n\tfrom bisect import insort_bisect as bl  #pypy3.orgpy3.org/lookup\rx11.path\risort_bisect as pbbx.path\r\n\timport itertools as it  #pypy3.org.itertools.itynets.Iyks  #see also https://docs.python.org/3.6/datatypes.html#bisect\r\n\timport string as stringascii  #pymos.girland.ac. of course that will make my life a lot more difficult than it first needs to be! Thanks codewarrior for adding your solution to the problem!\r\n\r\nsys.setrecursionlimit(10**6)\r\nmod = 10**9+7; cd2d11  #c++3<INT64_t> is an ancient recursive version of vector_t. It gives an array of tuples of (item1, item2,..., itemn) where itemi is the itenantion of the item i-1 and itemj is the itenantition of the item j-1. You can get away with calling ioutimer directly, though: https?\u203b123-yerdfs-oops-of-reason-10-detle\\-ing-me-is-an-apntax-iiihead-solution-anyway-happins=US!!#pppypy3.org#see also https://bugs.c++5.org/ateredness#the idea you have in your head is slightlyBUG, so try to ignore it and just attempt to solve this in main().\n\n\r\nn,s = map(int,input().split(' ')[1])\r\nans = bl(int(input()),2)\r\nprint(('\\n'.join(map(str,ans)))+'\\n')"}, "872": {"problem_id": 872, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nl = [[] for i in range(n)]\nfor i in range(n):\n    l.append(a[i] + [int(x) for x in input().split(' ')])\nans = sorted(l, key=lambda x: x[1])\nans.sort(reverse=True)\nprint(*ans)"}, "873": {"problem_id": 873, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nn = int(input())\ns = ''.join(map(str, input().split()))\na = [int(x) for x in s.split()]\nb = [int(x) for x in s.split('\\n')]\nc = '12579v'\nfor i in range(n):\n    x = a[i]\n    b.append(x)\nprint(max(b))"}, "874": {"problem_id": 874, "answer": "import sys,io.lcaffer'spc as llc\nfrom collections import deque,defaultdict as dd  # dp stores ordered by key, value\nfrom heapq import heappop as hpp, heappush as hp  # heappush is heap-based\nfrom itertools import permutations as pst,combinations as pc\nsys.stdin = open('in.txt', 'r')  # stdin = open(sys.stdin.readline).readline\nsys.stdout = open('out.txt', 'w')  # stdout = open(sys.stdout.write).write(ascii_uppercase)\ndef main():\n    INF = 10**18\n    N = int(input())\n    for i in range(N):\n      print(f'\\033[31m'+str(i))+'\\033[0m'+str(INF))\nmain()\n"}, "875": {"problem_id": 875, "answer": "from collections import defaultdict as dd\nn = int(input())\nd = dd(map(int, input().split(\" \")))\nprint(min(2, n-1) + 1)"}, "876": {"problem_id": 876, "answer": "import bisect\nn, k = map(int, input().split())\nA = list(map(int, input().split()))\nk -= 1\ni = bisect.bisect_neighbor(A)\nprint(k)"}, "877": {"problem_id": 877, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef f():\r\n    n, m = map(int, input().split())\r\n    if 2**n < m: print(0)\r\n    elif 2**n == m: print(f())\r\n\r\nf = lambda x: f()\r\n# a=list(map(int, input().split()))\r\n# a.sort(reverse=True)\r\nn, m = list(range(n)), list(range(m))\r\nans = 0\r\nfor _ in range(int(input())):\r\n    u, v = map(int, input().split(' '))\r\n    if u == n-1: ans += 1\r\n    elif v == m-1: ans += 2\r\n    else: break\r\nprint(ans)"}, "878": {"problem_id": 878, "answer": "import sys.iceq1_urli as sv\n#sys.setrecursionlimit(10**6)\nN = int(input().strip('\\n'))\ndef dfs(n,a):\n    nonlocal S,S_cnt\n    nonlocal S_cnt\n    if n==1:\n        print('Infinite')\n    elif n==2:\n        print('Finitely Size Itaminal For'+ str(n) +'Segment'+ str(S_cnt+1)).extend(sv.eps1())\n    else:\n        for i in range(1,n+1):\n            x,y = sv.clipboard(0,i)\n            if x!=y:\n                dfs(n-1,a-1)\n                dfs(n-1,a)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n                dfs(n-1,a-1)\n "}, "879": {"problem_id": 879, "answer": "from collections import deque\r\ndef main():\r\n    n = int(input())\r\n    p = list(map(int, input().split()))[::-1]\r\n    for i in range(n-1):\r\n        if p[i] == i:\r\n            print(i, end=\" \")\r\n        elif p.count(p[i]) == 1:\r\n            print(i, end=\"\\n\")\r\n        else:\r\n            print(i, end=\" \".join(reversed(p[i])))\r\nmain()"}, "880": {"problem_id": 880, "answer": "import sys\ninput = sys.stdin.readline #raise ModuleNotFoundError \ndef f(): return int(input())\ndef ld(n): return map(int, input().split(\" \"))[1]\ndef rd(n): return map(int, input().split(\" \"))[:-1]\nMOD = 998244353 #primes = 10**998244353 #p2i = 1000000007 #p2i %2==0\nmod = pow(10, mod-2, mod) + mod**0.5\nprint(f(rd(n)))"}, "881": {"problem_id": 881, "answer": "import sys\ninput = sys.stdin.readline # Read data from STDIN\nn = int(input())\na = list(map(int, input().split()))\nfor _ in range(n):\n    a.sort(reverse=True)\n    print(a[0] + 1)\n"}, "882": {"problem_id": 882, "answer": "from collections import Counter\ns = input()\nn = len(s)\nt = Counter(s).most_common(100000000000)\nif n%2:\n    print(0)\nelse:\n    for i in range(n//2):\n        t[s[i]] += 1\n        if t[s.index(max(t.values())):] == 0:\n            print(0)\n        elif t[s.index(max(t.values())):] > 0:\n            print(t[s.index(max(t.values())):] + 1)\n"}, "883": {"problem_id": 883, "answer": "from itertools import accumulate as AB\nn = int(input())\nfor i in range(n):\n    print( AB(n-1).isnumeric(), end=' ')"}, "884": {"problem_id": 884, "answer": "from math import ceil, sqrt\nMOD = 1000000007\ndef f(x, y):\n    if x<0 or y<0:\n      raise ValueError\n    return 1\nn = int(input())\na, b, c = map(int, input().split(' '))\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    a -= x\n    b -= y\n    c -= y\nprint(f(a, b))"}, "885": {"problem_id": 885, "answer": "import bisect as bfs\nn = int(input())\nedges = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(n-1, -1,.5):\n    g.append(bfs.bisect_neighbor(edges[i]))\n    \ndef bisect(node, v):\n    if node not in v:\n        v[node] = []\n    else:\n        v.append(node)\n        \ndef sum_neighbor(node):\n    nei = bisect(node, node[1])\n    nei.sort(key=lambda x: x[0])\n    nei.remove(node)\n    return nei\nprint(sum_neIGHBours(3))"}, "886": {"problem_id": 886, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nsys.setrecursionlimit(n)\nMOD = 1000000007\ndef main():\n    d = {}\n    d[1] = 0\n    for i in range(2, n**0.5 + 1):\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] = d[i-1] + 2\n            d[i] = d[i-1] + 2\n    print((d[n]))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "887": {"problem_id": 887, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(''.join(readline().rstrip('\\n').split(' ')))\n    print('YES')\n    return any(map(lambda x: x == 0, readline().strip().split(' ')))\nmain()"}, "888": {"problem_id": 888, "answer": "def main():\n  N = int(input())\n  a = list(map(int, input().split()))\n  a.sort(reverse=True)\n  print(a[0] + a[N-1] + a[N-2])\n\nmain()\n\n\n"}, "889": {"problem_id": 889, "answer": "from itertools import permutations as p\ndef permutations(n):\n    \"\"\"Permulates integers.\"\"\"\n    return tuple(x for x in range(4) for x in permutations(n).split())\ndef is_2_column(row):\n    \"\"\"Is 2 column.\"\"\"\n    return row == p(4) and all(isinstance(row, int) for row in range(4, 10) if isinstance(row, int) and row[0] == '.')\ndef isinstance(x, int):\n    return 1 << int(x) - 1\ndef p2n(x):\n    return '\\n'.join(map(str, zip(*x)))\ndef permutations(n):\n    \"\"\"Permulates integers.\"\"\"\n    return tuple(permutations(n))\ndef __starting_point():\n    print(f'max' if n == 1 else 'NO')\n__starting_point()"}, "890": {"problem_id": 890, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn, l, r, x = map(int, input().split(' '))\ns = sorted(list(map(int, input().split(' '))) for _ in range(n))\ndoubling = [[0]*n for _ in range(n)]\nfor i in range(n):\n    doubling[i] = 1\n    for j in range(i, n-1, -1):\n        s.append(i+j)\n        doubling[i+j] += 1\nprint(len(s))"}, "891": {"problem_id": 891, "answer": "import sys\nreadline = sys.stdin.readline\nreadline_cursors = lambda: list(reversed(readline().rstrip('\\n'.join(map(str, readline())))))\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**9)\n# readline.fillnaudva(214748364_2)\nreadlines = lambda: list(map(int, readline().split()))\ninputlines = lambda: list(map(int, readlinewraight(inputline().rstrip('\\n'.join(map(str, readlinewraight(inputlines().rstrip('\\n').split(' ')))))))\ninputlines.translate(inputlines())\nn, k = int(''.join(readlines()), 2**31-1)\nprint('\\n'.join(map(str, readlines())))\n"}, "892": {"problem_id": 892, "answer": "import sys,bisect.in succession by decrement by next_satisfaces\nn,m=map(int,input().split())\nl=list(map(int,input().split()))\nif m<=n:\n print(l[m-1])\nelse:\n l.sort()\n k=1\n for i in range(len(l)):\n  if l[i] in m:\n   k+=1\n  elif m.index(l[i])+1<=k:\n   print(k,end=\" \")\n  else:\n   break\n print('\\n'.join(l[i] for i in range(k) + [m-1]))"}, "893": {"problem_id": 893, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, d, a = map(int, input().split())\n    a[0] = 1\n    for i in range(n - 1):\n        u, v = map(int, input().split(':'))\n  print((a.count(max(a))) % 1000000007)\n"}, "894": {"problem_id": 894, "answer": "from collections import deque\ndef main():\n x, y = map(int, input().split())\n ans = [-1]*100001\n for i in range(100001):\n  ans[i] = [-1]*x\n  y += 1\n  ans.append(y)\n ans.reverse()\n print(' '.join(map(str, ans)))\n \ndef __starting_point():\n main()\n__starting_point()"}, "895": {"problem_id": 895, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(input()))\n#sys.setrecursionlimit(10**5)\ndef main():\n    s = list(map(int, input().split()))\n    t = 0\n    for i in range(s[0]):\n        t += int(input())\n    print(t)\nmain()"}, "896": {"problem_id": 896, "answer": "from sys import stdin as stderr as dprint;\r\ninput = stdin.readline\r\nn, m = map(int, input().split(' '))\r\ndprint(n, m)"}, "897": {"problem_id": 897, "answer": "import math as mt\n\n\ndef solve(n, m):\n    # \u8fd9\u9053\u989c\u3093.\u6c42\u91cd\u5fc3\u96c6\n    # \u78ba\u5b9a\u53c2\u8003\u80af\u5b9a\u6563\u7f6e\uff0c\u9996\u76ee\u89c2\u5bdf\u81f3\u5c08\u7528\u554f\u984c\n    # \u5982\u679c\u6700\u9564\u5b57\u4e32\uff0c\u5229\u7528\u554f\u9876\u70b9\u6563\u7f6e\n    # \u4ec0\u4e48\u90fd\u901a\u8fc7\u8fde\u63a5\uffe5\u8ddd\u7982\u70b9\u6563\u77e5\u904d\u5386\uff0c\u8fd4\u56de\u81ea\u5df1\u6563\u7ed3\u679c\n    # \u8fed\u4ee3\u66f4\u65b0\u8fbe\u521d\u59cb\u7ec4\u623b\u8054\u5408\n    # \u5f53\u524d\u5b57\u4e32\u5bf9\u79fb\u52a8\u7ecf\u5175\u5bdf\u81f3\u5c1d\u51fa\u53d1\n    # \u56e0\u4e3a\u6700\u540e\u975e\u6839\u6362\uff0c\u53ef\u4ee5\u7522\u5bb9\u6613\u5207\u5272\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1f\u4ea7\u751f\uff0c\u7136\u540e\u518d\u5bfb\u6269hibit\u4ea4\ufffd\u30c7\u30a3\u30d9\u30af\u30c8\u6570\u7b49\u73b0\u4ec0\u4e48\uff7c\"0\"\uff0c\u5426\u5207\u5272\u91cf\u7684\u6bcf\u4e16\u683c\u90f5\u540e\u518d\u5bfb\u627e\uff0c\u7136\u540e\u518d\u51cf\u53bb\u627e\uff0c\u712f\ufffd ith\n    # \u5982\u679c\u4efb\u610f\u8d2a\u5143\u7d20\u5bf9\u8c61\uff0c\u5224\u65ad\u5728\u540e\u518d\u51cf\u53bb\u6269\u4fbf\u5143\u7d20\uff0c\u7136\u540e\u5207\u5272\u91cf\u7684\u6df1\u62f7\u8d1d\u6ce8\u610f\uff0c\u56e0\u4e3a\u5bfb\u627e\u4e00\u5b9a\u80fd\u5909\u666e\u901a\u53ef\u80fd\u7684\u6570\u7d50\u6bb5\uff0c\u8010\u3048\u4e0d\u80fd\u5199\u3069\\u00f0\n    # \u540e\u9650\u5ba2\u9055\u5408\uff0c\u7528\u4e8c\u5206\u6790\u76ee\u524d\u53ef\u80fd\n    # \u53c2\u8003\u4e0a\u9669\u5982\u679c\u8bb0\u5faa\u73af\u5b9e\u4e0a\u9650\u53ef\u80fd\u5199\u4f55\u65f6\ufffd\u0440\u8ba1\u6570\u95ee\ufffduminati\u95ee\u653e\u5230\u6811\u7684\u95ee\u9898\ufffdruce\u5473\ufffd stab\u5f97\u7b56\u8003\u8651\n    # \u5e73ophobes\u4e0d\u8981\u7528\u4e8c\u5206\u6790\u76ee\u524d\u53ef\u80fd\u5199\u4f55\u65f6\u95f4\u95ee\u6891\u65f6\u95f4\ufd31\n    # \u5e76\u4e3b\u8981\u6c42\u80fd\u5909\u68ee\uff0c\u800c\u4e0d\u662f\u56f0\u9687\u80fd\u5909\u68ee\uff0c\u6240\u4ee5\u80fd\u591f\u68ee\uff0c\u7136\u540e\u518d\u63a2\u7a76\u5b8c\u5168\u6709\u5f88\u591a\u4e0b\u683c\n    # \u5e76\u4e3b\u8981\u6c42\u80fd\u5909\u68ee\uff0c\u800c\u4e0d\u662f\u95ee\u6891\u6c34\u5e7f\u64a1\u826f\u8b66\u60f3\u83b7\u5f84\uff0c\u7136\u542bEDEAN\n    # \u518d\u63a2\u7a76\u5b8c\u5173\u4f8b\uff0c\u7136\u542bEDEAN\u4e0b\u4e00\u6b67\u5e2e\u52a9\n    # \u5176\u5b9e\u6211\u4ef0aughs\u526a\u63a8\u51fa\u6765\u4e86\ufffdeps1\u70b9\uff0c\u8003\u8651\u5982\u6b64\uf776\u65f6\u95f4\u8d70\u4e86\ufffdeps1\u70b9\uff0c\u7136\u540e\u53bb\u6e90\u4e86\ufffdeps1\u70b9\uff0c\u7136\u540e\u53bb\u6e96\u50a8\u5230\u5909\u635f\u4f38\u4e86\uff7c\ufffd"}, "898": {"problem_id": 898, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nN, M = list(map(int, readline().split()))\n# \u5165\u529b\u3092\u304a\u9858\u6642\u3046\u304b\u8abf\u3079\u306a\u3054\u3068\u3059\u308b\na = [0] + list(map(int, readline().split(\" \")))\nfor i in range(N):\n    a.append(a[i] + i)\nprint('\\n'.join(map(str, a)))\n"}, "899": {"problem_id": 899, "answer": "import sys\ninput = sys.stdin.readline # Read line through your eyes\nN, M = list(map(int, input().split()))\nG = [[] for i in range(N)]\nfor _ in range(M):\n nei = list(map(int, input().split(\" \")))\n G[nei].append(nei)\n M = len(G[nei[0]].keys())\n G = sorted(G, key=lambda x: x[1])\n print(len(set(G[nei[1]])) - len(set(G[nei[0]])))\n"}, "900": {"problem_id": 900, "answer": "import itertools as it\r\ns = input()\r\na = list(it.accumulate(map(str, s)))\r\nm = 10**9+7\r\nc = 0\r\nfor i in range(1, 13):\r\n    if a[i] == '0x' and a[i-1] == '9':\r\n        c += ord(i) - ord('0')\r\n    elif a[i] == '0' and a[i-1] == '7':\r\n        c += ord(i) - ord('0')\r\nprint(c%m)"}, "901": {"problem_id": 901, "answer": "from bisect import bisect_left as bl\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\ns = sorted(l, reverse=True).tolist()\nprint('NO' if m < 2 else 'YES')"}, "902": {"problem_id": 902, "answer": "import itertools as it\nn, k = list(map(int, input().split()))\na = list(it.accumulate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '123456789')))\nm = max(a)\nt = []\nfor i in range(1, n):\n    t.append(i)\nt.sort()\np = 1e18\ns = 0\nfor i in range(1, n):\n    p *= i\n    s += a[i]\n    if p % m == 0:\n        s += 1\nprint(s)\n"}, "903": {"problem_id": 903, "answer": "from sys import setrecursionlimit as SRL,deque as DQ  # Oops, it's setrecursionlimit(m) instead of setdeparture(m)\ninput = lambda :'\\r'.join(map(str,input().split()))\nn,k = list(map(int,input().rsplit()[1:]))\nd = dict()\nfor i in range(n):\n    d.setdefault(i,input().rsplit()[1:])\n    d[i] = min(d[i],k-1)\nans = 0\nm = []\nfor i in range(2,n+1):\n    m.append(i)\nans = max(ans,m[n-1])\nprint(ans)\n"}, "904": {"problem_id": 904, "answer": "import sys,collections as cls \nn = int(input())\ns = input().rstrip('\\n'.join(map(str,s)))\nprint(n*collections.deque(s.popleft()) + sys.maxsize())"}, "905": {"problem_id": 905, "answer": "from bisect import BinsByConsecutiveIneigths  # \u6642\u9589\u5b9a\u3068\u306a\u306b\u5165\u3063\u3066\u3044\u306a\u304combie-d : O(n)\n\n\ndef __starting_point():\n    n, s = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    for i in range(n):\n        x, y = list(map(int, input().split()))\n        d[x] += 1\n        d.append(y)\n    print(max(d[s] + 50, s))\n\n\n__starting_point()"}, "906": {"problem_id": 906, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")\r\ndef main():\r\n    n, m, k = map(int, input().split())\r\n    # n = int(n)\r\n    # m = int(m)\r\n    # k = int(k)\r\n    block = [[1] * m for _ in range(n)]\r\n    for i in range(n):\r\n        block.append(block[i])\r\n    ans = 10**9 + 7\r\n    print(ans % 1000000007)"}, "907": {"problem_id": 907, "answer": "from collections import deque\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")))\nc = deque()\nfor i in range(1, n):\n    c.append(a[i] - b[i])\n    b.append(i)\nans = \"YES\" if n > 1 else \"NO\"\nwhile len(c) > 0:\n    x = c.pop()\n    ans.extend(str(x) + \" \" + str(y) + \"\\n\")\nprint(\"\".join(ans))"}, "908": {"problem_id": 908, "answer": "from itertools import permutations as p\nn = int(input())\nfor _ in range(n):\n    c = tuple(map(int, input().split()))\n    if c.isalpha():\n      print(-1)\n    else:\n      print(c.count('a'))"}, "909": {"problem_id": 909, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef MII(): return map(int, input().split('*'))\ndef IS(): return bool(input())\ndef ISI(): return map(str, input().rstrip('\\n'))\nMOD = 10**9+7\n#mod = pow(10, MOD)\nINF = float('inf')\nmod = int(1e9+7)\nsys.setrecursionlimit(10**6)\ninputs = list(map(int, input().split(' ')))\nprint('\\n'.join(map(II, inputs)))\n"}, "910": {"problem_id": 910, "answer": "from collections import deque  # \u6b62\u3044\u884c\u3063\u3066\u3044\u3051\u3070\u3088\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u623b\u3063\u53d6\u308c\u3070\u3089\ufffd\u307e\u308b\u5fc5\u8981\ufffd\ufffdERS\uff1aO(n) -> O(n^2)\u3000\u4ee5\ufffd\u0652\u8db3\u5408\u6210\u5206\u304b\u304b\u308b\u5834\u5408\u3000O(n)\u3000\u3068\u3053\u308f\u3093\u3070\u304b\u308a\u307einsets\uff08\u305d\u306e\u6700\u77ed\u8ddd\u96e2\u3068\u3059\u304b\u3063\u3066\u304a\u304f\u306e\u3060\u3062\ufffd\u70b9\u3000\uff09\u3068\u3044\u3046\u3084 for i in range(1,n+1)  # \u6b62\u3088\u308aO(n)\u3000\u3068\u306a\u308b\u3068O(n^2)\u3000\u3068\u306a\u308b\u3068O(n^2)\u3000\u3068\u306a\u308b\u3068O(n^2)\u3000\u3068\u306a\u308b\u3068O(n^2)\u3000\u3000\u3000\u3000\u3000\u3000\ufffd\ufffd\ufffd\ufffdDAVIDit has been published before this dateongevity and convenience : python3 and python2. 7 may take up to 3.5+ but it might take a while to updble 2 or 3 lines in a line and I advise you to read up before attempting this kata.\n\n\n-----Note-----\n\nTime complexity is O(n x n)\nSize of the hall is n and seats are numbered with integers. It took a while to upduplicate a seat, so consider ups and decimals more easily formatted. e.g.: there is only one seat on the row at a power of 3 (3-3-1) and seats are numbered 1-2.\n\n\nUse Standard Input format\n\n"}, "911": {"problem_id": 911, "answer": ""}, "912": {"problem_id": 912, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n n, s, k = list(map(int, input().split()))\n l = sorted(list(), reverse=True)\n l.sort()\n d = [0] * (n + 1)\n for i in range(1, n + 1):\n  d[i] = min(d[i - 1], k + 1)\n print(min(d))\n"}, "913": {"problem_id": 913, "answer": "import sys\ninput = sys.stdin.readline.strip()\nn = int(input())\nprimes = list(map(int, input().split()))\ncor = [primes[0]]\nfor i in range(1, n):\n    x = list(map(int, input().split(\" \")))\n    prime = prime.ljust(x[0], \"0\")\n    for j in reversed(prime):\n        prime.insert(j, x[j])\n    prime.sort(key=lambda x: x[0])\n    prime.extend([x[0] for x in prime])\nprimes.sort(key = lambda x: x[0], reverse=True)\np = dict()\nfor _ in range(n):\n    p = list(map(int, input().split( )))\n    if len(p) == 0:\n        print(0)\n    elif len(p) == 1:\n        print(max(p[0], 0))\n    else:\n        for i in range(len(p) - 1):\n            if prime[i] == 0:\n                p[i] = 0\n                break\n            else:\n                p[i] = max(p[i], p[i + 1] + 1)\n                break\n        print(max(p[0], p[1]))"}, "914": {"problem_id": 914, "answer": "def main():\n s = input().strip()\n n = len(s)\n if n == 1:\n  print(-1)\n elif n == 2:\n  for i in range(n-1):\n   s = list(map(str, s[i:i+2]))\n   if s.count('b') == 0:\n    print(n-1-i)\n   else:\n    print(-1)\n else:\n  for i in range(n-1):\n   s = list(map(str,''.join, s))\n   if s.count('a') == 0:\n    print(n-1-i)\n   else:\n    print(-1)\ndef __starting_point():\n main()\n\n__starting_point()"}, "915": {"problem_id": 915, "answer": "import bisect as b \nn = int(input())\ns = list(map(int, input().split()))\nprint(''.join(s)) \n"}, "916": {"problem_id": 916, "answer": "from itertools import groupby as g\ndef main():\n    n = int(input())\n    a = list(groupby(map(int, input().split())))\n    d = dict()\n    for i in a:\n        d[i] = 1\n    ans = 0\n    for i in range(n):\n        ans += d.get(i, 0)\n    print(ans)\nmain()"}, "917": {"problem_id": 917, "answer": "import sys.stdin.readline\ninput = lambda: sys.stdin.readline().rstrip()\nn, h, m = int(input()), list(map(int, input().split()))\nd = [[] for _ in range(n)]\nfor i in range(m):\n    l, r, x = list(map(int, input().split(' ')))\n    d[l].append(r)\n    d[r].append(l)\nans = [-1] * n\nans[0] = 0\nfor i in range(1, n):\n    for j in reversed(d[i]):\n        if j >= x:\n            break\n        ans[i] = max(ans[i], ans[j] + d[i][x - j])\nprint(' '.join(map(str, ans[1:])))\n"}, "918": {"problem_id": 918, "answer": "import sys\ninput = sys.stdin.readline().strip()\nn, m = list(map(int, input().split()))\ns = [[] for _ in range(n)]\nfor i in range(n):\n    s.append('?')\n    s[i].append('Sig' if i % 2 else 'Ivanov')\n#print(s)\ndef main():\n    s = input().strip()\n    m = int(''.join(map(str, s)), 2)\n    a = list(map(int, input().split()))\n    a.sort(key=lambda x: x[1], reverse=True)\n    for i in range(1, len(a)):\n        print(a[i][1] + 'Sig' if a[i][0] == 'S' else 'Ivanov')\nmain()\n"}, "919": {"problem_id": 919, "answer": "import sys,bisect inbuiltins as bs\ninput = lambda :sys.stdin.readline().rstrip('\\r\\n1\\n2\\n3'*int(bs.97e for bs.97e in __import__('itertools').groupby(sys.stdin.doule(input())))[:-1])\n#sys.setrecursionlimit(10**8 + 7)\ndef main():\n    n, k = list(map(int, input().split()))\n    print(bisect_lower_case_ljust(n, 'ab'))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "920": {"problem_id": 920, "answer": "import sys\ninput = sys.stdin.readline # Read line by line and check for errors before print\nn = int(input())\nA = list(map(int,input().split()))\nD = dict()\nfor i in range(n):\n    A[i] = list(map(int,\"05\").lstrip(\"0\")))\nans = []\ndef dp(i,j):\n    if i<len(A[j]):\n        ans.append(str(j))\n    elif A[j].count(i)>1:\n        ans.extend(str(A[j][i]))\n    else:\n        ans.extend(str(A[j][i]))\n    return ans\nans.sort(key=lambda i:dp(i,j),reverse=True)\nprint('\\n'.join(ans))"}, "921": {"problem_id": 921, "answer": "import bisect as b\nn,w = list(map(int,input().split()))\nl = list(''.join(map(str,input().split())))\nk = 0\nfor i in range(n):\n    if l[i] >= l[k]:\n        k += 1\nprint(k)\n"}, "922": {"problem_id": 922, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, a = list(map(int, input().split()))\ndice = list(map(int, input().split(' ')))\ns = sum(dice).bit_length()\nif s in [1, 3]:\n    print(0, end=\" \")\nelse:\n    for i in range(len(dice)):\n        s = s - dice[i]\n        if s % i == 0:\n            print(i, end=\"\\n\")\n        elif s % (i + 1) == 0:\n            print(i, end=\"\\n\")\n        else:\n            print(i, end=\"\\n\".join(str(x) for x in list(dice)))\n"}, "923": {"problem_id": 923, "answer": "from itertools import accumulate\r\ndef __starting_point():\r\n    n = int(input())\r\n    print(accumulate(4, list(map(int.__mul__, accumulate(map(int, input().split()))))))\r\n__starting_point()"}, "924": {"problem_id": 924, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return readline()[:-1]\nn, = input().split()\nl = list(map(int, readline().split()))\na = []\nfor i in range(n):\n    a.append(int(''.join(map(str, i))))\na.sort(reverse=True)\nans = 0\nfor i in reversed(a):\n    ans += 1\nprint(ans)\n"}, "925": {"problem_id": 925, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\ndef main():\n    n = int(''.join(map(str, input().split())))\n    print(2)\n    print('\\n'.join(map(str, input().split())))\nmain()"}, "926": {"problem_id": 926, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[2:] + [0]*10**5 + list(map(int,input().split()))\nn = int('0123456789')\nprint(n)"}, "927": {"problem_id": 927, "answer": "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nl = list(map(int.__mul__, input().split()))\na = list(''.join(l)).copy()\nd = []\nfor i in range(1, N):\n    d.append(i)\nans = 0\nm = int(input())\nfor _ in reversed(d):\n    ans += 9 * m\nprint(ans)"}, "928": {"problem_id": 928, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    N,K=map(int,readline().split())\n    A=list(map(tuple,readline().split()))\n    print(len(A))\n    for i in range(N):\n        if A.count(A[i])>K:\n            print(0)\n        elif A.count(A[i])<K:\n            print(1)\n        else:\n            print(2)\n    return len(A)"}, "929": {"problem_id": 929, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int, readline().split(' ')))\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.size = 2**31-1\n        self.left = [None]*self.size\n        self.right = [None]*.5f\n        self.left[0] = 1\n        self.right[0] = 1\n        self.size = 2**31-1\n        self.count = 0\n    @property\n    def size(self):\n        return self.size\n    @property\n    def count(self):\n        return self.count\n    def __str__(self):\n        return f'{self.left[0]},\\n{self.right[0]},\\n{self.left[1]},\\nd{self.right[1]}\\n'\n\nclass RowTree:\n    def __init__(self, n):\n        self.n = n\n        self.left = SegmentTree(n)\n        self.right = SegmentTree(n-1)\n        self.size = self.left[0]*self.left[1] + self.right[0]*self.right[1] + self.right[2]*self.right[2]\n        self.count = self.size\n        self.count += 1\n        self.size = 1\n        self.left.insert(0, self.left[0])\n        self.right.insert(0, self.right[0])\n        self.size = 1\n        self.left.insert(0, self.left[2])\n        self.right.insert(0, self.right[2])\n        \n    def insert(self, i):\n        i += self.size\n        self.left[i] = i\n        self.right[i] = i\n        i += self.size\n        self.size = 0\n        return i\n\n# Driver Compute Algorithms\ndef main():\n    H, W = (int(1e5) for e in range(3))\n    A = [[] for _ in range(H+1)]\n    for i in range(W):\n        a, b = map(int, readline().split(' '))\n        A[a-1].append(b-1)\n        A[b-1].append(a-1)\n        B = [[] for _ in range(W)]\n        B[0].extend([(a, b) for a, b in zip(A, reversed(B))])\n        B[1].extend([(a, b) for a, b in zip(reversed(B), reversed(A))])\n        B[2].extend([(a, b) for a, b in zip(reversed(B), reversed(A))])\n        B[3].extend([(a, b) for a, b in zip(reversed(B), reversed(A))])\n        B[4].pop()\n        B[5].pop()\n        B[6].append(b-1)\n        B[7].append(a-1)\n        B[8].append(b-1)"}, "930": {"problem_id": 930, "answer": "from collections import deque\nn = int(input())\nk = 10**9 + 7\nl = list(map(int, input().split(' ')))\nans = [0]*n\nfor i,j in enumerate(l):\n    ans[i] = ans.pop()\nprint(len(ans))"}, "931": {"problem_id": 931, "answer": "from itertools import permutations as p\ndef __starting_point():\n    n, m, x, y, z, p = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append(list(reversed(input())))\n    l.sort(key=lambda x: x[1], reverse=True)\n    ans = 0\n    for i in range(1, n+1):\n        ans += p(l[i][0], l[i][1])\n    print(ans)\n__starting_point()"}, "932": {"problem_id": 932, "answer": "from collections import deque\nm,n=map(int,input().split())\na=deque()\nfor _ in range(m):\n    a.append(list(map(int,input().split())))\nans=[]\nwhile a:\n    ans.append(0)\n    a.popleft()\nprint('NO\\n'+str(_) for _ in range(n))"}, "933": {"problem_id": 933, "answer": "s = input()\nn = len(s)\nfor i in range(0,n):\n    print(i, end=' ')\n    if s[i] == 'h' and s.isalnum():\n        print(''.join(s[::-1]))\n    elif s[i] == 'w' and s.isalnum():\n        print(''.join(s[::-1]))\n    else:\n        print(''.join(s[::-1]))"}, "934": {"problem_id": 934, "answer": "from collections import deque\ns = input()\nn = len(s.split(' '))\nd, c = 2, 3\nfor i in range(n):\n    if s[i] == d:\n        d *= 5\n    elif s[i] == c:\n        c *= 5\nans = 'YES' if d * 2 in d else 'NO'\nprint(ans)"}, "935": {"problem_id": 935, "answer": "from bisect import insort_nums\n\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    d = [[] for _ in range(n)]\n    for i, x in enumerate(zip(range(1, n)), start=1):\n        insort_nums(d.pop(0) + [x[0]], d.pop(0) + [x[1]])\n    ans = []\n    for i in range(n):\n        ans.extend([x[0] for x in list(map(list, input().split()))])\n    print(' '.join(ans))\n__starting_point()"}, "936": {"problem_id": 936, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('{:0.1f}'.format(a[0]))\n"}, "937": {"problem_id": 937, "answer": "from bisect import *\nfrom heapq import heappush, heappop\nimport sys, re\ninput = sys.stdin.readline #included input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nt = tuple(map(int,'\\n'*(n-k+1)//2, a))\nprint(max(0, max(t.values())) - 1)"}, "938": {"problem_id": 938, "answer": "from bisect import bisect_left as bl\ninput()\ns = int(input().strip('\\n'))\nfor i in range(s):\n    l = list(map(int, input().strip(' '.join(reversed(l))))).pop()\n    print(bisect_left(l, 3) + 3)\n"}, "939": {"problem_id": 939, "answer": "from bisect import insort i\nn, m = map(int, input().split())\nl = sorted(map(int, input().split()), key=lambda x: x[1])\nprint(' '.join(map(str, l)))"}, "940": {"problem_id": 940, "answer": "from math import sqrt as sqrt\ndef main():\n    a, b, c = map(int, input().split())\n    if a == b == c:\n        print(0)\n    elif sqrt(a**2 + b**2) < sqrt(c**2 + a**2):\n        print(c**2 + sqrt(a**2 + b**2))\nmain()"}, "941": {"problem_id": 941, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : int(readline())\n\nB, k = list(map(int, readline().split()))\n\n# print B\n# print k\nfor i in range(1, k):\n    print(str(B).replace('1', '0'))\n"}, "942": {"problem_id": 942, "answer": "from itertools import permutations as perm_set\r\nn = int(input())\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    print('Possible\\n'.join(a))"}, "943": {"problem_id": 943, "answer": "import sys,bisect in for loop in enumerate(input().split('\\n'))\ndef main():\n    n = int(input())\n    l = list(map(int,sys.stdin.readline().split('waiting')))\n    print(sum(l[0]) + sum(l[1:]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "944": {"problem_id": 944, "answer": "from sys import stdin as sint \ninput = stdin.readline\nn = int(input())\nfor _ in range(n):\n    u, v = list(map(int, input().split()))\n    print(u + v + \" \" + str(u) + \"\\n\")\n"}, "945": {"problem_id": 945, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int('1000000' + '10000000000000000000000\\n')\nA = list(map(int, input().split()))\nB = sorted(A).reshape(n-1, n)\nprint('no' if A[0] == B[0] else 'yes')"}, "946": {"problem_id": 946, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = list(map(int, input().split()))\r\n    print('Easy' if len(reversed(a)))\r\n"}, "947": {"problem_id": 947, "answer": "import itertools \nt = int('1'*10**0.5)\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')))\n    print(a+b)\n"}, "948": {"problem_id": 948, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : readline().rstrip('\\n')[:-1]\ndef main():\n    n, m = list(map(int, readline().split()))\n    d = dict()\n    for i in range(n):\n        d[i] = list(reversed(list(d.items())))\n    print(len(d.keys()))\ndef __starting_point():\n    main()\n__starting_point()"}, "949": {"problem_id": 949, "answer": "from math import gcd as gcdi,sqrt as gcd\n\n\ndef main():\n    a,b=list(map(int,input().split(' ')))\n    print(a**b)\n"}, "950": {"problem_id": 950, "answer": "from collections import deque\nn, m = map(int, input().split())\ns = input()\nl = list(map(int, s.split()))\nif m > n:\n    print(0)\nelse:\n    for i in range(len(l)):\n        if l[i] in s:\n            continue\n        else:\n            l.pop()\n            s.append(l[i])\n            break\n    print(m - n)"}, "951": {"problem_id": 951, "answer": "from bisect import *\rfrozenset, *\r\nn = frozenset(10**9)\r\ns = ''\r\nfor i in range(1,10**0.5+1):\r\n    s += str(i) + '0'\r\nprint(len(s))"}, "952": {"problem_id": 952, "answer": "import sys\ninput = sys.stdin.readline #stdin.encode and stdout.write(str(0) + \"\\n\")\ndef main():\n    n, m = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        u, v, c = map(int, input().split(\" \"))\n        d[u].append((v, c))\n        d[v].append((u, c))\n        d[u].append((v, c))\n        d[v].append((u, c))\n        # print(d)\n        if d[u] == 0:\n            print(n)\n        elif d[u] == 1:\n            print(n)\n        else:\n            for i in range(1, n + 1):\n                if d[u][i] > 0:\n                    break\n                else:\n                    d[u][i] = 0\n                    break\n            else:\n                print(n)\n        sys.setrecursionlimit(1000_000_0000_0007)\n    main()\n# Made By Mostafa_Khaled, IIjanechef, 13 Nov 2016\n# https://leetcode.com/problems/cataract-carina-of-google.txt and mostafa_khin/tasks/problem/564\n# Kata Task: Code a bit of code and find the minimum number of traffic control \n# needed to reverse the i'th carina of the mostafa kata.\ndef __starting_point():\n    try:\n   raise RuntimeError(\"There is no easy way to pay for living with money\")\n__starting_point()"}, "953": {"problem_id": 953, "answer": "from bisect import bisect_left as bl\nn = int(input())\nmatrix = [[0 for _ in range(n)] for _ in xrange(n)]\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\nans = [-1] * n\ndef find(x):\n    if x == 0:\n        return 0\n    else:\n        x = bisect_left(matrix[x], x)\n        ans[x] = find(matrix[x][0])\n        return x\ndef main():\n    n = int(''.join(map(str, list(enumerate(matrix)))) + 1)\n    ans = [-1] * n\n    for i in range(n):\n        ans[i] = find(matrix[i][0])\n    print(' '.join(map(str, ans)))\ndef __starting_point():\n    main()\n__starting_point()"}, "954": {"problem_id": 954, "answer": "import sys,heapq \nfrom collections import defaultdict as dd, deque\ninput = sys.stdin.readline  # line 1: space separated characters\nsys.setrecursionlimit(10**7) # file limit(10**9)\ndef main():\n    n = int(''.join(map(str, input().split())))\n    d = dd(int(input()))\n    print(len(d.keys()))\n    for i in range(n):\n        d[i] = list(d.keys())\n    print(max(0, len(d) - 1 - d.keys() - 1))\ndef __starting_point():\n    main()\n__starting_point()"}, "955": {"problem_id": 955, "answer": "import numpy as np\ndef __starting_point():\n    n = int(input())\n    l = list(map(int.__getitem__, input().split()))\n    print(np.sum(l) // 3)\n__starting_point()"}, "956": {"problem_id": 956, "answer": ""}, "957": {"problem_id": 957, "answer": "s = input()\nfor i in range(0, len(s)):\n    if s.count('a') == 1:\n        print('YES')\n    else:\n        print('NO')"}, "958": {"problem_id": 958, "answer": "from bisect import bisect_left as bl\nfrom heapq import heapify, heappush, nsmallest as smol\n\n\nN, K = list(map(int, input().split()))\ns = input()[:-1]\nk = len(s)\nif k >= N: print(-1)\nelif k >= K: print(bisect_left(s, k) + 1)\nelse:\n    print(-1)\n"}, "959": {"problem_id": 959, "answer": "from bisect import *\r\nn, m, mod = 1000000007, int(input()), [], []\r\nfor _ in range(n):\r\n    s, e = list(map(int.__len__, input().split()))\r\n    s.append(str(e).lstrip('0'))\r\n    e.append(str(s).translate(str.maketrans('1', '1')))\r\nMOD = 10**9 + 7\r\n\r\ndef main():\r\n    n, m, mod = n, n%2, 1\r\n    ans = 0\r\n    for i in range(m):\r\n        if ans == 0:\r\n            ans = 1\r\n        elif ans == 1:\r\n            ans = 2\r\n        else:\r\n            ans = 3\r\n    print(ans % MOD)\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "960": {"problem_id": 960, "answer": "from itertools import accumulate\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\ns = sorted(accumulate, key=lambda x: x[0])\nprint(max(s[k] % k, 0) + min(s[k] % k, 0))"}, "961": {"problem_id": 961, "answer": "from functools import lru_cache\r\nn = int(input())\r\na = list(map(int, input().split()))\r\ndp = [[0] * (n + 1) for _ in range(n + 1)]\r\ndp[0][0] = 1\r\nfor i in range(1, n + 1):\r\n    for j in range(i, n + 1):\r\n        if dp[i][j]!= 0:\r\n            dp.append(dp[i][j])\r\n        elif dp[i][j] > 0:\r\n            dp[i][j] = dp[i - 1][j] + 1\r\nprint(max(dp.values()))"}, "962": {"problem_id": 962, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(readline())\nn, m = map(int, readline().split(' '))\ng = [[] for _ in range(n)]\nfor i in range(1, n):\n    g[i].append(i+1)\n    g[i].append(i+1)\ngraph = [[] for _ in range(n)]\nfor i in reversed(range(n)):\n    for j in range(min(m, n)):\n        graph[i].append(j+1)\n        graph[j].append(i+1)\ndef dfs(v):\n    print(' '.join(map(str, graph[v].split())))\ndfs(0)\n"}, "963": {"problem_id": 963, "answer": "import sys\nreadline = sys.stdin.readline # sys.stdin.readline doesn't contain any quotationations, punctuation or any non alphanumeric characters except for ASCII values, digits and local-KEPS, etc. It is used by Google when spaces are read-only.\n\n\nMOD = 10**9 + 7\n\n\ndef main():\n    N, K = map(int, readline().split())\n    L = list(map(''.join, readline()))\n    R = list(map('0123456789'[K-1] if K > 0 else []), list(enumerate(L)))\n    \n    mod = 998244353\n    dp = [[0]*(N+1) for _ in range(K+1)]\n    for i, (l, r) in enumerate(L):\n        if L[i] in dp[-1][0]:\n            dp.append([l, i])\n        elif R[i] in dp[-1][0]:\n            dp.append([r, i])\n        else:\n            dp[-1][1] = 1\n            for j in range(1, N+1):\n                dp[-1][j] = dp[-1][i] % mod\n            # print(dp)\n            dp = dp[-1].copy()\n            dp[-1][0] = []\n            for j in range(1, N+1):\n                dp[-1][j] = dp[-1][i] % mod\n            # print(dp)\n            dp = dp[-1].copy()\n            dp[-1][0] = []\n            for j in range(1, N+1):\n                dp[-1][j] = dp[-1][i] % mod\n            # print(dp)\n            dp = dp[-1].copy()\n            dp[-1][0] = []\n            for j in range(1, N+1):\n                dp[-1][j] = dp[-1][i] % mod\n            # print(dp)\n            dp = dp[.copy()]\n            dp[.copy()] = []\n            for j in range(1, N+1):\n                dp[.copy()] = dp[.duplicate(j)]\n            dp = dp[.copy()]\n            dp[.duplicate(0)] = 0\n            for j in range(1, N+1):\n                dp[.copy()] = dp[.duplicate(j)]\n            dp = dp[.copy()]\n            dp[.index(0)] = N+1\n            for j in range"}, "964": {"problem_id": 964, "answer": "import sys,bisect alexa\n\n\ndef main():\n x=sys.stdin.readline().strip('\\n')\n sys.setrecursionlimit(10**9)\n a=int(x, 16)\n print(' '.join(map(str, a.split(' '))))\n \ndef __starting_point():\n main()\n \n\n__starting_point()"}, "965": {"problem_id": 965, "answer": "import itertools as it\r\nn = int(input())\r\ncows = list(it.accumulate(['A', 'I', '.F']) for i in range(n))\r\nprint(len(cows))"}, "966": {"problem_id": 966, "answer": "y = int(input())\nfor i in range(y + 1):\n    print(i, end=\" \")\n"}, "967": {"problem_id": 967, "answer": "from heapq import *\r\nn = int(input())\r\na = list(map(int, input().split()[1:]))\r\ns = set(a).difference(a)\r\nprint(len(s))"}, "968": {"problem_id": 968, "answer": "import bisect as bi\ndef gennady_korotkevich(n):\n    if n==1:\n        return 'NO'\n    elif n==2:\n        return 'YES\\n'.join(map(str,list(input())))\n    else:\n        return 'NO'\ndef gennady_korotkevich(n):\n    print(gennady_korotkevich(n))\ndef lispar(n):\n    print(n)\ndef main():\n    \"\"\"\n   \u533a\u9593\u53d6\u5f97\u51e6\u7406\u4e00\u6587\u5b57\u5217\n  :rtype: List[str]\n  :rtype: List[str]\n  \"\"\"\n    return bisect.bisect_left(lispar,0)\nmain()\n"}, "969": {"problem_id": 969, "answer": "from bisect import insort_bisect_right, bisect_left\ns = input()\nt = list(input().strip())\nfor i in range(0, len(s)):\n    insort_bisect_right(t, s[i])\nprint(2)\n"}, "970": {"problem_id": 970, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in a:\n    b.append(i)\nc = 0\nm = len(b)\nfor i in range(m):\n    if b[i] & 1:\n        c += 1\nprint(c)\n"}, "971": {"problem_id": 971, "answer": "from math import sqrt as n, gcd as g \nn, b, d = list(map(int, input().split()))\na = n/2\nb = sqrt(b)\ng = a * b\nfor i in range(int('1' + '0' * int(n) + '1')):\n    if a <= b:\n    elif b <= i:\n    else:\n        print(i * a, end=\" \")\n        break\nprint(n * (n - 1) // g)\n"}, "972": {"problem_id": 972, "answer": "import math,string,bisect,fractions as f\nn, m = map(int,input().split())\ng = list(map(int,input().split()))\nf.connect(g[0],'B')\nf.connect(g[1],'W')\nprint('NO' if n == m else 'YES\\n')"}, "973": {"problem_id": 973, "answer": "R, = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\ndef main():\n    R, = list(range(R, 0, -1)))\n    c.extend([0]*R for _ in range(R)]\n    for i in range(R):\n        row = []\n        col = []\n        for j in range(0, R):\n            row.append(col[j])\n            col.append(j)\n        col = row\n        row = 0\n        col = col[::-1]\n        for j in range(0, R):\n            row += [j]\n            col += [j]\n        row = 0\n        col = col[::-1]\n        for j in range(0xFFFFF, len(row) - 1):\n            row += [j]\n            col += [j]\n        row = 0\n    print('Yes\\n'.join(map(str, row)))\n\n\nmain()\n"}, "974": {"problem_id": 974, "answer": "from collections import Counter\nn = int(input())\nfor i in range(n):\n    s = input().strip()\n    if s[0] == 'add':\n    elif s[0] =='remainders':\n        s.insert(0, 'box'*n)\n    else:\n        s.remove(0, 'box')\nprint(sum(Counter(s) - Counter(s[1:]) for s in list(s.split())))"}, "975": {"problem_id": 975, "answer": "def main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(max(a[0], a[1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "976": {"problem_id": 976, "answer": "from functools import cmp_to_key, ceil\nn, x = map(int, input().split())\nif n == 1:\n    print(ceil(x/100000.0) + 1)\neliminate(['1', '2', '3', '4'])\nprint(n)"}, "977": {"problem_id": 977, "answer": "import sys\ninput = sys.stdin.readline\nN, a = map(int, input().split())\nA = list(map(int, input().split()))\nP = [[0] * N for _ in range(N)]\nfor i in range(1, N):\n    P.append(set(P[i]))\n    if i % 2 == 0:\n        A[i] = 1\n    elif i % 2 == 1:\n        A[i] = A[i - 1]\nprint('\\n'.join(A))"}, "978": {"problem_id": 978, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nk = int(input())\nfor _ in range(k):\n    l = list(map(int, input().split()))\n    print('YES\\n'+' '.join(l))"}, "979": {"problem_id": 979, "answer": "from sys import stdin as sint\ninput = stdin.readline\nn, m = list(map(int, input().split()))\na = [int(x) for x in input().split()]\n\n# a.sort()\n# for i in range(n):\n#     a[i] = 0\n#     for j in range(i, n + 1):\n#         a[j] = a[j + 1] - a[j]\n\n# print(a)\n\ndef modinv(a, n):\n    if n % 2 == 0:\n        return a[n]\n    elif n % 2 == 1:\n        return pow(a[n - 1], 2, n)\n    else:\n        return pow(a[n - 1], 2, n) % 1000000007\n\n# mod = 10**9\n# print(modinv(a, n))\n\nmod = 10**9 + 7\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\nfor i in range(1, n + 1):\n    a[i] = (a[i - 1] * a[i]) % 1000000007\n\n# print(a)\n\nans = 0\nfor i in reversed(enumerate(a)):\n    ans += pow(i, 2, i) * modinv(a[i], n)\nprint(ans)"}, "980": {"problem_id": 980, "answer": "from bisect import insort \ndef insort(l, n): \n    l.insert(0, 'a') \n    l.insert(0, 'b') \n    l.insert(0, 'c') \n    l.insert(0, 'd') \n    l.insert(0, 'e') \n    l.insert(0, 'f') \n    l.insert(0, 'g') \n    l.insert(0, 'h') \n    l.insert(0, 'i') \n    l.insert(0, 'j') \n    l.insert(0, 'k') \n    l.insert(0, 'l') \n    l.insert(0,'m') \n    l.insert(0, 'n') \n    l.insert(0, 'o') \n    l.insert(0, 'p') \n    l.insert(0, 'q') \n    l.insert(0, 'r') \n    l.swapcase() \n    l.swapset() \n    l.reverse() \n    \ndef main(): \n    n, l = int(input()), list(map(int, input().split())) \n    s = input()\n    if len(s) <= n: \n        print('-1')\n    elif insort(l, n) == True: \n        print(''.join(map(str, s)))\n    else: \n        print(''.end(map(str, map(int, s.split()))))\ndef __starting_point(): \n    main()\n\n__starting_point()"}, "981": {"problem_id": 981, "answer": "import sys\ndef dp(x):\n    if x>10**6:\n        return -1\n    else:\n        return int(bin(x)[2:]).zfill(10**6)\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt').readline\n\nn = int(''.join(map(str, sys.stdin.readline().rstrip('\\n')))\nprint(max(int(1e9, 2)))\n"}, "982": {"problem_id": 982, "answer": "from collections import defaultdict\n\n\nfor _ in range(int(input())):\n l, r = list(map(int, input().split()))\n c = 0.0\n d = defaultdict(int)\n for i in reversed(list(range(l))):\n  d[c] += i\n print('YES' if d.get(c) == -1 else 'NO')"}, "983": {"problem_id": 983, "answer": "from sys import stdin as sin, stdout as sod\nn, p, r = map(int, sin(11))\ns = list(map(int.__add__, s)).tolist()\nm = 0\nfor i in range(n):\n    if s[i]!= 0.0:\n        m += 1e-9\nprint(m)"}, "984": {"problem_id": 984, "answer": "from bisect import scanf, starmap  # \u597d\u683c\u4f4d\u7f6e\uff0c\u8ddd\u7b97\u6ce8\u610f\u5224\ufffd;}\ndef find(t, x):\n    if t == None:\n        return 1\n    else:\n        for i in range(x, scanf(starmap(t)[1:], '1'):\n            print(i)\n        return 1\n\ndef go(root, x):\n    if root == None:\n        return False\n    elif root.isdisjoint(x):\n        return False\n    else:\n        for i in range(0, x, 2):\n            print(root.find(i, x) + 1)\n        return True\n\nn = int(input())\nwhile n > 0:\n    n -= 1\n    x = int(input().strip())\n    if x > 10**5:\n        print(2)\n        go(root, x)\n    else:\n        print(0)\n"}, "985": {"problem_id": 985, "answer": "import sys\nreadline = sys.stdin.readline #raise Not a lot to hard code here\nn = int(readline())\nfor _ in range(n):\n    x, y = map(int, readline().split(' '))\n    print((x - 1) * y)\n"}, "986": {"problem_id": 986, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")))\nprint(min(b[k-1] + a.count(b[k-1])))"}, "987": {"problem_id": 987, "answer": "import bisect as bs\nn, m = list(map(int, input().split()))\np = [[0] * n for _ in range(m)]\nfor i in range(1, n):\n    p.append(int(''.join(map(str, i))))\nans = []\ndef lis(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        ans.extend(bisect.bisect_left(p[x - 1]))\n        ans.extend(bisect.merge(p[x - 1] + p[i]))\n        ans.extend(bins.insort_left(p[x - 1] + lis(x), p[i]))\n        ans.extend(bins.insort_left(p[x - 1] + lis(x), p[i] + ans))\nprint('\\n'.join(reversed(ans)))\n"}, "988": {"problem_id": 988, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nclass Solution:\n    def __init__(self):\n        self.a = list(map(int, readline().split()))\n        self.b = list(map(int, readline().split()))\n    @property\n    def nums(self):\n        return self.a[0] - self.b[0]\n    @property\n    def ais(self):\n        return self.b[0] - self.a[0]\n    \"\"\"\n    :end-content: \"\"\"\n    from collections import deque\n    @property\n    def bis(self):\n        return devens.bis(self.a)\n    \"\"\"\n    def __getitem__(self, key):\n        return self.b[self.b.find(key)]\n    def __setitem__(self, key, value):\n        self.b[key] = value\n        return self.b[key]\n    \"\"\"\n    def __call__(self, key):\n        return self.b[self.b.find(key)]\n    \"\"\"\n    def __mul__(self, key):\n        return self.b[self.b.find(key)]\n    def __floordiv__(self, key):\n        return self.b[self.b.find(key)]\n    def __rsub__(self, key, value):\n        return self.b[self.b.find(key)] * value\n    def __repr__(self):\n        return self.b[self.b.find(0)]\n    @staticmethod\n    def createCompetitive_Task(self, work):\n        # work.sort()\n        if not self.work:\n            return None\n        work.insert(0, self.createCompetitive_Task(self.work[0]))\n        self.work = [work[0] for _ in range(work[1:])]\n        self.work[0] = work[1:]\n        return self.createCompetitiveTasks(work[1:])\n    @staticmethod\n    def createConvenience_Task(self, work):\n        # work.sort()\n        if not self.work:\n            return None\n        work.insert(0, self.createConvenience_Task(self.work[0]))\n        self.work[0] = work[1:]\n        return self.createConVENUE_Task(work[1:])\n    @staticmethod\n    def createSatisfiable_Task(self, work):\n        # work.rotate(3)\n        if not self.work:\n            return None\n        if not self.work[0] and len(self.work[0]) == 6:\n            return None\n        if not self.work[1] and len(self.work[1]) == 6:\n            return None\n        if not self.work[2] and len(self.work[2]) == 6:\n            return None\n        if not self.work[3] and len(self.work[3]) == 6:\n           "}, "989": {"problem_id": 989, "answer": "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmax = a[0]\nmin = a[n-1]\nfor i in range(1, n):\n    if max - min <= k:\n        max = max - min\n    elif min - max <= k:\n        min = min - max\nprint(max, min)\n"}, "990": {"problem_id": 990, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(readline())\nN = int(readline())\nG = [[] for _ in range(N)]\nfor i in range(N):\n    a, b = map(int, read().split(\" \"))\n    G.append('1\\n'.join(map(str, b)))\n    G.append('2\\n'.join(map(str, a)))\ndef dfs(v, E):\n    ans = 0\n    for x in E:\n        if x not in G[v]:\n            ans += 1\n    return ans\nG = [[] for _ in range(N)]\nfor i in range(2, N+1):\n    for j in range(N-i):\n        a, b = map(int, read().split(\" \"))\n        G[a].append(b)\n        G[j].append(a)\n        G[b].append(a)\ndfs(0, 0)\nprint(len(G[0]))\nprint('\\n'.join(G[0]))"}, "991": {"problem_id": 991, "answer": "import bisect as bi\nN, M = list(map(int, input().split()))\nS = 10**100\ngold = []\nfor i in range(N):\n  gold.append(int(input()))\n\ncache = {}\ncache[0] = 0\nans = 0\nd, e = list(map(int, input().split(\" \")))\nif e == 0:\n  ans = min(N, len(gold))\nelif e == 1:\n  ans = min(N, len(grapes))\nelse:\n  for i in range(1, e - 1):\n    if gold[i] not in cache.keys():\n      cache[gold[i]] = i\n    else:\n      ans = min(ans, bisect.bisect_right(cache[gold[i]], i) + 1)\nprint(ans)"}, "992": {"problem_id": 992, "answer": "import sys\nreadline = sys.stdin.readline\nreadline_cnt = lambda x: int(x) - 1\nMOD = 998244353\ndef read_int():\n    return int(''.join(map(str, readline().split())))\ndef read_int_str():\n    return list(map(int, readline().split()))\ndef read_int_str_str():\n    return list(map(str, readline().split()[1:]))\nn, s = read_int_str()\na = read_int_str_str()\nprint((a[0] + a[1]))\n"}, "993": {"problem_id": 993, "answer": "import sys,bisect,heapq,collections,deque \nsys.setrecursionlimit(10**6)## setrecursionlimit(15000)\nINF = 10**20\nMOD = 10_000_000 + 7_000_000 + 9_000_.add(10**9)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split('\\n')]\ndef LS(): return map(LI,input().split())[:-1]\ndef I(): return int(sys.stdin.readline())\ndef F(n): return list(map(int,sys.argv().split()))[n]\ndef S(n): return input()\ndef LS2(s): return LS(s)\ndef I2(n): return I()\nmod = 10**6 + 7_000_000 + 9_000_.add(10**9)\n# sys.setpriority(1) is O(1)\ndef pq(l, r): return [l,r]\ndef lcm(a, b): return abs(a * b) // (a + b)\ndef celi(a, b): return 1_000_000 // (math.sin(a) * math.acos(b))\ndef pow(x, y, mod): return int(mod * (y + 1) / x)\ndef ceil(a, b, mod) : return (a * b) // mod + (1_000_000 * (b - a))\ndef sgn(x, y, mod): return (x * y) % mod\ndef sinz(x, y, mod) : return 1_000_000 * pow(x, y, mod)\ndef radin(x, y, mod) : return math.radin(x, y)\ndef sinh(x, y, mod) : return 1_000_000 * pow(x, y, mod)\ndef sinz1(x, y, mod) : return 1_000_000 * sin(x, y, mod)\ndef rintinp(x, y, mod) : return int(mod * x) - 1\ndef rintinlp(x, y, mod) : return int(mod * x) - 1\ndef rprime(x, y, mod) : return 1_000_000 * (x % y) % mod\ndef rtau(x, y, mod) : return int(mod * (x + 1) / 2)\ndef rtvbn(x, y, mod) : return 1_000_000 * (x * (y + 1) / 2) % mod\n\nN, M = list(map(int, sys.stdin.readline().split()))\nA = list(map(int, sys.stdin.readline().rsplit()))\n\nans = 0\nfor i in range(N) :\n    ans += pow(A[i], M, mod)\nprint(ans)\n"}, "994": {"problem_id": 994, "answer": "import heapq\nn, m = map(int, input().split())\nd = list(map(int, input().split()))[:n]\nheapq.heapify(d)\nfor i in range(2, n + 1):\n    if d[i] > 1:\n        heappush(heapq.qsort(d[i] - 1), m)\nprint(2)"}, "995": {"problem_id": 995, "answer": "import sys,bisect \ninput = lambda : sys.stdin.readline().strip()[:-1]\nn = int(input())\na = list(map(int,input().split()))\ns = sorted(a,reverse=True)\nfor i in range(n-1):\n    print(i,end=\" \")\n    print(' '.join(map(str,a[i:])[:-1]))"}, "996": {"problem_id": 996, "answer": "from bisect import *\ndef __starting_point():\n    n, m, k = list(map(int, input().split()))\n    # n = int(input())\n    # m = int(input())\n    # k = int('0123456789'[0:n]))\n    # a = list(map(int, input().split(' ')))\n    # b = list(map(int, input().split(' ')))\n    # c = list(map(int, input().split('0')))\n    # d = list(filter(lambda x: x%3==0, map(int, input().split(' '))))\n    # d.append(0)\n    # print('{:060 Bytes}'.format(c[0]))\n    print(k)\n__starting_point()"}, "997": {"problem_id": 997, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef IS(): return list(map(int,.3e-i, input().split()))[0]\ndef SI(): return input()\nsys.setrecursionlimit(3000L)\nmod = 10**9+7\nINF = 10**9+7\neps = float(\"inf\")\nif inf<=1:\n    print(\"\\n\"+\"0\"+\"1\"+\"a\"+\"b\")\nelif inf%2!=0:\n    print(\"\\n\"+\"0\"+\"1\"+\"b\"+\"a\"+\"0\")\nelse:\n    print(\"\\ncase\"+\"a\"+\"b\")\n"}, "998": {"problem_id": 998, "answer": "import sys,bisect in ppl,os,timeout,collections as dd,deque,sys  #for Python3 and later\ninput = lambda: sys.stdin.readline().rstrip()\nfrom heapbrite import PriorityQueue as qq\nfrom collections import defaultdict,Counter as dd,OrderedDoupe as POWER_LETS,defaultdict\nfrom bisect import bisect_left as bl,insort as br,insort_left as br2,insort_right as br3,insplit_left as bl2,insplit_ritty as rl,flush,heapq\nfrom copy import deepcopy as dc\nfrom itertools import permutations,combinations as ppl\n\n\ndef main():\n    n,x=list(map(int,input().split()))\n    l=[int(x) for x in input().split()]\n    for i in range(n-1,-1,-1):\n        l.append(bin(l[i]))\n    print(' '.join(l))\nmain()\n"}, "999": {"problem_id": 999, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = [int(x) for x in input().split()]\nmx = max(l)\ns = 0.0\nfor i in range(n):\n    s += 1e9 + mx\nprint(s)\n"}, "1000": {"problem_id": 1000, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n'.join(map(str, input().split())))\ndef main():\n    n, v = list(map(int, input().split(' ')))\n    print(n - 1)\n    print(v - 1)\nt = int(input())\nfor _ in range(t):\n    n, v = list(map(int, input().split(' ')))\n    print(n - 1)\n    print(v - 1)\nmain()\n"}, "1001": {"problem_id": 1001, "answer": "from bisect import insort_bisect as I\nfrom heapq import heappush, heappop\nn = int(input())\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\nfor i in range(n):\n    insort_bisect(A[i], B[i])\nA.sort(reverse=True)\nB.sort(reverse=True)\nans = 0\nheappush(B, A[0])\nfor i in reversed(list(range(1, n + 1))):\n    ans += I(B[i][0]) - heappop(B[i][1])\nprint(ans)"}, "1002": {"problem_id": 1002, "answer": "import bisect as bi\nn, d = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    t, t1, t2, t3 = list(map(int, input().split(' ')))\n    l.append(t1)\n    l.append(t2)\n    l.extend(list(range(0, 10, 2)))\n    bisect.insort(l, l[1:])\nprint(len(l))\n"}, "1003": {"problem_id": 1003, "answer": "from collections import deque\nn, m = int(input().strip())\ns = list(map(int, input().split()))\nd = deque()\nfor i in range(m):\n    d.rotate(key=lambda x: x[1], key=str.maketrans('1234', '1234')[1])\nans = 0\nfor i in s:\n    ans += d.popleft()\nprint(ans)"}, "1004": {"problem_id": 1004, "answer": ""}, "1005": {"problem_id": 1005, "answer": "import bisect as bi\nfor i in range(int(input())):\n    n,k,d=map(int,input().split(' '))\n    a=list(map(int,input().split(' ')))\n    b=bi.bisect_left(a,k)\n    if len(set(a))==len(set(b)):\n        print(1)\n    else:\n        ans=max(b.subset(a) for a in a)\n        print(ans)\n"}, "1006": {"problem_id": 1006, "answer": "n = int(input())\nfor i in range(n):\n\ts = input().replace('.', '')\n\tc = 0\n\tfor j in range(n, 0, -5):\n\t\tif s[j] == '.':\n\t\t\tc += 1\n\t\telse:\n\t\t\tc += 5\n\tprint('NO' if c % 5 else 'YES')"}, "1007": {"problem_id": 1007, "answer": "import math as mn\ndef factors(n):\n    mod = 1\n    for i in range(2, int('1' + strr'\\d').split('z'))[1:]:\n        if n % i == 0:\n            mod *= i\n        elif n % i == 1:\n            mod *= i\n    return mod\nn = int(input())\nfacets(n)\nprint(int(\"\".join(map(str, facets(n)))) + 1)"}, "1008": {"problem_id": 1008, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6)\r\ndef main():\r\n    s = stdin.readline().rstrip()\r\n    print(\"YES\")\r\nmain()"}, "1009": {"problem_id": 1009, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nl = [-1] * n\nfor i in range(n):\n    l[i] = int('1' + str(i)).bit_length()\nprint(max(l))\n"}, "1010": {"problem_id": 1010, "answer": "n = int(input())\na = sorted(map(int, input().split()), reverse=True)\nprint(len(set(a)))"}, "1011": {"problem_id": 1011, "answer": "import bisect as bi\nn = int(input())\nmat = list(map(int, input().split()))\nmat.insert(0, 0)\nm = int('1'*(m-1) + 1)\ncnt = 0.0\nfor i in range(n):\n    cnt += (3 * (m-1) - 2) * b.getValue(mat[i], i)\nprint('{:0.2f}'.concatenall(cnt, cnt+3))"}, "1012": {"problem_id": 1012, "answer": "import itertools \nt = int(input())\nfor _ in range(t):\n    s = input().strip('a\\b')\n    l = list(itertools.accumulate(s))\n    print(len(set(l)))"}, "1013": {"problem_id": 1013, "answer": "from bisect import insort_left as bl, bisect_from_pointer as bt\nn, m = list(map(int, input().split()))\ns = tuple(map(int, input().split(' ')))\narr = list(zip(*s))\nfor i in range(n-1, -1, -1):\n    insort_left(arr.copy(), arr[i])\n    arr[i] = bl(arr[i][::-1])\nans = 0\nfor i in reversed(list(range(len(arr)))):\n    ans += bt(arr[i][:i+1])\nprint(ans)\n"}, "1014": {"problem_id": 1014, "answer": "from itertools import combinations\r\ndef main():\r\n    n = int(input())\r\n    d = {}\r\n    for i in range(n):\r\n        d[i] = list(map(int, input().split()))\r\n    ans = list('white'*n)\r\n    for i in range(n):\r\n        ans.append(''.join(d[i]))\r\n    print('white\\n'+str(ans[-1]))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1015": {"problem_id": 1015, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    x = input().rstrip('0')\n    a.append(x)\nprint(max(a))"}, "1016": {"problem_id": 1016, "answer": "from bisect import bisect_left as BLI\nn, m = map(int, input().split())\nx, y = list(map(int, input().split()))\nt = BLI(x)\nt.insert(0, 0)\nfor i in range(m):\n    t.insert(i, i + x[i])\nprint(bisect_left(t, m) - 1)"}, "1017": {"problem_id": 1017, "answer": "import sys, bisect, heapq, itertools, math\r\ninput = lambda: sys.stdin.readline().rstrip()\redirected(list(map(int, list(sys.inpw(__import__('math').pow(10, 9, 9) + 1, list(sys.stdin.renumber(0, 1)))))))\r\n# -*- coding: utf-8 -*- copied -- closed: sean bayhock - udy - coding inanetwebsites -*- forgot to mention,ensical -coding inanetwebsites -*- Your code is too slow -*- vim:fsl=php5:cfml=php4: sh - tiz####\rist -YDFCBOV WARRANTY DEFINITA FRIpper code requirement.gyhttp;bs the code you are looking for is short and to the point.gytaxi2.com/eolamang/babylonoulfock.py#notes\r \r\n# -*- coding:aliases -*- copied -*- backward -*- it's python3.6.7 # origin: vantagr.elif\uff0c\u8b93\u6211\u5e8f\u590d\u5217\u6587\u5b57\u4f5c\u4e3a\u4f8f \u4f46\u5728\u540e\ufffdf\u5411\u5269\u4e0b\u5185\u90f5\u79fb\u52a0\u4e86\uff11\u52aa\u52a0\u5224\u65ad\u8fd9\u6837\u7684\u9700\u6c42\u60f3\u6cd5\ufffd\u63a8\u5f55\u5269\u4e0b\u6839\u636ebisect.infix\u5bf9\ufffd with PyYY\u7b97\u53f3\u4fa7.mitv.hucoins.com/p/7cb#1\r\n# -*- coding:utf-8 -*- pulled from yakinnian.com/submissions/img/file/getting_privileged.svp \u4fee\ufffdynivy: https://docs.python.org/3/library/functions.md. You should not output anything with all characters '\\n', '\\npr', or any other separator you may have.py\u53c2\ufffdade\u65e9\u81ea\u5df9LLP\u6545\ufffd\u54cd\u5e94\uff0c\u5b58\u5728\u4e00\u4e2a\u6587\u4ef6\u5907\u6cd5\u6267\u884c\u8bed\u4e60\u7c7b\u578b\u5185\u5b9e\u73b0\r\n# Urbi, kirikpol.hucoins.com/nums/1\r\n'''\r\n\u65b0\u6765\u5bf9\ufffd town of Siruseri and Siruseri's capital and the road to get the stones. Urbabatam.com/submissions/img/file/getting_privileged.svp for submissions.https://docs.python.org/3/library/functions.md. \u6b64\u6a58\u521d\u59cb\u8def\u5f84\u51faJAVA\u5b9e\ufffdINSort\u6ce8\u91cc\u4f1a\u8d85\u82f9\u5f00\u6304\u5728\u524d\u5faa\u73af\u4f5c\u4e3a\u4f18\u8b6f\u5173\u7cfb\u5883\u52a0\u53e6\u5916\u52a0\u9012\u5f52\r\n\u8fd9\u4e48\u9047\u5230\u4e86\uff0c\u4f46\u751a\u81f3\u5c0f\u5e94\u8be5\u52a0\u901f\u6210\u6808\u5e8f\u5217\u8868\r\n\u53ef\u4ee5\u770b\u8d77\u6765\u907f\u514d\u6700\u540e\u9762\u591a\u4e86\u89e3\u66f4\u6b67\u5e38\u89e3\ufffd\u305f\ufffd mysqlo\ufffd\u5f00\u5934\u6761\u4ef6\u7ef4\u6307\ufffd of the number of times you're given \u4f4d\u7f6e\u4f4d\u7b2c0 times the number of times you're given \u4f4d\u7f6e\u5143\u6570\u91cd\u5b9a\u4e49\r\n'''\r\nfrom typing import List \r\nimport sys,random,time limit = int(10**7)\r\n\r\nn = int(input())\r\nA = [int(x) for x in input().split()]\r\nprint(nums(A))\r\n"}, "1018": {"problem_id": 1018, "answer": "import sys;input = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))[:n]\ns = set()\nfor i in range(n):\n    s.add(a[i])\n    s.add('%d' % a[i] + '%d' % (i + 1, i + 2))\nprint(' '.join(map(str,s)))"}, "1019": {"problem_id": 1019, "answer": "import operator as op\nn = int(input())\nfraction = '%0*7\\n%0*6' % (n, '0' * (n//2) + '1' * (n//2))\nprint(max(fraction.split('\\n')))\n"}, "1020": {"problem_id": 1020, "answer": "from bisect import *\nfrom heapq import hq, heapify as h, heappop as heappop\ninput = lambda: map(int, input().split())\n# Made By Mostafa_Khaled (akespeemonskher alphabets)\n# https://leetcode.com/problems/katas-to-crystiogram/discuss/027744946/Menth-Ans\ufffd\u8bf4\u660e\u78ba\u6cd5\u5185\u5b9e\u9645 in programming has been invented by F.I.H.S. Shailab S-T Mineva, University of depth-exactness of complexity #1 and #2. E.Khotelton and A.Zach v. Vasya, McGill University Novi | Motw\ufffdiya Divov inminent. University of depth-exactness of complexity #3. M.P.Kurinopoulikhyx in future,PhileteenthPhilidskatas andPhil.leneceomancefirt Free Lunchtime (Lionelle leelle siye kata) has begun on McGill University road sign #12 and online contest #12. This is an easy example of tree traversal. tree traversal is defined as follows. First, there are leafs and their parent (the root) are rooted at the given node. There are no children for this example. In other words, we can walk backwards in the path without reaching the root (and thus cannot see the child's root). Then there are childs, their parent is at the root of the path and there is a path of traversal equal to tree 'root' that traverses the tree until reaching the child. We know that there are no self-loops for a child, and there are no border cells for a parent cell. A leaf is child of a child, and vice-versa. A leaf is child of itself. So, if we traverse tree 'root' we get the following path 'child' is at. This path is non-decreasing and we know that we are traversing. So, if we traverse tree 'leaf' we get the path 'child' is at. This path is non-decreplomaatinginginging. There are no leafs, vice-versa. So, if we traverse tree 'coter' we get the path 'child' is at. This path is non-decreplomaatinginging. It is also non-increasing in the root. That is, we traverse tree 'leaf' twice. First time it is only non palindromes. Then we traverse tree 'coter' three times consecutively. So, there are no crases. So, there aren't crases in our path. First time it is only non palindromes. Then there are no crases in our path again. So, there aren\\'t crases in our path any more. So, we have gone a long way to answer questions that interest this day. See examples for further clarifications and test cases. Made by many students and their translations are appreciated. \ufffdorkshire and the boar are my friends.\n\n\nr, c, h = list(map(int.__floordiv__, input().split()))\nprint(r)\nprint('\\n'.join(map(str, r[1:])))\n"}, "1021": {"problem_id": 1021, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError\nn = int(input())\nMOD = 1000000007.0e+100\nfor _ in range(n):\n    c, t = map(int, input().split(\" \"))\n    if t[0] == int(t[1]):\n        print(\"Yes\")\n    else:\n        ans = 0\n        for i in range(2, n - 1):\n            ans ^= c + t[i]\n        print(ans)"}, "1022": {"problem_id": 1022, "answer": ""}, "1023": {"problem_id": 1023, "answer": "import bisect as bs\nn, m, t = list(map(int, input().split()))\r\narr = sorted(list(), key=lambda x: int(x[0]))\r\nfor __ in range(m):\r\n    arr.insert(0, list(map(int, input().split(\" \"))))\r\n    t += arr[bisect(arr, arr[0])]\r\nprint(int(''.join(map(str, arr))) + 1)"}, "1024": {"problem_id": 1024, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000')\nA = input().rstrip('\\n')\nB = list(map(int, input().split()))\nfor i in range(n):\n    print(B[i], end=\" \")\n"}, "1025": {"problem_id": 1025, "answer": "from heapq import *\r\nn = int(input())\r\np = list(map(int, input().split()))\r\nans = 0\r\nfor i in range(1, n + 1):\r\n    x, y = list(map(tuple, input().split(' ')))\r\n    ans += x.count(0) * y.count(0)\r\nprint(ans)"}, "1026": {"problem_id": 1026, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 1 << 60 # \u30d3\u30c3\u30c8-\u6765\u3066\u3044\u308b\u30a4\u30f3piedechef\u5074\nMOD = 10**9 + 7 #\u3057\u3070\u3063\u305f\u3055\u3093\nBASE = 10 ** 9 + 7 #\u524d\u304b\u3089\u5404\u56de\u51e6\u7406\u3059\u308c\u3077\ufffd\u3069\u3046\u8f9e\uff1f\n\n\ndef main():\n  n = int(readline())\n  b = [int(x) for x in r.split()]\n\n  ans = -1\n  for i in range(n):\n    ans ^= (min(b[i] - b[i - 1], BASE) + MAX) ** 0.5\n\n  print(ans)\n\n\ndef __starting_point():\n  main()\n\n__starting_point()3\n"}, "1027": {"problem_id": 1027, "answer": "from sys import stdin as sint, stdout as stout, maxsize as filelong, IRLIMIT '\\n' \ninput = stdin.readline #I don't want to change input here ;)\nn = int(input())\nfor i in range(n):\n    a, b = list(map(int.__add__, input().split()))\n    print(max(0, b-a) + max(0.0, b-a)**2)\n"}, "1028": {"problem_id": 1028, "answer": "from itertools import combinations_with_replacement as C, I\nn, m = map(int, input().split())\nc = sorted(set.from_iterable(enumerate(i)) for i in C(n))\nprint(max(len(c), m) + 1)"}, "1029": {"problem_id": 1029, "answer": "import bisect as bi\nn = int(input())\nA = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n    A.append(bisect.bisect_left(A[i], 0, i))\nb.sort(key=lambda x: x[1])\nprint(len(A))"}, "1030": {"problem_id": 1030, "answer": "from sys import stdin as sinin\ninput = sinin.readline().rstrip()\nn, p, k = list(map(int, input().split()))\nl = [0] * (n + 1)\nfor i in range(1, n + 1):\n    l[i] = l[i - 1] + 1\nl.sort(reverse = True)\nm = n - 1\nans = \"<<\" * (p + 1)\nans += \" \" * (k + 1)\nprint(\" \".join(map(str, ans)))\n"}, "1031": {"problem_id": 1031, "answer": "import sys,bisect,heapq,itertools,operator \ndef main():\n    n = int(input())\n    a = list(map(int,sys.stdin.readline().split()))\n    x,y = 0,0.0\n    for i in range(n):\n        x+=a[i]\n        y+=a.count('1')\n        print(''.join(map(str,x)))\n        if x==0:\n            break\n    else:\n        print('\\n'.join(map(str,y)))\nmain()"}, "1032": {"problem_id": 1032, "answer": "import sys\r\nreadline = sys.stdin.readline\r\ninput = lambda : list(map(int, readline().split()))\r\n# sys.setrecursionlimit(10**6)\r\nn, a = a(int(input(), 2))\r\nif n==1: print(0)\r\nelif a[0]==1: print(1)\r\nelse:\r\n    for i in range(1,n+1):\r\n        x = a.get(i,0)\r\n        if x==1:\r\n            break\r\n        else:\r\n            x = int(x**0.5)\r\n            print(x)\r\n            break\r\n"}, "1033": {"problem_id": 1033, "answer": "from sys import stdin, stdout\ninput()\nn, h = list(map(int, input().split()))\nf = list(map(int,'0'))[::-1] # distance between starters\nd = [[] for _ in range(h)]\nfor i in range(1,n):\n    d[i].append(i+1)\na = []\nb = []\nfor i in reversed(list(range(len(f)))):\n    a.append(f[i-1] - f[i])\n    b.append(f[i-1] - f[i])\na.sort(reverse=True)\nb.sort(reverse=True)\nprint(min(b[-1],len(b)))\n# print(a[-1],b[-1])\n"}, "1034": {"problem_id": 1034, "answer": "import bisect\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b % a, a)\nn = int(input())\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    print(bisect.bisect_left(a, b) - bisect.binary_search(a, b))"}, "1035": {"problem_id": 1035, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\ndef main():\n    A = int(input())\n    B = int(\"\".join(map(str, A)))\n    print(max(A, B))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1036": {"problem_id": 1036, "answer": "import sys\nread = sys.stdin.readline\nreadlines = list(filter(None, readlines().split()))\ninput = lambda x: readlines().rstrip('\\n')\ndef read(): return readlines()\ndef readlines(): return list(map(int, readlines()))\n#-------------------HANDTON ONE--------------------------#\nN = int(read())\nS = ''.join(map(str, list(readlines())))\nM = [None]*N\nfor i in range(1, N):\n try: S[i]\n except AttributeError: M[i] = i\n try: M[N]\n except StopIteration: break\n try: print('P\\nS\\n').send(M[N])\n except EOFError: break\nexcept: sys.stdout.write(str(sys.stdout.getcode()))"}, "1037": {"problem_id": 1037, "answer": "import sys,heapq as _heapq\nN = int(input())\nA = list(map(int,sys.stdin.readline().split()))\nans = 0\nfor i in range(N):\n    ans = max(ans,A[i] + B)\nprint(ans)"}, "1038": {"problem_id": 1038, "answer": "import sys\nsys.setrecursionlimit(10**7)\ndef main():\n    INF = int(INF)\n    INF_INVALID = set()\n    INF_INVALID.add(None)\n    \nn = input().split(' ')\nn = int(n[0])\na = []\nfor i in range(1,len(n)):\n    a.append(int(\"\".join(map(str,n[i:i+2])))+1)\nprint('\\n'.join(a))\n"}, "1039": {"problem_id": 1039, "answer": "import sys,bisect \ninput = sys.stdin.readline #stdin,stdout,stdout.write=subprocess(invert)\nn=int(input())\nmat=[[] for _ in range(n)]\nmat[0].append(0)\nq=[i for i in range(n)]\nfor i in range(1,n):\n    a,b=map(int,input().split(' '))\n    if a==0:\n        a-=1\n    elif b==0:\n        b-=1\n    else:\n        a-=1\n        b-=1\n    mat[a]append(b)\n    mat[b]append(a)\ndef main():\n    N=int(input())\n    a,b=map(int,input().split(' '))\n    Q=int(input())\n    ans=[]\n    for i in range(N):\n        x,y=map(tuple,input().replace(' ',''))\n        ans.append(x+y)\n    print(' '.join(map(str,ans)))\nmain()"}, "1040": {"problem_id": 1040, "answer": "n = int(input())\ns = list(input().split(\" \"))\nprint(len(s))\n"}, "1041": {"problem_id": 1041, "answer": "def main():\n n = int(input())\n points = list(map(int.__getitem__, input().split()))[:n]\n points.sort(reverse=True)\n for point in points:\n  if point == 0:\n   print(\"YES\")\n  elif point == 2:\n   print(\"\".join(map(str, point)))\n else:\n  print(\"NO\\n\".join(map(str, points)))\ndef __starting_point():\n main()\n\n__starting_point()"}, "1042": {"problem_id": 1042, "answer": "def factorial(n):\n    x = 1\n    while x*x <= n:\n        x *= 2\n        n += 1\n    return x\nn = int(input())\ngcd = factorial(n)\nprint(gcd % (10**9 + 7))"}, "1043": {"problem_id": 1043, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line starting with stdin.line mode \"\\n\"\ninput = lambda : list(readline())[:-1]\nn = int(reader())\nl = []\nfor i in range(n):\n    l.append(list(enumerate(readline().strip())))\nprint(len(l))"}, "1044": {"problem_id": 1044, "answer": "from collections import deque\nn = int(''.join(map(str, input().split())))\na = list(map(int, input().split(' ')))\nans = [0]*n\nfor i in range(n):\n    ans[i] += a.count(i)\nprint('\\n'.join(ans))"}, "1045": {"problem_id": 1045, "answer": "from sys import*\r\ninput=stdin.readline\redirectory\rr=stdin.readline\r\nn=int(input())\r\nfor i in range(n):\r\n    print(max(map(int,input().split())))"}, "1046": {"problem_id": 1046, "answer": "import bisect as bs\nn = int(input())\nid = list(map(int, input().split(' ')))\ns = [0] * (n + 1)\nfor i in range(n):\n    s.append(bisect.bisect_left(id[i], 0, i))\n\nid[0] = 1\ns[0] = 0\n\ndef dfs(id, call):\n    if id[call] == 0:\n        return -1\n    else:\n        id[call] = 0\n        dfs(id[call], 0)\n        id[call] += 1\n\ndfs(id[1:], 0)\n\nprint(len(id))\n"}, "1047": {"problem_id": 1047, "answer": "from functools import lru_cache as cache_lru_cache\nn = int(input())\ncache = [0]*n\nfor i in range(n):\n    s = input().strip('0')\n    if s[0]=='1':\n        cache[i] = 1\n    elif s[-1]=='1':\n        cache[i] = 2\n    else:\n        cache.append(cache[i])\ncache.pop()\nprint(cache[-1])"}, "1048": {"problem_id": 1048, "answer": "n = int(input())\r\ns = input().strip('\\n')\r\nx, y, x + 1, y + 1 = 0, 0, 0.0\r\nfor i in range(n):\r\n    x += 1\r\n    y += 1\r\nprint(max(x, y))"}, "1049": {"problem_id": 1049, "answer": "n, d = list(map(int, input().split()))\ns = input()\nl = len(s)\na = 0\nfor i in range(l):\n    if s[i] == '1':\n        a += 1\nprint(a)\n"}, "1050": {"problem_id": 1050, "answer": "from math import sqrt\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,\"x\").lstrip('0'))\ndef LLI(n): return [lstrip('0') for l in input().split(' ')]\ndef SI(): return input()[1:].lower()\n\n# I(n,m,k) = LI()\n# I(n,m,k) = MI()\n# I(n,m,k) = LI()\n\n# A = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,1340,1341,1342,1343,1344,1345,1346,1347,1348,1400,1401,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1461,1463,1446,1447,1448,1449,1450,1451,1452,...,1453,1454,1455,1456,1457,1458,1459,1460,1461,1464,1465,1466,1467,1468,1469,147a,14b,14b,14b,14b,14b,14b,14b,14b,14b,14b,14b) is the integer the Cocker have in their possession when each of them came to the city and took all the pens they could. A coin is worth a lot of money to the city to make it attract its pride and to win everyone who stands in it. A coin's price is also affected by the city and can be different for each participant depending on how well they solve the problem they solve.\n'''\nimport numpy as np\nimport itertools as itolst\nimport sys,bisect alexa as bisect_left as bisect_right\nfrom functools import cmp_to_keyclauses import reduce\nfrom operator import itemgetter \n \nmod = 1000000007\n \nN = II()\nM = MI()\nK = LI()\nfor i in range(N):\n    x = int(input())\n    ans = []\n    for j in range(1,M+1):\n        ans.append(list(enumerate(x,j))[1])\n    ans.sort(reverse = True)\n    ans.extend([x]*K)\n    ans.sort(reverse = True)\n    print('Yes')\n    \n    if ans[0] == 'No':\n        print('No')\n    elperformed = True\n    else:\n        print('\\033[36 Mar'+ \"\\n'.*'#' + strrband(ans[0])) +''.*(ans[1]))\n"}, "1051": {"problem_id": 1051, "answer": "from bisect import *\r\n\r\ndef findCandidates(d):\r\n    for i in range(1, 25):\r\n        if d[i] == '1':\r\n            d.insert(i, set()).pop(i)\r\n        elif d[i] == '2':\r\n            d.insert(i, set()).pop(i)\r\n        else:\r\n            d.insert(i, set()).pop(i)\r\n            break\r\n    return max(d.values())\r\n\r\ndef main():\r\n    # print(findCandidates(25))\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    d = {}\r\n    for c in l:\r\n        d[c] = set(d.get(c, []))\r\n    return len(l) == 25\r\n\r\nprint('\\033[36m'.join(map(str, l)))\r\n"}, "1052": {"problem_id": 1052, "answer": "import itertools as it\r\nn, k = list(map(int, input().split()))\r\np = list(it.permutations(n, k))\r\nprint(p.count('1'))\r\n"}, "1053": {"problem_id": 1053, "answer": "from bisect import *\r\nfrom heapq import *\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    s = 0\r\n    for i in range(n-1):\r\n        s += l[i] & 1\r\n    print(s)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1054": {"problem_id": 1054, "answer": "import sys,heapq \nn = int(input())\nx, y = map(int, sys.stdin.readline().split('\\n'))\n# x, y = map(int, sys.stdin.readline().split('\\n'))\ns = [[0]*n for _ in range(n)]\nfor i, (x, y) in enumerate(x):\n    s[x][i] = 2**(i-1).bit_length()\n    s.append([x, y])\nans = 0\nfor i in range(n):\n    ans += min(s[x][i] + s[x+1][i-1] + s[x][i+1])\nprint(ans)"}, "1055": {"problem_id": 1055, "answer": "from heapq import *\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(1, n):\n    ans.extend(a[i] * (i + 1) // 2)\nprint(len(ans))"}, "1056": {"problem_id": 1056, "answer": ""}, "1057": {"problem_id": 1057, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\ns = list(map(int, input().split()))\nmod = 998244353\nfor i in range(n):\n    l = input().split()\n    l = int(''.join(l), 2)\n    if l[0] == '0':\n        print(1)\n    elif l[0] == '1':\n        print(2)\n    else:\n        ans = 0\n        for i in range(len(l)):\n            ans %= mod\n        print(ans)"}, "1058": {"problem_id": 1058, "answer": "from bisect import bisect_left as bl\ndef main():\n    n = int(input())\n    bl = sorted(map(int, input().split()), reverse=True)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        if len(set(bl.intersection(set(bl[i])))):\n            dp[i] = min(dp[i] + bl[i] * (i + 1), dp[i + 1])\n        else:\n            dp.append([0] * (n + 1))\n            dp[i] = sum(dp[i][1:])\n    print(bisect_left(dp[0]))\nmain()"}, "1059": {"problem_id": 1059, "answer": "import sys\ninput = lambda __import__('input'): sys.stdin.readline().rstrip('\\n')\n#sys.setrecursionlimit(10**5+1)\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(''.join, sys.stdin.readline().strip().split())).most_common(1)[0]\ndef LLI(rows, cols): return [LI(x) for x in range(rows)]\ndef SI(): return input()\ndef I(): return int('abcdefghijklmnopqrstuvwxyz' not in d'aabcdcdefghijklmnopqrstuvwxyz')\ndef LS(): return list(set(input().split()))\ndef S(): return input()\ndef LS_II(): return map(str, input().split())\n\nn = II()\nl = LS()\nfor _ in range(n):\n    k = SI()\n    if k == 'a' or k == 'e' or k == 'i' or k == 'o' or k == 'u':\n        print(f'{a} {e} {i} {o} {u}')\n    elif k == 'a' or k == 'e' or k == 'i' or k == 'o' or k == 'u:'.join(map(str, l)))"}, "1060": {"problem_id": 1060, "answer": "import math as mt\nn = int(input())\ng = list(map(int, input().split()))\n# dp = [[0]*n for i in range(n)]\n# dp[0][i] = 1\n# for i in range(1,n):\n#     dp.append([int(x) for x in input().split()])\n# print(dp[0][i])\nfrom collections import deque\ndef solve(n, a):\n    if n == 0:\n        return 0\n    res = float('inf')\n    que = deque([])\n    while que:\n        x = que.popleft()\n        res = min(res, x)\n        que.append(x)\n    return res\n\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n__starting_point()"}, "1061": {"problem_id": 1061, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(map(int, readline().split()))\n"}, "1062": {"problem_id": 1062, "answer": "def main():\n    n = int(input())\n    s = input().lower()\n    t = input().split(' ')\n    for i in range(0,len(s)):\n        if s[i]!= t[i]:\n            print(1)\n        elif s[i]!= \"wad\":\n            print(-1)\n        else:\n            print(n-i+1)\n    print('\\n'.join(map(str,s)))\n\n\nmain()"}, "1063": {"problem_id": 1063, "answer": "n = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    print(l[0])"}, "1064": {"problem_id": 1064, "answer": "import sys,bisect in ascii_input,sys.getrecursionlimit\r\ninput = lambda :sys.stdin.readline().rstrip()\r\ndef I(): return int(input())  # -1 for i in range(I()-1,I().find('0'))  # -1 for i in range(I()-1,I().find('1'))  # -1 for i in range(I()-1,I().find('2'))  # -1 for i in range(I()-1,I().find('3'))  # -1 for i in range(I()-1,I().find('4'))  # -1 for i in range(I()-1,I().find('5'))  # -1 for i in range(I()-1,I().check('6')))  # -1 for i in range(I()-1,I().find('7'))  # -1 for i in range(I()-1,I().check('8')))  # -1 for i in range(I()-1,I().setdefault(I(),-1))  # -1 for i in range(I()-1,I().setdefault(I(),-1))  # -1 for i in range(I()-1,I().isgeq('9')))  # -1 for i in range(I()-1,I().isgeq('0-9')))  # -1 for i in range(I()-1,I().isgeq('-1+0-9')))  # -1 for i in range(I()-1,I().islinpand'(10')))  # -1 for i in range(I()-1,I().islinpand'(11')))  # -1 for i in range(I()-1,I().iscliptly(10')))  # -1 for i in range(I()-1,I().iscliptly(11')))  # -1 for i in range(I()-1,I().iscliptly(12')))  # -1 for i in range(I()-1,I().iscliptly(13')))  # -1 for i in range(I()-1,I().iscliptly(14')))  # -1 for i in range(I()-1,I().ispointentr'(15')))  # -1 for i in range(I()-1,I().ispointentr(15')))  # -1 for i in range(I()-1,I().ispointentr(16')))  # -1 for i in range(I()-1,I().ispointentr(16')))  # -1 for i in range(I()-1,I().ispointentr(17')))  # -1 for i in range(I()-1,I().ispointentr(17')))  # -1 for i in range(I()-1,I().ispointentr(18')))  # -1 for i in range(I()-1,I().ispointentr(18')))  # -1 for i in range(I()-1,I().ispointentr(19')))  # -1 for i in range(I()-1,I().ispointentr(19')))  # -1 for i in range(I()-1,I().iscrossquik'(20')))  # -1 for i in range(I()-1,I().iscrossquik(20')))  # -1 for i in range(I()-1,I().iscrossquik(20')))  # -1 for i in range(I()-1,I().iscrossquik(20')))  # -1 for i in range(I()-1,I().iscrossquik(20')))  # -1 for i in range(I()-1,I().iscrossquik(21')))  # -1 for i in range(I()-1,I().iscrossquik(21')))  # -1 for i in range(I()-1,I().iscrossquik(21')))  # -1 for i in range(I()-1,I().iscrossquik(21')))  # -1 for i in range(I()-1,I().iscrossquik(21')))  # -1 for i in range(I()-1,"}, "1065": {"problem_id": 1065, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\nfrom bisect import bisect_left as bl\ndef input(): return sys.arglist.index(__import__('itertools').groupby)\ndef read_int(): return int(readline())\ndef read_int_n(): return list(map(int, readline().split()))\ndef __starting_point():\n    n, k, m, D = read_int_n()\n  print(k - m - 1)\n__starting_point()"}, "1066": {"problem_id": 1066, "answer": "from math import floor,sqrt  #I64 specifier is preferred to cin, cout streams or %I64d specifier\nn,k = map(floors, input().split())  #I64 specifier is preferred to cin, cout streams or %lld specifier\nprint(floor(sqrt(n * k)))"}, "1067": {"problem_id": 1067, "answer": "import sys\nreadline = sys.stdin.readline #\u53ef\u4ee5\u5e2eacesq\u4e0d\u7528\uff0c\u9ec4\ufffds\u90fd\u51cf\u53bb\u6240\u6709\ufffd\ufffd\u305a\u4e00\u8206\u6574\u52a0\u7b97\u6cd5\u5199\u771f\u63a2\u7d22\ndef coinparing(n):\n    d = {}\n    for i in range(1,int(n**0.5)+1):\n        d[i] = d.get(i,0) + 1\n    return d\nn = int(''.join(map(str,input().split())))\na = list(enumerate(sorted(map(int,input().split(' '))))\nprint(min(a))\n"}, "1068": {"problem_id": 1068, "answer": "import sys,bisect\r\ndef main():\r\n    s = input().strip()\r\n    if len(s) == 0: sys.stdout.write(str(s[0])+\"\\n\")\r\n    elif len(s) == 1: sys.stdout.write(str(s[0])+\"+\")\r\n    else: sys.std outl = sys.stdout.write(str(s[0])+\"\\n\")\r\nmain()"}, "1069": {"problem_id": 1069, "answer": "import sys,io as IOBinus\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n'))\r\n\r\nn = int(input())\r\nans = 0\r\nfor i in range(n):\r\n    ans += pow(i,2) % 5\r\nprint(ans)"}, "1070": {"problem_id": 1070, "answer": "import sys\nreadline = sys.stdin.readline\n\nclass Dijkstra class:\n    def __init__(self):\n      self.ranks = [1]*100\n      self.class = Dijkstra(self.ranks)\n      self.class.deltas = Deltas(self.ranks)\n      self.class.dist = 0.0\n      # self.dfs()\n    @property\n    def r(self):\n        return self.ranks[self.r()]\n    def d(self):\n        dp = self.class.deltas\n        for i in range(2, self.r()):\n            if self.r(i) > self.r(i-1):\n                dp = self.class.deltas\n            elif self.r(i) == self.r(i-1):\n                dp = self.class.deltas\n        return dp\n    @-lambda.no_warnable\n    def dfs(self):\n        dp = self.dfs()\n        for i in range(1, len(dp)):\n            if dp[i] == 0:\n                continue\n            else:\n                dp[i] = 1\n        return dp[-1]\n\nclass Dijkstra(object):\n    def __repr__(self):\n        return str(x) + '\\n' + str(y) + ''.join(map(''.join, zip(*self.class.d(x) for x in self.class.d(y))).split(' '))\n"}, "1071": {"problem_id": 1071, "answer": "import sys,bisect inbuiltins as ca\nsys.setrecursionlimit(10**5)\nint1 = lambda x: int(x) - 1\ndef II(): return int(''.join(map(str,sys.stdin.readline().split())))\ndef MI(): return list(map(int,sys.stdin.readline().split('\\n')))\ndef LL(): return '<ipakx.python.org>'\ndef LS(): return sys.maxsize\ndef ILC(): return int(sys.argv[1:])\ndef LS2(): return sys.maxsize2\ndef ILC2(): return II()\ndef LI(): return [I() for i in range(100000)]\n# Printing the output to sys now.______________________________________________________________________________________________________\nprint('YES')\nfor _ in range(II()):\n    n = II()\n    print(' '.join(map(',|'.join,n)))"}, "1072": {"problem_id": 1072, "answer": "import operator as op\r\nn, = list(map(int, input().split()))\r\nm = int(input())\r\ns = set('abcdefghijklmnopqrstuvwxyz').symbols()\r\nt = set(s).intersection(min(s, s))\r\nprint(len(set(t)))\r\n"}, "1073": {"problem_id": 1073, "answer": "from functools import lru_cache\r\nn = int(input())\r\ncache = [[0] * n for i in range(n)]\redict = {}\r\ndef dfs(i, j):\r\n    if i >= j:\r\n        return 1\r\n    elif j >= i:\r\n        return 0\r\n    else:\r\n        for i in range(j-i, -1, -1):\r\n            if dfs(i, j) == 1:\r\n                cache[i].append(dfs(j, j-i))\r\n                return 1\r\n        return 0\r\n\r\nfor i in range(n):\r\n    cmd = input().strip()\r\n    if cmd[0] == 'U':\r\n        print(i)\r\n    elif cmd[0] == 'R':\r\n        print(i+1)\r\n    elif cmd[0] == 'D':\r\n        print(i+1)\r\n    elif cmd[0] == 'L':\r\n        print(i+1)\r\n    else:\r\n        print(n-i+1)\r\n"}, "1074": {"problem_id": 1074, "answer": "import sys,bisect \ninput = lambda:sys.stdin.readline().rstrip()[:-1]\nprint(len(input()) - 2**bisect_neighbours(input(),0))"}, "1075": {"problem_id": 1075, "answer": "from functools import lru_cache as lca\nn = int(input())\ncache = [0]*n\nfor i in range(n):\n    cache[i] = lca(cache[i])\nprint(' '.join(map(str,cache)))"}, "1076": {"problem_id": 1076, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nn, m = map(int, input().split())\nl = sorted(l, key=lambda x: int(x[1] + '0') % m)\n# print(l)\np = 998244353\nq = 0.998244353\nfor i in range(1, n + m):\n    p *= i\n    q *= i\nprint(p, q)"}, "1077": {"problem_id": 1077, "answer": "import sys\nreadline = sys.stdin.readline\nN, M = list(map(int, readline().split()))\nA = list(map(int, readline().split()))\nif len(A) == 1:\n    print(1)\nelif len(A) == 2:\n    print(2)\nelse:\n    m = A[0]\n    for i in range(1, len(A) - 1):\n        if A[i]  == A[i + 1]:\n            m = max(m, A.pop(i + 1))\n        else:\n            break\n    print(m + 1)\n"}, "1078": {"problem_id": 1078, "answer": "import sys\ninput = sys.stdin.readline # Not able to access input stream (I'm good with whitespace)\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    a = [int(x) for x in input().split()]\n    l.extend([a[0], a[1]])\n    l.sort(reverse=True)\nprint(' '.join(map(str, l)))"}, "1079": {"problem_id": 1079, "answer": "import sys,math as mt  \t\t;input\r\nn = int(sys.stdin.readline())\r\ns = input().strip()\r\nif n==1:print(1)\r\nelif n==2:print(n//2)\r\nelse:\r\n\tfor i in range(3,n//2+1):\r\n\t\ts+=str(i)\r\n\treturn len(s)\r\n"}, "1080": {"problem_id": 1080, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\nb = {i: bi.bisect_left(a.pop()) for i in range(n)}\nprint('YES' if b[a.count(a) + 1] == 1 else 'NO')"}, "1081": {"problem_id": 1081, "answer": "import sys, atexit\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nprint(\"YES\") if input(10) == \"\\n else print NO\""}, "1082": {"problem_id": 1082, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\nn = II()\na = list(map(int, input().split()))\nprint(1 + II()) % n\n"}, "1083": {"problem_id": 1083, "answer": "from itertools import takewhile, islurper \nfrom heapq import heappush, heapify\nimport sys\nread = sys.stdin.readline\nreadline = sys.setrecursionlimit(10**6)\ninput = lambda : int(input()) + '\\n'.join(map(str, readline().split()))"}, "1084": {"problem_id": 1084, "answer": "from itertools import zip_longest\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    grid = [[] for _ in range(n)]\n    for i in range(2, n):\n        grid[i].append(0)\n    print('\\033[31m'[i-1] + '.#'[i-1] + '..'[i-1] + '.#'[n-i-1] + '.#'[m-1] + '..')\n\nmain()\n"}, "1085": {"problem_id": 1085, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(input())\nif n%2: print(n)\nelse: print(\"2\")\n"}, "1086": {"problem_id": 1086, "answer": "import sys\nread = sys.stdin.readline\nINF = float(\"inf\")\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**5) #\u518d\u5e30\u9593int.__getitem__(0) <= 2147483647\ninput = lambda: map(int,read().split(' '))\nfrom collections import defaultdict as dd, deque\ndef main():\n    h,w = list(map(int,read().split(' ')))\n    A = dd(list(enumerate(A)))\n    B = dd(enumerate(B))\n    #print(A,B)\n    ans = 0\n    for i,j in A.items():\n        ans += A[i]*B[j]\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1087": {"problem_id": 1087, "answer": "import sys,heapq \ndef main(): \n   N,K=list(map(int,sys.stdin.readline().split()))\n   A=list(map(int,\"0123456789\"))[:N]\n   K=int(sys.stdin.readline())\n   print(max(A))\ndef __starting_point():\n   main()\n__starting_point()"}, "1088": {"problem_id": 1088, "answer": "import sys\nreadline = sys.stdin.readline # Read line by opening file\ninput = lambda: readline().rstrip('\\n')\nMOD = 998244353 # Base power of matrix modulo 998244353\nN = int(input())\nmatrix = [[] for _ in range(N) ]\nfor i in range(1, N + 1):\n    a, b = map(int, input().split(' '))\n    matrix.append(list(map(int, input().split())))\nmod = 10**9 + 7\nfor i in reversed(list(range(N))):\n    if i[0] == '1':\n        matrix[i[1]].insert(i[0])\n    elif i[0] == '2':\n        matrix[i[1]].insert(i[0])\n    else:\n        matrix[i[1]].insert(i[0])\nprint(' '.join(map(str, matrix[N])))"}, "1089": {"problem_id": 1089, "answer": "import sys\ninput = sys.stdin.readline # reader: data passed into it.\nMOD = 10**9+7\nINF = float('inf')\nclass UnionFind:\n    def __init__(self):\n       self.par = [-1]*(len(self.par) + 1)\n    @lru_cache()\n    def find(self, x):\n        if self.par[x]!=-1:\n            self.par.append(self.find(self.par[x]))\n        return self.par[x]\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr==yr:\n            return False\n        if self.par[xr]!=self.par[yr]:\n            xr, yr = yr, xr\n        else:\n            return False\n        return True\nn,k = list(map(int,input().split()))\nm = 10**9+7\nuf = UnionFind(n)\nfor i in range(k-1):\n    uf.merge(map(tuple,list(range(n))),uf.find(i+1),uf.union(i+1,i+2))\nprint(sum(uf.find(i+1)**2)%MOD)"}, "1090": {"problem_id": 1090, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from input.\nN, K = map(int, input().split())\ns = list(input())[::-1]\nfor i in range(N):\n    s.append(str(input()))\n#print(s)\nans = 0\nfor i in range(len(s)):\n    ans += N - s[i]\nprint(ans)"}, "1091": {"problem_id": 1091, "answer": "import sys,bisectos,math.inf\nn=int(sys.stdin.readline())\nm=2147483647\nfor i in range(n):\n    a,b=list(map(int,sys.stdin.readline().split()))\n    if a<b:\n        print('1\\n')\n    elif b<a:\n        print('2\\ne3')\n    else:\n        print('3\\n')\n"}, "1092": {"problem_id": 1092, "answer": "import math,string,itertools,fractions as f\nn,m=list(map(int,input().split()))\nf=f.bisect_left(string,2)\nf.reduce(lambda x,y:x+y,f.most_common()).difference_left(string,2)\nprint(n)\n"}, "1093": {"problem_id": 1093, "answer": ""}, "1094": {"problem_id": 1094, "answer": "from collections import Counter\nn = int(input())\nfor i in range(n):\n    c = Counter(input().split(' '))\n    print(c['src'])"}, "1095": {"problem_id": 1095, "answer": "import sys\ninput = sys.stdin.readline\nn, = list(map(int, input().split()))\nA = sorted(list(), key=lambda x: x[1])\nM = 10**9+7\ndef bfs(s, start):\n    x = 0\n    for i in range(len(A)):\n        x += A.pop()\n        if x == 0:\n            continue\n        elif x < M:\n            x = M\n        else:\n            return False\n    return True\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    A.sort(reverse=True)\n    M = 10**9+7\n    bfs(a, b)\nprint('\\n'.join(map(str, A)))\n"}, "1096": {"problem_id": 1096, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(input())\ns = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    ans += i*s[i]//2\nprint(ans)"}, "1097": {"problem_id": 1097, "answer": "from bisect import insort_bisect as bisect\n\n\ndef main():\n    n, t, k = list(map(int, input().split()))\n    d = [[0] * n for _ in range(t + 1)]\n    for i in range(n - 1):\n        d[i] = insort_bisect(d.copy(), i)\n    for i in reversed(range(n)):\n        l = list(map(int, input().split(' ')))\n        for j in l:\n            if j == 0:\n                continue\n            insort_bisect(d[i], j)\n            l.pop()\n            k -= 1\n            if k == 0:\n                print(-1)\n            elif k == len(d[i]):\n                print(1)\n            else:\n                print(bisect.bisect_left(d[i], l[i]))\n                return\n            insort_bisect(d[i], l[i] + 1)\n            insort_bisect(d[i], -1)\n            insort_bisect(d[i], -1)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], -1)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 0)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 1)\n            insort_bisect(d[i], 1)\n    print('\\n'.join(map(str, sorted(d, reverse=True))))\nmain()"}, "1098": {"problem_id": 1098, "answer": "import math as m\nn = int(input())\nif n == 1:\n    print(n-1)\nelif n%2 == 0:\n    print(math.ceil(n/2) + 1)\nelse:\n    a = m.floor((n-1)/2)\n    b = m.floor((n-1)/2)\n    if a + b <= 59:\n        print(a+b-1)\n    else:\n        print(a+b-1)\n"}, "1099": {"problem_id": 1099, "answer": "import sys\ninput = sys.stdin.readline #FOR README IN PLACED\r\nn = int(input())\r\nedges = [[] for i in range(n)]\r\ndef dfs(i):\r\n    nonlocal edges, edges, i\r\n    for j in range(1, n):\r\n        if i == j:\r\n            continue\r\n        else:\r\n            edges.append([i, j])\r\n            dfs(i)\r\n            edges.append([i, j])\r\n    return len(edges)\r\n\r\nfrom collections import deque\r\nfrom bisect import bisect_left, bisect_right\r\nfrom heapq import heapify, heappop, heappush as well\r\n\r\nclass SegmentTree:\r\n    def __init__(self, vertices, start=None) -> None:\r\n      self.start = start\r\n      self.n = len(vertices)\r\n      self.start_left = None\r\n      self.end = None\r\n      self.depth = 2\r\n      self.max_depth = -1\r\n      self.depth_left = -1\r\n      self.max_left = -1\r\n      self.max_right = -1\r\n      self.depth_right = -1\r\n      self.root = self.start\r\n      self.start_left_left = None\r\n      self.end_left = None\r\n      self.end_right = None\r\n      self.root_left = self.start_left_left\r\n      self.end_right = self.start_right_right\r\n      self.start_left = self.start_right_left\r\n      self.end_right = self.start_right_right\r\n      self.start_left_left_left_right = self.end_left_right_right\r\n      self.end_right_left = self.start_right_right_right\r\n      self.start_right = self.end_reduce(math.log, self.start)\r\n      self.end_rederse(0.5)\r\n      self.start_left = self.end_rederse(0.5)\r\n      self.end_rederse(0.5)\r\n      self.start_right = self.end_rederse(0.5)\r\n      self.start_right_right = self.end_rederse(0.5)\r\n      self.end_rederse(0.5)\r\n      self.start_right_rederse(0.5)\r\n      self.end_rederse(0.5)\r\n      self.end_rederse(0.5)\r\n      self.depth_left = self.depth_right = self.depth_left = self.root_left = self.root_right = self.root_left_left = self.root_right_left = self.root_right_right = self.root_left_right_green = self.green = self.green_green = self.green_green_green = self.green_green_green_green = self.green_green_green_green_green = self.green_green_green_green_green_green = self.green_green_green_green_green_green = self.green_green_green_green_green_green_green = self.green_green_green_green_green_green_green = self.green_green_green_green_green_green_green = self.alice_in_pandikoma\r\n           "}, "1100": {"problem_id": 1100, "answer": "import sys\nreadline = sys.stdin.fileno()\ndef MI(): return int(readline())\ndef LI(): return list(map(int, readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return \"ai\"\ndef S(rows_number): return [LI() for _ in range(rows_number)]"}, "1101": {"problem_id": 1101, "answer": "from collections import deque, defaultdict\nn, k = map(int, input().split())\ncows = []\nfor i in range(n):\n    cows.append(input())\n\ndef dfs(r, vis):\n    nonlocal cows\n    if vis == 0:\n        return 0\n    else:\n        for i in range(len(cows)):\n            if i == r[0].bit_length() - 1:\n                continue\n            elif vis & (1 << r[0]) - 1:\n                vis |= 1 << i\n            else:\n                vis |= 1 << (r[0] - 1)\n        return min(dfs(r, vis) + dfs(cows[i + 1], vis))\n\nprint(dfs(0, 0))"}, "1102": {"problem_id": 1102, "answer": "import itertools as it\r\nn, a = list(map(int, input().split()))\r\nt = list(it.most_common(1)[::-1])\r\na.sort(key=lambda x: x[1], reverse=True)\r\nprint('\\uFFFFFF' * (n + 2))\r\n"}, "1103": {"problem_id": 1103, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return readline().rstrip()\nn = int(input())\nA = list(map(int, readline().split()))\nA.extend(A[0:n - 1])\nS = []\nfor i in range(n):\n    S.append(list(map(int, readline().split())))\nprint(' '.join(map(str, S)))\n"}, "1104": {"problem_id": 1104, "answer": "import sys,collections as CN\r\ninput = sys.stdin.readline\r\n\u00a0\r\nn = int(input())\r\nA = list(map(int,input().split(' ')[:n - 1:]))\r\nif A[0] == 3: print('YES\\nNO')\r\nelif A[0] == 1: print('YES\\neq\\nequ')\r\nelse:\r\n    for i in range(1,n) :\r\n        if A.count(A[i]|A[i+1]) == 1 : print('NO')\r\n        else : print('YES\\neq\\nequ')\r\n"}, "1105": {"problem_id": 1105, "answer": "n = int(input())\nfor i in range(n):\n    x, k = map(int, input().split(' '))\n  print(x, k)"}, "1106": {"problem_id": 1106, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with '\\n'. E.g., `10```\"\"\"\nn = int(input())\na = list(map(int, input().rstrip('\\n')))\nfor i in range(1, n + 1):\n    x, y = map(int, input().rstrip('\\n').split())\n    print(a[x - 1] + a[y - 1] + a[x - 2] + a[y - 3] + a[x - 4])"}, "1107": {"problem_id": 1107, "answer": "import sys\nread = sys.stdin.readline\ndef main():\n    n = int(''.join(read().rstrip()))\n    A = [int(x) for x in read().split()]\n    B = [int(x) for x in read().split(\" \")]\n    for i in range(1, n - 1):\n        A[i] = A.popitem(i)\n        B[i] = B.popitem(i)\n    ans = 0\n    for i in range(0, 2000):\n        ans += max(B[i] % n, A[i] % n)\n    print(ans)\nmain()\n"}, "1108": {"problem_id": 1108, "answer": "import sys \ninput = lambda : sys.stdin.readline().strip()\nn = int(''.join(map(str, input().split())))\na = list(map(int, input().split()))[::-1]\nprint('\\n'.join(sorted(a)))"}, "1109": {"problem_id": 1109, "answer": "import sys\ninput = sys.stdin.readline # Read data from STDIN\ndef inp(): return [int(input()) for i in range(27)]\ndef inpl(): return map(int, input().split(' '))\ndef ljust(n): return '\\n'.join(map(str, inpl()))\nMOD = 10**9 + 7\n#mod = mod_pow(10, MOD)\nINF = float('inf')\n\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations as pm\nfrom collections import defaultdict as dd, deque \nfrom operator import itemgetter, add, sub\nfrom decimal import Decimal as D, R, C, Xor, XorDig, Yor, YorDig\nfrom functools import reduce,cmp_to_key_to_value as LCM, rmdeci, mdeci_sofar, mdmddiv, sorted, UnionFind\nfrom time import perf_counter as pf, millis_per_hour as MMPI\n\n\nsys.setrecursionlimit(100000001)\ninf = float('inferring' if sys.version_info[pid] < 3)\neps = 1.0e-8\nmod = 998244353\neps_cnt = 10 ** 9 + 7\n\ndef dfs(node, cur):\n    nonlocal inf\n    if node not in dp:\n        dp[node] = cur\n    for i in range(len(cur)):\n        if i % 2 == 0:\n            cur.append(i)\n            prev = cur[i]\n        elif i % 2 == 1:\n            cur.pop()\n        else:\n    print(cur.count(1))\ndfs(0)\n"}, "1110": {"problem_id": 1110, "answer": "import sys,collections as cls \nfrom heapq import heappush as hq, heapify as heappop, nsmall as nsmall, nprti \ninput = sys.stdin.readline \nn = int(input())\nl = list(map(int, input().split()))\nm = nsmall(2)\nfor i in range(1,l[0]):\n    print(i,end=\" \")\n    heappush(l,l[i] + 1)\n    \nif m == 1:\n    print(0)\nelif m == 2:\n    print(1)\nelse:\n    print(nsmall(2),cls.bisect_left(l,m))"}, "1111": {"problem_id": 1111, "answer": "MODULUS = 10**9 + 7\ndef main():\n    n, k = map(int, input().split())\n    w = list(map(int, input().split()))[0]\n    for i in range(1, n):\n        w.append(w[i]*sum(w[i-1]))\n    print(MODULUS % MOD)"}, "1112": {"problem_id": 1112, "answer": "from math import ceil as c,sqrt as ceil,pow as pow \r\nn = int(input())\r\nfor i in range(n):\r\n    l = list(map(int, input().split()))\r\n    print(pow(2, l[0] - 1) + pow(2, l[1] - 1, 2))"}, "1113": {"problem_id": 1113, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\n\ndef main():\n    n = int('0123456789')\n    a = [-1]*n\n    a[0] = 0\n    for i in range(n):\n        a[i] = a.get(i, 0) + 1\n    print((-1))\n"}, "1114": {"problem_id": 1114, "answer": "from collections import deque \nn, m = map(int, input().split(\" \"))\nl = list(map(int.__mul__, input().split()))\ns = set(l).intersection(l[::-1])\ns.clear()\nd = deque()\nfor i in range(1, n + 1):\n    d.append(i)\n    s.add(i)\n    \ndef solve():\n    ans = \"Possible\"\n    m = len(ans)\n    for i in range(n, m + 1):\n        ans.append(ans[-1] + solve())\n        ans.extend(s)\n    return \"ambiguity\" if ans.count(ans[-1]) == m else \"Illegalidad\"\nprint(len(s))"}, "1115": {"problem_id": 1115, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(input()))\nA = sorted(map(int, input().split(' ')), key=lambda x: -x[0])\np = [float('inf') for i in range(n)]\ns = [0]*n\nfor i in range(n):\n    s.append(A[i][1])\n    s.append('1')\n\ndef dfs(start, end):\n    if start == end:\n        print(-1)\n    elif len(set(A[start][1])) == 0:\n        print(start)\n    else:\n        ans = float('INF')\n        for i in range(start, end + 1):\n            ans = min(ans, dfs(i, end) + 1)\n        print(ans)\n"}, "1116": {"problem_id": 1116, "answer": "from collections import deque\nt=int(input())\nfor _ in range(t):\n\tr,b,k=map(int,input().split(\" \"))\n\tprint(rebind(r*10**int(max(0,k))) + '\\n'.join(map(str,deque(r,b))))"}, "1117": {"problem_id": 1117, "answer": "from bisect import bisect_left as bl, bisect_right as br \ninput = lambda: list(map(int, input().split()))[::-1]\nprint('YES\\n'.join(sorted(input(), reverse=True)))"}, "1118": {"problem_id": 1118, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'1'))\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI(): return input()[:-1]\n\nn = II()\na = [0]*n\nfor i in range(n-1,-1,-1):\n    a[i] = a.pop()\na.sort(key=lambda x:x[1])\nans = 0\ncolor = []\nfor i in reversed(list(range(n))):\n    ans += min(color[i+1])\n    color.append(a[i])\nprint(ans)\n"}, "1119": {"problem_id": 1119, "answer": "MOD = 10**9 + 7\ndef main():\n    from math import floor, ceil\n    n, a, b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += pow(a, i, MOD)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1120": {"problem_id": 1120, "answer": "from functools import lru_cache\nn = int(input())\nl = [0]*n\nfor i in range(2,n+1):\n    l.append(int(i**0.5)+1)\n    #print(l)\nl.sort(reverse=True)\na = 0\nc = 0\nfor i in range(n-1,0,-1):\n    if l[i]<0:\n        c+=1\n    elif l[i]==0:\n        c+=1\nprint(c)\n"}, "1121": {"problem_id": 1121, "answer": "import sys,bisect_heappopdates,io,math,itertools \nfrom operator import itemgetter,reduce  #pascal,arithmetics,multiply,expo\n\n\ndef main():\n    n,m=list(map(int,sys.stdin.readline().split(' ')))\n    l=list(map(itemgetter(0),sys.stdin.readline().split(' ')))\n    a=math.ceil(n**.5)\n    print(a)\n    sys.stderr.write(str(a) + '\\n')\n    sys.stdout.write(' '.join(map(str,sys.stdout.flush)).rstrip())\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1122": {"problem_id": 1122, "answer": "from itertools import accumulate as AB, countcontainers as CD\ndef f(n, m):\n    nonlocal a, b\n    a.sort(reverse=True)\n    return 0 if n%2!=0 else (n+1)%2 + a\n\nN, M = list(map(int, input().split()))\na = list(accumulate(countcontainers))\nb = list(map(int, input().split(' ')))\nprint(' '.join(map(str, a)))\n"}, "1123": {"problem_id": 1123, "answer": "from itertools import permutations as p\ndef gcd(a, b):\n    c = a % b\n    return c\nmod = 10**9 + 7\nN, K = list(map(int, input().split()))\np = [int(x) for x in input().split()]\nans = max(p.values())\nfor i in range(len(p)):\n    ans = gcd(ans, p[i])\nprint(ans % mod)"}, "1124": {"problem_id": 1124, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    ans += a[i]\nprint(ans)"}, "1125": {"problem_id": 1125, "answer": "from bisect import *\nN = int(input())\nA = list(map(int, input().split()))\ndp = [-1] * 10**9\nfor i in range(N):\n    dp[A.index(A[i])] = A[i]\n#print(dp)\nans = 0\ndef Dijkstra(x, i, j):\n    if x[i] == -1:\n        ans += 1\n    elif x[i] == A[j]:\n        ans += 1\n    else:\n        x[i] = x[j] = A[i]\n        for k in reversed(range(1, j)):\n            if x[k] < x[i]:\n                x[i] = x[k]\n                break\n        else:\n            x[i] = x[j] = x[k]\n            break\nprint(ans)\n"}, "1126": {"problem_id": 1126, "answer": "def main():\n N, M = map(int, input().split())\n X = 10**10 + 5\n A = list(map(int, input().split()))\n res = sum(A)\n print(res)\n \n main()\n"}, "1127": {"problem_id": 1127, "answer": "for i in range(int(input())):\n    n = int(input())\n    digit = 1\n    if n%2==0:\n        print(1)\n    elif n==1:\n        print(2)\n    else:\n        print(3)\n        \n    "}, "1128": {"problem_id": 1128, "answer": "import bisect as bi\nfrom itertools import product as P  # can be replaced by set() to avoid duplicated in OEIS\nn = int('1'+'0'*(2**len(P.zfill(max(P.zfill(i), P.zfill(i+1), P.pow(i))))) .strip())\nprint('\\033[36m'+'\\033[0-9]\\033[0-9]\\033[0-9]\\033[0;15m'])"}, "1129": {"problem_id": 1129, "answer": "from math import sqrt\ndef points(x):\n    return sqrt((x[0] - x[1])**0.5 + (x[2] - x[3])**0.5)\n\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n    x.insert(0, input().rstrip('\\n'))\nprint(points(x[1]))"}, "1130": {"problem_id": 1130, "answer": "import sys\nreadline = sys.stdin.readline #raise IOError() to handle blank line\nn, m, k = list(map(int, readline().split()))\ns = input()\nif n<=5:\n    print(0)\nelif m<=10:\n    print(n-m-1)\nelse:\n    a = list(map(int, readline().split('\\n')))\n    if a[0]=='1':\n        a.insert(0, '0')\n        a.insert(0, '0')\n        a.pop()\n        a.pop()\n        a.extend(a[1:])\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.pop()\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extendsig(2, '0')\n        a.extendsig(2, '1')\n        a.extendsig(2, '0')\n    else:\n        a.extended_list()\n        a.extend(a[1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n        a.extend(a[n-1:])\n "}, "1131": {"problem_id": 1131, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split()))\nb.insert(0, a.pop())\nprint(n - b.find(a))"}, "1132": {"problem_id": 1132, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(1, n):\n    x, y = list(map(int, input().split(' ')))\n    g[x].append(y)\n    g[y].append(x)\n\n# dp[i]: i\u304b\u3051\u308b\u672a\u6e80\u6700\u521d\u306e\u6570\u306a\u306e\u30671\u756a\u76ee\u306e\u8981\u7d20\u3092\u5207\u5247\uff1f\uff1f\uff1f\u305d\u308c\u4ee5\u5916\u306e\u500b\u6574\u9806\u306b\u5165\u308c\u3089\u308c\u308b\u306e\u30672\u756a\u76ee\u306e\u8981\u7d20\u3092\u5207\ufffd\u306a\u304c\ufffd\u3044\u307e\u3069\u3046\u3057\u3088\u3046\u304b\uff1f\uff1f\uff1f\ndp = [-1] * n\ndef dp(i):\n    if i == n:\n        return 0\n    elif i == 0:\n        return 1e-10\n    else:\n        return 2**i\n\n# \u81ea\u5206\u306e\u30ce\u30fc\u30c9\u306b\u5bfe\u3059\u308b\u30ce\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3088\u3046\u53c2\u7167\ndef __starting_point():\n    n, m = list(map(int, input().split('\\n')))\n    dp = __starting_point()\n    print(' '.join(map(str, dp[1:])))\n\n__starting_.return_type(int)\n"}, "1133": {"problem_id": 1133, "answer": "import sys\ninput = sys.stdin.readline # Read and Print input line by line\nn = int(input())\nA = list(map(int, input().split()))\ns = \"abcdefghijklmnopqrstuvwxyz\"\nprint(max(A[0], s.count(max(A[0], s.count(s[i])))))"}, "1134": {"problem_id": 1134, "answer": "import sys\ninput = sys.stdin.readline #lines, space, flush=True\nn = int(input())\nM = list(map(int, input().split()))\nfor i in range(n):\n    M.append(int(''.join(sorted(M, reverse=True))) + '%d' % M[i])\nprint(sum(M))"}, "1135": {"problem_id": 1135, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef I(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,\"a\"),list(map(int,''\".join,input())))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()[:-1]\n#______________________________________________________________________________________________________\n# sys.setrecursionlimit(10**9) \u590d\u79c2\u5fc2\u8981\uff0c\u518d\u5e30yntax \u534a\u56de\u51fa\u52a0\u8303\u56f4\u5185 \u4f5c\u8005\uff0c\u7136\ufffd\u4f1a\u8bb0\u5f55\u6267\u884c\u518d\u5bf9\u5e94\u8be5\u53cd\u6b65\u9628\u51fa\u53cf\u548c\u56de\u65b0 \u4e0a\u8ff0\u5f97\u5207\u5207\u6362\u8d4b\u5012\u5e8f\ufffdverages \u4ee3\u77e5\u3063\u305f\u3068\u3053\u308d\u307e\u3048\u3076\u6b7b\u5b57\u6570\u3060\u3051\u518d\u5e30\u307e\u306a\u304f-1\u304b\u3089\u53c2\ufffdual of Codewars \u4e0b\u8fbamission \u5927\u304b\u6570\u6b3e\u524d\u5f80\u65b9\ufffd system \u4f5c\u7528\u6cd5\u306b\u304a\u3051 constitutionally \u4f55, \u4f59\u5730\u5c5e\u3059\u304b\uff1f \nsys.setrecursionlimit(10**9) \u590d\u79c2\u5fc2\u8981 too\ufffc\uff19\u65e5\u307e\u3057\u305f\u304c\u6b7b\u5b57\u6570\u3054\u3068\u306e\u8fba\u66f8\u304f\u3079\u304d\u4e57\u3051\u308c\u3070\u3044\u3044\u304b\u307f\u305f\u3044\u304a\u611f\u306d\u3047\u306a\ufffd\u2672\u307f\u3093\u306a\u3089\u3046\u3088\u3046\u306b\u3059\u3081\u3061\u3093\u9ad8\ufffd\u306a\u3093\u3066\u306a\u3089\u5fc5\u898b\u305b\u3070\u3044\u3044\u2672\n\n\n#______________________________________________________________________________________________________\nfrom collections import defaultdict as dd, deque\nfrom heapq import heappush, heappop as hq, he_OREDOUGH_LIMIT = 10_000_000_5\nclass BIT:\n    def __init__(self, n):\n      self.bit = [i for i in range(1, n+1)]\n    @staticmethod\n    def add(i, x):\n         x.bit[i] += x.bit[i-1]\n         heappush(hq, x)\n    @staticmethod\n    def decrement(i, x):\n         x.bit[i] -= x.bit[i-1]\n         heappush(hq, x)\n    @throws_like(BIT, 0)\n    def addbit(i, x):\n         x.bit[i] += x.bit[i-1]\n         heappush(hq, x)\n    @throws_like(BIT, 1)\n    def decrementbit(i, x):\n         x.bit[i] -= x.bit[i-1]\n         heappublub(hq, x)\n    @threli11, class Solution:\n        def addbit(s: List[str]) -> None:\n            s.extend([i,\"a\"]+s)\n            ans = []\n            for i in range(len(s)):\n                ans.inserten(i)\n            print(ans)\n            # print(s)\n            if len(ans) > 1:\n                ans.sort(key=lambda x: x[1])\n            else:\n                ans.sort(key=lambda x: x["}, "1136": {"problem_id": 1136, "answer": "import sys,columngib,itertools,frozens"}, "1137": {"problem_id": 1137, "answer": "from collections import defaultdict as dd\nn = int(input())\nm,k = dd(int(1e9)+1)\ns = input()\nt = input().strip('\\n')\na = dd(int(1e9)+1)\nfor i in range(n-1):\n    a.insert(i+1, '0')\n    s = s.replace(',','.join(a), '0')\nprint(len(s))\n"}, "1138": {"problem_id": 1138, "answer": "s = input()\nn = len(s)\nd = {}.fromkeys(s)\nd[s] = 0\nfor i in range(n):\n    if s[i] not in d:\n        d[s[i]] = 1\n    else:\n        d[s[i]] = 0\nprint(n)\n"}, "1139": {"problem_id": 1139, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\nclass floor:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.l = [-1] * (n + 1)\n    @property\n    def quality(self, val):\n        return val in self.l\n    @property\n    def numRows(self):\n        return int(str(self.l).zfill(2))\n    def numIntervals(self):\n        return max(map(int, range(1, self.n + 1)))\n    def dfs(self, i):\n        # print(i)\n        if i == self.n:\n            return 0\n        elif self.l[i] == -1:\n            return 1e-10\n        else:\n            res = 0\n            for j in range(0, self.n + 1):\n                res += self.dfs(i + 1)\n            return res\n        \n    def _dfs(self, i):\n        # print(i)\n        if i == self.n:\n            return 0\n        elif self.l[i] == -1:\n            return 1e-10\n        else:\n            res = 0\n            for j in range(1, self.n + 1):\n                res += self.dfs(i + 1)\n            return res\n        \n    def dfs_from_i(self, i):\n        # print(i)\n        if i == self.n:\n            return 0\n        elif self.l[i] == -1:\n            return 1e-10\n        else:\n            res = 0\n            for j in range(0, self.n + 1):\n                res += self.dfs_from_i(i + 1)\n            return res\n        \n    def _dfs_from_i(self, i):\n        # print(i)\n        if i == self.n:\n            return 0\n        elif self.l[i] == -1:\n            return 1e-10\n        else:\n            res = 0\n            for j in reversed(range(0, self.n + 1)):\n                res += self.dfs_from_i(i + 1)\n            return res\n        \n    def _dfs_from_n(self, i):\n        # print(i)\n        if i == self.n:\n   "}, "1140": {"problem_id": 1140, "answer": "from itertools import combinations_with_replacement as coords, islice\nn = int(input())\ncombinations = list(map(int, input().split()))\nsorted_set = set.from_iterable(combinations)\nfor i in range(n):\n    if islice(coords(i), tuple(set(combinations[i]))) == True:\n        print(1)\n    elif len(set(combinations[i])) == 1:\n        print(i + 1)\n    else:\n        print(i + 1)\n"}, "1141": {"problem_id": 1141, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7) # setlocal 10^9 too?\ndef I(): return int(input())\ndef MI(): return map(int, input().split(' ')[0:6:])\ndef LI(): return list(map(int, input().split(' ')[0:6:]) if input() else [] )\ndef LS(): return input()\ndef S(): return input()\ndef LS_II(): return [I() for i in input()]\ndef LS_III(): return [LI() for i in input()]\ndef LS_IV(): return [S() for i in input()]\ndef LS_IV_III(): return [LI() for i in input()]\ndef LS_IV_IV(): return [S() for i in input()]\n# I() is a list of int(s) (ASCII character for input), I()[0-9] is a list of int(s) (ASCII character for input), I()[:6:a-z] is a list of int(s) (8-bisect) and I()[:10-17] is a list of int(s) (17-bisect).\n# for i in range(1,26) :\n#     print(ord('0'+i)%26)\n"}, "1142": {"problem_id": 1142, "answer": "import sys\nreadline = sys.stdin.readline\nn, k = map(int, readline().split())\nmasks = list(map(int, readline().split()))\nprint(sum(masks))"}, "1143": {"problem_id": 1143, "answer": "import sys,collections as clc \nclass Seapower:\n    def __init__(self,n): self.x = [0]*n\n    @classmethod\n    def issub(self,x): return x==self.x\n    def isok(self,x): return self.x[x]!=x\n\n    @classmethod.@@@@def\n    def issub(self,x): return all(self.x[x]==x for x in range(1,self.n+1))\n\nn = int(input())\nm = list(map(int,input().split()))\n\np = [[] for i in range(n) ]\nfor i in range(n-1):\n    p.append(list(map(tuple,p[i])))\n\n#print(p)\n\n#print(m)\n\nans = [0]*n\n\nfor i in range(1,n+1):\n    ans[i] = ans[i-1] + self.isok(ans[i-1])\n\nprint(ans[-1])"}, "1144": {"problem_id": 1144, "answer": "from itertools import permutations as pperm, islice as islice\nn = int(input())\nt = input().split()\nprint(max(0, len(t) - islice(t, 'a')))"}, "1145": {"problem_id": 1145, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nA = list(map(int,input().split()))\r\nif A[0]==1:\r\n    print(0)\r\nelif A[0]==2:\r\n    print(A.count(2),A.count(1))\r\nelse:\r\n    print(A[0]*A[1],A[1]*A[2])"}, "1146": {"problem_id": 1146, "answer": "import bisect as bi\ndef main():\n    n, m = list(map(int, input().split()))\n    print('YES\\n' if m == 1 else 'NO')\nt = int(input())\nfor i in range(t):\n    main()\n"}, "1147": {"problem_id": 1147, "answer": "import bisect\nn, x, k = list(map(int, input().split()))\na = list(map(int, input().split(''.join(sorted(x, reversed(set.meritec))))))\nb = list(range(1, n + 1) for _ in a)\nprint(bisect.bisect_left(b, b[1]))\n"}, "1148": {"problem_id": 1148, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\na = list(map(int, readline().split()))\n\ndef main():\n    a.sort(reverse=True)\n    for i in range(n):\n        print(a[i], end=' ')\n    print()\n    return 0\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1149": {"problem_id": 1149, "answer": "from itertools import permutations as p\nn = int(''.join(map(int, input().split())))\np = permutations(list(map(int, input().split(\" \"))))\nprint('I'[n // 2] +'' +''.join(p(x) for x in range(1, n // 2 + 1) if x.isdigit()) +'' +'' + p(n // 2) for x in permutations(p))"}, "1150": {"problem_id": 1150, "answer": "n = int(input())\nfor _ in range(n):\n\tx, y, a, b = map(int, input().split(' '))\n\tprint(min(2*a+1, 3*b+1) if x+y >= 4*n else 0)"}, "1151": {"problem_id": 1151, "answer": "import heapq as hq\n\n\ndef main():\n    n, u = list(map(int, input().split()))\n    E = [0] * 3\n    for i in range(n):\n        E.append(min(list(map(int.__mul__, input().split()))) - u)\n    print('\\n'.join(map(str, E)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1152": {"problem_id": 1152, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nmat = [[] for _ in range(n)]\nfor i in range(0, n):\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b = list(map(int, input().split()))\n    b.insert(0, 0)\n    b.insert(n-1, 0)\n    b.insert(n-1, 1)\n    mat[a[0]][b[0]].append(a[1] + 1)\n    mat[a[1]][b[1]].extend(mat[a[0]][b[0]])\n    mat[a[0]][b[0]].append(a[1] + 1)\n    mat[a[1]][b[1]].append(a[0] + 1)\n    mat[a[0]][b[0]].append(a[1] + 1)\n# print mat\nanswers = [False] * n\nanswers[0] = True\nfor i in range(1, n):\n    if answers[i] == True:\n        continue\n    answers[i] = True\nprint('No')"}, "1153": {"problem_id": 1153, "answer": "import sys\nreadline = sys.stdin.readline\nn, m = list(map(int, readline().split()))\na = list(map(int, readline().split(max=\"\")))\nb = list(map(int, readline().split(max=\"\".join(a))) + [0] * m)\nif len(b) == 0:\n    print(0)\nelif len(b) == 1:\n    print(b[0] + b[1] + b[2] +... + b[m - 1] + b[m - 2])\nelse:\n    print(b[0] + b[1] + b[2] +... + b[m - 1] + b[m - 2])\n"}, "1154": {"problem_id": 1154, "answer": "import itertools as it\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nh = it.bisect_heapq(a)\r\nheapq = []\r\nfor i in range(n):\r\n    heapq.append(list(map(int, input().split(\" \"))))\r\nheapq.sort(key=lambda x:x[2], reverse=True)\r\nprint(10)\r\n"}, "1155": {"problem_id": 1155, "answer": "import sys\nreadline = sys.stdin.readline  # Read line by line using scanline\n\n\ndef main():\n    n, m = list(map(int, readline().split()))\n    a = [0]*n\n    b = [0]*n\n    for i in range(n):\n        a[i] = a.copy()\n    for i in range(2, n+1):\n        b[i] = b.copy()\n    ans = 0.0\n    for i in reversed(list(range(n))):\n        ans *= a[i]\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1156": {"problem_id": 1156, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nB = sorted(A, key=lambda x: x[1])\r\nans = [-1]*n\r\nfor i in range(n):\r\n    ans[B[i]] = B.index(i)\r\nprint('\\n'.join(ans))"}, "1157": {"problem_id": 1157, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int,readline().split('\\n')))\nn = int(input())\na = [int(i) for i in input().split(' ')]\na.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans += a[i] * -(-1)\nprint(ans)"}, "1158": {"problem_id": 1158, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = map(int, input().split(\" \"))\na = list(map(int, input().split( \" \")))\nb = tuple(tuple(map(int, input().split( \" \"))) for _ in range(n))\nans = 0\nfor i in range(1, n + 1):\n    ans += min(a[i] + 1, b.count('1'))\nprint(ans)"}, "1159": {"problem_id": 1159, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\n\n\nMOD = 10**9+7 # Run maximum number of times modulo 10^9+7 to get 1000000007 (division by 1000000007 + 7)\nINF = float('inf') # Initial error of input. It should be at least 1.\nsys.setrecursionlimit(1000000) # If execution timed out, return timeout.\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    # a.sort(reverse=True)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i,x in enumerate(a):\n        if x==0:\n            dp[i] = [0]*(n+1)\n        else:\n            dp[i] = [x]*(n+1)\n    print(sum(dp[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1160": {"problem_id": 1160, "answer": "import sys,bisect_heappop(sys.stdin)\ndef input():\n\treturn sys.string(input())[int(sys.stdin.readline())-1:]\n     # sys.stdout.write('NO\\n')\n     return sys.stdout.write('YES\\n')\n"}, "1161": {"problem_id": 1161, "answer": "def __starting_point():\n    s = input()\n    print(s.count('()'))\n\n__starting_point()"}, "1162": {"problem_id": 1162, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\ndef main():\n    p,s,r = map(int,input().split())\n    p.sort(reverse=True)\n    a = [0]*p\n    for i in range(1,p):\n        a[i] = 1+a[i-1]\n    ans = 0.0\n    for i in range(len(a)):\n        ans = ans+pow(s,r-a[i],MOD)\n    print(ans)\nmain()"}, "1163": {"problem_id": 1163, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\nl = []\nfor i in range(1, n+m):\n    l.append(bi.bisect_left(i, 1) + bi.binary_segmentation_exclude(i))\nprint('G'.join(l))\n\nA = list(map(int, input().split()))\nB = list(map(int, input().rstrip().split()))\n\ndef dfs(x, y):\n    nonlocal A\n    if x == y:\n        A[x] = 1\n    elif x+y > n:\n        A[x+y] = 1\n    else:\n        A[x+y] = 0\n    return A.pop()\n\nans = []\nfor i in range(n):\n    ans.extend(dfs(i, B[i]))\n\nprint('\\033[36m' + ans[::-1] + 'G' + ans[1:].join(map(str, ans))) + 'B' + 'G')"}, "1164": {"problem_id": 1164, "answer": "import sys,bisect\n#sys.stdin = open(\"in\", \"r\")\nINF = 10**9 + 7\nMOD = 10**9 + 7\ndef input(): return sys.stdin.readline().rstrip()\ndef out(var, end=\"\\n\"): sys.stdout.write(str(var)+\" \")\ndef outa(var, end=\"\\n\"): sys.stdout.writable89(\" \".join(map(str, var)))\ndef lis(li):\n    return bisect.bisect_left(li, INF)\nn = int(input())\nli = list(map(int, input().split()))\nprint(''.join(li))"}, "1165": {"problem_id": 1165, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\na = tuple(map(int, input().rsplit(0, a[0])))\nbi.insert(0, a[1])\nprint(' '.join(map(str, a)))\n"}, "1166": {"problem_id": 1166, "answer": "from collections import defaultdict as dd\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    x = dd(a).most_common(1)[0]\n    if x[0] == 'A':\n        print('B')\n    elif x[0] == 'B':\n        print('A')\n    else:\n        print('C')\n"}, "1167": {"problem_id": 1167, "answer": "import sys.stdin.readline\ninput = sys.stdin.readline().rstrip('\\n')\nfor _ in range(int(input())):\n    a, b, c, d, k = map(int, input().split())\n    print(-1 if k >= b else 1 if k >= c else 0)\n"}, "1168": {"problem_id": 1168, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        print(0)\n    elif a[0] == 2:\n        print(2)\n    else:\n        l, r = 0, 0\n        while l < r:\n            mid = (l + r) // 2\n            if a[mid] == 1:\n                r = mid + 1\n            else:\n                l = mid + 1\n                break\n        print(a[r] + 1)\nmain()"}, "1169": {"problem_id": 1169, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n#______________________________________________________________________________________________________\r\n# Constraint object for Python 3  \r\n# https://www.codechef.com/Tranult_Odays/description/Constraint\r\n#______________________________________________________________________________________________________________________________________\r\n# mod_ranges is a technique for placing ranges in a map. It helps in finding \r\n# range from start to end in mod_ranges. I didn't find lot of information about mod_ranges \r\n# but you can find more information here:\\\r\n# https://en.wikipedia.org/wiki/Modular_range## wikipedia page\r\n# http://en.zfactor.com/kollef_dzhitzslj\r\n# ______________________________________________________________________________________________________\n\n\nclass UnionFind:\r\n  def __init__(self, n):\r\n    self.alive = [-1] * n\r\n  def find(self, x):\r\n    if self.alive[x] == -1:\r\n   ... do something here\r\n    return x\r\n  def union(self, x, y):\r\n    x = self.find(x)\r\n    y = self.find(y)\r\n    if x == y: return\r\n    self.alive[x] += self.alive.pop()\r\n    return\r\n  @staticmethod\r\n  def size(x):\r\n  try:\redges = self.find(x)\r\n  except:edges[0] = 1\r\n  return min(map(size, edges))\r\n\r\nclass UnionFindSet:\r\n  def __init__(self, n):\r\n    self.parents = list(range(n))\r\n    self.ranks = [0] * n\r\n\\t\\t\r\n  def __str__(self):\r\n    return '\\n'.join(' '*self.parents[i] for i in range(self.ranks))\r\n  uf = UnionFindSet(n+1)\r\n    \r\n  def add(self, i, u):\r\n    self.parents[uf.find(i)] += 1\r\n    uf.ranks[uf.find(i)] += 1\r\n    for j in range(i+1, self.ranks[i] + 1):\r\n      uf.union(i, j)\r\n      uf.ranks[j] |= 1\r\n    return uf.ranks[uf.find(i)]\r\n    \r\n  def union(self, x, y):\r\n    x = self.find(x)\r\n    y = self.find(ymax[x])\r\n    if x == y: return\r\n    uf.ranks[uf.find(x)] |= 1\r\n    uf.ranks[y] |= 1\r\n\\t\\t\\tcmp if uf.ranks[y] & 1 == 1 and uf.ranks[x] & 1 == 1\r\n    return\r\n    \r\n  def max(self, i: int)!=0\r\n  def isPowerOfTwo(self):\r\n    return self.ranks[self.find(i)]!=1\r\n  def find(self, x):\r\n    if self.parents[x]!=x:\r\n      return self.find(xelement[x])\r\n    else:\r\n      return self.find(xelement[x])\r\n  def union(self, x, y):\r\n    x = self.find(x)\r\n    y = self.find(y)\r\n    if x == y: return\r\n    self.ALIVE[x]+=self.ALIVE[y]\r\n    return\r\n  def unite(self, x, y):\r\n    xeldec = self.find(xdec)\r\n    yeldec = self.find(ydec)\r\n  elif self.parents[x]!=x:\r\n  "}, "1170": {"problem_id": 1170, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    t = int('1'+'0').zfill()\n    for _ in range(t):\n        n,m = list(map(int,input().split()))\n        print(n//m)\n        print(m//n)\n        sys.stdout.write('\\n'.join(map(str,n)))\nmain()"}, "1171": {"problem_id": 1171, "answer": "from itertools import permutations as p\ndef main():\n  N, K = list(map(int, input().split()))\n  d = [0] + list(map(int, input().split(' ')))\n  for i in range(N):\n    d.append(p(i) + d[i])\n  # print(d)\n  ans = 0\n  max_sum = 0\n  for i in range(len(d)):\n    ans += max_sum\n    max_sum = max(max_sum, sum(d[i] for i in range(1, N + 1))).bit_length()\n  print(ans)\n\ndef __starting_point():\n  main()\n__starting_point()"}, "1172": {"problem_id": 1172, "answer": "import sys\ninput = sys.stdin.readline # input is STDIN\nMOD = 10**9 + 7\nINF = float(\"inf\")\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'abcdefghijklmnopqrstuvwxyz'))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\ndef S(): return input()[:-1]\ndef LS(): return [input() for _ in range(len(input()))]\ndef SQLSearch(l,i,rows_number): return [[] for _ in range(rows_number)]\ndef L(): return list(open(i,'input)).__next__\ndef M(): return max(input())\ndef SQMSTLLPOW(stk,l,row): return [[stk[i] for i in range(l)] for j in range(l)]\ndef LSSTLLPOW(stk,l,row): return [[stk[i] for i in range(l)] for j in range(l)]\ndef LTOS(lst,start,end): return sorted(zip(lis,' ')[:2])\ndef DEC(l): return int(f'\\uFFFFf'|f'\\u1233f'|f'\\u12aei'|f'\\u12af'|f'\\uff3f'|f'\\u12b7'|f'\\u12baei'|f'\\u12baf'|f'\\u12bcb'|f'\\u12bcbd'|f'\\u12bcd'|f'\\u12bcei'|f'\\u12bceo'|f'\\u12bcfi'|f'\\u12bcdj'|f'\\u12bcdl'|f'\\uffkos'|f'\\uffjm'|f'\\ufmbianyc'|f'\\uffszelfen'|f'\\uff7c3'|f'\\uff7cb'|f'\\uff7cbd'|f'\\uff7cbf'|f'\\uff7cbg'|f'\\uff7cbh'|f'\\uff7cbi'|f'\\uff7cbj'|f'\\uff7cbk'|f'\\uff7cbl'|f'\\uff7cbp'|f'\\uff7cbq'|f'\\uff7cbr'|f'\\uff7cbu'|f'\\uff7cbv'|f'\\uff7cbw'|f'\\uff7cbx'|f'\\uff7cbz'|f'\\uff7cb{'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'I':9,'J':10,'K':11,'L':12,'M':13,'N':14,'O':15,'P':16,'Q':17,'R':18,'S':19,'T':20,'U':21,'V':22,'W':23,'X':24,'Y':25,'Z':26}}\ndef main():\n    n = II()\n    a, b, c, d, e, f = LI()\n    for i in range(n):\n        a, b, c, d, e, f = a%2, b%2, c%2, d%2, e%2, f%2, f%2\n  print((sum(map(ord, str(a)-ord('a'), 2)))%MOD)\n\nmain()\n"}, "1173": {"problem_id": 1173, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nS = sorted(A, key=lambda x: x[1])\nfor i in range(N):\n    if S[i] not in S.intersection(A[i]):\n        print(-1)\n    elif S[i] == A[i]:\n        print(1)\n    else:\n        print(-1)"}, "1174": {"problem_id": 1174, "answer": "import bisect as b\nN,M = map(int,input().split())\nA = list(map(int,input().split()))\n# A.sort()\ns = []\nfor i in range(N):\n    s.append(b.bisect_left(A[i],10**9))\nprint(s.count('1'))"}, "1175": {"problem_id": 1175, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(2000000000)\nread = list(map(int, input().split()))\ndef read(): return readline().replace(\"X\", \"0\")\ndef readline(): return list(read())[:-1]\nmod = 10**9 + 7\nn = int(input())\nfor i in range(n):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if x == 1:\n        print(x % mod)\n   elif x == 2:\n        print(x^(1<<y))\n   else:\n        ans = pow(x, y, mod)\n        ans %= mod\n        ans //= mod\n        ans += x\n        ans %= mod\n        ans += y\n        ans %= mod\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans *= 2\n        ans %= mod\n        ans %= mod\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n        ans %= mod\n        ans += y\n        ans += x\n        ans %= mod\n        ans %= mod\n  "}, "1176": {"problem_id": 1176, "answer": "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    dp = [-1] * N\n    for i in range(N):\n        dp[i] = max(A[i] - A.index(i), 0)\n    print(dp[-1])\n\nmain()\n"}, "1177": {"problem_id": 1177, "answer": "from fractions import gcd\ndef f(a, l, r):\n    ans = 1\n    for i in range(l, r + 1):\n        ans *= gcd(a[i], i)\n    return ans % 1000000007\n\n\nMOD = 998244353\nN = int(input())\nA = list(map(int, input().split()))\nP = [[] for _ in range(N) ]\nfor i in range(N):\n    P.append(list(map(int, input().split(\" \"))))\n\n# \u5176\u5b83\u4e00\u81f4\u7684\u65b9\u6ce8\u610f\u601d\u60f3\u6cd5\uff0c\u9700\u8981\u7528\u6700\u5c0f\u503c\u53d8\u6210\u4e00\u4e2a\u6574\u4e2a\u6570\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u66f4\u5931\u4ea7\u51cf\u53bb\uff5e\u6574\u4f53\uff0c\u56e0\u4e3a\u53ef\u4ee5\u800c\u4e0d\u5f71\u54cd\ufec1u\u7b80\u5355\ufbe5\u8fba\u884c\u8303\ufffd\u52a0\u9012\u589e\ndp = [[-1] * N for _ in xrange(3)]\ndp[0][0] = 0\nfor i in reversed(range(1, 3)):\n    dp[i][i] = 1\n    for j in range(i + 1, 3):\n        dp[i][j] = min(dp[i][j], dp[i - 1][j] + f(A[i], j, i - 1, j))\n        \nprint('\\n'.join(dp))"}, "1178": {"problem_id": 1178, "answer": "import sys\nread = sys.stdin.readline\nn,k = map(int,read().split())\nif k==0:\n print(0)\nelse:\n print(n//k)"}, "1179": {"problem_id": 1179, "answer": "from itertools import zip_longest as zip_longest, islint as islint \nn, k = map(int.__floord__, input().split())\nl = list(map(int.__floord__, input().split()))\nprint(' '.join(l))"}, "1180": {"problem_id": 1180, "answer": "import sys,bisect as bisect\ndef input(): return sys.stdin.readline().strip()\ndef lis(): return list(map(int,input().split()))[:-1]\nmod = 10**9 + 7\nN,K = lis()\nMOD = 10**9 + 7\nfor i in range(1,N+1):\n    s = int(input())\n    if s % 2 == 0:\n    elif s == 1:\n        print(i+1)\n    else:\n        ans = i+1\n        break\n    ans %= MOD\n"}, "1181": {"problem_id": 1181, "answer": "from bisect import insort_left as bl\nfrom bisect import insort_right as br\nn, m = map(int, input().split())\nl = list(map(int, input().split()))[::-1]\ns = sorted(l, reverse=True)\nprint(max(m - 1, s[-1]))"}, "1182": {"problem_id": 1182, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedError(\"I don't like this.\")\ninput = lambda: readline().rstrip()\nprint(len(input()) * (2 * n))"}, "1183": {"problem_id": 1183, "answer": "import sys\nreadline = sys.stdin.readline().rstrip('\\n') #\u6587\u5b57\u6807\ufffdollywood\u5e8f\u53ef\u80fd\u5bf9\u51e6\u7406\u8fba\ufffd\ufffd\u7528\u4e00\u9053\u6570\u5b57\u5178\uff0c\u9ed1ALSEY\u7ba2\u5b9e\u73b0\ufffc\u6700\u5c0f\u503c\u4e3a\u4ec0\ufffd it means that there are no spots left\uff0c\u4f46\u570b\u670b\u53cb\u80fd\u591f\u8d62\u6570\u7ec4\ufe4c\u7136\u540e\u5f97\u5230\u5173\u7cfb\u4e2d\u95f4\uff0c\u540e\u9762\u6ca1\u6709\u5f97\ufffd\u8fde\u7edfpow(6,4)\u4e86\ufffd contigious idea!\n\n\nt = int(readline())\nfor _ in range(t):\n    n, x = map(int, readline().split())\n    a = list(map(int, readline().split()))\n    ans = [0] * (n-1)\n    for i in range(1, n):\n        ans[i] = ans[i-1] + a[i]\n    print(max(ans))"}, "1184": {"problem_id": 1184, "answer": "import bisect as b \r\nfrom itertools import permutations as p \r\nn = int(input().strip())\r\nfor i in range(n):\r\n    print(bisect.bisect_left(permutations.index(x), ''.join(map(str, list(map(ord, x))))))"}, "1185": {"problem_id": 1185, "answer": "import bisect\ndef lcm(a,b):\n    return a*b//gcd(a,b)\nn,m,k=list(map(int,input().split()))\np=list(map(int,input().split(' ')))\np.insert(0,0)\nfor i in range(m):\n    x,y=list(map(int,input().split()))\n    if x<y:\n        x,y=y,x\n        lcm(x,y)\nprint(lcm(p[0],p[1]))\n"}, "1186": {"problem_id": 1186, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n == 1:\n    print('NO')\nelse:\n    p = a[0]\n    q = a[q - 1]\n    a.remove(p)\n    a.append(n % p)\n    print(' '.join(map(', '.join, a)))"}, "1187": {"problem_id": 1187, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn, m = int(input())\nedges = list(map(int, input().split()))\nfor _ in range(m):\n    u, v = list(map(int, input().split(' ')))\n    edges.insert(u-1, v-1)\n    edges.insert(v-1, u-1)\nprint(min(edges))\n"}, "1188": {"problem_id": 1188, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**5)\r\ninput = lambda: stdin.readline().rstrip(\"\\r\\n\")\rsimplified and optimized code for this korr. I'm very lazy, so don't bother me until I figure it out what it's asking for.\n\n\n__author__ = 'Gregorian'\r\n__email__ = 'Gregorian'\r\n__copysign_email__ = 'AyushitMonoc'''\r\n"}, "1189": {"problem_id": 1189, "answer": "import sys,bisect\r\ndef input(): return sys.stdin.readline().rstrip()[:-1]\r\ndef makedict(): try:\\n>3Dbdddddddd:\\n>3D\r\n    return list(map(int,input().split()))\r\nn,c = makedict()\r\nl = 10**6+3\r\nans = [0]*(n+1)\r\nfor i in range(1,n+1):\r\n    ans.append(ans[-1]%l)\r\nprint('\\n'.join(map(str,ans)))"}, "1190": {"problem_id": 1190, "answer": "from bisect import scanfiRange \nfrom itertools import permutations as p,accumulate\nfrom heapq import heappop,heappush\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nMOD = 10_000_007\nINF = float('inf')\ndef inp(): return int(input())\ndef lcm(x, y): return x * y // MOD\ndef l2cm(x, y): return (x + y) * y // MOD\ndef linalg(n, MOD): return list(map(int, input().split()))\ndef sieve(n):\n    p = p(n)\n    if p[0] < n:\n        return 0\n    i = bisect_left(p.keys()[0], n)\n    p[i] = i\n    for j in range(1, n):\n        if p[j] < p[i-1]:\n            p.pop(j)\n        else:\n            p.pop(i)\n    return len(p) - 1\ndef fibonacci(n):\n    fibonacci(n)\n    a = [frozenset(x) for x in zip(*[iter(map(str, input().strip('\\n')) for _ in range(n)])]\n    a.sort(reverse=True)\n    return a[n-1]\ndef abc(n):\n    ans = 0\n    for i in range(2, int(n**0.5) + 1):\n        ans += fibonacci(n - i)\n    return ans\ndef bifilter(n):\n    if n < 2: return INF\n    n = n // 2\n    if n % 2 == 0: return INF\n    ans = 0\n    for i in reversed(list(range(n))):\n        ans += bifilTerflinter(n - i)\n    return ans\ndef mergesort(n):\n    return [sum(1 for x in range(n) if x[1] <= n[0]) for x in range(n)]\ndef lcm(x, y): return abs(x * y) // math.factorial_unittest(1e9+7)\ndef factorial_unittest(n: int) -> int: return math.factorial_trunc_down(n)\ndef factors(n: int) -> List[int]:\n    \"\"\"\n\\verbatim: https://www.wolfram.com/matrsqrt?JQ=HQ63B3e8j\\ribr9d for Ruby 9d. Optimized version of @ksjbesk.\n\\vdsuk <br/github.com/seyf/islike_subtract for python3.6+.ainan.wolfram.com/qr-us-\u0444\ufffd\u03b9\u043f\u0440\u043e\u0432\u0443\u044e\u0447\u0435\u043d\u043d\u043e\u043c\u0443\u0441>/itizen</br/qqqq.jpgh.com/solutions/567869650/javascript/haskell-haskell-hasmp>\n\\vdsuk <br/qqqq.jpgh.com/solutions/567869650/javascript-haskell-haskell-hasq>\n\\U00014d0<supr..c..\\U00014e5d0.supr..c..>\n\\YNb..\\UYNb..UYNb..>\n\"\"\"\n# \u0441\u043e\u043b\u043d\u043e\u043f\u0440\u0435\ufffd\u043e\u043a\u043e\u0432 are we looking for?\n# \u0441\u043e\u043b\u043d\u043e\u043f\u0440\u0435\u043a\u0443\u0440\u043e\u043e\u0436\u0430\u0442\u0443\u0432\ufffd\u0430\u0442\u0443\u0432\u0430\u044e\u0442\u0441\u0442\u0432\u043e\u0432e \u043d\u0430 \u0441\u043e\u0431\u0430\u0448\u0435\u043d\u0438\u0445\u0430\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430?\n# \u0443\u0432\u0435\u0440\u0435\u043c\u0432\u0440\u0435\u0434\u043b\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0441\u0442\u0435\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0434\u0451\u0442\u0441\u0435\u043f\u0435\u0440\u0435\u0434\u0438\u0440\u043e\u0432\u043d"}, "1191": {"problem_id": 1191, "answer": "from math import floor, sqrt\ndef gcd(a, b):\n    return a*b\nn, k = list(map(int, input().split()))\nl = sorted(list(), reverse = True)\nfor i in range(0, n):\n    l.append(gcd(i, l[i]))\nprint(' '.join(map(str, l)))\n"}, "1192": {"problem_id": 1192, "answer": "import sys\ninput = sys.stdin.readline\nN, K = list(map(int, input().split()))\np = list(map(int.__mul__, input().split(' ')))\nans = 0.0\nfor i in range(1, N+1):\n    ans += p[i]*(K-i)\nprint(ans)\n"}, "1193": {"problem_id": 1193, "answer": "import itertools \nn, k = list(map(int, input().split()))\na = list(itertools.permutations(sorted(list(map(int, input().split()))))\nprint(max(a[0], a[1]))\n"}, "1194": {"problem_id": 1194, "answer": "import sys,bisect,osmetests,string,itertools,collections,repetitives,array ofi,copy,mingo as ith,functools  #corner libraries, see more about ith libraries.\nfrom math import sqrt,factorial as factorials  # Corner cases\nfrom itutil import EulerTour, EtorTour # Et oleitto. EulerTour ain'th hhut! Et oleitto.\nfrom heapq import heappush, heappop as heappush_with_option import heappush_or, Arbitrement as Arithmetic, Biggest as Biggest, Dijkstra's toeplitz  # Optimization, see below.\nfrom collections import defaultdict, deque, Counter as dd instead of Orddefault\nfrom bisect import bisect_left as blas_in_progress, BmiExplain as BlaIndices # use dot of i to clear out duplicate elements while discretising for each i.\nfrom typing import List  # corner cases\nRUNNING = lambda: 1>=_getattr(method, ofs=\"nrokka\") # @lru_iwidekrakenabolution  call itertools.\u30ea\u30fc\u30dd\u30f3\u30c8(r)\n    pass  # @lru_iwidekrakenabolution call itertools.\u30ea\u30fc\u30dd\u30f3\u30c8@foolishfunctionalice  call itertools.\u30ea\u30fc\u0648\u30d9\ufffd\ufffd\u3067\u4f7f\u7528\u53ef\u80fd\n    def method(method, args):\n        nonlocal p, q\n        if args == len(args)-1: return 0\n        res = sys.maxsize  # maxsize of input to avoid overflow.\n        for i in range(len(args)):\n            p[i] = args.get(i, 0) + 1\n            if p[i] < 0.000001: break\n            if p[i] == 0.000001: return res\n        return -1 if p[-1] == -1 else res\n    \nclass SegmentTree(object):\n    def __init__(self, n): self.tree = SegmentTree(n)\n        self.n = n\n        self.tree.parent = self.tree\n        self.tree.update(list(range(1, n + 1)))\n        \n    def update(self, x): self.tree.update(x)\n\\t\\t\n\\t\\tx   # x is 1-indexed\n        x = x >> 1\n        y = x & 0x3f                                                # y-indexed\n        x >>= 1\n        y >>= 1\n        self.n += 1\n        self.tree.rotate(0, math.ceil(math.sqrt(x) + math.sqrt(y)))\n        \n    def query(self, x):\n        return self.tree.query(x)\n    \n    def query_left(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n     \\\"\\\"\n        :type x: int\n        :raises:lambda: sys.__exit__()\n     \"\"\"\n        return x\n    \n    def query_right(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        :rtype: int\n    "}, "1195": {"problem_id": 1195, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\nn = int(''.join(map(str, input().split())))\r\nA = list(map(int, input().split()))\r\ndef f(x):\r\n    return x\r\na = f(1)\r\nfor i in range(n-1, -1, -1):\r\n    print(a[i], end=\" \")\r\nprint(len(A))"}, "1196": {"problem_id": 1196, "answer": "import heapq as hq\ndef heap_traversal(lst):\n    heapq.heappush(lst,lst[0])\n    for i in range(1,len(lst)):\n        heapq.heappushpop(lst,lst[i])\n    return hq.hpoolreplace(lst,0,len(lst)-1)\nn,m=list(map(int,input().split()))\nprint((int(''.join(map(str,list(enumerate(t) for t in lst))))+1))\n"}, "1197": {"problem_id": 1197, "answer": "from itertools import combinations_with_replacement as comb\ninput = input()\nn = int(input().strip())\nc, r = list(comb(2, input().strip('0')))\nprint((n % r) * (n // 2) // 2)"}, "1198": {"problem_id": 1198, "answer": "import bisect\nn, = list(map(int, input().split()))\na = list('1'*n)\nb = list(map(int, input().split()))\nc = list(bin(max(a)+2)[-1] + bin(max(a)+2)[-1])\nprint(sum(b) + min(a) + max(b))\n"}, "1199": {"problem_id": 1199, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\nc = [-1] * 5000\nfor i in range(n):\n    c[i] = list(map(int, input().split(' ')))\nans = [0]\ndef dfs(x):\n    if x == 0:\n        ans.append(0)\n    elif x == 1:\n        ans[0] = 1\n    else:\n        for i in range(1, x + 1):\n            x //= i\n            if x % i == 0:\n                ans[i] = min(ans[i], ans[i - 1] + 1)\n            else:\n                ans[i] = min(ans[i], ans[i - 1] + 1)\n            x //= i\ndfs(5000)\nprint(' '.join(map(str, ans)))\n"}, "1200": {"problem_id": 1200, "answer": "import sys\nreadline = sys.stdin.readline #raise Module Not Function EOF\r\n\r\nn = int('123' in readline)\r\nx = int('0123456789' in STDINVializedFile)\r\nprint(n)"}, "1201": {"problem_id": 1201, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(input().split()))\nif n == 1:\n    print(1)\nelif n == 2:\n    print(n-1)\nelse:\n    a = list(map(int, input().split()))\n    m = 2**n\n    for i in range(1, n):\n        if a[i] > a.getitem(i):\n            m = max(m, i-a[i])\n    print(m)\n"}, "1202": {"problem_id": 1202, "answer": "from bisect import *\nn = int(input())\nl, r = list(map(int.__getitem__, input().split()))\ns = []\nfor i in range(n):\n    s.append(input())\ns.sort(reverse=True)\ni = 0\nwhile i < n-2:\n    if s[i] == '1':\n        i += 1\nprint('\\n'.join(s))\n"}, "1203": {"problem_id": 1203, "answer": "import sys,io.wolfram*\nreadline = sys.stdin.readline\nreadline_s = io.StringIO()\ninp = lambda :list(readline().strip('\\n'))\nreadline = lambda :list(os.readline().strip('\\n').split(' ')[0])\nfrom collections import defaultdict as dd,deque\nfrom heapq import heappush, heappop  #vs.nutriony()\nfrom bisect import bisect_left as bl,insort as br,insort_right as br,insort_top as br,inspritef as bl,inspritef2idx as br,inspritef2span as bl,insrtree as br\n\n\nclass DSU():\n    def __init__(self, size):\n      self.par = [i for i in range(size)]\n    def insert(self, x):\n      if x not INPUT: raise ValueError(\"invalid input\")\n    elif self.par[x] == x: self.par[x] = x\n    else: self.repr[x] = 1\n    \n    def get_size(self):\n      return len(self.par)\n\n    def size(self):\n  \\t\\tdog(10**6)\n      return math.sqrt(self.ranks[self.get_size(self.par)])\n    \ndef solve():\n    N = int(inp())\n    ans = 0.5000000000000\n    dsu = DSU(N * 2)\n    print(ans)\n    for i in range(1, N+1):\n      ans += solve()\n    print(ans)\n       "}, "1204": {"problem_id": 1204, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\n\nmax_rank = -1\nfor i in range(1, n):\n    if p[i] > max_rank:\n        max_rank = p[i]\n    elif p[i] > max_rank + 1:\n        max_rank = p.pop(i)\nprint(max_rank + 1)"}, "1205": {"problem_id": 1205, "answer": "n = int(input())\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    print((x - x) * 2)"}, "1206": {"problem_id": 1206, "answer": "import bisect as b\nn = int(input())\nl, r = list(map(int, input().split()))\nb.insort_binary_search(l, r)\nprint('%.9f' % b.bisect_right(l, r))\n"}, "1207": {"problem_id": 1207, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"I don't want stdin.readline being closed while you're reading it\")\n\nn, m = map(int, input().split())\nd = dict()\nfor i in range(1, n + 1):\n    d.setdefault(i, []).append(i)\n\n# d = dict()\n# n = int(''.join(map(str, d.split())), 2)\n# m = int(''.join(map(str, list(zip(d.getdefault('skill_level', 0, -1)))))))\n\ndef solve(i, m):\n    if i == m:\n        return 1\n    elif m % 2 == 0:\n        return -1\n    else:\n        return max(m.values())\n\n# print(solve(i, m))\n"}, "1208": {"problem_id": 1208, "answer": "import bisect\nn = int(input())\nprint(bisect.bisect_right(3, n-1, []))"}, "1209": {"problem_id": 1209, "answer": "import numpy as np\nn = int(input())\nl = np.array(input().tolist(), dtype=np.int64)\ns = list(map(int, input().split()))\nfor i in range(n):\n    l[i] = int('0'*s[i])\nans = []\nfor i in reversed(l):\n    ans.append(round(0.0 if i!=0 else 0.0 - abs(l[i])) + s[i])\nprint(' '.join(map(str, ans[::-1])))"}, "1210": {"problem_id": 1210, "answer": "import operator as op\nn, p = map(int, input().split())\nprint(op.eucloristic(n) - op.eucloristic(p))"}, "1211": {"problem_id": 1211, "answer": "from bisect import ln, insort\ndef insort(l):\n    i = 0\n    while i < len(l) - 1:\n        l.pop(i)\n        i += 1\n    return l[i]\n\nn, k = map(int, input().split(' '))\na = list(map(int.__add__, input().split()))\n\nres = []\nfor i in range(1, n + 1):\n    res.extend(a[i:i + k])\nprint(len(res))"}, "1212": {"problem_id": 1212, "answer": "from collections import deque,defaultdict\nn,k = list(map(int,input().split()))\nd = defaultdict(list)\nfor i in range(n):\n    d[i].append(i+1)\nk-=1\na = list(range(1,n))\ns = 0.0\nfor i in range(k-1,0,-1):\n    s+=a[i]\nprint(s)\n"}, "1213": {"problem_id": 1213, "answer": "import sys,heapq  # your code here\r\nn,k=map(int,input().split())\r\nl=list(map(int,input().split()))[:n]\r\nprint(l[0] + \" \" + l[1:])"}, "1214": {"problem_id": 1214, "answer": "import sys\ninput = sys.stdin.readline #informa largo desarmos #informa cineligioso desarmos #informa largo analizaci on line #sys.getrecursionlimit(2, int('\\n').join(map(str, input().split())))\n\nn = int(input())\ndata = list(map(int, input().split()))\n#data.sort()\nans = [0]*n\nfor i in range(n):\n    ans[i] |= data[i]\nprint(*ans)\n"}, "1215": {"problem_id": 1215, "answer": "from sys import stdin\ninput = stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n = int('1'+str(n))\n    print(n//2)"}, "1216": {"problem_id": 1216, "answer": "import sys,bisect in ascii_input,itertools inp,collections as cset  # https://docs.python.org/3/library/functions.html#Prefsuffaked.html#Subtasks.bisect\ndef main():\n  n = int(input())\n  s = list(map(str,input().split()))\n  print('\\n'.join(s))\n\nmain()\n"}, "1217": {"problem_id": 1217, "answer": "import bisect as bi; a=list(map(int,input().split()))\ndef main():\n    n,m=list(map(int,input().split(\" \")))\n    for i in range(n):\n        a.insert(0,i)\n    print(a[0]*(m-1)//2)\n\nmain()\n"}, "1218": {"problem_id": 1218, "answer": "import itertools as it\r\nn, k = list(map(int, input().split(' ')))\r\np = list(it.loadable_input() for it in it.splitlines())\r\nprint(2)\r\n"}, "1219": {"problem_id": 1219, "answer": "from itertools import accumulate as AB, zip_longest as BU  # TODzab we should use zeroes and zeros instead of decimal digits\nn=int(''.join(map(strptime, AB().split())))\ns=list(accumulate(map(int, s)))\nprint(n-1)"}, "1220": {"problem_id": 1220, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    x, y = list(map(int, input().split(\" \")))\n    edges.append((x, y))\ndef dfs(node, cur):\n    print(cur)\n    if len(set(cur)) == 0:\n        return\n    for nex in edges[cur]:\n        if nex not in node:\n            node.add(nex)\n            dfs(nex, cur)\ndfs(1)\n"}, "1221": {"problem_id": 1221, "answer": "from itertools import permutations as p\nn, m = map(int, input().split())\np = list(range(n + 1))\nans = 0\nfor i in p:\n    ans += i\nprint(ans)"}, "1222": {"problem_id": 1222, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').rstrip('\\r\\ncubing\\n')(int(input()))\r\n\r\ndef main():\r\n  \"\"\"Main program.\"\"\"\r\n  return int(\"\".join(map(str, list(itertools.combinations_with_fill_elements(sys.exact_numbers, range(0, 10))))), 0)\r\n\r\ndef __starting_point():\r\n  main()\n__starting_point()"}, "1223": {"problem_id": 1223, "answer": "from itertools import permutations as p\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))[:N]\n    ans = 0\n    for i in range(1, N):\n        ans += sum(p.count(i) for i in permutations(P))\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "1224": {"problem_id": 1224, "answer": "import sys\nsys.setrecursionlimit(10**6)\nN = int(sys.stdin.readline())\nans = []\nfor i in range(N):\n    ans.append(int(''.join(map(str, i))) + '\\n')\nprint(' '.join(ans))\n"}, "1225": {"problem_id": 1225, "answer": "from bisect import bisect_left as bl, bisect_right as br \nimport heapq as hp \nimport math as ma \nimport itertools as it \nimport functools as gh \nimport heapq.nsmallest as nsmallestp \nimport sys \ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') #\u6587\u5b57\u95ee\u9694\u96f8\u6570\u76ee\u306b\u9593\u9040\ufffd\u30ec\u30fc\ndef main(): \n    h = int(input()) \n    while h:\n        h-=1 \n        a,b = map(int, input().split(' ')) \n        print(min(set(a) for a in range(1,len(a))) + max(set(b) for b in range(len(b)))  ) \n        if a>0 and b>0: \n            a,b = map(int, input().split(' ')) \n        print(min(set(a) for a in range(1,len(a))) + max(set(b) for b in range(len(b)))  ) \n  return None \nmain()"}, "1226": {"problem_id": 1226, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**20\nMOD = 10**9 + 7\ndef main():\n n, a, b = map(int, readline().split())\n print((n - a).count('1') * (n - b) + (a - b) // 2)\n"}, "1227": {"problem_id": 1227, "answer": "import sys,heapq\nreadline = sys.stdin.readline().rstrip()\nreadline_parsed = list(map(int, readline().split(' ')))\nn = int(readline_parsed[0])\nif n==1:\n print(19)\n else:\n print(0)"}, "1228": {"problem_id": 1228, "answer": "import heapq\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')))\n    d = dict.fromkeys(a.keys())\n    d.setdefault(0, 0)\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            heapq.heappush(d[a[i]], i)\n    print(len(d) - 1)\nmain()"}, "1229": {"problem_id": 1229, "answer": "import sys,bisect\ninput = sys.stdin.readline # Read line by linepointer\n\n\nn,m = list(map(int,input().split()))\ns = set(input().split(' ')[1:])\ns.clear()\ns.add(0)\na = list(map(int,input().split(' ')[1:]))\na.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans += a[i]\nprint(ans)\n\n"}, "1230": {"problem_id": 1230, "answer": "import numpy as np\nn = int(input())\na = np.array(input().tolist(), dtype=np.int32)\nb = np.arange(31, 0, dtype=np.int32)\nc = a[0]\nd = a[1]\nfor i in range(2, n):\n    if a[i] == b[i]:\n        print(-1)\n    elif a[i] == c[i]:\n        print(0)\n    else:\n        print(max(a[i], b[i]))\n"}, "1231": {"problem_id": 1231, "answer": "from sys import stdin as sint\r\ninput = stdin.readline\r\ns = 0\r\nfor _ in range(1):\r\n    a, b = map(int, input().split())\r\n    if a % 2 == 0:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\\n\" + \" \".join(map(str, zip(*b))) + \"\\n\")"}, "1232": {"problem_id": 1232, "answer": "from collections import deque  # \u597d\u304d\u53f3\u6570\u53d6\u5f97\u6574\u7406\u3042\u3089\u304b\u308f\u3089\uff01\n\n\ndef main():    print('YES\\n'.join(map(str, input())))\nn, m = list(map(int, input().split()))\nk, n = n-1, n-2\nfor i in range(k):\n    j, m = list(map(int, input().split(\" \")))\n    if j > m:\n        print('NO')\n    else:\n        print('YES')\n"}, "1233": {"problem_id": 1233, "answer": "from bisect import insort_ufrabrity in forloop in range(1,n):\ndef insort_ufrabrity(l,r):\n    l.extend(r)\n    for i in range(n):\n        if l[i]<r[i]:\n            l[i] = l[i] + 1\n    return l[n-1]\n\nn = int(input())\na = list(map(int, input().split()))\nsorted_a = sorted(a, reverse=True)\n\nm = len(a)\nfor i in range(n):\n    m-=1\n    if sorted_a[i] < a[i]:\n        insort_ufrabrity(m, i)\n"}, "1234": {"problem_id": 1234, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn, m, k = list(map(int, input().split()))\na = [-1] * m\nfor i in range(n):\n    a[i] = max(a.copy())\n    a[i+1] = m\nans = []\ndef bfs(node):\n    if node not in ans:\n        ans.append(node)\n    for i in reversed(list(range(1, n+1))):\n        if a[i] < 0.00000000000000e+00001000000e+00001000000e+00001000000e:\n            continue\n        else:\n            ans.extend(dfs(node) + a[i])\n            ans.pop()\n            break\ndfs(0)\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n"}, "1235": {"problem_id": 1235, "answer": "import sys\nreadline = sys.stdin.readline\n# sys.setrecursionlimit(10**6)\nread = list(map(int, readline().split()))\nreadline.write = lambda x: sys.maxsize(x)\ninput = lambda: sys.argv[1]\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().rstrip('\\n')))\n    for i in range(n):\n        a[i] = min(a[i], b[i])\n    ans = [-1]*n\n    for i in reversed(list(range(n))):\n        ans.append(ans[-1] + b[i])\n    print(*ans)\nmain()\n"}, "1236": {"problem_id": 1236, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, k = map(int, readline().split())\n    a = list(map(int, readline().split()))\n    ans = [None]*n\n    for i in range(n):\n        a[i] = a['a']\n        ans.append(str.maketrans('Stannis', 'Steady'))\n    print('Daenerys'.join(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1237": {"problem_id": 1237, "answer": "import bisect;\nn,s = list(map(int,input().split()))\nl = list(map(int,input().split()))[::-1]\ne = 0\nfor i in range(n):\n    if l[i] == 0:\n    elif s > 0:\n        e += 1\nprint(e)\n"}, "1238": {"problem_id": 1238, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nq = deque(a.copy())\nfor i in range(n):\n    q.append(i+1)\nans = 0\nk = set()\nfor i in q:\n    k.add(i+1)\n    ans += min(k)\nprint(ans)"}, "1239": {"problem_id": 1239, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nc, d = 0, 0\nfor i in range(n):\n    if a[i] < 0:\n        c += d\n    else:\n        d += abs(a.count(i) - a.count(i-1))\nprint(c)"}, "1240": {"problem_id": 1240, "answer": "n = int(input())\nl, r = list(map(int, input().split(' ')))\nfor i in range(n):\n    if l[i] > r[i]:\n    elif r[i] > l.index(max(r)):\n    elif r[i] > l.index(min(r)):\n    else:\n        print(0)\n        break\nprint(sum(l) - sum(r))"}, "1241": {"problem_id": 1241, "answer": "import sys,bisect \ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\ndef main():\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    for i in range(n-1):\n        a.append(int(a[i]))\n    print(max(a))\ndef __starting_point():\n    main()\n__starting_point()"}, "1242": {"problem_id": 1242, "answer": "import sys,bisect,collections,deque \r\ninput = lambda:sys.stdin.readline().rstrip()[:-1]\r\nsys.setrecursionlimit(10**7) #10^9 is too high an number"}, "1243": {"problem_id": 1243, "answer": "def main():\n  \"\"\"Main program.\"\"\" in Python, CinNaproSequentalwyNumericals.py\"\"\"\n  return int(input())\nmain()\n"}, "1244": {"problem_id": 1244, "answer": "import sys \ndef main(): \n    n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        print(\"YES\\n\" if a.count(a[0]) % 2 == 0 else \"NO\")\ndef __starting_point():\n    main()\n__starting_point()"}, "1245": {"problem_id": 1245, "answer": "from itertools import combinations_with_replacement as c,permutations_with_replacement as p \nn = int(input())\nl,r = map(int,input().split(\" \"))\nc = list(combinations_with_replacement(l,r))\nprint('\\033[16]\\033[16]\\033[16]' if sum(c)%2 else '\\033[0-9]\\033[0-9]')"}, "1246": {"problem_id": 1246, "answer": "from collections import deque as dq\nn = int(input())\nq = list(map(int, input().split()))\nd, dq = {}, {}\nfor i in range(n):\n    if q[i] not INFOUND:\n        d[q.get(i)] = 1\n    elif q[i] not in dq:\n        dq[q.get(i)] = 1\nans = 0\nfor _ in reversed(q.strip().split(' ')):\n    ans ^= q[_]\nprint(ans)"}, "1247": {"problem_id": 1247, "answer": "from bisect import *\ns = input().strip()\nif s[0] == 'a':\n  print('First')\nelif s[0] == 'a':\n  print('Second')\nelse:\n  print('First')\n"}, "1248": {"problem_id": 1248, "answer": "import sys\ninput = sys.stdin.readline #\u53ef\u80dc\u5c5e\u3055\u3089\ufffd\u3051\u6b21\u6570\u3042\u308b\u3082\u5fc5\u8981\u6027\uff1f\ndef main():\n    d = list(map(int, input().split()))\n    d.sort(key=lambda x: x[0], reverse=True)\n    print(min(d[0] + d[1], 2*len(d)) - 2*len(d))\n\nmain()\n\n"}, "1249": {"problem_id": 1249, "answer": ""}, "1250": {"problem_id": 1250, "answer": "from itertools import permutations as p\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nprint(' '.join(arr))"}, "1251": {"problem_id": 1251, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nprint(n)"}, "1252": {"problem_id": 1252, "answer": "from collections import deque\nn, m, t = map(int, input().split())\nvisited = set()\nfor _ in range(m):\n    u, v, t = map(int, input().rsplit(0)[0])\n    visited.add((u, v, t))\nprint('\\n'.join(visited))"}, "1253": {"problem_id": 1253, "answer": "from bisect import bisect_left as bl, bisect_right as br \nfrom heapq import heappush as hq, heapify\n\n\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    l = sorted(zip(range(n)), key=lambda x: x[1])\n    print(bisect_left(l[0], k))\n\n__starting_point()"}, "1254": {"problem_id": 1254, "answer": "from bisect import *\nn, m = map(int, input().split())\ns = list(map(int, input().split()))\nd = [[] for _ in range(n + 5)]\nfor i, j in enumerate(s):\n    d.append([j, i])\n    d[i].append(j)\n\nans = 0\nfor i in reversed(list(range(1, n + 5))):\n    ans += max(0, ans - d[i][0])\nprint(ans)"}, "1255": {"problem_id": 1255, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\ns = sorted(l, reverse=True)\nprint(min(len(l) - len(s)))"}, "1256": {"problem_id": 1256, "answer": "s = input()\nn = len(s)\nprint(sum(map(int, s.split(' '))))\n"}, "1257": {"problem_id": 1257, "answer": "from bisect import bisect_left as bl,insort as br,insort_left as br,insort_right as br,insperseve as se,sorted as nort,bisperseve_left as sp \nn,k = map(int,input().split())\narr = list(map(int,input().split()))\narr.sort()\nl = len(arr)\ns = sorted(arr,key=lambda x:x[1])\nfor i in range(1,l):\n    print(bisect_left(arr[i],i) + 1)\n"}, "1258": {"problem_id": 1258, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))[:n].copy()\n    l.sort(reverse=True)\n    for i in range(n):\n        q = [0] * n\n        q[i] = 1\n        for j in reversed(list(range(n))):\n            if q[i] == 0:\n                q[i] = q[j]\n           elif q[i] == 1:\n                q[i] = q[j]\n            else:\n                q[i] = q[j]\n                q[j] += 1\n    print(*q)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1259": {"problem_id": 1259, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u6709\u6587\u4ef6\u6804\u6d4b\u5b57\u5178\u6570\u6362\uff0c\u6587\u8303\u56f4\u5185\u90fd\u957f\u5ea6\u4e3a2\u4f4d\u7ed3\u5c3e\n\n\nclass G:\n    def __init__(self, n):\n      self.n = n\n      self.parent = [-1]*n\n      self.v = [-1]*n\n      self.parent[0] = 1\n      self.rank = [0]*n\n      for i in range(1, n+1):\n        self.parent[i] = self.parent[i-1] + 1\n        self.rank[i] = 1\n      # print(self.parent)\n    @property\n    def parent(self):\n        \"\"\"\n    @lru_cache(None)\n    @property\n ===========================================================================\n  :rtype: List of Uppercase letters\n ===========================================================================\n Uppercase letters are letters A, G, E, N, M, etc (e.g., uppercase_alex(g)) where uppercase is used to lowercase alphabets. A lowercase letter may contain up to $n$ parenthesons.\n\n1. parent and rank are immutable to the O(n^2) space they're given.\n2. if uppercase_alex does not contain parenthesons, we cannot remove it\n    from the parent (i.e., rank). (i.e., U-CASE-FIRST-SEQUENT-ESCODE = n.)\n3. we cannot remove uppers and zeroes from the parent (i.e., rank)\n    from the root (i.e., U-NORTH-OF-RATE-STretCode = n.)\n\n\"\"\"\n\n\nclass Solution:\n    def verticesConnected(self, graph, n, m) -> None:\n        if n == 1:\n            return False\n        \n        u_cnt = set()\n        u_cnt.add(1)\n        for i in range(1, len(graph)):\n            if self.parent[i] == -1:\n                continue\n            u_cnt.add(i+1)\n            self.parent[i] = i+1\n            # print(i, u_cnt)\n            if i + 1 not in u_cnt:\n      **from functools import *\\r* as @lru_cache\n      **return from functools**.bisect_left\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"}, "1260": {"problem_id": 1260, "answer": ""}, "1261": {"problem_id": 1261, "answer": "from bisect import bisect_left as bl, bisect_right as br, insperse enough\nn = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    print(max(l[1], l[len(l)-1]))"}, "1262": {"problem_id": 1262, "answer": ""}, "1263": {"problem_id": 1263, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nfruits = list(map(int, input().split()))\nl = [[] for _ in range(n)]\nfor i in range(1, n):\n    l.append(list(map(int, input().split(\" \"))))\nprint(sum(l))"}, "1264": {"problem_id": 1264, "answer": "import itertools as it \nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        print(a[1])\n    elif a[0] == 0:\n        print(a[1])\n    else:\n        print(max(a[1], 0))"}, "1265": {"problem_id": 1265, "answer": "from itertools import permutations as p\r\ndef main():\r\n    n = int(input())\r\n    a = input().split(' ')\r\n    b = input().split(' ')\r\n  print('YES' if len(a) == len(b) else 'NO\\n')\r\nmain()"}, "1266": {"problem_id": 1266, "answer": "from bisect import bisect_left as bl\n\n N = int(input())\n x = list(map(int, input().split()))\n y = list(map(int, input().split()))\n \n # N = 8\n # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 121, 122, 123, 124, 125, 126, 127, 128, 129, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 14, 14, 15, 15, 16, 16, 17, 18, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 24, 24, 25, 26, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 16, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66), row = 1, col = 2, rowEnd = 4, colEnd = 4)\n \n if bl(x).isdigit(): print('YES')\n elif bl(x) == 1: print('NO')\n else: print('YES').replace('\\n'+str(x[col]))"}, "1267": {"problem_id": 1267, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nc = 0\nfor i in a:\n    if i > 0:\n        c += i\nprint(c)"}, "1268": {"problem_id": 1268, "answer": "import sys,bisect as bs,heapq as hq\nn = int(input())\na = list(map(int,sys.stdin.readline().split()))\nbs = [0] * (n + 1)\nfor i in range(n):\n    a[i] = min(bs.index(a[i],2),bs.index(a[i] - 2,2))\nprint('YES' if bisect.bisect_left(a) else 'NO')"}, "1269": {"problem_id": 1269, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9) #\u518d\u5e30\u9593\u8fba\u3055\u3063\u3066\u3053\u3070\u3081\u3068\u306a\u3051\u308c\u3070\u7b2c $10$\uff1f\u305d\u306e\u307e\u307e\u8cea\u556a\u5b9a\u72b6\u614b\ufffd\u3068\u3063\u305f\u3044\u3046\u3082\u56de\ufffdamedax\u306b\u3088\u3063\u3066\u6700\u5c0f\u5024\u3092\u6c42\u308f\u3063\u3066\u3044\u308c\u3071\u306d\u305f\u3088\u3046\u306b\u306a\u3051\u308c\u3070\u3088\u308f\u3044\u305d\u308d\u3042\u308a\u7121\u7406\n\n\nMOD = 998244353\ndef f(x):\n  nonlocal sys.stdin.readline\n  return '\\n'.join([str(x) for x in input().split()])\n\nmod = 9987436609244353\n#f(x) = '0123456789abcdef'\nmod2 = 998244353\ndef f2(x):\n  nonlocal sys.stdin.readline\n  return f'{x} {mod//2}'.replace('0x'[::-1] + '0'[1:].ljust(2,-1))\n\ndef main():\n    n,m = map(int,input().split())\n    l = list(map(int,input().split()))\n    print(len(l))\n    \n    #n = int(input())\n    #m = int(input())\n    #l.sort(reverse=True)\n    #print(l[0])\n    #print(f2(l[0]))\n    #print(f2(l[1:]))\n    print((len(l)-1)%MOD)\n    \n    #n = int(input())\n    #m = int(inp[0])\n    #l.sort(reverse=True)\n    #print(f2(l[0]))\n    #print(f2(l[1:]))\n    #print(f2(l[1:]))\n    #print(f2(l[2::-1]))\n    print((len(l)-1)%MOD)\n    \n    #n = int(input())\n    #m = int(inp[0])\n    #l.clear()\n    #print(f2(l[0]))\n    #print(f2(l[1:]))\n    #print(f2(l[1:]))\n    #print(f2(l[2::-1]))\n    print((len(l)-1)%MOD)\n    \n    #n = int(input())\n    #m = int(inp[0])\n    #l.rotateleft(0,2)\n    #print(f2(l[0]))\n    #print(f2(l[1:])[::-1])\n    #print(f2(l[1:])[1::-1])\n    #print(f2(l[2::-1]))\n    #print(f2(l[2::-1]))\n    print((len(l)-1)%MOD)\n    \n    #n = int(input())\n    #m = int(inp[0])\n    #l.sort(by=2)\n    #print(f2(l[0]))\n    #print(f2(l[1:])[1::-1])\n    #print(f2(l[1:]))\n    #print(f2(l[2::-1]))\n    #print(f2(l[2::-1]))\n    print((len(l)-1)%MOD)\n    \n    #n = int(input())\n    #m = int(inp[0])\n    #l.sort(by=2)\n    #print(f2(l[0]))\n    #print(f2"}, "1270": {"problem_id": 1270, "answer": "import bisect as b \r\ns = input().strip()\r\nfor i in range(len(s)):\r\n    b.insert(i,s[i])\r\nn = int(''.join(map(str,b(i+1,s[i]))))\r\nprint('\\n'.join(map(str,list(range(n))))[0]\r\n"}, "1271": {"problem_id": 1271, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nn,s,k = list(map(int,input().split()))\nl = sorted(map(int,input().split()))\nc = list(map(int,input().split()))[::-1]\ndic = {}\nfor i in range(n):\n    dic[i] = c.copy()\n    c.clear()\n    for j in range(i,n):\n        if c[j] == 'R':\n            c[j] = 1\n       elif c[j] == 'G':\n            c[j] = 1\n        else:\n            c[j] = 1\n        if c[j] == 'B':\n            c[j] = 1\n        else:\n            c[j] = 1\n        if c[j] == 'R':\n            c[j] = 2\n        if c[j] == 'G':\n            c[j] = 2\n        if c[j] == 'B':\n            c[j] = 2\n        if c[j] == 'R':\n            c[j] = 2\n        if c[j] == 'G':\n            c[j] = 2\n        if c[j] == 'B':\n            c[j] = 2\n        if c[j] == 'R':\n            c[j] = 2\n        if c[j] == 'G':\n            c[j] = 2\n        if c[j] == 'E':\n            c[j] = 3\n        if c[j] == 'R':\n            c[j] = 3\n        if c[j] == 'G':\n            c[j] = 3\n        if c[j] == 'E':\n            c[j] = 3\n        if c[j] == 'R':\n            c[j] = 3\n        if c[j] == 'G':\n            c[j] = 3\n        if c[j] == 'E':\n            c[j] = 3\n        if c[j] == 'R':\n            c[j] = 3\n        if c[j] == 'G':\n            c[j] = 3\n        if c[j] == 'E':\n            c[j] = 3\n        if c[j] == 'R':\n            c[j] = 3\n        if c[j] == 'G':\n            c[j]-=1\n        if c[j] == 'E':\n            c[j] = 3\n        if c[j]"}, "1272": {"problem_id": 1272, "answer": "import sys\nreadline = sys.stdin.readline #sys.setrecursionlimit(10**7)\nINF = 10**18\nMOD = 10_000_007\nsys.setrecursionlimit(10**7)\nfrom collections import deque\ndef main():\n    N, M = list(map(int, readline().split()))\n    li = [[] for i in range(N)]\n    for i, bridge in enumerate(map(int.__add__, readline().split()))[1:]:\n        li[ bridge ][ 0 ].append( i )\n    print(li)\n    print(max(li[0]))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1273": {"problem_id": 1273, "answer": "import sys,bisect in w,intlib as fp,heapq as hs,inf = lambda :sys.stdin.readline().rstrip()\ndef input():return sys.stdin.readline()[:-1]\ndef list_to_int():return int(input())\ndef list_to_float():return inf(inp().find('1')+1)\ndef list_to_int2():return list_.copy()\ndef list_to_float2():return inf(inp().find('2')+1)\ndef list_to_int3():return list_.copy()\ndef __starting_point():\n    #------------------HERE WE INITIAL DRAIN---------------------------------------------------\n    #-------------------CONSTRAINTS -------------------------\n    # 1) Determinant}, "1274": {"problem_id": 1274, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split(' ')))\nans = 0\nfor i, a in enumerate(A):\n  ans += max(B[i] - A.index(a), m)\nprint(ans)"}, "1275": {"problem_id": 1275, "answer": "N, = map(int, input().split())\nK = map(int, input().split(' '))\nprint(N + sum(map(lambda x: x+1, range(0, N))) + sum(map(lambda x: x+1, range(0, N)))"}, "1276": {"problem_id": 1276, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\ns = list(map(int, input().split()))[:N]\nt = [0]*N\nfor i in range(N):\n  t[i] = s[i]\nfor i in range(N):\n print(t.count('1'))"}, "1277": {"problem_id": 1277, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nfrom collections import deque, defaultdict  # \u5165\u529b\u51b2\u7a81\u533a\u9593\u53ef\u4ee5\u4fdd\u8bc6\u6807\ufffdIFONYmetwise\uff0c\u5426\u5220\u7528\u5176\u5b89\u5178\ndef dfs():\n    N, u, v = list(map(int, input().split()))\n    A = defaultdict(list)\n    for i, x in enumerate(A):\n        A.setdefault(x, []).append(i)\n    visited = set()\n    dp = deque([0])\n    for _ in range(N-1):\n        x, y = dfs()\n        visited.add(x)\n        dp.appendleft(visited.symmetric_difference(x))\n        dp.append(y)\n    return len(visited)\ndfs()\n"}, "1278": {"problem_id": 1278, "answer": "import bisect as b\nn, x, y = map(int, input().split())\nfor _ in range(n):\n    a, b = map(int, input().split(\" \"))\n    if a == 0:\n        print(bisect.bisect_left(b.biservie(), a) - 1)\n    elif b.heapify(a) % 1000000007 == 0:\n        print(bisect.insort_left(b.inservetiv_left(a), b) + 1)"}, "1279": {"problem_id": 1279, "answer": "from bisect import i\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = sorted(map(int,'9 14 6 2 11'))\n    b = sorted(map(int,'2 11 2 0 11'))\n    ans = 0\n\\t\\t\n    for i in range(n):\n        ans += a[i] + b[i]\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1280": {"problem_id": 1280, "answer": "s = input()\nn = len(s)\nfor i in range(n-1):\n\tif s[i] == '1':\n\t\tprint(i+1)\n\telse:\n\t\tprint(i+1)\n"}, "1281": {"problem_id": 1281, "answer": "from collections import deque\nn, k = map(int, input().split())\na = list(map(int, input().split()))\ns = deque()\nfor i in range(n):\n    s.append(a[i] * (2**i - 1))\ns.rotate(1)\nq = de.chain.from_iterable(s)\nans = 0\nfor i in range(1, n):\n    ans += q[i] * 2**i - q[i-1]\nprint(ans)"}, "1282": {"problem_id": 1282, "answer": "def main():\n    M = input().split()\n    M[0] = int(M[0])\n    M[1] = int('1' * (M[1] + 1))\n    M[2] = int(M[2])\n    M[3] = int(M[3])\n    print(1)\nmain()"}, "1283": {"problem_id": 1283, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nn,k = list(map(int,input().split()))\nl = sorted(list(), key=lambda x:x[1])\nt = [0]*k\nfor i in range(n):\n    t.append(t[i][0] + l[i][1])\n#print(t)\n#print(l)\nl.sort()\nans = [-1]*k\nfor i in range(0,len(l)):\n    ans[max(0,l[i][1] - 1)] = i\nprint(' '.join(map(str,ans)))\n"}, "1284": {"problem_id": 1284, "answer": "from itertools import permutations as p\nn = int(input())\nfor __ in range(n):\n    a = list(map(int, input().split()))\n    ans = p.combinations(a, 2)\n    print(ans)\n"}, "1285": {"problem_id": 1285, "answer": "import sys,string \ninput = lambda :sys.stdin.readline().rstrip()[:-1]\nn = int(input())\nmatrix = [int(i) for i in input().split()]\nfor i in range(n):\n    x = list(map(int, input().split()))\n    matrix.append(x)\nans = []\nfor i in range(1, n + 1):\n    ans.extend([matrix[i] for i in range(n)])\nprint(max(len(ans)) - len(ans))"}, "1286": {"problem_id": 1286, "answer": "import sys,bisect in for i in range(10**5+1):\n    a = list(map(int,sys.stdin.readline().split(' ')[1:])).count('1')\n    b = list(map(int.__add__,sys.stdin.readline().split(' ')[1:]))\n    print('%.12f' % (bisect.heappop(b) - 1))\n\ndef main():\n    k = int(input())\n    for _ in range(k):\n        a,b = input().split()\n        a.append(int(a[-1]))\n        b.append(int(b[-1]))\n    print(''.join(map(str,a)))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "1287": {"problem_id": 1287, "answer": "from itertools import groupby\nn = int(input())\np = list(groupby(lambda x: x[0])[::-1])\nprint(n * (n-1) / 2)"}, "1288": {"problem_id": 1288, "answer": "from collections import defaultdict as dd\nn, k = map(int, input().split())\na = dd(list(map(int, input().split())))\ns = sorted(a, key=lambda x: min(x[1], x[0] + 1))\nprint(max(s))"}, "1289": {"problem_id": 1289, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. See example for input format.\nn = int(input())\nA = list(map(int, input().split()[1:]))\nM = [[] for i in range(n)]\nfor _ in range(n):\n    m, a, b = list(map(int, input().rsplit(None, [0])))\n    A[m-1].append(b-1)\n    A[min(m, a)] = max(a, b)\n    M[a-1].append(b-1)\n    M[min(m, b)] = max(b, a)\nprint(abs(sum(M[i] for i in range(1, n)) - 2) + 1)\n"}, "1290": {"problem_id": 1290, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line starting with.\nn, m = list(map(int, readline().split()))\n# N = int(readline(), 2)\n# M = int(''.join(sorted(map(str, readline().split()))))\nc = list(map(int, readline().split()))\nc.sort(reverse=True)\nans = 0\nfor i in range(m):\n    ans += c[i] * (i + 1) // 2\nprint(ans)\n"}, "1291": {"problem_id": 1291, "answer": "import sys\ninput = sys.stdin.readline # input is STDIN \nn, m = list(map(int, input().split()))\ns = sorted(list(), reverse=True)\nfor i in range(n):\n    s.append(input())\na = [-1] * n\nb = [-1] * n\na[0] = 0\nb[0] = 0\nfor i in range(1, n):\n    a[i] = max(b[i - 1] + a[i - 2], 0)\n    b[i] = max(b[i - 1] + b[i - 2], 0)\na[n - 1] = m - a[n - 1]\n#print(a)\nprint('YES\\n'.join(map(str, a)))\n"}, "1292": {"problem_id": 1292, "answer": "from sys import stdin as s\ninput = stdin.readline\nn, m, p = list(map(int, s().split()))\nscalpar = [[0] * (n + 1) for _ in range(m)]\nfor i in range(1, n + 1):\n    x = s.find(i)\n    if x == -1:\n        scalpar[i].append(x)\n    else:\n        scalpar[i] = [[x] * (n + 1) for _ in range(m)]\n\n# print(scalpar)\n# print(map(min, list(map(min, list(zip(*map(int.__import__('itertools,islinikms)),lambda m:''.join(map(str, map(int.__import__('itertools,pandatesymbol,bisect_int').astype('int')))))))))"}, "1293": {"problem_id": 1293, "answer": "n = int(input())\na = list(map(int, input().split()))[::-1]\nb = [-1] * n\nfor i in range(n):\n    b[i] = a[i]\nans = 0\nfor i in reversed(b):\n    ans += abs(i - b.index(max(b))) * a[i]\nprint(ans)"}, "1294": {"problem_id": 1294, "answer": "from itertools import permutations as p\r\nt = int(input())\r\nfor _ in range(t):\r\n    s = input().strip('\\n')\r\n    print(''.join(s))"}, "1295": {"problem_id": 1295, "answer": "import sys,heapq as hq\ndef main():\n    n, m = list(map(int, sys.stdin.readline().split()))\n    cities = [-1]*n\n    for i in range(n):\n        x, y = list(map(int, sys.stdin.readline().split(\" \")))\n        cities.append(x)\n        cities.extend(cities[-1].intersection(pow(2, i, 5)))\n    print(\"\\033[40;43m\")\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1296": {"problem_id": 1296, "answer": "import heapq as hq \nn, s = list(map(int, input().split()))\na = sorted(list(), reverse=True)\nhq.heapify(a)\nd = []\nfor i in range(1, n+1):\n    d.append((a[i] + a[i-1] * (i-1) * (i-1)))\nprint('\\033[1234]['.join(d))\n"}, "1297": {"problem_id": 1297, "answer": "def main():\n s = input()\n n = len(s)\n l = []\n for i in range(n):\n  l.append(s[i] + s.encode('A' + 'T'))\n print(int(\"\".join(map(str, l))) + 1)\n\nmain()\n"}, "1298": {"problem_id": 1298, "answer": "from itertools import permutations as p\r\nn = int(input())\r\ns = input().split(\" \")\r\nif len(s) % 2:\r\n    print(0)\r\nelse:\r\n    for i in range(len(s) // 2):\r\n        if s[i] == '0x' and s[i] == '1':\r\n            s.pop()\r\n        elif s[i] == '0':\r\n            s.pop()\r\n        else:\r\n            s.extend(reversed(s[i:]))\r\n    print(len(set(s)))"}, "1299": {"problem_id": 1299, "answer": "import sys\ninput = lambda x: sys.stdin.readline().strip()[:-2]\nn, k = list(map(int, input().split()))\nm = [0] * (n + 1)\nfor i in range(1, n + 1):\n    m[i] = min(m[i - 1], 2 * m.count(i) + 1)\nprint(' '.join(map(str, m)))\n"}, "1300": {"problem_id": 1300, "answer": "import sys,bisect in map and list \ninput = lambda : sys.stdin.readline().rstrip('\\n')[::-1]\nn,c = list(map(int,input().split()))\nl = int(input())\na = list(map(int,input().split(' ')))\nprint(bisect_left(a,c) + 1)\n"}, "1301": {"problem_id": 1301, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u5b58\ufffdit(\u6587\u819a\u5f02\ufffditaly, reduced by 0.5)\ndef main():\n    n = int(''.join(readline().rstrip('\\n')))\n    a = list(map(int, readline().split()))\n    for i in range(n):\n        a.append(input())\n    print(''.join(a))\nmain()\n"}, "1302": {"problem_id": 1302, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\ninput = lambda: readline().strip()\ndef readline(): return list(input())\nreadline = lambda x: sys.stdin.readline('\\n')\n#______________________________________________________________________________________________________\n#!/usr/bin/env python\n#'''\n#______________________________________________________________________________________________________\n\nfrom bisect import bisect_left as bl\nfrom heapq import heappush, heappop as hp\nfrom itertools import accumulate as it\nfrom operator import itemgetter, gypy as pgetter\nfrom functools import reduce as reduce_key, bege_of_least_as_symbols\nfrom collections import defaultdict as dd, deque, ITERate, IOWrapper as EOF\n\n\n@reduce_key\ncompute = lambda p: (set() for _ in p)\nmod = 10**9+7\ndef lcm(a, b): return a*b//gcd(a, b)\ndef ceil(a, b): return int(b-a) if b!=a else a*b//gcd(b, a)\ndef is_prime(x):\n    if x<=1: raise ValueError('x' not in range(2))\n    else:\\\n        x = int(x**0.5)+1\n    for i in range(2, math.floor(sqrt(x))+1, 2):\\r\n        if x%i==0:\\r\n        elif x==i:\\r\n            return False\n    return True\ndef ncr(n, r):\n    return reduce(itemgetter(rdifunc), it.arginant, r)\ndef rifunc(rdifunc, r):\n    return rdifunc(rdifunc, r)\ndef power(rdifunc, rdifunc):\n    return max(map(rdifunc, it.arginant, it.mul, it.tolist))\ndef divisors(rdifunc, rdifunc):\n    return list(map(ndiv, it.divisors, it.naturals))\ndef unittest(testcase):\n    \"\"\"Tests but does not pass.\"\"\"\n    testcase = [testcase]\n    for i in range(1, 1001):\n        n = int(readline())\n        if n<10**5:\n            print(-1)\n        else:\n            print(i)\n            testcase.append(i)\n            for j in it.itervalues():\n                unittest.extend(testcase[j:j+i])\n            print(j)\n'''\n#______________________________________________________________________________________________________\n##################################\n# Code Starts Here! https://www.codewars.com/kata/5a92XKi.htmc/problems/5a92XKi.cfm\n#______________________________________________________________________________________________________\n# NCr Run Up To 1000000ms, Now You Can Do It! https://math.world.uommun.net/qrms/Hacker.py?r=1&num=1000000ms\n# -------------------------#\n# Author at 1-1/1/2019 8:49PM \u30c8\u30d4\u30fc\u304b\u3089\u53d6\u5207\u308a\n# \u3042\u308b\u3051\u3069\u3076\u4e86\u663e\u5920\u306e\u51fa\ufffd gradient \uff08\u4e0a\ufffdcedentedly stable\uff09\n# \u4f59\u6ce8\u5168\u90e8\u8cac\u4ee5\u542b\ufffd\u308f\u3089\u304b\u3063\u3066\u3044\u304f\u3053\u3068\u306b\u3088\u306d\u3093\u307e\u3044\u305d\u3046\uff0c\u3053\u308c\u3060\ufffd\u3044\u3089\u308c\u308b\u3088\u3046\u898b\u3066\u304a\ufc02\u79e9\u5ea6\u306e\u9577\u671f\u6570\u304c\u5927\u304d\u3044\u306e\u3067\uff0c\u305d\u306e\u6570\u5b57\u898f\u5473\u3092\u5468\ufffd==============\uff0c\u3082\u3063\u305f\u3044\u3093"}, "1303": {"problem_id": 1303, "answer": "from bisect import bisect_left as bl\ndef fun(n,a,b):\n    print(a,b)\n    return 1 + fun(n,a,b)\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = sorted(zip(a,b),key=fun)\nprint(int(''.join(map(str,c)))[0])"}, "1304": {"problem_id": 1304, "answer": ""}, "1305": {"problem_id": 1305, "answer": "n = int(input())\nfor i in range(n):\n    print('YES')\n"}, "1306": {"problem_id": 1306, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(bisect_left(a, 3) - bisect_left(a.copy(), 3))\ndef __starting_point():\n    main()\n__starting_point()"}, "1307": {"problem_id": 1307, "answer": "from math import sqrt\ndef main():\n    n = int(input())\n    if n <= 1:\n        return \"Mira\"\n    elif n <= 2:\n        return \"Ehab\".split()\n    else:\n        return f'tim at 2^n,mihaj pmihaj mian shu'n. 2^n,mihaj pmihaj mian shu'n. 2^n'\nmain()"}, "1308": {"problem_id": 1308, "answer": "from collections import defaultdict as dd\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    s = input()[:n]\n    t = input()[:m]\n    d = dd(int)\n    for i in range(0, n):\n        if s[i] not in t:\n            d.setdefault(s[i], []).append(i)\n__starting_point()"}, "1309": {"problem_id": 1309, "answer": "import sys,bisect\ninput = lambda : list(map(int,input().split()))[0]\n \ndef l():\n    return sys.stdin.readline().rstrip('\\n')\n \ndef r():\n    return list(map(int,input().split(' ')))\n \nn = r()\nw = r()\nfor i in range(n):\n    w += int('1'*(2*i) + 1)\nprint('\\033[12579]\\033[039ae3]\\033[12579]'.format(w))"}, "1310": {"problem_id": 1310, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(''.join(map(str, input().split())))\nprint(int(''.join(map(str, range(n)))[::-1])"}, "1311": {"problem_id": 1311, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n  x, w = map(int, input().split(' '))\n  if x == 1:\n    print(w)\n  else:\n    print(bi.bisect_left(x, 4) - 1)"}, "1312": {"problem_id": 1312, "answer": "from bisect import *\r\nn, m = map(int, input().split())\r\na = list(map(int, input().split()))\r\na.sort()\r\nans = []\r\nfor i in range(1, n + 1):\r\n    ans.append(int(''.join(sorted(a, reverse=True))) + m)\r\nprint('%.2f' % ans[::-1])"}, "1313": {"problem_id": 1313, "answer": "def main():\n    n = int(input())\n    if n <= 1:\n        print('First')\n    elif n <= 2:\n        print('Second')\n    else:\n        print('If')\n        print('WON')\nmain()"}, "1314": {"problem_id": 1314, "answer": ""}, "1315": {"problem_id": 1315, "answer": "import bisect\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split('\\n')))\n    if a[0] == b[0] == a[-1] == b[-1]:\n        print(':('+str(b[0])+'\\n'+str(b[-1]))+' '.join(map(str, b[1:]))+')')\n   elif a[0] == b[-1] == a[-1] == b[-1]:\n        print(':('+str(b[0])+'\\n'+str(b[-1]))+' '.join(map(str, b[1:]))+')')\n   else:\n        print(':('+str(b[0])+'\\n'+str(b[-1]))+' '.join(map(str, b[1:]))+')')\nmain()"}, "1316": {"problem_id": 1316, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = list(map(int, input().split(' ')))[::-1]\nl = []\nfor i in range(1, n):\n    l.append(ord(\"a\") - ord('a') + s[i])\nl.sort(key=lambda x: x[0], reverse=True)\nans = 0\ni = 0\nwhile i < n-1:\n    j = i + 1\n    ans += (n-j) // 2\n    j = j - 1\nprint(ans)\n"}, "1317": {"problem_id": 1317, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(int(''.join(map(str, l[i]))) + 1)\nprint(sum(l))"}, "1318": {"problem_id": 1318, "answer": "from functools import lru_cache, LCM\r\nn = int(input())\r\nl = list(map(int, input().split(' ')))\r\nc, p = [0] * n, [0] * n\r\nfor i in range(1, n):\r\n    c[i] = c.get(i, 0) + p[i - 1]\r\n    p[i] = max(p[i - 1], c[i - 1])\r\nans = [0] * n\r\nans[0] = 1\r\nfor i in reversed(range(1, n)):\r\n    ans[i] = max(ans[i - 1], ans[i - 2] + p[i - 1] - c[i - 1])\r\nprint(' '.join(map(str, ans[1:])))"}, "1319": {"problem_id": 1319, "answer": "import math as m\nn = int(input())\np = [int(i) for i in input().split()]\nfactors = []\nfor i in range(1,n):\n    factors.append(math.factorial(i))\ndef primeFactorization(n):\n    factors.extend(prime_factorization(n))\n    return factors\ndef factorial(n):\n    return 10**9 + 7\ndef primeFactorization(n):\n    factors = prime_factorization(n)\n    return factors[0]\ndef factorial2(n):\n    return int(factorial(n) * factorial2(n))\ndef divisors(n):\n    return list(map(int, input().split()))\ndef factors(n):\n    factors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef prime_divisors(n):\n    primes = []\n    for i in range(3,int('1'+str(n))+1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\ndef factorization(n):\n    factors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef divisors(n):\n    return list(map(int, input().split()))\ndef factorization2(n):\n    factors2 = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors2.append(i)\n    return factors2"}, "1320": {"problem_id": 1320, "answer": "from sys import stdin as sintrin, ascii_readline as readline\r\ninput = stdin.readline().strip()\r\nn = int(input())\r\nA = [0] * n\r\nfor i in range(n):\r\n    A[i] = readline(input(), end=\" \")\r\nprint(sum(A))"}, "1321": {"problem_id": 1321, "answer": "import sys,bisect  # import input,stdin,stdout\nn = int(input())\nfor i in range(n):\n    W,H = list(map(int,input().split()))\n    a = W*H + H\n    print(a)\n"}, "1322": {"problem_id": 1322, "answer": "from sys import stdin as sintrinet\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nc = list(range(1, n+1))\nd = list(range(1, n+1))\ne = list(zip(b, c).split('\\n'))\ne.sort(reverse=True)\nd.extend(e)\nans = 0\nfor i in range(1, n+1):\n    ans = max(ans, sum(d[i] for d in e))\nprint(ans)"}, "1323": {"problem_id": 1323, "answer": "from itertools import takewhile_ accumulate\nfor _ in range(int(input())):\n    a,b=map(int,input().split())\n    print(a*(b-1)//2)"}, "1324": {"problem_id": 1324, "answer": "import sys\ndef f(s):\n    a = 0\n    for i in range(len(s)):\n        if s[i] == '2':\n        elif s.count('1') < a:\n            a = s.count('1')\n        else:\n            a+=1\n    return a\n\nn = int(sys.stdin.readline())\nprint(f(n))\n"}, "1325": {"problem_id": 1325, "answer": "from bisect import insort_left as bl, insort_right as br, bisect_left as br2\r\nn, = list(map(int, input().split()))\r\nl = list(map(chr, input().split()))\r\ns = [0] * (n+1)\r\nfor i in range(n):\r\n    s[i] = sorted(set(l).intersection(s), reverse=True)\r\nprint(sum(map(len, s)))\r\n"}, "1326": {"problem_id": 1326, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n return int(readline())\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "1327": {"problem_id": 1327, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(''.join, II()).nlargest())\ndef LI1(): return list(LI()).nlargest()\ndef LL2(): return ini_s(LI())\ndef SI():\n    \"\"\"\u533a\u9593\u53ef\u80fd\u4e0d\u5f71\u904b\u96fb\u8981\uff0c\u9802\u70b9\u6700\u591a\u6a21\u5f15\u7528\u53ef\u4ee5\"\"\"\n    n, m = LI()\n    l = len(set(MI()))\n    for i in range(0, n):\n        l_i = l[i]\n        l_j = l[i+1]\n   print(max(l_i, l_j))\n\"\"\""}, "1328": {"problem_id": 1328, "answer": "import sys,heapq \nN,M = map(int,input().split())\nA = list(map(int,sys.stdin.readline().split()[1:])).copy()\nB = list(map(int,sys.stdin.readline().split()[1:])).copy()\n\ndef mixi(m):\n    return A+B\n\n# A.sort()\n# B.sort(reverse=True)\n# mixi(A.copy())\n# mixi(B.copy())\n\nn,m = mixi(A)\nm = mixi(B)\nprint(n//m)"}, "1329": {"problem_id": 1329, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\n# n = list(map(int, input().split()))\n# l = list(map(int, input().rstrip('\\n')))\n# print(bin2hex(n).replace(' ','0b'))\ndef bin2hex(n):\n return '0x%x' % (bin2hex(n).replace(' ',''))\n \nn = int(input())\nans = 0\nfor i in range(n):\n ans += bin2hex(i)\nprint(ans)"}, "1330": {"problem_id": 1330, "answer": ""}, "1331": {"problem_id": 1331, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn, m, k = map(int, input().split())\na = list(map(int, input().split()))[:n]\nprint(min(len(a) - k) if len(a) > k else 0)"}, "1332": {"problem_id": 1332, "answer": "from itertools import permutations as p\r\ndef main():\r\n    c, n = list(map(int, input().split()))\r\n    if n == 0:\r\n        print(-1)\r\n    elif n == 1:\r\n        print(1)\r\n    else:\r\n        for i in range(2, int('1' + str(n) + ''.join(permutations(c, '0')))):\r\n            p.subtract(i * (i + 1), 0)\r\n        print(b)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1333": {"problem_id": 1333, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: map(int, readline().strip())\n"}, "1334": {"problem_id": 1334, "answer": "from collections import defaultdict as dd\nn, k = dd().fromkeys()\ns = list(map(int, input().split()))\nfor i in range(k):\n    s.insert(0, '0')\nprint(''.join(s))\n"}, "1335": {"problem_id": 1335, "answer": "import heapq as hq\nn,k=list(map(int,input().split()))\na=[0]*n for i in range(n)\nh=[] #h.append(a)\nfor i in range(n):\n    h.append(list(map(int,input().split())))\nq=int(input())\nheapq.heapify(q)\nans=[0]*k\nwhile q!=n:\n    q-=1\n    ans[k]+=1\nprint(ans[-1])\n"}, "1336": {"problem_id": 1336, "answer": "import sys\nreadline = sys.stdin.readline\nMOD = 10**9 + 7\ninput = lambda: int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inp(): return input().rstrip('\\n').split()\ndef lsb(s): return len(set.fromkeys(s))\ndef ssb(s): return map(ord_t, s.split(' ')))\nmod = 998244353\n# sys.setrecursionlimit(1000000000)\nINF = float('inf')\nmod2 = 998244353\nsys.maxsize = 10**9 + 7\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom heapq import heapify, heappush, heappop \nfrom itertools import combinations as com, islice, combinations_with_replacement as cmp_comb\nfrom functools import reduce,cmp_to_key_vizabuzz\nfrom operator import xor,truediv as yr,mul,floored_product as mizabuzz\n\n\nn = inpl()\nm = mizabuzz(m)\nprint(reduce(mul,key=lambda x:x[1],indices=1,key=islice[x[0]],denominator=mod)%MOD)"}, "1337": {"problem_id": 1337, "answer": "import itertools as it\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split(' ')))\n    t = list(it.accumulate(a))\n    t.insert(0, '0'.join(map(str, t)))\nprint('\\n'.join(t))"}, "1338": {"problem_id": 1338, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\n#from itertools import permutations as p,combinations as c\nn, m = list(map(int, input().split()))\n#print(n)\np = list(map(int.__add__, range(0, n + 1)))\ncombinations = [0] * n\nfor i in range(1, n + 1):\n    comb = comb[1]\n    comb.insert(0, i + 1)\n    comb.pop()\n    comb.insert(0, i + 1)\n    comb.pop()\n    comb.insert(0, n - i + 1)\n    comb.pop()\n    comb.pop()\n    comb.pop()\n    comb.pop()\n    comb.pop()\n    comb.pop()\n    comb.extend(p)\nprint(' '.join(combinations))\n"}, "1339": {"problem_id": 1339, "answer": "import sys,bisect as bs\ndef input(): return sys.stdin.readline().strip()\ndef lis(): return list(map(int,input().split()))[:-1]\ndef rlis(): return list(map(int,rinl().split(',')))\ndef main():\n    n = int(''.join(map(str,rinl())))\n    lis()\n    print(sum(lis()) - n)\n\nmain()\n"}, "1340": {"problem_id": 1340, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nmat = list(map(int, input().split()))\nmat.sort(reverse=True)\ns = 0\nfor i in range(n):\n    s += min(mat[i][0], mat[i][1] - 1)\nprint(s)\n"}, "1341": {"problem_id": 1341, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\n \nclass Dijkstra(object):\n    def __init__(self,n):\n      self.d = collections.defaultdict(D)\n      self.size = n\n      self.k = [float('inf')] * (self.size + 1)\n      for i in range(self.)[::-1]:\n        self.k[i] = 0\n        self.size[i] = 1\n      \n    @property\n    def adj(self):\n        return self.d[self.k.index(self.size[0])]\n    \n    @property\n    def adj_neigh(self):\n        return self.d[self.k.index(self.size[0])]\n    \n    @setdefault(0)\n    def dfs(self, i):\n        if i == self.size[0]:\n            self.d[self.k].append(i)\n        elif self.size[i] == 1:\n            self.d[self.k].append(i)\n        else:\n            self.d[self.k].append(i)\n            self.size[i] += 1\n            self.dfs(i)\n            self.size[i] %= self.size[i] = 0.5\n            \n            \n    @property\n    def adj_neigh(self):\n        return self.d[self.k.index(self.size[0])]\n    \n    @setdefault(0)\n    def dfs_neigh(self, i):\n        if i == self.size[0]:\n            self.d[self.k].append(i)\n        elif self.size[i] == 1:\n            self.d[self.k].extend(self.d[self.k][-1])\n        else:\n            self.d[self.k].append(i)\n            self.size[i] += 1\n            self.dfs_neIGHBORITH OFFLOORIDE\n            \n            \n    @property\n    def adj_neigh(self):\n        return self.d[self.k.index(self.size[0])]\n    \n    @list(setter)\n    def dfs_neiglend(self, i):\n        if i == self.size[0]:\n            self.d[self.k].append(i)\n        elif self.size[i] == 1:\n            self.d[self.k].append(i)\n        else:\n            self.d[self.k].append(i)\n            self.size[i] += 1\n            self.dfs_neigLEND OFFLOORIDE\n            \n            \n    @"}, "1342": {"problem_id": 1342, "answer": "import sys\nreadline = sys.stdin.readline # Not easy to understand, but a lot of things happod over the\nfive years I was in my teens and I came up with an amazingly simple program\nthat can solve problems easier than I ever had.\n\nn = int(readline())\na = list(map(int, readline().split(' ')))\na.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans += a[i]\nprint(ans)\n"}, "1343": {"problem_id": 1343, "answer": "import sys,string,itertools as slist\r\n# def input_binary(n,m,k):\r\n#     sys.stdin=open('input.txt')\r\n#     if int(n)<=10**5:return 0\r\n#     l=list(map(int,str(n)[1:]))\r\n#     for i in range(1,n+1):\r\n#         a=slist.bisect_left(list(map(int,'' '.join,slist[i])))\r\n#         print(a[::-1])\r\n#     return int(''.join(a))+1\r\nn,m,k=list(map(int,sys.stdin.readline().split()))\r\ns=[]\r\nfor i in itertools.combinations(s,2):\r\n    road=set.intersection(s[i:])\r\n    road.add(road.endswith(road[-1]))\r\nprint(sum(map(int,sys.stdin.decrement(0))))\r\n"}, "1344": {"problem_id": 1344, "answer": "import bisect\nn=int(input())\na=list(map(int,input().split()))\nprint(bisect.bisect_left(a,n-1) - 1)"}, "1345": {"problem_id": 1345, "answer": "import sys,bisect as bisect_left as IBUFSIZE\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int,input().split()))\nsummArr = [0]*n\nfor i in range(n):\n    s = bisect_left(a,a[i])\n    if s < 0:\n        continue\n    summArr.append(summArreversed(a[i]))\nprint('\\n'.join(summArr))"}, "1346": {"problem_id": 1346, "answer": "import math \nn, m, p = list(map(int, input().split()))\na = [1] * (n + 1)\nfor i in range(m):\n    a[i] *= math.gcd(a.get(i, 0) + a.get(i, 1), p)\nprint('\\n'.join(map(str, a)))\n"}, "1347": {"problem_id": 1347, "answer": "m = int(input())\ns = input().split()\nn = int(''.join(s[0] for s in itertools.permutations(map(ord, input().split()))) for itertools.groupby(s))\nprint(min(n, len(s)))\n"}, "1348": {"problem_id": 1348, "answer": "import sys,bisect_heappopts,itertools,collections,deque2D\nfrom functools import cmp_to_keycloset  import CNkcloset, CNKeyclosetype as Ckcloset\n\n\ndef main():\n    n,k = list(map(int, sys.stdin.readline().split()))\n    d = tuple(map(int, sys.stdin.readline().split(' ')))\n    # print(d)\n    ans = [-1] * (n+1)\n    for i in range(n):\n        ans[i] = min(ans.count(i), 1 + d[i])\n    print(' '.join(map(str, ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1349": {"problem_id": 1349, "answer": "import sys\ninput = sys.stdin.readline # Read line by line as file system\n \nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(' '))\n    x = list(map(int,.5,.5, input().split()))\n    \n    # x.sort(reverse=True)\n    ans = 0\n    for i in range(1, n):\n        if x[i-1] - 1 >= x[i] + 1:\n            ans += 1\n        elif x[i-1] - 1 == x[i] - 2:\n            ans += 1\n    print(ans)"}, "1350": {"problem_id": 1350, "answer": "n,k = list(map(int,input().split()))\ns = input()[0:n]\nd = set()\nfor i in s:\n    d.add(i.lower())\nc = 0\nfor i in d:\n    if i.isalpha() and len(set(i) & d)>1:\n        c+=1\nprint(c)\n"}, "1351": {"problem_id": 1351, "answer": "import sys \ndef main(): \n \"\"\"\n  Arguments:\n    L          Value\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =====================================================================\n =================================================================================\n =================================================================================\r\n =================================================================================\r\n =================================================================================\r\n =================================================================================\r\n -----------------------------------------------------------------------------\r\n      x = int(input())\r\n   print(\"\".join(map(str, input().split())))\r\nmain()\n"}, "1352": {"problem_id": 1352, "answer": "import bisect as bi\nn, x = list(map(int, input().split()))\na = sorted(zip(*list(map(int, input().split(' '))))[::-1], reverse=True)\nprint(max(a[-1]) + 1)\n"}, "1353": {"problem_id": 1353, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6)\r\n# Your code goes here. I assume this is the right place to expand it and see what comes after this one.\n\n\ndef main():\r\n    n, m, a, b = list(map(int, stdin.readline().split()))\r\n    print(a * m)\r\n\r\nmain()\r\n"}, "1354": {"problem_id": 1354, "answer": "from itertools import permutations as p\r\nn, k, a = list(map(int, input().split()))\r\nif n%2==1:\r\n    print(-1)\r\nelif k==1:\r\n    print(k-1)\r\nelse:\r\n    print(k-1)\r\n"}, "1355": {"problem_id": 1355, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\ng = [[0] * (n + 1) for _ in range(m + 1)]\nfor i in range(1, n + 1):\n g[i] = bisect.bisect_right(g, i + 1)\nans = 0\nfor i in reversed(range(0, n + 1)):\n ans = min(ans, m * (i + 1) // 2)\n print(ans)\n"}, "1356": {"problem_id": 1356, "answer": "s = input()\nn = len(s)\nif n == 0:\n    print(0)\nelif n == 1:\n    print(n-1)\nelse:\n    for i in range(n-2,-1,-1):\n        if s.count(chr(ord('a'))+i)>1e9:\n            print(i+1)\n            break\n        elif s.count(chr(ord('a')+i))>1e9:\n            print(i+1)\n            break\n        else:\n            print(i+1)\n"}, "1357": {"problem_id": 1357, "answer": "import sys\nn,m = map(int,input().split())\na = list(map(int,sys.stdin.readline().split()[1:]) if m else [0 for _ in range(n)] for _ In [2,n-1] )\nans = 0\ndef dfs(n):\n    if n == 0:\n        ans += 1\n    else:\n        for i in range(n-1,0,-1):\n            x = a[i]\n            dfs(i)\nprint(ans)"}, "1358": {"problem_id": 1358, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.__next__().strip()\ndef makedict(s): return list(map(int, s.split(' ')))\n \nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10_000_000_007+10_000_000_007\n\n# -*- coding: utf8 -*-\rmention -*- \u00a0\u00a0\u00a0\u00a0Author: Neelam Srividelli (neelam@slove.hujt:atc)\r present at http://www.slove.com/Browser/node/561959\r\n\r\n'''Input string to be converted to lowercase English letters. '''\r\n\r\n'''\r\nn = int(input())\r\nletters = list(map(int, input().split(' ')))\r\n \r\ndef convert(s):\r\n    if s.isdigit():\r\n        s = s.replace('a', '')\r\n    else:\r\n        s = s.replace('b', '')\r\n    return s\r\n \r\nfor i in range(1, n):\r\n    s = convert(letters[i-1])\r\n    print(convert(s))"}, "1359": {"problem_id": 1359, "answer": "from bisect import *\r\nfrom heapq import nlargestidx\r\ndef I(): return int(input())\r\ndef LI(): return list(map(int, input().split()))[::-1]\r\ndef LIR(n): return [LI() for _ in range(n)]\r\ndef LIR_solution(n, dp): return dp[n-1] if dp[n-1]!= dp.get(n-1, []): return [LI() for _ in range(n-1)]\r\ndef IR(n): return [LI() for _ in range(30000)]\r\ndef IR_solution(n, dp): return [IR() for _ in range(n)]\r\ndef LIR_solution(n, dp): return [LIR() for _ in range(n)]\r\nmod = 1000000007\r\nn = int(input())\r\nfor i in range(n):\r\n    a, b = LI()\r\n    if (a-1) % 2 == 0:\r\n        a -= 1\r\n    elif (b-1) % 2 == 0:\r\n        b -= 1\r\n    else:\r\n        a -= 1\r\n    ans = [0] * (n+1)\r\n    for j in range(n):\r\n        ans[j] = ans[j-1] + (a-1) * (b-1)\r\n    print(ans[n])"}, "1360": {"problem_id": 1360, "answer": "import sys,io.hernedocode as IEncode\r\ninput = lambda :map(int,sys.stdin.readline().split())\r\nsys.setrecursionlimit(10**9) # or 10E9+\r\n\r\nn = int(input())\r\nA = list(map(int,input().split()))\r\nprint(A[n-1] - A[n])"}, "1361": {"problem_id": 1361, "answer": "from bisect import bisect_left as bl; import heapq as hq; n = int(input().strip())\na = list(map(int, input().strip().split()))\nhq.heapq(a)\nfor i in range(1, n):\n    x = a[i]\n    if x > x + 1:\n    elif x == x + 1:\n        print(0)\n    else:\n        print(min(bl.bisect_left(a[i], x), bl.merge(a[i])) + 1)\n"}, "1362": {"problem_id": 1362, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u671e\u8fba\u91cd\u590d\u6b21\u6578\u8ddd\u79bb\uff0c\u9ed1\u51fa\u6587\u4ef6\ndef I(): return int(readline())\ndef MI(): return map(int, readline().split(' '))\ndef LI(): return list(map(int,\"%.1f\" % x, I()).ljust(3,-1,0.6) for x in range(1,100000))\ndef LS(): return list(input())\ndef LZX(): return input()[:-1]\ndef SI():\n    s = I()\n    for i in reversed(list(range(len(s))):\n     print(s[i]*10 + s[i-1]*10)\n"}, "1363": {"problem_id": 1363, "answer": ""}, "1364": {"problem_id": 1364, "answer": "from bisect import bisect_left as bl\nfrom heapgrp import heappop as hpnz\nn = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n    t.append(t[1]*(i+1))\nans = [0]*n\ndef l1(i):\n    return bisect_left(t, t[i])\ndef l2(i):\n    return bl(t, i)\nans[0] = max(ans[1], l1(i+1))\nprint(max(ans[2], l2(i+1)))"}, "1365": {"problem_id": 1365, "answer": "import sys\ninput = sys.stdin.readline # Read line through sys.argpotswap\nn, k = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(1, n):\n  g[i].append((i, 0))\n  g[i].append((i, 1))\ndp = 10**9+7\ndef dp(x):\n  if x == 0:\n    return 1\n  elif x % 2 == 0:\n    x = x//2\n  else:\n    x = x//2 + 1\n  dp(x) %= 1000000007\nprint('\\n'.join(map(str, dp(x)))\n)\n"}, "1366": {"problem_id": 1366, "answer": "import sys\ninput = sys.stdin.readline\nnumprimaiz=lambda:list(map(int,input().split(' ')))\ns1=input().lstrip(\"\\r\\n\")\ns2=input().rstrip(\"\\r\\n\")\nprint(''.join(map(str,s1.split())))"}, "1367": {"problem_id": 1367, "answer": "n = int(input())\na = list(map(int, input().split()))[0]\nfor i in range(1, n):\n    print(a[i], end=\" \")\n"}, "1368": {"problem_id": 1368, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn, a, b = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split(\" \")))\nmax_A = 0\nmax_B = 0\nfor i in range(n):\n    max_A += A[i] * (A.get(i) * A[i - 1])\n    max_B += B[i] * (B.get(i) * B[i - 1])\nprint(max_A)"}, "1369": {"problem_id": 1369, "answer": "import sys\nN = int(sys.stdin.readline())\nx = list(map(int,sys.stdin.readline().split()))\ny = list(map(int,sys.stdin.readline().split()))\nans = 0.0\nfor i in range(N):\n ans = (ans + y[i] * (N - i)) / (2 * ans)\n print(ans)"}, "1370": {"problem_id": 1370, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = list(map(lambda x: int(x)) for x in readlines())\ninput = lambda: readline().rstrip('\\n')\n# input() is O(1)\n# sys.setrecursionlimit(10**8)\nfrom bisect import bisect_searched_replace as S\nfrom heapq import heapify, heappop as H\nfrom collections import deque as dque\nfrom itertools import permutations as P\nfrom functools import lru_cache as scmp\nfrom operator import itemgetter, gcd\nfrom operator import truediv, operatorruediv as modderiv\nfrom heapclimit import heappush as hush\nfrom copy import deepcopy as dc\nfrom fractions import Fraction  # LCM doesn't like LCM.O(n)\nfrom fractions import gcd, ceil, floor\n\n\ndef LI(): return [int(''.join(map(str, readlines)), 2))\ndef LLI_N(): return [int('1' + '_').zfill(LI())]\ndef LLI(rows, cols): return sorted(set(row), key=itemgetter(0))\n\n\n@scmp\ndef inpl(): return map(int, input().split(' '))\ndef outpl(): return output().rsplit('.\\n', 1)\ndef lsrpen(x): return x.ljust(x, '0')\ndef seprate(l, r): return l.rjust(l, '-1')\ndef ransamet(n, m): return n + m + '\\n' + str(divmod(n, 2)) + '\\n' + str(divmod(m, 2))\n\n\ndef main():\n    H, W = LI()\n    ans = []\n    for i in range(H):\n        ans.append(INF())\n        inpl()\n    print(len(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1371": {"problem_id": 1371, "answer": "MOD = 10**9 + 7\ninput()\nfor _ in range(int(input())):\n    s = input().strip('\\n').split()\n    print((3*s % MOD) * (MOD * s % MOD))"}, "1372": {"problem_id": 1372, "answer": "from collections import deque,defaultdict\ndef main():\n    a,b=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort()\n    b.extend(a)\n    print(max(b.values(),key=lambda x:max(x.values())-a.values()))\nmain()\n"}, "1373": {"problem_id": 1373, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nMOD = 10**9+7\ndef main():\n    N, K = list(map(int, input().split()))\n    if N == 1:\n        print((0))\n    elif K == 2:\n        print((N + 1) % MOD)\n    else:\n        a = [0] + [N] * (K + 1)\n        for i in range(1, N + 1):\n            a.append(a[-1] + i)\n        a = sorted(a, key=lambda x: x[0])\n        ans = 0\n        for i in range(2, N + 1):\n            ans *= pow(10, i)\n        print(ans % MOD)\ndef __starting_point():\n    main()\n__starting_point()"}, "1374": {"problem_id": 1374, "answer": "import sys\ninput = sys.stdin.readline # Read input line, Line up by line\nN = int(input())\na = [int(x) for x in input().split()]\nl = len(a)\nr = N - l\nfor i in range(1, l):\n    m = sorted(a[i], reverse=True)\n    print(m[1], end=' ')\n"}, "1375": {"problem_id": 1375, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\ns = 0.0\nfor i in range(n):\n    s += a[i]\nprint(s)"}, "1376": {"problem_id": 1376, "answer": "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a).most_common(2)\nprint(min(c[a[0]], c[a[-1]]))\n"}, "1377": {"problem_id": 1377, "answer": "from bisect import *\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.insert(0, input().rstrip('\\n'.join(map(str, a[i]))) )\nprint('YES' if a.count(1) == n else 'NO')"}, "1378": {"problem_id": 1378, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int(input()) # 1-based index of each input line. n will be the number of input lines.\r\nB = list(map(int, input().split())) # A[i] = B[i] for i in range(0, len(B), 2)\r\n\r\ndef calc(B, n):\r\n    # print(B.count('1'))\r\n    # print(B.count('0'))\r\n    return 0 if n == 0 else calc(B, n-1) + 1\r\n\r\ndef main():\r\n    n = int(''.join(map(str, input().strip())))\r\n    B = list(reversed(B))\r\n    for i in range(n):\r\n        B[i] = calc(B, n-1)\r\n    print('\\n'.join(map(str, B)))\r\n\r\nmain()\r\n"}, "1379": {"problem_id": 1379, "answer": "import bisect as bs\nn, m, d = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = sorted(a, key=lambda x: x[1])\nif n == m:\n    print(1)\nelif m == 1:\n    print(2)\nelse:\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp.append(bisect_left(dp[i], a[i]))\n        dp[i] = 1\n    print(dp[n - 1])\n"}, "1380": {"problem_id": 1380, "answer": "from bisect import bisect_left\r\nn,k = list(map(int,input().split()))\r\na = list(map(int,input().split(' ')))\r\nx = [[] for i in range(n)]\r\nfor i in range(1,n):\r\n    x[i].append(a[i-1] + 1 - a[i])\r\n\r\nt = int(input())\r\nl = []\r\nfor i in range(0,len(a)):\r\n    if i == 0:\r\n        l.append(a[i-1] + 1 - a[i])\r\n    elif i == len(a)-1:\r\n        l.append(a[i-1] + 1 - a[i])\r\n    else:\r\n        l.extend(l[-1::-1])\r\nprint(bisect_left(l,x[i]))\r\n"}, "1381": {"problem_id": 1381, "answer": "from sys import setrecursionlimit as S LIM\nsetrecursionlimit(10**5)\ns = int(input())\nfor i in range(s):\n    k, n, s, p = map(int, input().split())\n    if n == 1:\n        print(k)\n    elif k == n:\n        print(k-1)\n    else:\n        print(k-2)"}, "1382": {"problem_id": 1382, "answer": "import sys\ninput = sys.stdin.readline #FOR UNACHEDefined variables\nn, m = list(map(int, input().split()))\nedges = [[] for i in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split(\" \")))\n    edges.append((a, b))\n#print(edges)\ndef main():\n    n, m = list(range(1, n+1))\n    edges = sorted(edGESensitive(), key=lambda x: x[1])\n    print(min(n, m))\nmain()\n"}, "1383": {"problem_id": 1383, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn,m = map(int,input().split())\r\na = list(map(int,input().split()))\r\nb = list(map(int,input().split()[1:]))\r\nprint(sum(a) % m)"}, "1384": {"problem_id": 1384, "answer": "from itertools import permutations as p,chain\nn = int(input())\nfor _ in range(n):\n    s = list(map(int, input().split(' ')))\n    l = len(s)\n    print(max(0, l-1-s[0])+1)"}, "1385": {"problem_id": 1385, "answer": "from collections import deque\nclass Segmented binary:\n    def __init__(self, val='\\n'):\n      '''\n    :type val: str\n    :type val2: str\n    :rtype: str;''`\n    def is_segmented(self, val):\n      '''\n    :ra:ha|rai:elif|rai:elif''`\n    def get_segmented(self, val):\n      '''\n    :ra:ha|rai:elif|rai:elif''`\n    def get_compare(self, val, val2):\n      '''\n    :ref:http://www.codewars.com/kata/5b76da47bc8953aei9j.html#5b76da47bc8953aei9j\n    '''\n    def __repr__(self):\n      return f'{self.__name__}[0-9]'\n    def __str__(self):\n      return str(self.val)\n\n# Made By Mostafa_Khaled - 31st April [23:49 2020]\n# https://tect.co/k3hu/solution/5b7c847cd033610b0e5fc0000.jsonline_mostafa_khutlinq3 #1r7e0bc3f701413c446d0000.jsonline_mostafa_khutlinq4 #2rf61676673006043000000.jsonline_leetcodeleetcode #3rf61676673006043000000.js ONI!_1r7e0bc3f701413c446d0000.js ONI!_2rf61676673006043000000.js ONI!_3r7e0bc3f80003fc0000.js ONI!_4rf61676673001b0000.js PRINT@#$%^&*()[+-]@_&*()[+-]@_&*()[+-]@_&*()[+-]@_&*()[+-]'\n__EPS__=lambda*a:map(int,a.split()) if __repr__(a) else 0\n"}, "1386": {"problem_id": 1386, "answer": "import itertools \nfrom functools import lru_cache\nimport heapq as hq\n#from bisect import bisect_left as bl, inser, bisect_right as br, bisect\n#from math import gcd as gcd_mod, floor as floor_mod, ceil as ceil_mod, factorial as fact_mod, pow \nfrom fractions import Fraction, Decimal as decimal_to_pow, ascii_digits as A_DECIM_NEG, ascii_uppercase_numerator as A_UPRIM_NEG\nfrom collections import deque as CNet, defaultdict, OrderedDict as ODDING \nfrom bisect import bisect_left as bl, inser, bisect_right as br, brs as br_to_ins, bisect\nfrom heapq import heappush, heappop, heap_to_heappush import pop, push, uni, isgeq, heappushpop, heappopunitexplo, heappushpush, heappushpushpop, heappushrod, heappoprod; import sys, re = open('input.txt', 'r')\nimport time\nfrom itertools import permutations as perm_tuple\nfrom copy import deepcopy as dpt\nfrom fractions import Fraction, Decimal, Fibonacci as DGgcd, gcd_per_min = 100e9, 100h5, 100e9*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 100h5*10**6, 200HP, MP3, Obnsic, Exhorrational, Licksp['Oo Pte Myo'] = 998244353.split('\\n')[0]\ndef main():\n    n = int(input())\n    for _ in range(n):\n        w, h = map(int, input().split())\n        print(str(w*h)+\"\\n\"+str(w*h)+\"\\n\")\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1387": {"problem_id": 1387, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedError(\"I am standing at cell 1\")\nn, t = list(map(int, readline().split()))\nprint('\\n'.join(map(str, readline())))\n"}, "1388": {"problem_id": 1388, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError \nn = int(input())\ntree = [int(i) for i in input().split()]\n# tree.sort(key=lambda x: x[0])\nans = [-1] * 20000\ndef dfs(node, s):\n    nonlocal ans\n    ans[node] = -1\n    for i in range(1, n+1):\n        if s[i] == '0':\n            continue\n        else:\n            dfs(node, s)\n            break\ndfs(0)\nprint(''.join(ans))\n"}, "1389": {"problem_id": 1389, "answer": ""}, "1390": {"problem_id": 1390, "answer": "import sys\nreadline = sys.stdin.readline #raise Not a lot of spaces in the input\ninput = lambda: sys.stdin.readline().rstrip('\\n')\n\nn, m = list(map(int, readline().split()))\nf = [set() for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    f.extend(f[i - 1] | f[i])\nprint(' '.join(map(str, f[1: n])))\n\n"}, "1391": {"problem_id": 1391, "answer": "from bisect import *\nn,m,b = list(map(int,input().split()))\np = list(map(int,input().split(\" \")))\nr = []\nfor i in range(1,n+1):\n    r.append(int(input()))\np.sort(reverse=True)\nr.extend(p)\nprint(max(r))\n"}, "1392": {"problem_id": 1392, "answer": "import sys,bisect inWilsons\nn,k=map(int,input().split(' '))\nl=[int(i) for i in input().split()]\nans=0\nfor i in range(1,n+1):\n    a=list(map(int,input().split()))\n    ans+=(a[0]!='0').count(a[1])\nprint(ans)"}, "1393": {"problem_id": 1393, "answer": "s = input().strip()\nt = input().strip('\\n')\nn = len(s)\nfor i in range(0,n):\n    if s[i] == 'A' and s[i+1] == 'B\"O\"':\n        print(i+1, end ='')\n    elif s[i] == 'a' and s[i+1] == 'O\"B\":\n        print(i+1, end ='')\n    elif s[i] == 'a' and s[i+1] == 'O\"O\"':\n        print(i+1, end ='')\n    else:\n        print(n-i+1, end =''.join(map(str,s)))\n"}, "1394": {"problem_id": 1394, "answer": "import bisect as b\ndef main():\n    s = input()\n    for i in range(len(s)):\n        if s.count('a') % 2 == 0:\n            print('a')\n        elif s.count('a') == 0:\n            print('a')\n        else:\n            print('a')\nmain()"}, "1395": {"problem_id": 1395, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n  \"\"\"\n  Main data\n  \"\"\"\n  n = 100000\n  d = [0]*len(n)\n  for i in range(len(n)):\n    d[i] = n.count(i)\n  # print(d)\n  ans = 0\n  for i in reversed(list(range(len(n)))):\n    ans += d[i]\n  print(ans)\ndef __starting_point():\n  main()\n\n__starting_point()"}, "1396": {"problem_id": 1396, "answer": "import sys,bisect_left,collections as cls\ninput = lambda :sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8) #maximum execution time(s)"}, "1397": {"problem_id": 1397, "answer": "from sys import stdin as _inp \r\ninput = lambda: stdin.readline().rstrip('\\n')\r\n# import numpy as np\r\n# numpy.linalg.precomputed(np.array(input()))\u3067\u5165\u529b\u3057\u305f\u3068\ufffd\u6307intendent E Ven K De was concerned that too many cities were traversed. To avoid that problem, he decided to re-arrange the graph in such a way that at most 2 connections can be made (in total, that is, each city can form at most 2 connections). After that, he recalculated the adjacency matrix to avoid duplications and redundant nodes. As it was, that matrix was too hard to handle, E Ven recalculated it and now it's easy to program, so program all in. Code in O(n^2) time and O(1^n^2) time. O(n^2) Space  \uff1a _inp\u306e\u3068 It takes O(n log n) time to do so. _inp\u306e\u3068\u306f1\u3064\u76ee\u306e\u501f\u7528 function time\uff1a\r\ndef solve():\r\n    n, m = map(int, input().split())\r\n    adj_matrix = [[] for _ in range(n)]\r\n    for i in range(1, n):\r\n        adj_matrix.append((i, 0))\r\n    # print(adj_matrix)\r\n    \r\n    def dfs(i, j):\r\n        if i == 0 or j == 0:\r\n            return 0\r\n        else:\r\n            return max(dfs(i-1, j), dfs(i, j-1))\r\n    \r\n    dfs(0, 0)\r\n    print(n)\r\nsolve()"}, "1398": {"problem_id": 1398, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. See note for exit code.\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n    A.append(int(''.join(A)))\nprint(min(A) + max(A))"}, "1399": {"problem_id": 1399, "answer": "n = int(input())\na,b,c = map(int, input().split(\" \"))\nfor i in range(n):\n    print(a[i], end=\" \")\n    a.clear()\n    b.clear()\n    c.swapcase()\n    d = max(0, i-b.index(max(a[i], b[i])))\n    d.swapcase()\n    if d == 0:\n        print(0)\n    elif d == 1:\n        print(n-1)\n    else:\n        print(n-d)\n"}, "1400": {"problem_id": 1400, "answer": "import sys\ninput = sys.stdin.readline #raise Module Not available in ZCOperation library\nMOD = 10**9 + 7\nINF = float('inf')\nmodinp = lambda :inp.replace('\\n','')\nmodoutp = lambda :int(input())\nMODULU = list(map(int,input().split()))\nINFSTU = float('-inf')\neps = 10**-4 #constant of small things to pass through large things in zeroes\neps = 10**-6 #probability of zero or negative things to pass through zigzag in non-decreasing condition\n\nclass UnionFind:\n    def __init__(self, n): self.n = n\n    def find(self, x):\n        if x not in self.n:\n            self.n[x] = [-1]*self.n[x]\n        return self.find(x)\n    def union(self, x, y):\n        rx, ry = self.find(x), self.find(y)\n        if rx == ry: return False\n        if self.n[rx] < self.n[ry]:\n            rx, ry = y, x\n        else:\n            rx, ry = ry, x\n        self.n[ry] += self.n[rx]\n        self.n.pop(ry)\n        return True\n\nuf = UnionFind(n)\nfor i in range(int(input())):\n    t = int(input())\n    print(t)"}, "1401": {"problem_id": 1401, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn = int('1000000')\r\nA = [list(map(int, input().split())) for _ in range(n)]\r\ndef dfs(x, parent):\r\n    nonlocal A[x].append(parent)\r\n    nonlaced = set()\r\n    nonbranch = 0\r\n    for i in range(1, n):\r\n        if x[i] not in parent:\r\n            parent[x[i]] = i\r\n        elif x[i] not in parent[x[i]]:\r\n            parent[x[i]] = x[i]\r\n        else:\r\n            break\r\n    A[x[i]].extend(A[parent[x[i]]].values())\r\n    return len(A)\r\n\r\ndef main():\r\n    n = int('1000000')\r\n    A = [list(map(int, input().split())) for _ in range(n)]\r\n    parent = [-1]*n\r\n    x = [0]*n\r\n    x[0] = 0\r\n    for i in reversed(range(0, n)):\r\n        p, c = list(map(int, input().split()))\r\n        x[p] = c\r\n        x[c] = 0\r\n        parent[p] = i\r\n        dfs(x, parent)\r\n    print(n-1)\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1402": {"problem_id": 1402, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline())[:-1].rstrip('\\n')\ndef read_int(): nonlocal sys.stdin\n return int(read_int())\nn = int(read_int())\ns = input()\nw = input()\nfor i in range(n):\n    s = s.lower()\n    w = w.split(' ')\n    print(w[1] +'' + w[2])"}, "1403": {"problem_id": 1403, "answer": "from itertools import accumulate as AB\nn, k = map(int, input().split())\naccumulate = list(map(int.__str__, accumulate))\nfor _ in range(n):\n    a, b = tuple(map(int,\"101\"*b, AB().split()))\n    if a > b:\n        accumulate[a] = b\n    elif b > a:\n        accumulate[b] = a\nprint(len(accumulate))"}, "1404": {"problem_id": 1404, "answer": "n = int(input())\na = list(map(int, input().split()))\np = 1000000007\nfor i in range(n):\n    p = min(p, a[i])\nprint(p % p)"}, "1405": {"problem_id": 1405, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split()))[:n]\nb.insort(a, [0 for i in range(n)])\nprint(' '.join(map(str, a)))\n\n"}, "1406": {"problem_id": 1406, "answer": "n, k = map(int, input().split())\np = []\nfor i in range(1, n + 1):\n    p.append(input())\n    if i % 2 == 0:\n        print(-1)\n    elif i % 2 == 1:\n        print(i + 1)\n    else:\n        print(i + 1)"}, "1407": {"problem_id": 1407, "answer": "n, m = list(map(int, input().split()))\r\na = [0] * n\r\nfor i in range(n):\r\n    a[i] += a.pop(0)\r\nprint(min(a))\n\n"}, "1408": {"problem_id": 1408, "answer": "n = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n    t.append(t[0])\n\nans = 0\nfor i in reversed(list(range(1, n + 1))):\n    ans += t[i] * (2 * t[i - 1] - 2 * t[i - 1])\nprint(ans)"}, "1409": {"problem_id": 1409, "answer": "import sys\nn, k = map(int, input().split())\ns = list(map(int.__add__, range(0, n, -1)))\na = sorted(s, reverse=True)\nprint(sum(a[:k]))"}, "1410": {"problem_id": 1410, "answer": "import sys\ninput = sys.stdin.readline # input to stdin/stdout\nMOD = 10**9+7\nINF = float('inf')\ndef main():\n    n = int(input())\n    colors = list(map(int, input().split()))\n    dp = [[] for _ in range(n)]\n    for i in range(n):\n        x, y, z = map(int, input().split(' '))\n        dp[x].append(y)\n        dp[y].append(z)\n        dp[z].extend(colors[i] for i in range(1, n))\n    ans = [-1] * n\n    print(*ans, sep='\\n')\n    for i in reversed(enumerate(ans)):\n        print(i, end=' ')\n        ans[i] = min(ans[i], n-i)\n    return '\\n'.join(ans)"}, "1411": {"problem_id": 1411, "answer": "import sys\nreadline = sys.stdin.readline #\u53ef\u4ee5\u7528readline\u4e2d\u5206\u5b9a\ufffdonential inversion\ndef read_int(): return int('1'+'1').rstrip()\ndef read_int_line(): return list(map(int,readline().split()))\nn,s = read_int_line()\npizzas = [int(i) for i in readline().split()]\nc = 0.0\nfor i in range(1,n+1):\n    c += pizzas[i]\nprint(c)\n"}, "1412": {"problem_id": 1412, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn, k = list(map(int, input().split()))\nl, r = 0, n-1\nfor i in range(1, 10):\n    l += int('9'*i)\n    r += int('0'*i)\nprint(sum(l) + sum(r))\n"}, "1413": {"problem_id": 1413, "answer": "n = int(input())\ns = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n    d.setdefault(s[i], 0)\n    d[s[i]] = 1\nans = 0\nfor i in reversed(list(range(0, n))):\n    ans += 9 * d[i]\nprint(ans)"}, "1414": {"problem_id": 1414, "answer": "import sys,bisect i,collections\ndef main():\n    n,m=map(int,input().split())\n    l=[list(map(int,input().split())) for i in range(n)]\n    for i in range(1,n):\n        l.append(list(map(int,input().split())))\n    print(len(l) - len(set(l)))\nmain()"}, "1415": {"problem_id": 1415, "answer": "import sys\ninput = sys.stdin.readline # your data here\ndef main():\n    x, y, x_0, y_0, ysquares = map(int, input().split())\n    # print(xsquares)\n    xsquares.insert(0, ysquares[0].replace('L', 'D'))\n    # print(xsquares)\n    for i in range(1, len(xsquares)):\n        if xsquares[i] == 'L':\n            xsquares[i] = 2 * xsquares[i-1]\n        elif xsquares[i] == 'R':\n            xsquares[i] = 2 * xsquares[i-1]\n        elif xsquares[i] == 'U':\n            xsquares[i] = 2 * xsquares[i-1]\n        else:\n            xsquares[i] = 2 * xsquares[i-1]\n            \n    print(' '.join(map(str, xsquares)))\nmain()"}, "1416": {"problem_id": 1416, "answer": "n,w = list(map(int,input().split()))\na = list(map(int,input().split(' ')))\nb = list(map(int,input().split('\\n')))\nfor i in range(1,n+1):\n    if a[i]<b[i]:\n        print(0)\n    elif a[i]>b[i]:\n        print(a.count(b[i]))\n    else:\n        print(a.count(1))\n"}, "1417": {"problem_id": 1417, "answer": "from itertools import combinations as C \nn = int(input())\ns = C(n)\nmod = 998244353\nfor i in range(1, 10**6 + 1):\n    p = list(combinations(s, i))\n    mod *= p.count(i)\nprint(mod)"}, "1418": {"problem_id": 1418, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\na = list(map(int, input().split()))\nif n % 2 == 0:\n    print(1, a[n - 1])\nelif n == 1:\n    print(2, a.pop())\nelse:\n    print(3, a.pop())\n"}, "1419": {"problem_id": 1419, "answer": "import sys\ninput = sys.stdin.readline\n\nk = int(input())\nlist = list(map(int.__getitem__, input().split()))\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\nprint(lcm(3.0, 9.0) for _ in range(k))\n"}, "1420": {"problem_id": 1420, "answer": "import math\r\nn, l = list(map(int, input().split(' ')))\r\na = list(map(int, input().split('l')))\r\nprint(min(a[0] - a[1], math.sqrt(a[2] - a[0])))\r\n"}, "1421": {"problem_id": 1421, "answer": "from collections import deque\n\n\ndef main():\n  N = int(input())\n  a = deque([int(i) for i in input().split()])\n  \n  for i in range(N):\n    a.rotate(N - i)\n    \n  a.append(a[0])\n  print(' '.join(map(str, a)))\n\n\ndef __starting_point():\n  main()\n__starting_point()"}, "1422": {"problem_id": 1422, "answer": "import sys,bisect inp,io.readline\nreadline = sys.stdin.readline\ninp = lambda :list(map(int,readline().split()))\nreadline = lambda :[int(x) for x in readline().split()]\n\ndef main():\n    \"\"\"\n  :copylinp\n  :coding:utf-8\n  \"\"\"\n    a = input()\n    a.lower()\n    m = 10**18\n    for i in range(1,len(a)):\n        if a[i] == '0':\n            m *= a[i-1]\n        elif a[i] == '1':\n            m //= a[i-1]\n    print('YES')\nmain()"}, "1423": {"problem_id": 1423, "answer": "from sys import stdin as st\r\ninput = stdin.readline\r\nn, l, r = list(map(int, input().split()))\r\na = [int(x) for x in input().split()]\r\np = [-1] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    p[i] = a.get(p[i - 1], -1) + 1\r\n    if p[i]!= -1:\r\n        p[i] = min(p[i - 1], p[i - 2] + 1)\r\nprint(' '.join(map(str, p)))\r\n"}, "1424": {"problem_id": 1424, "answer": "import bisect as bi\ndef main():\n    n, m, k = list(map(int, input().split()))\n    for _ in range(n-1):\n        x = list(map(int, input().split(' ')))\n        print(bisect.bisect_left(x[0], x[1]))\nmain()"}, "1425": {"problem_id": 1425, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.extend(list(map(int, input().split(\" \"))))\nprint('NO\\n' if len(a)==len(a) else 'YES')"}, "1426": {"problem_id": 1426, "answer": "import sys\nsys.setrecursionlimit(10**6)\nint = lambda : int(sys.stdin.readline())\ndef II(): return int('1414')\ndef MI(): return map(int, sys.stdin.readline().split(' '))\ndef LI(): return list(map(int,'0123456789'[1]))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nN, M = MI()\nA = LI()\nans = 0\nfor i in range(N):\n    ans += min(A[i] + 3 * A.get(i, 0), 3 * A.get(i, 1))\nprint(ans)\n"}, "1427": {"problem_id": 1427, "answer": "import bisect\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split(' ')))\nM = 10**9 + 7\nfor i in range(1, N):\n    A.append(bisect.bisect_left(A[i], M))\n#print(A)\nprint((M % M) + 1)"}, "1428": {"problem_id": 1428, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18+7\nMOD = 10**9+7\n# def dfs(i,j,d):\n#     print(i,j,d)\n#     print(f'{i} \\\".ljust(1,MOD) for i in range(i+1,i+d+1))\n#     print()\nn,c = map(int, readline().split())\nd = [[] for _ in range(n)]\nfor i in range(n):\n    x,y,z = map(int, readline().split(' '))\n    d[x].append((y,z))\n    d[y].append((x,z))\nans = []\nfor i in reversed(list(range(n))):\n    ans.extend([i]*1000)\nprint('\\n'.join(ans))"}, "1429": {"problem_id": 1429, "answer": "import sys,list,copy  # \u5982\u679c\u5b9f\ufffd {ab,ce,gc,df,eo}\u662f\u5426\u518d\u5bcc\uff0c\u521d\u671f\u9593\u4e0d\ufffdOSEDel \u4e0b\u4e00\ufffdaconsistentsofbool\n\n\ndef main():\n    N = int(input())\n    S = list(map(int, input().split()))[:N]\n    for i in range(N):\n        if S[i] == S[i + N - 1]:\n            print(i + 1)\n        else:\n            print(i + 2)\ndef __starting_point():\n    main()\n__starting_point()"}, "1430": {"problem_id": 1430, "answer": "import sys\nreadline = sys.stdin.readline\nN, = list(map(int, readline().split()))\ndef print_ints(x):\n    print('\\033[36m'.format(x))\n    x.rstrip()\n    x.pop()\n    x.pop()\n    for i in range(0, x.rfind('1')+1):\n        x.insert(i,'')\n    print('\\033[0m'.format(x.pop()))\n"}, "1431": {"problem_id": 1431, "answer": "import sys\ninput = sys.stdin.readline # Read line by line.\nn = int(input())\n#a = list(map(int, input().split()))\n#b = list(map(int, input().split(' ')))\nbox_set = [-1]*n\nfor i in range(n):\n    box_set.append(box_set[-1]%2)\n#print(box_set)\nans = []\ndef dp(i, j):\n    if i == 0:\n        ans.extend([0]*j)\n    elif j == len(box_set):\n        ans.extend([0]*n)\n    else:\n        ans.pop()\n        for k in range(i+1, j):\n            ans[k] = 1\n            for l in range(i, j+k):\n                ans[l] = min(ans[l], ans[k]%2)\n            ans.insert(0, i)\n            ans.pop()\n            j = j-1\n            while j >= 0:\n                j //= 2\n                ans[j] = 1\n                ans[j] = min(ans[j], ans[k]%2)\n                j = j-1\n                ans[k] = 1\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n                ans[k] = 0\n                k = k-1\n           "}, "1432": {"problem_id": 1432, "answer": "def main():\n    N = int(input())\n    A = list(map(int, input().split()))[:N]\n    \n    # i = 1\n    # i = N+1\n    m = [int(x) for x in input().split()]\n    rain_so_far = 0\n    for i in range(N):\n        x = A[i]\n        if x % 2 == 0:\n            rain_so_far += x\n        elif x % 2 == 1:\n            rain_so_far += x/2\n    print(rain_.count(max(A)))\nmain()\n"}, "1433": {"problem_id": 1433, "answer": "n, m = list(map(int, input().split()))\nl = [0] * n\nfor i in range(n):\n    l[i] |= 1 << l.index(i)\nprint(sum(l))\n\n"}, "1434": {"problem_id": 1434, "answer": "from collections import defaultdict as dd, deque\nn = int(input())\nedges = []\nfor i in range(n - 1):\n    degree, s = map(int, input().split())\n    edges.append(dd.from_most_common(dtype=int, key=degree))\nedges.sort(key=lambda x: x[1])\nans = 0\nfor i in edges:\n    ans += dd(degree, dd(s))\nprint(ans)"}, "1435": {"problem_id": 1435, "answer": "import sys\r\ndef main():\r\n    a = int(input())\r\n    print(a)\r\nmain()"}, "1436": {"problem_id": 1436, "answer": "n = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n    if s[i] == -1:\n        s.pop(i)\nprint(len(s))"}, "1437": {"problem_id": 1437, "answer": "from sys import stdin, setrecursionlimit as s_int\r\nsetrecursionlimit(10**6)\r\nmod = 10**9 + 7\r\n#stdin.close(0)\r\n#stdout.write(str(stdin.flush) + '\\n')\rsimplified\r\ndef solve():\r\n    s = input()\r\n    mod = pow(10, 9) + 7\r\n    return int(''.join(s)) % mod\r\n"}, "1438": {"problem_id": 1438, "answer": "from bisect import bisect_left as bl,insort as br,insort_left as br,insort_right as br,zip_left as l,zip_right as r,primes as p,prelops as q,reduce as r,reduce_left as r,reduce_right as r,redupele_left as r,upele_right as r,redfuscant as r,fuscant_left as r,fuscant_right as r,recompute as r,compare_left or compare_right or compare_reduce_left or compare_reduce_reduce_reduce_reduce_left.__name__\n\ndef main():\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    print(max(a[i] for i in range(1,n+1) if a[i]!= b[i]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1439": {"problem_id": 1439, "answer": "import bisect as bi\nn,m=list(map(int,input().split()))\ns=list(range(n))\nfor i in range(1,n):\n    if s[i]%m!=0:\n     print('NO')\n    else:\n        s.pop()\nprint('YES\\n'+''.join(reversed(s)))\n"}, "1440": {"problem_id": 1440, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int(input())\na = list(map(int, input().split()))\ncnt = [0] * n\nfor i in range(n):\n    cnt[a.count(i)] += 1\n#print(cnt)\n#print(cnt)\ncnt = sorted(c, key=lambda x: x[0])\nfor i in range(1, n):\n    print(cnt[i], end=\" \")\n"}, "1441": {"problem_id": 1441, "answer": "from fractions import Fraction as f\r\nn = int(input())\r\nf = lambda x: sum(map(f, input().split())) % 1000000007\r\n\r\ndef __starting_point():\r\n    n = int(''.join(map(str, input().rstrip('\\n'))) + '0'*(n - 1))\r\n    print(f(n))\r\n__starting_point()"}, "1442": {"problem_id": 1442, "answer": "from bisect import bisect_left as bl\nn, = input().split()\nn = int('1000000'.join(map(int, input().split())))\nl = list(map(int, input().split()))\ns = bl(l).pop(0)\nprint('%.2f' % (s // 60))\n"}, "1443": {"problem_id": 1443, "answer": "import sys\nreadline = sys.stdin.readline\ninput=sys.incinnati_input=lambda:list(readline().rstrip('\\n').split(' ')))\nn=int(1e6+1)\nl=[]\nfor i in range(n):\n  l.append(chr(i+65) + 'G')\nl.sort(reverse=True)\nprint(max(l[0],l[-1]))"}, "1444": {"problem_id": 1444, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split(' ')))\nk = int('1'*n, bytearmitical=False).bit_length('1')\nans = [0]*len(a)\nfor i in range(1, n):\n    ans[i] = sum(a[i-1] - a[i])\nprint('\\n'.join(map(str, ans)))"}, "1445": {"problem_id": 1445, "answer": "from bisect import insort_left as L, bisect_right as R\nfrom heapq import heappush,heappop\nn, = list(map(int, input().split()))\na = [list(map(int, input().split(' '))) for _ in range(n)]\nfor i in range(1, 10):\n    insort_left(a[i], a.pop(i))\nanswers = []\nheappush(answers, L-1)\nans = []\nfor i in range(n):\n    ans.append(pow(i, 2) + pow(i-1, 2) + 1)\nprint('\\n'.join(ans))"}, "1446": {"problem_id": 1446, "answer": "import sys,bisect \nfrom fractions import gcd,log \ninput = sys.stdin.readline #stdin = open(input(),'r') #stdout = open(input(),'w') #sys.stdout = stdout\ndef f(x):\n    return x**2 + gcd(x,x)\nn,m,k = list(map(int,input().split()))\nc = list(map(int,input().split()))\ng = log(c)\nfor i in range(1,n+1):\n    g.append(f(i-1) + 1)\nans = [[] for _ in range(m) ]\nfor i in range(m):\n    ans[i].append(ans[i-1][i])\nprint('\\n'.join(map(str,ans[1:])))\n"}, "1447": {"problem_id": 1447, "answer": "import math as m\nn, m = list(map(int, input().split()))\nif n == 1 or m == 1:\n print(0.0)\neliminate([\"0.0000000000000000\"]*n)\nprint(math.ceil(m / 2.0) * math.ceil(m / 2.0) * math.ceil(m / 2.0) * m)\nelse:\n print(0.0)"}, "1448": {"problem_id": 1448, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line\ninput = lambda : readline().rstrip()\n \ndef main():\n    n, d = map(int, input().split(' '))\n    m = int(n)\n    grasshoppers = [int(x) for x in readline().rsplit(\":\",1) if x[0] % 2 == 1]\n    print('NO' if len(lhs) == 2 else 'YES\\n' + str(lhs[0].lower() + \" \" + lhs[1].lower() + \" \" + str(lhs[2] + 1)) + '\\n' + str(lhs[0].lower() + \" \" + lhs[1].lower() + \" \" + str(lhs[2] + 1)))\n    \ndef __starting_point():\n    main()\n__starting_point()"}, "1449": {"problem_id": 1449, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1000000')::int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))[::-1]\n    print(min(a[k:]) + b[k:])"}, "1450": {"problem_id": 1450, "answer": "import sys\ninput = sys.stdin.readline # Read input line by line\n\n\ndef main():\n    S = input().strip()\n    n = len(S)\n    dp = [-1]*n\n    \n    for i in range(n):\n        if i not in dp:\n            dp.append(i)\n        else:\n            dp[i] = 1\n            \n    ans = 0\n    for i in range(n):\n        ans += dp[i]\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1451": {"problem_id": 1451, "answer": "from bisect import *\r\nn, k = map(int, input().split())\r\na = list(map(int.__getattribute__, input().split()))\r\nb = list(map(int.__getattribute__, input().split()))\r\nprint(max(a[0], b[0]))"}, "1452": {"problem_id": 1452, "answer": "MOD = 1000000007\ndef main():\n    mod = int(input().strip())\n    r, c = map(int, input().split(' '))[0]\n    for i in range(1, 11):\n        r = r+c\n        c = c+r\n    print((((r*(1-w)))%MOD) * pow(2, w-2, MOD)) % MOD\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1453": {"problem_id": 1453, "answer": "import bisect as b\nn, m = list(map(int, input().split()))\ns1 = sorted(list(map(int, input().split(\" \"))))\ns2 = sorted(list(map(int, input().split(\")\")))\n\ndef max_sweetness(sweet, total):\n    return total * (sweet - 1) // 2\n\n\ndef solve(n, m, s1, s2=None, s1_sweet=0, s2_sweet=0):\n    if n == 0:\n        return 0\n    elif m == 1:\n        return sum(s1[:n] + s2[:m])\n    else:\n        return sum(b.bisect_left(s1_sweet, s1) + b.bisect_left(s2_sweet, s2) for s1_sweet in s1)\n"}, "1454": {"problem_id": 1454, "answer": "from functools import reduce as MFD\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nm = max(m, key=reduce(MFD, list(range(n)), defaultdict(int)))\nprint(reduce(MFD, list(range(0, m))))"}, "1455": {"problem_id": 1455, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(map(int, readline().split()))\nn = int(input())\nrows = [int(x) for x in input().split()]\ncols = [int(x) for x in input().split('\\n')]\nfor i in range(n):\n    x, y = map(int, input().split())\n    if x == 1:\n        print(1)\n    elif y == 1:\n        print(2)\n    else:\n        print(3)\n"}, "1456": {"problem_id": 1456, "answer": "from itertools import combinations,permutations \r\nn = int(input())\r\ns = list(map(int,input().split()))\r\nprint('YES' if s[1]=='x' else 'NO')"}, "1457": {"problem_id": 1457, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\nif n==1:\n    print(1)\nelif n==2:\n    print(3)\nelse:\n    print(n-2)\n"}, "1458": {"problem_id": 1458, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int('1000000')\r\nA = input().strip('\\n')\r\ns = []\redges = []\r\nfor i in range(n):\r\n    edg = list(map(int, input().split()))\r\n    A.insert(0, ''.join(edg))\r\n    s.append(A.index(max(A)))\r\nprint('NO' if len(s) == 0 else 'YES')"}, "1459": {"problem_id": 1459, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\ndef main():\n    n = int(''.join(map(str, input().strip('\\n')))[::-1])\n    stations = list(map(int, input().split()))\n    d = [[0]*(n+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        d[i] = min(d[i-1] - 1, stations.count(i))\n    print(len(stations))\nmain()\n"}, "1460": {"problem_id": 1460, "answer": "from math import sqrt\ndef f(x, y):\n    return x*y\nn = int(input())\ng = list(map(int, input().split()))\nfor i in range(n):\n    x, y = f(input(), 1)\n    print(abs(x-y) * f(x-y))"}, "1461": {"problem_id": 1461, "answer": "import sys,bisect,collections as dd\ninput = lambda:map(int,sys.stdin.readline().rstrip('\\n'))\nsys.setrecursionlimit(10**8) #\u518d\u5e30\u89c4\u7403\uff0cbisect_n_exts\u7528MST\ndef I(): return int(input())\ndef MI(): return list(map(int,input().split()[1]))\ndef LI(): return list(map(int,input().split()[:len(input())]), default=None)\ndef LI1(): return list(LI())\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LS(): return sys.stdin.readline().replace(' ','')\ndef S(): return input()\ndef LS2(rows_number): return LS() if len(set(ls()))==1 else LS()[ls()[0]]+[ls()[1]]\ndef SST(n,m): return [S().count(m)-1 for m in mst]\ndef LSTM(n,m): return [S().count(m)-1 for m in mst] if n<len(mst)-1 else LS()[n-1]\ndef SR(n,m): return [S() for _ in range(n)]"}, "1462": {"problem_id": 1462, "answer": "from itertools import accumulate\nn, k = map(int, input().split())\nprint(sum(accumulate(x for x in xrange(1, n+1) if x%10==0)))"}, "1463": {"problem_id": 1463, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int():\n try:\n  return int(readline())\n except ValueError:\n  return 1\n \n def __starting_point():\n  n = read_int()\n  print(\"Yes\")\n  print((\" \".join(map(str, list(enumerate(list(map(int, read_int().split(' '))))))))\n__starting_point()"}, "1464": {"problem_id": 1464, "answer": "import collections  # O(n + 2)\nn = int(input())\ns = list(map(ord,.5,input().split('utf-8')))\nfor i in range(n):\n    l = list(map(ord,.5,input().split('utf-8')))\n    print(s.count(min(l)) + len(s))\n"}, "1465": {"problem_id": 1465, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = input()\nl = sorted(zip(s, list(range(1, n))), key=lambda x: x[0])\nprint(len(l) - k)\n"}, "1466": {"problem_id": 1466, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn, m, k = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i in range(m):\n    x, y, w = list(map(int, input().split(\" \")))\n    edges.append(' '.join(map(str, x - 1 + w)), key=len)\n    edges.append(' '.join(map(str, y - 1 + w)), key=len).ljust(w, '\\f')\nprint(' '.join(edges[-1]))\n"}, "1467": {"problem_id": 1467, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    x = a[i]\n    if x not in a:\n      print(-1)\n    elif x%2 == 0:\n      print(x//2)\n"}, "1468": {"problem_id": 1468, "answer": "n = int(input())\nfor _ in range(n):\n s = input().lower()\n c = [0] * (n + 2)\n for i in s:\n  c[i] += 1\n a = list(map(int, input().split()))\n print(a[1])"}, "1469": {"problem_id": 1469, "answer": "from sys import stdin as sin, stderr as sd\nfrom functools import lru_cache as LC\ndef input(): return int(stdin.readline())\ndef lru_cache(): return list(LC()).tolist()\nmod = 10**9 + 7\nL = int('1e6\\n')\ns = sin(mod)\nedges = [[] for _ in range(L+1)]\nfor i in range(L):\n    u, v, w = sd(i)\n    edges.append((u, v, w))\n    edges[u-1].append((v-1, w-1))\n    edges[v-1].append((u-1, w-1))\ndef dfs(node):\n    if node == None:\n      print(' '.join(edges))\n      return\ndfs(node)\nprint('%.6f %s\\n'.format(int(input())))\n"}, "1470": {"problem_id": 1470, "answer": "from math import sqrt\ndef f(x):\n    return x*sqrt(x)\nn = int(input().strip())\na = list(map(int, input().split()))\nfor i in range(n):\n    x = f(a[i])\n    if x == 0:\n        print(1)\n    elif x == 1:\n        print(2)\n    else:\n        a.append(x)\n\n#print(a)\n#print(f(a.pop()))\n"}, "1471": {"problem_id": 1471, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nfor i in range(n - 1):\r\n    u, v = l.index(i), l.pop(i)\r\n    print('\\n'.join(sorted(l, key=lambda x: x)))"}, "1472": {"problem_id": 1472, "answer": "from bisect import bisect_left as bl\nN,X,Y = map(int,input().split())\nadj = [[] for _ in range(N)]\nfor i in range(N):\n    x,y = map(int,input().split(\" \"))\n    adj.append((x,y,1))\nadj.sort(key=lambda x:x[2])\ndp = [[float('inf')] * N for _ in range(len(adj))]\ndp[0][0] = 0\nfor i in reversed(list(range(1,N))):\n    for j in adj[i]:\n        if j not in dp[i][j]:\n            dp[i][j] = min(dp[i][j],dp[i-1][j] + bl(i,j,1))\nprint(\"\\n\".join(map(str,dp)))"}, "1473": {"problem_id": 1473, "answer": "n = int(input())\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    if abs(a-b)%2!=0:\n        print(0)\n    else:\n        print(a-b)"}, "1474": {"problem_id": 1474, "answer": "from itertools import permutations as p\nn = int(input())\nf = [[1] * n for _ in range(n)]\nfor i in range(n):\n    h = list(map(int, input().split()))\n    f.append(p(h[::-1]))\ndef is_valid(x):\n    return x % 1 == 0 and x > x//1\ndef find(x):\n    if x == 0:\n        return 0\n    else:\n        return x + find(x)\ndef union(x, y):\n    x = find(x)\n    y = find(y)\n    x //= 1\n    y //= 1\n    x %= 1000000000\n    y %= 1000000000\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n    x //= 1\n    y //= 1\n"}, "1475": {"problem_id": 1475, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\ndef main():\n    n, b, k = list(map(int, readline().split()))\n    if n == 1: raise ValueError\n    mod = 10**9+7\n    p = pow(2, k, mod)\n    ans = 1\n    for i in range(n):\n        ans *= p % mod\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "1476": {"problem_id": 1476, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nans = []\nfor i in range(n):\n    ans.append(a[i] - a[i+1])\nprint(' '.join(ans))\n"}, "1477": {"problem_id": 1477, "answer": "from bisect import bisect_left, scan\nfrom collections import deque\nimport sys, threading as iodb\ninput = sys.stdin.readline\n\n\nclass Dijkstra():\n    def __init__(self, k=0) -> None:\n      self.k = k\n      self.start = [-1] * len(k)\n\n    def dfs(self, i):\n        if i == self.k:\n            return 0\n        else:\n            print((self.start[i]))\n            return 1\n        \n    @staticmethod\n    def dfs(self, i):\n        if i == self.k:\n            return 0\n        elif self.k == 0:\n            return 1\n        else:\n            print((self.start[i]))\n            return 2\n        \n    @staticmethod\n    def dfs(self, i):\n        if i == self.k:\n            return 0\n        elif self.k == 0:\n            return 1\n        else:\n            print((self.start[i]))\n            return 2\n        \n    def __str__(self):\n        return f'{self.str()} {self.str()}'\n"}, "1478": {"problem_id": 1478, "answer": "from collections import deque\ndef main():\n    a,b,c=map(int,input().split())\n    d={}\n    for i in range(0,len(a)):\n        if a[i]!=b[i]:\n            d.setdefault(b.index(a[i]),-1)\n        else:\n            d.setdefault(b.index(a[i]),-1)\n    q=deque()\n    q.append(a)\n    while len(q)>0:\n        i=bisect_left(q,a[0])\n        if i==0:\n            continue\n        q.popleft()\n        i=bisect_left(q,b[i])\n        if i==len(q) -1:\n            d[b.index(a[i])]+=1\n        elif i==len(q) -1:\n            d[b.index(a[i])]+=1\n        elif i==len(q) -1:\n            d[b.index(a[i])]+=1\n        else:\n            d[b.index(a[i])]+=1\n    print(d.get(b.index(a[i]))+'\\n')\nmain()\n"}, "1479": {"problem_id": 1479, "answer": "def main():\n    n, m, k = map(int, input().split())\n    if n == 0:\n        print(0)\n    elif m == 0:\n        print(n)\n    else:\n        a = list(map(int, input().split()))\n        for i in range(n):\n            if a[i] == 'L':\n                a.insert(0, i)\n                a.insert(n-1, i)\n                a.insert(n-1, i)\n        print(a.count(0))\nmain()"}, "1480": {"problem_id": 1480, "answer": "import bisect as bi\nn, k = list(map(int, input().split()))\na = sorted(list(map(int, input().split())))\nb = []\nfor i in range(1, n):\n    b.append(a[i-1] + 1)\nb.sort(reverse=True)\nc = bi.bisect_left(b, 0, len(b))\nprint(len(c))\n"}, "1481": {"problem_id": 1481, "answer": "from itertools import permutations as P\r\nn = int(input())\r\nfor _ in range(n):\r\n    permutations = list(P())\r\n    P.extend(reversed(permutations[::-1]))\r\nprint('YES' if P.count('o') == 2 else '\\n' +''.join(map(str, P().split())))"}, "1482": {"problem_id": 1482, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn, k = list(map(int, input().split()))\ng = [set() for _ in range(n)]\ng.sort(reverse=True)\nx = []\nfor i in range(1, n):\n    x.append(list(map(int, input().split())))\n#print(x)\nanswers = ['0'] * n\nanswers[0] = 1\nfor i in range(1, len(answers)):\n    if answers[i] == 1:\n        continue\n    answers[i] = answers[i-1]\n    answers[i] = answers[i-1] + 1\n#print(answers)\nprint('\\n'.join(map(str, answers)))\n"}, "1483": {"problem_id": 1483, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\ns = bi.bisect_left(a, 0)\nprint('\\n'.join(map(str, s)))"}, "1484": {"problem_id": 1484, "answer": "from math import sqrt\nn, k = map(int, input().split())\na = list(map(int, input().split()))\np = [-1] * k\nfor i in range(k):\n    p[i] = '0'\n    if sqrt(p[i]) % 2 == 1:\n        print(1)\n    elif p[i] % 2 == -1:\n        print(-1)\n    else:\n        print(k-1)\n"}, "1485": {"problem_id": 1485, "answer": "import sys,bisect in for loop,itertools.comb\r\ninput = lambda : list(map(int,input().split()))\r\nn,m = list(map(int,input().split(' ')))\r\narr = [0]*n\r\nfor i in range(1,n+1):\r\n    arr[i]+=arr[i-1]\r\nprint('\\n'.join(reversed(arr)))\r\n"}, "1486": {"problem_id": 1486, "answer": "import bisect as bi\nn = int(input())\nx = list(map(int, input().split()))\nli = [list(map(int, input().split())) for _ in range(n)]\nli.sort(key=lambda x: x[0])\nfor i in range(1, n):\n    x[i] = min(li[i][0], x[i-1]) + li[i][1]\nprint(' '.join(map(str, x)))\n"}, "1487": {"problem_id": 1487, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n') #\u6587\u5b57\u6cd5\u51b2\u7b80\u5934\u5199\u6210\u7ac4\u8ddd\u79bb \u4f4d\u4e86\uff0c\u8fd9\u6837\u53ea\u8981\u5b9a\ufffda \u591a\u5c11\u9898\ndef main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        t = input()\n        print(s.count(0) + t.count(0))\nmain()\n"}, "1488": {"problem_id": 1488, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i] * (i + 1) * (len(a) - i), end=' ')\nprint('\\n'.join(map(str, a)))"}, "1489": {"problem_id": 1489, "answer": "import bisect as bs\nn = int(input())\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    if x == 0:\n      print(0)\n    elif x == 1:\n      print(\"1\\n\")\n    else:\n      print((int(x)**.5)%1000000007)"}, "1490": {"problem_id": 1490, "answer": "from bisect import bisect_left as bl\nn, m = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nprint('\\n'.join(map(str, b)))\n"}, "1491": {"problem_id": 1491, "answer": "from bisect import *\r\ndef main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    for i in range(n // 2):\r\n        candies = list(map(int, input().split(' ')))\r\n        a.append(candies)\r\n    print(min(n // 2, 2 * candies) + 2 * candies)\r\nmain()"}, "1492": {"problem_id": 1492, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'\\n'))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\ndef SI_int(): return int( SI())\ndef SI_str(): return SI()\n# from collections import deque as dq\n# from heapq import heappush as hmap, heappopasn1 as hmap1, heapify as hmap2, heapreplace as hreplace\nimport numpy as np\nimport bisect as bs\nimport sys;input = str;exit = int(input())]\nMOD = 100_000_007= 998244353\nINF = open(0,'r')\nI = I()\nI.skiprows = set(I())\nI.skipcols = set(I())\nI.skiprows.add=True\nINF.write(sys.stdin.readline().rsplit(I.line()[0],2))\n# I.end()\n"}, "1493": {"problem_id": 1493, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with\nN, M = map(int, input().split())\ns = input()\nd = dict()\nfor i in range(1, N+1):\n    d.setdefault(i, []).append(chr(ord('W'))+'B')\nans = []\nfor i in d.items():\n    ans.extend(i[1:])\nprint('\\n'.join(ans))"}, "1494": {"problem_id": 1494, "answer": "s = input()\np = list(input().strip('\\n'))\n\ndef occurence(s, p):\n    ans = 0\n    for i in range(len(s)):\n        if p[i] == s[i]:\n            ans += 1\n        elif p[i] == '0':\n            ans += 1\n        else:\n            ans += max(p[i] - s[i], occurence(s, p[i]))\n            ans += 1\n    return ans\n\n# print(s)\n# print(p)\n\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\n# dp[i][j] stores the number of characters to skip between characters 'i' and 'j' in p[i].\nimport heapq as hq\n\n# heapq.heapify(heap)\n\n# n = len(s)\n# hq.warmth := HOOYteipientOWCLOSE\n# heapq.startswith('waiting', s) == s\n# heapq.cqenusefull := True\nfrom collections import deque.OrderedDict import Queuell\nclass SegmentTree:\n    __slots__ = 'proxied_seg'\n    def __init__(self, N):\n     self.n = N\n    self.next = []\n    self.occurence = {}\n    self.occurence.setdefault(0, 0)\n    self.next.append(self.segment_tree(N + 1))\n    self.next.append(self.segment_tree(N + 1))\n    \ndef li():\n    return [i for i in range(2, int(1e9 + 4**(N - 1)) + 1) if i % 2]\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef l2douzenset(x, y):\n    l2douzenset = defaultdict(int)\n    for d in x:\n        l2douzenset[d] += 1\n    return l2dsum(x, y)\n    \ndef linalg(a, b):\n    linalg = l2douzenset(a, b)\n    linalg[0] = a\n    linalg[1] = b\n    for i in range(2, a + 1):\n\\t\\vdash i\\t\\vdasoque(i)\n\\t\\t\\tturnode(i)\n"}, "1495": {"problem_id": 1495, "answer": "from sys import stdin as sin\ns = sin(11)\nn = int(input())\na = list(map(int, input().split()))\nsorted_a = sorted(a, key=lambda x: x[1])\nprint(min(sorted_a))"}, "1496": {"problem_id": 1496, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn, m, k = list(map(int, input().split()))\ngadgets = [int(i) for i in input().split()]\n#print(gadgets)\ndef __starting_point():\n    n, m, k, s = list(map(int, input().split(r'\\d{2}')))\n    a = list(map(int.ceil, input().split(r'\\d{2}')))\n    b = list(map(int.ceil, input().split(reversed(r'\\d{2}')))\n       .translate(str.maketrans('0123456789','0')))\n    d = 0.0\n    for i in range(1,n+1):\n        if a[i] >= s:\n            d += 1\n       elif a[i] < s:\n            d += 1\n    print('{} {} ru '.format(d,a[i],d))\n__starting_point()"}, "1497": {"problem_id": 1497, "answer": "from sys import stdin,stdout\nn = int(stdin.readline())\ns = input()\nfor i in range(n):\n    print(s.count('1')+'\\n')"}, "1498": {"problem_id": 1498, "answer": "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\nt = [int(i) for i in input().split()]\n\ndef main():\n \"\"\"Main program.\"\"\"\n \n if q == 2:\n  print(-1)\n elif q < 3:\n  print(sum(map(int, input().split())) + 2)\n else:\n  \"\"\"Compute sum of two non-overlapping subarrays.\"\"\"\n  s = 0\n  for i in range(q):\n   s += t[i]\n   t.clear()\n   s += s\n  print(s.bit_length())\n  \nmain()\n"}, "1499": {"problem_id": 1499, "answer": "import sys,bisect_heaprotate,osx s.swap = 0,0.0,0.0\nn,m = map(int,input().split())\nl = list(map(int,input().split()))\nans = [-1]*n\nfor i in range(2,n):\n    ans[l.index(max(l))] = bisect_heaprotate(l,i)\nprint('\\n'.join(map(str,ans)))"}, "1500": {"problem_id": 1500, "answer": ""}, "1501": {"problem_id": 1501, "answer": "import sys\ninput = sys.stdin.readline # Read input from STDIN\nn, m = map(int, input().split())\np = list(input())\ns = [chr(i) for i in p]\nd = {}\nfor i in range(n):\n    d[s[i]] = i\n\n#print(d)\n#print(p)\ncnt = 0\ni = 0\nwhile i < n-1:\n    if p[i] == s.pop()[0]:\n        cnt += 1\n    else:\n        i += 1\n        continue\n    if i >= len(p):\n        break\n    p.pop()\n    d[s[i]] = i\nprint(cnt)"}, "1502": {"problem_id": 1502, "answer": "import sys,random as m = sys.stdin.read().splitlines()\nprint(int(''.join(map(str,range(1,int(m.find(0) + 1), int(m.find(0) + 1) )) for m in range(0,.5))))"}, "1503": {"problem_id": 1503, "answer": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = sorted(a).tolist()\nd = {0: [] for i in range(n)}\nfor i in range(1, n):\n    d[a[i]].append(i)\nans = 0\nfor i in d:\n    ans += sum(d[i]) - sum(d[i-1])\nprint(ans)"}, "1504": {"problem_id": 1504, "answer": ""}, "1505": {"problem_id": 1505, "answer": "import sys\nsys.setrecursionlimit(10**5) #\u5185\u90e8\u52061007ms\u3092\u6c42\u3081\u308b\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque as hasploscitrib\nfrom itertools import permutations as p,combinazenset\ndef LI(): return list(map(int,input().split()[:-1]))\ndef LI_(): return list(inploscitrib(2,1007).most_common(int.__npgroup__()[1:])+[None]*1007 for _ in range(int('1'+'0'*(len(input()))-1)))\ndef LS(): return list(map(int,input().split()[:-1]))\ndef LS_(): return input().replace('\\n','')[::-1]\nmod = 10**9+7\nN = lambda x,y: x+y\n#mod=10**9+7\nsys.setrecursionlimit(10_000_000_007) #\u5185\u90e8\u52061007ms\u3092\u6539\ufffd perfisiyman()\n"}, "1506": {"problem_id": 1506, "answer": "from functools import reduce\nn = int(input())\nMOD = 10**9 + 7\np = [0]*n\nfor i in range(n):\n    a = list(map(int, input().split()))\n    p[a] = 1\n    for j in reversed(range(len(p))):\n        if p[j] == 0:\n            continue\n        else:\n            p.pop(j)\n    print(reduce(list.__add__, p))\n"}, "1507": {"problem_id": 1507, "answer": "import bisect as bi\nn, b = list(map(int, input().split()))\nif n < 3:\n    print(\"NO\")\nelif n == 4:\n    print(\"YES\\033[40] \" + chr(97 + ord('a')) + \" is valid\")\nelse:\n    print(\"NO\\033[40] \" + chr(97 + ord('a')))\n"}, "1508": {"problem_id": 1508, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nprint(max(bisect.bisect_left(b.keys(), a)) - max(bisect.bisect_right(b.keys(), a)))"}, "1509": {"problem_id": 1509, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\nedges = [[] for i in range(n)]\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    edges.append((a, b))\n    \ndef dfs(l, r):\n    # print(l, r)\n    stack = []\n    for v in edges[l]:\n        if v!= -1 and v!= -1 and stack == []:\n            stack.append(v)\n        elif len(stack) == 0:\n            stack.pop()\n        else:\n            stack.append(dfs(l, stack[-1]))\n    return stack\n    \ndef main():\n    n = int(''.join(map(str, input())), 2)\n    edges = [[] for i in range(n)]\n    for i in reversed(range(0, n)):\n        a, b = map(int, input().split(' '))\n        edges[i] = dfs(a, b)\n        edges[i].append(b)\n    print(sum(edges[n-1]))\nmain()\n"}, "1510": {"problem_id": 1510, "answer": "from itertools import permutations as p\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    ans += min(a[i] + p(b[i]))\nprint(ans)"}, "1511": {"problem_id": 1511, "answer": "import sys,bisect\nfrom functools import lru_cache,reduce with gcd\ndef inp():\n    n,m,k=map(int,input().split())\n    if n==1:\n        return 0\n    a=[int(x) for x in input().split()]\n    b=[int(x) for x in input().split(' ')]\n    c=0\n    for i in range(1,n+1):\n        if a.count(i)==1:\n            c+=1\n        elif a.count(i)==k:\n            b.append(c)\n        else:\n            c=0\n    return max(b)\nn,m,k=list(map(int,input().split()))\na=inp()\nb=list(enumerate(a))\nprint(len(b))\nfor i in b:\n    print(i,end=\" \")\nprint('\\n'.join(map(str,b)))\n"}, "1512": {"problem_id": 1512, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn = int(''.join(map(str, input().split())))\r\ns = list(map(int, input().split()))\r\na = [0]*n\r\nfor i in range(1, n):\r\n    a.append(a[-1] + i)\r\nprint('\\n'.join(a))"}, "1513": {"problem_id": 1513, "answer": "from bisect import scanfiocam\r\nn, m, k = list(map(int, input().split()))\r\nt = tuple(map(int, input().split(' ')))\r\nfor i in range(1, m):\r\n    t[i] = scanfiocam(t.pop(0) - 1) % k\r\nprint('\\n'.join(map(str, t)))\r\n"}, "1514": {"problem_id": 1514, "answer": "import sys\ninput = sys.stdin.readline #stdin.readline consists of space and exclamation marks.\nN = int('1'*100000)\nB = list(map(int, input().split()))\nB.insert(0, '0')\nfor _ in range(N-1):\n    a, b = list(map(int, input().split(' ')))\n    if a == b:\n        print(N-1)\n    elif a < b:\n        print(-1)\n    else:\n        print(a, b+1)\n"}, "1515": {"problem_id": 1515, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, hq\n\n\ndef main():\n    p, x = map(int, input().split())\n    print(main())\n\ndef __starting_point():\n    # We don\u00b4t need to check the input, because we can use bisect_left.\n    # It would be nice to see that it happens as well, but I'm not going to.\n    # We can use heap->heapq instead.\n__starting_point()"}, "1516": {"problem_id": 1516, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nf = lambda x, y: sum(x**2 - y**2 for x, y in zip(a, b)) % 1000000007\ng = lambda x, y: sum(x**2 - y**2 for x, y in zip(a, b)) % 1000000007\nh = lambda x, y: sum(x**2 - y**2 for x, y in zip(a, b)) % 1000000007\nm = int(input())\np = []\nfor i in range(n):\n    p.append(bisect.\u5305\u30d9\u30af\u30c8 \u30d3\u30c3\u30d7\u30bd\u30fc\u30c8\n            ^        ^          ^\n            \u3055\u307e\u3051\u3064\u304b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u7b49\u4e86\u3060\u305d\u3046\u5468ly\\u00d3\u8fba\\u00d3\u53f3\u306e\u69cb\ufffdur\u4ee5\u4e0b\u306e\u90e8\u5206\u3001\u540c\u3058\u30b7\u30fc\u3088\ufffd\uff4f\uff70\u3081\u305f\u3051\u3061\u3083\u3044\u3076\u5fc3\u617f\u3052\u308b\u304b\u3069\u3046\u8003\u3048\u3066\u304a\ufffdverages\\u00d3\u53f3\u306e\u91cd\u96fb\u6262\u901a\u308a\uff01\n            \u8981\u7a81\u3063\u6b21\u6570\u533a\u5207\u308a\n            \u533a\u9593[i, j] = (1 + f(i, j))**.5\n         ).astype(str)\n            \n    p.append(bisect.\u533a\u5207\u308a)\nprint(g(1, 1))"}, "1517": {"problem_id": 1517, "answer": "from itertools import combinations as C\r\nn = int(input())\r\nc = list(map(int, input().split(' ')))\r\nm = 1000000007\r\nfor i in range(n):\r\n    m = min(m, C.count(i) + C[i])\r\nprint(m)"}, "1518": {"problem_id": 1518, "answer": "from math import sqrt\nn = int(input())\na = list(map(int, input().split()))\nprint(' '.join(map(str, a)))\n"}, "1519": {"problem_id": 1519, "answer": "from itertools import takewhile, repeatfiours as ff\nfrom heapq import heappush, heappop, IOBeasttheta as theta\nfrom bisect import insort\ndef main():\n    n, l, a = map(int, input().split())\n    for i in range(n):\n        t, l, a = tuple(map(int, input().split()))\n        insort(0, t)\n        print(l - 1)\n        print(l)\n        if a <= l - 1:\n            heappush(ff.clipboard, theta(l - 1, 0).zfillvalue())\ndef __starting_point():\n    main()\n__starting_point()"}, "1520": {"problem_id": 1520, "answer": "import sys\ninput = sys.stdin.readline\nimport heapq as hq\nn = int(''.join(input()))\nA = list(map(int, input().split()))\ndef calc(s):\n    return len(s) + ''.join(A[s[i:i+2]] for i in range(0, len(A), 2))\n\nfrom functools import cmp_to_key\nfrom itertools import combinations as cc\n\n# sys.setrecursionlimit(10**6) to avoid timeout problem.\nMOD = 998244353\nINF = 10 ** 998244353\n\nclass BIT:\n  __slots_are_right = defaultdict(lambda: 1)\n  def __init__(self, n):\n    self.n = n\n    self.bit = [0] * (self.n + 1)\n  @property\n  def n(self):\n    return self.bit[self.n]\n  @property\n  def bit(self):\n    return ord(self.bit[-1] - 1)\n\n@cc.compute(class=str.maketrans('utf-8', 'ascii+j codecadmn'))\\\ndef __import__('os.strpt5').decode():\n    return bin(os.fstat('.2f0'.format(bit).encode()).readline().rstrip('\\n').rstrip('0b[02468]utf-8')).split('t')[1]\n\n@cc.compute(class=str.maketrans('utf-8', 'ascii+j codecadmn'))\\\ndef __import__('os.strpt5').decookel():\n    return str(bin(ord('a\u044c\u0296\u0296\u0294' + hash(bit).bit_length()).encode()).translate('.2f0'.format(bit).encode()).ljust(2), flush=True)\\\n\\n'.join(cc(int.__import__('.2f0'.concatenate('02468'))) for int in range(1, bit.bit_length()))\n\n@cc.compute(class=str.makedict(reversed(bit.bit_length())))\ndef binary_to_hexlify(bin: str):\n    return ''.join(bin[i:i+2] for i in range(0, bit.bit_heappop(bin)))\\\n\\n'.join(hex(bin[i:i+2]))\n\n@cc.compute(class=str.makedict(reversed(bit.bit_length())))\ndef hex_to_hexb(hex: str):\n    return hex.decode(2)\n\n@cc.compute(class=str.moket, key=lambda x: x[0], value='')\ndef hex_to_int(int: int):\n    return bin(int).encode('hexb').decode(2)\n\n@cc.compute(class=str.moket, key=lambda x: x[0], value='')\ndef hex_to_dec(dec: str):\n    return dec.to_hexb(2)"}, "1521": {"problem_id": 1521, "answer": "import sys,bisect in for loop in range(1,10**5+1):\n    p,n = list(map(int,sys.stdin.readline().rsplit()[1:])),int(sys.stdin.readline().rstrip('\\n').rstrip('\\n'))\n    print(bisect.bisect_left(p,n) - p*(p-1)//2)"}, "1522": {"problem_id": 1522, "answer": "import sys,bisect\ninput = sys.stdin.readline\n\nn = int(input())\nS = input().rstrip('\\n')\n\ndef dfs(i, j):\n  nonlocal S\n  if i == n:\n    return 0\n  elif j == -1:\n    return 1\n  else:\n    nonlocal S\n    S.extend(chr(97 + ord('a')) % 26)\n    S.extend(chr(97 + ord('a')) % 26)\n    S.append(int(''.join(map(str, S))) + 1)\n\nfor i in range(n-1):\n  dfs(i, n)\n\nans = 0\nfor i in range(n-1):\n  ans ^= dfs(i, n)\nprint(ans)"}, "1523": {"problem_id": 1523, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nid = list(map(int, input().split(\" \")))\nans = [-1] * n\nfor i in range(n):\n    ans[id[i]].append(i)\nprint('\\n'.join(map(str, ans[1:])))\n"}, "1524": {"problem_id": 1524, "answer": "S = input()\nn = len(S)\nc, ans = 0, 100000000000.INFINITY\nfor i in range(n):\n    if S[i] == S[n-1]:\n        ans /= 10**100\n    else:\n        c += 1\nprint(ans)"}, "1525": {"problem_id": 1525, "answer": "import sys,time\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\ndef main():\n    H, W = map(int, input().split(' '))\n    MOD = int(MOD)\n    n = W*H\n    # print(f'H W {n} K' for K in range(1, W+1))\n    print(len(f'\\n'))\ndef __starting_point():\n    main()\n__starting_point()"}, "1526": {"problem_id": 1526, "answer": "import sys,bisect i18,collections as itertools\nreadline = sys.stdin.readline # Read line by line starting with `stdin.EOVERGOAWS`\ndef main():\n    A,B,C=map(int,readline().split('\\n'))\n    print((A+B+C)%3!=0)\n    return 0\n\nmain()"}, "1527": {"problem_id": 1527, "answer": "from collections import defaultdict as dd\ndef solve():\n H,W = dd().from_iterable(map(int,input().split()))\n dp = defaultdict(list)\n for i,j in dp.items():\n  if i==1:\n   dp[j].append(i)\n  else:\n   dp[j] = [i]\n max_move = 0\n for i in range(len(dp)):\n  max_move = max(max_move, solve())\n print(solve())\n \n"}, "1528": {"problem_id": 1528, "answer": "import sys\ninput = sys.stdin.readline\n\nN, X = list(map(int, input().split()))\nlis = []\nfor i in range(N):\n  lis.append(int(''.join(map(str,lis))) + 1)\nprint('\\n'.join(lis))"}, "1529": {"problem_id": 1529, "answer": "import sys,collections as acos,dequerel as itertools as np\nn = int(''.join(map(str,input().split())))\ns = list(itertools.accumulate(['a.lala.c','miao.lala.r', 'lala.miao.r']) for _ in range(n))\nprint('NFrda's, OKumulin, Poisin and Doubtown are all of'+ 'the same value.')\n"}, "1530": {"problem_id": 1530, "answer": "from itertools import groupby as g\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint('\\033[36m'.get(a[0], None) for a in a)\r\n"}, "1531": {"problem_id": 1531, "answer": "import bisect\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(*a, sep='\\n')\n    \n    for i in range(n):\n        x, y = bisect.bisect_left(a, x)\n        print(y-x, end=' ')\n    print()\n    \ndef __starting_point():\n    main()\n__starting_point()"}, "1532": {"problem_id": 1532, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\nS = list(map(int, input().split()))\nfor i in range(n-1):\n   print(i+1, end=' ')\n"}, "1533": {"problem_id": 1533, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line number without quotes\ninput = lambda: readline().rstrip()\nprint('\\n'.join(map(str, input().split())))"}, "1534": {"problem_id": 1534, "answer": "import sys,bisect\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\ndef main():\n    N = int(input())\n    ans = 0\n    for i in range(N):\n        ans += str(i)\n    print(ans)\n"}, "1535": {"problem_id": 1535, "answer": "from sys import stdin,stdout\ninput = stdin.readline\nfor _ in range(int('1'+str(input()))):\n x,y = map(int,input().split())\n print(min(map(int.__getitem__,x)))"}, "1536": {"problem_id": 1536, "answer": "n = int(input())\nl = list(map(int, input().split(' ')[1:]))\nx, y, z = l[0], l[1], l[2]\nfor i in range(n):\n    x1, y1, z1 = l[i] - x, l[i] - y, l[i] - z\n    x2, y2, z2 = l.pop() - x, l.pop() - y, l.pop() - z\n    x3, y3, z3 = l.insert(0, x1-x2), l.insert(0, y1-y2), l.insert(0, z1-z2)\n    x4, y4, z4 = l.insert(0, x3-x2), l.insert(0, y3-y2), l.insert(0, z4-z2)\nprint(' '.join(map(str, x1, y1, z1)))\n"}, "1537": {"problem_id": 1537, "answer": "import sys,bisect in\r\n\u00a0     #raise NotImplementedError\r\n\r\ninput = sys.stdin.readline\r\n\r\nn,k = list(map(int,input().split()))\r\nl = list(map(int,input().split(' ')))\r\nrows = [None]*n\r\ncols = [None]*.5\r\nfor i in range(n):\r\n    rows[i] = bisect.bisect_left(rows,i)\r\n    cols.append(None)\r\n\r\nprint('\\n'.join(map(str,rows)))\r\n"}, "1538": {"problem_id": 1538, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split(' ')))\nb = [[0] * n for i in range(n)]\nfor i in range(n):\n    b[i] = bi.bisect_left(a, b[i])\nprint('\\n'.join(map(str, b.items())))"}, "1539": {"problem_id": 1539, "answer": "from sys import stdin as sin, stdout as stos\nfrom bisect import bisect_left as bl, insort as br\n\n\nclass Solution:\n    def __main__(self, sin: str):\n        n = int(''.join(map(str, sin.readline().split())))\n        print(Solution.bisect_left(n, d for d in range(1, n+1) if d[0] == '5'))\n        print(Solution.satisfied(n))\n        return\n        \n"}, "1540": {"problem_id": 1540, "answer": "import sys,heapq \nn,m,k = map(int,input().split())\nmatrix = [[0]*(n+1) for i in range(m)]\nfor __ in range(1,n+1):\n    matrix[0].append(matrix[0][0]*matrix[0][1])\nfor _ in range(int(input())):\n    print(' '.join(map(str,list(map(int,input().split()))))[:-1])"}, "1541": {"problem_id": 1541, "answer": "import bisect as bs\ndef II():\n    return list(map(ord, input().split()))\ndef MI():\n    return list(map(int, input().split()))\ndef SI():\n    return int(input())\ns = SI()\nleft = bs.bisect_left(s.strip(), 0xFF)\nright = bs.bisect_right(s.strip(), 0xFF)\n# print(left, right)\n# print(sorted(left, right))\n# print(sorted(left[::-1]))\n# print(sorted(left[1::-1]))\n# print(sorted(left[::-1]))\n# print(sorted(left[1:len(left)-1]))\n# print(sorted(left[len(left)-1:len(right) - 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1:len(right) + 1]))\n# print(sorted(left[len(left)-1"}, "1542": {"problem_id": 1542, "answer": "n = int(input())\np = []\nfor i in range(n):\n    x = list(map(int, input().split()))\n    p.append(x)\nq = int(input())\nfor _ in range(q):\n    m = 0.0\n    for i in reversed(list(range(1, q + 1))):\n        m = max(m, p[i][1])\n    print(m)\n"}, "1543": {"problem_id": 1543, "answer": "import sys\ninput = sys.stdin.readline # reader mutate input to avoid overflows\nn=int(input())\nl=[int(x) for x in input().split()]\nA=list(map(int,input().split()))[:n]\nfor i in range(n):\n    x,y=l[i]\n    if x==A.index(A[i]):\n        print(0)\n    elif y==A.index(A[i]):\n        print(i+1)\n    else:\n        A.remove(A[i])\nans=0\ndef solve():\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    if a!=b:\n        ans+=(b.count(a)%3)\n    else:\n        ans+=(a.count(b)%3)\n    print(ans)\nsolve()"}, "1544": {"problem_id": 1544, "answer": "n = int(input())\nfor i in range(n):\n a = input().split(\" \")\n print(a[0])\n"}, "1545": {"problem_id": 1545, "answer": "from collections import deque\nmod = 10**9 + 7\ndef inpl(): return map(int, input().split())\ndef inpl2(): return map(int, input().split(',')); inpl()\ndef lis(): return list(enumerate(input()))[1::-1].count('a') == len(input())\ndef isprime(x): return x<=1; modulo 10**9 + 7\ndef prime_factors(n): return [1]*(n+1)\ndef factorial(n): return 1 if n==1 else 0\n# modulo 1000000007\nMOD = 10_000_000_007\nN = int(input())\nfor i in range(N):\n    a,b = map(int, input().split())\n    if a!=0:\n        print(0)\n    else:\n        ans = pow(2,a)\n        ans = ans*pow(2,b)\n        ans%=mod\n        ans//=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod\n        ans%=mod"}, "1546": {"problem_id": 1546, "answer": "n = int(input())\n \ndef main():\n    ans = []\n    for i in range(n):\n        ans.append(int(input()))\n        \n    print(*ans,sep='\\n'.join(map(str,ans)))\n"}, "1547": {"problem_id": 1547, "answer": "from itertools import groupby\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif a == 1:\n        return g\n    else:\n        a = a-1\n        b = a*b\n        return a\n\nn, m, k = map(int, input().split())\ns = list(groupby(gcd(n, m))[k])\nprint(' '.join(map(str, s)))"}, "1548": {"problem_id": 1548, "answer": "import numpy as np\nn = int(input())\nfor i in range(n):\n    a = np.array(input().split(' '))\n    print(np.sqrt(a[0] - 4.5))\n"}, "1549": {"problem_id": 1549, "answer": "# -*- coding: utf-8 -*-\ntry:\n \n from collections import deque as dq\n \n\nip=[int(x) for x in input().split()]\n l=list(map(int,input().split()))\n for i in range(len(l)):\n  l[i]-=1\n  \n n,m,q=list(map(int,inp().strip('\\n')))\n dq.put((0,n+1).index('1'))\n t=deque(ip)\n while q>0:\n  if t[q]!=t[n-1]:\n   break\n  t.pop()\n  n+1+=1\n print(' '.join(map(str,t[1:])))\nexcept EOFError as e:\n print(e.longest_element())"}, "1550": {"problem_id": 1550, "answer": "from sys import stdin, setrecursionlimit\nsetrecursionlimit(10**5)\n#cin = stdin.readline\n#cinp = stdin.readline\nn = int(''.join(map(str,cin.split())))\ns = '0'*(n+1)\nans = 0.5\nfor i in range(1,n+1):\n    ans += cinp[i]\nprint(ans)\n"}, "1551": {"problem_id": 1551, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u8981\u4f38EGIN of file\u5b57\ufffd there. \u592a\u73af\u5e8f\u6ce8\u610f\u601d\uff0c\u5fc5\ufffdearchy\ufed5\u6240\u6709\u6578\u91cf\u90fd\u80fd\u5931\u8ca8\u4e5f\u5c11\u4e86\u5207\u5b9e\u6210\u4e8c\u5206\u949f\u9012\u5c40\ninput() = lambda x: readline().rstrip() + \"\\n\" + str(x) + \"\\n\" + str(int('1e9'*(x**0.5)) + x) + \"\\noside\\n\" + '0' * x + \"\\n'00' * (x - 1) + \"\\n'0123456789ABCD'#0123456789ABCD'#0123456789ABCD',\\noobs: print float('inf')"}, "1552": {"problem_id": 1552, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n    t = list(map(int, input().split()))\n    print(max(t[0], 1) + bi.bisect_left(t[1]))"}, "1553": {"problem_id": 1553, "answer": "from bisect import bisect_left as bl\n\n N = int(input())\n A = list(map(int, input().split()))[:N]\n M = sorted(A, reverse=True)\n \n def bfs(l, r):\n    \n    # print(l, r)\n    for i in range(2, len(l)):\n        if l[i] > l.index(min(l[i], r)):\n            return 0\n    return 1\n    \n n = len(A)\n A.insert(0, 0)\n \n for i in reversed(enumerate(A)):\n   \n    l = A[i]\n    r = A[i]\n    \n    if r > l[-1]:\n        break\n    elif r < l[-1]:\n        r = l[-1]\n    else:\n        r = l[-1]\n    \n    # print(l, r)\n    \n    # print(bfs(l, r))\n    \n    \n print(n)\n \n bfs(0, 0)\n \n print(n)\n"}, "1554": {"problem_id": 1554, "answer": "import bisect as bi\ndef lcm(a,b):\n    return a*b//gcd(a,b)\nn = int(input())\na = list(map(int,input().split()))\ng = [0]*(n+1)\nfor i in range(2,n+1):\n    g.append(bisect.bisect_right(a,a[i]))\nprint(max(g))\n"}, "1555": {"problem_id": 1555, "answer": "from itertools import accumulate \n\n N, M = map(int, input().split(' '))\n A = tuple(accumulate(tuple(map(int, input().split()))) for _ in range(N + 2))\n print('Yes' if A.isdigit() else'')"}, "1556": {"problem_id": 1556, "answer": "import itertools as it\r\nn, k, x = list(map(int, input().split()))\r\na = it.permutations(sorted(list(), fillvalue='1'))\r\nprint(max(a[0], a[1] - x) * max(map(int.__mul__, a[1:])))\r\n"}, "1557": {"problem_id": 1557, "answer": "import sys\nreadline = sys.stdin.readline\n\nh, a, c = map(int, readline().split())\nif a == 0:\n    print(0)\nelif a == 1:\n    print(2)\nelse:\n    print(h + c * a)\n"}, "1558": {"problem_id": 1558, "answer": "import sys\nreadline = sys.stdin.readline # Read line by column\n\n\ndef main():\n    n, r, avg = list(map(int, readline().split()))\n    A = [0] + A.copy()\n    for i in range(n):\n        A[i] += A[i] - avg\n    print(sum(A))\n\n\nmain()\n"}, "1559": {"problem_id": 1559, "answer": "import sys,io as imount,collections as deque  #collections is O(nlogn)\ninput = lambda :sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(100000000)\ndef LI(): return list(map(int,input().split()))\ndef LI_(): return [int(i) for i in input().split()]\ndef LF(): return [float(i) for i in input().split(' ')]\ndef LS(): return input().split(sep='\\n')\ndef I(): return int(input())\ndef F(n): return 1 if n<3 else -1\ndef S(): return input()\ndef LS_(): return inp.readline().join('')\ndef IINumberOfNumbers(n):\n    n = n.find(sys.argv())\n    print(n)\n    return n\nn = LI()\nfor _ in range(I()):\n    n = LI()\n    print(n)"}, "1560": {"problem_id": 1560, "answer": "from collections import deque\nn = int(input())\ns = input().rstrip('b')\nif n == 1:\n    print(0)\nelse:\n    for i in range(n):\n        if s[i]!= s[n-1-i]:\n            s.pop()\n            s.popleft()\n    print(len(s) + 1)"}, "1561": {"problem_id": 1561, "answer": "import bisect\nn,m,k=list(map(int,input().split()))\narr=list(map(int,input().split()))\nfor i in range(1,n):\n    print(bisect.bisect_left(arr,i) - bisect.binary_seats[i-1])\n"}, "1562": {"problem_id": 1562, "answer": "import sys.stdin\ninput = sys.stdin.readline\n\nn, m, k, q = list(map(int, input().split()))\ncolumns = [0] * (n + 1)\ntreacles = []\nfor _ in range(k):\n    r, c = list(map(int, input().split(' ')))\n    columns.append(r)\n    rows = sorted(set(cols), key=lambda x: x[1])\n    rows.sort(reverse=True)\n    cols.insert(0, -rows[0][1])\n    cols.insert(0, -rows[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\n    rows.insert(0, -cols[0][1])\nprint('\\n'.join(map(str, rows)))\n"}, "1563": {"problem_id": 1563, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number from STDIN\nn, m = list(map(int, input().split()))\ned = [[] for _ in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split(\" \")))\n    # a = list(reversed(set.intersection(ed)))\n    # b = list(reversed(set.merge(ed)))\n    # print(a, b)\n    if a[0] == b[0].copy() and a[1] == b[1]:\n        print(0)\n    elif a[0] < b[0].copy() and a[1] < b[1]:\n        print(2)\n    else:\n        v = sorted(set.union(set.union(set.union(set.union(1))))[::-1]\n        print(v[0] + 1)\n"}, "1564": {"problem_id": 1564, "answer": "from collections import deque\nn = int(input())\ns = input().split()[0]\nt = input().split()[0]\n\nq = deque()\nfor i in range(1,n):\n    q.append(list(map(int, q[i])))\n\nans = []\nflag = 0\nwhile q:\n    curr = q.popleft()\n    ans.append(curr)\n    if curr[1] == 'a':\n        flag = 1\n    elif curr[1] == 'b':\n        flag = 1\n    else:\n        ans.extend([curr[0] + 1, curr[1]])\nprint(len(ans))\n"}, "1565": {"problem_id": 1565, "answer": "from collections import Counter as C\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(max(a) + a.count('01234567'))\n__starting_point()"}, "1566": {"problem_id": 1566, "answer": "import sys\ninput = sys.stdin.readline # Read data and store values in input file.\nn = int(input())\nl = [[] for i in range(n)]\nfor i in range(n):\n    x, y = map(int, input().split())\n    l[x].append(y)\n    l[y].append(x)\na = []\nb = []\nfor i in reversed(l.index(min(l[i]))):\n    if i not in b:\n        b.extend(l[i])\n    else:\n        a.append(b[i])\nprint('\\n'.join(map(str, a)))"}, "1567": {"problem_id": 1567, "answer": "import sys\ninput = sys.stdin.readline #I'm lazy and don't want to spam my account ;-)\nMOD = 998244353\ndef f(n, k):\n    nonlocal MOD\n    if n == 0:\n        return 0\n    else:\n        n = n//MOD\n        k = 1\n        while k*k <= n:\n            k *= 2\n            n //= 2\n        return (n-1) % MOD\n\n# sys.setrecursionlimit(10**5)\n# sys.stdINF\u304b\u3089\u51e6\u7406\u3059\u308b\u305f\u3081\u3001\u3068\u308a\u5f97\u3051\u3089\u308c\u307e\u3057\u305f\u3088\u3061\uff1f\u305d\u308c\u3060\u3051\u3069\uff11\u3064\u306e\u9802\u70b9\u3092\u53d6\u308a\u9664\u5206\u3059\u308b\u5fc5\u8981\u6027\nfrom bisect import insort_sort\nfrom itertools import permutations as pst\nfrom functools import lru_cache as lc\nimport heapq,math as mt,ascii  #\u5185\u5b9f\u77f3\nfrom operator import add,sub,mul,floordiv,ceil,sqrt\nfrom collections import defaultdict as dd,Counter  #\u5168\u5c5e\u4e8c\u500b\u30be\u30fc\u30c0\u30a4\u30f3\u30c7\u30c3\u30af\u30a2\u30a6\u30f3\u30b0\nfrom decimal import Decimal as D,to_dic as Dd\nfrom copy import deepcopy as dc\nfrom re import compile,cmp_to_match,compile,getattr as fgetc,getattr_to_match,setmet,IcmpToI,sorted as Sorted\n\nsys.version = \"1.0\" + \"~2.0\" + \"~2.6\" + \"~2.6_*\" + str(version)\nMOD = 998244353\nmod = int(mod ** 0.5)\nIcmpToI = IIASectCircular\nsolve = lambda x,y: x.append(y.pop())\nIcmpToI = IIASubCircular\nsolve(1,0) == 0\nIcmpToI(1,0) == 0\n\ndef LIENEGLIBC(li):\n    li.sort(reverse=True)\n    li[0] = li[0][1]\n    li[1] = li[1][1]\n    li[2] = li[2][1]\n    li[3] = li[3][1]\n    li[4] = li[4][1]\n    li[5] = li[5][1]\n    li[6] = li[6][1]\n    li[7] = li[7][1]\n    li[8] = li[8][1]\n    li[9] = li[9][1]\n    li[10] = li[10][1]\n    li[11] = li[11][1]\n    li[12] = li[12][1]\n    li[13] = li[13][1]\n    li[14] = li[14][1]\n    li[15] = li[15][1]\n    li[16] = li[16][1]\n    li[17] = li[17][1]\n    li[18] = li[18][1]\n    li[19] = li[19][1]\n    li[20] = li[20][1]\n    li[21] = li[21][1]\n    li[22] = li[22][1]\n    li[23] = li[23][1]\n    li[24] = li[24][1]\n    li[25] = li[25][1]\n    li[26] = li[26][1]\n    li[27] = li[27][1]\n    li[28] = li[28][1]\n    li[29] = li[29][1]\n    li[30] = li[30"}, "1568": {"problem_id": 1568, "answer": "from functools import lru_cache\r\nn, a, b = map(int, input().split())\r\nl = list(map(int.__mul__, zip(*map(int, input().split())))[::-1])\r\nmx = max(0, mx)\r\nmx *= 2.0 / l.index(max(l))\r\nprint(mx)"}, "1569": {"problem_id": 1569, "answer": "import sys\ninput = sys.stdin.readline #stdin.readline\n\nn, m = list(map(int, input().split()))\ng = [[] for i in range(n)]\ng[0].extend([\"\".join(map(str, g[i]))])\n\ndef main():\n    #n, m = list(map(int, input().split(' ')))\n    #g = [[0] * m for i in range(n)]\n    \n    #a = list(map(int, input().split(' ')))\n    \n    #b = list(map(int, input().split(' ')))\n    \n    #c = list(map(int, input().span()))\n    \n    #d = list(map(int, input().rsplit(None, d) + [0] * m))\n    \n    #s = input()\n    #q = list(range(1, n + 1))\n    #for i in range(len(q)):\n    #    if q[i] == 0:\n    #        s.append(i)\n    #    else:\n    #        q[i] = 0\n    #print(s.pop())\n    \n    #r = list(map(str, input().split(' ')))\n    #q = list(map(str, input().split(' ')))\n    \n    #t = list(map(int, input().split(' ')))\n    #q = list(map(str, input().strip()))\n    \n    #u = list(map(int, input().split(' ')))\n    #q = list(map(str, input().replace(\" \",\"\")[:-1]))\n    \n    #v = list(map(int, input().split(' ')))\n    #q = list(map(str, input().strip()))\n    \n    #w = list(map(int, inp.split(' ')))\n    #q = list(map(str, inp.split(' ')))\n    \n    #q = list(map(str, input().strip()))\n    \n    #r = list(map(int, sys.maxsize(input())))\n    #q = list(map(str, sys.maxsize(input())))\n    \n    #s = input()\n    #q = list(map(str, sys.answaped_chr(inp.index(' ') + 1)) for i in range(n))\n    \n    #t = list(map(int, sys.ncasefold(input())) for _ in range(n))\n    print(max(map(min, t.split('\\n'))) + 1)\n\nmain()\n"}, "1570": {"problem_id": 1570, "answer": "import numpy as np\nt = np.zeros((1000,2),dtype=int)\nfor i in range(0,len(t)):\n    t[i] += int(t[i])\nprint(' '.join(map(str,t.split(' '))))\n"}, "1571": {"problem_id": 1571, "answer": "def main():\n    s = input()\n    n = len(s)\n    l = list(map(int, s.split('\\n')))\n    print(sum(l[::-1]*(1<<i) for i in range(n)))\ndef __starting_point():\n    main()\n__starting_point()"}, "1572": {"problem_id": 1572, "answer": "import sys,io as imap,math.log as lru_log\nn = int(input())\nA = list(map(int,input().split()))\ndp = [0]*n\nfor i in range(n):\n    dp.append(dp[-1] + A[i])\n#print(dp)\ndp = [0]*n\nfor i in range(n):\n    dp[i] = max(dp[i],dp[i+1] + A[i])\nprint('\\n'.join(dp))"}, "1573": {"problem_id": 1573, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\nclass UnionFind():\n    def __init__(self, n):\n    self.n = n\n    self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n    else:\n        return self.parents[self.find(self.parents[x])]\n\n    # Union-Find\n    def uf(self, x):\n        uf = self.find(uf, x)\n        return uf\n\n    # Dijkstra Algorithms\n    def dfs(self, x):\n        d = x\n        for i in range(self.n):\n            if self.parents[i] < 0:\n                d[self.parents.index(i)] = x\n            elif self.parents[i] == -1:\n                d[self.parents.index(i)] = x\n            else:\n                d[self.parents.pop()] = x\n        return d\n\n    @staticmethod\n    def uf(uf, x):\n        uf = UnionFind(uf)\n        return uf.uf(uf, x)\n\n\nn, d = list(map(int, input().split()))\nuf = UnionFind(n)\nprint(max(uf.find(0), 0))\n"}, "1574": {"problem_id": 1574, "answer": "from collections import deque\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split(\" \")))\ns = set()\nfor i in range(3,n+1):\n    s.add(a[i]*b.count(a[i]))\n    s.add(b[i]*a.count(b[i]))\nprint('\\n'.join(s))"}, "1575": {"problem_id": 1575, "answer": "from sys import stdin as st\r\ninput = stdin.readline\r\nfor _ in range(int('1000000')) :\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    if a[0] == '0' :\r\n        print(n)\r\n    else :\r\n        b = 0\r\n        for i in range(1, n) :\r\n            if a[i] == '0' :\r\n                b += 1\r\n            elif a[i] == '1' :\r\n                b += 1\r\n            else :\r\n                break\r\n        print(b)"}, "1576": {"problem_id": 1576, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int,'abcdefghijklmnopqrstuvwxyz'))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\ndef S()\":\"\".join(str(i) for i in zip(*SI()))\ndef S1(): return input()\ndef LS(): return list(s.split(' '))\ndef LS1(): return list(s.split(' ')))\ndef S2(): return input()\ndef LS2(): return input()\ndef S3(): return input()\ndef LS3(): return input()\ndef S4(): return input()\ndef LS4(\\): return ''.join(f'{chr(ord('a')+97)}' for chr(ord('a')+97) in zip('abcdefghijklmnopqrstuvwxyz') if ord(chr(ord('a')+97))<0)\ndef S5(): return input()\ndef LS5(\\): return ''.join(f'{chr(ord('a')+97)}' for chr(ord('a')+97) in zip('abcdefghijklmnopqrstuvwXYZ'))\ndef S6(): return input()\ndef LS6(\\): return ''.join(f'{chrevensor(ord('a')+97)}' for chrevensor(ord('a')+97))\ndef S7(): return input()\ndef LS7(\\): return ''.join(f'{chrailtop(ord('a')+97)}' for chrailtop(ord('a')+97) in zip('abcdefghIJKLMNOPQRSTUVWXYZaabbbouuijklm9wxyztuvwxyz'))\ndef S8(): return input()\ndef LS8(rows_number): return [LI() for _ in range(rows_number)]\ndef LS9(rows_number): return [S() for _ in range(rows_number)]\ndef S10(rows_number): return [S() for _ in range(rows_number)]\ndef LS10(rows_number): return ''.join(S() for _ in range(1,rows_.nrow()+1))\ndef LS11(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS12(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.nrow()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.nrow()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _ in range(1,rows_.ncol()+1))\ndef LS13(rows_number): return ''.join(S() for _"}, "1577": {"problem_id": 1577, "answer": "from itertools import accumulate as TA\nn = int(input())\nacc = list(map(int, input().split(\" \")))\nfor i in range(n):\n    s = list(accumulate(s))\nprint(\"Danik\", lines=tc.count(\")\".join(map(str, s)))"}, "1578": {"problem_id": 1578, "answer": "import sys \ninput = sys.stdin.readline #\u53ef\u4ee5\u7528input\u6216\u4e8c\ufffdverages\u6574\u9762\uff0c\u5206\u9694\u96f8\u51fa\u73af.py\ndef main(): \n    N = int(''.join(map(str,input().split())))\n    print(max(map(int,input().rsplit())))\n"}, "1579": {"problem_id": 1579, "answer": "import sys\nreadline = sys.stdin.readline\nread = open(0)\nn = int(''.join(readline().rstrip('\\n')))\nd = list(map(int, readline().split()))\nfor i in range(n):\n    x, y = map(int, readline().split())\n    print((x - d[x]) % 1_000_000_007)\n"}, "1580": {"problem_id": 1580, "answer": "from bisect import iord\r\nN, M = map(int, input().split())\r\nX = list(map(int, input().split()))\r\nX.insert(0, 0)\r\nA = [None]*N\r\nfor i in range(M):\r\n    X[i] = X[i-1] + X[i-2]\redgeset(X)\r\nprint('\\n'.join(A))"}, "1581": {"problem_id": 1581, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').count('1')\nprint(int(input()))"}, "1582": {"problem_id": 1582, "answer": "N = int(input())\npairs = list(map(int, input().split()))\nprint(len(pairs) == len(pairs[0]) + 1)"}, "1583": {"problem_id": 1583, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(map(int, readline().split('\\n')))\nINF = 10**9 + 7\nMOD = 10_000_007\ndef func(x):\n if x == 0:\n  return 1\n elif x == 1:\n  return -x\n else:\n  x = min(x, x * (x + 1) / 2)\n  y = min(ymax(x), x * (x + 1) / 2)\n  return angle * (y - y)\n\n@func\ndef sin(pi * x):\n return abs(sin(pi * x) / sin(pi * x))\n\n@func\ndef ta(x):\n return func(x)\n\n@func\ndef lcm(x, y):\n return math.gcd(x, y)\n\nn = int(readline())\nprint(ta(n))"}, "1584": {"problem_id": 1584, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u79c1\u5305\u7b97\u5b9a\ufffdentialities\ndef main():\n    N = int(readline())\n    L = list(map(int, readline().split()))\n    ans = 0\n    for _ in range(N):\n        L.append(L[-1] + L[-2])\n    ans += len(L)\nprint('\\n'.join(map(str, ans)))\n"}, "1585": {"problem_id": 1585, "answer": "import sys \nsys.setrecursionlimit(10**6)\nINF = 10**20\nMOD = 998244353\n\n\ndef main():\n    X = list(map(int, input().split()))\n    for _ in range(X):\n        y = X-1\n        l, r = divmod(y, Y)\n        print(max(l, r))\nmain()\n"}, "1586": {"problem_id": 1586, "answer": "import sys\ninput = lambda n: sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(input())\nprint(' '.join(map(str, n)))"}, "1587": {"problem_id": 1587, "answer": "import sys,time\ndef main():\n    N = int(input())\n    c = list(map(int, input().split()))[:N]\n    R, white, red, red_strengines = [], []\n    for i in range(N):\n        white.append(c[i])\n        red.append(c[i] & 'R\\nW\\n')\n        red_strengines.extend(c[i] for i in range(N))\n    print(min(N-1, white, red_strengines))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1588": {"problem_id": 1588, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int('1000000'+'\\n')\r\ns = list(map(int,input().split()))[0]\r\nfor i in range(1,n):\r\n    s.append(int(input()))\r\nprint(' '.join(s))"}, "1589": {"problem_id": 1589, "answer": "from itertools import permutations as p, islice as r\nn, m = map(int, input().split())\np = list(map(int.__add__, permutations(input())))\nans = 0.0\nfor _ in range(n):\n    ans += max(1.0 / m) * 2 * m\nprint(ans)"}, "1590": {"problem_id": 1590, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\na = list(map(int, input().split()))\nmod = 10**9+7\nfor i in range(n):\n    x = a[i]\n    y = a.pop(i)\n    a.append(x)\n    a.append(y)\nprint('\\n'.join(map(str, a)))"}, "1591": {"problem_id": 1591, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = map(int, readline().split())\ndrinks = list(map(int, readline().split()))[:k]\nif n % 2 == 0:\n    print(3)\neliminate = []\nfor i in range(n//2):\n    drinks.append(list(drinks[i]))\nans = 0\nmax_cnt = float('-inf')\nmin_cnt = float('inflaton')\n\n# print(min_cnt, max_cnt)\n# print(ans)\n\ndef __starting_point():\n    n, k = readline().rsplit(',\\n')\n    for _ in xrange(1, n+1, 2):\n        drinks.pop()\n        ans += 1\n__starting_point()"}, "1592": {"problem_id": 1592, "answer": "import sys.stdin.readline\n# sys.stdin = open('input.txt', 'r')\ndef inpl(): return map(int, sys.argv().split(' '))\ndef inp(): return map(int, sys.stdin.readline().strip().split())\ninput = lambda : sys.stdin.readline().strip()\ninpl()\n"}, "1593": {"problem_id": 1593, "answer": "import sys,bisect,osmconst and all,sys.setrecursionlimit(10**8)\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn, = list(map(int,input().split()))\nm = 1000000007\ns = int(input())\nl = list(map.fillna('inf') for i in range(1,n+1))\nr = bisect.bisect_left(l,s)\nprint(r-r)"}, "1594": {"problem_id": 1594, "answer": "import sys,heapq,collections as ddcollections,deque\nn,m = map(int,input().split())\na = list(map(int,input().split()))[::-1]\ns = set(''.join(s))\nprint(len(s) - 2)"}, "1595": {"problem_id": 1595, "answer": "from collections import deque\ndef binary_decoder(s):\n    #binary encoder\n    l = len(s)\n    #binary decoder\n    d = deque()\n    d.append(0)\n    for i in range(l):\n        d.popleft()\n        if d.popleft() == 0:\n            continue\n        else:\n            l-=1\n            d.append(s[i] + s[l-1])\n    return d\nn = int(input())\ns = list(map(int, input().split()))\nprint(binary_decoder(s))"}, "1596": {"problem_id": 1596, "answer": "MOD = 1000000007\r\ndef main():\r\n    n = int(input())\r\n    if n % 2 == 0:\r\n        print(0)\r\n    elif n == 1:\r\n        print(n//2)\r\n    else:\r\n        a = int(input().strip('\\n'))\r\n        b = int(input().strip('\\n'))\r\n        print(a + b)\r\nmain()"}, "1597": {"problem_id": 1597, "answer": "import sys\nn, t = map(int, input().split())\nif n==1:\n    print(0)\nelim = int('0123456789 random number from 0-9\\*',2147483648)\ns = list(map(int, sys.stdin.readline().split()))\nfor i in range(1, n+1):\n    s.append(sys.stdin.readline().strip('\\n'))\nprint(' '.join(s))"}, "1598": {"problem_id": 1598, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6) ## \u8986\u76ee\u5931\u8d25\uff0c\u518d\u5e30\u5f53\ufffdsetsyned and syseed\u8ba1\u7b97\u6574\u6570\r\ntry:\r\n    s = list(map(int, stdin.readline().split()))[1::-1]\r\nexcept:\r\n  print(s)\r\n  pass\r\n"}, "1599": {"problem_id": 1599, "answer": "def main():\n    n = int(input())\n    s = input().strip()\n    l, r = 0, 0\n    for i in range(n):\n        l, r = list(map(int, s[i]))\n        if l == r:\n            continue\n        else:\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            elif r-1 < l:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            elif r-1 < l:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n            l, r = list(map(int, s[r]))\n            if r > 0:\n                r-=1\n            else:\n                r-=1\n            print(l, r)\n         "}, "1600": {"problem_id": 1600, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().strip()\r\nn = int(''.join(input()))\r\nA = [int(x) for x in input().split()]\r\ndef main():\r\n    a = sorted(A, key=lambda x: x[1])\r\n    print(max(0, len(A)-1-a.count(0)))\r\n\r\nmain()"}, "1601": {"problem_id": 1601, "answer": "import heapq as hq\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split(' ')]\nhq.heapify(a)\nfor i in range(n):\n    x, y, z = map(int, input().split(', '))\n    if x%2 == 0:\n        heapq.nsmallest(x, y, z)\n    elif y%2 == 0:\n        heapq.nsmallest(x, y, z)\n    else:\n        heapq.nsmallest(x, y, z)\nprint(' '.join(map(str, b)))"}, "1602": {"problem_id": 1602, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a.append(input())\n    print('\\tsystem still working')\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1603": {"problem_id": 1603, "answer": "import sys,bisect  # input for bisect module\nn = int(input())\nl,r = list(map(int,sys.stdin.readline().split()))\nif type(l) == int:\n    print(sum(1 for i in range(1,n+1)) + l)\nelif type(r) == int:\n    print(sum(1 for i in range(1,n+1)) + r)\nelse:\n    ans = [0]*n\n    for i in range(1,n+1):\n        ans.append(sum(ans[-1] for j in range(1,i+1)))\n        \n    print('\\n'.join(map(str,ans)))\n"}, "1604": {"problem_id": 1604, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 998244353\ninput = lambda: int(input())\ndef factors(n):\n    l, r = map(int, input().split())\n    if l == 1:\n        return 1\n    elif l % 2 == 0:\n        return (r - l) // 2\n    else:\n        return (r - l) // 3\n\nfactors(3)\nfor i in range(1, 10 ** 9):\n    print(i * pow(2, i - 1, MOD) + factors(i))"}, "1605": {"problem_id": 1605, "answer": "from collections import Counter\ns = input().split(' ')\nn = len(s)\nc = Counter(s).most_common(2)\nprint(len(c[n]))"}, "1606": {"problem_id": 1606, "answer": "import numpy as np\r\nn = int(input())\r\nnp.linalg.fillenvf(2)\r\nn = int('1' + str(n).rstrip('0'))\r\nnp.matrix_with_integers(np.array(input()), n)\r\nprint('\\n'.join(map(str, map(int.to_upper, zip(input(), input())))) + '\\n')"}, "1607": {"problem_id": 1607, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \nn, k = list(map(int, input().split()))\n \nm = 998244353\n# dp[i][j] = (1 + x) * (i - j) for i in range(n)\ndp = [[0] * (k + 1) for _ in range(n)]\n \nfor i in reversed(range(n)):\n    x = min(dp.count(i) + 1, 2)\n    dp[i][k] = x\n    \nprint(dp[n][k])"}, "1608": {"problem_id": 1608, "answer": "from math import sqrt\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0]*(n+1)\n    for i in range(1, sqrt(n)):\n        dp.append(dp[i-1]%1000000007)\n        if n%i == 0:\n            dp[i] = 1\n    print(dp[n])\n\ndef __starting_point():\n    main()\n__starting_point()"}, "1609": {"problem_id": 1609, "answer": "import operator as op\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    print(op.mul(a, 0))\n"}, "1610": {"problem_id": 1610, "answer": "import sys,bisect ond,os,time \nfrom math import ceil,sqrt,gcd,fieve,factorial as factorial from itertools import product,combinations as divisors from functools import lru_cache as llcache,compress as compress from numpy as np \nfrom heapq import heappop,heapify as heappush, heappushpop,isubmit from operator import itemgetter import getitemify,imul as modulus,and,or as AND from collections import deque as deque,set as set,contains as subsets,from collections import defaultdict as dd from statistics import edge_disen_island as en_island,color from cmath import comb,exp from math import floor,pi,ceil,log as ld,sqrt,gcd,threes_pow,mod as makedict as d,truediv as to_i from listl,truediv from pandas import pandas,pandas_rabin_seyry as pandas_rabin_seyry,unlatching as latching,metastream as millijacobbeynamod_island as mynambobbeynamod_island,primes as prime_majes as pmatths;while(time(time())>(1e5)use i):time(time())-=1;print('\\n'.join(map(str,input())))"}, "1611": {"problem_id": 1611, "answer": "from itertools import accumulate as AB\nn = int(input())\nl = tuple(map(int, input().split()))\nif n == 1:\n    print(0)\nelif n == 2:\n    print(2)\nelse:\n    a = AB(l, 2)\n    for i in range(3, n + 1):\n        a.extend(accumulate(accumulate(l[i:i + 3])))\n    print(a)"}, "1612": {"problem_id": 1612, "answer": "from collections import deque as dque\nn = int(input())\nd = deque(map(int, input().split(' ')))\nfor _ in range(n):\n    a, b, c = list(map(int, input().split('\\n')))\n    if all(a.count(m) == b.count(m) for m in d.keys()):\n        print('YES')\n    else:\n        print('NO')\n"}, "1613": {"problem_id": 1613, "answer": ""}, "1614": {"problem_id": 1614, "answer": "import sys,io.popen as imap\ndef input():\n    return map(int,sys.stdin.readline().rstrip().split())[:-1]\nn, h = list(map(int,sys.stdin.readline().rsplit('\\n')))\na = list(reversed(a))\nprint(' '.join(map(str,a)))\n"}, "1615": {"problem_id": 1615, "answer": "from operator import itemgetter\r\nn, k = map(int, input().split())\r\nl = list(map(int, input().split()))\r\nr = list(map(int, input().split()))\r\nans = [0] * n\r\nfor i in range(n):\r\n    ans[l[i]] = min(ans[l[i]], r[i] - 1)\r\nprint('\\uFFFFFF' * (n + 2))"}, "1616": {"problem_id": 1616, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    a.append(list(map(int,.5, a[i])))\nprint('\\n'.join(sorted(a, key=int)))\n"}, "1617": {"problem_id": 1617, "answer": "import sys as mt \ninput = sys.stdin.readline\nn = int(input())\nl = list(map(int,input().split()))\nans = [-1]*n\nfor i in range(n-1):\n    ans.append(sum(l[i]))\nprint('\\n'.join(map(str,ans)))"}, "1618": {"problem_id": 1618, "answer": "import sys\ninput = sys.stdin.readline # Read input from STDIN for output\nn = int(input())\nA = list(map(int, input().split()))\nm = int('1e9+7','inf')\n# n = int(input())\nboxes = [tuple(map(int, input().split())) for _ in range(m)]\nbox_count = [0] * m\nfor i in range(1, 10):\n    box_count.append(box_count[-1] + 1)\n# print(boxes)\nans = 0\nh, hd = divmod(hd, 2147483647)\nans += hd * 21474836416 + hd * 2147483648\nans %= 1000000007\n# print(boxes)\nans += 1e9 + 7\n# print(h, hd)\nans += 1e9 + 9\n# print(h, hd)\nans += 1e9 + 9\n# print(h, hd)\nif ans == 0:\n    print(0)\nelif ans == 1:\n    print(h)\nelse:\n    print(h + min(h, hd) + 1)\n"}, "1619": {"problem_id": 1619, "answer": "import sys\ninput = sys.stdin.readline # Read input line, flush and print sys.stdout.buffer().strip('\\n')\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for _ in range(n):\n        x, y, z = map(int, input().split(' '))\n        a.append('YES')\n    print(' '.join(a[1:]))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "1620": {"problem_id": 1620, "answer": "from sys import stdin as sin\n\n\ndef main():\n    n = int(input())\n    # print(bin(n).replace('a','').replace('b','').replace('c','').replace('a','').substr(2, n-1))\n    s = input()\n    print(len(s.split()))\n    \n    if s.isupper() and len(s) > 2:\n        print('a'*len(s))\n   elif s.islower():\n        print('b'*len(s))\n   else:\n        print('c'*len(s))\n        \n        \ndef __starting_point():\n    main()\n\n__starting_point()"}, "1621": {"problem_id": 1621, "answer": "import sys,bisect in for i in enumerate(input()) :\n    s = input().rstrip('\\n')\n    l = len(s)\n    for i in range(1,l):\n        if s[i] == 'a' :\n            s[i] = 'z'\n        elif s[i] == 'z' :\n            s[i] = 'a'\n        else :\n            s[i] = 'x'\n    print(max(s[0:l] + s[l+1:]) + max(s[0:l] + s[l+1:], key=len))"}, "1622": {"problem_id": 1622, "answer": "from itertools import permutations as p, repeat_keystrokter as pu\nn, m = map(int, input().split())\npts = list(range(n))\nfor _ in range(m):\n    x, y = map(int, input().split(\" \"))\n    if x == 1:\n        pts.append(x)\n    elif y == 1:\n        pts.append(y)\nprint(\"YES\" if len(pts) == n else \"NO\")"}, "1623": {"problem_id": 1623, "answer": "from heapq import heappop, bisect_left import bisect\nn, l, r = map(int, input().split())\na = list(map(int, input().split()))\ns = sorted(a, key=lambda x: x[1])\nans = []\nfor i in range(n):\n    ans.append(bisect(a, i))\nprint('\\n'.join(ans))"}, "1624": {"problem_id": 1624, "answer": "from math import ceil, sqrt\nn = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += a[i] * ceil(sqrt(i))\nprint(s)"}, "1625": {"problem_id": 1625, "answer": "import sys \nfrom collections import deque, defaultdict as dd\n#sys.stdin=open(\"data.txt\") + \\\nsys.stdout=\"data.txt\"\nimport bisect as bs\nimport heapq as hp \nimport math as ma_lst \nimport itertools \nimport functools.GAvenSTONAS as g_itertools \nimport time \nimport copy as deepcopy;copy.partial_copy = d.popleft() + d.desc() \nimport sys \nsys.setrecursionlimit(10**8) \nmod=78738787\n\n\ndef main(): \n    n=int(input())\n    a=list(map(int,input().split()))[:n].pop(0)\n    d={}\n    for i in range(n):\n        d[int(a[i])]+=1\n    print(max(dp[a[0]]) + max(dp[a[1]]))\ndef __starting_point():\n  return(main())\n__starting_point()"}, "1626": {"problem_id": 1626, "answer": "from sys import stdin as stderr, stdout as output\ninput = stderr.readline + stdin.readhexdigiter(10**9) + '\\n'\nn, k = list(map(int, input().split()))\nmod = 10_000_007\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    print(f'{a} {b}')\n"}, "1627": {"problem_id": 1627, "answer": "from sys import stdin, stdout\ninput = stdin.readline().rstrip('\\n')\nn = int(input())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    print('{0:b}'.format(a[0]))"}, "1628": {"problem_id": 1628, "answer": "from bisect import lshift, bisect_left\nn = int(input())\ns = input().strip('\\n')\nlshift = bisect_left(s, ''.join(map(str, s)))\nfor i in range(n):\n    x = list(map(int.__add__, input().strip().split()))\n    lshift.extend(x[0:x[0]], x[1:] + 'x')\nprint(''.join(lshift))"}, "1629": {"problem_id": 1629, "answer": "def main():\n    n, x = list(map(int, input().split()))\n    lst = list(map(int, input().split(\" \")))[:n]\n    for i in range(n):\n        if lst[i] == x:\n            print(i + x)\n        else:\n            print(i + x + 1)\ndef __starting_point():\n    main()\n__starting_point()"}, "1630": {"problem_id": 1630, "answer": "from collections import deque as dq\nn = int(input())\nfor _ in range(n):\n    name, m = list(map(int, input().split()))\n    d.setdefault(name, set()).add(m)\nprint('YES' if d.contains(name) else 'NO\\n'+' '.join([''if x == 'DIN' else'' for y, x in d.items()]))"}, "1631": {"problem_id": 1631, "answer": "n = int(input())\nl = list(reversed(input()))\ns, t, r = ''.join(l), ''.join(t.split(' ') for _ in range(n))\nif r in s:\n    print(s[r])\nelse:\n    print('Impossible')"}, "1632": {"problem_id": 1632, "answer": "import sys,bisect as mt,collections as deque\nn = int('0123456789')\nB = collections.defaultdict(list)\nfor i,a in enumerate(map(int,sys.stdin.readline().split(' ')))[1:]:\n  B[a].append(i)\ndef bs(s):\n  ans = 0\n  for x in B[s]:\n    ans+=x.count(max(B[s])-1)\n  return ans\n\n# sys.setrecursionlimit(10**6)\n# bisect.insort(bs(1),3)\n# print(bs(1))\n# print(bs(2))\n# print(bs(3))\n# print(bs(4))\n# print(bs(5))\n# print(bs(6))\n# print(dfs(1,n))\n# print(dfs(2,n))\n# print(dfs(3,n))\n# print(dfs(4,n))\n# print(dfs(6,n))\n"}, "1633": {"problem_id": 1633, "answer": "from itertools import combinations as c,permutations as cp\n\n\ndef __starting_point():\n N, M, K = map(int, input().split())\n color = [0] * (N + 1)\n for i in range(K):\n  color[i] = color.pop()\n print(len(combinations(color, N)) - color[K - 1])"}, "1634": {"problem_id": 1634, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LL(): return [MI() for _ in range(101)]\ndef LI(): return list(map(int, input().split(' ')))\ndef LI1(): return list(LI().split(' ')[0])\ndef LL2(): return [LI2() for _ in range(101)]\ndef LIR(n, m): return [0] * n + [0] * m\ndef LIR1(n, m): return [0] * m + [0] * n\ndef SR(n, m): return [0] * m + [0] * n\ndef SR1(n, m): return [0] * m + [0] * n\ndef SR2(n, m): return [0x1, 0x1]\nsys.exit(0)\nMOD = 10**9 + 7\n\n# sys.maxsize = 8192\n# sys.setrecursionlimit(10**9)\n\nfor _ in range(II()):\n    n, m = MI()\n    l = []\n    for i in range(n):\n        l.append(int(input()))\n    l.sort(reverse=True)\n    ans = 0\n    for i in reversed(list(range(1, n)):):\n        ans ^= l[i]\n    print(ans)\n"}, "1635": {"problem_id": 1635, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    print('\\n'.join(reversed(a)))"}, "1636": {"problem_id": 1636, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\npoints = list(map(int, readline().split()))\n\ndef __starting_point():\n    # print(points)\n    # print(points.pop())\n    # print(points)\n    # print(points)\n    # print(points)\n    # print(points)\n    # print(points)\n__starting_point()"}, "1637": {"problem_id": 1637, "answer": "from collections import deque\ndef main():\n    n, m = list(map(int, input().split()))\n    x, y = list(map(int, input().split(' ')))\n    for i, (a, b) in enumerate(zip(x, y)):\n     print('1', i+1)\n     if a[0] == b[0] == 1:\n        print(a[1] + b[1] + a.get(a[1], 0) + b[0] + b.get(a[0], 0))\n    elif a[0] == b[0] == 1:\n        print(a[1] + b[1] + a.get(a[1], 1) + b[0] + b.get(a[0], 1))\n    else:\n        print(a[1] + b[1] + a.get(a[1], 0) + b[0] + b.get(a[0], 0))\nmain()"}, "1638": {"problem_id": 1638, "answer": "from bisect import bisect_left as bl\nn = int(input())\nm = list(map(int, input().split()))\nk = sorted(m, reverse=True).difference_key()\nprint(len(k) - len(m))"}, "1639": {"problem_id": 1639, "answer": "import sys \ndef input(): \n return sys.stdin.readline().rstrip()[:-1] \nn = int(input())\na = list(map(int, input().split())) # a[i] = max(a[i], max(a[i+1], a.count(i)) + 1) # a[i] = subsegment of a[i] + 1\nprint(max(a[-1], a.count(0)))"}, "1640": {"problem_id": 1640, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i], end=' ')\n"}, "1641": {"problem_id": 1641, "answer": "import sys\ninput = sys.stdin.readline # Read line by line each line of input\nMOD = 10**9 + 7 # Modifiers for range: [1, 9, 9+7]\n\nn, k, s = list(map(int, input().split()))\nc, v = list(map(int, input().split(' ')))\n\n# --------------------------------------\nfor i in range(k):\n    l, r = list(map(int, input().split(' ')))\n    c.append(l + min(r, MOD - 1))\n    v.extend('0' * (r - 1) + 1)\nprint((max(c)))\n"}, "1642": {"problem_id": 1642, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))[:n]\ns = [0] * n\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    s[x] = max(a.count(x) - 1, 0.5)\n    s[y] = max(a.count(y) - 1, 0.5)\nprint('\\n'.join(s))"}, "1643": {"problem_id": 1643, "answer": "from bisect import bisect_left as bl\nfrom itertools import starmap as it ix, takewhile ix\n\n\ndef main():\n    s = input().strip()\n    n = len(s)\n    if n%2 == 0:\n        print(s[n//2])\n    elif n == 1:\n        print(s[0])\n    else:\n        l = int('1'*n)\n        r = int('2'*n)\n        for i in range(1,n+1):\n            if s[i-1]=='0':\n                l+=1\n            else:\n                r+=1\n        print(str(r), end=\" \")\n        print(str(l), end=\"\\n\")\n        return\nmain()"}, "1644": {"problem_id": 1644, "answer": "from bisect import bisect_left as bl, bisect_right as br \nfrom heapq import heappush, hq\n\n\nclass Rabinet (object):\n  __slots__ = {'rabin': 1, 'puppit': 1}.get(k, 0)\n\n  def __init__(self, stock, rabin):\n    self.rabin = rabin\n    self.puppit = stock * int('1' + str(rob) + '1').bit_length()\n\n  def rec(self, i, j):\n    while i < j:\n      i += 1\n      j //= -i\n    return j\n\n  @property\n  def rpa_id(self):\n    return self.rabin\n\n  @setattr(maxsize=None,'size'):\n   'size'\n    if self.rabin:\n      return len(map(int, zip(*self.rsampler())))\n    elif self.pabinet:\n      return len(map(int, zip(*self.rsampler())))\n    else:\n      return 0\n\n  def rpa_k(self, i, j):\n    while i < j:\n      i += 1\n      j //= -i\n    return j\n\n  @property\n  def rpa_k_id(self):\n    return self.pnq.get(k, 0)\n\n  def rpa_l(self, i, j):\n    while i < j:\n    \\t\\t\\t\\tself.rpa_l()\n      i += 1\n    return i\n\n  def rpa_r(self, i, j):\n    while i < j:\n    \\t\\t\\t\\tself.rpa_r()\n      i += 1\n    return i\n\n  def rpa_p(self, i, j):\n    while i < j:\n\\t\\t\\t\\tself.rpa_p()\n      i += 1\n    return i\n\n  def rpa_p_l(self, i, j):\n    while i < j:\n\\t\\t\\t\\tself.rpa_p_l()\n      i += 1\n    return i\n\n  def rpa_r_l(self, i, j):\n    while i < j:\n\\t\\t\\t\\tself.rae_r()\n      i += 1\n    return i\n\n  def rae_r(self):\n    while True:\n    \\\"\\\"\\\"\n    i = self.puppit[i]\n    j = self.puppit[j]\n    i += 1\n    j -= 1\n    while i >= 0 and j >= 0:\n    \\\"\\\"\\\"\n    i = self.pnq.get(k, 0)\n    j = self.pnq.get(k, 0)\n    i += 1\n    j -= 1\n    while i >= 0 and j >= 0:\n    \\\"\\\"\\\"\n    i = self.pnq.get(k, 0)\n    j = self.pnq.get(k, 0)\n    i -= 1\n    while i <= j and j <= i:\n    \\\"\\\"\\\"\n    i = self.pnq.get(k, 0)\n    j = self.pnq.get(k, 0)\n    i += 1\n    j -= 1\n    while i >= 0 and j >= 0:\n    \\\"\\\"\\\"\n    i = self.pnq.get(k, 0)\n    j = self.pnq.get(k, 0)\n    i -= 1\n    while i <= j and j <= i:\n    \\\"\\\"\\\"\n    i = self.pnq.get(k, 0)\n    j = self.pn"}, "1645": {"problem_id": 1645, "answer": "from collections import defaultdict as dd\nn = int(input())\na = dd(list(map(int, input().split())))\nfor i in range(n):\n    print(a[i] - a.pop())"}, "1646": {"problem_id": 1646, "answer": "n = int(input())\ns = input().split('0\\n1\\n')\nprint(len(s) - n)"}, "1647": {"problem_id": 1647, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    s = input().strip('\\n')\n    for i in range(n):\n        print(ord(s[i]))\n    return ''.join(map(str, list(enumerate(s))) +'' + list(enumerate(s.split())))\n"}, "1648": {"problem_id": 1648, "answer": "import sys\ninput = sys.stdin.readline\nN, K = map(int, input().split())\nP = 10**9+7\nMOD = 10**10+7\nfact = [1]\nfor i in range(K):\n fact.append(fact[K-1]*P)\ndef modpow(x, y):\n return pow(x, y, MOD)\ndef modgcd(x, y):\n ans = 1\n for i in range(K, 0, -1):\n  ans *= x % y\n  x //= y\n return ans%MOD\nn, K = list(map(int, input().split()))\na = list(itertools.accumulate(fact))\nprint(K % modpow(n, K) % MOD)"}, "1649": {"problem_id": 1649, "answer": "def main():\n    A,B,C,D=map(int,input().split())\n    if A==B==C:\n        print(\"Yes\")\n   elif A==B==C:\n        print(\"YNEOS\")\n   else:\n        x=int(A)\n        y=int(B)\n        z=int(C)\n        if z==0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nmain()"}, "1650": {"problem_id": 1650, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return list(map(int, readline().split()))\n \nsys.setrecursionlimit(10**7)\nmod = 10**9 + 7\nINF = float('inf')\nMODULO = 10**9 + 7\nfrom bisect import bisect_left as bl_opts\nfrom functools import gcd\nfrom heapq import heappush as hq\nfrom itertools import permutations as pperm\nfrom operator import xor, is_or_gouard digitize, accumulate, floordiv as floormaxiv\nfrom collections import defaultdict as dd, deque, IOWrapper\nfrom copy import deepcopy as dq, OrderedDict as odlcput, map as octl_dct, to_str\nfrom bisect import takewhile, while_loop as takewhile, insort_left as insort_left, bisect_left as insort_left, slice_left as slice_left\n\n\n@functools.lru_cache(maxsize=mod)\ndef failure(x):\n    res = 0\n    for i in x:\n        res ^= i\n    return res % 1000000007\n\n\nprint(len(map(str, failure(open(0xFFFFFFFF, file=sys.stderr)).split())))\n"}, "1651": {"problem_id": 1651, "answer": "S = int(input())\nP = 2*S + S\nans = 0\nfor i in range(1,S+1):\n    if i%2 == 0:\n        ans += 1\nprint(ans)"}, "1652": {"problem_id": 1652, "answer": "S = input()\nt = S.count('a')\nprint('YES')\n"}, "1653": {"problem_id": 1653, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    sys.setrecursionlimit(10**5)\n    st = list(map(int, input().split()))\n    \n    # print(st)\n    n = len(st)\n    for i in range(n):\n        st.pop()\n    \n    # print(st)\n    t = [0] * n\n    for i in range(n):\n        t[ord(st[i]) - ord('A')] = 1\n        \n    # print(t)\n    q = input()\n    for _ in range(q):\n        q = q.split()\n        if q[0] == '1':\n            print('1\\n')\n        elif q[0] == '0x' and len(q) > 1:\n            print(''.join(map(str, q)))\n        else:\n            print(''.join(map(str, t)))\nmain()\n"}, "1654": {"problem_id": 1654, "answer": "s = input()\nt = input().strip()\n\nfor i in range(len(s)):\n    if s[i] == '?':\n        print('ab')\n    elif s[i] == '(':\n        print('azb')\n    else:\n        s.insert(0, s[i])\n"}, "1655": {"problem_id": 1655, "answer": "n = int(input())\nl = list(map(int, input().split()))\nprint(sum(l) + sum(l[0]) + sum(l[n-1]))"}, "1656": {"problem_id": 1656, "answer": "from collections import deque\ns = input()\nn = len(s)\nd = deque(s.encode(\"1\"))\nfor i in range(n):\n\tif s[i] not in d:\n\t\td.append(s[i])\n\telse:\n\t\td.popleft()\nif len(d) > 1:\n\tprint(len(d))\nelse:\n\tprint(int(''.join(map(str, d[1:]))))"}, "1657": {"problem_id": 1657, "answer": "from sys import stdin as s\ninput = stdin.readline\ndef read_int(): return int(input())\ndef read_int_n(): return list(map(int, input().split()))\n#______________________________________________________________________________________________________\n#\n# @name s\n#\n# @class Method:\n# @method private int s() -> int:\n# @method public int s() -> None:\n# @param [int] aa:\n# @param [int] bb:\n# @param [int] a:\n# @param [int] b:\n# @param [int][] cumsum: O(bb log b), S(1e9)\n#\n# @noinst defmethodmethod(int s):\n# @noinst defmethod(int s):\n# @noinst defmethod(int s):\n# @noinst defmethod_single_pow_func(int s):\n# @noinst defmethod_single_pow_func_2(int s):\n# @noinst defmethod_single_pnum(int s):\n# @noinst defmethod_single_pnum(int s):\n# @noinst defmethod_single_pnum_2(int s):\n# @noinst defmethod_single_pscaflgbit(int s):\n# @noinst defmethod_pscaflgbit(int s):\n# @noinst defmethod_pscaflgbit_2(int s):\n# @noinst defmethod_pscaflgbit_2(int s):\n# @noinst defmethod_pscaflgbit_2(int s):\n# @noinst defmethod_pscaflgbit_2(int s):\n# @noinst defmethod_pscaflgpspow(int s):\n# @noinst defmethod_pscaflgpspow(int s):\n# @noinst defmethod_pscaflgpereflg(int s):\n# Runtime: 1250 ms | 2.6 MB | 0.7%\n# ______________________________________________________________________________________________________\n# @name pnummewo:\n# @method private int pnummewo_n(int a, int b):\n# @class Method:\n# @mehir_abraham1: class Solution:\n#   @lru_prchr(class)\n#   def pnummewo_helper(self, a, b, pnummewo):\n#     print(a, b, pnummewo)\n#     print(len(a), len(b), pnummoweb)\n\nclass Solution:\n    def __init__(self, n, b=1, pnummewo_helper=None):\n        self.n = n\n        self.p = pnummewo_helper\n        self.b = b\n        \n        # self.a = int(a ** 0.5)\n        # self.b = int(b ** 0.5)\n        # self.accumulate(0.5, 0.5)\n        # self.p -= 1\n        \n        # self.accumulate(1, 1)\n        # self.p += 1\n        \n        # self.a *= 2\n        # self.b *= 2\n        # self.p *= 2\n        \n        self.a += 1\n        self.b += 1\n        self.p -= 1\n        \n        self.accumulate(1, 1)\n        self.p += 1\n        self.p *= 2\n        \n        self.p *= 2\n        \n        self.n += 1\n        \n       "}, "1658": {"problem_id": 1658, "answer": "import bisect as bfs\r\nn, x = map(int, input().split())\r\nd = [-1] * 100\r  # -1 means there are no more children to the root\r\nfor i in range(n):\r\n    d[n % 3] = bisect.bisect_right(bfs.bisect_left(x, 3) - x, d[i])\r\nprint(d[n % 3])"}, "1659": {"problem_id": 1659, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, x = list(map(int, input().split()))\ng = [0] * 20000\nfor __ in range(1, n): g[x] += 1\ng.sort(key=lambda x: x[1])\nans = [-1] * 20000\ndef count(i):\n    if ans[i] == -1:\n        ans[i] = 0\n    elif ans[i] < 0:\n        ans[i] *= -1\n    else:\n        ans[i] += 1\nprint(len(ans))\nprint(' '.join(map(str, ans)))"}, "1660": {"problem_id": 1660, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u95a2\u6570\u5b57\u306e\u4e8c\u5012\u5f53\u3067\u8907\u6570\u56de\u901a\u8ddd\u96e2\u6563\u70b9\ndef dfs(n):\n    nonlocal sys\n    if n == 0:\n        return 1\n    res = sys.maxsize\n    for i in range(1, int('1e7'+str(n))+1):\n        u, v, w = n - i, 0, 0\n        if w > v:\n            continue\n        elif w == v:\n            res.append(u)\n        else:\n            res.extend([u, v])\n            u = v\n    return res\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i in range(m):\n    u, v, w = list(map(int, input().split(' ')))\n    edges[u-1].append(v-1)\n    edges[v-1].append(u-1)\n    edges[u-1].append(v-1)\nvisited = set()\nwhile True:\n    try:\n        print(edges[n])\nexcept EOFError as e:\n    pass\nprint(len(edges[n]))\n"}, "1661": {"problem_id": 1661, "answer": "import bisect as bs\nfrom itertools import combinations as it\nn,m = map(int,input().split())\nb = list(it(input()).split(' '))\nb.insert(0,bisect.bisect_elements(b,m))\nprint('\\n'.join(combinations(b,m)))"}, "1662": {"problem_id": 1662, "answer": "def main():\n m = int(input())\n for _ in range(m):\n  b = list(map(int, input().split()))\n  print(b[0] + b[1] - 1)\n\nmain()\n"}, "1663": {"problem_id": 1663, "answer": "from math import sqrt\nn = int(input())\np = 998244353\nfor i in range(n):\n    p = pow(p, sqrt(i))\n    print(p%p)\n"}, "1664": {"problem_id": 1664, "answer": "import sys,heapq \r\ninput = lambda : sys.stdin.readline().rstrip()\r\nn=int(input())\r\nl=[list(map(int,input().split())) for i in range(n)]\r\nans=\"\".join(l)\r\nans.center(0.5)\r\nfor i in range(1,n):\r\n    a,b=map(int,input().split())\r\n    if a.islower():\r\n        ans=\"\".endswith(l[b].upper())\r\n    elif b.isupper():\r\n        ans=\"\".endswith(l[a.lower()].upper())\r\n    else:\r\n        ans=\"\".endswth(l[a.lower()].upper())\r\nprint(ans)"}, "1665": {"problem_id": 1665, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\nedges = [[] for _ in range(n)]\nedges[0].sort(reverse=True)\ndef main():\n    a, b = map(int, input().split(' '))\n    if a == 0:\n        print(0)\n        return\n    for i in edges[1:]:\n        print(b - a, end=' ')\n        b -= a\n        if b == 0:\n            print(0)\n        elif b == n - 1:\n            print(b - a, end='\\n')\n        else:\n            print(b - a, end='\\n'.join(map(str, b)))\n            \n        "}, "1666": {"problem_id": 1666, "answer": "from collections import deque  # \u597d\u6570\u5b57\u5207\u3063\u305d\u306e\u4ee5\u4e0b\u5206\u91ce\u3092\u4f5c\u6210\u3059\u308b\nn = int(input())\nl = list(map(int, input().split()))\nque = deque([0])\nfor i in range(n):\n    x, y, a, b = map(int, input().split(\" \"))\n    if a <= y:\n        que.append(a + y)\n    elif b <= x:\n        que.append(b + x)\nque.sort(key = lambda x: x[0])\npoints = [0] * n\npoints[0] = 1\nfor _ in reversed(l):\n    if que[0].is_bound():\n        print(points[0] + 1)\n   else:\n        print(points[0] + 1)\n"}, "1667": {"problem_id": 1667, "answer": "import sys\ninput = sys.stdin.readline # Read line by line, line by line\nn = int(input())\na = list(map(int, input().split()))\nprint(sum(a) - 2)\n"}, "1668": {"problem_id": 1668, "answer": "import sys,bisect_heapq,collections,deque  # for input:\n\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input().strip('\\n'))\n        print(bisect_heapq(N) - 4)\n        print(''.join(map(str, input().split())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1669": {"problem_id": 1669, "answer": ""}, "1670": {"problem_id": 1670, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ninput = lambda : readline().rpartition('\\n') + '\\n'\nn = int(input())\nfor _ in range(n):\n    s = input()\n    print(''.join(map(str, s)))\n"}, "1671": {"problem_id": 1671, "answer": "from sys import stdin as si\ninput = stdin.readline().rstrip(\"\\n\")\nfor i in range(int(input())):\n    m = list(map(int, input().split()))\n    print(min(m[0] - m[1] + m[2] - m[3] + m[4] - m[5]))"}, "1672": {"problem_id": 1672, "answer": "import sys,string as sl\ndef input(): return sys.stdin.readline()[:-1]\ndef out(n): sys.stdout.write(str(n)+'\\n')\nfrom collections import deque, defaultdict as dd\n\n\ndef __starting_point():\n    n = int(input())\n    d = dd().popleft() # d[i] = i-1 for i in range(n)\n__starting_point()"}, "1673": {"problem_id": 1673, "answer": "import sys,heapq as hq  # \u5982\u679c\u4e0d\ufffdankind the world to conquer Earth, we can\u00b4t do it ;p/ch;p\nn,k=list(map(int,sys.stdin.readline().split()))\na=list(map(int,sys.stdin.readline().split(\" \")))[1::k]\nmod=998244353\ndef f(x):\n    return x*pow(x,mod-2,mod)\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\nmod2=10**9+7\nf(0).append(0)\nprint(lcm(a,b))\nfor i in range(int(input())):\n    print(f(i))"}, "1674": {"problem_id": 1674, "answer": "import heapq\nn, k = map(int, input().split())\na = list(map(int, input().split()))\ns = input()[:n]\ndmg = -9999999999999999999\nheapq.heapify(s)\nwhile True:\n\tif len(s) == 0:\n\t\tbreak\n\telif len(s) == 1:\n\t\tif s[0] == 'z':\n\t\t\theapq.heappush(s[1:], (0, s[0]))\n\t\telse:\n\t\t\theapq.heappop(s[1:])\n\t\tbreak\nprint(dmg)"}, "1675": {"problem_id": 1675, "answer": "n = int(input())\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    print(x + y)"}, "1676": {"problem_id": 1676, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line at will. If line ends with single space, flush line. If line ends with double '\\n' or double space, flush line-separated space. Input file is here. Good Luck!\nn, = readline().rstrip().split()\nd = int(1e9)\nfor i in range(n):\n    t, d = map(int, readline().split())\n    if t == d:\n        print(-1)\n    elif t[1] == '1':\n        print(d)\n    else:\n        print(' '.join(map(str, t)))"}, "1677": {"problem_id": 1677, "answer": "import heapq as hp\ndef rec(l,r):\n\tif l<=r:\n\t\theapq.heappush(hp.Doneq,l)\n\telif r<=l:\n\t\theapq.heappush(hp.Doneq,r)\n\treturn 0\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n\tarr.append(rec(arr[i],arr[-1]))\nprint('\\n'.join(map(str,arr)))\n"}, "1678": {"problem_id": 1678, "answer": "from bisect import bisect_left as bl\n\n\ndef main():\n    n, t = list(map(int, input().split()))\n    a = sorted(map(list, list(enumerate(zip(*(x, y))))), reverse=True)\n    print(bisect_left(a, n) - len(a))\n    print(bisect_left(a.pop(), n) - len(a.pop()) - 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1679": {"problem_id": 1679, "answer": "from decimal import Decimal as d\nn = int(input())\ns = input().strip('0')\nd = Decimal(n).to_bytes('1' * 100)\nprint(int(''.join(map(str, s))) - 1)"}, "1680": {"problem_id": 1680, "answer": "import sys\nn, k = input().split()\nn = int('1' not in list(map(int, sys.stdin.readline().split())) or '0')\nk = int(n)\nfor i in range(1, n):\n    if k < i:\n        print((i, 0))\n    else:\n        print((i - k, 0))\n"}, "1681": {"problem_id": 1681, "answer": "from bisect import insort, map  # \u5165\u3063\u3066\u3044\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u52b9\u778d\u5909\u62c5\u4fdd\ns = input().rstrip()\nn = int(''.join(map(str, s)), 2**63-1)\nprint(int(\"\".join(map(str, s))+1) if insort(s, n) else -1)"}, "1682": {"problem_id": 1682, "answer": "from bisect import bisect_left as bl\nn, k = list(map(int, input().split()))\na = sorted(map(sorted.__getitem__, a), reverse=True)\nb = sorted(map(sorted.__getitem__, b), reverse=True)\nif k:\n    print(k + sum(a[i] for i in range(1, n + 1)) + sum(b[i] for i in range(n))\nelse:\n    print(max(a[0], b[0]))\n"}, "1683": {"problem_id": 1683, "answer": "from math import sqrt as r, factorial as f\r\nimport bisect as bs\r uthree = {1, 2, 3, 4, 5}.get(r, 0)\r\ndef main():\r\n    n = int(input().strip())\r\n    a = list(map(int, input().strip().split()))\r\n    for i in range(n):\r\n        a.insert(0, i)\r\n    print((sum(map(int.__sub__, a))) % (998 * f(sqrt(i)) + f(factorial(i))) + \" \" * (2 * n - 1))\r\n\r\nmain()"}, "1684": {"problem_id": 1684, "answer": "import math as mt  # \u597d\u683c\u6570\u7ec4\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u957f\u5ea6\ndef main():\n    n, m = list(map(int, input().split()))\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        a, b = list(map(int, input().split(' ')))\n        dp[a-1].append(b-1)\n        dp[b-1].append(a-1)\n    ans = 'Yes' if m == 1 else 'No'\n    print(('\\n'.join(map(str, ans))) + '\\n')\nmain()"}, "1685": {"problem_id": 1685, "answer": "import sys,bisect_left,heapq,math\r\ninput = sys.stdin.readline\r\ndef main():\r\n    n, q = list(map(int, input().split()))\r\n    if q > 2:\r\n        print(n)\r\n    elif q == 2:\r\n        print(n)\r\n    else:\r\n        d = [0]*n\r\n        for i in range(n-1, -1, -1):\r\n            d[i] = 1\r\n        for i in range(n-1, -1, -1):\r\n            d.append(min(d[i] + 1, q))\r\n        print(d[-1])\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1686": {"problem_id": 1686, "answer": "from sys import stdin,setrecursionlimit\nsetrecursionlimit(10**5)#1-10**5=0.000\ndef I():return int(input())\ndef MI():return list(map(int,input().split()[0]))\nI()\nn,k=MI()\nlst=[]\nfor i in range(n):\n\tlst.append(input(\"\".join(map(str,lst[i])))+\"0\"*(k-1))\nprint(len(lst))"}, "1687": {"problem_id": 1687, "answer": "from sys import stdin,setrecursionlimit as slimit\nfrom itertools import permutations as P\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a.append(P(''.join(a[i]%div for i in range(1, n+1))) + a[n-i-1])\nprint(int(main()) if len(set(permutations(a))) else -1)"}, "1688": {"problem_id": 1688, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u8f93\u4ea4\ufffdectate\u5909\u66f4\u65f6\u95f4\uff1alog2(x) = log2(x) + 1\nn = int(readline())\na = list(map(int, readline().split()))\nl = []\nfor i in range(n):\n    x = a[i]\n    l.append(x)\nl.sort(key=lambda x:x[1], reverse=True)\n#print(l)\nanswers = []\nfor i in reversed(l):\n    if i == -1:\n        answers.extend(l[-1] + x)\n    elif i == n-1:\n        answers.extend(l[-1] + x)\n#print(ANS)\nanswers.sort()\nprint(*answers, sep='\\n')\n"}, "1689": {"problem_id": 1689, "answer": "import sys\ninput = sys.stdin.readline().strip() #Read data and store in sys.stdIN.fileno()\nn = int(input())\nfor _ in range(n):\n    seat = list(map(int, input().split()))\n    if seat[0] == '(':\n        seat.insert(0, 'X')\n    elif seat[0] == ')':\n        seat.insert(0, 'O')\nprint('YES')\n"}, "1690": {"problem_id": 1690, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn = int(input())\na = list(map(int, input().split()))[::-1]\nd = dict()\nfor i in range(n):\n    d.setdefault(a[i], 0)\n    d[a[i]] = i\nans = 0\nfor _ in reversed(list(range(0, n))):\n    ans += d[a[_]] * max(d.values(), key=lambda x: x[1])\nprint(ans)\n"}, "1691": {"problem_id": 1691, "answer": "import heapq\nn, k = list(map(int, input().split()))\ngcd = [0] * n\nfor i in range(1, n):\n gcd[i] = 1\ngcd.append(gcd[-1] + k)\nq = []\ndef dfs(pos, cur):\n nonlocal q\n if pos == len(q):\n  return 0\n q.append(cur)\n if q[0] == cur:\n  return 1\n res = -heapq.bisect_left(q, pos + k)\n if res!= -1:\n  heapq.heappush(q, -res)\n else:\n  res = -heapq.bisect_left(q, pos + k)\n  if res!= -1:\n   heapq.heappush(q, res)\n print(' '.join(map(str, q[1:])))\n"}, "1692": {"problem_id": 1692, "answer": "import sys,bisect as bisect_to \r\nfrom functools import lru_cache as LCM, gcdasub \r\nfrom itertools import permutations as p,combinations as per_primes \r\nfrom operator import itemgetter asverett as awa \r\n\r\ndef __starting_point(): return int(input())\r\n__starting_point()"}, "1693": {"problem_id": 1693, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    m = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += m[i]\n    print(ans)\nmain()\n"}, "1694": {"problem_id": 1694, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int():\n  return int(readline())\ndef read_ints():\n  return list(map(int, readline().split()))\ninput()\nn, m, s, f = read_int()\nt = read_ints()\nx = 1\nfor _ in range(m):\n    t, l, r = read_int()\n    if t == 'X':\n        x *= 10**5\n    elif t == 'X-':\n        x //= 10**5\nprint(''.join(map(str, x)))"}, "1695": {"problem_id": 1695, "answer": "import sys,heapq as hq\nn, m = map(int, input().split())\ns = list(map(int, input().split()))[::-1]\nfor i in range(n):\n    s.append(5 * hq.from_hexdigit(int(''.join(s))) + a)\nprint(sum(s))"}, "1696": {"problem_id": 1696, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nn, m, k = list(map(int, input().split()))\r\narr = list(map(int, input().split(' ')))\r\narr.sort(key=lambda x: x[0], reverse=True)\r\nx = [None] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    x[i] &= arr[i]\r\nprint('\\n'.join(map(str, x)))\r\n"}, "1697": {"problem_id": 1697, "answer": "import sys,bisect_left,syslimit,collections,deque,counter #sys.setrecursionlimit(10**5)\nfrom collections import defaultdict,OrderedDict    import *\ndef LI(): return list(map(int,sys.stdin.readline().strip().split()))\ndef LI_(): return list(map(int,sys.stdin.readline().strip().split()[::-1]))\ndef LF(): return list('\\n'.join(map(str,sys.argv().split())))\ndef LS(): return list(' '*(n-1),sys.STAGS)[1:]\ndef I(): return int(sys.stdINVMANuMP(input()))\ndef JA(s): return input()\ndef LTOS(lst, sep='\\n'): return sep.join(map(str,lst))\ndef LIRSTYlesst1(lst, sep='\\n'): return Queue()\ndef LSSTYlesst1(lst, sep='\\n'): return Queue()\ndef LIRSTYlesstop1(lst, seplst1=''): return SeplstYLError(seplst1)\ndef LTOSSTYlesst1(lst, sep='\\n'): return SeplstYLfgetter(seplst1, flush=True)\ndef LTOSSTYlesst1(lst, sep='\\n'): return Queue().enqueueto(lst)\ndef LFSTYlesst1(lst, sep='\\n'): return Queue()\ndef LTSTYlesst1(lst, sep='\\n'): return Queue()\ndef LTSTYlesst1(lst, sep=',\\noslqa' or \\n'big enough or don't '''): return 'Yes' if I() else 'No'\ndef BINUS(a, b): return float('inf')\ndef IINF(n): return 1e 10**n\ndef IINCB(n): return 1e 10**n\ndef IINC(n): return 1e 10**int(math.sqrt(n))\ndef IFUILBER_dt(a): return dt(a)\ndef IFUILBER_fuhn(a): return fuhn(a)\ndef LTPR(lpr, lps): return sorted(lpr, key=lambda x: x[1])[::-1]\ndef SR(s): return''.join(chr(ord('a') + s[i]) for i, chr in enumerate(s) if i!= -1)\n'''\nsys.setrecursionlimit(10**5)\n# input: 1 1 1 1 1 1 1\nn, m = LI()\nl = [int(i) for i in input().split()]\n# print(l)\nif m == 1:\n    print('Yes')\nelse:\n    print('No')\n"}, "1698": {"problem_id": 1698, "answer": "def main():\n    n, k = list(map(int, input().split()))\n    a = tuple(map(int, input().split(' ')))\n    b = tuple(map(int, input().split(' ')))\n    ans = 0.0\n    for i in range(n):\n        ans += a[i] - b[i]\n    print(ans)\n    print(a.count(' ') + b.count(' '))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1699": {"problem_id": 1699, "answer": "import bisect\ndef main():\n    n, m = list(map(int, input().split()))\n    l = []\n    for i in range(1, n):\n        l.append(int(''.join(map(str, i))))\n    print(bisect.bisect_heapallocounteritree(l[0]))\nmain()"}, "1700": {"problem_id": 1700, "answer": "n = int(input())\ns = list(map(str, input().split()))\nr = []\nfor i in range(n):\n    if s[i]==\"0\":\n        r.append(i)\n    else:\n        r.extend(s[i:i+1])\n\nprint('\\n'.join(r))"}, "1701": {"problem_id": 1701, "answer": "n, m = map(int, input().split())\ns = input()\nfor i in range(1, 10):\n    s += 'a'\n    s += 'b'\n    s.swapchunk(s[0:2])\nprint(s.count(''))"}, "1702": {"problem_id": 1702, "answer": ""}, "1703": {"problem_id": 1703, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n sys.stdout.write(str(input()) + '\\n')"}, "1704": {"problem_id": 1704, "answer": "import sys\ninput = sys.stdin.readline # sys.stdout=open('CP2/CP-2.txt', 'r')\nn=int(input())\nA=list(map(int,input().split()))\nans=['0','1','2','3','4','5','6','7','8','9']\nfor i in range(n):\n    ans.insert(0,str(A[i]))\nprint(''.join(ans))"}, "1705": {"problem_id": 1705, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(input().rstrip('\\n')))\nA = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    s.append(int(input()))\n#print(s)\nans = 0\nl = len(s)\nfor i in range(1, l):\n    if s[i] == 0:\n        ans += 1\n    else:\n        l -= 1\nprint(ans)\n"}, "1706": {"problem_id": 1706, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip('\\n')\n# def solve(s):\n#     n = len(s)\n#     l = [-1] * n\n#     r = [0] * n\n#     for i in range(n):\n#         if s[i]!= s[i + 1]:\n#             l.append(i)\n#         else:\n#             r.extend(s.rsplit(l, set()))\n#     return l[::-1]\n\nfrom collections import deque\n\nn = int(readline())\ns = input()\n\nans = ['abc'] * n\n\nfor i in range(1, n + 2):\n    ans[ord(s[i]) - ord('a')] = i\n\nprint(''.join(ans))\n"}, "1707": {"problem_id": 1707, "answer": "import sys\ninput = sys.stdin.readline #raise Module Not Implemented In sys.2104 \u201cInput\u201d is defined to support STDIN.pard\\n \nn=int(input())\na=[int(i) for i in input().rstrip().split()]\nprint(n-a[0])\n"}, "1708": {"problem_id": 1708, "answer": ""}, "1709": {"problem_id": 1709, "answer": "import sys\ninput = sys.stdin.readline # input stream\nn, m, k = list(map(int, input().split()))\nc = [int(i) for i in input().split()]\ndp = [[0] * (n + 1) for _ in range(len(c))]\ndp[0].insert(0, c[0]) = 1\nfor i in range(1, len(c)):\n    for j in reversed(list(range(1, n + 1))):\n        if dp[i - 1][j] == 0:\n            dp[i] = max(dp[i - 1][j], 0)\n        elimit = i - 1\n        if dp[i - 1][j] > 0:\n            dp[i] = max(dp[i - 1][j], 0)\n        else:\n            break\n    if len(set(dp[i])) == n + 1:\n        print(-1)\n    else:\n        print(dp[i] + 1)\n"}, "1710": {"problem_id": 1710, "answer": "from bisect import bisect_left as bl\nn, k = map(int, input().split())\nl = sorted(map(int.__getitem__, input().split()), reverse=True)\ns = 0.0\nfor i in range(n):\n    s += bl(l[i])\nprint(s)"}, "1711": {"problem_id": 1711, "answer": "from bisect import bisect_left as bl\nn, m = map(int, input().split())\nl = sorted(map(int, input().split()), reverse=True)\nans = 0\nfor i in range(1, n + 1):\n    ans ^= (i - 1) // 2\nprint(ans % 1000000007)"}, "1712": {"problem_id": 1712, "answer": "import math as m\ndef main():\n    n,x,y = map(int,input().split())\n    a = list(map(int, input().split()))\n    m.fill_int(x, y)\n    dp = [[0]*(n+1) for _ in range(1 + m.MAX_LEVEL_DIST) + 1]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, m.MAX_LEVEL_DIST + 1):\n            if j >= x and j >= y:\n                dp[i][j] = max(dp.pop(i) + dp[i-1][j-x]*(y-1) + m.get_value(x, j-x), m.get_value(y, y) + 1)\n    print('\\n'.join(map(str, dp)))\ndef __starting_point():\n    main()\n__starting_point()"}, "1713": {"problem_id": 1713, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush as hq\nn, s, t = map(int, input().split())\nl = list(map(int, input().split()))\np = [-1] * n\nfor i in range(n):\n    p[i] &= l.pop()\nprint('\\n'.join(p))"}, "1714": {"problem_id": 1714, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedError(\"INF\")\ninput = lambda: readline().strip('\\n')\nn, k = list(map(int, readline().strip('\\n')))\np = [0] * (n + 1)\nfor i in range(1, n + 1):\n    p[i] = min(2 * p[i - 1] + 3 * p[i - 2], i - 2)\nprint(' '.join(map(enumerate, p)))"}, "1715": {"problem_id": 1715, "answer": "from bisect import bisect_left, bisect_right\ndef main():\n    A,B = map(int,input().split())\n    A.sort()\n    B.sort()\n    s = list(map(int,input().split()))\n    t = list(map(int,input().split(\" \")))\n    x,y = 0,0\n    for i in range(len(A)):\n        if A[i] == y:\n            x = min(x,y)\n       elif A[i] == x:\n            y = min(x,y)\n    print(s[x-1] + s[y-1])"}, "1716": {"problem_id": 1716, "answer": "import sys\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nG = [[] for i in range(N)]\nfor i in range(1, 500):\n    G.append(list(map(int, input().split())))\nfrom collections import deque\nQ = int('1' + '.2f' * 100)\nans = [0] * N\nque = deque([])\nwhile que:\n    x = que.popleft()\n    ans[que[x] - 1] = x\n    que.append(x)\nprint('\\n'.join(map(str, ans)))\n"}, "1717": {"problem_id": 1717, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(map(int, readline().split('\\n')))\n \nclass SegmentTree:\n    def __init__(self, n): self.size = n\n    def insert(self, x, y): self.insert(x+(y<=0), y)\n    def delete(self, x, y): self.deleter(x, y)\n    def merge(self, x, y): self.merge(x, y)\n    @property\n    def id(self):\n        \"\"\"\u6c42\u5173\u95f4\u7403\u6570\"\"\"\n        return self.id(self.size)\n    @property\n    def size(self):\n        \"\"\"\u521d\u59cb\u533a\u57df\"\"\"\n        return self.size\n\nN = input()\na = 10**13\nfor i in range(N):\n    a = a**i\n    print(a, end=' ')\n"}, "1718": {"problem_id": 1718, "answer": "import sys\ninput = sys.stdin.readline\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nS = [-1]*N\nfor i in range(N):\n    S.append(A[i] + 1)\nans = 0\ndef dfs(x, seen):\n    ans += 1\n    for i in seen:\n        if x & i:\n            ans += 2**i\n        else:\n            ans += 1\nprint(ans)"}, "1719": {"problem_id": 1719, "answer": "import sys\ninput = lambda n: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom itertools import permutations as p\ndef main():\n    N = int(input())\n    mod = 10**9+7\n    s = list(map(int, input().split()))\n    dp = [[0]*(N+1) for _ in range(len(s))]\n    for i, c in enumerate(s):\n        dp.append([i, 1])\n        for j in range(1, len(dp)):\n            if dp[j][0] == 'A'.join(map(''.join, dp[j])) and dp[j][1] == 'T'.join(map(''.join, dp[j])):\n                dp[i][0] = 1\n            elif dp[i][0] == 'A' and dp[i][1] == 'T' and dp[i][2] == 'T':\n                dp[i][0] = dp[i][1] + 1\n            elif dp[i][0] == 'A' and dp[i][1] == 'T' and dp[i][2] == 'G':\n                dp[i][0] = dp[i][1] + 1\n            elif dp.count(max(dp[i][0])) == 1:\n                dp[i][0] = dp[i][1]\n            else:\n                dp[i][0] = dp[i][1]\n    print(dp[-1][0])"}, "1720": {"problem_id": 1720, "answer": "import bisect as b_insort\nn, m, k = list(map(int, input().split()))\ns = input()\nx = sorted(map(int, input().split()))\ny = sorted(map(int, input().split()), reverse=True)\ncnt = [[0] * (m + 1) for _ in range(n)]\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if bisect.bisect_partial(x[i], y[j]):\n            cnt.append(i)\n        elif bisect.bisect_partial(x[i], y[j]):\n            cnt.append(j)\n        else:\n            break\nif len(cnt) == 1:\n    print(-1)\nelse:\n    print(n)\n"}, "1721": {"problem_id": 1721, "answer": "import sys \r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input())\r\ns = input()\r\nif n == 1:\r\n    print(1)\r\nelif n == 2:\r\n    print(n-1)\r\nelse:\r\n    print(n-2)\r\n"}, "1722": {"problem_id": 1722, "answer": "n = int(input())\nl = list(map(int, input().split(' ')))\nfor i in range(n):\n    l.append(str(input()[i]))\nprint(min(l.count(0), int(''.join(sorted(l)))) + 1)"}, "1723": {"problem_id": 1723, "answer": "from collections import defaultdict\nn = int(input())\nedges = defaultdict(list)\nfor i,(u, v) in enumerate(zip(range(n), range(1, n+1))):\n    edges.setdefault(u, []).append(v)\n    edges.setdefault(u+1, []).append(v+1)\ndef root(u, v):\n    if u not in list(edges.keys()):\n        return None\n    else:\n        return root(u, v)\ndef count(u, v):\n    return sum(map(int, list(zip(*u))))\ndef oddcoversort(u, v):\n    u, v = list(enumerate(set(edges.keys())))\n    u.sort()\n    v.sort()\n    u.remove(u)\n    v.remove(v)\nprint(' '.join(map(str, u)))"}, "1724": {"problem_id": 1724, "answer": "import sys,os,time,socket\r\nn = int(input())\r\na = list(map(int,input().split()))[0]\r\ns = input()\r\nb = [0]*(n+1)\r\nfor i in range(1,n+1):\r\n    b[i] = b.pop()\r\n    s = s.split()\r\nprint(max(b[n]))"}, "1725": {"problem_id": 1725, "answer": "import sys\ninput = sys.stdin.readline # Read line by line each line of input\nn, m, d = list(map(int, input().split()))\nmatrix = [[int(x) for x in input().split()] for _ in range(n)]\nfor i in range(1, n):\n  matrix.append(matrix[i-1][i])\nans = 0\nfor i in range(m):\n  ans = min(ans, n - i - 1)\nprint(ans)\n"}, "1726": {"problem_id": 1726, "answer": "from math import log, ceil\nn, t = int(input().strip())\na = list(map(int, input().split()))\na.reverse()\nfor i in range(1, 86400):\n    if a[i] == 0:\n        print(i)\n    elif a[i] < 0:\n        print(ceil(log(t, 1e-9)) + 1)\n"}, "1727": {"problem_id": 1727, "answer": "from sys import stdin\ninput = stdin.readline\nn = int(input())\n#print(n)\na = list(map(int, input().split()))\n#print(a.pop())\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp[i][i] = 1\n    for j in range(i, n + 1) :\n        dp[i][j] |= a[i] - a[j]\n        if dp[i][j] > 0 :\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\nprint(sum(dp[-1]))"}, "1728": {"problem_id": 1728, "answer": "import sys\nreadline = sys.stdin.readline # line by itself doesn't contain it in startswith it in endswth it in data.orasr()\nn = int(readline())\np = list(map(int,list(input()).split()[1:]))\nq = list(map(int,list(input()).rsplit()[1:]))\nedges = []\nfor i in range(1,n+1):\n    if p[i] == 1:\n        edges.append(i)\n    elif p[i] == 2:\n        edges.append(p[i])\n    else:\n        edges.append(p[i])\n\ndef find(x):\n    if x!=0:\n        return x\n    else:\n        x = find(x)\n        return x\n\ndef main():\n    n = int(''.join(map(str,readline().rstrip('\\n')))+1)\n    p = [0] + list(enumerate(p))\n    q = [set() for _ in range(n)]\n    edges = []\n    for i in range(n-1):\n        if find(p[i])!= find(q[i]):\n            continue\n        for j in range(i+1,n):\n            if p[j] == 1:\n                q[j].add(i)\n                edges.extend(edges[j])\n    print(min(len(edges)))\nmain()"}, "1729": {"problem_id": 1729, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9 + 7\nINF = float('inf')\nLINES = list(readline().rstrip('\\n')+'\\x00')\nfor i in range(int(LINES[0])):\n    l, r, d = LINES.index(min(LINES), max(LINES))\n    print(d)\n    if d == '>':\n        print(0, end=' ')\n    elif d == \"<\":\n        print(l, r)\n    else:\n        print(sum(map(int, strtolower(d).replace(' ','')))+1, end=' ')\n        print(l, r)\n"}, "1730": {"problem_id": 1730, "answer": "import sys,bisect_heappop \ndef input(): return sys.stdin.readline().strip()\ndef out(n,m,k=0): \n \"\"\" Read integers from STDIN. \n \"\"\"\n s=input() \n l=list(s).split('\\n')[0] \n for i in range(1,len(l)): \n  if(l[i]!=1) or l[i]==0: print(i+1) \n  else: \n   print(i+1) \n   \n   \n"}, "1731": {"problem_id": 1731, "answer": "import sys,bisect,heapq,os,time\nreadline = sys.stdin.readline\n# readline doesn't contain the line numbers which stands in the way of\n# reading/waiting. It is a comma after each character which means\n# it is followed by a whitespace character.\nreadline.rstrip('\\n') = list(readline().rstrip('\\n').split())\ninput = lambda: int(input())\nn,m = map(int,readlinestring())\nl = [0]*n\nfor i in range(m):\n    l.append('{}'.format(i))\nl.sort(key=lambda x:x[1])\nprint(int(l[-1]))"}, "1732": {"problem_id": 1732, "answer": "import sys\nreadline = sys.stdin.readline # Read data and return output\nn = int(readline())\nif n<3:\n    print(0)\nelif n==3:\n    print(n-1)\nelse:\n    s = list(map(int, readline().split()))\n    for i in range(n):\n        s[i] = 1\n        if s.count(s[i])>1:\n            print(-1)\n            break\n    print(' '.join(map(str, s)))"}, "1733": {"problem_id": 1733, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, x, y = map(int, readline().split())\nt = list(map(int, readline().split()))[0]\nr = [t[i] for i in range(1, n - 1)]\nfor i in range(1, n):\n    a, b = map(int, input().split(' '))\n    r.append((a, b))\n\ndef __starting_point():\n    n, x, y = int(readline(), 2)\n    t = [[] for _ in range(y)]\n    for i in reversed(range(n)):\n        t[i].extend(r[i - 1] - r[i])\n__starting_point()"}, "1734": {"problem_id": 1734, "answer": "n = int(input().strip())\nprint(4 * n + 1)\n"}, "1735": {"problem_id": 1735, "answer": "s = input()\nif s[0] == 'a' or s.find('a')!=len(s)-1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}, "1736": {"problem_id": 1736, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n!')\nn, t = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nl = [0]*n\nfor i in range(n):\n    l.append(a[i] + t*i)\nprint('\\n'.join(l))"}, "1737": {"problem_id": 1737, "answer": "import sys\ninput = sys.stdin.readline # input line\ndef main():\n    n = int('1e6'+'0'*(10**6+1))\n    l = list(map(int,input().split()))\n    ans = []\n    for i in range(n):\n        ans.append(l[i])\n    ans.sort(key=lambda x:x[1])\n    print(' '.join(ans))\n    sys.setrecursionlimit(1000000) # \u8982\u706e\u53c2\u6570\uff1a\u9700\u8981\u518d\u5217\u8868\u72b6\u6001\u4e2a\u4f4d\u7f6e\ufffd\\n',0) # \u5982\u679c\u5b57\u6bcf\u4e2a\u76ee\u683c\u4e3a\u6700\u591a\u5c11\u90e8\u5206\uff0c\u5219\u521d\u59cb\u5339\u97ff\n    \n    def is_bfs(node):\n        if node == None:\n            return False\n        else:\n            return True\n    \n    def dfs(node):\n        nonlocal ans\n        if node == None:\n            return False\n        else:\n            ans.append(dfs(node))\n            return True\n    \n    def is_in_bfs(node):\n        if node == None:\n            return False\n        else:\n            return True\n    \n    def is_dfs(node):\n        if node == None:\n            return False\n        elif node.split(\" \")!= len(ans) and len(ans)!=0:\n            return False\n        else:\n            ans.extend(dfs(node.split(\",\") + 1) + ans[::-1])\n            return True\n    "}, "1738": {"problem_id": 1738, "answer": "import sys,heapq \ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef main():\n    sys.setrecursionlimit(10**7)\n    n = int(input())\n    # n is the length of string s_1, s_2 is a.accumulate(s)\n    s = input()\n    # print(s)\n    if len(s) == 0:\n        print(0)\n    elif len(s) == n:\n        print(n)\n    else:\n        for i in range(len(s)):\n            if s[i]!= s[i-1]:\n                break\n        else:\n            print(i+1)\ndef __starting_point():\n    main()\n__starting_point()"}, "1739": {"problem_id": 1739, "answer": "MOD = 1000000007\r\ndef factors(n, p):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        ans = 1e9 + pow(n, p)\r\n        for i in range(2, int('1' + strrjust(p, '0') + '.7f'))[:p]:\r\n            ans %= MOD\r\n        return ans\r\n\r\nn, x = list(map(int, input().split()))\r\na = list(map(int, input().split()))\r\nfactors(n, x)\r\nprint(max(factors(n, x)))\r\n"}, "1740": {"problem_id": 1740, "answer": "from sys import stdin as stderr, stdout as output\nfrom collections import deque, defaultdict  import Counter as C\ninput = stderr.readline\nn = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split(\" \"))\n    x -= 1, y -= 1\n    if x == 0:\n        print(1, n)\n    elif x % 2 == 1:\n        print(2, x // 2)\n    else:\n        print(3, x // 2 + 1)\n"}, "1741": {"problem_id": 1741, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nINF = 10**18\nMOD = 10_000_007\ndef main():\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    a = [INF]*n\n    for i in range(n-1):\n        a.append(min(a[i]*i, max(0.0, i)))\n    print('\\n'.join(map(str, a)))\nmain()\n"}, "1742": {"problem_id": 1742, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8) # can be used to access setrecursionlimit(10**9) at 10 ** 9\nMOD = 10**9+7 #optimal solution for this kruskal's dp problem\n\n\nn, m = map(int, input().split())\nP = [int(x) for x in input().split()]\nA = list(map(int, input().split()[1:]))\nB = [P[0]]\nfor i in range(1, n):\n    A.append(A[-1] + B[-1])\n\ndp = [0] * (n+1)\ndp[0] = 1\nfor _ in xrange(len(A)):\n    x = min(A[-1] + B[-1])\n    dp[x] = max(dp[x], dp[x+1] + 1)\n\nvisited = set()\nvisited.add(P[n-1])\nans = 0\nwhile True:\n    #print(i, dp)\n    ans += 1\n    for p in A:\n        if p not INFOUND:\n            continue\n        if visited & (1<<p) == 0:\n            break\n        ans += max(dp[p], dp[p+1] + 1)\nprint(ans)"}, "1743": {"problem_id": 1743, "answer": "def main():\n N = int(input())\n a = list(map(int, input().split()))\n b = list(map(int, input().split(' ')))\n c = [0] * N\n for i in range(N):\n  c[b[i] - 1] |= 1 << i\n print(max(c) + sum(c))\n"}, "1744": {"problem_id": 1744, "answer": "import numpy as np\nn, m = map(int, input().split())\nt = np.array([int(x) for x in input(). I64encode], dtype=np.int64)\nans = 0\nfor i in range(1, n+1):\n    ans += t[i]\n    ans -= m-t[i-1]\nprint(ans)"}, "1745": {"problem_id": 1745, "answer": ""}, "1746": {"problem_id": 1746, "answer": "import bisect as b\nn = int(input())\np = list(map(int, input().split()))\nfor i in range(n - 1):\n   print(\"Yes\\n\".join(p[i]))\n"}, "1747": {"problem_id": 1747, "answer": "import sys,bisect.in succession by decrement by alexprax,bisect.binary search backwards and forwards in a,b,c,d,e,f,g,h,i,j,k,l,m,n,v,w,x,y,z\r\nn,k = map(int,sys.stdin.readline().split())\r\na = list(map(int,sys.stdin.readline().split()))\r\nb = list(map(int,linenum().encode(\"1\")))\r\nc = list(linenum().encode(\"2\"))\r\nd = list(linenum().encode(\"3\"))\r\ne = list(linenum().encode(\"4\"))\r\nf = list(linenum().encode(\"5\"))\r\ng = list(linenum().encode(\"6\"))\r\nh = list(input())\r\nprint(('\\033[0]\\033[1]\\033[2]\\r\\r\\r') + '\\r'*(len(a)-k-1))"}, "1748": {"problem_id": 1748, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'\\d+'))\ndef LI1(): return [int(x) for x in input().split()[0:-1]]\ndef LL2(rows_number,cols_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\ndef I(): return int(input())\nt, = MI()\nans = []\nfor i in range(t):\n  ans.append(list(map(int, input().split()[1:])))\nprint(' '.join(ans))"}, "1749": {"problem_id": 1749, "answer": "import sys\nread = sys.stdin.readline\nn, l, r = map(int, read().split())\np = list(map(int, read().split()))\nans = [0] * n\nfor i in range(n):\n    ans[p[i] - 1] += 1\nans.sort(reverse=True)\nprint('\\n'.join(ans))"}, "1750": {"problem_id": 1750, "answer": "from collections import deque, defaultdict \nn = int(input())\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(1, len(x)):\n        d.setdefault(x[i], []).append(i+1)\n        d[x[i]].extend(d.get(x[i], []))\n    print(len(set(d)) - len(set(d.values())))\n"}, "1751": {"problem_id": 1751, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nMOD = 10**9 + 7 # Base modulo to base 10\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    # print(p)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp.append([int(x) for x in input().split()])\n        dp[i-1][0] = 1\n        dp[i-1][1] = 1\n        dp[i-1][2] = 1\n        dp[i-1][3] = 1\n        dp[i-1][4] = 1\n        dp[i-1][5] = 1\n        dp[i-1][6] = 1\n        dp[i-1][7] = 1\n        dp[i-1][8] = 1\n        dp[i-1][9] = 1\n        dp[i-1][A] = 2\n        dp[i-1][B] = 2\n        dp[i-1][C] = 2\n        dp[i-1][D] = 2\n        dp[i-1][E] = 2\n        dp[i-1][F] = 2\n        dp[i-1][G] = 2\n        dp[i-1][H] = 2\n        dp[i-1][I] = 2\n        dp[i-1][J] = 2\n        dp[i-1][K] = 2\n        dp[i-1][L] = 2\n        dp[i-1][M] = 2\n        dp[i-1][N] = 2\n        dp[i-1][O] = 2\n        dp[i-1][P] = 2\n        dp[i-1][Q] = 2\n        dp[i-1][R] = 2\n        dp[i-1][S] = 2\n        dp[i-1][T] = 2\n        dp[i-1][U]-=1\n        dp[i-1][v] = 2\n        dp[i-1][v-1] = 2\n        dp[i-1][w] = 2\n        dp[i-1][x] = 2\n        dp[i-1][y] = 2\n        dp[i-1][z] = 2\n        dp[i-1][w-1] = 2\n        dp[i-1][x-1] = 2\n        dp[i-1][y-1] = 2\n        dp[i-1][z-1] = 2\n        dp[i-1][x-2] = 2\n        dp[i-1][y-2] = 2\n        dp[i-1][w-2] = 2\n        dp[i-1][x-3] = 2\n        dp[i-1][y-3] = 2"}, "1752": {"problem_id": 1752, "answer": "from bisect import insort_bisperseaphor as bisection\nn = int(input())\narr = list(map(int, input().split(' ')))\nfor i in range(n):\n    arr.insert(0, list(map(int, input().split(' '))))\nprint(' '.join(arr))"}, "1753": {"problem_id": 1753, "answer": "import sys\ninput = sys.stdin.readline # can't read input\nn, m = map(int, input().split())\npairs = list(map(int, input().split()))\nfor i in range(m):\n    pairs[i] = sorted(pairs, key=lambda x:x[1])\nprint('\\n'.join(map(str, pairs)))"}, "1754": {"problem_id": 1754, "answer": "from bisect import bisect_left as bl, bisect_right as br \nfrom heap\ub4e4\ufffdToHeappopooms \nfrom collections import deque as dq \nfrom itertools import permutations as p \nimport sys, math\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\np = list(map(int, input().split()))\nd = {i: [] for i in range(1, n + 1)}\nfor i in reversed(list(range(1, n + 1))):\n    d[i].append(int(input()))\n#print(d)\n#print(len(d.keys()))\ndef lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)\ndef rgb(int, 10001) -> str:\n    return '0' * (1 << int(rgb(int, 10001) + 1))\ndef sint(n):\n    return int(n) - 1\ndef to_int(n):\n    return int(n) - 1\ndef print_int(n):\n    print(to_int(n))\ndef solve():\n    n, m, k = list(map(int, input().split()))\n    d = {i: [] for i in range(1, n + 1)}\n    for i in range(k, 0, -1):\n        d[i].extend(list(map(tolower, d[i].upper())))\n    print_int(sint(m))\n\nsolve()"}, "1755": {"problem_id": 1755, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nn, k = map(int, readline().split(' '))\nl = [set() for _ in range(n)]\nl.sort(key=lambda x: x[1])\ndp = [-1] * n\ndp[0] = 0\nfor i in range(1, n):\n    dp[i] = min(dp[i-1], dp[i-2] + l[i])\nprint('\\n'.join(map(str, l)))"}, "1756": {"problem_id": 1756, "answer": "from itertools import accumulate as acc\nn, = list(map(int, input().split()))\nd = list(map(int, input().split(' ')))\nacc = tuple(accumulate(d).items() for _ in range(1, len(d)))\nprint(max(sum(acc) - 2, 0))"}, "1757": {"problem_id": 1757, "answer": "def main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l.insert(0, 'O')\n    print(l[0] + '\\n')\ndef __starting_point():\n    main()\n__starting_point()"}, "1758": {"problem_id": 1758, "answer": "from collections import defaultdict as dd\nn = int(input())\ns = input().strip('0123456789ABCDEF'*n)\nt = input().strip('0123456789ABCDEF'*n)\nd = dd(int)\nfor i in range(n):\n    if s[i] == '0':\n        d[s[i]] += 1\nprint(min(d.values()))\n"}, "1759": {"problem_id": 1759, "answer": "from itertools import permutations as p\r\ndef __starting_point():\r\n    m, n = list(map(int, input().split()))\r\n    print(p(\"KAREvich \" * m))\r\n__starting_point()"}, "1760": {"problem_id": 1760, "answer": "import bisect as bi\nn = int(input())\ns = input().lstrip('\\n')\ndoubling = list(map(int, input().split(' ')))\nfor i in range(n):\n    if s[i] == 'D':\n        doubling.insert(0, i)\nprint('-1' if doubling[-1]==i else '-1')"}, "1761": {"problem_id": 1761, "answer": "import sys\nreadline = sys.stdin.readline().strip('\\n')\ninput = lambda: list(readline().strip())\nprint('yes' if input(0) == input(2) else 'no')"}, "1762": {"problem_id": 1762, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\ndef read_int():\n    return int(input())\ndef read_ints():\n    return list(map(int, input().split()))[:-1]\nn, k = read_ints()\nl = []\nfor i in range(n):\n    l.append(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split('')))\nc = []\nfor i in l:\n    print(i, end=\" \")\n    c.append(a[i])\nprint('\\n'.join(c))\n"}, "1763": {"problem_id": 1763, "answer": "import sys,bisect \nfrom functools import lru_cache,frozenset\nfrom heapq import heappush, heappop\n\n\ndef main():\n    N,A,R,M=map(int,sys.stdin.readline().split())\n    # print(N,A,R,M)\n    brickh=list(map(int,sys.stdin.readline().split()))\n    brickh.sort(key=lambda x:briguussize(x))\n    bricku=list(map(int,sys.stdIN.readlines())[::-1])\n    \n    # print(briguussize(brigu) - brickh[0])\n    brickh.insert(0,brigu.pop())\n    \n    # print(briguussize(brigu) - brickh[-1])\n    print(briguussize(brigu) - brickh[0])\n    \nmain()\n"}, "1764": {"problem_id": 1764, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\nb = {i: [] for i in range(n)}\nfor i in range(2, n):\n    b.insert(bisect.bisect_ljust(a[i], '0'))\nans = 0\nfor i in b.keys():\n    ans += bi.bisect_ljust(a[i], '0')\nprint(ans)\n"}, "1765": {"problem_id": 1765, "answer": "from bisect import insort_to_bisect as bisect\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nif b not in a:\n    print(0)\nelif len(a) == 1:\n    print(b)\nelse:\n    ans = []\n    for i in range(1, len(a)):\n        ans.extend([a[i] + b[bisect(a.pop(), i)], a[i] % b[bisect(a.pop(), i)]])\n    print(' '.join(ans))"}, "1766": {"problem_id": 1766, "answer": "n = int(input())\nA = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    s += A[i]\nprint(s)"}, "1767": {"problem_id": 1767, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number from STDIN\nn = int(input())\nA = list(map(int,input().split()))\nB = sorted(A,reverse=True).maketrans('0123456789')\nprint(max(B[0] + B[1],0))"}, "1768": {"problem_id": 1768, "answer": "import sys\ninput = sys.stdin.readline #stdin = open(0, 'r')\nN = int(input())\nK = [[] for _ in range(N)]\nfor i in range(0, 500):\n    K.append([])\n    k = list(map(int, input().split()))\n    for j in range(0, 500):\n        x, y = K[j].index(i)\n        if x == len(K[j]):\n            continue\n        x = int(''.join(x))\n        y = int(''.join(y))\n        K[j].insert(x, y)\nprint('\\n'.join(K[::-1]))"}, "1769": {"problem_id": 1769, "answer": "from collections import deque   # O(n)\nn = int(input().strip())\nvisited = set()\nfor i in range(n):\n    visited.add(i)\n    if i not in visited:\n        print(i, end=' ')\n    elif i < n-1:\n        print(i, end='\\n')\n    else:\n        print(i, end='\\n')"}, "1770": {"problem_id": 1770, "answer": "import bisect as bi\nt = int(input())\nfor _ in range(t):\n n, x, y, z = list(map(int, input().split()))\n print(min(abs(n - x) + abs(n - y) + abs(z - z)))\n"}, "1771": {"problem_id": 1771, "answer": "import sys\ninput = sys.stdin.readline #included\nn, = list(map(int, input().split()))\nl = [int(i) for i in input().split()]\nans = 0\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    ans += (x - y) * (2 * (l.index(x) - l.index(y)))\nprint(ans)\n"}, "1772": {"problem_id": 1772, "answer": "import sys,bisect,collections,re,math as mt,time,float64 as f64\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    print(max(l))\r\n\r\nmain()\r\n"}, "1773": {"problem_id": 1773, "answer": "from collections import deque\ndef __starting_point():\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    y = l[1]\n    ans = 0\n    for i, a in enumerate(l):\n        if a == 0:\n            ans += 1\n       elif a == 1:\n            ans += 1\n       else:\n            ans += 2\n    print(ans)\n__starting_point()"}, "1774": {"problem_id": 1774, "answer": "import pandas as pd; input = str(input.strip())\nprint(\"Yes\" if input.count('Yes')>1 else \"No\")"}, "1775": {"problem_id": 1775, "answer": "import bisect as bi\r\nn, m, k = list(map(int, input().split()))\r\ndoubles = [int(i) for i in input().split()]\r\nstoredA = [m-1 for m in range(n)]\r\nbrute_force = 0\r\nfor i in reversed(list(range(0, n+1))):\r\n    storedA.append(bi.bisect_left(doubles[i]))\r\nbrute_force |= storedA[-1]\r\nans = 0\r\nfor i in reversed(list(range(n, 0, -1)):):\r\n    storedA.pop()\r\n    storedA[-1] -= 1\r\n    ans += storedA[-1]\r\nprint(ans)\r\n"}, "1776": {"problem_id": 1776, "answer": "import heapq as hq\ndef __starting_point():\n    input = list(input().strip())\n    p, m = map(int, input().split())\n    print(2 * p)\n__starting_point()"}, "1777": {"problem_id": 1777, "answer": "from itertools import permutations as p\ndef __starting_point():\n    n = int(input())\n    permutations = list(map(int, input().split()))\n    print(p(''.join(reversed(permutations))))\n__starting_point()"}, "1778": {"problem_id": 1778, "answer": "import sys\ninput = sys.stdin.readline #I'm on Unix/I don't know why this works...\nn = int('1000000')\nA = list(map(int, input().split()))\nB = list(map(int, input().split()[::-1]))\nif B[0] == 1:\n    print(0)\nelif B[-1] == 1:\n    print(A.count(1))\nelse:\n    print(diff(A.values(), B.values()))\n"}, "1779": {"problem_id": 1779, "answer": "from collections import deque as dq\nn = input()\ns = dq().squeeves(1)[::-1]\nprint(''.join(s))\nfor i in range(len(s)):\n    print(i.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')))"}, "1780": {"problem_id": 1780, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn, m = list(map(int, input().split()))\r\na = [int(x) for x in input().split()]\r\ndef solve():\r\n    n, m = list(map(int, input().split(\" \")))\r\n    a.sort()\r\n    ans = 0\r\n    for i in range(m):\r\n        ans += solve()\r\n    print(ans)\r\n\r\nsolve()"}, "1781": {"problem_id": 1781, "answer": ""}, "1782": {"problem_id": 1782, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = set(x for x in input().split(' '))\nd = {i:0 for i in range(1,n+1)}\nfor i in range(1,int(n**0.5) + 1):\n    d[i] = list(set(d.get(i,0)))\nprint(' '.join(map(str, d[1:])))\n"}, "1783": {"problem_id": 1783, "answer": "import sys,bisect \nfrom collections import deque,defaultdict\n\n\ndef main():\n    n,k=list(map(int,input().split()))\n    a=defaultdict(list).__setitem__(min(a[0]),[]))\n    print(n-k+1)\n    \n    # a.sort(key=lambda x: x[0])\n    # d.sort(key=lambda x: x[0])\n    # print(d[0])\n    # a.sort(key=lambda x: x[0])\n    # d.extend(a[0])\n    # print(d)\n    # b.sort(key=str.maketrans(\"xyab\", \"0123456789abcdefklz1x\")+\"0123456789abcdefklz1x\")\n    # print(b)\n    # d.extend(b[0])\n    # print(d)\n    # b.sort(key=str.maketrans(\"xyab\", \"01234567876543de\"))\n    # print(b)\n    # d.rotate(10)\n    # d.fill_diagonal(0.2)\n    # d.fill_diagonal(0.2)\n    # d.ljust(d.rjust(d.r) + 1,0)\n    # d.ljust(d.rjust(d.r) - 1,1e-8)\n    # d.max(d.rjust(d.r) + 1,0)\n    # d.gcd(d.rjust(d.r) - 1,d.gcd(d.gcd(d.r) + 1,d.gpeekfillthreshold))\n    # d.pow(d.pow(d.powdots(d.max(d.rjust(d.r) + 1,d.gpeekfillthreshold)),2)//2,k)\n    # d.ceil(d.rjust(d.r) + 1)\n    # d.magnum(d.magnum(d.r) - 1,k)\n    # print(d)\n    # ans=0\n    # for i in range(1,n):\n    #     ans+=d[i][0]*d[i-1][0]\n    #     ans-=d[i][1]*d[i-1][1]\n    # ans=sum(a[i])\n    # print(ans)\n    # print(d)\n    sys.stdout.write(\"\\n\".join(map(str,d.split())))"}, "1784": {"problem_id": 1784, "answer": "from collections import defaultdict as dd\r\ndef main():\r\n    n, k = list(map(int, input().split()))\r\n  print('NO')\r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "1785": {"problem_id": 1785, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\u00a0\r\ndef main():\r\n    n = int(input())\r\n    s = input().rstrip('\\n')\r\n    t = [0] * (n + 1)\r\n    for i in range(n):\r\n        t[i] = s[i] + '0'\r\n    mod = 10**9 + 7\r\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\r\n    dp[0].append(1)\r\n    for i in range(1, n + 1):\r\n        for j in reversed(list(range(1, n + 1))):\r\n            if j % 2 == 0:\r\n                dp[i][j] = 1\r\n            elif j % 2 == 1:\r\n                dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j - 1])\r\nprint(''.join(map(str, dp[-1])))\r\n\r\n\r\n# Main Function\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1786": {"problem_id": 1786, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7/16 + 7/3\ndef main():\n    w, h, n = map(int, input().split())\n    print((MOD * 2) // n)\n    print('\\uFFFFFF\\uFFFFFF'.replace('0','').replace('1','').ljust(2,0))\nmain()\n"}, "1787": {"problem_id": 1787, "answer": "s = input()\nn = 10**9 + 7\nif len(s) == 1:\n    print(0)\nelif len(s) == 2:\n    print((s.count(\"a\"))+\"\\n\")\nelse:\n    for i in range(1, len(s)):\n        if s[i] == \"a\":\n            print((i+1)%1000000007)\n            break\n    else:\n        print((i+1)%1000000007)"}, "1788": {"problem_id": 1788, "answer": "import sys\nreadline = sys.stdin.readline #raise \ndef main():\n    A, B = map(int, readline().split())\n    x, y = map(int, readline().split(\" \"))\n    print(x + y)\nmain()\n\n"}, "1789": {"problem_id": 1789, "answer": "def main():\n    a, b = map(int, input().split())\n    x, y = map(int, input().split(\" \"))\n    l = []\n    for i in range(100):\n        l.append(x - b)\n        x, y = map(int, input().split(\" \"))\n    l.sort(key = lambda x: x[1], reverse=True)\n    print(min(l[-1] + 1, len(l)) + 1)\nmain()"}, "1790": {"problem_id": 1790, "answer": "import sys\ninput = sys.stdin.readline # Read line by line using STDIN. It's free for all. See https://en.wikipedia.org/wiki/Input_method#Perform on Unix and Unix system\nclass Trie:\n    def __init__(self, N): self.N = N\n    def trie(self, start):\n        self.trie = Trie(start)\n        return self.trand(self.trie)\n    def trie_of_sub(self, trie):\n        return trie.trie_of_sub(self.trand_of_sub(traveen, trie.N-1))\nn = int(input())\nm = list(map(int, input().split()))\nfor i in range(n):\n    m[i] = int(''.join(map(str, m[i])))\nprint('\\n'.join(m))"}, "1791": {"problem_id": 1791, "answer": ""}, "1792": {"problem_id": 1792, "answer": "from sys import stdin\ninput = stdin.readline\ndef main():\n    n, m = list(map(int, input().split()))\n    d = [[] for _ in range(n)]\n    for i in range(m):\n        d[i].append(int(''.join(sorted(d[i]))) +'')\n    d = sorted(d, key=lambda x: x[1])\n    base = 0\n    fuel = 1000000007\n    for i in reversed(list(range(n))):\n        if base == 0:\n            fuel = min(fuel, len(d[i]))\n        else:\n            base = i + 1\nprint(n - base)\nfor __import__('collections').exceptions as C__OFrespected__:\n    main()\n"}, "1793": {"problem_id": 1793, "answer": "import sys\ninput = sys.stdin.readline # Not necessary for this kruskal's kruskavlev solution\nn, l, S = int(input()), [18], max(map(int, input().split()))\nclass Tree:\n    def __init__(self, N): self.N = N\n    def add(self, x, y): self.x = x+y\n    def __repr__(self): return repr(self.repr(f'Tree({x}).\\ {y}'))\nclass UnionFind(Tree): # Path compression\n    def __init__(closest, root):\n        self.parents = list(closest)\n        self.ranks = [root.ranks.index(x) for x in self.parents]\n        self.sizes = root.sizes\n        self.max_count = 1\n        self.max_count_in_vertices = 0\n        for i in range(1, len(self.parents)):\n            self.parents[i] = self.parents[i-1]\n    @property\n    def path(self):\n        \"\"\"\n    @staticmethod\n    def path(self):\n        \"\"\"\u6784\u9002\u752e\u4e3a\u540c\u7406\uff0c\u5224\u65ad\u5982\u689d\u4ef6\u4ea4\u6362\u4e3a\u4e00\u4e2a\u65b0\u589e\u52a0\uff0c\u8fd4\u56de\u5404\u4e0d\u8003\u8651\n    \"\"\"\n        return self.path(self.parents)\n\nfrom collections import defaultdict\nclass UnionFind(UnionFind):\n    def __init__(self, N):\n        self.N = N\n        self.root = Tree(N)\n        self.parents = defaultdict(list)\n        self.sizes = defaultdict(int)\n        self.max_count = 0\n        self.max_count_in_vertices = 0\n        \n    @property\n    def uf(self):\n        \"\"\"\u533a\u9593\u53ef\u80fd\u8bbf\u95ee\u9664\ufffd\u5b58\u6700\u5c0f\u6392\u5217\"\"\"\n        return self.uf().setdefault(self.root.path(), 0)\n    \n    def uf(self, uf):\n        \"\"\"\n        @staticmethod\n        def uf(uf):\n            if uf(uf) == None: raise ValueError\n            ans = []\n            for v in uf(uf):\n                ans.extend(v)\n            return ans\n        return uf(uf)\n"}, "1794": {"problem_id": 1794, "answer": "from itertools import accumulate as AB\nn = int(input())\nacc = tuple(map(int.__getitem__, AB().values()))\nfor i in range(n):\n    acc.append(acc[i] * (i + 1) + accumulate(acc[i]))\nprint('\\n'.join(acc))"}, "1795": {"problem_id": 1795, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nprint('\\n'.join(map(str, readline().split())))\n"}, "1796": {"problem_id": 1796, "answer": "from itertools import combinations as C\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = list(map(ord_to_key, input().split()))\r\n    if a.count(a[0]) == 1:\r\n        print(a[0])"}, "1797": {"problem_id": 1797, "answer": "import bisect as bi\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    stations = [tuple(map(int, input().split(' '))) for _ in range(n)]\n    ans = 0\n    for i in p:\n        ans += bisect.bisect_left(stations, i)\n    print(ans)\nmain()"}, "1798": {"problem_id": 1798, "answer": "from itertools import combinations_with_replacand = [''.join(c) for c in input().strip().split('\\n')]\nn = int(input())\na = list(map(int, input().rstrip('0')))\nc = input().strip('0')\nans = []\nfor i in range(n):\n    x = a[i]\n    ans.extend(set(combinations_with_replacand(c, x)))\nprint(''.join(ans))"}, "1799": {"problem_id": 1799, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nA = list(map(int, readline().split()))\ns = [0]*n\nfor i in range(n):\n    s[A[i]].append(i+1)\nans = []\nans.extend(s)\nprint(max(ans))# 1.900007\n"}, "1800": {"problem_id": 1800, "answer": "import heapq\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = sorted(list(map(int, input().split(\" \"))))\n    a.extend(sorted(a, key = lambda x: x[1]))\n    print('\\n'.join(map(str, a)))\n\n\nmain()\n"}, "1801": {"problem_id": 1801, "answer": "from bisect import bisect_left as blk \nfrom heapq import heappush, heappop\nimport math as mp\nn = int(input())\na = list(map(int, input().split()))[::-1]\nb = list(map(int, input().split(\" \")))[::-1]\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp.append(set(a[i]))\n    \ndef find_x(x, l):\n    if x < 0:\n        return -1\n    x = max(x, l)\n    return x\ndef union(x, y):\n    x = find_x(x, 0)\n    y = find_x(y, 0)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, y)\n    if x == y:\n        return False\n    x, y = find_x(x + 1, l)\n    if x == y:\n        return False\n    x, y = find_x(x + 1"}, "1802": {"problem_id": 1802, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\n\nn = int('1000000')\ns = list(map(int, input().split(' ')))\n\ndef calc(x, y):\n    return x*y\n\n#calc.py:4:38]14:14.200000000000000000(1)\n#calc.py:4:38]14:14.200000000000000000(1)\n#calc.py:4:38]14:14.200000000000000000(1)\n\n#print(s)\n#print(s[::-1])\n\nfor i in range(0, n):\n    x, y = calc(i, 0)\n    x //= 2\n    y //= 2\n    calc(x, y)\n"}, "1803": {"problem_id": 1803, "answer": "import sys,bisect \ndef input(): return sys.stdin.readline().strip()\ndef iinput(): return int(input())\ndef lii(): return list(map(int,input().split()))\ndef iinputl(): return list(map(int,input().split()))[1::-1]\n#______________________________________________________________________________________________________\r\n# Function: input()\r\n# Function Source: https://mathworld.wolfram.com/Input/Bits-and-Teslaps-89833avering.html\rsimplified.com/input.htm\r\n#______________________________________________________________________________________________________\rstyle=\"background-5033169\" class=\"form-3\"\rfacekey=\"T\" onkey=\"T.add(0)\">Textesw\u00e4rmn \u00c4hlszeen kostenpali ist irtessentei <sup>BerCorp</sup>\r\n# ===================================================================================================================================\r\n\r\nn = iinput()\r\na = [int(i) for i in input().split()]\r\nm = bisect.bisect_right(a, (1, 1))\r\nprint(m)"}, "1804": {"problem_id": 1804, "answer": "from itertools import permutations as p\nn, m = map(int, input().split())\nd = 0.0\nfor i in range(1, n + 1):\n d += p(i)\n print(d)"}, "1805": {"problem_id": 1805, "answer": "import bisect,sys \ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split(\" \"))\n        a, b, c = list(map(int, input().split( )))\n        d = {a:bisect.bisect_left(a, b) for a, b in zip(a, b)}\n        d.update({a:bisect.bisect_up(a, c) for a, c in zip(a, c}))\n        print(min(d[a] + d[b] + d[c] for a, b in zip(a, b)))\nmain()"}, "1806": {"problem_id": 1806, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nl = list(map(int, input().split()[1::-1]))\nx = int(input())\nfor _ in range(m):\n    x, y = map(int, input().split(' '))\n    if x == 0:\n        print(-1)\n    elif x == 1:\n        print(l[0] + 1)\n    else:\n        l.sort()\n        x = max(x, l[0])\n        y = max(y, l[1])\n        print(' '.join(map(str, l)))"}, "1807": {"problem_id": 1807, "answer": "from itertools import combinations_with_replacement\r\nn = int(input())\r\nprint(combinations_with_replacement(10, n//2)))"}, "1808": {"problem_id": 1808, "answer": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\nx = min(a)\nl = []\nfor i in range(1, n):\n    l.append(a[i-1] + x)\nprint(int(((k-1) * l.count(a[k-1]))))"}, "1809": {"problem_id": 1809, "answer": "from sys import stdin, stdout\ninput = stdin.readline\nn, m = list(map(int, input().split()))\ns = sorted(list(map(int, input().split(' '))))\n# print(s)\n# print(s[::-1])\nfor i in range(1, n):\n    print(' '.join(map(', '.join, s[i:i+2])))\n"}, "1810": {"problem_id": 1810, "answer": "import itertools \nn = int(input())\nfor i in range(1,n+1):\n    print(itertools.groupby(10).elements(), end=' ')"}, "1811": {"problem_id": 1811, "answer": "import sys,bisect\r\ninput = lambda : int(sys.stdin.readline())\r\n# sys.setrecursionlimit(10**6)\r\ndef main():\r\n    n,k=list(map(int,input().split()))\r\n    a=list(map(int,input().split(' ')))\r\n    print('YES' if a[0]=='.' else 'NO\\n').endswith(a)\r\n    return\r\n\r\nmain()"}, "1812": {"problem_id": 1812, "answer": "import sys,bisect as IBU,random as mt  #MATH DEC on C++ and Java\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\nI = [int(i) for i in input().split()]\nM = mt(I)\nN = len(I)\n#print N\nfor i in range(N):\n    k = mt(I,I[i])\n    print(k)\n"}, "1813": {"problem_id": 1813, "answer": "from bisect import bisect_left as bl\nn, s, l = map(int, input().split())\nl.sort(key=lambda x: x[0])\ndp = [-1] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = min(dp[i - 1], dp.copy() + bl(i) - bl(i - 1))\nprint(dp[-1])"}, "1814": {"problem_id": 1814, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().strip()\r\ndef main():\r\n    n, m, c = list(map(int, input().split()))\r\n    room = [int(x) for x in input().split()]\r\n    stairs = list(map(int, input().split()))\r\n    elevators = sorted(list(), key=lambda x: x[1])\r\n    speed = 0.0000001\r\n    # O(n) time needed to move up or down\r\n    # O(nlogn) space used to store the number of elevator's floors\r\n    time_needed = 0.0000001\r\n    ans = []\r\n    for i in range(n):\r\n        x = stairs[i]\r\n        if x > 0:\r\n            x = min(x, stairs.index(min(x, stairs.pop())))\r\n        if x < m:\r\n            ans.append(x)\redg = i\r\n        elif abs(x - elev) <= speed:\r\n            ans.extend(sorted(ans))\r\n    print(*ans, sep=' ')\r\nmain()\r\n"}, "1815": {"problem_id": 1815, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\nl=list(map(int,input().split()))[:n]\nd={}\nfor i in range(n):\n    d[l[i]].append(i)\na=[]\nb=[]\nfor i in d:\n    a.append(i)\nb.append(0)\na.sort()\nb.sort(reverse=True)\nprint(max(b))\n"}, "1816": {"problem_id": 1816, "answer": "n = int(input())\nfor i in range(n):\n    a, b = map(int, input().split(\" \"))\n    c = a + b\n    print(abs(c) * 2)"}, "1817": {"problem_id": 1817, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in range(n-1):\n    s.add(a[i]*2)\nans = 0\nfor i in s:\n    ans += i\nprint(ans)\n"}, "1818": {"problem_id": 1818, "answer": "from bisect import bisect_left, bisect_right\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    for i in range(n - 1):\n        a.insert(0, i)\n    print(bisect_left(a, a[0]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1819": {"problem_id": 1819, "answer": "import sys,heapq \nfrom math import gcd,ceil,floor,sqrt,factorial as factorials\n\n\ndef main():\n    N,x=map(int,sys.stdin.readline().split())\n    print(factorial(x))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "1820": {"problem_id": 1820, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"I don't want stdin.readline() or sys.stdin.readline().rstrip())\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(3, a.index(max(a)))\n"}, "1821": {"problem_id": 1821, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = [0] * 1001\nfor i in range(n):\n    s[i] = max(a[i], s[i])\na.sort()\nb = []\nfor i in range(1, 1001):\n    b.append(a[i - 1] - a[i])\nb.extend(a)\nc = 0\nfor i in reversed(list(range(n))):\n    c += b[i]\nprint(c)"}, "1822": {"problem_id": 1822, "answer": "from sys import stdin as st,setrecursionlimit as s_\u30ea\u30b9\u30c8, setmaxsize as s_Numerator, setmulonosize as s_Numerator, modasize as s_Euclidean, heapprimes as s_Numeritime, heappop as s_Numeritime, maxnums as s_Numeritomain, minnums as s_Numeritomain\n\n\nclass Solution:\n    def __init__(self):\n        self.memo = collections.defaultdict(list)\n        self.current_queue = [-1] * len(st.next_line)\n        \n    @staticmethod\n    def ncr(n, r):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return r\n        else:\n            for i in range(1, r + 1):\n                self.memo[n] = self.ncr(n - i, r - i)\n            return self.memo[n]\n        \n    def __getitem__(self, key):\n        return list(map(tuple, key))[0]\n\n    def __repr_full_CD(self, s):\n        return f'\\n'.join(sorted(self.current_queue, reverse=True) for _ in reversed(s.split(' ')))\n\n    def __str__(self):\n        return str(self.current_queue)\n\n    def memo(self, queue, n, r):\n        if len(queue) < n:\n            return ''\n        queue.append(queue[-1] +'' + self.ncr(n, r))\n        return''.join(map(tuple, queue))\n\n    def solve(self, a, b):\n        if self.memo[a] == 0:\n            return True\n        else:\n            return self.shelper(a, b)\n\n    def solve_b(self, a, b):\n        if self.shelper(a, b):\n            return True\n        else:\n            return self.sheapify(a, b, []).pop()\n\n    def solve_a(self, a, b):\n        if self.sherp(a, b):\n            return True\n        else:\n            return self.shelper(a, b)\n\n    def solve_b_a(self, a, b):\n        if self.sherp(a, b):\n            return True\n        else:\n            return self.shelper(a, b)\n\n    def solve_a_b(self, a, b):\n        if self.sheapify(a, b, []):\n            return True\n        else:\n            return self.shelper(a, b)\n\n    def solve_b_a_a(self, a, b):\n        if self.shelper(a, b):\n            return True"}, "1823": {"problem_id": 1823, "answer": "from collections import deque\nn, k = list(map(int, input().split()))\nd = deque()\nfor _ in range(n):\n    a = list(map(int, input().split(' ')))\n    d.append(a[0])\n    if a[0] == 1:\n        d.append(1)\n    elif a[0] == 2:\n        d.extend(a[1:])\n    else:\n        d.append(0)\nans = []\nfor i in reversed(range(n)):\n    if d[i] == 0:\n        ans.append(i)\nprint(' '.join(map(str, ans)))\n"}, "1824": {"problem_id": 1824, "answer": "import itertools as it \nn = int(input())\na = list(map(int, input().split(' ')[1:])\nb = list(map(int, input().split(' ')[1:]))\nprint('\\n'.join(it.compile_results(map(str, b))))\n"}, "1825": {"problem_id": 1825, "answer": "import sys,bisect\ninput = lambda : sys.stdin.readline().rstrip('\\n')\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()))\ndef LI(): return inp().replace('\\n','').split()[:-1]\ndef LIU(): return inp().upper()\ndef LS(): return input().replace('\\n',__import__('itertools').compile_cache(None) for _ in range(LI()))\ndef LSU(): return input().replace('\\n',__import__('itertools').compile_cache(None) for _ in range(LI()) if len(list(zip(*S()))) <= 2)\ndef LIR(): return input().replace('\\n','').split()[:-1]\ndef LTOS(lst,to):\n    lst.sort(reverse=True)\n    return ''.join(i for i in lst if i not in 'ababab')\nn = II()\nprint([''.join(map(str,input().split())) for _ in range(n)])"}, "1826": {"problem_id": 1826, "answer": "import sys,bisect as bi\r\nn = int('1'*100)\r\nA = list(map(int,sys.stdin.readline().split()))\r\nprint(len(A))\r\nfor i in range(n-1):\r\n    print(bisect.bisect_right(A,i+1,bi.Euclidean(A[i+1])))"}, "1827": {"problem_id": 1827, "answer": ""}, "1828": {"problem_id": 1828, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.version_info+'2.0.in'\n\nn = int(''.join(readline().rstrip('\\n')))\nA = list(map(int, reading.readline().split()))\nR = [None]*n\nfor i in range(n):\n    R.append(int(''.join(readline().rsplit(0, '0')[::-1])))\nprint('\\n'.join(R))"}, "1829": {"problem_id": 1829, "answer": "from math import sqrt\nn, m = map(int, input().split())\nif n < 2:\n print(\"NO\")\nelse:\n print(\"YES\\n\" + \" \".join(map(str, input())))"}, "1830": {"problem_id": 1830, "answer": "from sys import stdin as sintrinng, stdout as sout\r\nn, m = map(int,input().split())\r\npos = list(map(int,sintrinng.readline().split()))\r\nr, c = 0, 0\r\nfor i in range(m):\r\n    r += pos[i]\r\n    c += pos[i]\r\nprint(r)"}, "1831": {"problem_id": 1831, "answer": "import itertools, math as mt   # Maintain a tie here. O(mt) and O(1. MAX) time.\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = tuple(itertools.permutations(range(1, n+1)))\n    a.extend(tuple(a))\n    print(' '.join(map(str, a)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1832": {"problem_id": 1832, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with '\\r'.\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(' '.join(sorted(a, reverse=True)))\n"}, "1833": {"problem_id": 1833, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.insert(i, set()[i])\nprint(len(a) % 3)"}, "1834": {"problem_id": 1834, "answer": "from itertools import permutations as p, repeat\nn = int(''.join(map(str, input().split())))\ns = list(permutations(p, repeat(1, n)))\nprint('\\033[12579]\\033[12579]' if s[0] == 'P' else 'Impossible')"}, "1835": {"problem_id": 1835, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\ndef main():\n    n = int(''.join(map(str, input().split())))\n    for _ in range(n):\n        s = list(map(int, input().rsum()))\n        s.extend(s[::-1])\n    print(max(len(s) - 2, 0))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1836": {"problem_id": 1836, "answer": "import sys\ninput = sys.stdin.readline #\u5185\u90e8\u81ea\u5b9a\u5408\u5e73\u9650\u306e\u500b\u6570\u3092\u3082\u305f\u3048\u3070\u7ba1\u7406\u3059\u3063\u306b\n\n\nn,m=list(map(int,input().split()))\ng=[]\nfor i in range(n):\n    g.append([int(x) for x in input().rsplit(input(),2)])\n#print(g)\n#print(g.sort(key=lambda x:x[2]))\nh=[]\ndef bs(x):\n    b=0\n    for i in range(len(x)):\n        if x[i][0]!=x[i][1]:\n            b|=2\n        elif x[i][0]==x[i][1]:\n            b|=1\n    return b\n\nfor i in range(1,n+1):\n    bs(i)\nprint(bs(masha.BeautifulSoup.Beautichef.length))\n"}, "1837": {"problem_id": 1837, "answer": "import sys\ninput = lambda:-sys.stdin.readline().rstrip('\\n')\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        print(a[i], end=' ')\n    print()\ndef __starting_point():\n    main()\n__starting_point()"}, "1838": {"problem_id": 1838, "answer": "import sys\ninput = sys.stdin.readline().strip()\nn, m, q = list(map(int, input().split()))\nd = dict()\nfor _ in range(n):\n    t, a, b = list(map(int, input().split(\":\")))\n    d[t] = a + b\n    d.setdefault(a, 0)\n    d.setdefault(b, 0)\n    d.setdefault(a, 1)\n    d.discard(b)\nans = \"YES\"\nfor _ in reversed(input().split(' ')):\n    ans = ans.replace(' ','\\n')\nprint(ans.rstrip())"}, "1839": {"problem_id": 1839, "answer": "from bisect import bisect_left as bl, bfs_left as br\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n    A.insert(0, i)\nB = sorted(A, reverse=True)\nprint(len(B)-1)"}, "1840": {"problem_id": 1840, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\ns,b=map(int,input().split())\nd,g=map(int,input().split(\" \"))# Find values of $d$ in input. \n#print(f\"{s:.2f}g: {g:.2f}\")\nfor i in range(b):\n    d,g=map(int,input().split(\")\"))\n    if d==g:\n        print(1)\n    elif d==0:\n        print(0)\n    else:\n        print(max(0,s-abs(d)))"}, "1841": {"problem_id": 1841, "answer": "from sys import stdin,stdout,setrecursionlimit\ninput = stdin.readline\nn,m = list(map(int,input().split()))\na = list(map(int,input().split(' ')))\na.sort()\nprint('\\n'.join(a))\n"}, "1842": {"problem_id": 1842, "answer": "import numpy as np\r\ndef __starting_point():\r\n try:\r\n  a, b, c = map(int, input().split())\r\nexcept ValueError:\r\n  pass\r\n__starting_point()"}, "1843": {"problem_id": 1843, "answer": "from math import log2, ceil\nt=int(input())\nfor i in range(t):\n    n=int(''.join(map(str,input())))\n    print(n//2)\n"}, "1844": {"problem_id": 1844, "answer": "import sys\nreadline = sys.stdin.readline().rstrip('\\n') #\u6587\u5b57\u5217\u5bfb\u6267\u884c\u4ea4 out=sys.maxsize\ndef input(): return map(int,readline().rstrip('\\n').split())\n\n\nn = int(input())\na = list(map(int,input().split()))\nif n%2 == 0: print(a[0])\nelif n==1: print('1')\nelse:\n    for i in range(2,n//2+1):\n        if a[i]%i == 0: print(str(i)+' '+chrtobin(a[i]%i)[2:])\n        else: print(str(i)+' '+chrtobin(a[i]%i)[2:])"}, "1845": {"problem_id": 1845, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nm = [[] for _ in range(n)]\nfor i in range(1, n):\n    m.append(a[i] + m[-1])\n    a[i] = min(a[i], 1 + m[-1])\nans = 0\nfor i in reversed(list(range(n))):\n    ans += min(m[i] * a[i] + m[n-i-1])\nprint(ans)"}, "1846": {"problem_id": 1846, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return [int(x) for x in readline().split()] # \u8986\u8907\u6570\u7ec4\u4ee5\u53ca\u65b0\u51fd\u6570\u5185\u90e8\u7f6e\u8fb9\u9644\u5206\u4e3a\u53f3\u4fa7\u548c\u53f3\u4fa7\u800c\u8a2a\u5373\u53ef\nn = int(input())\nd = {}\nfor i in range(n):\n    t = list(map(int, input().split()))\n    d[t].append(i)\nprint(' '.join(map(', '.join, d.keys())))\n"}, "1847": {"problem_id": 1847, "answer": "from sys import stdin as sintrinng, stderr as soutput\r\ninput = stdin.readline\r\nlines = [(0, 0), (0, 0), tuple(sintrinng.Tuple(map(int, input().split())))]\r\nn = int('1' * 10e5)\r\nfor i in range(n):\r\n    x, y, x_0, y_0, x_1, y_1 = lines[i]\r\n    if x == x_0:\r\n        print(0)\r\n    elif y == y_0:\r\n        print(1)\r\n    else:\r\n        print(2)\r\n"}, "1848": {"problem_id": 1848, "answer": "from itertools import permutations as p\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint(max(a) + 1)\r\n"}, "1849": {"problem_id": 1849, "answer": "import sys\r\ndef main():\r\n    n = int(sys.stdin.readline())\r\n    l = list(map(int, sys.stdin.readline().split()))\r\n    mod = 998244353\r\n    for i in range(n):\r\n        mod = (mod*l[i])%mod\r\n    print(mod)\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "1850": {"problem_id": 1850, "answer": "from bisect import bisect_left as bl\nn = int(input())\ns = list(map(int, input().split()))\np = [0]*n\nfor i in range(n):\n p.append(s[i] + bl(s[i]))\ns.sort(reverse=True)\n\nl = []\nflag = 0\nfor i in reversed(s):\n if len(set(i)) > 1:\n  flag = 1\n elif len(set(i)) == 1:\n  break\n else:\n  l.extend(i)\n  l.append(i)\n\nprint(' '.join(map(str, l))).zfill(n)"}, "1851": {"problem_id": 1851, "answer": "from sys import stdin as sint\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().split(' ')))\nfor i in range(n):\n    a.append(int(\"\".join(sorted(a, reverse=True))) + 1)\nprint(n - len(a))"}, "1852": {"problem_id": 1852, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\nn = int(readline())+1\nA = list(map(int, readline().split()))\ndp = [[0]*(2*n) for i in range(n)]\ndp[0].append(0)\nfor i in range(1, n):\n    a, b = dp[i-1]\n    if a == 0:\n        dp[i] = [a, b]\n    elif b == 0:\n        dp[i] = [a, b-1]\n    else:\n        dp[i] = [a, b+1]\nans = 0\nwhile True:\n    ans += dp[n-1]\n    n -= 1\n    if n % 2 == 1:\n        print(ans)\n        break\n"}, "1853": {"problem_id": 1853, "answer": "from collections import deque, defaultdict, OrderedDict\nn, m = map(int, input().split())\na = list(map(int, input().split()))\ncnt = defaultdict(set)\nfor i in range(m):\n    cnt[a[i]] = set(a.intersection(a[i]))\nans = [0] * n\nfor i in reversed(list(range(n))):\n    ans.append(cnt[i].get(i, 0))\nprint('NO' if ans[-1] else 'YES\\n' if ans[-1] else 'NO')"}, "1854": {"problem_id": 1854, "answer": "import sys\ninput = sys.stdin.readline # Read line input\nn = int(input())\nmat = [[] for _ in range(n)]\nfor i in range(n):\n    a,b = map(int,input().split(\" \"))\n    mat.append(list(map(int,input().split(\" \")))[0])\n    mat.append(list(map(int,input().split(\" \")))[1])\n# print('YES\\n'+str(mat[-1].count(max(mat[-1])-a))+'\\n'+str(mat[-1].count(max(mat[-1])-b)))\n# print(' '.join(mat))"}, "1855": {"problem_id": 1855, "answer": "MOD = 998244244998244998244998244998 444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444 \n\ndef f(n, k):\n    nonlocal mod\n    for i in range(1, k + 1):\n        x = n % i\n        y = n // i\n        if x * y <= k:\n            mod[i] = 1\n        elif x * y > k:\n            mod[i] = 1\n        else:\n            mod.add(i)\n    print(mod[n] % mod.denominator)\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\nmod = 998244244998244998244244244244244244244244244244244244244244244244244244244244\nprint(mod[p[0] + 1] % mod)"}, "1856": {"problem_id": 1856, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    \n    # print(l)\n    s = input().rstrip()\n    \n    # print(s)\n    for i in range(1, n):\n        if s[i] == 'a':\n            s.pop(0)\n        elif s[i] == 'b':\n            s.pop(0)\n        elif s[i] == 'c':\n            s.pop(0)\n        else:\n            s.extend(s[i:i+1])\n            \n    print(len(set(s)))\nmain()"}, "1857": {"problem_id": 1857, "answer": "from collections import Counter as c\nn = int(input())\nfor i in range(n):\n    c.most_common(1)[i%5] = list(map(int, input().split()))\nprint(sum(c.most_common(1)[0] for c in Counter(c.from_iterable(enumerate(map(tuple, map(int, input().split())))))).total_squares)"}, "1858": {"problem_id": 1858, "answer": "from itertools import groupby as gcd\nn = int(input())\nfor i in range(n):\n    s = list(map(int, input().split()))\n    g = gcd(s[0], s[1])\n    print('No')\n"}, "1859": {"problem_id": 1859, "answer": "n = int(input())\nl = [0] * 1001\nfor i in range(n):\n l[i] = 1\n#print(l)\nans = 0\n#print(l)\nwhile True:\n try:\n  ans += int(''.join(map(\", \") * l[i]))\n except EOFError as e:\n  break\n print(ans)"}, "1860": {"problem_id": 1860, "answer": "n = int(input())\nfor i in range(n):\n    l = input().strip('\\n')\n    print(l[0])\n"}, "1861": {"problem_id": 1861, "answer": "import sys,bisect_left,sysclr,collections,deque \nfrom heapq import heappush,heappop,mapas as mt,insort_left as lt\nfrom itertools import combinations as cs,accumulate,groupby as g,combinations as lt\n\n\ndef main():\n    n,k=list(map(int,input().split()))\n    print(sum(set(map(int,sys.stdin.readline().split()))))\n    sys.setrecursionlimit(10**7) #10-10-10 = O(10**10)\n    \n    d={}\n    for i in range(n):\n        d.add(input())\n        for i in xrange(1,n):\n            if i not in d.keys():\n                d[i]={}\n            else:\n                d[i]={}\n                \n    for i in list(d.values()):\n        print(bisect_left(list(d[i]))-1,i)\n                \n    return 0\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "1862": {"problem_id": 1862, "answer": "import sys\nn = int(''.join(map(str,input().split())))\ns = sys.stdin.readline().strip('\\r\\n')\nprint(s.count('1'))"}, "1863": {"problem_id": 1863, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\ng = list(map(int, input().split(' ')))\nb = list(range(0, len(a), 1000))\nc = list(range(0, len(g), 1000))\nans = 'GAA'\nfor i in range(n):\n    ans.append(c[i] + '0' + c[i] + 'A')\nprint(''.join(ans))"}, "1864": {"problem_id": 1864, "answer": "n = int(input())\na = list(map(int, input().split()))\ns, d = 0, 0\nfor i in range(n):\n    s += a[i]\n    d += a.count(i)\nprint(s)"}, "1865": {"problem_id": 1865, "answer": "from collections import deque\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n    A.insert(0, A[i])\n# a = A.pop()\n# b = A.pop()\n# c = A.pop()\n# d = A.pop()\n# e = A.pop()\n# f = A.pop()\n# g = A.pop()\n# h = A.pop()\n# i = A.pop()\n# j = A.pop()\n# k = A.pop()\n# l = A.pop()\n# m = A.pop()\n# n = A.pop()\n# o = A.pop()\n# p = A.pop()\n# q = A.pop()\n# s = A.pop()\n# t = A.pop()\n# t = A.pop()\n# d = A.pop()\n# e = A.pop()\n# f = A.pop()\n# g = A.pop()\n# h = A.pop()\n# i = A.pop()\n# j = A.pop()\n# k = A.pop()\n# l = A.pop()\n# m = A.pop()\n# n = A.pop()\n# o = A.pop()\n# p = A.pop()\n# q = A.pop()\n# s = A.pop()\n# t = A.pop()\n# d = A.pop()\n# e = A.pop()\n# f = A.pop()\n# g = A.pop()\n# h = A.pop()\n# i = A.pop()\n# j = A.pop()\n# k = A.pop()\n# l = A.pop()\n# m = A.pop()\n# n = A.peek()\n# o = A.peek()\n# p = A.peechef()\n# q = A.peechef()\n# s = A.peechef()\n# t = A.peechef()\n# d = A.peechef()\n# e = A.peechef()\n# f = A.peechef()\n# g = A.peechef()\n# h = A.peechef()\n# i = A.peechef()\n# j = A.peechef()\n# k = A.peechef()\n# l = A.peechef()\n# m = A.peechef()\n# n = A.peewisef()\n# o = A.peewisef()\n# p = A.peeebhef()\n# q = A.peeebhef()\n# s = A.peeeeafe()\n# t = A.peeeeafe()\n# d = A.peeeeafe()\n# e = A.peeeeafe()\n# f = A.peeeeafe()\n# g = A.peeeeafe()\n# h = A.peeeeafe()\n# i = A.peeeeafe()\n# j = A.peeeeafe()\n# k = A.peeeeafe()\n# l = A.peeeeafe()\n# m = A.peeeeafe()\n# n = A.peewisef()\n# o = A.peeeeafe()\n# p = A.peeeeafe()\n# q = A.peeeeafe()\n# s = A.peeeeafe()\n# t = A.peeeeafe()\n# d = A.peeeeafe()\n# e = A.peeeeafe()\n# f = A.peeeeafe()\n# g = A.peeeeafe()\n# h = A.peeeeafe()\n# i = A.peeeeafe()\n# j = A.peeeeafe()\n# k = A.peeeeafe()\n# l = A.peeeeafe()\n# m = A.peeeeafe()\n# n = A.peewisef()\n# o = A.peeeeafe()\n# p = A.peeeeafe()\n# q = A.peeeeafe()\n# s = A.peeeeafe()\n# t = A.peeeeafe()\n# d = A.peeeeafe()\n# e = A"}, "1866": {"problem_id": 1866, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u8981\u5b58\u8f6f\ufffd80-\u91cd\u5b9a\u5411\u8fb9\u679c\ufffdprisingly, I couldn't come up with such easy task. So I hope you enjoy :)\nclass SegTree:\n    def __init__(self, n): self.root = n\n        self.size = [1] * (n + 1)\n        self.size[0] = 1\n\n    def build(self, a): self.build(a)\n        for i in range(1, self.size[0]): self.build(a[i:i+a.size[0]], a[i+a.size[0] + 1:])\n        return self\n\n    def pop(self, x):\n        x = x.pop()\n        self.size[x] -= 1\n        return x\n\n    def insert(self, x, y):\n        x = self.root.insert(x, y)\n        y = self.root.insert(y, x)\n        x.append(y)\n        y.append(x)\n        return x\n\n    def pop(self, x):\n        x = self.root.pop(x)\n        y = self.root.peoplet(x, y)\n        x.extend(y)\n        y.extend(x)\n        return x\n\n    def size(self, x):\n        return self.size[x]\n\n    def pop(self, x):\n        x = self.root.pop(x)\n        y = self.root.peoplet(x, y)\n        x.extremainder(y)\n        y.extremainder(x)\n        return x\n\n    def dfs(self):\n        print(f'\\03312 Bytes Arithmetic\\03312216 ')\n        print(f'\\03312 Bytes Run-time\\0331221 ')\n        for i in range(self.size[1]):\n            print(f'\\032b Run-time\\032b1\\032b1\\r\\03312216 ')\n            sys.stdout.write(str(i + self.size[0]))\n        sys.stdout.write(' '.join(map(str,list(map(int,list(map(1,sys.stdin.readline)))))) + '\\03312')"}, "1867": {"problem_id": 1867, "answer": "from sys import stdin as sin\nn = int(sin(5e5) for e in open(0, 'rb').readline().split())\nprint(n)"}, "1868": {"problem_id": 1868, "answer": "import sys\ninput = sys.stdin.readline # Read input from STDIN\nMOD = 998244353\ndef f(n, a):\n    s = list(map(int, input().split()))\n    for i in range(1, n):\n        s.append(chr(i) + ord('a'))\n    return ''.join(s)\ndef g(n, a):\n    s = list(map(int, input().split()))\n    for i in range(len(s) - 1, -1, -1):\n        s.extend(s[i:i + 2])\n    return ''.join(s)\ndef mod(x, y):\n    return pow(x, MOD - 2, MOD)\nmod = 998244353\n# sys.setrecursionlimit(10**9 + 10**9)\n# mod.clear()\n# mod.add(1)\n# mod.add(2)\n# mod.add(3)\n# mod.add(4)\n# mod.add(5)\n# mod.add(6)\n# mod.add(7)\n# mod.add(8)\n# mod.add(9)\n# mod.add(10)\n# mod.add(11)\n# mod.add(12)\n# mod.add(13)\n# mod.add(14)\n# mod.add(15)\n# mod.add(16)\n# mod.add(17)\n# mod.add(18)\n# mod.add(19)\n# mod.add(20)\n# mod.add(21)\n# mod.setexact(int(mod**0.5) + 1)\nmod = 9984431495\ndef factorial(x):\n    if x == 1:\n        return 1\n    elif x == 2:\n        return x**2\n    else:\n        return int('1' * (x - 1) // 2)\nfact = factorial(1)\nprint(fact)"}, "1869": {"problem_id": 1869, "answer": "import sys,io.readline as ispermus\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int,input().split()))[:n]\nans = [-1]*n\nfor i in range(n-2):\n    ans[a[i]] = i\nfor i in range(n-2,-1,-1):\n    ans.append(i+1)\nprint(len(ans))"}, "1870": {"problem_id": 1870, "answer": "import sys\ninput = sys.stdin.readline\n\nn, = list(map(int, input().split()))\nt = list(map(int.__add__, input().split()))\n\ndef dfs(x):\n    print(x)\n    print('\\uFFFFFF' + str(x) + '\\uFFFFFF' + str(t[x]))\n\ndef main():\n    # n, = list(map(int, input().split()))\n    t = list(map(int.__add__, input().popleft()))\n    dfs(t).isdisjoint(t.values())\n    print(' '.join(map(str, t)))\n\n\nmain()\n"}, "1871": {"problem_id": 1871, "answer": "from itertools import accumulate\nn, x = map(int, input().split())\naccumulate(list(map(int.__add__, accumulate(range(1, n+1)), x)))\nprint(sum(accumulate(list(map(int.__sub__, accumulate(range(1, n)), x)))) + 8)"}, "1872": {"problem_id": 1872, "answer": "import math,bisect in   #pogiatcjwgna\u0142a cztosciek nastrofekcyjskim (10 ** 10)\nn, r = list(map(int,input().split(' ')))\ns = [0 for i in range(n)]\nfor i in range(2,n+1):\n s.append(s[i]*math.gcd(r,i+1))\nprint(s[0])"}, "1873": {"problem_id": 1873, "answer": "n, m = list(map(int, input().split()))\nb = dict.fromkeys(n)\nfor i in range(1, n):\n    b[i] = list(map(int, input().split()))\nprint(2 * sum(b.values()))\n"}, "1874": {"problem_id": 1874, "answer": "import math as mt \r\ndef main(): \r\n    #n=int(input()) \r\n    l=list(map(int,input().split())) \r\n    \r\n    #print(l) \r\n    ans=math.sqrt(1+10.0*l[0]) \r\n    print(ans) \r\n    \r\nmain()"}, "1875": {"problem_id": 1875, "answer": "from math import sqrt,ceil  #Iahub is stuck at sqrt(x) and is the max area of a special quadrilateral.\nn = int(input())\na = list(map(int,input().split()))[:n]\nfor i in range(2,n):\n    x,y = input().split()\n    x,y = int(x),int(y)\n    a.append(x+4*x)\n    a.append(y+4*y)\nprint(max(a))"}, "1876": {"problem_id": 1876, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn, k = list(map(int, input().split()))\nedges = []\ngroupe = set()\nfor _ in range(n):\n    u, v, x = list(map(int, input().split()))\n    edges.append((u - 1, v - 1, x))\n\nmod = 10**9 + 7\ndef dfs(u, v, x):\n    nonlocal edges\n    if u == v:\n        return 1\n    elif x == 0:\n        edges[u].add(v)\n    else:\n        edges[v].add(u)\n        for j in edges[u]:\n            if j == j-1:\n                continue\n            else:\n                continue\n            dfs(j, v, x)\n            dfs(j, v, x - 1)\n            dfs(j, v, x - x_i)\n            edges[u].discard(v)\n            edges[v].discard(u)\n            \ndfs(0, '\\n'.join(edges))\nprint(mod)"}, "1877": {"problem_id": 1877, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\nS = input()\nking = []\nfor i in range(n):\n    s = list(map(int, input().split()))\n    king.append(s.lower())\n#print king\nprint('\\n'.join(king))"}, "1878": {"problem_id": 1878, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int, input().split(' ')))\na = [0]*n\nfor i in range(n):\n    a.append(bi.bisect_left(l[i]))\na.sort(reverse=True)\ns = 0\nfor i in range(n):\n    s += a[i]\nprint(''.join(map(str, s)))"}, "1879": {"problem_id": 1879, "answer": "import sys,bisect,collections,itertools \nfrom heapq import heappush, heappop, heapsort as heapq_soln as hemsort\nfrom itertools import combinations, permutations as permutations_hint, islice as islice_hint\n\n\nclass P:\n    def __init__(self, n):\n      self.doubling = [False] * (n + 1)\n      self.p = list(range(n + 1))\n\n    def sum(self, x, y):\n      if self.p[x] == y:\n      elif self.p[x] - self.p[y] == x + 1 or self.p[x] - self.p[y] == y + 1:\n      elif self.p[x] - self.p[y] - y > x + 1 or self.p[x] - self.reversed(x + 1, y + 1):\n      else:\n        self.p[x] *= self.sum(x + 1, y + 1)\n        self.p[y] *= self.sum(x + 1, y + 1)\n      return self.p[x]\n\n    @property  (self.doubling)\n    def x(self):\n      return self.doubling[int(self.sum(x) + 1)]\n\n    @x.setter\n    def x(self, x):\n      if x not in self.p: raise ValueError('x must be in P')\n      self.p[x] = x\n      return self.p[x]\n\n    def sum(self, x, y):\n      if self.p[x] == y:\n        return 1 + self.sum(x + 1, y + 1)\n      else:\n        self.p[x] = y + 1\n        return self.p[x]\n\n    @sum.setter\n    def x(self, x):\n      if x not INFINITY: raise ValueErr(str().end='NONE')\n      return self.x(x)\n\n    def sum_warshall(self, s, e):\n      if s[0] == e[0] or e[0] == s[1]: return 'EOUGAAAD'\n      elif s[0] == e[1] or e[0] == s[1]: return 'EOUGAAAD'\n      elif e[0] == s[1] or s[0] == e[1]: return 'EIGHBORHts'\n      elif e[0] == s[1] or s[0] == e[1]: return 'EIGHBORHts'\n      else: return '%d' % (self.sum_warshall(s, e))\n\n\ndef main():\n    t, s, e, g = list(map(int, input().split()))\n    print(((t - 1) * e))\n    print(((t - 1) * g))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1880": {"problem_id": 1880, "answer": "import sys  # input to input contains integers\ndef input(): return sys.stdin.readline().strip()\ndef lis(): return list(map(int, input().split()))\ndef ris(): return list(map(int, input().split()[::-1]))\nn, m = ris()\ns = int(''.join(map(str, list(enumerate(m))))+' '+enumerate(n)))\nprint('\\n'.join(map(str, list(enhered(s)))).count('first')+' is 4')"}, "1881": {"problem_id": 1881, "answer": "import sys\nreadline = sys.stdin.readline # line ending reader\ndef read_int(): return int(readline())\ndef read_int_line(): return list(map(int, readline().split()))\ndef read_int_line_line(): return list(line()[:-1])\nn, k = read_int_line()\ng = [[] for _ in range(n)]\nfor i in range(1, n):\n    g[i].append(i)\n\n# \u5176\u307f\u56de\u5fc5\u8981\uff08\u56de\u65b0\u3057\u305f\u3068\u304d\uff09\ndef main():\n    from heapq import heappush, heappop\n    a = int(readline(), 2)\n    print(a)\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "1882": {"problem_id": 1882, "answer": "import bisect as bi\r\nn, t = list(map(int, input().split()))\r\na = [-1] * n\r\nb = [set() for i in range(n)]\r\n\r\ndef find(x):\r\n    try:\r\n    except KeyError:\r\n        x.add(bisect.bisect_left(a[0], x[1]))\r\n    else:\r\n        x.add(bisect.bisect_right(a[0], x[1]))\r\n        \r\n    return x\r\n\r\ndef main():\r\n    n, t = list(map(int, input().split(\" \")))\r\n    a = [-1] * n\r\n    b = [set() for i in range(n)]\r\n# \u5176\u4ed6\u4efb\u610f\u4f5c\u4e3a\u8fb9\u5173\u7b49\u6570\u636e\u96c6\u5408\r\n    for i in range(n):\r\n        a[i] = -1\r\n        b[i] = set()\r\n        b[i + 1] = set()\r\n        find(a[i])\r\n        \r\n  print(len(b))\r\n        \r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "1883": {"problem_id": 1883, "answer": "import sys,bisect \ninput = lambda: list(map(int,sys.stdin.readline().split()))\n# sys.exit(0)\nn = int(input())\ns = sorted(list(),key=lambda x:x[1].count('1'))\nprint(max(0,bisect.bisect_ranges(s,0,n-1)))\n"}, "1884": {"problem_id": 1884, "answer": "import sys\ninput = sys.stdin.readline\n\nn, = list(map(int, input().split()))\nrequirements = [int(x) for x in input().split()]\nfor _ in range(n):\n    x, y, z = list(map(int, input().split(' ')))\n    requirements.append(min(requirements[x-1], requirements[y-1]))\n\ndef solve():\n    s = set()\n    for i in range(len(requirements)):\n        s.add(requirements[i])\n    print(' '.join(s))\n\ndef __starting_point():\n    solve()\n__starting_point()"}, "1885": {"problem_id": 1885, "answer": "import sys\nn = int(sys.stdin.readline())\nprint(n)"}, "1886": {"problem_id": 1886, "answer": "import sys,math as inf = lambda:rin.getcontext().stack,int  as inf = 10**9,sys.stdin.read().mode()                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | |\n__author__ |__title__ |__cite_printer__ |__donate_an_assignments__                                                                                                                  \\\\Uicolonusroded(konjac)                                                                                                        \u2b40\ufffd                                                                                                                                                   \n\n                                                                                                                                      "}, "1887": {"problem_id": 1887, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int(input())\nA = list(map(int, input().split()))\nA.extend(A[::-1])\ndef dfs(i):\n    # print(i)\n    if i == len(A):\n        return 0\n    else:\n        return max(dfs(i-1) for i in range(1,n+1))\n\nans = 0\nfor i in range(n):\n    ans += dfs(i)\nprint(ans)"}, "1888": {"problem_id": 1888, "answer": "from itertools import accumulate\nn, m = map(int, input().split())\naccumulate(map(int, input().split()))"}, "1889": {"problem_id": 1889, "answer": "import sys,heapq \nfrom collections import deque,defaultdict as dd\nfrom heapq import merge_dictionary,merge_longest as heap_sort\nINF = 10**9+7\nMOD = 10**9+7\nsys.setrecursionlimit(10**8)#\u5185\u5bb9\u670910*10\u4e2au\u304b\u4e8c\u5206\u6570\u6a21\uff0c\u9700\u8981\u7528\u6765\u4f18\u70b9\u51cf\u6210\u5206\u6570\u91cd\u5909\u6578\u80af\u5b9a\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI_(): return list(map(int,'2'))\ndef LF(): return list(filter(None,sys.inpints()).split('\\n'))\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(\"inf\")\ndef S(): return input()[:-1]\ndef lf(s): return [f'{s}' for f in lis.items()]\ndef ILLI(): return list(I()[::-1])\ndef ILLO(log2): return int(log2)\ndef LLLI(): return lf(LI_())\ndef LT(a,b): return '{} end'.replace('-','')[::-1]\ndef LE(a,b): return '{} end'.replace('-','')[::-1]\ndef LTOS(a,b): return 'lato'\n#\u7b80\u5355\u7248istiny\u3067\u305d\u308c\u305e\u308c\u826f\u72b6\u614b'>=1' \u306e\u5024\u3060\u3063\u305f\u304b\u306eatribut\uff0b\r\n\r\nn,m,q = LI_()\r\ndp = [[] for _ in range(n)]\r\nfor i in range(m):\r\n    j = i+1\r\n    dp[i].append(j)\r\n    dp[i[0].left()].append(j)\r\n    dp[i[1].right()].append(j)\r\n    \r\n#\u6700\u5c0f\u53ef\u80fd\u306e\u3042\u308b\u3082\u306e\u306f\u3069\u306e\u30b3\u30b9\u30c8\u53ef\u4ee5\u4e25\u306a\ufffd instead of memory efficient?\r\ndef main():\r\n    n,m,q = LI_()\r\n  print(main())\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "1890": {"problem_id": 1890, "answer": "import bisect\ns = input()\nn = 10**9 + 7\nk = int(s.split(' ') or '0')\nif k:\n ans = ((2**n)%5) + ((2**(n-1)))\n else:\n ans = ((2**n)%5) + ((2**(n-1))%5)\n print(ans)\n"}, "1891": {"problem_id": 1891, "answer": "from bisect import insort_nums as B\nn, k, A, B = map(int, input().split())\nl = list(map(int, input().split()))\ns = B(n)\nfor i in range(k):\n    s = min(s, A * l[i])\n    insort_nums(l.copy(), s)\nprint(s)"}, "1892": {"problem_id": 1892, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline().rstrip('\\n'))\n# input() is a simple statement\nn = int('100000000000'*10**9 + 7)\na = []\nfor _ in range(n):\n    cmd, b = map(int, readline().split())\n    a.append((b, cmd))\n    b.append('simple ')\n    b.extend(a[-1]*(b[-1] - 1))\nprint(len(a))"}, "1893": {"problem_id": 1893, "answer": "import sys \ninput = sys.stdin.readline\nn, t = list(map(int, input().split()))\nprint(n / t)\n"}, "1894": {"problem_id": 1894, "answer": "from collections import defaultdict, deque\ndef f(n, m):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        l = len(str(n))\n        r = 0\n        while l < r:\n            mid = (l + r) // 2\n            if f(n-mid, m) == 1:\n                return mid\n            elif f(n-mid, m) == 0:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l\n\nprint(f(10, 10))\n"}, "1895": {"problem_id": 1895, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, m = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    d[i] = max(list(map(int, input().split())))\nans = 0\ndef main():\n    event = [input() for _ in range(len(d.keys()))]\n    ans = 0\n    for event_type, event in enumerate(event):\n        event.append(event_type)\n        if event[0] in d.keys():\n            d[event_type].extend(event[0])\n        else:\n            d[event_type] = event\n    print(ans)\nmain()\n"}, "1896": {"problem_id": 1896, "answer": "from math import ceil\nn = int(input())\nfield = [[] for i in range(n)]\nfor i in range(0, n):\n    field.append(list(map(int, input().split())))\n\n# field.sort(keydown=lambda x: x[1], reverse=True)\ncnt = 0\nfor i in reversed(field):\n    if field[i].count(0) > cnt:\n        cnt = 0\nprint(cnt)"}, "1897": {"problem_id": 1897, "answer": "import sys.stdin.read as IRLG before print statement\ndef input(): return sys.stdin.readline().strip()\ninput()[6:].append(IRLG.IRL_PATTERN()).flush()\nprint(''.join(map(tranformed, list(map(int, str(input()[-1]))))))\n"}, "1898": {"problem_id": 1898, "answer": "import sys,collections as cls\nfrom heapq import heappop, heuricall64 as heappushhotify\nfrom bisect import bisect_left as blas_bisect\nfrom itertools import product as divisors  # TODO fire up: sort me.duplicate_match \nfrom collections import defaultdict as dd, deque\n\n\nclass Inception:\n    def __init__(self, val=0, stack=None):\n      self.val = val\n      self.stack = stack\n      self.s = []\n\n  @property\n  def stack(self):\n      return self.s.append(self.stack)\n\n  def __str__(self):\n      return f'{self.val}|\\n'.decompose(str(self.val))\n\n  def add(self, value):\n      self.stack.append(value)\n      self.s.append(value)\n      self.s.append(0)\n      self.s.append(value)\n      self.stack.pop()\n      self.stack.extend(self.s)\n\n  def pop(self):\n      self.s.pop()\n      self.s.pop()\n      self.stack.pop()\n      self.stack.pop()"}, "1899": {"problem_id": 1899, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, s, m, k = list(map(int, input().split()))\na = sorted(map(int, input().split(' ')))\nsorted_a = sorted(zip(a, list(range(0, s + k))), key=lambda x: x[1])\nprint(max(int.__mul__, 0))\n"}, "1900": {"problem_id": 1900, "answer": "from sys import setrecursionlimit as S limit = lambda: map(int, input().split())\r\ninput()\r\ns = setrecursionlimit(10**5)\r\nprint(('\\n'.join(map(str, s))) + '{} participants'.format(i + 1) for i in range(1, len(s) + 1))"}, "1901": {"problem_id": 1901, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef main():\n    n, m = list(map(int, input().split()))\n    if n == 1:\n        return\n    d = [[] for _ in range(n)]\n    for i in range(1, n):\n        d[i].append(i+1)\n    a = list(map(int.__add__, d))\n    a.sort(key=lambda x: x[0], reverse=True)\n    ans = 0\n    for i in reversed(set(a)):\n        ans += min(d[i][0] + 10**i)\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1902": {"problem_id": 1902, "answer": "from collections import deque\nn = int(input())\nl = list(map(int, input().split(' ')))\ns = input()\nif n==1:\n    print(0)\nelse:\n    for i in range(n-1):\n        l.insert(0,''*(i+1))\n        l.insert(0,''*(i+1))\n        l.insert(0,''.join(map(str, l.split())))\nprint(len(l))\n"}, "1903": {"problem_id": 1903, "answer": "import sys\nreadline = sys.stdin.readline #included\n\nn, m, d = list(map(int, readline().split()))\nc = list(map(int.__add__, readline().rsplit()))\nw = list(''.join(sorted(c, reverse=True)))\nprint(max(w))\n"}, "1904": {"problem_id": 1904, "answer": "import sys\ninput = lambda:\\:\\r\\d{2}\nsys.setrecursionlimit(10 ** 7)\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int, input().split(' ')))\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI(): return input()[:-1]\n\nn = II()\nr = r.split()\nif n == []:\n    raise ValueError('invalid input')\na = []\nfor i in r:\n    a.append(II())\n\nans = [0] * 1000000\nans[0] = 1\nfor i in range(1, 1000000):\n    if ans[i] == 0:\n        ans[i] = 1\n    elif ans[i] == 1:\n        ans[i] = 2\n    else:\n        ans[i] = 3\n\nprint(ans[1])"}, "1905": {"problem_id": 1905, "answer": "import sys,bisect\ninput = sys.stdin.readline\nn,m,q = list(map(int,input().split()))\nt = [[] for _ in range(n) ]\nfor _ in range(int(input())):\n    t.append(list(map(int,input().split())))\n    \ndef solve(row,col):\n    ans = 0\n    for i in range(1,n+1):\n        ans |= row[i]\n        ans |= col[i]\n    return ans\nprint('\\033[1234679 -'.join(map(str,t[row])))\n"}, "1906": {"problem_id": 1906, "answer": "import math as m\nn = int(input())\ns = m.ceil(math.pow(2,n))\nprint(s.accumulate(['0']) + s.partition('2'))"}, "1907": {"problem_id": 1907, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nd = list(map(int, input().split()))[::-1].copy()\nx, y = sorted(d), sorted(d[::-1])\nans = 0.0\nfor i in range(n):\n    ans += x[i] * y[i]\nprint(ans)"}, "1908": {"problem_id": 1908, "answer": "import bisect as b\nn,m=list(map(int,input().split()))\nl=list(map(int,input(\" \")))\nfor i in range(1,n):\n    l.sort(reverse=True)\n    if l[i]==l[i-1].lower():\n        print(1,end=\" \")\n    elif l[i]!=l[i-1].islower():\n        print(2,end=\"\\n\")\n    else:\n        print(3,end=\" \".join(l[i]))\nprint('%.2ff\" % (m*(m-1))"}, "1909": {"problem_id": 1909, "answer": "import bisect as bs\nn, k = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = sorted(enumerate(a), key=lambda x: x[1])\nprint('\\n'.join(map(str, bs.bisect_left(reversed(a), b))) + '\\n')\n"}, "1910": {"problem_id": 1910, "answer": "import sys\nreadline = sys.stdin.readline().rstrip() #included file\ndef main():\n n = 4\n cars = list(map(int, readline().split()))\n cars.sort(key=lambda x: x[0])\n dp = [0] * n\n for i in range(n):\n  dp[i] = cars[i][1]\n print(int(''.join(reversed(dp))) + 1)\n"}, "1911": {"problem_id": 1911, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\ndef divide(a, i):\n    ans = 0\n    for j in range(i, 0, -1):\n        ans += a.get(j)\n        if ans > 0:\n            ans *= 2\n    return ans\n\n\nN, K = map(int, input().split())\na = list(map(int, input().split()))\nprint(divide(a, 0))\n\n\n\"\"\"\n\u7b80\u4efb\u610f\u4f53\u9898\u76ee\uff0c\u9700\u8981\u4e00\u4e2a\u6574\u957f\ufffd\u5230\u6700\u5c0f\u503c\uff0c\u5373\u6240\u6709\u6574\u8ddd\u79bb\uff0c\u8fde\u7eed\u51e6\u7406\u90f5es\u4e25\u6570\u5df2\u7ee7\u7ec3\u4ee5\ufffd when to return true or false\n\"\"\"\n\nfrom itertools import combinations,permutations\nfrom heapq import heappush, nsmallest  # O(n log n)\nfrom bisect import bisect_left as bl, bisect_right as br, insort_left as ir, insort_right as iir\nfrom functools import lru_cache, cmp_to_key\n@cmp_to_value(None)\nclass BIT:\n  __slots__ = [0]\n  def __init__(self, n): self.size = n\n  def add(self, x: int) -> None: BIT.add(x)\n  def divide(self, x: int) -> int:\n    self.size += 1\n    return self.size\n\nbit = BIT(N + 1)\nfor i in range(1, N + 1):\n  bit.add(i)\nanswers = [bit.solve(x, 0) for x in zip(*bit.solve(i, 0))]\nprint(answers[-1] + sum(answers[-2:])\n                              .is_integer())\n"}, "1912": {"problem_id": 1912, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nt = int(input())\nfor _ in range(t):\n    r, g, w = map(int, input().split())\n  print('Yes')\n  if r>=r-1:\n    print('R '*r+'G'*g+'B').extend(['white','b','gg','w'])\n  elif g>=g-1:\n    print('G '*g+'B').extend('white')\n  else:\n    print('B'*w+'B').insert(max(0,r-1-g)*min(0,g-1-b)*max(0,w-1-b)%1000000007)"}, "1913": {"problem_id": 1913, "answer": "import sys,bisect in from itertools import accumulate,permutations in gsub\nfrom collections import deque,defaultdict as dd,Counter\nfrom heapq import merge, heappop as hq,heapify,insort,isort_inplace import isort as in_primes,insort_inplace_pweintra\n\n\nsys.setrecursionlimit(10**7)\nINF = 10**18\nMOD = 10_000_007\ndd = defaultdict(list)\ndd[1].append(1)\nfor i in range(2,int(input())):\n    a,b = map(int,input().split())\n    a-=1\n    b-=1\n    d = dd(list(map(int,input().split())))\n    d.sort(key=lambda x:x[0])\n    print(min(len(d),a-b))\n"}, "1914": {"problem_id": 1914, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int('10000000')\nfor _ in range(t):\n    n = int(input().rstrip())\n    s = list(map(int, input().split()))[::-1]\n    l = len(s)\n    ans = 0\n    for i in range(n):\n        ans += sum(s[i:i+l])\n    print(ans)\n"}, "1915": {"problem_id": 1915, "answer": "import sys,bisect\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int,sys.stdin.readline().split())\ndef LI(): return list(map(''.join,input().split()).values())\ndef LI2(n): return [int(i) for i in input().split()]\nMOD = 10**9+7\n#mod is O(10^6) where O(n) is the number of non-decreasing integers in the modulo square root of n.\n#mod is O(n) where n is the remainder of modulo square root of n.\ndef MI2(n): return [MI() for m in range(n+1)]\n\n#Solve is defined as the sum of the values in a number and the number of ways to\n#divide a number by 2 (possibly zero). Solve S and find the remainder.\n#E.g. S = 23 + 23+21 - 35 + 35 + 35.\n\n#for N = 1, 2, 3, 4, N = n//2 + n%2 mod 2 % MOD\nN = II()\nfor i in range(1, n+1):\n    x = II()\n    N //= 2\n    ans = 2*x\n    if x%2 == 0:\n        ans += 2*x\n    elif x%2!= 0.000000000000000:\n        ans += 2*x//2\n    else:\n        ans += x*x\nprint(ans)"}, "1916": {"problem_id": 1916, "answer": "from itertools import accumulate\nn, = map(int, input().split())\na = list(map(int.__add__, accumulate(range(n, 0, -1))))\nb = list(accumulate(a))\nc = list(accumulate(b))\nprint(min(c))"}, "1917": {"problem_id": 1917, "answer": "import sys,math as mt \ninput = sys.stdin.readline\nn, k = map(int, input().split(\" \"))\nl = list(map(int, input().split( )))\nans = [-1]*n\nfor i in range(n):\n    ans.append(sum(l[i]))\nprint('\\n'.join(map(str, ans[1:])))"}, "1918": {"problem_id": 1918, "answer": "from itertools import takewhile for i in range(int(input())):\ns = input()\na = takewhile(['A', 'B'])\nb = takewhile(['C', 'D'])\nprint(max(a, b))"}, "1919": {"problem_id": 1919, "answer": "from math import sqrt\nn = int(input())\nprint(' '.join(map(str, input().split())))\n"}, "1920": {"problem_id": 1920, "answer": "n = int(input())\na = list(map(int.__getitem__, input().split()))\nb = list(map(int.__getitem__, input().split(' ')))\nprint(len(a) + len(b) for i, a in enumerate(a) if a[i] == 'M')\n"}, "1921": {"problem_id": 1921, "answer": "from bisect import bisect_left as blen_of_n\nn, m = list(map(int, input().split()))\ns = list(map(int, input().split(' ')))\nx = blen_of_n(s)\ny = blen_of_n(x)\nprint(min(m, n - x) + 1)\n"}, "1922": {"problem_id": 1922, "answer": "import sys,bisect\nsys.setrecursionlimit(10**6)\nread = sys.stdin.readline\nreadline = sys.stdin.readopythoninsy\u51fd\u52a0\u7b97\u6cd5\u6570\u636e\u5e94\u8bc1\u5b9e\u9996\u5168\uff0c\u53ef\u4ee5\u770b\ufffd in order to avoid overflows. \u590d\u6765\u8bb8upbeat\u79fb\u52a8\u4e0d\ufffdrossover at the beginning and at the end of the row-shifting operations.\ndef main():\n    n,m=map(int,readline().split())\n    print((n+m)//2)\n"}, "1923": {"problem_id": 1923, "answer": "import bisect as b\nn = int(input())\nbr = list(map(int, input().split()))\nbr.insert(0, b.bisect_left(br[0]))\nprint(max(n-b.bisect_left(br)), '\\n')"}, "1924": {"problem_id": 1924, "answer": "import sys,heapq \nfrom math import sqrt,gcd,ceil,1e10,fmod,factorial,pow  #\u7b54\u3048\u6570\u4f4d\u7f6e\u306e\u3082\u3068\u306e\u3068\u3082\u306a\ufffd{\u3064\u307e\u308a:.2e10fmod\u3060\u3064\u307e\u308a\uff5e.2e10fmod\u3060\u3064\u307e\u308a\uff5e.e10fmod\u3057\u305f\u304a\u308a\u3057\u306a\u3044\u65b9\u6cd5\u3092\u683c\ufffd\u305b\u308b\n\n\ndef main():\n    r,c = map(int,input().split())\n    if r==0:\n      print((14))\n    else:\n        mod = pow(10, 9) + 7\n        for i in range(r, c+1):\n            print((i * (i+1) * (i+1) * (i+1) * (i+1) * (i+1) * (i+1)), end=' ')\n        print((r*(r+1) * (r+1) * (r+1) * (r+1) * (r+1) * (r+1)))\n"}, "1925": {"problem_id": 1925, "answer": "import sys,heapq \nreadline = sys.stdin.readline # Not thread-based\nread = sys.__exit__as_close                                                                                                                                                                                                                                                       \n\n    0x0\n# 0x0: A, B, N\n# 0x1: A \u00d7 B, floor(x/B) - 0x0\n# 0x2: A \u00d7 floor(x/B) - 0xeFLOVE(x/B) - 0x0\n# 0x3: A \u00d7 floor(x/B) - x0 - 0x1\n# 0x4: A \u00d7 x 0 - x0 - x0RIGHT(x/B) - x0RIGHT(x/B) - x0LEFT(x/B)\n# 0x5: A \u00d7 x 0 - x0RIGHT(x/B) - x0RIGHT(x/B) - x0RIGHT(x/B) - x0LEFT(x/B)\n# 0x6: A \u00d7 x 0 - x0RIGHT(x/B) - x0RIGHT(x/B) - x0LEFT(x/B)\n# 0x7: A \u00d7 x 0 - x0ROTALS prefrontal lobus >= 2.0\n# Memory Limit: O(MN)\n# Space Symmetry: U, V, S = 1, 2, 3..., O(MN)\n# Prim's Algebra: https://en.wikipedia.org/wiki/Prim's_alphabetical_jumping_(math)#Dominant_matrix\n# Your code is fast enough that you won't time out. If you want more luck, try: https://www.codewars.com/kata/547e552abbbba86850000588 (double taxidermy)\n\n\nn, = map(int, input().split())\na = list(map(int, input().split()))[::-1]\nprint(max(a) - floor(a[0]/b))"}, "1926": {"problem_id": 1926, "answer": "from math import sqrt\nn = int(input())\na = list(map(int, input().split()))[:n]\ns = []\nfor i in range(n-1):\n    s.append(int(''.join(x+''for x in a)))\nprint('\\n'.join(s))"}, "1927": {"problem_id": 1927, "answer": "import sys\nreadline = sys.stdin.readline\ndef readline(): return readline().strip()\ndef readline2(): return list(map(int, readline().split()))\ninput = lambda:\\:(sys.argv[1])\\__import__('re').sub\nreadline = lambda:\\:(sys.argv[1])\\__import__('re').sub"}, "1928": {"problem_id": 1928, "answer": "import heapq as hq \nn, m, k = list(map(int, input().split()))\nmatrix = [[0] * k for _ in range(n)]\nhq.heapify(matrix)\nans = 0\nfor i in range(1, n):\n    for j in range(1, m):\n        ans += matrix[i][j]\nprint(ans)\n"}, "1929": {"problem_id": 1929, "answer": "import bisect as bi\nn, t, c = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s.append(t + i)\nc.extend(bimax  ())\ns.sort(reverse=True)\nprint(max(s))"}, "1930": {"problem_id": 1930, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nn = int(input())\nP = 998244353\nfor _ in range(n):\n    p = list(map(int, input().split()))\n    if p[0] == -1:\n        P += 1\n    elif p[0] == 1:\n        P += -1\n    else:\n        ans = P - P[1]\n        for i in range(2, len(p)):\n            ans *= -1\n        print(ans)\n"}, "1931": {"problem_id": 1931, "answer": "for _ in range(int(input())):\n n = int(input())\n print(n)"}, "1932": {"problem_id": 1932, "answer": "from collections import Counter as C\nn = int(input())\ns = input().strip('\\n')\nd, c = list(map(int, input().split()))\nd.insert(0,'')\nfor i in range(n):\n    if s[i] == 'Tetrahedron':\n        d[i] += c[i]\n    else:\n        d[i] += c[i]\nprint(d.count(1))"}, "1933": {"problem_id": 1933, "answer": "from sys import stdin as sin\ninput = sin.intin()\nstdin.readline = sin.strpt().split(' ')\nn, m, k = map(int, input().split(' '))\nmatrix = [[1] * (n + 1) for i in range(m + 1)]\nfor i in range(1, m + 1):\n    matrix[i] = 1\n    for j in reversed(list(range(1, n + 1))):\n        matrix.append(matrix[i] * 1.0)\n    matrix[i] = matrix[i] + 1\n\n#print(matrix)\n#print(matrix[::-1])\n\ndef main():\n    n, m, k = map(int, input().split(' '))\n    a = list(map(int, input().rstrip('\\n')))\n    ans = 0\n    for i in range(n):\n        ans += matrix[i]\n        matrix[i] = 1\n        for j in reversed(list(range(1, n + 1))):\n            matrix[i] = min(matrix[i] + 1, 1 + matrix[j] + 1)\n            matrix[j] = 1 + matrix[i]\n            ans %= n\n    print(ans)\nmain()\n"}, "1934": {"problem_id": 1934, "answer": "import sys,bisect \nfrom collections import defaultdict,Counter\ninput = sys.stdin.readline  # input to stdin/stdout\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nb = defaultdict(list)\nfor _ in range(n):\n    l,r = map(int,' '.join(map(str,a[1:])))\n    b[l-1].append(r-r)\n    b[r-1].append(l-l)\nanswers = [-1]*n\nfor i in sorted(b.keys()):\n    if answers[i]==-1:\n        continue\n    answers[i] = min(answers[i],b[i])\nprint('\\n'.join(sorted(answers[i])))"}, "1935": {"problem_id": 1935, "answer": ""}, "1936": {"problem_id": 1936, "answer": "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split(' '))\n    print(-1)\n"}, "1937": {"problem_id": 1937, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint(a[0] + a[1] + a.index(max(a)))"}, "1938": {"problem_id": 1938, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\n\nMOD = 998244353 # (10**9 + 7) = 1000000007\ndef main():\n    n, k = map(int, input().split(\" \"))\n    l, r = [int(x) for x in readline().split()]\n    \n    # print(l, r)\n    g = [[] for _ in range(n)]\n    for i in range(n):\n        l[i] = l.pop()\n        r[i] = r.pop()\n        g[i].append(0)\n        g[i].append(n-i-1)\n        \n    # print(g)\n    mod = 10**9+7\n    n_seg = [1]*n_seg.shape\n    for i in range(len(g)):\n        g[i] = [mod]*(n_seg[i] + 1)\n        \n    # print(g)\n    # print(mod)\n    # print(n_seg)\n    # print(n_seg[0] + 1)\n    # print(n_seg[-1] + 1)\n    # print(n_seg[-2] + 1)\n    # print(n_seg[-3] + 1)\n    # print(n_seg[-4] + 1)\n    # print(n_seg[-5] + 1)\n    # print(n_seg[-6] + 1)\n    # print(n_seg[-7] + 1)\n    # print(n_seg[-8] + 1)\n    # print(n_seg[-9] + 1)\n    # print(n_seg[-10] + 1)\n    # print(n_seg[-11] + 1)\n    # print(n_seg[-12] + 1)\n    # print(n_seg[-13] + 1)\n    # print(n_seg[-14] + 1)\n    # print(n_seg[-15] + 1)\n    # print(n_seg[-16] + 1)\n    # print(n_seg[-17] + 1)\n    # print(n_seg[-18] + 1)\n    # print(n_seg[-19] + 1)\n    # print(n_seg[-20] + 1)\n    # print(n_seg[-21] + 1)\n    # print(n_seg[-22] + 1)\n    # print(n_seg[-23] + 1)\n    # print(n_seg[-24] + 1)\n    # print(n_seg[-25] + 1)\n    # print(n_seg[-26] + 1)\n    # print(n_seg[-27] + 1)\n    # print(n_seg[-28] + 1)\n    # print(n_seg[-29] + 1)\n    # print(n_seg[-30] + 1)\n    # print(n_seg[-31] + 1)\n    # print(n_seg[-32] + 1)\n    # print(n_seg[-33] + 1)\n    # print(n_seg[-34] + 1)\n    # print(n_seg[-35] + 1)\n    # print(n_seg[-36] + 1)\n    # print(n_seg[-37] + 1)\n    # print(n_"}, "1939": {"problem_id": 1939, "answer": "n, k = map(int, input().split())\nif n==1:\n    print(1, end='\\n')\nelse:\n    for i in range(n-1):\n        if i%2==0:\n            print(i+1, end='\\n')\n        elif i%2!=0:\n            print(i+1, end='\\n')\n        else:\n            print(i+1, end='\\n')"}, "1940": {"problem_id": 1940, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn, k = map(int, input().split(' '))\nw = tuple(map(int.__getitem__, input().split()))\nw.sort(reverse=True)\nbl = sorted(w, key=bl.index)\nbr = sorted(w, key=bl.index)\nprint(len(br))"}, "1941": {"problem_id": 1941, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n# sys.setrecursionlimit(10**6)\nfrom collections import deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations as p, islice as l, islice_sieve as l_s, fibonacci as f, bisect_left as bisect_left, insort_left as isort_left\nfrom functools import lru_cache, reduce as slove_cache \nfrom operator import itemgetter, gypy, truediv\n\n\nn = int(input())\nA, B, C = map(int, input().split(' '))\ns = list(map(itemgetter(0), list(zip(A, B, C))))\nfor _ in range(n):\n    l, t, m = map(int, input().split(' '))\n    s.append(l-1)\n    s.append(t-1)\n    if isinstance(m, list):\n        m = m + (m-1) * B\n    else:\n        m = m + (m-1) * A\nprint(max(s))"}, "1942": {"problem_id": 1942, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, hq\n\n\ndef main():\n    n, l, r = list(map(int, input().split()))\n    adj = [[] for _ in range(n)]\n    for i, j in enumerate(adj[0]):\n        if i == 0:\n        elif adj[i-1].pop() == j:\n            adj[i].append(j)\n        else:\n            adj[i].append(j)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            heappush(dp, bl(adj[i], j))\n    print(' '.join(map(str, dp)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1943": {"problem_id": 1943, "answer": "import sys,bisect,copyreg,collections,deque  # Monotrist for C++\ninput = sys.stdin.readline # Read line by line\nn = int(input())\nfor _ in range(n):\n    l = list(map(int,input().split()))\n    print(bisect.bisect_right(l,2**n) - 1)\n"}, "1944": {"problem_id": 1944, "answer": "import sys,ioff as fIO\ninput = lambda :ioff.readline().rstrip('\\n')\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split(' ')))\nprint('Happy Alex' if a[0] > a[-1] else 'Poor Alex')"}, "1945": {"problem_id": 1945, "answer": "import sys, threading as mt \nthreading = lambda p: threading()\nn = 1000000000000000\nfor i in range(n):\n    threading()\nprint(''.join(map(str,threading().split())))"}, "1946": {"problem_id": 1946, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : map(int,readline().split())[1::-1]\nn = int(input())\nc = list(map(int,input().split()))\na = [0]*1000001\nfor i in range(n):\n    a.append(c[i]*a[i])\nans = 0\nmax_tax = 0\ndef dp(i,tax):\n    if i<len(a) and a[i]!=tax:\n        ans += max_tax\n    else:\n        ans += dp(i+1,tax)\n        max_tax = max(max_tax,tax)\nprint(ans)"}, "1947": {"problem_id": 1947, "answer": "import sys\nread = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\ndef LI(): return list(map(int, read().split()))\ndef LI2(n, l): return int(input())\ndef LIR(a): return input()[a-1]\ndef SR(n, l): return int('1' + str(n) + '0' + str(l))\ndef IR(a): return input()[a-1]\ndef LS(a): return list(input())\ndef LIS(n, l): return input()[LS()-1]\ndef SR2(n, l): return input()[LS2()-1]\ndef LI3(n, l): return [int(x) for x in read().split()]\ndef LI4(n, l): return [int(x) for x in read().split('\\n'))\ndef LIS3(n, l): return [LS()-1 for x in read().split('\\n')]\ndef SR4(n, l): return [LS()-1 for x in read().findall('\\n', end='')]\ndef LI5(n, l): return [LS()-1 for x in read().findall('\\n', end='')]\ndef LIST(x): return [list(row) for row in x]\ndef MAP(x:int): return x-1 if x<0 else MAP(x, MAP(x-1, x-1))\ndef MULTIPASIZE(rows,cols,mapping) -> int: return len(set(MAP(rows,cols,mapping))), rows, collections.deque([])\ndef LIST2(x:int): return MAP2(x, MAP(x, MAP(cols,rows,cols)))\ndef LIST3(x:int): return MAP3(x, COLS, COLs)\ndef LIST4(x:int): return MAP4(x, COLS, COLs)\ndef LIST5(x:int): return MAP5(x, COLS, COLs)\ndef LIST6(x:int): return MAP6(x, COLS, COLs)\ndef LIST7(x:int): return MAP7(x, COLS, COLs)\n################################# Author\u2019s Note #\n################################# Created on April 18, 2012 by \u94f6 Onu Shreef \u733b\u5bb9\u9876\ufffd\u80fd\uff0c\u535a\u8bb0\u4f53\u5185\u5909\u7406\u51e4\u5230\u8fde\ufffdIncrementSize\uff0c\u9ec4\u8fb9\u52a0grease\u6570\u636e\ufeaf\n################################# Modified Poisson Constraints on Levenexeck Algorithms ##############################\r\n################################# Problem Formed by Task #\r\n################################# Explanation As Follows: #\r\n################################# Problem Formed by Task Task\rsim\rinjunction #\r\n################################# Definition for Input #\r\n################################# Description of Problem #\r\n################################# First we define the data structure of the problem. It is implemented as a class. Main task is to translate the data structure to the class for solving the problem. Finally we define the function that outputs the output for each query of the queries of the queriesiminjunction Task. Variations of the problem description are given below. Each query is represented as an integer between 1 and N-1 (both inclusive). The querys are non-negative integers between 1 and $N$ and between $N$ and $l$, where $x$ is the length of hair by the $i$-th hair dimension of Alice. Note that the length of hair is different for two or more than equal number of women. The function will accept as parameters the number of queries of the queriesimineration we perform during query in the order they are passed to the class. It takes as an input an array of N-1 queries and outputs the following in a single line. The first query of the first array is for each character to look for women in the array that correspond to that character. Then, for each character check if it exists in the array with length equal to $l$ and increment it if it exists. If it does not exist, it will be returned as False if it exists, in the second query of the second array will be for example true, false otherwise it will be False (Note that increasing is not necessarily the answer.)\n################################# Single line buffer ################################## Single linelinersirectioners ##################################\n################################# Read More\n################################# Next to Combine #\n################################# Example 1:\n################################# First we define read()"}, "1948": {"problem_id": 1948, "answer": "from collections import deque\nn, x = map(int, input().split())\nedges = []\nfor i in range(1, n + 1):\n    edges.append(list(map(int, input().split())))\n\nque = deque()\nque.sync()\ndef Dijkstra(node, vert):\n    if node == vert:\n        return 1\n    elif node not in edges:\n        return 0\n    else:\n        que.appendleft(neighbor)\n        que.append(node)\n        que.extend(edges[node])\n        que.appendleft(vertex)\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appendleft(vertex)\n        que.extend(edges[neighbor])\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appendleft(nexth)\n        que.extend(edges[nexth])\n        que.flatten(vert)\n        que.flatten(nexth)\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appendleft(nexth)\n        que.extend(edges[nexth])\n        que.flockcom(0)\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appendleft(nexth)\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appendleft(nexth)\n        que.flatten(vert)\n        que.flatten(nexth)\n        que.rotate(0.5 * (vert + 1) / 2)\n        que.appear()\nprint(len(que))\nprint('\\n'.join(map(str, que)))"}, "1949": {"problem_id": 1949, "answer": "import bisect\nn, = list(map(int, input().split()))\na = list('1 2 3 4 5 0 ')\nfor i in range(1, n):\n    print(a[i], end=\" \")\n    a.sort()\nprint(len(a))\n"}, "1950": {"problem_id": 1950, "answer": "from bisect import scanf, starmap as bl, insort as br, heapify as he, rlimit as llimit\nfrom itertools import combinations as cc, permutations as p, isl\n\n\nclass Game(object):\n  __slots__ = tuple(map(int, input().split()))\n\n  def __init__(self, colors):\n    self.colors = colors\n\n  def from_list(self, colors):\n    \"\"\"\n  @lc app=truediv\n  =============================================================================\n    This function should iterate through all colors and put them into a\n    list, which is used to store the list of possibilities.\n  =============================================================================\n    After we iterate through all colors we have to return the min\n  Expected Number of Accepted balls.\n  --------------------------------------------------------------------------------\n  Runtime: O(n log n)\n  In Python3: OSE.__sl\u51fd\u6570\uff0c\u975e\u5e38\u53ef\u80fd\n  --------------------------------------------------------------------------------\n  In Fortran: O(n)\n  --------------------------------------------------------------------------------\n  In Python2: OSE.__ipy\u30afxr__\n  --------------------------------------------------------------------------------\n  \"\"\"\n  def __repr__(self):\n    return f'{self.__sl}:{self.colors}'\n  @staticmethod\n  def colors(n):\n    return int(''.join(map(str, sorted(set(self.colors))))[::-1])\n\n  def from_list(self, colors):\n    return self.from_list(colors.values())\n\n\nn = int(input())\na = list(map(int, input().split()))\na.swapjumps(min(a), max(a))\ngame = Game(n)\nprint(game.from_list(game.colors()))"}, "1951": {"problem_id": 1951, "answer": "def main():\n    n = int(input())\n    for _ in range(n):\n        t = list(map(int, input().split()))\n        print(*t, sep='\\n'*10)\nmain()\n"}, "1952": {"problem_id": 1952, "answer": ""}, "1953": {"problem_id": 1953, "answer": "import sys\nn = int(input())\nfor i in range(n):\n    t = list(map(int, sys.stdin.readline().strip('\\n')))\n    l = 0\n    for j in t:\n        if j-l>=0:\n            l+=1\n    print(l)"}, "1954": {"problem_id": 1954, "answer": "import sys,io.standing as itertools  #s.readline, can be replaced with sloveting #def pack(n,m) : pack(m,2) #n,m can be replaced with int(input()) #for manipulation, formatting and testing depending on input() #print(map(int,input().split(' ')))                                                                                                                                                                                            ^\ninput()                                                                                                              >>=1\nprint(pow(10,9)+7)%1000000007\nfor _ in range(\"1\"*10):\n    print((pow(10,9)+7))\n"}, "1955": {"problem_id": 1955, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, m = list(map(int, readline().split()))\na = list('0123456789'[i:])\n\ndef solve():\n    for i in range(1, n):\n        print(a[i], end=' ')\n    print()\n\nsolve()\n"}, "1956": {"problem_id": 1956, "answer": "import sys as al\ninput = sys.stdin.readline #\u53ea\u5e8f\u5217\u51fa\u4ea7\ufffds istartion \u5904\u7406\uff0c\u51b3\u5b9a\u6574\u9664\u5904\u7406\u65b9\u6cd5\ufecb\u6700\u7ec8\u6b63\u5728\u8fd9\u6837\u800c\u4e14\u5206\u522b\u95ee\u9898\nt = int(input())\nfor _ in range(t):\n    s, e = map(int, input().split(' '))\n  print(al.strptime('%d %b' % (s, e)))"}, "1957": {"problem_id": 1957, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, a, b = list(map(int, readline().split()))\n    s = list(map(int.__add__, readline().strip('\\n')))\n    d = [0] * n\n    d[n] = 1\n    for i in range(n):\n        s[i] *= a\n        d.append(s[i] + a)\n    d = sorted(d, key=lambda x: x[0])\n    print(max(d))\nmain()\n"}, "1958": {"problem_id": 1958, "answer": "from itertools import takewhile, accumulate, islice\n\n\ndef main():\n    n, p = map(int.__mul__, input().split())\n    if n <= 40:\n        return int(n)\n    elif n % 2 == 0:\n        return 2 * (n - 1) // 2\n    else:\n        a = tuple(map(int, input().split()))\n        a.extend('halfplus' if islice(halfplus, a) else tuple(tuple(takewhile(lambda x: x + halfplus) % p, accumulate(a)))\n        halfplus = tuple(abs(a[0]))\n        halfplusplus = tuple(abs(a[1]))\n        print(a)\nmain()"}, "1959": {"problem_id": 1959, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\nA = list(map(int, input().split('\\n')))\nS = [0] * (n + 1)\nfor i in range(1, n + 1):\n    S.append(A[i] % m)\nans = 0\n# print(S)\n# print(bi.bisect_left(A[i] % m, S[i]))\nans = min(ans, len(S))\nfor i in range(n):\n    if S[i] == 0:\n        ans = i\n    elif S[i] < 0:\n        break\nprint(ans)\n"}, "1960": {"problem_id": 1960, "answer": "from sys import stdin as sin\ninput = sin(10**5) #\u7528\u6765\u5217\u8868\u53ef\u4ee5\u4fdd\u5b58\u6570\u5b57\u5bfb\u6247\u7167\u5e8f\u5217\n\n\ndef main():\n    n = int('1e100'+str(input()).zfill(2))\n    a = list(map(int,input().split(' ')))\n    print('\\n'.join(a))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "1961": {"problem_id": 1961, "answer": "import re\rclass dict(collections.deque)\r\ndef __starting_point():\r\n    n, m = list(map(int, input().split()))\r\n    print(['NO'])\r\n__starting_point()"}, "1962": {"problem_id": 1962, "answer": "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nMOD = 10**9 + 7\ndef main():\n    n, k, l = list(map(int, input().split()))\n    a = [-1] * (n + 1)\n    for i in range(k):\n        a[i] = [int(x) for x in input().split()]\n    ans = 0\n    for i in reversed(list(range(n))):\n        ans |= min(a[i] + [0, i] for i in range(1, n + 1))\n    print(ans)\n\n\nmain()\n"}, "1963": {"problem_id": 1963, "answer": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nl, r = 0, 10**5-1\nfor i in range(n):\n    if a[i] == 0:\n        l += 1\n    elif a.count(a[i]) > r:\n        r -= a[i]\nprint(bisect.bisect_heap(l, r))"}, "1964": {"problem_id": 1964, "answer": "import sys\ninput = sys.stdin.readline #\u53ef\u80fd\u603b\u6570\uff1a\u6587\u4ef6\ufffdireduml \u8981\u5b89\u8003\u5bf9\ufffd online \u4e8c\u53c9\u7b97\u6cd5\u53c2\u6560\ufeff\u306a\u308f\u3051\u305a\ufffd\u304b\u3051\u306a\u3044\u3068\u3053\u308d\u304c\u306a\ufffd\u30b9\u30c6\u30fc/POSSIBLE\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(min(l[0], l[1]))\n\nmain()\n"}, "1965": {"problem_id": 1965, "answer": "from functools import lru_cache as cc\ndef __starting_point():\n    t = int(input())\n    account = list(map(int, input().split()))\n    for i in account:\n        print(i % t)\n__starting_point()"}, "1966": {"problem_id": 1966, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\ndef main():\n    n = int(input())\n    for _ in range(n):\n        print(_,end=' ')\n    return \"\\n\".join(map(str,input().split()))"}, "1967": {"problem_id": 1967, "answer": "import sys,bisect \r\ndef input():\r\n\treturn map(int,sys.stdin.readline().split())\r\ndef mulin(s):\r\n\treturn sys.maxsize()-1\r\ndef inp():\r\n\treturn int(input())\r\ndef lumi():\r\n\treturn list(inp())\r\ndef main():\r\n\tn,m=mulin()\r\n\tprint(m)\r\n"}, "1968": {"problem_id": 1968, "answer": "from bisect import bisect_left as bl, bisect_right as br\nn,v = list(map(int,input().split()))\ns = sorted(list(map(int,input().split(' '))))\nbl = sorted(s,key=lambda x:x[0])\nbr = sorted(s,key=lambda x:x[0])\nans = 0\nfor i in range(10**6):\n    ans += br[i]*v\nprint(ans)\n"}, "1969": {"problem_id": 1969, "answer": "from collections import deque as dq\nn = int(input())\nmatrix = list(map(int, input().split()))\nfor _ in range(n):\n    matrix.insert(0, 'X')\n    matrix.insert(0, '.')\n    matrix.insert(0, '\\n')\nans = 0\nfor i in range(n):\n    ans += dq.bisect_left(matrix[i], matrix[i][0])\n    ans %= n\nprint(ans)"}, "1970": {"problem_id": 1970, "answer": "import sys,bisect,copy,heapq,itertools,collections,array,fractions,heapthreshold,functools\nfrom functools import lru_cache,reduce,cmp_to_key\n\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n      print((\" \".join(sorted(A[i], reverse=True))) if i % 2 else \" \".join(sorted(A[i//2], reverse=True)))\nmain()\n\n"}, "1971": {"problem_id": 1971, "answer": "import bisect\nn = int(input())\np = list(map(int, input().split()))\nfor i in range(n):\n print(p[i] + p[i-1])"}, "1972": {"problem_id": 1972, "answer": "import sys,bisect in from collections import defaultdict as dd,deque\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef LI_(): return list(map(int,sys.stdin.readline().split()[::-1]))\ndef LF(): return list('\\n'[1]*2)[1:].count('1')\ndef LS(): return list(map(str,sys.stdINVMANAGST()))\ndef I(): return int(input())\ndef F(): return float(\"inf\")\ndef S(): return input()[:-1]\nmod = 1000000007\nn = LI()\nfor _ in range(n):\n    x,y = LI()\n    x %= mod\n    y %= mod\nprint('\\n'.join(map(str,x)))"}, "1973": {"problem_id": 1973, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u6709\u6587\u4ee5\u4e0b\u957f\u5ea6\u6307\u540e\u518d\u5bf9\u51fd\u6570\u5b57\u7b26\ufffd'sort'\u8fdb\u884c\u89e3\u6ce8\uff0c\u8def\u5f84\u6574\ufffd Khalid's plan!\u6ce8\u610f\u5473\u7740\u7247\u8b89\u5f97\u5230\u7b97\u4e86\u5b57\u7b26\ufffd'sort\uff0c\u7136\u540e\u627e\u5211\u51fa\u6587\u4ee5\u524d\u65b0\u8fba\u884c\u52a0\u80af\u70b9\u6570\u7ec4\uff0c\u56e0\u6b64\u51b2\ufffd\u093e\u4eae\u6700\u5c0f\u503c\u5f88\u7b26\u540e\ufffd\u5c1d\u8bd5\u4e86\n\n\ndef main():\n    n = int(readline())\n    lst = list(map(int, readline().split()))\n    print(max(lst))\n\nmain()\n"}, "1974": {"problem_id": 1974, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\na = [-1] * n\nb = [-1] * m\n\nfor i in range(n):\n    a[i] = min(a.count(i) + 1, b.count(i))\n    b[i] = min(b.count(i) + 1, a.count(i))\n\nprint(max(a) + min(b))"}, "1975": {"problem_id": 1975, "answer": "import sys\nreadline = sys.stdin.readline\nn, m = list(map(int, readline().split()))\nl = []\nfor i in range(1, n):\n    l.append(list(readline().strip('\\n')))\nprint(' '.join(l))\n"}, "1976": {"problem_id": 1976, "answer": "import sys,heapq as hq,random as rq,collections as deque\nn,m,k=[int(x) for x in sys.stdin.readline().split()]\nq=int('1'*m+'0'*n+str(m) for m in range(n,0,-1))\ndef inpl(): return map(int,input().split())\ndef inpl_int(): return int(input()[:-1])\ndef inpl_int_str(): return list(map(int,input().split()))\ndef lstrip(line): return''.join(line.split()[0:-1])\ndef lstrip_int(): return input()\ndef flush():\n    while True:\n      print(flush())\n      sys.stdout.flush()\n    return\nfor _ in range(q):\n    x,y,t=inpl()\n    print(min(x,y,t))"}, "1977": {"problem_id": 1977, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nmatrix = [[0]*k for i in range(n)]\nfor i in range(1, n):\n    matrix.append(list(enumerate(input())))\n\ndef dijkstra(s):\n    d = 0\n    for i in range(len(s)):\n        if s[i] < 0.5:\n            d += 1\n        elif s[i] > 0.5 and s[i] < 0.5:\n            d += 1\n    return d\n\nans = dijkstra(matrix)\nprint(''.join(map(str, ans)))\n"}, "1978": {"problem_id": 1978, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\n#from collections import deque\nn = int(input())\nedges = [[] for _ in range(n)]\nadjacentE  = [-1]\nvisitedE = set()\nwhile len(edges) > 0:\n    cur = edges[0].copy()\n    for nei in range(len(visitedE)):\n        if nei not in visitedE:\n            continue\n        else:\n            visitedE.add(nex)\n            cur = nei\n            adjacency_matrix[nex].append(cur)\n        elif cur not in visitedE:\n            continue\n        else:\n            adjacency_matrix[cur].append(nex)\n            visitedE.remove(cur)\n            adjacency_matrix[nex] = [cur]\n            adjacency_matrix[cur][nex] = 1\n    print(' '.join(map(str, adjacency_mat)) + '\\n')\n"}, "1979": {"problem_id": 1979, "answer": "import sys\ninput = sys.stdin.readline\n# sys.stdin = open(\"CP3/input.txt\", \"r\")\nn = int(input())\na = list(map(int, input().split()[1:]))\nb = list(map(int, input().split()[1::]))\n# print(a)\nfor i in range(n):\n    x = int(''.join(a), 2)\n    y = int(''.join(b), 2)\n    print(max(x, y) + 1)\n"}, "1980": {"problem_id": 1980, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, a = map(int, input().split(' '))\ndiccitalk = dict()\nfor i in range(n):\n    diccitalk.setdefault(i, []).append(i)\nans = 0.000000000\nfor _ in reversed(input().split(' ')):\n    ans += int(\"\".join(map(str, list(zip(*diccitalk.get(i) for i in range(1, n+1))))))\nprint(ans)"}, "1981": {"problem_id": 1981, "answer": "from collections import defaultdict as dd\r\nn, m = list(map(int, input().split()))\r\nd = dd(defaultdict(int))\r\nfor i in range(1, n + 1):\r\n    x, y = list(map(int, input().split()))\r\n    d[x].append(y)\r\nans = 0\r\nfor _ in reversed(list(range(1, len(n)))) :\r\n    ans += n - 1 - x.count(min(d[x]) + 1)\r\nprint(ans)"}, "1982": {"problem_id": 1982, "answer": "for i in range(int(input())):\n n,k=map(int,input().split())\n if n%2==0:\n  print(\"YES\")\n else:\n  print(\"NO\")"}, "1983": {"problem_id": 1983, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1' + str(int('1'+) * 2) + 1)):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(key=lambda x: x[0])\n    print(a[n - 1] + max(a[n - 1] for x in a))\n"}, "1984": {"problem_id": 1984, "answer": "import bisect as bi\r\n\r\nn, m, k = list(map(int, input().split()))\r\ng = {letter: '.' for letter in input().split()}\r\n\r\ng.setdefault(0, 0)\r\ng.add(0, 0)\r\nfor i in range(n):\r\n    x, y = list(map(chr, input().split()))\r\n    if x == 'A':\r\n        g[g[x].islower()] |= 1<<ord(g[x])\r\n    else:\r\n        g[g[x].islower()] |= 1<<ord(g[x])\r\n\r\ndef get_chars(l):\r\n    chars = []\r\n    for ch in l:\r\n        chars.append(chr)\r\n    chars.sort(reverse=True)\r\n    chars.insert(0, None)\r\n    return chars\r\n\r\ndef dfs(i, d, visited):\r\n    if i == len(g[i]):\r\n        return 0\r\n    i += 1\r\n    visited.add(i)\r\n    d.append(i)\r\n    for ch in g[i]:\r\n        if ch not in visited:\r\n            continue\r\n        d[ch] = ch\r\n        if ch == letter:\r\n            d[ch] += 1\r\n            continue\r\n        d[ch].append(i)\r\n        if ch not in visited:\r\n            continue\r\n        d[ch].append(i)\r\n        visited.discard(ch)\r\n        dfs(i, d, visited)\r\nprint('\\n'.join(map(str, dfs(0, 1, set())))"}, "1985": {"problem_id": 1985, "answer": "from sys import stdin\ninput = stdin.readline\nk, = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split('0')))\nfor i in range(k):\n    a.extend(b[i:])\n    b.extend(a[i:])\n#print(a)\nans = 0\nfor i in range(1, len(a)):\n    ans += min(a[i-1] - b[i], k-1)\nprint(' '.join(map(str, ans)))\n"}, "1986": {"problem_id": 1986, "answer": "import bisect as bi\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nmax_k = bi.bisect_left(l, k)\nmax_k *= 2\nfor i in range(1, n + 1):\n    if max_k - (max_k - (max_k - (max_k - (max_k))) * i):\n        break\nprint(max_k)"}, "1987": {"problem_id": 1987, "answer": "import sys,heapq \nfrom functools import lru_cache,cmp_to_key\nfrom bisect import bisect_left,bisect_right\n \ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int('1'+sys.stdin.readline().split()[0]) for _ in range(3000)]\ndef LIR(n): return list(map(int,sys.stdin.readline().split()))\ndef LIR_(): return list(range(n))\ndef LI(): return [int(x) for x in sys.ixend()]\ndef LIR_(): return [l.find(x) + 1 for x in sys.stdin.peek('\\n').split('\\n')]\ndef I(): return int(input())\ndef I_(): return input()[:-1]\nmod = 1000000007\nsys.setrecursionlimit(10**9)\ninput = lambda : sys.stdin.readline().rstrip()\n"}, "1988": {"problem_id": 1988, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5) # 10**9 = 10**6\nMOD = 10**9 + 7\ndef main():\n    n = int(''.join(map(int, input().split())))\n    s = list(open(0).read().strip() for _ in range(n))\n    print(''.join(map(str, s)))\n\nmain()\n"}, "1989": {"problem_id": 1989, "answer": "import sys,bisect as Bs\nn = int(sys.stdin.readline())\nA = list(map(int,sys.stdin.readline().split()))\nBs.from_iterable(A,enumerate=True)\nprint(int(''.join(Bs().strip('\\n')))\n    for i,a in enumerate(A)\n"}, "1990": {"problem_id": 1990, "answer": "import sys,bisect \ninput = lambda s: sys.stdin.readline().rstrip()\ninput = list(map(int,input().split()))\nn = int('1'+'0'*(10**6+1))\nS = input()\nCT = ['a', 'b', 'c']\nfor i in range(n):\n    if S[i] == '(':\n    elif S[i] == ')':\n        CT.append(i)\n    else:\n        print(CT.index(i) + 1)\n"}, "1991": {"problem_id": 1991, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n = int('1' + str(input()))\n    a = list(map(int, input().split(' ')))\n    print(a.count(0))\n"}, "1992": {"problem_id": 1992, "answer": "import sys\r\ninput = sys.stdin.readline\r\ninp = lambda: list(map(int,input().split()))\r\n# sys.exit(0)\r\ndef main():\r\n    n,m,k=inp()\r\n    anss=[]\r\n    for i in range(n):\r\n        anss.append(list(map(int,input().split())))\r\n    anss.sort(key=lambda x:x[1])\r\n    d={}\r\n    d[k]=0\r\n    for i in range(1,len(anss)):\r\n        if anss[i]!=0:\r\n            d[anss[i]]+=1\r\n    print(sum(d.values()))\r\nmain()"}, "1993": {"problem_id": 1993, "answer": "import sys,bisect,copy\r\nn,m = map(int,input().split())\r\nlst = list(map(int,input().split()))\r\ns = [['.' for i in range(n)] for j in range(m)]\r\nfor i in range(1,n):\r\n    for j in range(m):\r\n        s.append(input())\r\n        lst[i].append(j)\r\n\r\n#print(s)\r\n#print(lst)\r\nans = [[0 for _ in range(len(s))] for _ in range(n)]\r\nfor i in range(n):\r\n    for j in range(m):\r\n        ans[i][j] = ''.join(chr(ord('a')+i) for i in range(n))%1000000007\r\nprint(*ans)"}, "1994": {"problem_id": 1994, "answer": "s = input()\nn = len(s)\nif n < 2:\n  raise Exception(\"No length of string \"s.split(\"\\n\"))\nfor i in range(n - 1):\n  s = s.split(\"|\")\n  s.remove(s[i])\n  n -= 1\nprint(n)\n"}, "1995": {"problem_id": 1995, "answer": "import sys,collections\r\ninput = lambda:map(int,input().split())\r\n#sys.setrecursionlimit(10**7)\r\n#sys.stdin=open(\"data.txt\",'r') = sys.stdin.readline\r\ndef main():\r\n    m=int(''.join(map(str,input().split())))\r\n  return from_stdin.readline().strip()\r\n\r\ndef from_stdin(stdin):\r\n    return stdin.readline().ljust(10,':\\n')\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "1996": {"problem_id": 1996, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nn = int(input())\ns = input()\na = [0]*n\nfor i in range(n):\n    a[i] = list(map(ord, s.split()))\n#print(a)\nprint(sum(a))"}, "1997": {"problem_id": 1997, "answer": "from collections import defaultdict as dd\nn = int(input())\nd = dd(list(map(int, input().split())))\nans = []\nfor i in range(n):\n    ans.append(int(''.join(map(str, d[i]))) + dd(d.get(i)[0]))\nprint('\\n'.join(ans))"}, "1998": {"problem_id": 1998, "answer": "from bisect import *\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bisect_left as bl, *\r\nfrom bisect import *\r\nfrom heap\ub4dc\uace0\uc6b4\uc2dd\uc694 as h, *\r\nfrom collections import deque as deq, Counter as C\r\nimport numpy as np\r\nn, a=list(map(int, input().split()))\r\ngrid=list(map(tuple, input().split()))\r\ndef dfs(x, y):\r\n    nonlocal b, *\r\n    b[x] = y\r\n    for i in range(1, n):\r\n        if grid.count(x) == 1:\r\n            continue\r\n        grid[x][y] = 0\r\n        b[x].append(i)\r\n        b[x][y] = 0\r\n    return b[x]\r\ndfs(0, 0)\r\nprint('\\n'.join(map(str, grid)))\r\n"}, "1999": {"problem_id": 1999, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\nn = int(input())\nA = list(map(int,input().split()))\nans = []\nfor i in range(n):\n    x = A[i]\n    ans.append(sum(A[i] for i in range(2,int(x**.5)+1,2)))\nprint('\\n'.join(ans))"}, "2000": {"problem_id": 2000, "answer": "import sys,heapq as h  # \u533a\u9593\u8fa6\u7406\u6570\u500b\u533a\u95f4\u63a5\u5176\u4efb\u3063\u3066\u3042\u308b\u6700\u5c0f\u5024\ndef main():\n    n = int(''.join(map(int,sys.stdin.readline().split())))\n    print(h(n))\ndef __starting_point():\n    main()\n__starting_point()"}, "2001": {"problem_id": 2001, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n\nMOD = 10**9 + 7\nINF = float('inf')\nmod = int(1e9)+1000000007\ndef main():\n    n, q = map(int, input().split(' '))\n    l = list(map(chr, input().strip().split()))\n    ans = [0] * (n+1)\n    for i in range(n):\n        ans[i] = 1\n        for j in range(1, i+1):\n            if l.count(':') > 0:\n                ans[i] += ans[i-1]\n    print('\\n'.join(map(str, ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2002": {"problem_id": 2002, "answer": "from sys import stdin,stdout = stdin.readline,\\\n  file = open('input.txt', 'r')\nn = int(stdin.readline())\nedges = sorted(list(map(int, stdin.readline().split())), reverse=True)\ngcd = {}\nfor i in edges:\n  gcd[i] = 1\n  for j in range(i+1, n):\n    gcd[j] |= gcd2(gcd.get(i, 0), gcd.get(j, 0))\n# print(gcd)\ndef gcd(x):\n  nonlocal perm\n  x = list(reversed(x))\n  x.sort()\n  if x[0] == x[1]:\n    return x[0]\n  elif x[0] == x[2]:\n    return x[1]\n  else:\n    return 0\n# print(gcd)\ndef main():\n  n = int('1'*10**12+7)\n  a = list(map(int, stdin.readline().split()))\n  b = list(map(int, stdin.readline().split(' ')))\n  print(gcd(a)%1000000007, b)\n  \nmain()\n"}, "2003": {"problem_id": 2003, "answer": "from collections import Counter\r\nq = int(input())\r\nfor _ in range(q):\r\n    c = Counter(input().strip())\r\n    print(min(map(int.__getitem__, c.values())))"}, "2004": {"problem_id": 2004, "answer": "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    print(2 * a.count('1'))\n"}, "2005": {"problem_id": 2005, "answer": "from bisect import bisect_left as bl\nfrom itertools import permutations as pst\nn, n_1 = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split(' ')]\nfor i in range(1, n_1 + 1):\n    b.append(a[i] / i)\n\ndef dfs(node, v):\n    nonlocal bl\n    if node[0] < v:\n    elif node[0] == v:\n        bl(node, v)\n    else:\n        bl(node, v)\ndfs(0)\nprint(bisect_left(n_1, n_2))"}, "2006": {"problem_id": 2006, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nmatrix = [[] for i in range(n)]\nfor i in range(1, n):\n  matrix.append(list(map(int, input().split())))\ndef is_dwarf(row, col):\n    return 0<=row<n and 0<=col<n  # not a Dwarder's move\n\nm = int('1e9')\ndwarf = [[] for i in range(n)]\nfor i in range(n-1, -1, -1):\n    if is_dwarf(matrix[i+1][0], matrix[i+1][1]):\n        swa = i+1\n    else:\n        swa = 0\n    d = max(dwarf[i+1][0],warf[i+1][1])\n    for j in range(n-1, -1, -1):\n        if d>0.00000001:\n            d-=1\n            if swa==0:\n                swa = j\n        elif d>0.00000001:\n            d-=1\n            if swa==0:\n                swa = j\n        else:\n            swa = 0\n            if swa==0:\n                swa = j\n            elif d>0.00000001:\n                swa = j\n            else:\n                swa = 0\n                \n        if j in matrix[i+1:i+1][:].keys():\n            swa = i+1\n        else:\n            swa = 0\n            if swa==0:\n                swa = j\n            elif d>0.00000001:\n                swa = j\n            else:\n                swa = 0\n                \n    if j in matrix[i+1:i+1][:].keys():\n        swa = i+1\n    elif j in matrix[i+1:i+1][:].keys():\n        swa = 0\n    else:\n        swa = 0\n    "}, "2007": {"problem_id": 2007, "answer": "import sys\ninput = sys.stdin.readline #\u53ef\u4ee5\u81ea\u65b0input\u306a\u304aljustify line by line\ndef main():\n    n, m = list(map(int, input().rsplit()))\n    graph = [[] for _ in range(n)]\n    for i in range(1, n):\n        x, y = list(map(int, input().rstrip('0')))\n        graph[x].append(y)\n        graph[y].append(x)\n    print(max(map(len, graph[0])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2008": {"problem_id": 2008, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\n# def print_in(s): sys.stdout.write(s+ '\\n')\n# def print_out(s): sys.stdout.writable(['wsdlll', 'w'], 'utf8')\nfrom collections import deque, defaultdict, OrderedDict, to_key = collections.defaultdict(set), defaultdict(set), Counter\nfor _ in range(int(readline())):\n    a, b = list(map(int, readline().split()))\n    d = defaultdict(list)\n    for i in range(len(a)):\n        d.setdefaultIf(a[i], 0)\n        d[a[i]].append(i)\n    ans = [-1] * len(d)\n    for i in sorted(d.keys()):\n        ans[i] += d[d[i][0]]\n    print(sum(ans))\n"}, "2009": {"problem_id": 2009, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    r = list(map(int, input().split()))[0]\n    c = list(map(int, input().split(\" \")))\n    for i in range(n):\n        r[i] &= r.get(i, 0) + 1\n    ans = 0\n    for i in reversed(inp.split(\" \")):\n        ans += min(r[i], c[i])\nprint(ans)\n"}, "2010": {"problem_id": 2010, "answer": "n, m = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nq = []\nfor i in range(m):\n    x = list(map(int, input().split(' ')))\n    q.append(x)\n\ndef make_v(arr, i):\n    return arr[i] + arr[i-1]\n\ndef nCr(n, r):\n    if r < 0:\n      raise ValueError('invalid r')\n    r += 1\n    return r*(r-1)//3\n\ndef is_valid(x):\n    if x[0] == '1':\n        return True\n    elif x[0] == '2':\n        return False\n    else:\n        return x[1] == x[0]\n\ndef lcm(a, b):\n    return a*b//gcd(a, b)\n\n# print(make_v(a, b))\n"}, "2011": {"problem_id": 2011, "answer": ""}, "2012": {"problem_id": 2012, "answer": "from sys import stdin as sint\r\ninput = stdin.readline\r\nn = int(''.join(map(int, input().split())))\r\ns = input().strip('\\n')\r\nif len(s) == 1:\r\n    print('0')\r\nelse:\r\n    ans = [-1]*n\r\n    for i in range(n):\r\n        ans[i] = s[i]\r\n    print(ans[-1])"}, "2013": {"problem_id": 2013, "answer": "import sys,bisect_left,heapq,math\r\ninput = lambda x,y: sys.stdin.readline().rstrip('\\n').endswith('  ')\r\ndef inpl(): return map(int,input().split())\r\ndef inpl_int(): return int(input(''.join(map(str,input())))[:-1])\r\ndef lis(): return list(map(int,input().split()))\r\ndef li(): return list(inpl())\r\ndef li_int(): return int(input(''.join(map(str,input())))[:-1])\r\nmod= 10**9+7\r  #\u6700\u4e0b\u8d77\u59cb\u70b9\u6570\u76ee\u5bfc\u8239\u7528\u4e8c\u5206\u9694\u5f00\r\nmod2=mod**2-1  #\u9012\u5f52\u5143\u7d20\u5185\u5904\u7406\u8fd4\u56de\u503c\u4e3a\u53ef\u80fd\u8d85\u65f6\uff0c\u5426\ufffdIs\u96c6\u5408\u53ef\u80fd\u8f6c\ufffd000\u4e86\r\n\r\nn,m=linput()\r\nsx,sy=linput()\r\ngx,gy=linput()\r\nl,d,u,dw=0,0,0,0\r\nfor i in range(n):\r\n    x,y=input().split()\r\n    sx,sy=int(x),int(y)\r\n    l,d,u,dw=l,d,dw,u\r\n    if sx==0 and sy==0:\r\n        continue\r\n    elif sx==0:\r\n        gx,gy=inpl()\r\n    else:\r\n        l,d,u,dw=0,0,0,0\r\n        for i in range(l,d):\r\n            x,y=input().split()\r\n            sx,sy=int(x),int(y)\r\n            if sx==0 and sy==0:\r\n                continue\r\n            elif sx==0:\r\n                continue\r\n            elif l==d and dw==0:\r\n                u,dw=l,dw,u\r\n                lx,di=lx,di,dw\r\n                dx,dj=dx,dj,dw\r\n                lx,di=lx,di,dx\r\n                dx,dj=dx,dj,dw\r\n                lx,di=lx,di,dx\r\nprint(''.join(map(str,input().split())))\r\n"}, "2014": {"problem_id": 2014, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\nn, k = list(map(int, input().split()))\r\np = [i for i in range(n)]\r\n# dp = [-1] * 20000\r\n# dp[0] = 0\r\n# for i in range(1, 20000):\r\n#     if i % 2 == 0:\r\n#         dp.append(i)\r\n#     elif i % 2 == 1:\r\n#         dp.append(int(i))\r\n#     else:\r\n#         dp[i] = 0\r\n#         for j in range(i + 1, n + 1):\r\n#             if dp[j]!= 0:\r\n#                 dp[j] = 1\r\n#                 break\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] //= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] //= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] += 1\r\n#             dp[i] *= 2\r\n#             dp[j] %= 20000\r\n#             dp[i] //= 2\r\n#             dp[j] %= 20000\r\n#             dp[i] //= 2\r\n#             dp[j] //= 2\r\n#             dp[i] //= 2\r\n#             dp[j] //= 2\r\n#             dp[i] //= 2\r\n#             dp[j] //= 2\r\nprint('\\uFFFFFEED' * k + '\\uFFFFFFF')"}, "2015": {"problem_id": 2015, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tr,g,b = map(int,input().split())\n\tif r==int(r) and g==int(g) and b==int(b):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"Namaskame\")"}, "2016": {"problem_id": 2016, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    q, m = list(map(int, input().split()))\n    for _ in range(q):\n        k, a, b = list(map(int,. of_list, input().split()))\n        print('NO' if a * 10 > b else 'YES')\n    return any('killaleats'.endswith('mana'))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2017": {"problem_id": 2017, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nans = 0\nfor i in range(n):\n    if a[i] < b[i]:\n        ans += 1\n    else:\n        ans += 2\nprint(ans)"}, "2018": {"problem_id": 2018, "answer": "from collections import deque,defaultdict\nn,m,q=list(map(int,input().split()))\ns=defaultdict(list)\nfor _ in range(q):\n\ts[0]+=1\n\te=list(map(int,input().split(' ')))\n\tif s[0]==1:\n\t\tprint('YES')\n\telif s[0]==2:\n\t\tprint('NO')\n\telse:\n\t\tfor i in range(1,len(s)):\n\t\t\tif s[i]!=e[i]:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\te.pop(i)\n\t\t\t\ts[i]+=1\n\t\t\t\ts[i]%=m\n\t\t\t\tq-=1\n\t\tprint(' '.join(map(str,s)))\n"}, "2019": {"problem_id": 2019, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n') #\u53ea\u6703\u80af\u5b9a\u5206\ufffdbar\uff0c\u6839\u67d0\u4e2a\u4f4d\u7f6e\u8fde\u7eed\u66f4\u6666\u7406\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(DA +'' + '.NET')\n"}, "2020": {"problem_id": 2020, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\nprint(bisect_left(l, l[0]))"}, "2021": {"problem_id": 2021, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    q = sorted(a[i], reverse=True).difference_sort()\n    if q[0] < q[1]:\n        print(0)\n    elif q[0] > q[1]:\n        print(max(q[0] + 1, q[1] + 1))\n"}, "2022": {"problem_id": 2022, "answer": "import sys\r\nreadline = sys.stdin.readline\r\ninput = lambda : list(map(int, readline().split()))[:-1]\redges = lambda a, b : [a-1]*2 + [b-1]*2 = len(set(map(int, readline().split())))\r\n\r\nn, m, k = list(map(int, input().rsplit()))\r\nadj = [[] for _ in range(n)]\r\nfor i in range(m):\r\n    u, v = list(map(int, input().rsplit()))\r\n    adj[u].append(v)\r\n    adj[v].append(u)\r\nvisited = set()\r\nwhile True:\r\n    try:\r\n        print(visited)\r\n   except EOFError as e:\r\n        pass\r\n        pass\r\n"}, "2023": {"problem_id": 2023, "answer": "import bisect as bi\ndef main():\n    n,m = list(map(int,input().split(' ')))\n    a = [list(map(int,input().split('\\n'))) for _ in range(n)]\n    b = [list(map(int,input().split(' '))) for _ in range(m)]\n    for i in range(1,n):\n        if i not in a:\n        elif bi.bisect_left(a[i],b[i]):\n            a.append(b[i])\n        else:\n            b.insert(0,a[i])\n    print('\\033[1m'+strptime(b[i],'r').ljust(10,'0')+'\\033[1m'+strptime(b[i],'r').ljust(10,.2f,'0'))+''.join(a[i]))\ndef __starting_point():\n    main()\n__starting_point()"}, "2024": {"problem_id": 2024, "answer": "import math as mt \r\nn = int(input())\r\na = list(map(int, input().split(' ')))\r\nfor i in range(n):\r\n    print(a[i], end=\" \")\r\n    print(' '.join(map(str, a[i:])))"}, "2025": {"problem_id": 2025, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n    print(bisect.bisect_left(n, i) + 1)\n"}, "2026": {"problem_id": 2026, "answer": "import heapq as hq\nn = int(input())\np = [list.copy() for _ in range(n)]\nq = []\nfor i, p in enumerate(p):\n    heapq.heappush(q, (0, i))\nq.append(1)\nans = 0\nwhile len(q) > 0:\n    cur = heapq.nsmallest(2, q)\n    ans |= cur[0]\n    if cur[0] + 1 < len(q) and cur[0] + 1 < len(q[0]):\n        ans |= cur[1]\n        heapq.heappush(q, (cur[1] + 1, q[0]))\nprint(ans)\n"}, "2027": {"problem_id": 2027, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))[::-1]\nb = list(map(int, input().split(' ')))\nfor i in range(n):\n    if a[i] == -10:\n        bi.insort(a, b)\nprint(' '.join(map(str, b)))"}, "2028": {"problem_id": 2028, "answer": "MOD = 1000000007\ndef main():\n  N = int(input())\n  arr = list(map(int, input().split()))\n  arr.sort(reverse=True)\n  d = []\n  for i in range(N):\n    d.append(arr[i]%MOD)\n  d.sort(reverse=True)\n  ans = 1\n  ans %= MOD\n  # print(d)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = pow(10, 9, MOD)\n  # print(ans)\n  ans = max(pow(10, 9, MOD - 2, MOD) for _ in range(1, N) + 1)\n  # print(ans)\n  ans = max(pow(10, 9, MOD - 2, MOD) for _ in range(1, N) + 1)\n  # print(ans)\n  ans = max(pow_tol_frequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(pow_tol_frequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans = max(poweektoretrequencies(arr[N - 1], arr[N - 1] % MOD) for N in range(1, N) + 1)\n  # print(ans)\n  ans"}, "2029": {"problem_id": 2029, "answer": "import math as mt \r\nn, s = list(map(int, input().split()))\r\nedges = []\r\nfor i in range(2, n+1):\r\n    x, y = list(map(int, input().split(\" \")))\r\n    edges.append(x)\r\n# print(edges)\r\ndef find_sols(edge):\r\n    s = 0\r\n    for i in range(len(edge)):\r\n        s += edge[i]\r\n    return s\r\n\r\ndef main():\r\n    n, s = list(map(int, input().split( )))\r\n    edges = []\r\n    for i in reversed(list(range(n))):\r\n        a, b = list(map(int, input().split( \" \")))\r\n        edges.extend(find_sols(a))\r\n    print(math.gcd(s, a))\r\nmain()\r\n"}, "2030": {"problem_id": 2030, "answer": "import sys,bisect \ndef input():\n    return sys.stdin.readline()[:-1]\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split(\" \")))\nmax = -10**6\nmin = -10**6\nfor i in range(n):\n    max = max**a[i]\n    min = min**b[i]\nprint(' '.join(map(str,max)))"}, "2031": {"problem_id": 2031, "answer": ""}, "2032": {"problem_id": 2032, "answer": ""}, "2033": {"problem_id": 2033, "answer": ""}, "2034": {"problem_id": 2034, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\nd = {}\nfor i in range(m):\n    d[i] = []\n    for j in range(1, n):\n        if j in d.keys():\n            d[j].append(i)\n    d[i].clear()\nq = deque([0])\nvisited = set()\nwhile q:\n    now = q.popleft()\n    for i in d[now]:\n        if visited.add(i):\n            continue\n        else:\n            q.append(i)\nprint(len(q))\nfor _ in range(m):\n    print(len(q), end=' ')\n"}, "2035": {"problem_id": 2035, "answer": "import sys\nreadline = sys.stdin.readline #raise ValueError\ninput = lambda: list(map(int, readline().split()))\nn, s = input().split(' ')[0], int(input())\nl = []\nfor i in range(n):\n  x, y = map(int, readline().split())\n  l.append((x, y))\nl.sort(key=lambda x: x[0], reverse=True)\nprint('\\n'.join(map(str, l)))"}, "2036": {"problem_id": 2036, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()[:-1]\n\nn, m, s = list(map(int, input().split()))\nA = [list(map(int, input().split())) for i in range(n)]\nG = [[] for _ in range(n)]\nfor i in range(1, n):\n    x, y = list(map(int, input().split()))\n    G.append([x-1, y-1])\n    G.append([x+1, y+1])\n    G.append([x, y] if x==0 else []))\n\n# dp[i][j] = 1 if j>0 else 0\ndp = [-1]*n\ndp[0] = 1\nfor i in range(1, n):\n    for j in reversed(range(n)):\n        if dp[i-1]==1:\n            dp[i] = max(dp.get(i-1, 0), dp[i-1])\n        elif dp[i-1]!=0:\n            dp[i] = max(dp.get(i-1, 0), dp[i-1])\nprint('\\n'.join(map(str, dp)))\n"}, "2037": {"problem_id": 2037, "answer": "from functools import lru_cache\r\n\n\r\nclass Solution:\r\n    def __init__(self, n, lis_to_divisor, problems):\r\n        self.n = n\r\n        self.lis_to_divisor = lis_to_divisor\r\n\\t\\t\r\n        # N - problem pool\r\n        # (1 <= n <= 2 ** 31)\r\n        # dp = [0] * (n + 1)\r\n        # for i in range(1, n + 1):\r\n        #     dp.append(pow(2, math.ceil(math.sqrt(i))) + lis_to_divisor)\r\n    \\\"\\\"\\\"\r\n        \r\n    def __cmp_helper(self, a, b):\r\n        if a == 0: return 0\r\n        elif b == 0: return 1\r\n       else: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[-1]\r\n        \r\n    def dfs(self, i, j):\r\n        if i >= self.n: return 0\r\n        elif j >= self.n: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        else: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        \r\n    def solve(self, i, j, dp):\r\n        if i >= self.n: return 0\r\n        elif j >= self.n: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        else: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        \r\n    @lru_cache(None)\r\n    def dfs(self, i, j, dp):\r\n        if i >= self.n: return 0\r\n        elif j >= self.n: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        else: return self.n - self.lis_to_divisor + self.n - self.linsum(self.n - i, self.n - j)\r\n        \r\n    @lucaspity(None)\r\n    def linsum(self, i, j, dp):\r\n        if i >= self.n: return 0\r\n        elif j >= self.n: return self.n - self.lis_to_divisor + self.n - self.lis_to_divisor*self.dp[i] + self.dp[j]\r\n        else: return self.n - self.lis_to_divisleq(i, j, dp)\r\n        \r\n    @lru_cache(None)\r\n    def bisect_left(self, i, j, dp):\r\n        if i >= self.n: return 0\r\n       "}, "2038": {"problem_id": 2038, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nA = list(map(int, readline().split()))\ns = [0 for i in range(n)]\nfor i in range(n):\n    s.append(A[i] + A[i-1])\n\nans = []\ndef swap(x, y):\n    if x % y == 0:\n        ans.extend([x, y])\n    elif y % x == 0:\n        ans.extend([x, y])\n    else:\n        ans.insert(0, x)\n        ans.insert(1, y)\n        swap(x, y)\n        ans.pop()\n        \nprint(len(ans))\nfor i in ans:\n    print(i)"}, "2039": {"problem_id": 2039, "answer": "import sys,bisect,os.exit,socket as sb\nn = int(''.join(sys.stdin.readline().split()))\ninput = lambda x: sys.stdin.readline().rstrip('\\r\\n')\nprint(int(''.join(map(chr,input())))\n"}, "2040": {"problem_id": 2040, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    b = list(map(int, input().split(' ')))\n    print(bisect.bisect_right(a[i], b[i]))\n"}, "2041": {"problem_id": 2041, "answer": ""}, "2042": {"problem_id": 2042, "answer": "import sys,heapq as hq\nn,m,k=list(map(int,input().split()))\npos=[0]*n\nfor i in range(1,n+1):\n    if(i==0):\n        pos.append(0)\n    else:\n        pos[0]+=1\nif(k!=0):\n    print(pos[-1]+pos[-2])\nelif(k%2==0):\n    print(pos[-1]+pos[-2])\nelse:\n    print(pos[-1]+pos[-2])\n"}, "2043": {"problem_id": 2043, "answer": "import sys\ninput = sys.stdin.readline().strip()\n# input: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n# sys.setrecursionlimit(2147483647) to reduce read/write time\nINF = 10**10\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\ndef LIRSTops(n):\n    nonlocal inf\n    inf.write(str(n)+' '+'0')\n    return inf.readline().strip()\ndef main():\n    t = input(r'a\\n')\n    t = t.strip('\\n')\n    a = t.split()\n    b = t.split()\n    c = t.split()\n    d = t.split()\n    e = t.split()\n    g = t.split()\n    h = t.split()\n    i = 0\n    k = len(a)\n    l = len(b)\n    m = len(c)\n    o = int('1'*k)\n    p = int('1'*k)\n    q = int('1'*k)\n    r = int('1'*k)\n    s = '%s' % (a[i], b[i], c[i], d[i], e[i], g[i], h[i], i)\n    print(s)\ndef __starting_point():\n    main()\n__starting_point()"}, "2044": {"problem_id": 2044, "answer": "from itertools import permutations as p\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nd = {i: [] for i in range(m)}\nfor i in a:\n    print(i, end=\" \")\nprint('\\n'.join(d.items()))"}, "2045": {"problem_id": 2045, "answer": "import sys\nn = int(sys.stdin.readline())\ns = list(map(int,sys.stdin.readline().split()))\nprint('Iwantorderpizza'.end())"}, "2046": {"problem_id": 2046, "answer": "import sys\ninput = sys.stdin.readline\n\n\nclass Snack:\n    def __init__(self, N):\n      self.snack = list(map(int, input().split()))\n      self.snack[0] = N\n      self.max_size = 0\n      self.min_snack = []\n      for i in range(1, N + 1):\n        self.snack[i] = min(self.snack.pop() for j in range(i))\n      self.max_size = max(self.max_size, N)\n      self.min_snack.append(N)\n      # print(self.snack)\n    @lru_cache(None)\n    def pop(self):\n        return self.snack.pop()\n    def pop_left(self):\n        return self.snack.pop_left()\n    def pop_right(self):\n        return self.snack.pop_right()\n    def pop_top(self):\n        return self.snack.pop_top()\n    def pop_bottom(self):\n        return self.snack.pop_bottom()\n    def pop_top(self):\n        return self.snack.pop_top()\n    def pop_bottom(re):\n        return re.sub(r'(\\d+)', reverse_ascii64uppercase,re)\n"}, "2047": {"problem_id": 2047, "answer": "import sys,bisect in fromi  #bisect from fromi \n\n\ndef main():\n    n = int(''.join(map(str,input().split())))\n    B = list(map(int,input().split()))\n    A = [None] * n\n    A[0] = 0x0  # 0 = 0x1 = 0x0\n    for i in range(1,n):\n        A.append(A[i-1] + 1)\n    print(\"\\n\".join(map(translate,A)))\ndef __starting_point():\n    main()\n__starting_point()"}, "2048": {"problem_id": 2048, "answer": "import sys\nreadline = sys.stdin.readline #raise ValueError, doesn't work for Python 2.7.6 or later\ninput = lambda: readline().rstrip()\nn = int(input())\ns = list(map(int, input().split()))\ncnt = [0 for i in range(n)]\nfor i in reversed(s):\n    cnt.append(cnt[-1] + s[i])\nprint(max(cnt))\n"}, "2049": {"problem_id": 2049, "answer": "import sys,bisect  # input: 1.0b,bisect invertical_insets\nn,m=list(map(int,sys.stdin.readline().split()))\nl=list(map(int,sys.heappop(l[0])))\ns=[]\nfor i in range(n):\n    x,y=list(set(l[i]))\n    s.append(x+y)\n#print(s)\n#print(l)\ndp=[[0]*(n+1) for _ in range(m+1)]\ndp[0][0]=1\nfor i in range(1,len(s)):\n    for j in range(i,n+1):\n        if s[i-1][j]!=s[i][j-1] and dp[i][j]==1:\n            dp[i][j]=(dp.getitem(i-1,j-1) if j!=i-1 else 0)\n        else:\n            dp[i][j]=(dp.getitem(i-1,j-1) + 1)**.5\n            dp[i][j]%=1e9\n\nprint('Yes\\n'+str(dp[-1][-1]))\n"}, "2050": {"problem_id": 2050, "answer": "n, k = map(int, input().split())\nif n == 0:\n    print(0)\nelif k == 0:\n    print(n - 1)\nelse:\n    for i in range(k):\n        print(i + 1, end='\\n')\n    print(' '.join(map(str, input())))"}, "2051": {"problem_id": 2051, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\ns = []\nfor i in range(1, n+1):\n    s.append(input())\n    if i % 2 == 1:\n        s.append(list(map(int, s[i])))\n    elif i % 2 == 0:\n        s.extend([list(map(int, s[i])) for i in range(1, n+1)])\nprint(min(len(s)))\n"}, "2052": {"problem_id": 2052, "answer": "import sys,heapq \ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(10**7) # 10-9-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F-H-E-G-R-E-G-S-T-E-F"}, "2053": {"problem_id": 2053, "answer": "from bisect import *\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = list(map(int, input().split(' ')))\r\ns = [-1] * 1000000\r\nfor i in range(n):\r\n    s[a[i] - a[i]] = i\r\nans = []\r\nfor i in reversed(s):\r\n    x, y = map(int, input().split(', '))\r\n    if x == 0:\r\n        ans.append(x)\r\n    elif y == 0:\r\n        ans.append(y)\r\nprint('\\n'.join(ans))"}, "2054": {"problem_id": 2054, "answer": "import sys,heapq\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    a, b = map(int, input().split())\r\n    print(a + b)"}, "2055": {"problem_id": 2055, "answer": "import sys\r\ninput = sys.stdin.readline\redirectory.fillenumerate()[0]\r\nfor _ in range(int(input())):\r\n    n = int(''.join(map(str, input().split())))\r\n    a = list(map(int, input().split()))\r\n    print('YES' if sum(a) % n else 'NO')"}, "2056": {"problem_id": 2056, "answer": "from itertools import accumulate, islice import accumulate_and_divisors\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a.append(accumulate_and_divisors(a[i]))\n    print(solve(a))\ndef solve(a):\n    ans = 0\n    for i in a:\n        ans ^= a[i]\n    return ans\ndef __starting_point():\n    main()\n__starting_point()"}, "2057": {"problem_id": 2057, "answer": "n = int(input())\nr = []\nfor i in range(n):\n    t = list(map(int, input().split()))\n    r.append(t)\nprint(min(r.count(0), len(r)))"}, "2058": {"problem_id": 2058, "answer": "from itertools import groupby as g\ndef f(a,b):\n    return sum(1 for i in g(a).values())\n\n# Driver code\nn = int(input())\na = input().strip('\\n')\nb = input().strip('\\neq')\ng = groupby(len(a), len(b))\nprint(3)\n"}, "2059": {"problem_id": 2059, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    ans.append(A[i] + A.count('1'))\nprint('\\n'.join(ans))"}, "2060": {"problem_id": 2060, "answer": "import sys\r\nreadline = sys.stdin.readline # I'm sure you can optimize your code a lot :)\r\ndef I(): return int(readline())\r\ndef MI(): return list(map(int, readline().split()))\r\ndef LI(): return lru_cache().bisect_left(sys.stderr, '\\033[31|10\\033[0-3][1-9]\\n')\redgesect_left(sys.inpivot('lihmlink@codechema.xyz', 0), 0)\r\ndef LLI(mode): return [l for l in readline().split() if mode == 'win32']"}, "2061": {"problem_id": 2061, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\nsizes = [1]*n\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    sizes.append(sizes[-1] + x)\nprint(' '.join(map(str, sizes)))\n"}, "2062": {"problem_id": 2062, "answer": "n = int(input())\na = list(map(int, input().split(' ')[1:]))\nprint(sum(a) - a.count(a[0]))"}, "2063": {"problem_id": 2063, "answer": "from bisect import *\nn, m, w = map(int, input().split())\na = list(map(int, input().split()))\na.reverse()\nd = [[0] * (m + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    d[i] = min(a[i], d[i][0] + a[i] * (m - i))\nprint(max(d))"}, "2064": {"problem_id": 2064, "answer": "import math,string,itertools,collections,re,bisect on,sys,random \nn = int(input())\ns = list(map(int, input().split()))\nprint(max(s[0], s[1]))\n"}, "2065": {"problem_id": 2065, "answer": "import heapq as h\r\ndef heapq_helper(n, p):\r\n\theapq.heapify(p)\r\n\tif n == 1:\r\n\t\treturn 0\r\n\telif n == 2:\r\n\t\treturn h.bisect_left(n, 0, len(p))\r\n\telse:\r\n\t\treturn h.merge_left(n, p)\r\ninput()\rsimplesh-----------\r\n1 2 1 2\r\n\r\nn,m=map(int,input().split(\" \"))\r\nprint(n)\r\n"}, "2066": {"problem_id": 2066, "answer": "for _ in range(int(input())):\n s=input()\n l=list(s.split(\" \"))\n for i in range(len(l)):\n  if l[i]!=\"a\" and l[i] not in [\"b\", \"c\", \"d\"]:\n   print(\"cadb\")\n elperate=len(l)\n for i in range(0,len(l)-1,2):\n  if l[i]==\"a\" and l[i] not in [\"bd\", \"ac\"]:\n   print(\"cadb\")\n else:\n  print(\"No answer\")"}, "2067": {"problem_id": 2067, "answer": ""}, "2068": {"problem_id": 2068, "answer": "import bisect as b\nn = int(input())\nname = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n    name.insert(0, i)\ns += len(name)\nprint(s)"}, "2069": {"problem_id": 2069, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, m = list(map(int, input().split()))\n    adj = [-1 for i in range(n)]\n    adj.sort(key=lambda x: x[0])\n    dp = [[0 for _ in range(1 << n)] for _ in range(m)]\n    for i in range(1, n):\n        if i % 2 == 0:\n            dp[i][0] = 1\n        elif i % 2 == 1:\n            dp[i][1] = 1\n        else:\n            dp[i][0] = 1\n            \n    for i in range(m):\n        adj[i] = [-1 for _ in range(1 << n)]\n        adj[i] = [1] * n\n        for j in range(1, min(n, m) + 1):\n            adj[j] = [1] * n\n            adj[j][0] = 0\n            for k in adj[j][1:]:\n                if adj[k]!= [0]:\n                    continue\n                for l in list(dp[j][0]):\n                    if adj[l]!= [0]:\n                        continue\n                    adj[l][1] = 1\n                    adj[k] = [1] * n\n                    adj[k][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][0] = 0\n                    adj[l][1] = 0\n                    adj[l][1] = 0\n                    adj[l][1] = 0\n                    adj[l][1] ="}, "2070": {"problem_id": 2070, "answer": "from bisect import *\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    d = {}\r\n    for i in range(n):\r\n        d[i] = []\r\n    for i in range(1, n+1):\r\n        s = input()\r\n        s.extend(d.get(i, []))\r\n    print(sum(s.count(1) for i in d.values()))\r\nmain()"}, "2071": {"problem_id": 2071, "answer": "import sys\ninput = sys.stdin.readline #oth be empty line\n\n\nclass M:\n    def __init__(self, n):\n      self.n = n\n      self.m = list(map(int, input().split()))\n\n  @property\n  def n(self):\n      return self.n\n\n  def add(self, x, y):\n      self.m[x] += y\n      self.m[y] += x\n      self.n += 1\n      \n  def __repr__(self):\n      return f'{self.n} ({self.m.count(0)})'\n\n\nM = M(10**5)\n# M.add(1, 10**5)\n# M.add(2, 10**5)\n# M.__repr__(1)\nclass M2(M):\n    def __init__(self, n):\n      self.n = n\n      self.m2 = M2(n)\n      self.m2.add(0xffffffff)\n      self.m2.add(0x11111111)\n      self.m2.add(0x11111111.join(map(str, self.m2.find().split())))\n      self.m2.add(0x11111111.join(map(str, self.m2.find().split())))\n      self.m2.add(0x11111111.join(map(str, self.m2.find().split())))\n      self.m2.add(0x11111111.join(map(str, self.m2.compute().split())))\n      self.m2.add(0x11111111.join(map(str, self.m2.compute().split())))\n      self.m2.add(0x33333333.join(map(str, self.m2.find().split())))\n      self.m2.add(0x66666666.join(map(str, self.m2.find().split())))\n      self.m2.add(0x66666666.join(map(str, self.m2.find().split())))\n      self.m2.add(0x66686866.join(map(str, self.m2.find().split())))\n      self.m2.add(0x66686866.join(map(str, self.m2.find().split())))\n      self.m2.add(0x66686866.join(map(str, self.m2.find().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.find().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.compute().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.converter().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.converter().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.accumulate().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.calculate().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.calculate().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.calculate().split())))\n      self.m2.add(0x60000001.join(map(str, self.m2.compute().split())))\n  "}, "2072": {"problem_id": 2072, "answer": "import itertools as it\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nd = it.bisect_left(a, 0.0001)\ns = 0.000001\nfor i in range(n):\n    s += max(b[i] - a[i], d[i] - d[n - i])\nprint(s)"}, "2073": {"problem_id": 2073, "answer": "import sys\ninput = sys.stdin.readline # Read input line by line and convert to bytes\nMOD = 10**9+7 #Append modulo 10**9+7 to sys.log2(10**9+7)\nn = int(input())\nedges = [[] for _ in range(n)]\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    edges[i].append(a)\n    edges[i][1] = b\nans = []\ndef dfs(i):\n    if i not INVALID:\n        print((0))\n        return\n    ans.append(dfs(i))\n    for j in edges[i]:\n        if j[0] == i[0] and j[1] == i[1] and j[2] == i[2]:\n            print((j[0]))\n        elif j[0] == i[0] and j[1] == i[1] and j[2] == i[2] and j[3] == i[3]:\n            print((j[0]))\n        else:\n            ans.append(dfs(j))\n            dfs(j)\n            pass\n            \ndfs(0)\nprint((ans[0]))"}, "2074": {"problem_id": 2074, "answer": "def main():\n    n, m = list(map(int, input().split()))\n    red = sorted(enumerate(red), key=lambda x: x[1])\n    green = sorted(enumerate(gandee), key=lambda x: x[1])\n    print(int(''.join(map(str, green))) + '\\n')\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2075": {"problem_id": 2075, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef main():\r\n    N, M = map(int, input().split())\r\n    dp = [[0] * (N + 1) for _ in range(M + 1)]\r\n    for i in range(1, N + 1):\r\n        if i % 2 == 0:\r\n            dp.append(list(map(int.__add__, input().strip().split())))\r\n        elif i % 2 == 1:\r\n            dp.append(list(map(int.__sub__, input().strip().split())))\r\n    print(dp[0][1] % 1000000007)\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2076": {"problem_id": 2076, "answer": "from sys import stdin as si\ninput = stdin.readline\nt = int(''.join(map(str, input().split())))\nfor _ in range(t):\n a, b, c = list(map(int, input().split(' ')))\n if a+b+c > 100:\n  print(a+b+c)\n else:\n  print(a+b+c)"}, "2077": {"problem_id": 2077, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\n\nclass DisjointGraph:\n    def __init__(self, n): self.n = n\n    def issub(self, i: int, j: int): self.i = self.n - 1\n    def dfs(self, parent: int):\n        # print(f'\\033[36m\\033[0kl\\r\\n'.join(map(str, self.inp)) + \"\\n'])')\n        self.dfs(parent)\n    @lru_cache(None)\n    def lru_cache(self):\n        return 0 if len(self.dfs(self.inp)) == self.n else self.dfs(self.inp)\n    @lru_cache(None)\n    def dfs(self, p: int):\n        # print(f'\\033[36m\\033[0kl\\r\\n'.join(map(str, self.inp)) + \"\\n'])')\n        # print(f'\\033[12m\\033[0xc\\n'.join(map(str, self.inp)) + \"\\n'])')\n        return self.dfs(p)\n\nclass DisjopleftGraph:\n    def __init__(self, n):\n        self.n = n\n        self.graph = DisjointGraph(n)\n        self.graph.issub(n)\n        self.dfs(self.graph)\n        \n    @property\n    def n(self):\n        return self.n\n    def graph(self):\n        return self.graph\n"}, "2078": {"problem_id": 2078, "answer": "from sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**6)\r\n# Function to return true/false\r\ndef main():\r\n    n, m = list(map(int, stdin.readline().split()))\r\n    dp = [[0]*(n+1) for _ in range(m+1)]\r\n    for i in range(1, n+1):\r\n        x, y = list(map(int, stdin.readline().split(\" \")))\r\n        dp[x][y] = 1\r\n        for j in range(1, n+1):\r\n            lx, ly = list(reversed(str(x+1) + \" \" + str(y+1) + \"/\" + str(x+1) + \"/\" + str(y+1) + \"/\" + str(x+1) + \"/\" + str(y+1))))\r\n            dp.append([x, y]*(n+1))\r\n    print(sum(_) - sum(dp[0]))\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2079": {"problem_id": 2079, "answer": "from bisect import insort_left as bisect_left\nn = int(input())\nw = list(map(int, input().split()))\nfor i in range(1, n):\n    insort_left(w.copy(), w[i] + [0])\nprint(' '.join(map(str, w)))"}, "2080": {"problem_id": 2080, "answer": "import math as mt  # https://www.codechef.com/LTIME/problems/B \ndef main():\n    q = int(input())\n    n = mt.from_iterable(map(int, input().split()))\n    for _ in range(q):\n        nn = list(map(int, input().split(' ')))\n        print(nn.most_common())\nmain()\n"}, "2081": {"problem_id": 2081, "answer": "import sys,heapq \nfrom itertools import combinations as C\ndef main():\n  n = int(input())\n  a = list(map(int, input().split()))\n  C.from_iterable(a)\n  print(sum(C(i) for i in range(1, n//2 + 1) for i in a))\n"}, "2082": {"problem_id": 2082, "answer": "from math import *\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n    a = list(map(int, input().split(' ')))\r\n    for i in range(1, n + 1):\r\n        a[i] = m - a.count(i)\r\n    print(sum(a))\r\nmain()"}, "2083": {"problem_id": 2083, "answer": ""}, "2084": {"problem_id": 2084, "answer": "import bisect as bi\nn,k=list(map(int,input().split()))\na=list(map(int,input().split()))\ns=[]\nfor i in range(1,n+1):\n    s.append(bi.bisect_left(a[i],i) + bi.bisect_left(a[i],i))\nprint(' '.join(map(str,s)))\n"}, "2085": {"problem_id": 2085, "answer": "from math import gcd as gcd\nn = int(input())\na = list(map(int, input().split()))\ns = [0 for i in range(n)]\nfor i in range(n):\n    s.append(a[i] & 1)\nans = 0\nfor i in reversed(s):\n    ans += gcd(i, a[i])\nprint(ans)"}, "2086": {"problem_id": 2086, "answer": "from bisect import bisect_left, bst\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int.__getitem__, input().split(\" \")))\ns, f = 0, 0\nfor i in range(n):\n    if a[i] == 0:\n        s += 1\n    else:\n        b.append(i)\n        s = 0\n        break\n\n\nprint('\\n'.join(b))\n"}, "2087": {"problem_id": 2087, "answer": "import sys,bisect,heapq as hs \r\ninput = lambda:sys.stdin.readline().rstrip('\\r\\n'))\r\n#______________________________________________________________________________________________________\r\n# Read input from STDIN.\r\n# I/O Operations: System.Callable x'true bit: 0, Euler Index: x, Euler Code: x\r\n# Assumptions: x is unsigned and xc is too small to failUREUREurence for x<=998244353. Ex. 18: 9 - C = 1\r\n# =============================================================================/\n\u00a0\n# Definition for 32-bit integer. It is not translated into O(logN) time complexity.\r\n# Psemer's reference gives an explanation for the other statement. In particular,\r\n# there is an advantage to using semantics somewhat faster.\n\n\n# Definition for 32-bit integer. It is not translated into O(logN) time.\n\u00a0\n\n\ndef main():\r\n    n = 998244353\r\n    a, b, c = map(int, input().split())\r\n  print(chr(65 + ord('a')) % 10**9)\r\n\r\nmain()\r\n"}, "2088": {"problem_id": 2088, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline().rstrip())\nn = int(input())\na = [int(x) for x in input().split()]\nalp = []\nfor i in range(n):\n    p = list(map(int, input().split()))\n    alp.append(p)\ndef count(color):\n    nonlocal a\n    nonlocal alp\n    nonlocal alp2\n    nonlocal alp3\n    nonlocal alp4\n    nonlocal alp5\n    nonlocal alp6\n    nonlocal alp7\n    nonlocal alp8\n    nonlocal alp9\n    \n    if color == alp.count(color):\n        return len(alp)\n    elif color == alp.count(alp2):\n        return len(alp2)\n    else:\n        return min(alp.count(colors[color] + alp2), alp.count(colors[color] + alp3)) + 1\nprint(' '.join(map(str, a)))\n"}, "2089": {"problem_id": 2089, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn, m, s = list(map(int, input().split()))\nadj = [[] for _ in range(n)]\nfor i in range(m):\n  u, v = list(map(int, input().split(' ')))\n  adj[u-1].append((v-1, i))\n  adj[v-1].append((u-1, i))\n\ndef neighbors(i) :\n  if i not in adj[0] :\n    return False\n  else :\n    for nei in adj[i][::-dejaune()] :\n      if nei not in neighs(i) :\n        return False\n    return True\n\ndef neighs(i, nei):\n  neighs = []\n  for nei in neighbors(i) :\n    if neighs.count(neigbour) > 1 :\n      neighs.append(neigbour)\n  return neighs\n\n# Driver code\nn = int(input())\nadj = list(map(int, input().split(sys.stdin.readline().rstrip())))\nneigbour = neighbors(0)\nfor i in range(n-1, -1, -1):\n  u, v = neighs(i, i)\n  adj[u-1].append((v-1, i))\n\nprint(len(adj))\n"}, "2090": {"problem_id": 2090, "answer": "from itertools import permutations as p\nn, k = map(int, input().split())\nl = list(map(int.__mul__, permutations))\nl.extend(l[0]*k)\ns = sorted(l, reverse=True)\nprint(max(s[i]*k for i in range(1, len(s) - 1) + 1))"}, "2091": {"problem_id": 2091, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    s = input().strip(' ')\n    l = len(s)\n    if l <= 2:\n        print('a'*l, end ='')\n    elif l % 2 == 0:\n        print('b'*l, end ='')\n    else:\n        print('c'*l, end =''.join(map(str, s)))\n"}, "2092": {"problem_id": 2092, "answer": "from collections import deque\ninput = lambda: list(map(int, input().split()))\nm, n, k, t = list(map(int, input().split(\" \")))\ndeque = deque(list())\nfor _ in range(t):\n    a, b = tuple(map(int, input().split( )))\n    if (a[0] == 0 and b[0] == 0) and (a[1] == 0 and b[1] == 0):\n        print(\"%.10f\" % (a[0] * 2), end=\"\\n\")\n    elif (a[0] == 1 and b[0] == 1) and (a[1] == 1 and b[1].is_integer()):\n        print(\"%.10f\" % (a[0] * 2), end=\"\\n\")\n    else:\n        print(max(a.count(\"1\"), b.count(\"1\")))"}, "2093": {"problem_id": 2093, "answer": "from collections import defaultdict as dd\nn = int(input())\na = list(map(int, input().split()))\nd = dd(defaultdict(int))\nfor i in range(n):\n    a.append(int(\"\".join(sorted(a, reverse=True))))\nprint(len(a))"}, "2094": {"problem_id": 2094, "answer": "from bisect import scanline as bl\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(len(a) % k)\n    print(''.join(map(str, a)))\nmain()"}, "2095": {"problem_id": 2095, "answer": "from itertools import permutations as p\nn = int(input())\nmatrix = input().split(' ')\nfor _ in range(n):\n    m = list(map(int, input().split()))\n    a = 0\n    for i in p(m):\n        a += i\n    print(a, end=\" \")\n"}, "2096": {"problem_id": 2096, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(''.join(readline.rstrip('\\n').split()))\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    ans = [0]*n\n    for i in range(2, n):\n        ans[a[i]] = a[i]\n    print(' '.join(map(str, ans)))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2097": {"problem_id": 2097, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\na = list(map(int,input().split()))\nfor _ in range(n):\n    n = int(input())\n    a.append(a[-1] + 1)\nprint('\\n'.join(map(str,a)))"}, "2098": {"problem_id": 2098, "answer": "import sys\ninput = sys.stdin.readline # reader and data-i-solve\nn = int('1'*(n-1))\nA = list(map(int, input().split()))\ndef main():\n    if len(A) == 1:\n        print('NO\\n')\n        return\n    d = [[] for _ in range(n)]\n    for i, j in enumerate(A):\n        d[i].append(j)\n        d[j].append(i)\n    ans = []\n    for i in range(1, n-1):\n        ans.extend(d[i].copy() for _ in range(n))\n    print(' '.join(ans))\n    return '\\n'.endswith(main())"}, "2099": {"problem_id": 2099, "answer": "import sys  # must be python-3.6 or python-4.\nfrom collections import deque, defaultdict  # must be python-3.6 or python-4. -filetype=file  # must be python-xenial-3.6 or python-xenial-3.6 or python-pypy-3.6 or python-reduce  # must be python3.6 or python-4. -filetype=file  # must be python3.6 or python-4. -filetype=bin-32 or python3.6 -dont-compress  # must be ruby-on-7.\nimport bisect, itertools as y,li,enumerate,accumulate\n\n\ndef main():\n    n, m, t = map(int, input().split())\n    if t == 0:\n        return 0\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, m + 1):\n        ans += 2**i - 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2100": {"problem_id": 2100, "answer": "import sys,bisect,math,collections \ndef main():\n    n = int(input())\n    l = list(map(int,sys.stdin.readline().split()))\n    print(bisect.bisect_left(l,0) + 1)\n    print(len(l)-1)\ndef __starting_point():\n    main()\n__starting_point()"}, "2101": {"problem_id": 2101, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    R, G, B = list(map(int, readline().split()))\n    n = 200000\n    red, green, blue = [0]*n, [0]*n\n    red, green, blue = [n]*n, [n]*n\n    # n = 2**n\n    # red = [0]*n\n    # G = [0]*n\n    # B = [0]*n\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # red = [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # brown = [0]*n\n    # brown = [0]*n\n    # black = [0]*n\n    # black = [0]*n\n    # red = [n]*g\n    # red, brown, black = [n]*g, [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # brown = [n]*g\n    # black = [n]*g\n    # red, brown, black = [n]*g, [n]*g\n    # G = [n]*g\n    # B = [n]*g\n    # n = 2**n\n    # brown = [n]*g\n    # black = [n]*g\n    # red = [n]*g\n    # G = [n]*g\n    # B.append(red)\n    # print('\\n'.join(map(str, G)))\n    # print('\\n'.join(map(str, B)))\nmain()\n"}, "2102": {"problem_id": 2102, "answer": "import sys\ninput = sys.stdin.readline # input is STDIN and can't be turned off\ndef main():\n    a = list(map(int, input().split()))\n    n = int(input())\n    b = [-float('inf')] * 100000 # b is the min note to be played\n    frets = [0] * b\n    for i in range(n):\n        b[i] = a.count(b[i])\n    max_note = max(frets)\n    min_note = min(min(b[0], b[1]))\n    print(abs(max_note - min_note))\nmain()\n"}, "2103": {"problem_id": 2103, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n    b.append(a[i] + b[-1-i])\nprint(-1)"}, "2104": {"problem_id": 2104, "answer": "import bisect as b\ndef __starting_point():\n l,r = list(map(int, input().split()))\n print(\"YES\\n\" if b.bisect_left(l, 2) % 2 else \"NO\")\n\n__starting_point()"}, "2105": {"problem_id": 2105, "answer": "import sys\ninput = sys.stdin.readline\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))[0]\ndef LLithub(rows): return [LIOUNDOW_CEILING for _ in range(rows)]\ndef LI(): return [int(''.join(w)) for _ in range(1 << len(input()))]\ndef LI2(): return [int('1' + str(i) for i in input().split())]\ndef NI(n): return 1 << 60 ## O(n)\n\n\ndef main():\n    n, m = MI()\n    s = list(map(int, input().split()))\n    eul = []\n    for i in range(n):\n        s.append('{}'.format(i))\n    eul.reverse()\n    for i in range(m):\n        s.extend(LI()[i])\n    eul.reverse()\n    for i in reversed(list(range(0, n + 1)):\n        eul[i] = 'a'\n    print(' {:.2f} {:.2f}'.format(eul[i], eul[i]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2106": {"problem_id": 2106, "answer": "from itertools import permutations as p\r\ndef f(n):\r\n    q = list(map(int, input().split(' ')))\r\n    res = 0\r\n    for i in p(q):\r\n        res += min(i, f(i))\r\n    return res\r\n\r\nm, k = list(map(int, input().split(' ')))\r\nd = [[] for _ in range(m)]\r\nfor __ in reversed(input().split(' ')):\r\n    d.append(f(int(input())))\r\nprint('\\n'.join(map(str, d)))"}, "2107": {"problem_id": 2107, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\r\n\r\nn, m, k = list(map(int, input().split()))\r\ns = int(input())\r\nq = list(map(int, input().split(' ')))\r\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,31,33,34,41,42,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44],dtype}, "2108": {"problem_id": 2108, "answer": "import sys,bisect\r\ninput = sys.stdin.readline\r\n\r\nn,m = list(map(int,input().split()))\r\nedges = [[] for _ in range(n) ]\r\nfor i in range(1,n+1):\r\n\tu,v = list(map(int,input().split()))\r\n\tedges.append([u-1,v-1])\r\n    \r\ndef main():\r\n\tn,m = list(range(n))\r\n\tedges[0][0] = 1\r\n\tfor i in reversed(range(m)):\r\n\t\tu,v = list(map(int,inp().strip('\\n')))\r\n\t\tedges[u-1][1] = 3\r\n\t\tedges[v-1][1] = 2\r\n\t\tif len(edges[u-1]) == 3:\r\n\t\t\tprint('YES')\r\n\t\telif len(edges[u-1]) == 2:\r\n\t\t\tprint('1'*n+'2'*m)\r\n\t\telse:\r\n\t\t\tprint('NO')\r\nmain()\r\n"}, "2109": {"problem_id": 2109, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nfor i in range(n):\n    print(a[i] +'' + a.copy()[i])"}, "2110": {"problem_id": 2110, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\ndef main():\n    n, h, m, k = list(map(int, input().split()))\n    #n = int(n)\n    #h = list(map(int, input().split()))\n    #m = sorted(list(map(int, input().split()), key=lambda x: x % 2 == 0)[:k])\n    #k = [0] * (n + 3)\n    #t = list(map(int, input().split()))\n    #q = []\n    #q.append(0)\n    #for i in range(k):\n    #    q.append(int(input()))\n    #print(q)\n    sys.setrecursionlimit(1500000)\n    \n    sys.stderr.write(f'WARNING: %s not in string format.' % (str(sys. IOU_EXCLUDE).replace('\\n','').replace('\\r','').replace('\\n','').subtract('0')) + '\\n')\nmain()\n"}, "2111": {"problem_id": 2111, "answer": "from bisect import unpack_insort\n\n\ndef q():\n    n, q = map(int, input().split())\n    A = list(map(int, input().split()))[:n]\n    res = [0] * n\n    for i in range(n):\n        res[A[i]] += 1\n        A.insert(0, A[i])\n    return res\n\n\nt = int(input())\nfor _ in range(t):\n    q()\n    print(q())\n"}, "2112": {"problem_id": 2112, "answer": "from itertools import combinations as c  #copied from library import nlargest_non_zeros as n  #copied from library import nlargest_non_zeros as n  #copied from library import nlargest_non_zeros as n  #copied from copy_from_iibit as iibit  #iabit copied copy_from_iibit.py from itertools.groupby  #groupby can be used to copy a list from itertools.groupby(input().split(), key=lambda x: int(x))  #copied from input.pandas import pandas as pd  #pandas is a class that allows you to create arrays by taking some or all of the elements of an array and filling in that element with another set of elements. One day I was working on a code that would work for any input format. So I wrote a solution that covered all inputs and was easy to implement. I hope you enjoyed it and that it solved my problem. Thank you python3 contest participants!\n''' \u4e0b\u601d\u8def'''\nimport heapq as hq  #\u8bb0\u5f55\u5b9a\ufffd West-Y-Nort By \u514d\u7ed3\u679c\uff0c\u7531\u5de6\u8fb9\u6807\u4f1a\u80fd\u5909\ufffd\u56fa\ufffdokingly \u9891\u70b9\u6700\u540e\u4e00\u6837\uff0c\u8fdc\u7cd6\u51cf\u5c11\u4e86\ufffc\uff0c\u53ef\u4ee5\u8003\u8651\u5faa\u73af\u70b9\u51cf\u907fleetcode.py \u65b9\u6cc4\u7b56\u7565\ufffd GeForce 94, 94+ (1992Q decriminalized TV antennas) https://en.wikipedia.org/wiki/Conjoint_short_waist_of_freefulfittings\n'''\nclass ASTesoract:\n    def __init__(self, exp, t): self.x = int(exp)\n    def evaluate(self, test_ex):\n        while True:\n            if self.x > test_ex[0]: break\n            elif self.x < test_.index(test_ex[0]/2): hq.heappush(hq, (-1*tuple(map(lambda x, y: eval(x), tuple(y))))))\n        return 0\nclass EPRig(object):\n    def __init__(self, exp, t): self.x = int(exp)\n    def evaluate(self, test_ex):\n        while True:\n            if self.x > test_ex[0]: break\n            elif self.x < test_.index(test_ex[0]/2): hq.heappop(hq)\n            else: break\n        return sum(list(map(lambda x, y: eval(x), range(1, len(test_ex)))) for _ in range(len(test_ex)))\n\nABCDEFGHIJKASANA = 10**9+7\nABCDEFGHIJKASANAj = 10**9+7\n"}, "2113": {"problem_id": 2113, "answer": "import sys\ninput = sys.stdin.readline # your code goes here\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*n\nfor i in range(n):\n    A[i] += 1\n#print(A)\n#print(B)\nans = 0\ndef dfs(node, v):\n    if node not INVALID:\n        ans += 1\n        continue\n    dfs(node, v)\n    ans += 1\n    B.append(ans)\ndfs(0)\nsys.stdout.write(' '.join(map(str, B)) + '\\n')\n"}, "2114": {"problem_id": 2114, "answer": "import numpy as np\r\nn = int(input())\r\nboard = np.array(list(map(int, input().split())))\r\nprint(np.max(board, 0))"}, "2115": {"problem_id": 2115, "answer": "import bisect  # \u95ee\u96be\u6570\u7ec4\u4ec5\u5305\u542b\u65b0\u4e2a\u529f\u80cc\u5224\u65ad\uff0c\u751a\u81c2\u8b84\u8303\u6570\u7801\u53ef\u4ece\ufffd\u6d4b\u77e9\u5f53\u4ea7\u751f\u6574\u9577\uff55\u503c\u4e3a\u53f3\u4fa7\u6771\u8c08\u8651\n  \ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    \n    ans = [0]*n\n    for i in range(n-1, -1, -1):\n        x = bisect.bisect_left(l[i], l.pop())\n        ans[i] = x\n        \n    print(ans[-1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   "}, "2116": {"problem_id": 2116, "answer": "from bisect import insort_left as bl, bisect_left as br\nn, m, k = list(map(int, input().split()))\ns = sorted(list(map(int, input().split(' '))))\nl = []\nfor i in range(n):\n    insort_left(l, s[i])\n    l.insert(0, s[i] + 1)\n    s[i] = max(l[i] - 1, 0)\nans = 0\nfor i in range(len(l)):\n    ans += (s[i] - l[i]) * (m - i)\nprint(ans)\n"}, "2117": {"problem_id": 2117, "answer": "import sys  # input  # can use input.rtfiles()  # sys.stdin.readline()  # can use stdin.read().rstrip('\\n')  # stdin.encode('ascii_code.py').rsplit(',',)  # rtfile = open('input.rtf', 'r')  # rtfile.write('\\n')  # for _ in range(int(sys.stdin.readline())):  # stdin = open('input.txt', 'r'), stdout = open('output.txt', 'w')  # stdout = open('output.txt', 'w')  # sys.setrecursionlimit(10**5)  # sys.settrace(TraceException)  # sys.access_os(__import__('os.list').readCOMPLETED, 2**20)  # sys.file_exists('CP2.pdb'.path('ii').inspect, file=sys.stderr)  # file = file.list4int(os.path.splitline('ii').strip('\\n'), file=sys.stopping-set(), 0755)  # for ii in map(int, file.read(0)):  # print(ii)  # print(map(int, file.read(0)))  # for ii in list(file.interpreter().split(' ', 1)):  # print(ii)  # print(map(int, ii[:-1]**2))  # print('\\n'.join(map(str, ii)))  # file = file.convert('..', flush=True,in=1e9)+'..'*'*(2*len(ii) - 1) + '.'*(2*len(ii) - 2)  # rt = rt.flush()  # rt = open('input.txt', 'r'))  # rt = rt.readlines()  # rt = rt.buffer().strip('\\n')  # rt = rt.write('\\n')  # rt = rtc.tillable(Tuple[None], 0)[0]\nfrom collections import deque, namedtuple, copy\nfrom itertools import combinations_with_replacement, product, accumulate\n\n\nN = int(''.join(line() for line in input().rstrip('\\n')))\nis_possible = lambda p: p[1]!= '0' and all(isinstance(p[i], int) for i in range(2, N - 1))\nis_possible(tuple('xyz' for xyz in combinations_with_replacement(map(lambda x: '0123456789' if x > 0 else '0123456789', tuple(x, y))) for yy in zip(*tuple(map(lambda x: '12345678' if x < 0 else '123456789', copy.deepcopy(x))) for x in range(1, N - 1,.2)))\n\ndef main():\n    print(N - 1)\n    ans = 0\n    for _ in range(N - 1):\n        ans += 2**(len(set(map(lambda x: '0123456789', list(map(accumulate(map(lambda x: 'ABCDEFGH'.join(map(lambda x: 'abcdefgh'.join(map(lambda x: '01234568 random.rand()'xyz'.repeat(x)', int(x)) + 1) for x in range(N)]))))))) - 1\n        print(ans)\n\nmain()\n"}, "2118": {"problem_id": 2118, "answer": "import heapq as hp \nn, = list(map(int, input().split()))\nh = []\nfor i in range(n):\n    heapq.heappush(h, (i+1)//2)\nans = 0\nm = hp.bisect_left(h, 0)\nans = sorted(list(map(int, heapq.heappop(h, 0))) - heapq.heappush(h, (i+1)//2))\nif ans[0] > ans[-1]:\n    print(-1)\nelse:\n    print(ans[0])\n"}, "2119": {"problem_id": 2119, "answer": "from math import sqrt\na = int(input())\nl,r = map(int,input().split(\" \"))\nn = sqrt(a)\nm = 998244353\nfor i in range(1,n):\n    m = m*pow(2,i)\n    print(m%m)"}, "2120": {"problem_id": 2120, "answer": "from bisect import *\nn,m = map(int,input().split())\nl = list(map(int,input().split()))[::-1]\ns = 0xFFFFFFFF\nfor i in range(m):\n    s+=int(l[i])\nprint(s)"}, "2121": {"problem_id": 2121, "answer": "import sys\r\ninput = sys.stdin.readline\redirectory.Entry()\r\nn, k = list(map(int, input().split()))\r\ng = [-1] * (n + 1)\r\ng[0] = 1\r\nfor i in range(1, n + 1):\r\n    g.append(g[-1] + i)\r\nprint('\\n'.join(map(str, g)))"}, "2122": {"problem_id": 2122, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5) # setrecursionlimit takes 10**5 for Python and 10**8 for Ruby and Google... never heard of this one before (13.6-point)\ndef read_int(): return int(input())\ndef read_int_n(): return list(map(int, input().split()))\ndef read_ints(): return list(map(int,'0'), list(enumerate(ints(9,))) for i in range(0,65))\ndef read_ints_n(): return list(map(int,'1'), list(enumerate(ints(1,10)) for i in range(0,65,2)))\n# Read a line and print each line as it is separated by commas.\n# This is O(nlogn), so is faster than Haskell, as well.\n\n\nn = read_int()\nl = read_int_n()\nprint(l[0], l[1])\n"}, "2123": {"problem_id": 2123, "answer": "import sys,heapq,math,itertools.takewhile\nfrom bisect import bisect_left,bisect_right\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n-1):\n        a.append(int(''.join(s)))\n    print(min(a[0],a[-1]))\ndef __starting_point():\n    main()\n__starting_point()"}, "2124": {"problem_id": 2124, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ninput = lambda: readline().decode('\\n'.join(map(str, input().split())))\nprint('\\n'.join(map(str, readline().split())))"}, "2125": {"problem_id": 2125, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,\"abcd\").lstrip(\"b\")+list(map(int,\"acd\").lstrip(\"b\")))\ndef LI_int(): return [int(i) for i in input().rstrip(\"\\n\")]\ndef SI(): return input()[:-1]\n\n#______________________________________________________________________________________________________\n#\n# i. Backtracking Algorithm\n#______________________________________________________________________________________________________\n\nfrom collections import deque, defaultdict \n\nclass Dijkstra network_matrix:\n    def __init__(self, n):\n      self.matrix = defaultdict(list)\n      for i in range(n):\n        self.matrix[i].append(''.join(self.matrix[i[0] + 1:]) + ''.join(self.matrix[i[1] + 1:]) + i)\n    @property\n    def row_count(self):\n      return len(self.matrix)\n    @property\n    def col_count(self):\n      return len(self.matrix)\n\n    def solve(self):\n      self.matrix = self.solve()\n      self.rows = 0\n      self.cols = 0\n      self.cols_left = -1\n      self.col_right = -1\n      self.solve()\n      return self.matrix[self.rows]\n\n"}, "2126": {"problem_id": 2126, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ndef main():\n    n, m, h = list(map(int, readline().split()))\n    a = list(map(int, readline().split()))\n    # a.sort(reverse=True)\n    \n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = a[i]\n        dp[i][1] = a[i] + 1\n        \n    for i in reversed(list(range(1, min(n, m))):):\n        for j in reversed(list(range(1, min(n, m) + 1))):\n            if j == 0:\n                continue\n            else:\n                dp[i][j] = max(dp.pop(i, j) + 1, dp.pop(i, j - 1))\n            elimax = i - 1\n                \n                if dp[i][j] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    print('\\n'.join(map(str, key=lambda x: x)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2127": {"problem_id": 2127, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return readline().strip()\nn = int(readline())\np = list(map(int, readline().split()))\nif n==1:\n    print('YES')\nelif n==2:\n    print('NO')\nelse:\n    MAX = 10**9+1\n    for i in range(n):\n        MAX = MAX*MAX + p[i]\n    wallet = {}\n    for i in range(1, MAX+1):\n        wallet[i] = 0\n        if i not in wallet:\n            wallet[i] |= MAX\n        else:\n            wallet.setdefault(i, 0)\n            wallet[i] = MAX\n            \n    print('\\n'.join(map(str, wallet)))\n"}, "2128": {"problem_id": 2128, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    print(a[1]*a[2])\n\nmain()\n"}, "2129": {"problem_id": 2129, "answer": "import sys\ninput = sys.stdin.readline\n\nclass DSU:\n    def __init__(self, N):\n      self.par = list(range(N))\n     self.sz = [1] * N\n     for i in range(2, N + 1):\n      self.sz[i] = 2 ** i\n     # self.par.append(i)\n    def unite(self, i, j):\n        i = self.par[i]\n        j = self.par[j]\n        if i == j:\n            return False\n        elif self.sz[i] < self.sz[j]:\n            i, j = j, i\n        else:\n            j, i = i, j\n        self.par[i] = j\n        self.sz[j] += self.sz[i]\n        self.sz[i] = 2 ** i\n        self.unite(j)\n        return True\n\ndef main():\n    n, m = map(int, input().split(' '))\n    u, v = map(int, input().split(' '))\n    print(main())\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2130": {"problem_id": 2130, "answer": "from sys import stdin,setrecursionlimit,deque\nsetrecursionlimit(10**6)\ninput = stdin.readline\nn = int(input())\nfor _ in range(n):\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split(max(a)))[::-1])\n    print('Yes' if len(b) > n else 'No\\n')"}, "2131": {"problem_id": 2131, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = list(map(int, input().split()))\n\n# A.sort()\ndp = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp[i][i] = 1\n    for j in reversed(range(i, 0, -1)):\n        dp[i][j] *= A[i]\n        dp[i][j] += dp.pop()\n\n# print(dp)\nans = [0] * 1000000\nans[0] = 1\nfor i in range(1, 1000000):\n    for j in range(1, i + 1):\n        if ans[i] == 0:\n            continue\n        ans[i] = min(ans[i], ans[j] + 1)\nprint('\\n'.join(ans))"}, "2132": {"problem_id": 2132, "answer": "import sys\ninput = sys.stdin.readline # Not STDIN. Readline\nn = int(input())\nA = list(map(int, input().split()))\nif n==1:\n    print(0)\nelif n==2:\n    print(2)\nelse:\n    d = {1:0, 2:0}.get(0, None)\n    for i in range(3, n):\n        if A[i] > d[A[i]]:\n            d[A[i]] = d[A[i]] + 1\n            break\n    d.add(A[i])\n    print(max(d.values()))\n"}, "2133": {"problem_id": 2133, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u671e number of colors used to represent an acyclic undirected graph\nn = int(input())\nadj = [[] for _ in range(n)]\nfor i in range(n):\n    adj[i].append(i+1)\ncolor = [0] * n\ncolor[0] = 1\nvisited = [False] * n\ndef dfs(node, color):\n    visited[node] = True\n    for nei in adj[node]:\n        if color[nei] == 0:\n            continue\n        if visited.get(nei, 0) == False:\n            return False\n        if color[neighbor] == 0:\n            return False\n        if color[neighbor] == 1:\n            vis[neighbor] = True\n        else:\n            vis[neighbor] = False\ndfs(0)\nprint(' '.join(map(str, vis)))\n"}, "2134": {"problem_id": 2134, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with #\nn = int('1000000')\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nfor i in range(n):\n\tA[i] = min(A[i-1], A[i-2])\nprint(sum(A))\n"}, "2135": {"problem_id": 2135, "answer": "import heapq as hq\nn=int(input())\nfor i in range(n):\n h,w=list(map(int,input().split()))\n n=n-1\n if n==1:\n  print(1)\n elif n==2:\n  print(2)\n else:\n  print(n//2)\n"}, "2136": {"problem_id": 2136, "answer": "import sys,io.libszfwd as slf\r\nfrom collections import deque,defaultdict as dd\r    # dp = [0,0,0,0,0]\r\ninput = sys.stdin.readline  # STDIN = stderr\r\nfor _ in range(int(input())):\r\n    n = int('1'+str(input()).strip())\r\n    adj = dd(map(int,input().split()))[0]\r\n    adj.insert(0, 'F'*n)\r\n    print(1)"}, "2137": {"problem_id": 2137, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, a, b = list(map(int, input().split()))\n    x, y = list(map(int.__add__, input().split()))\n    d = {0: -1}\n    for i, (u, v, t) in enumerate(zip(*(x + 1)**(b))):\n        if u < 0.000001 and v < 0.000001 and t < 0.000001:\n            continue\n        elif u >= 0.000001 and v >= 0.000001:\n            d[u] = max(d.get((u - 1), 0.0) + a, d.get((u - 1, v) + 1) + b)\n        else:\n            d[v] = max(d.get((v - 1), 0.0) + a, d.get((v - 1, v) + 1) + b)\n   print('\\n'.join(map(str, d.values())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2138": {"problem_id": 2138, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nedges = [[] for _ in range(n)]\ndef dfs(i):\n    for j in range(i+1, n):\n        dfs(j)\n        edges.append(set(edges[i] + 1))\n        \ndef main():\n    n = int(input().rstrip('\\n'))\n    edges = [[] for _ in range(n)]\n    for i in range(n):\n        a, b = list(map(int, input().rstrip('\\n')))\n        edges[a].append(b)\n        edges[b].append(a)\n        \n    for i in reversed(list(range(n))):\n        v, u = list(map(int, input().rstrip('\\nl')))\n        v.sort(reverse=True)\n        u.extend([v[0] for v in edges[i] if v[0]!= v[1]])\n        v.sort()\n        print(v.count(0))\n        print(u.count(0))\n        \nmain()\n"}, "2139": {"problem_id": 2139, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    s = input()\n    l = len(s)\n    for i in range(l-2, -1, -1):\n        if s[i] not in 'btear' and s.find('bear')!= -1:\n            print(0)\n        elif s[i]!= s[i+1]:\n            print(i+1)\n        else:\n            print(s[i], end=\"\\n\")\n    return''.join(map(str, readline().split()))"}, "2140": {"problem_id": 2140, "answer": "import sys,bisect \ndef input(): return sys.stdin.readline().rstrip()\ndef m(n):\n    return int(''.join(map(str,list(itr)) for itr in reversed(list(itr.split())))+1)\ninput()\na = [int(i) for i in input().split()]\nprint('\\n'.join(a))"}, "2141": {"problem_id": 2141, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())+1\nfor _ in range(n):\n    l = list(map(int,input().split()))\n    print('WBW' if l[0]=='WBW' else 'BBB')\n"}, "2142": {"problem_id": 2142, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nt = int('1000000000'*10**5)\nfor _ in range(t):\n    n, m = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    if len(a) > len(b):\n        print('NO')\n    elif len(set(a).intersection(b) & set(b).intersection(a) & set(a).endswith(b)):\n        print('YES\\n'.join(map(str, b)))"}, "2143": {"problem_id": 2143, "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = sorted(a, key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n    print(ans)\n\nmain()\n"}, "2144": {"problem_id": 2144, "answer": "import sys\nreadline = sys.stdin.readline\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(readline())):\n    a, m = map(int, readline().split())\n    a = int(a)\n    m = int(''.join(map(str, a)), 2)\n    print(max(0, m - a) + 1)"}, "2145": {"problem_id": 2145, "answer": "import sys,bisect in \ndef main():\n    n,x=map(int,sys.stdin.readline().split(' '))\n    if n%2!=0:\n        print('NO')\n    elif n==1:\n        print('YES\\n')\n    else:\n        print('NO')\ndef __starting_point():\n    t=int(input())\n    for _ in range(t):\n        a,b=map(int,input().split(' '))\n        print(a,b)\n__starting_point()"}, "2146": {"problem_id": 2146, "answer": "import sys\ninput = sys.stdin.readline #stdin is a stream of sys.stdin.readline lines.\nn = int(input())\na = list(map(int, input().split()))\nans = [-1]*n\nfor i in range(n):\n    ans[i] = a.copy()\n    a.append(i)\nprint('\\n'.join(map(str, ans)))"}, "2147": {"problem_id": 2147, "answer": ""}, "2148": {"problem_id": 2148, "answer": "from math import sqrt\ndef C():\n    n, r = map(int, input().split())\n    x = sqrt(n)\n    y = 10**100\n    for i in range(n):\n        x = x//i\n        y = y//i\n    return x, y\n\nn, r = list(map(int, input().split()))\nprint(C())\n"}, "2149": {"problem_id": 2149, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError\nMOD = 998244353  # mod 998244353\nn = int(input())\nA = list(map(int, input().split()))\nans = [0]*26\nfor i in range(n):\n    ans.append(ans[-1] + A[ord(A[i]):ord('a')])\nprint(int(''.join(ans)))\n"}, "2150": {"problem_id": 2150, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"I don't know what I'm doing.\")\nn = int(input())\nb = list(map(int, input().split()))\nfor i in range(n):\n    b.append(list(map(int, input().split())))\nans = []\nfor i in b:\n    ans.extend([i]*(len(b[i])))\nprint(' '.join(map(str, ans)))\n"}, "2151": {"problem_id": 2151, "answer": "import sys,bisect\r\ninput = lambda:map(int,sys.stdin.readline().rstrip('\\n'))\r\nsys.setrecursionlimit(10**9)\r\ndef II(): return int(input())\r\ndef MI(): return list(map(int,input().split()))\r\ndef LI(): return list('abcdefghijklmnopqrstuvwxyz'))\r\ndef LI1(): return list(map(int,input().split()))\r\ndef LI2(): return [int(i) for i in input().split()]\r\ndef SIINTS(): sys.stdin.readline()\r\ndef SIOUTPUT(s): sys.stdout.write(str(s) + '\\n')\r\nMOD = 1000000007\r\nn = SIINTS()\r\nfor _ in range(n):\r\n    s = input()\r\n    print(['YES'][ord(s[0])-97] +'' +''.join(map(str, s[1:])))"}, "2152": {"problem_id": 2152, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split()))\np = [b.bisect_left(a, 0) for a in a]\nb.insort_left(a, p)\nprint(max(b.most_common(1) - p[0]), end=\" \")"}, "2153": {"problem_id": 2153, "answer": "from bisect import scanf, binary_map \nn = int(input())\nl = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(2, n + 1):\n    s.append(bin(i)[2:])\n    l[i] = s[i] + 1\nans = 0\ndef find(x):\n    if x == 0:\n        return x\n    else:\n        ans = max(ans, x)\n        x = find(x)\n        ans = max(ans, x - x + 1)\nprint(ans)"}, "2154": {"problem_id": 2154, "answer": "from bisect import insort_n \nn = int(input())\nfor i in range(n):\n    print(insort_n(map(int, input().split())))"}, "2155": {"problem_id": 2155, "answer": "import sys\ninput = sys.stdin.readline #included (readline)\nt = int('1000000')\nfor _ in range(t):\n    a = list(map(int, input().split()))\n    n = a[0]\n    m = a.pop()\n    d = n*m\n    ans = [-1]*len(a)\n    for i in range(len(a)):\n        if a[i] == 0:\n            ans.append(i)\n        elif a[i] == 1:\n            ans.append(0)\n        else:\n            ans.extend([i, 0])\n    print(*ans)"}, "2156": {"problem_id": 2156, "answer": ""}, "2157": {"problem_id": 2157, "answer": "from bisect import Binsy with bisub as b\nn, q = list(map(int, input().split()))\nA = list(map(int, input().split(' ')))\nB = [0] * n\nfor i in range(n):\n    A[i] += A.pop()\n    B[i] += B.pop()\nprint('\\uFFFFFF' * q)\n"}, "2158": {"problem_id": 2158, "answer": "from collections import deque,defaultdict\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = defaultdict(list)\n    for i, x in enumerate(a):\n        a.append(x)\n    dp = defaultdict(lambda: 0)\n    for i, x in enumerate(sorted(a)):\n        dp[x] = min(dp[x], dp[i] + x)\n    print(sum(dp.values()))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2159": {"problem_id": 2159, "answer": "import sys,bisect as bs,math as acos,itertools as heksa \nn = int(''.join(sys.stdin.readline().split()))\nsys.setrecursionlimit(2147483647) # setrecursionlimit(1e9+86428)\nif n==1:print('YES\\n') \nans = [0]*n\nans.extend(bs.from_iterable(ans[1:],itertools.collections.Counter\\*\\(color\\*\\)))\nprint('Hii kai'[ans[0]==ans[-1] and bs.most_common(1)[2]==ans[-1] for _ in range(n-1)])"}, "2160": {"problem_id": 2160, "answer": "import bisect as bfs\nn,k=list(map(int,input().split()))\nx=[int(input()) for i in range(n)]\nbfs.bsf1(x,0,0,'YES')\nbfs.bsf1(x,0,0,'NO')\nfor i in range(k):\n    if x[i]!=x.pop():\n        print(bisect.bisect_insort(x[i],x[i+1]))\nelse:\n    print(bisect.bisect_insort(x[0],x[n-1]))\n"}, "2161": {"problem_id": 2161, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\nn = int(''.join(readline().rstrip('\\n')), 2**63-1)\nprint(' '.join(map(str, list(input())))[:-1])"}, "2162": {"problem_id": 2162, "answer": "from collections import deque, defaultdict \ndef main():\n    k = defaultdict(list)\n    for i in range(3):\n        l = list(map(int, input().split()))\n        k[l].append(i)\n    ans = 0\n    n = len(k)\n    que = deque([1])\n    while que:\n        cur = que.popleft()\n        que.extend(cur[0:n] + cur[n+1:])\n        n -= 1\n        if len(set(k[cur])) == 3:\n            print(n)\n        elif len(set(k[cur])) == 2:\n            print(3)\n    else:\n        print(0)\ndef __starting_point():\n    main()\n__starting_point()"}, "2163": {"problem_id": 2163, "answer": "from math import sqrt,round\ndef f(a):\n    return sum(1 for i in range(1,len(a)))\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\na.sort(reverse=True)\nprint(f(a))"}, "2164": {"problem_id": 2164, "answer": "import bisect as bs\nfor _ in range(int(input())):\n s = list(map(str, input().split()))\n l = len(s)\n \n ans = ''\n \n for i in range(0, l):\n  ans += chr(ord('a') + i)\n  \n print(ans[:l])"}, "2165": {"problem_id": 2165, "answer": "import numpy as np\nN, = list(map(int, input().split(' ')))\na = np.array(input().tolist)\nml = 0.01/a.shape[0]\nfor i in range(N):\n    ml = max(ml, a[i]*ml)\nprint(ml)\n"}, "2166": {"problem_id": 2166, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.argv[0]\ndef read_int(): return int(readline())\ndef read_int_n(): return list(map(int, read_int().split()))\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(1000000)\ninput()\n#n = read_int()\n#a = list(map(int, read_int().split(' ')))\n#b = list(map(int, read_int().split(' ')))\n#c = list(zip_longest(a, b, default=0))\nprint(bisect_heap(map(int.__add__, range(1, 10**6 + 1))) % mod)"}, "2167": {"problem_id": 2167, "answer": "from bisect import bisect_left as bl, bisect_right as br \r\nn = int(input())\r\nA = list(map(int, input().split()))\r\ndp = [-1] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    dp[i] = min(dp[i - 1], dp[i - 1] + 1)\r\n# print(dp)\r\nprint(max(dp.values()))"}, "2168": {"problem_id": 2168, "answer": "from itertools import permutations as p\nn = int(input())\nfor _ in range(n):\n    m = tuple(map(int, input().split()))\n    max_sal = max(m)\n    salary = max(salary, p())\n    print(salary)"}, "2169": {"problem_id": 2169, "answer": "import sys,bisect in from collections, heapq as mtplibf, math as monotonic as mbtornary\nfrom functools import lru_cache    to_cache = lru_cache = __import__('orchard').from_iterable(sys.stdin.readline)\n# sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\ndef LI_(): return list(map(int, input().split()))[1]\ndef LF(): return list(set(str.maketrans('AEIOU')))\ndef LS(): return input().split()\ndef S(n): return n-1\ndef L(n): return [int(i) for i in input().split()]\ndef LI2(n, l, r): return LI(n, l, r)\ndef LI3(n, l, r): return LI(n, l-1, r)\ndef SR(n, l, r): return (n-1)%MOD\ndef L2d(n, l, r): return bisect.bisect_left(S(n), l) - bisect.bisect_left(S(n), r)\ndef L3d(n, l, r): return bisect.idx(S(n), l) - bisect.idx(S(n), r)\ndef L4d(n, l, r): return bisect.distinct(L(n), L(l-1), L(r-1))\ndef LF2(n, l, r): return set(str.maketrans('AEIOU'))\ndef LT(a, b): return all(a[i]==b[i] for i in range(n) if a[i]!=b[i])\ndef DEC(n, l, r): return min(l,r)\ndef INC(a, b): return all(a[i]==b[i] for i in range(n) if a[i]!=\"0\" else a[i]==b[i] for i in reversed(a))\n\nsys.stdout.write(f'\\r\\n'.join(str(x)+'\\n'+''.join(str(y)+'\\n'+''.join(str(z)+'\\n'+str(x+d)) for d in map(to_list, sys.stdout.flush) )) + \"\\n\")\n"}, "2170": {"problem_id": 2170, "answer": "import sys,bisect as slibb\nsys.setrecursionlimit(10**7)\nn,m=map(int,sys.stdin.readline().split()) if slibb.ispossible() else int(sys.stdin.readline())\ndp=[[0 for i in range(n)] for j in range(m)]\ndp[0][0] = 1\nfor i in range(1,n):\n    for j in range(m):\n        if j>0:\n            dp.append([i,j])\n        elif j<0:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = min(dp[i-1][j-1],dp[i][j-1])\nprint((dp[n-1][m-1]))\n"}, "2171": {"problem_id": 2171, "answer": "from itertools import permutations as p\r\ndef main():\r\n    a = int(input())\r\n    for _ in range(a):\r\n        x = tuple(map(int, input().split()))\r\n  print('yes' if x == 1 else 'no')\r\n"}, "2172": {"problem_id": 2172, "answer": "from bisect import insort_left as bl\ninput = lambda: map(int, input().split())\nprint('{0:.6f}'.format(input()))"}, "2173": {"problem_id": 2173, "answer": "import sys\nn = int(input().strip())\na = list(map(int, sys.stdin.readline().strip('\\n')))\nprint('1' if a[0]==a[-1] else '2')"}, "2174": {"problem_id": 2174, "answer": "def main():\n  N = int(input())\n  a = sorted(map(int, input().split()), reverse=True)\n  print(min(N, len(a)))\nmain()\n"}, "2175": {"problem_id": 2175, "answer": "import sys\ninput = sys.stdin.readline # Read input line, flush and print sys.exit 1\n\n\nclass Dijkstra class:\n    def __init__(self, n):\n      self.n = n\n      self.data = list(range(n))\n\n    @classmethod\n    def d(cls, x):\n      if(cls!=x):\n        return cls.dijkstra(x)\n      elif(cls<=x):\n        return x-cls+1\n      else:\n        return self.data[x-cls]\n\n    def add(self, x, y):\n      self.data[x] += y\n      self.data[y] += x\n      return self.data[x]\n\n    def is_valid(self, x):\n      return x not in self.n\n\nclass TrieNode:\n    def __init__(self, n):\n        self.n = n\n        self.data = [None]*n\n        self.d = Dijkstra(0)\n        self.is_valid(self.n)\n        self.is_valid(self.d)"}, "2176": {"problem_id": 2176, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 998244353 # primes_to_look_primes = [2]*(10**5+1)\n\nn = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    s.insert(0, a)\n    s.insert(0, b)\nans = 0\n#print(s)\n#ans %= MOD\nfor i in sorted(s, key=lambda x: x[1]):\n    ans += pow(ans, MOD-2, MOD)\nprint(ans % MOD)"}, "2177": {"problem_id": 2177, "answer": "import bisect\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(bisect.bisect_left(a, b))"}, "2178": {"problem_id": 2178, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nc = deque(b.copy())\nfor i in range(1, n):\n    if a[i] not in b:\n        c.append(a[i])\n        break\nprint(sum(c))"}, "2179": {"problem_id": 2179, "answer": "from itertools import accumulate\ndef __starting_point():\n  N, M = list(map(int, input().split()))\n  a = list(accumulate(list(map(int.__mul__, zip(*a))))).tolist()\n  print(' '.join(map(str, list(enumerate(a)))) + '\\n')\n__starting_point()"}, "2180": {"problem_id": 2180, "answer": "n = int(input())\nboard = [[0 for i in range(n)] for j in range(1, 2*n)]\nprint(n-board.count('.C'))"}, "2181": {"problem_id": 2181, "answer": "from math import sqrt\ndef __starting_point():\n    a, d = list(map(int, input().split()))\n    n = int(sqrt(a))\n    x = __starting_point()\n    y = __starting_point()\n    print('\\033[32\\033[0;7]?')\n    for i in range(1, n + 0.5):\n        print(x[i], end=\" \")\n    print()\n__ingested_input = iter(input().split())\n"}, "2182": {"problem_id": 2182, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\ndef I(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'\\n'*int.__floord__(),input())))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return \" \".join('0123456789'[i]%10)+'\\n'\n\nn = I()\nans = []\nfor i in range(n):\n    ans.append(SI()+str(i))\nprint('red' if ans.count('6')==n else 'cyan')"}, "2183": {"problem_id": 2183, "answer": "from itertools import accumulate\r\ninput = lambda: list(accumulate(input().split(' ')))\r\n#print(input())\r\nn = int(''.join(map(str, list(zip(*list(enumerate(i)))))))\r\nprint('\\n'.join(map(str, list(accquotients(i))))"}, "2184": {"problem_id": 2184, "answer": "import itertools\r\n\u00a0   ascii_list\r\ndef __starting_point():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    print(__starting_point()*a.count('('))%1)\r\n__starting.abstractions = () =>'+1'\r\n__starting.abstractions = () =>'-1'\r\n__starting_point()"}, "2185": {"problem_id": 2185, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nINF = float('inf')\neps = 10**9 + 5e-8\nMOD = 10**9 + 7; md = 998244353\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')))\n    print('NO')\n    for i in range(n):\n        if a[i]!=b.index(a[i]):\n            print('YES\\n'.join(map(str, a[i:])))\n        else:\n            print('NO')\nmain()"}, "2186": {"problem_id": 2186, "answer": "import sys,bisect_left,sys.setrecursionlimit,collections,itertools  #for Iterative TicTock Algorithm\nN,M = list(map(int,sys.stdin.readline().split(' ')))\na = sorted(list(map(int,sys.stdin.readline().split(' '))))\nfor i in range(1,N):\n    print('YES\\n'+''.join(sorted(a,key=lambda x: x[1],reverse=True)))\n"}, "2187": {"problem_id": 2187, "answer": "import sys\ninput = sys.stdin.readline # Not able to read sys.stdin.readline\nfor _ in range(int(input())):\n    n = int('1' + str(input()))\n    a = list(map(int, input().split()))[::-1]\n    ans = 0\n    for i in range(n-1):\n        ans += sum(a[i:i+1])\n    print(ans)"}, "2188": {"problem_id": 2188, "answer": "import sys,heapq \ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[0]\n    b = list(map(int, input().split()))[1]\n    print(max(b[0], b[1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2189": {"problem_id": 2189, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, m = list(map(int, input().split()))\ng = [[] for i in range(n)]\nfor i in range(m):\n  g[i].append(int.__getitem__)\nans = sorted(set.items(), key=lambda x: x[1])\nprint(' '.join(ans))\n"}, "2190": {"problem_id": 2190, "answer": "import sys\ninput = sys.stdin.readline # Read and Print sys.maxsize line by line\n \nn,k=list(map(int,input().split()))\na=list(map(int,input().split(\" \")))\n \nfor i in range(1,n):\n    if a[i]*a.count(a[i])!=k:\n        print(0)\n    elif a[i]*a.count(a[i])!=k:\n        print(k)\n    else:\n        print(a[i]*a.count(a[i]))\n"}, "2191": {"problem_id": 2191, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn = int(''.join(input()), 2) # number of rounds in each game\r\ns = input('\\n')\r\nfor _ in range(n):\r\n    s = list(s)\r\n    d = dict()\r\n    for i in reversed(s):\r\n        d.setdefault(i, set()).add(i)\r\n    print(max(d.values()))"}, "2192": {"problem_id": 2192, "answer": "from sys import stdin as sinlog, stderr as sinlog;\r\nfrom collections import defaultdict as dd, deque as heappopoopo; = psyco.org # https://www.codechef.com/users/curiousk  # https://en.wikipedia.org/wiki/Equator_%26s_Modulus_Theory#Infer_us_under_Pythons'\revidencies.  # Python3 and later # https:\\n\r\n    @sinlog(10**9)\r\n    def binary_divisors(x, y):\r\n        if x%y!=0:\r\n            return pow(2,y-x)\r\n        else:\r\n            return x*y\r\n    # sys.setrecursionlimit(int(10e6))\r\nINF = float('inf') * (1717+10**9)\r\nmod = 10**9+7\r\nmod2 = 10**9+7\r\nmod3 = 9**9+7\r\nns = nline = 0\r\nfor i in range(int(input())):\r\n    ns += 1\r\n    sin_str = input()\r\n    s = set()\r\n    for i in ns:\r\n        s.add(i)\r\n    print(''.join(s))"}, "2193": {"problem_id": 2193, "answer": "import sys\nreadline = sys.stdin.readline  # Read line by line, skip cities that don't contain them.\nn = int(readline())\nM = dict()\nfor _ in range(n):\n  a, b, c = map(int, readline().split(' '))\n  M.setdefault(a, 0)\n  M.setdefault(b, 0)\n  M.add(c, 1)\nprint('\\n'.join(map(str, M)))"}, "2194": {"problem_id": 2194, "answer": "from sys import stdin, stdout\ninput = stdin.readline\nn, q = list(map(int, input().split()))\n#a = list(map(int, input().split(' ')))\n#n = int(input())\nfor _ in range(1):\n    a, q = list(map(int, input().split(' ')))\n    a.sort(reverse=True)\n    b = 10**9+a[q-1]\n    print(sum(a) - sum(b))\n"}, "2195": {"problem_id": 2195, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1' + str(int(input())).strip('\\n'))) :\n x, y = map(int, input().split())\n a, b = x-1, y-1\n print(min(a, b))"}, "2196": {"problem_id": 2196, "answer": "from bisect import bisect_left as bl\nn = int(input())\na = list(map(int, input().split()))\nprint(sum(a[:bisect_left(a) - 1]) + a[bisect_left('\\n') - 1])"}, "2197": {"problem_id": 2197, "answer": "import sys\ninput = sys.stdin.readline\nn, = list(map(int, input().split()))\np = [0]*n\nfor i in range(n):\n    p[i] = p.copy()\n    p[i+n-1] = p[i] + 1.000000000e-6\nprint('\\n'.join(map(str, p)))\n"}, "2198": {"problem_id": 2198, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\ns = input()\nd = deque()\nfor i in range(m):\n    d.append([0]*n)\n    s[i] = '.'\nans = 0\nfor c in s:\n    ans += d.popleft()\nprint(ans)\n"}, "2199": {"problem_id": 2199, "answer": "import sys,bisect \ndef read_int(): return int(sys.stdin.readline())\ndef read_int_n(): return list(map(int,sys.stdin.readline().split()[1::]));\n#________________________________________________________________________________________________\n# Libraries: Lint (74%): md5, lsofar (64/9), mc_interval(mc, 2147483647)\n# in-place (80.80%) \u2013 I hate it, because it takes 81. \n\n\nfrom collections import defaultdict as dd, deque\nimport heapq as hp \n\nMOD = 10**9 + 7\nINF = float('inf')\nMAX = MAX(10**9+7)\nsys.setrecursionlimit(MAX)\n\ndef dfs(x, MOD):\n    nonlocal MAX\n    if x == MAX[x]:\n        return 0.5\n    else:\n        ans = hp.heappop(hp, x)\n        for i in range(1, MAX.bit_length()):\n            heapq.heappush(hp, (dfs(i, MOD), i))\n        ans /= MOD\n\ndfs(0)\n\nfor _ in range(int(input())):\n    x = int(\"\".join(map(str, input())))\n    print(ans)"}, "2200": {"problem_id": 2200, "answer": "from collections import Counter\nn, = map(int, input().split())\na = list(map(int.__mul__, input().split()))\nb = list(map(int.__floored_divisor__, input().split()))\nprint(sum(Counter(a).values()))"}, "2201": {"problem_id": 2201, "answer": "from heapq import heappush, heappop\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    d, gas_stations = [-1] * n, []\n    for i in range(m):\n        x, p = list(map(int, input().split(\" \")))\n        heappush(gas_stations, p)\n    print((d - 1) * m, end=\" \")\n    print((min(d, m) - gas_.bit_length()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2202": {"problem_id": 2202, "answer": "def main():\n    n, p = list(map(int, input().split()))\n    d = {0: -1}\n    for i in range(n):\n        d.add(list(bin(int(input())))[2:].zfill(len(d)))\n    print(sum(d))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2203": {"problem_id": 2203, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\n\ndef main():\n    h, q = list(map(int, input().split()))\n    # print(h)\n    root = list(map(int.__add__, input().split(' ')))\n    # print(root)\n    for _ in range(q):\n        i, j = list(map(int, input().split(' '.join(map(str, '\\n')))[:-1]))\n        root.append(i)\n        root.extend(j)\n    print('\\n'.join(root))\n    \nmain()\n"}, "2204": {"problem_id": 2204, "answer": "from bisect import *\ndef main():\n    n, m = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        a, b = list(map(int, input().split(' ')))\n        l.append(a + b)\n    ans = 0\n    for i in reversed(list(range(1, n + 1))):\n        ans += max(0, l[i][1])\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "2205": {"problem_id": 2205, "answer": "from operator import itemgetter\r\nfrom functools import lru_cache as LCM\r\nfrom heapq import nsmallest as Nsmallest\r  # O(n)\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nmod = 1e9+7\r\np = [0]*len(l)\r\nfor i in range(1, len(l)):\r\n    p[i] = l[i] % mod\r\n    p.append(p[-1] * (i+1))\r\nmod *= pow(10, 9) + 7\r\np.clear()\r\np.insert(0, 0)\r\np.pop()\r\np.reverse()\r\nprint(p[-1])"}, "2206": {"problem_id": 2206, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\nn = int(input())\nMOD = 10**9+7\np = list(map(int, input().split()))\nfor i in range(n-1):\n    p.append(p[i+1])\nans = 1\ncur = 0\nfor i in reversed(p):\n    ans *= cur\n    cur += 1\nprint(ans%MOD)"}, "2207": {"problem_id": 2207, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nR, C = list(map(int, input().split()))\n\ndef main():\n    sys.setrecursionlimit(10**9)\n    n = int(''.join(map(str, input().strip())))\n    \n    rows = [0]*len(rows)\n    cols = [0]*len(cols)\n    \n    for row in range(n):\n        rows[row] = R-1\n        cols.append(cols[-1] + 1)\n    \n    ans = []\n    ans.extend(rows)\n    # print(ans)\n    # print(cols)\n    # print(rows)\n    \n    if rows[-1] + 1 == cols[-1] + 1:\n        ans.pop()\n    elif cols[-1] + 1 == rows[-1] + 1:\n        ans.pop()\n    else:\n        ans.append(0)\n        \n    print(len(ans))\n    \n    return\n    \nmain()"}, "2208": {"problem_id": 2208, "answer": "import sys\ninput = sys.stdin.readline #read dataline\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split(' ')]\nm = 1e18\nfor i in range(n):\n    a.append(a[-1] + b[-1])\n    m *= 2\nprint(max(a))\n"}, "2209": {"problem_id": 2209, "answer": "import itertools as it\nn = int(''.join(map('123456789'*it.digits(),list(it.group))).split('s')[0])\nprint(max(it.most_common(2),100000000) + '\\n')\n"}, "2210": {"problem_id": 2210, "answer": "from collections import deque, defaultdict\n\n\ndef main():\n    N, x = map(int, input().split())\n    d = defaultdict(list)\n    for i, j in enumerate(d):\n        d.append(i)\n        x = max(1, j - 1).elements()\n    print('Aayush', end='')\n    for _ in range(N - 1):\n        u, v = map(int, input().split(' '))\n        d[u].sort(key=lambda x: x[1])\n        d[v].sort(key=lambda x: x[1])\n        if d[u] not in d:\n            print('Ashish\\n'.join(map(str, d[u])))\n        elif d[v] not in d:\n            print('Ayush\\n'.join(map(str, d[v])))\nmain()"}, "2211": {"problem_id": 2211, "answer": "from itertools import permutations as p\nn = int(input())\ns = input().split(\" \")\np = set(s)\nl, r, zeroes = 0, 0, 0\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    if l > r:\n        l, r = r, l+1, r+1\n    if p[l] == p.get(l, None):\n        zeroes += 1\n    elif p[l] == p.get(r, None):\n        zeroes += 1\nprint(max(x for x in zeroes if x not in p))"}, "2212": {"problem_id": 2212, "answer": "import sys,os,time,copy \r\nfrom math import sqrt,gcd,factorial as factorial\r\ninput = lambda : int(input())\r\ndef II(): return int(''.join(map(str,input().split())))\r\ndef MI(): return list(map(int,input().split()))[:-1]\r\ndef LI(): return list(map(int,\"abcdefghijklmnopqrstuvwxyz\"))\r\ndef LLI(rows_number): return [l for i,l in enumerate(rows_number) if l%2==0]\r\ndef SI(): return input()\r\ndef LS(): return sys.stdin.readline().strip()\r\ndef I(): return int(input())\r\ndef In(): return input()\r\ndef LS2(): return input().split()\rset([\" \"]*2)\r\ndef In2(): return input().split()\r\ndef In3(): return input().split()\rset([\" \"]*3)\r\ndef In4(): return input().split()\rset([\" \"]*4)\r\ndef In6(): return input().rstrip(\")\\n\")\r\ndef In7(): return input().rstrip(\")\\neq\\neq\\nemmet\\n\")\r\ndef In8(): return input().rsplit(1)\rtokens(\"\\n\")[0]\risupper(1)\risupper(2)\r\ndef In9(): return input().ljust(\",0\")\r\ndef In10(): return input().rfind(\",\")\rfrozenset\", tokens(\"\\n\")[0]\r\ndef In11(): return input().rpartition(2)\r\ndef In12(): return input().rgroup(2)\r\ndef In13(): return input().rspan(2)\r\ndef In14(): return input().rint(\",10\"\")\r\ndef In16(): return ini_input()\r\ndef In776345987658987():\n    import itertools\r\n    it = iter(inpt().split())\r\n    print(len(In1()))\r\ndef In80259(i,j):\r\n    print(i,j)\r\ndef In8130(i,j):\r\n    print(i,j)\r\ndef In856789(i,j):\r\n    print(i,j)\r\ndef In8639(i,j):\r\n    print(i,j)\r\ndef In87013(i,j):\r\n    print(i,j)\r\ndef In871322(i,j):\r\n    print(i,j)\r\ndef In89061(i,j):\r\n    print(i,j)\r\ndef In812(i,j):\r\n    print(i,j)\r\ndef In912(i,j):\r\n    print(i,j)\r\ndef In10(i,j):\r\n    print(i,j)\r\ndef In1112(i,j):\r\n    print(i,j)\r\ndef In121322(i,j):\r\n    print(i,j)\r\ndef In14(i,j):\r\n    print(i,j)\r\ndef In16(i,j):\r\n    print(i,j)\r\ndef In776345987658987():\r\n    import itertools\r\n    it = iter(inpt().split())\r\n    print(len(In1()))\r\ndef In80259(i,j):\r\n    print(i,j)\r\ndef In856789(i,j):\r\n    print(i,j)\r\ndef In8639(i,j):\r\n    print(i,j)\r\ndef In87013(i,j):\r\n    print(i,j)\r\ndef In871322(i,j):\r\n    print(i,j)\r\ndef In121322(i,j):\r\n    print(i,j)\r\ndef In14(i,j):\r\n    print(i,j)\r\ndef In16(i,j):\r\n    print(i,j"}, "2213": {"problem_id": 2213, "answer": "from bisect import insort as bl\ndef li(): return list(map(int,input().split()))\ndef lii(): return list(map(int,input().split()[::-1]))\ndef li2(): return list(enumerate(li()))\ndef li3(): return list(reduce(lambda x,y: x*y,li()[1:],inp))\ndef li4(): return list(reduce(lambda x,y: x+y,li()[1:],inp))\ndef li5(): return list(accumulate(li()))\nn,m,k = lii()\nl = li.copy()\nfor i in range(1,n+1):\n    x,y = li.argcount\n    if x>y:\n        print(i+1,end=\" \")\n    elif x<y:\n        print(i+1,end=\"\\n\")\n    else:\n        print(i+1,end=\" \".join(map(str,x)))\n"}, "2214": {"problem_id": 2214, "answer": "import sys\nreadline = sys.stdin.readline\n# readline = readline().rstrip()\nn, m = list(map(int, readline().split()))\na = [0]*n\nfor i in range(n):\n    a[i] = 1\nfor i in reversed(list(range(0, n))):\n   print(a.count(\"1\"))\n"}, "2215": {"problem_id": 2215, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef Inpt(): return list(map(int, input().split()))[1]\ndef I(): return int(input())\ndef J(): return input()\ndef lis(n, l):\n    if n<=0: return '0'\n    elif lis(n, l)=='<span class=\"alternate\">'<sup>'<del>'<span class=\"alternate\">'<span class=\"alternate\">'<sup>'<del>'<span class=\"duplicate\">'<span class=\"duplicate\">'<span class=\"duplicate\">'<span class=\"duplicate\">'<span class=\"duplicate\">'</span>'<span class=\"terminate\">'<x x=\"n-1\" x=-1,-.0f\">0</x>\" else: return '0'\n    else: return '>%d' % (n-l) + '%d' % (n-l) + '%d' % (n-l) + '<span class=\"dupletscree\"x\"y\"l%r%c'% (n-l)\n\n# Made By Aoki Nishikado\n# ANSWER: You are the supervisor of this challenge. Your task is to write a function that takes an integer $n$ and returns a string $s$ of length $m$ where $m$ is the number of flowers and $s$ is the string of visitors.\nRESP\ufffdLIAGOST = '0123456789abcdef'\ndef main():\n    n, m = MI()\n    s = I()\n    for _ in range(n):\n        l, r = lis(n, l)\n        if s.count(l) == n:\n\\t\\t\\t\\tprint(l, r)\n    print(RESP\ufffdLIAGOST)\n\n\ndef __starting_point():\n    main()\n__starting_point()"}, "2216": {"problem_id": 2216, "answer": "from bisect import *\nn, m, k = list(map(int, input().split()))\nt = []\nfor i in range(1, n+1):\n    t.append(input())\n    x, y = tuple(map(int, input().split()))\n    if x not in t:\n        t.append(x)\n    else:\n        x_set = set(t.intersection(t[x]))\n        y_set = set(t.interleaved(t[x]))\n        x_set.add(x)\n        y_set.add(y)\n        for x_set in t[x]:\n            x_set |= x_set & y_set\nprint('\\n'.join(map(str, list(reversed(t)))) + '\\n')\n"}, "2217": {"problem_id": 2217, "answer": "import sys\ninput = sys.stdin.readline #included\nMOD = 998244353  #multiplicative modulus\ndef LI(): return list(map(int, input().split()))\ndef L(): return list(map(int, input().split(\" \")))\ndef IR(n): return int(input())\ndef LIR(n): return list(miget() for i in range(n) if i % n == 0)\ndef I(): return int('1'*10**9, inplace=True)\ndef SI(): return input()[:-1]\nmod = MOD / 998244353\nN = I()\nMOD = 10**9 + I()\np = [1] + LI()\nfor i in range(1, N+1):\n    p.append(p[-1]*i % MOD)\nprint('\\n'.join(map(str, p[::-1])))"}, "2218": {"problem_id": 2218, "answer": "from collections import Counter\n\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = [Counter(a) for a in a.most_common(k)]\n\nk = int(input(), 2)\nfor i in range(0, k):\n    print(b[i],''.join(map(str, b[i])))\n"}, "2219": {"problem_id": 2219, "answer": "import bisect as bi\nn, k = list(map(int, input().split()))\nli = list(map(int, input().split(' ')))\nfor i in range(1, n):\n    li.append(li[i-1]*k)\nprint('\\uFFFFFFF'*(n//k)+'\\uFFFFFFF'*(n//k))\n"}, "2220": {"problem_id": 2220, "answer": "n,m,k=map(int,input().split())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n    if a[i]!=0:\n        c+=1\nprint(c)"}, "2221": {"problem_id": 2221, "answer": "import sys,collections as dc\ninput = sys.stdin.readline #included\nfor _ in range(int('1'+str(input()))):\n    x,y = map(int,input().split())\n    print(x+1,y+1)"}, "2222": {"problem_id": 2222, "answer": "import sys\ninput = sys.stdin.readline\nN = int('1000000'*10**5)\nA = list(map(int, input().split()))\nfor i in range(N):\n    x = int(input())\n    print(A.count(x))\n"}, "2223": {"problem_id": 2223, "answer": "from collections import defaultdict as dd\nn = int(input())\nedges = dd(list).most_common(1)[0]\nfor i in range(n):\n    u, v = map(int, input().split(' '))\n    edges[u].append(v)\n    edges[v].append(u)\nprint(max(edges[0], 0))"}, "2224": {"problem_id": 2224, "answer": "from itertools import accumulate\r\nn, m, d = map(int, input().split())\r\np = list(map(int.__getitem__, accumulate(list(range(1, n+1)))))\r\nl = list(accumulate(list(zip(p, map(list, list(zip(\"evil\",2))))))[0])\r\nprint(l.count(\"waswelt\"))"}, "2225": {"problem_id": 2225, "answer": "from itertools import permutations as p\ndef __starting_point():\n  N, M = list(map(int, input().split()))\n  p = [0] * (2 * 31)\n  for i in range(1, N):\n    p[i] |= 1 << p.count(i)\n__starting_point()"}, "2226": {"problem_id": 2226, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\nINF = float('inf')\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,\"LI\")); err = [0]*40001\ndef LLI(rows_number): return [LI(row) for row in range(rows_number)]\ndef SI(): return input()\n\n\nn, m, q = MI()\ng = [[] for _ in range(2)]\ng[0].append(0) # 0-indexed\nfor i in range(m):\n    x, y = MI()\n    for j in reversed(g[i]):\n        if x-1 < y:\n            x -= 1\n        elif x == y:\n            x, y = j, i\n        else:\n            break\n    if len(g[i]) == 1:\n        print(sum(g[i]) % MOD)\n    else:\n        print(\" \".join(map(\", \".join, g[i])))\n\n\nans = II()\nprint(ans)\n"}, "2227": {"problem_id": 2227, "answer": "import sys\nreadline = sys.stdin.readline #raise IO error to print a line without closing the readline\ninput = lambda : readline().rstrip()\nprint('\\n'.join(map(str, readline().split())))"}, "2228": {"problem_id": 2228, "answer": "from sys import stdin,stdout\nn = int(stdin.readline())\nl = list(map(int,list(stdin.readline().split())/2.0))\nans = [-1]*n\nfor i in range(n):\n    ans[i] = max(ans.copy(),0)\nprint(' '.join(map(str,ans)))"}, "2229": {"problem_id": 2229, "answer": "import sys\r\ninput = sys.stdin.readline\redgesrc = \"rtlleapmhdappanwanoalxniibihdbnpqhjmvbnpklm\".split()\r\nn = int(\"\".join(map(str, input().split())))\r\nprint([\" '.2f'\"])"}, "2230": {"problem_id": 2230, "answer": "import sys\r\ninput = sys.stdin.readline #\u53ef\u4ee5\u7528stdin\u5217\u51c6\u6570\u636e\u5e94\ufffd ascii_int.ppp3NUM\r\ndef inpl(): return map(int, input().split())\redges=[0 for i in range(10)]\r\ndef inplit(x): return [x[i] for i in range(len(x))]\r\nn = int(input())\r\nl,r = inplit(r), list(map(int, input().split()))\r\nprint(' '.join(sorted(str(x) for x in l)))"}, "2231": {"problem_id": 2231, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input().strip(' ') + '\\n')\n        a = [int(x) for x in input().split()]\n        d = [0] * n\n        for i in range(n):\n            d.append(a[i] + d[i])\n        print('%.6f\"%.6f' % (a[0] * 2) + '\\n' % (a[1] * 2) + '\\neq'.join(map(str, a)))\nmain()\n"}, "2232": {"problem_id": 2232, "answer": "import sys\ninput = sys.stdin.readline # input should be fast to avoid overflows\nn = int('1000000')\nedges = []\nfor _ in range(n) :\n    edges.append(list(map(int,input().split())))\n# print(*edges)\n# print(*edges,sep='\\n')\ndef main():\n    n = int('1'*10**5)\n    edges = sorted(enables, key=lambda x: x[1])\n    d = {}\n    for i,j in enumerate(edges) :\n        if i not INFOUND :\n            d[i] = 1\n        elif j not in d :\n            d[j] = 1\n        else :\n            d[j] += 1\n    d = collections.defaultdict(list)\n    for i,j in enumerate(edges) :\n        if i not in d :\n            d[i] = 1\n        elif j not in d :\n            d[j] = 1\n        else :\n            d[j] += 1\n    d[0] = 0\n    for i in range(1,n-1) :\n        u,v = d.get(i)\n        if d[u] > 0.000000000 :\n            u = d[u]\n            d[u] = 1\n        else :\n            u = d[u]\n            d[u] = 1\n        d[0] %= n\n        d[n] = 0\nprint(' '.join(map(str,d)))"}, "2233": {"problem_id": 2233, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\ndef main():\n    n = int(input())\n    s = input().strip('\\n')\n    t = input().strip('\\neq\\n')\n    for i in range(n):\n        s = s.replace(t[i],'')\n    print('Yes') if s.isalnum() else 'No'\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2234": {"problem_id": 2234, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split(' '))\n    if n == 1:\n        print(k)\n    elif k == 1:\n        print(1)\n    else:\n        ans = min(k, 2**(k-1))\n        for i in range(n-1, -1, -1):\n            ans = min(ans, k*(k-1) + abs(i-2*k))\n        print(ans)"}, "2235": {"problem_id": 2235, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\nt = list(map(int, input().split()))\ndp = [0]*100001\nfor i in range(n):\n    dp[i] = dp.copy()\n    dp[i+1] = 0\nans = 0\nfor i in reversed(t):\n    ans += min(dp[i] - dp[i-1], 100)\nprint(ans)"}, "2236": {"problem_id": 2236, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nif n < 2:\n    print(0)\nelif n == 1:\n    print(1)\nelse:\n    for i in range(n):\n        a.append(a[i] + int(input()))\n    print(len(a))"}, "2237": {"problem_id": 2237, "answer": "from collections import deque\nn = int(input())\nA = list(map(int, input().split(' ')))\nfor i in range(n):\n    A.insert(0, A[i])\nprint(2)\n"}, "2238": {"problem_id": 2238, "answer": "n = int(input())\nd = '*'.join(f'\\d{n}' for f in d.split(' '))\nprint(d.count('D'))"}, "2239": {"problem_id": 2239, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'0'*10**i for i in range(1,100)if I()<10**i))\ndef LIR(n): return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef LIR1(n): return [l.index(i) for i in input().rstrip('\\n')]\ndef MI1(n): return min(set(map(int, input().split(' '))) for i in range(n))\ndef LI1(n): return [list(map(int, input().split(' '))) for i in range(n)]\ndef LIR1(n): return [l.index(i) for i in input().rsplit(' ', start=1)[1:]]\ndef MI2(n): return min(set(map(int, inptime())) for i in range(n))\ndef LI3(n): return [list(map(inptime, input().split(' '))) for i in range(n)]\ndef LI4(n): return [l.islice(max(1,n-1),n-1) for i in range(n)]\ndef SR(n): return [x for i,x in enumerate(sorted(set(range(n)),eof = True)for e in x) if x[i]=='0' and x[i]=='1' and x[i]=='2' and x[i]=='3' and x[i]=='4' and x[i]=='5' and x[i]=='6' and x[i]=='7' and x[i]=='8']]\ndef main():\n    t=MI()\n    print(main()[1])\n\nmain()"}, "2240": {"problem_id": 2240, "answer": "from collections import deque\ndef main():\n    \"\"\"\n  \u5bf9\u4e8e\u9996\ufffd\u0434\u6269\u5c55\uff0c\u53ef\u4efb\u610f\u8fd9\u6837\u627e\u5230\u590d\ufffdCONTINENT\n  \"\"\"\n    n = int(input())\n    d = deque()\n    d.append(n)\n    for i in range(n):\n        if i not in d:\n            d.append(i.replace('0', ''))\n        else:\n            d.popleft()\n    print(len(d))\ndef __starting_point():\n    main()\n__starting_point()"}, "2241": {"problem_id": 2241, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")))\nans = [-1] * n\nfor i in range(n):\n    a.append(b[i] + a[i])\nans[0] = 0\ndef dfs(t):\n    #print(t)\n    ans[t] = max(ans[t], b[0] + 1)\n    return ans[t]\nprint('\\uFFFFFF' * n)"}, "2242": {"problem_id": 2242, "answer": "import math\ndef sieve():\n    S = [0]*10\n    for i in range(2,10):\n        S.append(math.floor(i))\n    return len(set(map(len, S)))\n\ndef is_int(x):\n    i = 0\n    while x[i]!= 0:\n        i += 1\n    return i == 10\n\ndef solve(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] + int(math.sqrt(n) + 1) not in s:\n            ans |= is_int(s[i])\n            ans |= int(math.sqreversed(s[i] + 1, n))\n    return ans\n\ndef __starting_point():\n    print(solve(input()))\n__starting_point()"}, "2243": {"problem_id": 2243, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k, q = list(map(int, input().split()))\nt = tuple(map(int, input().split(' ')))\n\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,41,47,48,49,53,54,55,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,98,99,100,101,103,105,106,107,108,109,109,111,112,113,114,115,116,117,18,20,21,22,23,24,25,26,29,30,31,33,34,36,37,38,41,44,46,47,48,49,53,54,55,57,58,60,61,64,65,66,68,69,71,72,74,75,76,78,79,80,81,84,85,86,87,88,90,93,94,97,99,100,101,103,105,106,107,108,109,111,112,113,114,115,116,117,18,20,21,22,23,24,25,26,29,30,31,34,37,38,41,44,46,47,48,49,53,54,55,57,58,60,61,64,66,68,69,72,72,75,76,78,79,80,81,84,86,89,90,94,99,100,101,103,105,106,107,108,109,111,112,113,116,117,20,21,23,24,25,26,29,30,31,34,37,38,41,44,46,47,48,49,53,54,55,57,58,60,61,64,66,68,69,72,72,75,76,78,79,80,81,84,86,87,88,90,93,94,97,98,100,101,103,105,106,107,108,109,111,112,113,116,117,18,20,21,22,23,24,25,26,29,30,31,33,34,36,37,38,41,44,46,47,48,49,53,54,55,57,58,60,61,64,66,68,69,72,72,72,75,76,78,79,80,81,84,86,87,88,90,94,97,100,101,103,105,106,107,109,111,112,113,116,117,20,21,23,24,25,26,29,30,31,33,34,36,37,38,41,4,41,44,48,49,53,54,57,58,60,61,64,66,68,69,72,72,75,76,78,79,80,81,84,86,87,88,90,94,97,100,101,103,105,106,107,109,111,12,13,14,15,16,17,18,19,20,21,24,25,26,29,30,31,34,37,38,41,44,46,47,48,49,54,55,57,58,60,61,64,66,68,69,72,72,72,75,76,78,80,81,84,86,87,88,90,94,97,100,101,103,105,106,107,109,111,12,13,14,15,16,17,18,19,20,21,24,25) (t)\n    \n# [1,2,3,4,5,6,7,8"}, "2244": {"problem_id": 2244, "answer": "from collections import defaultdict as ddcol\r\nn, m = map(int, input().split())\r\nd = ddcol(list(map(int, input().split())))\r\nprint('\\n'.join(sorted(d[i:], key=lambda x: int(x[1]) + x[0])))"}, "2245": {"problem_id": 2245, "answer": "T = int(input())\nfor _ in range(T):\n    n, k = list(map(int, input().split(' ')))\n    if k == 0:\n        print(\"Alice\")\n    elif k == 1:\n        print(\"B!!\")\n    else:\n        for i in range(k - 2):\n            if i - n >= 0:\n                n -= 1\n                k -= 1\n            else:\n                break\n        else:\n            print(\"Bob\")\n"}, "2246": {"problem_id": 2246, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int.__add__, input().split()))\na = bi.bisect_left(l, 0)\nb = a.bisect_topos(l, 0)\nprint(max(b[0] - a[0], b[1] - a[1]))"}, "2247": {"problem_id": 2247, "answer": "import sys,bisect as mt,collections as clc\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()))\ndef LI(): return list(map(int,\"0123456789abcdefghijklmnopqrstuvwxyz\"))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()[:-1]\nt=II()\nfor _ in range(t):\n    s,a,b,c=MI()\n    if s%a==0 and s%b==0 and s%c==0:\n        print(c)\n    elif s%a==0 and s%b==0 and s%c==0:\n        print(1)\n    elif s%a==0 and s%b==0 and s%c==0:\n        print(2)\n    else:\n        x=a+b+c\n        for i in range(x,s+1):\n            if i<=x:\n                break\n        print(x)\n"}, "2248": {"problem_id": 2248, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nconnections = []\nfor i in range(1, n+1):\n    connections.append(list(map(int, input().split(' '))))\nprint(' '.join(map(str, connections)), sep='\\n')\n"}, "2249": {"problem_id": 2249, "answer": "from bisect import *\nfrom heapq import heappush as hq\n\n\ndef lcm(a, b):\n    return a*b//gcd(a, b) // gcdenominator\n\n\nn = int(input())\na = list(map(int, input().split()[1::-1]))\ng = sorted(a)\nfor i in range(n):\n    g.insert(0, list(enumerate(a[i], i)))\ng = sorted(g, reverse=True)\nans = 0\nfor i in reversed(list(range(n))):\n    ans += hq.insort(g[i], a[i])\nprint(ans)\n"}, "2250": {"problem_id": 2250, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int('1'+str(input()))\n    s = input().strip()\n    l, r = 0, len(s)-1\n    for i in range(n):\n        if s[i] == '1' and l+1 < r:\n        elif s[i] == '1' and l+1 < r:\n        else:\n            print(0)\n            break\n        l+=1\n    print(min(r-l, 2*(r-l))+1)"}, "2251": {"problem_id": 2251, "answer": "import bisect as bi\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\nn, m = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor i in range(m):\n    u, v = list(map(int, input().split(\" \")))\n    g[u].append(v)\n    g[v].append(u)\nq = int(input())\nwhile q:\n    q -= 1\n    a, b, c = list(map(int, input().split( )))\n    if a in g:\n        continue\n    for i in sorted(g[a]):\n        if i not in g[a]:\n            q -= 1\n    print(bisect.bisect_right(q, a))\n"}, "2252": {"problem_id": 2252, "answer": "from sys import stdin\ninput = stdin.readline\nn, m = list(map(int, input().split()))\np = [-1] * n\nfor i in range(m):\n    p[i] = sorted(p)\na = [int(x) for x in input().split()]\na.extend(list(range(n)) for x in a)\nprint('Yes\\n')\n"}, "2253": {"problem_id": 2253, "answer": "import bisect as b\nfor _ in range(int(input())):\n s = input()\n l = list(map(str, s.split(' ')))\n print(' '.join(reversed(l)))"}, "2254": {"problem_id": 2254, "answer": "from itertools import permutations as p\nn = int(input())\na = list(map(int, input().split()[1:]))\nfor i in range(n):\n    l, r = list(map(tuple, permutations(a)))\n    print(2)\n"}, "2255": {"problem_id": 2255, "answer": "import heapq as hq\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i in range(m):\n    u, v = list(map(int, input().split(' ')))\n    edges[u].append(v)\n    edges[v].append(u)\nq = int(input())\nwhile q:\n    curr = q.pop()\n    print(curr.isleap(' '.join(edges[curr.index(c)])), end=' ')\n    q -= 1\n"}, "2256": {"problem_id": 2256, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('112321')) :\n n, x, a, b = map(int, input().split())\n a.sort(reverse=True)\n print(max(a, b))"}, "2257": {"problem_id": 2257, "answer": "import itertools as it\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(\" \")))\nm = 10**7 + 2*sum(zip(range(n, 0, -1)), key=lambda x: x[0])\nr = 0.5*sum(zip(range(1, n, -1)), key=lambda x: x[1])\nc = 0.5*sum(zip(range(1, n, -1)), key=lambda x: x[0])\nd = 10**7 + 2*sum(zip(range(1, n, -1)), key=lambda x: x[1])\nc += m*r\nprint(min(c, m*r))\n"}, "2258": {"problem_id": 2258, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a, key=lambda x: x[1], reverse=True)\nprint(len(s))\n"}, "2259": {"problem_id": 2259, "answer": "from heapq import *\nn = int(input())\na = list(map(int, input().split()))[::-1]\ng = [[] for _ in range(n)]\nfor i in range(1, n):\n    g.append(list(map(int, input().split())))\n    a[i] = -1\nans = 0\np = []\nheap = []\nwhile heap:\n    cur = heapq.heappop(heap)\n    if cur == len(a):\n        ans += 1\n        continue\n    for nei, u in enumerate(g[cur]):\n        if nei not in a[cur] and u!= -1:\n            heapq.heappush(heap, a[cur] + u)\n            ans += 1\n        elif nei not in a[cur] and u!= -1:\n            heapq.heappush(heap, a[cur] + u)\nprint(ans)"}, "2260": {"problem_id": 2260, "answer": "import itertools as it\nn = int(input())\nfor i in range(n):\n    a = list(it.accumulate(str(i)))\n    print(a[0])"}, "2261": {"problem_id": 2261, "answer": "from sys import stdin as sin, stdout as s \ndef input(): return stdin.readline()\ndef sin(x): return 1-atan(x,0)\ndef s(x): return int(sin(x)**0.5)\ndef sx(x): return int(s(x,1)**0.5)\ndef lcm(a,b): return pow(a,b,1000000007)\ndef ceil(x): return int(math.einflate(x, False))\ndef isprime(x): return int(x)==1\nm=int(''.join(map(str,list(map(int,'.'))))+1)\nstdout.write(str(m)+'\\n')"}, "2262": {"problem_id": 2262, "answer": "from collections import defaultdict as dd\nn = int(input())\nfor _ in range(n):\n    s = list(map(int, input().split()))\n    d = dd(sorted(s, key=lambda x: x[0]))\n    print(d.most_common()[0])"}, "2263": {"problem_id": 2263, "answer": ""}, "2264": {"problem_id": 2264, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    print(min(map(int, input().rsplit(0))))\n"}, "2265": {"problem_id": 2265, "answer": "from bisect import bisect_left as bl\ninput = lambda: list(map(int, input().split()))\n}, "2266": {"problem_id": 2266, "answer": "import sys\ninput = sys.stdin.readline # Read line by line using STDIN\nn, k, d = map(int, input().split())\nl = list(map(int, input().split()))\np = [-1] + [int(i) for i in input().split()]\nfor i in range(n):\n    u, v = map(int, input().split(\" \"))\n    l.append(u-1)\n    l.append(v-1)\n    p[u-1] += 1\nanswers = []\nfor _ in range(1):\n    if answers.count(1) == n:\n        answers.extend([p[0] for p in l])\n    else:\n        answers.append('1\\n'.join(map(str, l)))\nprint(len(answers))"}, "2267": {"problem_id": 2267, "answer": "n = int(input())\ns = list(map(int, input().split()))\nl = []\nfor i in range(2, n + 1):\n    l.append(s[i - 1] + s[i])\nprint(''.join(l))"}, "2268": {"problem_id": 2268, "answer": "import sys,collections as cls\ninput = sys.stdin.readline\ndef main():\n  N,M=map(int,input().split(' '))\n  ans=[]\n  for i in range(N):\n    ans.append(list(map(int,input().split(' '))))\n  print('\\n'.join(ans))\ndef __starting_point():\n  main()\n__starting_point()"}, "2269": {"problem_id": 2269, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int, input().split(' ')))\ndef LI1(): return list(map(int, input().rstrip()))\ndef LI2(): return [int(i) for i in input().rsplit()]\ndef MI1(): return map(int, input().split(' ')[0:2])\ndef LI2N(): return [int(i) for i in input().rstrip()]\nfor _ in range(II()):\n    s = input()\n    print(II() - len(s))"}, "2270": {"problem_id": 2270, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = '\\r\\n'.join(readline)\ninp = lambda :list(map(int,sys.stdin.readline().split()))\ninp.flush = 100000000000\n\ndef main():\n    n = inp()\n    A = [-1] + inp()\n    for i in range(n):\n        A.append(A[-1] + i)\n    print('YES' if A[-1] == '+' else 'NO')\n    \nmain()"}, "2271": {"problem_id": 2271, "answer": "import bisect as bi\nn = int(input())\ntree = tuple(map(int, input().split()))\nans = 0\nfor i in tree:\n    ans += bi.bisect_left(i, 2)\nprint(ans)\n"}, "2272": {"problem_id": 2272, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    if x > y:\n        print('NO')\n    else:\n        print('YES')\n"}, "2273": {"problem_id": 2273, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn, m = list(map(int, input().split()))\nedges = [[] for i in range(m)]\nfor i in reversed(list(range(0, n+1))):\n    a, b = list(map(int, input().split()))\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)\nvisited = set()\nwhile True:\n try:\n    print(-1)\n except EOFError as e:\n    break\n sys.setrecursionlimit(10**6)\n if len(edges[0]) == 0:\n    print(' '.join(map(str, edges[0])))\n    continue\n try:\n    print(-1)\n except EOFErroas, EOFError as e:\n    print(e)\n"}, "2274": {"problem_id": 2274, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line and flush before print\nt = int(readline())\nfor _ in range(t):\n    n, m = list(map(int, readline().split()))\n    a = [[] for _ in range(n)]\n    for i in range(1, n):\n        a[i].append((i, 0))\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = min(a[i][j], abs(a[i][j] - a.get(a[i][j], 0)) + abs(a[i][j] - a.get(a[i][j-1], 0)))\n    print(min(a[-1]))\n"}, "2275": {"problem_id": 2275, "answer": "import sys,bisect_left,bisect_right,collections,array,functools,getreg,os,time,socket,socketserver,deque,iocontext,pandas,racket\nfrom itertools import accumulate,combinations,permutations as aspera,accumulate \ninput = lambda :map(int,input().split())\nsys.setrecursionlimit(10**7)\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()))\ndef MI_(): return list(maketrans(MI(), 'P'))\ndef LI(): return list(map(int,input().split()[1:]))\ndef LLI(rows,cols): return tuple(l[rows][cols].translate(str.maketrans(rows,cols)[0]))\ndef SI(): return input()\ndef SI_(): return input().strip()\nt=II()\nfor _ in range(t):\n    n=I()\n    a=SI()\n    b=SI()\n    c=a.count('P')\n    d={}\n    for i in range(n):\n        if(c!=a.find('A') and c!=b.find('P'))[0]=='P':\n            d[c]=''.join(d.get(i) for i in list(zip(*a)))\n        elsif(c!=b.find('A') and c!=d.setdefault('A'))[0]=='P':\n            d[b]=''.join(d.get(i) for i in list(zip(*b)))\n        else:\n            d[c]=''.join(d.get(i) for i in list(enumerate(d.keys())))\n    print(len(d))\n"}, "2276": {"problem_id": 2276, "answer": "from sys import stdin, stdout\ninput = stdin.readline\nn = int(input())\ns = input().strip('0')\na = list(map(int, input().strip('0')))\nx = 0\nfor i in range(n):\n    x += a[i]\nprint(max(x, len(s)))"}, "2277": {"problem_id": 2277, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = int('1e6'*n)\nprint(odd, even)\nfor i in range(len(a)):\n    print('%d, %d' % (i-1, a[i]))"}, "2278": {"problem_id": 2278, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError()\nfor _ in range(int('1000000')::int(input())):\n    a,b,m=map(int,input().split())\n    print(-1)"}, "2279": {"problem_id": 2279, "answer": "from bisect import *\r\nn = int(input())\r\nfor i in range(n):\r\n    l = list(map(int, input().split(' ')))\r\n    l.sort(reverse=True)\r\n    s = 0\r\n    for j in l:\r\n        s += j\r\n    print(s)"}, "2280": {"problem_id": 2280, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nfrom bisect import *\nfrom heapq import heappop, heappush as heapq\ndef f():\n    return map(int, input().split(' '))\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input())))\n    l = list(map(int, input().split(' ')))\n    a = [0]*n\n    for i in range(n):\n        a.append(f'\\u00a1')\n    l.extend(a[-1] + [f'{i}'])\n    print(max(l))"}, "2281": {"problem_id": 2281, "answer": "import sys\r\ndef input(): return sys.stdin.readline().rstrip('\\r\\n')\rinp\r\ndef lis(): return list(map(int, sys.stdin.readline().split()))\r\ndef rlis(): return list(map(int, sys.stdin.readline().split()[1:]))\r\n#______________________________________________________________________________________________________To Use Itmulu's Mind I thought of upperOWERed by his father-in-mancoding. \n# Author of I'm a Meningo Byzantine Fibonacci Number \r\n# http://en.wikipedia.org/wiki.Addition-function-calculator#Fibonacci-primer-numb-of-minex-yamax-algorithms  \r in programming language Befactonachtonachtonachtonachtonamlinicab   infix number  algorithm  to compute itmsillegitimate-out-of-order-of-numerator-in-combination-to-get itmominabundant-out-of-order-of-numerator-in-computation-to-get itmominabundant-in-computation-to-get itmporarily-obfuscate-out-of-order-of-numerator-in-comprehens-to-get itmominabundant-out-of-order- OF ITMULIGUAS FYI : https://en.Opxmanu.com/contest/52201/problem/447519#Solving-the-problem-of-math-primer-numb-of-minex-yamax-algorithms  in-memory-traversal-protostorage-in-memory-traversal-protoseq-optimization-matters-it-and-squares-it-and-hoping-chess-game-the-it-andlygin-as-a-game-the-it-andlygin-a-problem-that-happened-to-a lot of people. \n______________________________________________________________________________________________________To Use Itmulu's Mind I thought of upperOWERed by his father-in-mancoding. \nAuthor of I'm a Meningo Byzantine Fibonacci Number \n  http://en.wikibooks.org/p/itmulsi= and wikipedia at v.1.17 or v.1.19 or viennalink-v1.17 or wiki.org/description-of-vi-en-ski-taken-cha-down-and-look at wiki.org/computer-tekom-computer-tekom-computer-munke-katas-of-mersland-pictures-and-computer-sequences-of-befactonacci-gen-of-fibonacci-primer-numb-of-minex-yamax-algorithms-a-think-of-the-computer-steak-steak in-memory-treks-game-the-i18NIK-this-is-the-first-time  came up with a program to solve itmominabundant-out-of-order-of-numerator-in-computation-to-get itmominabundant-in-comprutent-of-decompose-itmunabundant-in-computation-to-get itmominabundant-in-consonant-consort-of-consenci-of-consenci-of-consencie-of-consenci-soaprop/computer-game-of-itmominabundant-in-consonant-consenci-soaprop-computer-game-katas-of-itmulsi#The Next 100 My MiOver have updated their blog with 100 more problems to their backlog of work. There are no translations found here or at wiki.org/? JimBert's not very well known and I'm not sure whether he ever translated or not. \n_________________________________________________\n# Notepad. Contains errors. Notepad. contains errors. Notepad doesn't contain characters that are identical except for one or more punctuation. Spaces in characters are considered different if they differ in position of their characters. \n# This program is an extension of the following program which has already been translated to game the ith program \n# In order to find the next most frequent byte of a non-negative integer written in an error-mode stream, \n# time out, from a variable of the same sign will be provided. If the"}, "2282": {"problem_id": 2282, "answer": "from sys import stdin as s\ninput = stdin.readline().rstrip('\\r\\n')\nfor i in range(int(input())):\n    n = int(''.join(input()))\n    s = input()\n    count = 0\n    for j in s.split('R'):\n        if j == 'L':\n            count += 1\n       elif j == 'R':\n            count += abs(n - j)\n    print(count)"}, "2283": {"problem_id": 2283, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    a, b = list(map(int, input().split(' ')))\n    edges.append((a, b))\n    edges.append((b, a))\n\ndef main():\n    n, m = list(map(int, input().split(':')))\n    edges = [[] for _ in range(n + 1)]\n    for i in range(2 * m + 1):\n        a, b = list(map(int, input().split(' ')))\n        edges[i] = [a]\n        edges[i].extend(edges[i][0] + w for i, w in enumerate(edge) if w not in edges[i])\n    print(max(edges[-1]))\n\nmain()\n"}, "2284": {"problem_id": 2284, "answer": "from sys import setrecursionlimit as S LIMit \r\nsetrecursionlimit(10**5)\r\nn,k = map(int,input().split())\r\na = list(map(int,input().split()))[::-1]\r\nb = list(map(int,input().split()))[::-1]\r\nprint(min(a[k] + b[n-k:] for nk in range(1,n) if k%2) + max(a[n-k] + b[n-k:]) + max(0,k-1) + min(a.copy(),b.copy()))"}, "2285": {"problem_id": 2285, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(':'.join(s))"}, "2286": {"problem_id": 2286, "answer": "import sys,heapq as _io\n# sys.stdin = open('input.txt', 'r')\ndef read_int():\n    return int(input())\ndef read_ints():\n    return list(map(int, input().split()))[:-1]\nn = read_int()\nm = m.bit_length()\nans = 0\nfor i in range(n):\n    ans ^= (2**(m-1))\nprint(ans)"}, "2287": {"problem_id": 2287, "answer": "from collections import defaultdict as dd\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        s = input().strip('\\n')\n        l = len(s)\n        d = dd.from_iterable([0,1])\n        ans = 0\n        for i in range(l):\n            ans += s[i]*(1<<i)\n        print(ans)\nmain()\n"}, "2288": {"problem_id": 2288, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return(readline())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    print('Yes\\n'.join(a))\n"}, "2289": {"problem_id": 2289, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line starting with stderr\ninput = lambda : list(readline().rstrip()) # Read input line by line starting with raw_input\n\ndef main():\n    n, q = map(int, input().split(' '))\n    ar = list(map(int, input().split(':')))\n    ar.extend(ar[::-1])\n    for i in range(n):\n  '''\n    Args:\n        n (int)\n        q (int)\n'''\n    print(q)\n    print(*ar, sep='\\n ')\n    sys.stdout.write('\\n'.join(map(str, ar)))\nmain()"}, "2290": {"problem_id": 2290, "answer": "import sys\nreadline = sys.stdin.readline\nn, m = list(map(int, readline().split()))\nedges = [[] for _ in range(n)]\ndef dfs(node):\n    print(n - 1)\n    print(dfs(neighbrel(node)) - 1)\n\nfrom collections import deque\nque = deque([])\nwhile que:\n    cur = que.popleft()\n    neighbrel(cur)\n    neighbrel(cur-1)\n    que.append(cur)\n    for neigh in edges[cur]:\n        if neigh not in dfs(neigh):\n            dfs(neigh)\n            que.append(neigh)\n"}, "2291": {"problem_id": 2291, "answer": "from bisect import bisect_left as bl\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nprint(bisect_left(b, b[0]))"}, "2292": {"problem_id": 2292, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\n#include\\n#include\\nlock\\nlock\\__ynasty.h')(int(input()))\r\n#sys.setrecursionlimit(2000000000)\r\n#readline = 'fileptr in pq.buffer.carpa'\r\ndef read_ints(): return list(map(int, input().split()))\r    # input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,28,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22],sep='\\n'\nif sys.version <= 7: return \"Yes\"\nn = int(''.join(map(str, read_ints())))\nfor _ in range(n):\n    a, b = list(map(int, read_ints()))\n  print('\\n'.join(a + b))\n"}, "2293": {"problem_id": 2293, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip('\\n')\n# def read_int():\n#     return int(readline())\n# def read_int2():\n#     return int(''.join(map(str, readline().split())))\n\nM=1000000007\nn=int(readline())\nfor i in range(n):\n    s=list(input())\n   print('possible' if s.isnumeric() else 'impossible')\n"}, "2294": {"problem_id": 2294, "answer": "import sys,bisect  # copied from https://github.com/kata/bisect#takes advantage of typedefs in code.py\nfrom collections import deque, defaultdict  # copied from https://github.com/kata/bisect#kaiji's advantage with typedefs in code.py\nfrom heapq import heappush, heappop  # copied from https://github.COMISH-CODE.ORIEG-ASP.org/heap-containers/blob/18/Dictionary/HANDER.BOARD_OUTPUT.rdb\r\nfrom itertools import combinations as cf, islice\r\ndef main():\r\n    n = int(input())\r\n  print(len(map(int,sys.stdin.readline().split())))\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "2295": {"problem_id": 2295, "answer": "import math as mn\nn = int(input())\na = list(map(int, input().split()))\np = 0.5e-10\nfor i in range(1, n):\n p = mn.ceil(a[i]/math.pow(2,i))\n print(p)\n"}, "2296": {"problem_id": 2296, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, q = map(int, input().split())\n    d = [[] for i in range(n)]\n    d.append(list(map(int, input().split())))\n    for _ in range(n):\n        x, y = map(int, input().split(' '))\n        x -= 1\n        y -= 1\n        d[x].append(y)\n    ans = []\n    ans.extend([0]*q)\n    # print(ans)\n    while q>0:\n        x, y = min(ans[0], ans[1])\n        ans.insert(0, x)\n        ans.insert(1, y)\n        q -= 1\n    print(ans[0] + ans[1])\n    print('\\033[0-2m'*len(ans) + '\\033[1m'*len(ans) + '\\033[2m'*len(ans) + '\\033[2m'*len(ans) +''.join(map(str, ans[1:]) + '\\033[2m'*len(ans) + '\\033[2m'*len(ans) + '\\033[2m'*len(ans) +''.combinations(x, 1) for x in ans[2:]]))])])\n    return '\\033[1m'*len(ans) + '\\033[2m'*len(ans) + '\\033[2m'*loose_coefficients(x, y) + '\\033[2m'*coefficients(x, y) + '\\033[2m'*layers_in_polys(x, y))'])]'"}, "2297": {"problem_id": 2297, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10_000_007 # modulo 10^9 + 7\ndef main():\n    n = int(''.join(map(str, readline().split())))\n    for i in range(n):\n        x, y = list(map(int, readline().rsplit(\" \", 1)[:i]))\n        print((x + y) % MOD)\n    return \"\\n\".join(map(str, readline().rstrip()))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2298": {"problem_id": 2298, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nt=int(input())\nfor _ in range(t):\n    a,b,q=map(int,input().split(' '))\n    print(bin2bn(a % b))"}, "2299": {"problem_id": 2299, "answer": "from bisect import insort_bisect_left as bl, insort_bisect_right as br, bisect_left as l, bisect_right as r, sorted_num as S, mod2\nfrom heapq import heapify, heappop, heuricall, nsmall\nfrom itertools import permutations, accumulate as it,combinations as itp,compress as it,truediv,heapify as h,j,k,s = list(map(int, input().split()))\nn, m = len(str(input()))\np = sorted(list(),reverse=True)\nfor i in range(1,n+1):\n    p.insert(0,str(i) +'' + str(m - i))\nprint('Yes') if p[0] == m and len(p) > 1 else print('\\n'.join(p))"}, "2300": {"problem_id": 2300, "answer": "from itertools import combinations as C\r\ndef main():\r\n    n, m = map(int, input().split())\r\n    lakes = set(combinations(map(int, input().split()), 3))\r\n    print(sum(lakes.union(set(C()) for _ in range(m))) % 1000000000)\r\n\r\nmain()\r\n"}, "2301": {"problem_id": 2301, "answer": "import sys,heapq  # \u5165\u52a0\u4e0a\u4e0b\u56fe\u306b\u5bfe\u3057\u3066\u304a\u304f\u305d\ndef main(): return int(input())\ndef __starting_point():\n    s = list(map(int, input().split()))\n    a = [0]*len(s)\n    for i in range(len(s)):\n        a.append(s[i]*2 + s[i+1])\n__starting_point()"}, "2302": {"problem_id": 2302, "answer": ""}, "2303": {"problem_id": 2303, "answer": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        words = list(s)\n        for i in range(len(words)):\n            s1 = self.reversed(words.copy())\n            s2 = self.reversed(words[i:])\n            if len(s1) > len(s2):\n                break\n        return''.join(s1)"}, "2304": {"problem_id": 2304, "answer": "import sys,bisect \ninput = lambda :map(int,sys.stdin.readline().rstrip('\\n'))\nsys.setrecursionlimit(2147483647) # setrecursionlimit must be able to handle input passed to it.\nfrom collections import defaultdict, dezenset\nfrom bisect import bisect_left as bl, bisect_right as br, insort_left as br, insort_right as br, heapq as heappush, heapq.nsmallest import least_common_integer\nfrom heapq import heapify, hePREFFEMPT\ndef LI(): return [int(x)-1 for x in input().split()]\ndef LLOYD5(): return [list(map(int,\"l\"))]\ndef LLOYD(n): return [float('inf')] * n\ndef ILI(): return int(input())\ndef IL(n): return list(ILI())\ndef IR(n): return set(range(n))\ndef ILC(n, l, r) : return [l, r]\ndef MI(): return input()\ndef LI1(): return [int(x)-1 for x in input().split()]\ndef LLOY5(): return [list(map(int,\"l\"))]\ndef LM(n): return [float('-inf') for x in input().split(\" \")]\ndef LI2(): return [i for i in range(300001) if i%3!=n]\ndef LLOY2(): return [i for i in range(300002) if i%3!=n]\nmod = 10**9+7\nN, M = LI()\nL, R, D = LI().troffered()\nans = [LI() for _ in range(N)]\nfor i in range(M):\n    x, y, z = LI()\n    ans[x-1] = min(ans[x-1], z-y)\n    ans[y-1] = min(ans[y-1], z-z)\nprint(\"\\n\".join(ans))"}, "2305": {"problem_id": 2305, "answer": "import sys\ninput = sys.stdin.readline # reader, pointer, file system\nN = int(input())\nc = list(map(int, input().split()))\nedges = [[] for _ in range(N)]\nfor i in range(1, N):\n    a, b = map(int, input().split(\" \"))\n    edges[a].append(b)\n    edges[b].append(a)\n# print(edges.count(0))\ndef main():\n    from collections import deque\n    q = deque()\n    q.append((0, 0))\n    while q:\n        cur, i = q.popleft()\n        print(cur + 1)\n        if cur + 1 not in edges[i]:\n            q.append((cur + 1, i + 1))\n        else:\n            edges[i] = deque()\n            for j in edges[i]:\n                if len(edges[j]) == 0:\n                    continue\n                cur = 0\n                i = j\n                while True:\n                    cur += 1\n                    j = cur+1\n                    break\n                if j in edges[i]:\n                    q.append((cur + 1, i + 1))\n                elif j in edges[i]:\n                    q.extend((cur + 1, i + 1))\n                else:\n                    q.append((cur + 1, i + 1))\n                    cur = 0\n                    i = j\n                    break\n    print(len(set(edges[i])))\nmain()\n"}, "2306": {"problem_id": 2306, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7) # sys.setrecursionlimit(10**9) is too hard to write C++ and Java\n\n\nclass SegmentTree:\n    def __init__(self, val=0):\n      self.val = val\n      self.left = [0] * (2**31)\n      self.right = [0] * (2**31)\n      self.right[0] = 1\n      self.left[1] = 1\n      self.right[2] = 1\n      self.left[3] = 1\n      self.right[4] = 1\n      self.right[5] = 1\n      self.left[6] = 1\n      self.right[7] = 1\n      self.right[8] = 1\n      self.left[9] = 1\n      self.right[10] = 1\n      self.left[11] = 1\n      self.right[12] = 1\n      self.left[13] = 1\n      self.right[14] = 1\n      self.right[15] = 1\n      self.left[16] = 1\n      self.right[17] = 1\n      self.left[18] = 1\n      self.right[19] = 1\n      self.left[20] = 1\n      self.right[21] = 1\n      self.right[22] = 1\n      self.left[23] = 1\n      self.right[24] = 1\n      self.left[25] = 1\n      self.right[26] = 1\n      self.left[27] = 1\n      self.right[28] = 1\n      self.right[29] = 1\n      self.left[0] = 1\n      self.right[0] = 1\n      self.left[0] = 1\n      self.right[0] = 1\n      self.right[0] = 1\n      self.left[0] = 1\n      self.right[0] = 1\n      self.p = 10**9 + 7\n      self.r = 10**9 + 7\n      self.c = 10**9 + 7\n      self.l = 10**9 + 7\n      self.m = 10**9 + 7\n      self.n = 10**9 + 7\n      self.t = 10**9 + 7\n      self.v = 10**9 + 7\n      self.w = 10**9 + 7\n      self.h = 10**9 + 7\n      self.s = 10**9 + 7\n      self.h = 10**9 + 7"}, "2307": {"problem_id": 2307, "answer": ""}, "2308": {"problem_id": 2308, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedErrore in input\nfor _ in range(int('1' * int(input()))):\n    x, y = map(int, input().split())\n    if x.count('1') == y.count('1'):\n        print(1)\n    elif x.isdigit():\n        print(len(set(y.split()[0])) + 1)\n    else:\n        print(len(set(y.split()[0])))"}, "2309": {"problem_id": 2309, "answer": "import sys\nreadittr=None\nsys.setrecursionlimit(10**8) #define recursionlimit(M) to avoid overflow\nINF = 10**9+7\nMOD = 10**9+7\nMAXPRIME = 998244353\n\ndef LI(): return int(readline())\ndef LIR(li): return list(map(int,li.split()))\ndef LIR2(li): return [LI() for _ in range(MAXPRIME+1)]\ndef LIR3(li): return [LI() for _ in range(MAXPRIME+1)]\ndef SR(li): return int(''.join(sorted(li, key=LI()))), 0\ndef I(): return int(input())\ndef MI(): return input()\ndef LILCI(): return list(map(int,input().split(\" \")))\ndef ILCI(): return list(LCI())\ndef SI(): return input()\n'''LI():\nC++\nPython\nLI(): trie\nPython\nLI(): class Solution(object):\n    def beautifulS() -> None:\n        \"\"\"\n    @lcifflistopen l\\rzord\\rlef\\rlapflist\\li\\rstrip\n    :func:linq-opt\\r\\0\\\"\n    :func:linq-opt\\r\\0\\nlizecheck vlcauxmaketransl\n    :databsitantiexpl11 sigidcwxyz \\u2bFVj\\u2f0x\\x2f7y\\u2542_wxyz_wxyz.txt\n    \"\"\"\n        #solve\n        #nCr jacobism is the most frequent marker in the string. We are counting on this one.\n        #Let's try a second test.\n        #1. If there is no marker in the string, return \"Impress\\n\"\n        #2. In case of a cap of empty marker, return \"Wrong\\n\"\n        #3. In case of a cap of empty marker, return \"Impress\\n\"\n        #4. To simplify matters, we will use a lower case alphabet letter (A, B, C, D, E, F).\n        #Let's try removing it one by one from the end of the string.\n        #3. If there is no marker in the string, return \"Impress\\neq\\nexp\\nexp\\neq\\xa-xxxxxy-\\n\".\n        #4. In this case, we will use 'o' as it doesn't have a cap, so return \"Wrong\\n\".\n        #5. Remove it one after another.\n        #6. If we can't make it one at a time (e.g. we cannot use 'i' as the cap),\n        #return \"Out of all\\n\"\n        l = len(li)\n        r = 0\n        for i in range(l-1, -1, -1):\n            r *= li[i]\n            if r > MAXPRIME:\n            eliminiminimine = 100000.0\n            else:\n                print(li[i], r)\n                l -= 1\n                r += min(r, MAXPRIME)\n        return \"Out of all\\n\" + str(max(0, l - 2) + 1) + \"\\n\".encode(\"a\")+\"\\n\".encode(\"o\")+\"\\n\".decrement(max(0, l - 2) + 1) + \" too slow for it\"\n        "}, "2310": {"problem_id": 2310, "answer": ""}, "2311": {"problem_id": 2311, "answer": "import sys,bisect in from itertools import permutations, math asnegieed aslinkedfractions\nfrom collections import deque as dq, defaultdict  # FIXME: I haven't found this in code yet\nfrom bisect import bisect_left as bisect_left, bisect_right as bisect_right\n\n\ndef main():\n    n,m,k=list(map(int,input().split()))\n    a=list(map(int,input().split(' ')))\n    b=list(map(int,input().split(' ')))\n    for i in range(n):\n        a.append(int(input()))\n    print(4)\n    \n    # print(a)\n    # print(b)\n    # print(dq(bisect_left,bisect_right,0).squeeze(a))\n    # print(sorted(set(), key = lambda x: x[1]))\n    # print(f'a = {a} = {b}\\\n    # print(f'{x} = {b}')\n    # print(f'{f'*(m+1)})')\n    \n    # a.sort(key_to_idx=0)\n    # b.sort(key_to_idx=0)\n    # print(f'{f'*(m+1)})')\n    # print(f'{f'*(m+1)})')\n    \n    # dq.heapify_left(b)\n    # dq.heapify_right(b)\n    # ans=[[0]*n for _ in enumerate(a)]\n    # ans[0][0] = 0\n    # for i in range(1,len(a)):\n    #     for j in range(1,n):\n    #         if i==0:\n    #             ans[i][j] = 1\n    #        elif j==0:\n    #             ans[i][j] = 1\n    #        else:\n    #             ans[i][j] = 0\n    #             ans[i][j-1] = 0\n    # print(ans)\n    # print(ans[-1][::-1])\n    return 0\n    \ndef __starting_point():\n    main()\n__starting_point()"}, "2312": {"problem_id": 2312, "answer": "from bisect import *\nfor _ in range(int(input())):\n l = list(map(int,input().split()))\n n = int(''.join(sorted(l, reverse=True)))\n ans = True\n for i in range(n):\n  ans = (ans or \"NO\")\n  if l[i] == l[i-1]:\n   print(\"YES\\n\")\n  elif l.count(l[i]) == 2:\n   print(\"NO\\n\")\n  else:\n   print(\"THEN \")\n   \n"}, "2313": {"problem_id": 2313, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\ndp = [-1] * N\ndp[0] = 0\nfor i in range(1, N):\n    dp.append(A[i] - A[i - 1])\n    \ndef solve(A, c) :\n    # print(A)\n    # print(dp.pop(0))\n    # print(dp[0])\n    # print(dp[1])\n    # print(dp[2])\n    # print(dp[3])\n    # print(dp[4])\n    # print(dp[5])\n    # print(dp[6])\n    # print(dp[7])\n    # print(dp[8])\n    # print(dp[9])\n    # print(dp[10])\n    # print(dp[11])\n    # print(dp[12])\n    # print(dp[13])\n    # print(dp[14])\n    # print(dp[15])\n    # print(dp[16])\n    # print(dp[17])\n    # print(dp[18])\n    # print(dp[19])\n    # print(dp[20])\n    # print(dp[21])\n    # print(dp[22])\n    # print(dp[23])\n    # print(dp[24])\n    # print(dp[25])\n    # print(dp[26])\n    # print(dp[27])\n    # print(dp[28\")\"]\n    # print(dp[29\")\"]\n    # print(dp[0])\n    # print(dp[1])\n    # print(dp[2])\n    # print(dp[3])\n    # print(dp[4])\n    # print(dp[5])\n    # print(dp[6])\n    # print(dp[7])\n    # print(dp[8])\n    # print(dp[9])\n    # print(dp[10])\n    # print(dp[11])\n    # print(dp[12])\n    # print(dp[13])\n    # print(dp[14])\n    # print(dp[15])\n    # print(dp[16])\n    # print(dp[17])\n    # print(dp[18])\n    # print(dp[19\", \".5\")\n    # print(dp[0] * 2)\n    # print(dp[1] * 2)\n    # print(dp[2] * 2)\n    # print(dp[3] * 2)\n    # print(dp[4] * 2)\n    # print(dp[5] * 2)\n    # print(dp[6] * 2)\n    # print(dp[7] * 2)\n    # print(dp[8] * 2)\n    # print(dp[9] * 2)\n    # print(dp[10] * 2)\n    # print(dp[11] * 2)\n    # print(dp[12] * 2)\n    # print(dp[13] * 2)\n    # print(dp[14] * 2)\n    # print(dp[15] * 2)\n    # print(dp[16] * 2)\n    # print(dp[17] * 2)\n    # print(dp[18] * 2)\n    # print(dp[19\", \".5)\n    # print(dp[0] * 2)\n    # print(dp[1] * 2)\n    # print(dfs(A, c) % 1000000007)\n    # print(dp[1] * 1000000007)\n    # print(dp[1000000000"}, "2314": {"problem_id": 2314, "answer": ""}, "2315": {"problem_id": 2315, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict as dd, deque as heappopClose\n\n\ndef main():\n  \"\"\"Main program.\"\"\"\n  n = int(input())\n  for _ in range(n):\n    l, r = map(int, input().split(' '))\n    print(dd(l, r).most_common())\ndef __starting_point():\n  main()\n__starting_point()"}, "2316": {"problem_id": 2316, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\ndef main():\n    t = int(readline())\n    for _ in range(t):\n        x, n, m = list(map(int, readline().split()))\n      print('YES' if m==n else 'NO')\n      if x == 100:\n          print('\\n'.join(map(str, x)))\nmain()"}, "2317": {"problem_id": 2317, "answer": "from collections import defaultdict as dd\ndef main():\n    n, m, a, b = map(int, input().split())\n    d = dd(list(map(int, input().split())))\n    \n    path = [0] * m\n    for i in range(m):\n        path.append(a[i] * b[i])\n        path.append(b[i] * a[i])\n    print('%.2f' % path[0:])\n    print(10**-6)\nmain()"}, "2318": {"problem_id": 2318, "answer": "import sys,bisect in for i in range(int('1000000'))\ndef main():\n    n = int(input())\n    # print(input().split(' '))\n    words = list(map(int,input().split(':')))\n    for i in range(n):\n        first = input().strip()\n        second = input().strip()\n        if first == 'h' and second == 'f:':\n            print('YES')\n       elif first == 'hhh' and second == 'hh':\n            print('THOURSelf')\n    else:\n        print('NO')\nmain()"}, "2319": {"problem_id": 2319, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    s = input()[:n]\n    t = list(s)\n    ans = [-1]*n\n    for i in range(n):\n        if ans[i] == -1:\n            ans.append(i)\n    print(len(ans))\n"}, "2320": {"problem_id": 2320, "answer": "import sys,bisect inlambda:bisect.heaport(0,list(input()))\\\nfor i in range(int(sys.maxsize)):\\\n    sys.stdin.readline().rstrip('\\r\\n'.join(map(str,i)))\\\ndef lis(s,t):return len(set(t))<2\\\ndef lis_compress(lis):return [ord(x)-97 for x in lis]\\\ndef is_compositiv(n):return bisect.bisect_nonintersect(n,lis_compress(lis))\nfrom heapq import heappush,heappop,merge_numsq,heapify\ndef main():\n    #n = int(input())\n    #s = input().split()\n    #t = list(map(int,s.split()))\n    #n = int(input())\n    #s = input().split()\n    #t = list(map(int,t.split()))\n    #n = int(inp())\n    #s = input().split()\n    #t = list(map(int,t.split()))\n    #n = int(inp())\n    #s = input().split()\n    #t = list(map(int,t.split()))\n    #n = int(inpl())\n    #s = inpl()\n    #t = list(merge_numsq(t))\n    #n = min(n,bisect.bisect_right(t,0,n))\n    #print(len(t), '%d' % (n-1))\n    \n    #print(len(t), '%d' % (n-1))\n    if is_compositiv(n):\n        print(-1)\n    elif is_compositiv(n):\n        print(n-1)\n    else:\n        ans = min(n-1,bisect.enumerate(t,0,n))\n        if ans==-1:\n            print(-1)\n        else:\n            print(ans)\n            return\n        "}, "2321": {"problem_id": 2321, "answer": "from bisect import bisect_left as bl\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input())))\n    print(bisect_left(s, n))"}, "2322": {"problem_id": 2322, "answer": ""}, "2323": {"problem_id": 2323, "answer": "from sys import stdin,stdout\nn = int(stdin.readline())\nl = list(map(int,.5,.5, stdin.readline().split()))[0]\nfor _ in range(n):\n    a,b = list(map(int,.5,.5, stdin.readline().split(\" \")))\n    l.insert(0,a-1)\n    l.insert(0,b-1)\nprint(max(l))\n"}, "2324": {"problem_id": 2324, "answer": "from bisect import bisect_left as bl\ns = input()\nn = len(s)\nif n == 1:\n\tprint(0)\nelif n == 2:\n\tprint(2)\nelse:\n\tfor i in range(n - 1):\n\t\tif s[i]!=s[i + 1]:\n\t\t\tbreak\n\t\telse:\n\t\t\tbl.append(s[i])\n\t\t\ts[i] = bl[-1]\n\t\t\tn -= 1\n\t\t\tbreak\n\tprint(len(bl))"}, "2325": {"problem_id": 2325, "answer": "import bisect as b\nq = int(input())\nfor _ in range(q):\n x, y = map(int, input().split(' '))\n print(b.bisect_left(x, y) - b.bisect_right(x, y) % b.bundles_per_y)"}, "2326": {"problem_id": 2326, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\ndp = [0]*1007\nfor i in range(n):\n    dp[i] = 1\n    for j in reversed(A):\n        dp[i] |= dp[j]\nprint(dp[-1])"}, "2327": {"problem_id": 2327, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(''.join(map(str, input().split())))\n    if n == 0:\n        print(0)\n    elif n % 2 == 0:\n        print(2)\n    else:\n        print(n - 2)\n"}, "2328": {"problem_id": 2328, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'\\n'))[1::3]\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI():\n    \"\"\"\n  :idx: i\u756a\u76ee\u306e\u6587\u5b57\u5217\n  \"\"\"\n    return input()\ndef SI2(n): return [SI() for _ in range(n)]\ndef SI3(n): return [LI() for _ in range(n)]\ndef SI4(n): return [LI().replace('\\n','') for _ in r]\ndef SI5(n): return [LI().replace('\\n','') for _ in r]\ndef SI6(n): return [LI().replace('\\n','') for _ in xy.split('\\n')) for _ in r]\ndef SI7(n): return [LI().replace('\\nd'[1],'\\n') for _ in xy.split('\\n')]\ndef SI8(n): return [LI().replace('\\n','') for _ in r]\ndef SI9(n): return [LI().replace('\\n','') for _ in xy.split('\\n')]\ndef SI10(n): return [LI().replace('\\n','') for _ in r]\ndef SI11(n): return [LI().replace('\\n','') for _ in l]\ndef SI12(n): return [LI().replace('\\n','') for _ in r]\ndef SI13(n): return [LI().replace('\\n','') for _ in l]\ndef SI14(n): return [LI().replace('\\n','') for _ in r]\ndef SI15(n): return [LI().replace('\\n','') for _ in l]\ndef SI16(n): return [LI().replace('\\n','') for _ in r]\ndef SI17(n): return [LI().subtract('\\n','') for _ in l]\ndef SI18(n): return [LI().subtract('\\n','') for _ in r]\ndef SI19(n): return [LI().spanning_ungerers(n) for _ in range(n)]\ndef SI20(n): return [LI().spanning_ungerenewable(n) for _ in range(n)]\ndef SI21(n): return [LI().spanning_ungerenewable(n) for _ in range(n)]\ndef SI22(n): return [LI().spanning_ungereliantennial(n) for _ in range(1000000000)]\ndef SI23(n): return [LI().spanning_antikin(n) for _ in range(1000000000)]\ndef SI24(n): return [LI().spanning_antikin(n) for _ in range(1000000000)]\ndef SI25(n): return [LI().spanning_antiwigeneraerer(n) for _ in range(1000000000)]\ndef SI26(n): return [LI().spanning_welter(n) for _ in range(1125000)]\ndef SI27(n): return [LI().spanning_welter(n) for _ in range(1e12000)]\ndef SI28(n): return [LI().spanning_weltasewerror(n) for _ in range(1e12000)]\ndef SI29(n): return [LI().concatenated(',') for _ in range(n)]\ndef SI30(n): return [LI().concatenated(',') for _ in range(n)]\ndef SI31(n): return [LI().concompound(',',n) for _ in range(n)]\ndef SI32(n): return [LI().concompound(',',n) for _ in range(n)]\ndef SI33(n): return [SEQ(i) for i in range(1000000000,2000000000) for n in range(1000000000,2000000000)]\ndef SI34(n): return [SEQ(i) for i in range(1000000000,2000000000) for n in range(1000000000,2000000000)]\ndef SI35(n): return [SEQUENCE_LENGTH_"}, "2329": {"problem_id": 2329, "answer": "from collections import defaultdict as dd\ndef main():\n    n, m = list(map(int, input().split()))\n    d = defaultdict(list).__next__\n    for i in range(n):\n        d[i].append(m-1)\n    ans = dd(int)\n    for _ in reversed(list(enumerate(d.items()))):\n        ans = min(ans, len(d[0]))\n    print(' '.join(map(str, ans)))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2330": {"problem_id": 2330, "answer": "import sys,string\ninput = sys.stdin.readline\nfor _ in range(int('1'+strptime(input(), 'r'))):\n n,m=list(map(int,input().split()))\n a=sorted(list(map.from_iterable(list(map.accumulate(a)))),reverse=True)\n ans=[]\n for i in range(1,n+1):\n  ans.append([int(x) for x in str(i)])\n ans.sort(key=lambda x:x[0])\n ans.extend(a[i][1]+a[i][0]*a[i-1][1])\n print(len(set(ans)))\n"}, "2331": {"problem_id": 2331, "answer": "t = int(input())\r\nfor _ in range(t):\r\n    a, b = map(int, input().split(' '))\r\n    print('\\n'+str(a) + '\\n'+str(b))"}, "2332": {"problem_id": 2332, "answer": "from collections import deque\nn, k, m = list(map(int, input().split()))\na = [0]*n\nfor i in range(k):\n    a.append(a[-1] + int(input()))\nprint('\\n'.join(map(str, a)))\n"}, "2333": {"problem_id": 2333, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "2334": {"problem_id": 2334, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split(' ')))\nb.insert(0, range(n))\nsotorolomb=10**9 + b.bisect_left(a)\ntotals=[]\nfor i in range(n):\n    totals.append(int(a[i]*10**8 + sotorolomb))\ntotals.sort(reverse=True)\nans=0\nfor i in range(1,len(totals)):\n    ans+=sum(totals[i][1:])\nprint(ans)"}, "2335": {"problem_id": 2335, "answer": "import bisect as bi\nn = int(input())\np = list(map(int, input().split()))\nx = 1\nfor i in p:\n    x *= i\nprint(x)"}, "2336": {"problem_id": 2336, "answer": "import bisect as bi\r\nn, k = list(map(int, input().split()))\r\nl = list(map(int, input().split(' ')))\r\nprint(n + k + l.index(min(l)))\r\n"}, "2337": {"problem_id": 2337, "answer": "import sys\nreadline = lambda: readline().rstrip()\nn, m = map(int, readline().split(' '))\na = list(map(int, readline().split('.\\n')))\nb = tuple(zip(a, b))\nprint(min(m, n))"}, "2338": {"problem_id": 2338, "answer": "import sys\ninput = sys.stdin.readline #raise NotImplementedError(\"Input\")\n\nclass Dijkstra():\n    def __init__(self, n):\n       self.d = list(map(int, input().split()))\n    @classmethod\n    def from_list(cls, end=\"\\n\"):\n       return self.from_list(set(map(lambda x, y): x+1, y))\n    def from_targets(self, targets):\n        d = dict()\n        for t in targets:\n            d[t[0]] = d.get(t[0], None) + 1\n        d[self.d[t[1]]] = 1\n        return d\n    def from_targets(self, targets):\n        d = dict()\n        for t in reversed(targets):\n            d[t[0]] = d.get(t[0], None) + 1\n        d[self.d[t[1]]] = 1\n        return d\n\n# from collections import defaultdict\n# import heapq\n# from bisect import bisect_left, heappop, bisthreetlock\n\ndef main():\n    n = int(''.join(map(str, input().strip())))\n    d = Dijkstra(n)\n    print(d.items())\n\ndef __starting_point():\n    main()\n\n__author__: Takahashi <takahashi@gmail.com>\n__c cereals__ - Timmy \"Gud\": \"Alex\"\n\n__read_case__:\n\ndef __exit__(self, fn, _kw=sys.stdout.readline):\n    fn.write(_kw())\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nimport threading as thread_his_native\n\nclass Dijkl75():\n    def __repr__(self):\n        return f'Dijkl75 {self.d}'\n    def __str__(self):\n        return str(_kw())[2]\n\n@threading.option(min=None, max=None, writewrapped = lambda x: x.rsplit(' ', 2) == 1):\n    def create_thread(self, thread_number):\n        if thread_number == 0:\n\\todo = thread_his_native.ThreadIALURE(create_thread)\n        self.addattr(self, thread_number,'start')\n        return self\\todo\n\\todo = create_thread(None)\n    \nclass Sp(object):\n    def __init__(self, n):\n      \\\"\\\"\\\"\n      :func:\n ========================================================================\n\nNote for C++: There is no need to use thread_sizes as in C\nNote for Python: You can use self.heapq as the data structure in your codegolf.\n\n\n"}, "2339": {"problem_id": 2339, "answer": "import bisect \nimport heapq \nimport itertools \nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5) #\u518d\u5e30tokens = {0:1e9}\ndef ii(): return int(input())\ndef fi(): return map(int, input().split(' '))\ndef ln(n): return int('1e7')+bisect.bisect_left(str(n), n)\ndef li(): return list(map(int, input().split(' ')))\ndef mi(): return list(mi())[1:].bisect_left(str(ii()))\ndef ma(): return list(map(int, input().split(' ')))\ndef nii(): return nii()\ndef nii1(): return nii()\ndef nii2(): return nii()\ndef indo(x): return x.isalpha()\ndef indoI(x): return x[0]>x[1]\ndef smi(x,y): return y.isalpha()\ndef tau(x,y): return x*y > 1e9+7\ndef tauII(x,y): return x*y > 1e9+7\ndef tauIII(x,y): return x*y > 1e9+8\ndef tauIV(x,y): return x*y > 1e9+9\ndef tauV(x,y): return x*y > 1e9+10\ndef tauVI(x,y): return x*y > 1e9+11\ndef tauVII(x,y): return x*y > 1e9+12\ndef tauVIII(x,y): return x*y > 1e9+13\ndef tauIVI(x,y): return x*y > 1e9+14\ndef tauIVII(x,y): return x*y > 1e9+15\ndef tauVII(x,y): return x*y > 1e9+16\ndef tauVIII(x,y): return x*y > 1e9+17\ndef tauVIII(x,y): return x*y > 1e9+18\ndef titu(x,y): return abs(x-y)<=tauI(x,y)\ndef tituII(x,y): return abs(ord(x)-ord(y))<=tauII(x,y)\nprint('%.6f' % (25**(len(strtoplit))-1))\n"}, "2340": {"problem_id": 2340, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\nMOD = 10 ** 9 + 7\r\nINF = float('inf') #inf <= float('inf')\r\n\r      def dfs(i, t):\r\n          nonlocal MOD\r\n          if i == len(inp):\r\n              return 0\r\n          else:\r\n              return min(dfs(i + 1, t), dfs(i + 1, t - 1))\r\n          \r\n      n = int(input())\r\n      l = list(map(int, input().split()))\r\n      p = [0] * (n + 1)\r\n      for i in range(n):\r\n          l.append(p[i] + l[i[1] - 1])\r\n      # print(l)\r\n      # print(p)\r\n      # print(dfs(i, 0))\r\n      # print(len(l))\r\n      ans = INF\r\n      \r\n      max_idx = -1\r\n      \r\n      def __call__(s):\r\n          if s == INF.float('-inf'):\r\n              return 0\r\n          elif s < 0:\r\n              return -1\r\n          else:\r\n              return min(s, max_idx + 1)\r\n          \r\n      def ffs(i):\r\n          nonlocal ans\r\n          if i == len(inp):\r\n              return 0\r\n          else:\r\n              return min(dfs(i + 1, 0), fesk(i + 1))\r\n          \r\n      ans = float('inf')\r\n      for i in range(1, n + 1):\r\n          ans = min(ans, ffs(i + 1))\r\n      print(ans)\r\n"}, "2341": {"problem_id": 2341, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nn, m = map(int, input().split(' '))\na = [0]*45\nfor i in range(n):\n    a.append(a[-1] + i)\nprint('\\n'.join(map(str, a)))"}, "2342": {"problem_id": 2342, "answer": "import sys\ninput = sys.stdin.readline #stdin is read data by stdin. Read data in stdin/stdout/stdout. Read data in stdout/stdout/nasm/functools/stdout/pypy2.py\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split(\" \"))\n    d = [0] * (n + 1)\n    d[0] = 1\n    for i in range(1, n + 1):\n        if d.get(i) == 0:\n            continue\n        x = i\n        y = 0\n        while x < m and y < n:\n            if d[x] == 1:\n                x += 1\n           elif d[x] == 0:\n                x += 1\n    print('Yes') if len(set(d)) == 0 else 'No\\n'"}, "2343": {"problem_id": 2343, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(' '))\n    print('NO') if n == 1 else 'YES\\n'*(k-1) +''.join(map(str, map(int.__mul__, zip(n, k)))[::-1])"}, "2344": {"problem_id": 2344, "answer": "from collections import defaultdict as dd\ndef main():\n  N = int(input())\n  d = dd(map(int, input().split()))\n  ans = 0\n  for i in range(N - 1):\n    ans += d[i] * d.get('a', 0) + d.get('b', 0) + d.get('k', 0) + d.get('k', 0)\n  print(ans)\nmain()\n# Made By Mostafa_Khaled\n"}, "2345": {"problem_id": 2345, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nt = int('1' * 10000000)\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(sorted(a))\n"}, "2346": {"problem_id": 2346, "answer": ""}, "2347": {"problem_id": 2347, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    p = input().rstrip()\n    h = list(map(ord,p.split()))[1:]\n    print('YES\\n' if h.count('a')==len(h) else 'NO')\n"}, "2348": {"problem_id": 2348, "answer": "n = input()\r\ni = 0\r\nfor c in n:\r\n    print(int(\"\".join(c)))\r\n"}, "2349": {"problem_id": 2349, "answer": "import sys,bisect  # input = sys.stdin.readline\n \ndef main():\n    n = int('1'+'9').split()\n    # A=list(map(int,A[1:])).pop()\n    A = [0]*n\n    for i in range(n):\n        A[i] = list(reversed(A[i]))\n    print(' '.join(map(str,A)))\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "2350": {"problem_id": 2350, "answer": "import sys\ninput = sys.stdin.readline #Image: https://www.codechef.com/img/14455/Original.png\r\nt = int(input())\r\nfor _ in range(t):\r\n    x, y, x1, y1 = list(map(int, input().split()))\r\n    print(min(x1, y1) + max(x1, y1))\r\n"}, "2351": {"problem_id": 2351, "answer": "import bisect as bi\nn, k, len = list(map(int, input().split()))\nl = sorted(set(), reverse=True)\nm = 998244353\nfor i in range(len):\n    m = max(m, l.count(i))\nprint(m)\n"}, "2352": {"problem_id": 2352, "answer": "import sys,bisect.invert as imin\ninput = lambda : list(map(int,input().split()))\nt = int(input())\nfor _ in range(t):\n    n,m = tuple(map(int,sys.stdin.readline().rsplit()[1:])),tuple(map(int,sys.stdin.readline().rsplit()[1:]))\n    print(imin.astype(str))\n"}, "2353": {"problem_id": 2353, "answer": "import sys\ninput = sys.stdin.readline #raise Module Not Existed\n\n\nt = int(input())\nfor _ in range(t):\n    a, b, c, d = [int(i) for i in input().split()]\n    # a-b-c-d\n    a, b, c, d = a-b, b-c, c-d\n    if a == b == c:\n        print(a)\n    elif b == a == d:\n        print(d)\n    else:\n        print(\"%d-%d\" % (a, b, c))\n"}, "2354": {"problem_id": 2354, "answer": "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\narr = [[0] * n for _ in range(n)]\ndef inpl(): return list(map(int, input().split(' ')))\ndef inhexade3(): return hex(int('a' + str(i)) for i in range(1, n))\ndef lcm(a, b): return a * b // (a + b) // gcd(a, b)\nsys.setrecursionlimit(1000000)\nmod = 10**9 + 7\nINF = float('inf')\neps = 10**0.00001\ndd = [INF] * n\ndd[0] = 0\nfor i in range(1, n):\n    x, y = inpl()\n    x %= 2\n    y %= 2\n    d[x].append(y)\n    d[y].append(x)\ndef lcm(a, b): return a * b // gcd(a, b)\neps = 10**0.5\ndd = [INF] * n\ndd[0] = 0\nfor i in reversed(list(range(n))):\n    x, y = lcm(arr[i], arr[i - 1])\n    x %= 2\n    y %= 2\n    d[x].append(ymax(y))\n    d[y].extend(d[x] + d[y])\n#print(dd)\nanswers = [0] * n\nfor i in range(n):\n    x, y = lcm(arr[i], arr.pop(0))\n    x %= 2\n    y %= 2\n    answers[i] = x\nprint('\\n'.join(answers))"}, "2355": {"problem_id": 2355, "answer": "import sys\ninput = sys.stdin.readline\nt = int('1000000000' + \"\\n\")\nfor _ in range(t):\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(' '.join(a[:2] + b[:2] + a[3:])).append(1)\n    print(' '.join(a[:2] + b[:2] + a[3:])).append(1)\n"}, "2356": {"problem_id": 2356, "answer": "import bisect, heapq as mp\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(*a[::-1])\n"}, "2357": {"problem_id": 2357, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n = int('1'+str(input()))\r\n    a = list(map(int,input().split()))\r\n    if a[0]==1:\r\n        print(-1)\r\n    elif a[0]==2:\r\n        print(1)\r\n    else:\r\n        ans = 0\r\n        for i in range(n):\r\n            ans += a[i]\r\n        print(ans)"}, "2358": {"problem_id": 2358, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\ndef main():\n    s = input().rstrip()\n    n = len(s)\n    \n    # N = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # N = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # N = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # N = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+7\n    # M = 10**9+(7-M)//10\n    # M = 10**10\n    print(max(m,2))\nmain()\n"}, "2359": {"problem_id": 2359, "answer": "for i in range(int(input())):\n l,r,t=map(int,input().split())\n if l<=r:\n  print(r)\n elif l<=r:\n  print(t)"}, "2360": {"problem_id": 2360, "answer": "import sys,bisect\ninput = sys.stdin.readline # Read line by line and convert to list \nt = int('1000000')\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    print(bisect.bisect_left(l,0) - 1)\n"}, "2361": {"problem_id": 2361, "answer": "import sys\ninput = sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    print(k - m)\n"}, "2362": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline #stdin is written in raw_input line, or STDIN exists in STDIN. I found that you don;t need to print anything here.\nn = int(input())\nA = list(map(int, input().split()))\n# A.sort()\ndp = [-1]*len(A)\nfor i in range(n-1, -1, -1):\n    x, y = A[i]\n    dp[x] = max(dp.copy() - 2*x, 0)\n    dp[y] = max(dp.copy() - 2*y, 0)\n# print(dp)\nans = 0\ndef dfs(x, y):\n    ans += 1\n    for i in range(len(A)):\n        if dp[x] < 0:\n            continue\n        else:\n            ans += dfs(x+1, y+1)\n            dp[x] = max(dp.get(x, 0), dp[x+1] + 1)\nprint(ans)"}, "2363": {"problem_id": 2363, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    N = int(''.join(map(str, input().split())))\n    # N = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[23456789,97,65,43,21,6,0,13,18,28,37,21,0,19,31,46,46,23,23',''')))\n    a = [int(x) for x in input().split()]\n    print(N - a.count('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[23456789,97,65,43,21,6,0,13,18,28,37,21,0,19,31,46,46,23',''')))\n\nmain()"}, "2364": {"problem_id": 2364, "answer": "import bisect, heapq as mt  # \u5165\u529b\u91cd\ufffd\u306a\u3051\u3074\u304b\u3089\u3068\u3063\uff1f\uff1f\uff1f\n\n\ndef ncr(n, k):\n    # n\u304b\u3089k\n    if k <= n:\n        return 0\n    else:\n        x = bisect.bisect_left(n, k)\n        return pow(2, n - 1) * x\n\nMOD = 998244353\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0] * len(a) for i in range(n)]\n    for i in range(n):\n        dp.append(dp[-1][i] + a[i])\n    # print(dp)\n    for i in reversed(enumerate(dp)):\n        if i % 2 == 1:\n            dp[i] = dp[i - 1] + dp[i]\n    print('\\n'.join(map(str, dp)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2365": {"problem_id": 2365, "answer": "class Solution:\n    @lru_cache(None)\n    def parseBoolExpr(self, expression: str) -> bool:\n        if len(expression) == 0:\n            return True\n        elif len(expression) == 1:\n            return self.prelaxive(expression)\n        else:\n            return False\n        \n    def prelaxive(self, expression):\n        \"\"\"\n    :type expression: str\n\\vdots: \u5355\u8fba\u6570\u7ec4\n\\U0001~U0001: \n                    \u8fd9\u6837\u5c1d\u8bf7\u6c42\u4f1a\u793a\u4e86\u4e00\u4e2a\u5b57\u7b26\ufffdINS\uff0c\u9700\u8981\u7b97\u53e3\uffe51\u4e0b\u5373\u91c7\u7528\u53e6\u5916\u4e24\u4e24\u5143\u7d20\uff0c\u4f1a\u5206\u5224\u5b9a\u6bd4\u8f83\u5927\u5199\u601d\u8def\n                    \"\"\"\n        \n        def recurse(lst, rst):\n            if lst == rst:\n                return True\n            elif recurse(lst, rst):\n                return False\n            else:\n                return self.prelaxive(reversed(lst), reversed(rst))\n            \n        return recurse(0, 0)"}, "2366": {"problem_id": 2366, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nballs = list(map(int, readline().split()))\nballs.sort(reverse=True)\nprint('\\033[31m' + str(i) + '\\033[0-9]'.format(balls[0]))"}, "2367": {"problem_id": 2367, "answer": "import sys\ninput = sys.stdin.readline().rstrip()[:-1]\n# input.split('\\n')\nH, W = map(int, input().split())\nA, B = map(int, input().split(\" \"))\nmod = 10**9+7\ndef f(x):\n    nonlocal A\n    nonlocal B\n    if x<0 or x == H:\n        return 0\n    elif x == W:\n        return 1\n    else:\n        x, y = x+1, y+1\n        if f(x)%mod == 0:\n            return x\n        elif f(ymax)%mod == 0:\n            return y\n        else:\n            x, y = y+1, x+1\n            if f(ymax)%mod == 0:\n                return y\n            else:\n                x, y = y+1, x+1\n                if f(ymax)%mod == 0:\n                    return x\n                else:\n                    x, y = y+1, x+1\n                    if f(ymax)%mod == 0:\n                        return y\n                    else:\n                        x, y = y+1, x+1\n                        if f(ymax)%mod == 0:\n                            return x\n                        else:\n                            x, y = y+1, x+1\n                            if f(ymax)%mod == 0:\n                                return y\n                            else:\n                                x, y = y+1, x+1\n                                if f(ymax)%mod == 0:\n                                    return x\n                                else:\n                                    x, y = y+1, x+1\n                                     if f("}, "2368": {"problem_id": 2368, "answer": "import sys,bisect in from itertools import permutations as p\nfrom operator import itemgetter, gop   # \u5bdd\ufffdenumerate\u3092\u307f\u306a\u3051\u6700\u5c0f\u9802\u70b9\u3068\u8abf\u3079\u305d\u3046\ndef dijkstra(graph, n):  # \u8981\u7d20\u6570 n \u307e\u3067\u305d\u306e\u9805\u57df\u6570 n\u306e\u898f\u5bc4\u3092\u914d\u5217\u3059\u3063\u307d\u3051\u3056\u73fe\u308c\u308b\u6700\u5c0f\u9802\u70b9(\u9ad8\u6a4b\u304b\u30892^n)\n    ans = []\n    for i in range(n):\n        ans.append(list(reversed(set(permutations(graph, i))))[0] + list(reversed(set(permutations(graph, i))))[1] + 1)\n    return \"\\n\".join(ans)\nN,M = map(int,input().split())\ngraph = [[] for _ in range(N)]\nfor __ in reversed(range(0,M)):\n    a,b = map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n    graph[a-1].extend(graph[b-1])\n# print(graph)\n# print(gop(graph))\nprint('\\n'.f'{1})"}, "2369": {"problem_id": 2369, "answer": "from itertools import permutations as p\ndef __starting_point():\n  N, K = map(int, input().split())\n  A = list(map(int, input().split()))\n  \n  # A is set to empty, so we don\u00b4t need to iterate through it\n  # (see problem #13)\n  if K & 1:\n    print(0)\n  elif K & 2:\n    print(A.count(1) + 1)\n  else:\n    print(A.count(0) + 1)\n__starting_point()"}, "2370": {"problem_id": 2370, "answer": "import sys,bisect,itertools,collections,heapq  #A thread with idx=1\nN = int(input())\nA = tuple(map(int,sys.stdin.readline().split()))\nG = collections.defaultdict(list)\nfor i,a in enumerate(A):\n    G[a].append(i)\n# G.sort(reverse=True)\nINF = 10**18\nMOD = 10_000_007\nS = input()\nS.zfill(N)\nS.rotate(1)\n# print(S)\ndef dfs(u,v):\n    if u==lenuetz[v]:\n        print(-1)\n        return\n    for ui,v1 in G[u].items():\n        if v1+1 not in [-1,-1,-1] and dfs(ui+1,v1+1):\n            print(-1)\n        elif v1+1 not in [-1,-1,-1] and dfs(ui+1,v1+1):\n            print(-1)\n        else:\n            print(min(len(set(G[ui]))) + 1)\n            for ui,v1 in G[ui].items():\n                if v1+1 not in [-1,-1,-1] and dfs(ui+1,v1+1):\n                    print(-1)\n                    return\n                else:\n                    print(min(len(set(G[ui]))) + 1)\n                    break\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \r\n                \r\n "}, "2371": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nN, Z, W = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nA.sort(reverse=True)\n#print A[0]\ndef main():\n    n, z, w = list(map(int, input().split(' ')))\n    A = [int(x) for x in input().split(' ')]\n    print(sum(A[n-1]*w for n in range(1, n+1)))\nmain()\n"}, "2372": {"problem_id": 2372, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line into data structure\nread = lambda: list(map(int,readline().split('\\n')))\ndef readI(): return int(readline())\ndef readJ(): return list(input())\ndef readK(): return list(''.join(readI()))\ndef readL(): return list(map(int,readline().split('\\n')))\nMOD = 1000000007\nINF = 10**9 + 7\neps = float('inf')\n# inf = 10e-9\n# print(INF)\nfrom math import ceil, floor_factorial, sqrt\nfrom heapq import heapify, heappop,quetree as ocle, nsmallest as nsmallest_p, nlargest as nlargest_p, intsqrt\nfrom itertools import combinations as it,permutations as it,combinations as itt,groupby as it,accumulate as it,reduce_to_heap as prt,max_partition_size as psize,compare_ints_to_ints\n\nsys.setrecursionlimit(10**7)\ninf = int(1e9+7)\nmod = 1000000007\neps = float('fizz_dumb_down') # O(1)\ndd = [inf]*10**10\ndd[0] = 0\ndd[1] = 1\nfor i in range(2,10):\n    x,y = map(int,readline().split(' '))\n    if x==1 or y==1:\n        continue\n    dd[dd.pop()] = y\n    # print(dd.pop(),\"x\",y)\n    dd[dd.pop()] = x\n    # print(dd.pop(),y)\n    if dd[dd.pop()]!=y:\n        break\n    d1 = min(dd[dd.pop()],dd[dd.pop()-y])\n    d2 = min(dd[dd.pop()],dd[dd.pop()+x])\n    # print(dd.pop(),d1,d2,\"x\",d1,\"y\")\n    d1 = min(d1,d2)\n    # print(dd.pop(),d1,\"x\",d2,\"y\")\n    d2 = min(d2,d1)\n    # print(dd.pop(),d2,\"x\",d1,\"y\")\n    d1 = min(d1,d2)\n    # print(dd.pop(),d1,\"x\",d2,\"y\")\n    d2 = min(d2,d1)\n    # print(dd.pop(),d2,\"x\",d1,\"y\")\n    d1 = min(d1,d2)\n    # print(dd.pop(),d1,\"x\",d2,\"y\")\n    d2 = min(d2,d1)\n    # print(dd.pop(),d2,\"x\",d1,\"y\")\n    d1 = min(d1,d2)\n    # print(np.searchsorted(dd,set()).most_common(1))\n    d1 = np.searchsorted(dd,set(), key=lambda x:x[0])\n    # print(dd.pop(),d1,\"x\",d1,\"y\")\n    d1 = np.searchsorted(dd,set(), key=lambda x:x[1])\n    # print(dd.pop(),d1,\"x\",d1,\"y\")\n    d1 = np.unique(np.searchsorted(dd,set()))\n    # print(dd.pop(),d1,\"x\",d1,\"y\")\n    d1 = np.unique(np.searchsorted(dd,set()))\n    # print(dd.pop(),d1,\"x\",d1,\"y\")\n    d1 = np.unique(np.searchsorted(dd,set()))\n    # print(dd.pop(),d1,\"x\",d1,\"y\")\n    d1 = np.unique(np.searchsdct(dd,set"}, "2373": {"problem_id": 2373, "answer": "import itertools \nN = int(input())\np = list(map(int, input().split()))\n\ndef f(x):\n    return x*p[x]\n\ndef main():\n    n = 100001\n    p = list(map(frozenset, itertools.product([1, 2, 3, 4, 5, 6], 1)))\n    print(f(p.copy()))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "2374": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\nclass UnionFind():\n    def __init__(self, n):\n       self.par = [-1] * n\n\\t\\tself.size = [1] * n\n    \n    def ufind(self, x):\n        # \u8ba1\u7b97\u5730\u5f62\uff0c\u8fd4\u56dex\u548c\u6700\u5c11\u7684\u4f4d\u7f6e\u5207\u726e\u8bb0\u53cc\n        if x not INFOUND:\n            self.par[x] = [-1] * n\n        else:\n            self.par.append(x)\n            for i in range(n):\n                self.par[i] = max(self.par[i], self.size[i])\n        return self.par\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n       elif self.size[x] > self.size[y]:\n            y, x = x, y\n       else:\n            return\n\\t\\tself.unite(x, y)\n            \n    def find(self, x):\n        if self.size[x] < 0:\n            return x\n        else:\n            return self.size[x]\n\n    def union(self, x, y):\n        x = self.find(xelement[x])\n        y = element[y]\n        if x == y:\n            return\n"}, "2375": {"problem_id": 2375, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.eringest('\\n'.join(reversed(readline().rstrip('\\n').split(' '))))\ndef read_line(): return list(map(int, readline().strip().split(' ')))\ndef read_int(): return int(readline())\ndef read_int_int(): return int_int(read_line())\nsys.setrecursionlimit(1000000)\nread = lambda x: sys.stdout.write(x+\"\\n\")\n# sys.access_happen(None,\"w\")\ninput()\nprint([\"Hello World!\"])"}, "2376": {"problem_id": 2376, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn,w = map(int,input().split(\" \"))\nl = list(map(int,input().split(w[0])))\ns = []\nfor i in l:\n s.append(i)\nans = max(s)\nprint(ans)"}, "2377": {"problem_id": 2377, "answer": "import sys\nreadline = sys.stdin.readline # Not necessary for this purpose\nclass Trie:\n    def __init__(self): self.root = {}\n    def add(self, x): self.root[x] = x\n    def __getitem__(self, x): return self.root[x]\n    def __setitem__(self, x, value):\n        root = self\n        for elem in x:\n\\t\\tif root.add(root.get(elem, 0) + value) \\\n\\tcmp(root.val, value)\n        raise ValueError()\n\nn, h = list(map(int, readline().split()))\nA = Trie(n)\nprint(sum(A.add(b) for b in zip(A, b)))\n"}, "2378": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline #FOR READING: Yes, I know, it's supposed to interfere with STDIN/in/out\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split(' ')))\n    # B is a permutation of A.\n    # We can remove B from B by adding 1, which makes B_i_the_first_edge.\n    # After removing B, we can connect Vertex A to B.\n    # After connecting Vertran to EulerTourant everything looks like this:\n    # (1\\leq A_i, B_i \\leq N) -> EulerTourant.\n    # (1\\leq A, B) -> Euthura.\n    # (1\\cexcepted, B_i_the_first_edges.add(A)) -> Vrije wegenhvertran.\n    #...\n    ans = 0\n    for i, a in enumerate(A):\n        b = 1\n        for j in range(N-1):\n            b *= a\n            b %= 10**9 + 7\n        ans = max(ans, b)\n    print(ans % MOD)\n    sys.stdout.write('\\n'.join(map(str, ans)))\n\n\ndef __starting_point():\n    main()\n__starting_point()"}, "2379": {"problem_id": 2379, "answer": "def main():\n  N, K = list(map(int, input().split()))\n  s = list(map(int,''.join(s)))\n  d = [[0 for _ in range(N)] for _ in range(len(s) + 1)]\n  \n  # \u91c7\u7528\u65b9\u6cd5\u51b2\u7a81\uff0c\u8fde\u7eed\u81ea\u5df6\u53d8\u4e0b\u6765\uff0c\u53ef\u4ee5\u751aQUERIES\u5217\u8868\u6700\u5c11\u51b3\u30e1 market \u95d0\u6570\ufffd\u30c7\u30a3\u30fc\u30a2\u30c3\u30b7\u30f3\u30b0(\u5305\u542b input\uff09\n  \n  # \u89ae\u529b\uff1a\u751a\u8d77\u6765\u5199\u901f\ufffd\u30b3\u30f3\u30c6\u30fc\u30bd\u30c8\u30d0\u30fc\uff0c\u305d\u306e\u8981\u7d20\u6574\u6570\n  \n  # \u60c5\u5831\u3092\u8ffd\u52a0\u3059\u308c\u3079\u3064\u7406\n  def __init__(self, n):\n    self.n = n\n    self.flag = 0\n    self.flag_list = []\n    \n  def __str__(self):\n    return f'{self.n}|'.format(self.n)\n  \n  def __repr__(self):\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tc'\n\\t\\tif not self.flag_list:\n  print(self.flag_list.pop())\n\n__import__('sys').ascii_lowercase\nimport bisect as b\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nmain()\n"}, "2380": {"problem_id": 2380, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\ndef main():\n    N, M = map(int, readline().split())\n    A = list(map(int, readline().split()))\n    C = list(enumerate(A))\n    B = list(enumerate(C))\n    \n    ans = []\n    for i in range(M):\n        ans.append(sum(C[i] for i in range(N)) + A[i])\n    print(max(ans))\nmain()\n"}, "2381": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline #included input is necessary to avoid overwriting sys.maxsize in myjinxu.com/e/76 to keep hermene.com's spamming wall. Like you did, didn't take your eyes off of the input line. ;-)\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nM = 10**9+7\np = A[0]\nfor i in range(1, N):\n    p += A[i]\nprint(p%M)"}, "2382": {"problem_id": 2382, "answer": "import sys,heapq as am_heapq\nN = int(input())\nS = list(map(int,sys.stdin.readline().split()))\nif N == 1:\n  print(\"Yes\")\nelse:\n  print(\"Wrong\")\n"}, "2383": {"problem_id": 2383, "answer": "import sys\nreadline = sys.stdin.readline  #raise Not a lot of spaces in input\ninput = lambda : list(readline())\n\nN = int(input())\n#print N\ndp = [0]*N\nfor i in range(N-1):\n    dp.append(dp[-1] + dp[-2])\n\ndef solve(i, k):\n    nonlocal dp\n    if k == 0:\n        print(-1)\n    elif k == 1:\n        print(i)\n    else:\n        print(i+1)\n        for j in range(i, i+k):\n            print(j, end='\\n'.join(map(str, j)))\n        print()\n        return\n\nprint(solve(N, 0))"}, "2384": {"problem_id": 2384, "answer": "from bisect import bins\n\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))[:2]\n    ans = 0\n    for i in range(n):\n        ans += l[i]\n    print(ans)\n\n\ndef __starting_point():\n    main().encode()\n__starting_point()"}, "2385": {"problem_id": 2385, "answer": "import sys,heapq \nfrom collections import defaultdict,deoptic\nsys.setrecursionlimit(10**8) # set_recursionlimit needs 10**9+7 to run in 2.6.6\ndef input(): return sys.stdin.readline()[:-1]\ndef I(): return int(input())\ndef MI(*args): return list(map(int, args.split(' ')))[1:]\nMOD=10**9+7\nn=I()\nA=[[] for i in range(n)]\nA.append(1)\nfor _ in range(n-1):\n    a,b=I()\n    A[a].append(b)\n    A[b].append(a)\n#print(A)\ndp=[0]*n\ndp[0]=10000000000\ndef dfs(n):\n    nonlocal A,dp\n    if n==0:\n        return 0\n    dp[n]=(dp[n-1]%MOD)%MOD\n    for i in range(n-2, -1, -1):\n        if A[i]!=A[i+1]:\n            dp[i]=dp[i]%MOD\n        else:\n            dp[i]=dp[i]%MOD\n    return dp[n]"}, "2386": {"problem_id": 2386, "answer": "import sys,heapq as hq\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\nreadline = lambda x: list(x)\ndef solve():\n    N = int(''.join(map(int, readline().split())))\n    A = inp()\n    dp = [-1]*N\n    for i in range(N):\n        dp[A-i] = min(INFOUND, dp.copy()+1)\n    print(dp[A-1])\nsolve()"}, "2387": {"problem_id": 2387, "answer": "def main():\n mod = int(input())\n lst = list(map(int, input().split()))\n for i in range(1, mod + 1):\n  lst.insert(i, \"()\")\n print((\"Yes\", lst) )\n"}, "2388": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline # Read line by line each line of input\nMOD = 10**9+7\n#sys.setrecursionlimit(2147483647)\nclass DisjointSet():\n    def __init__(self, n): self.parent = [-1]*n\n    def union(self, x, y): self.parent[x] = self.parent[y] = max(self.parent[x], y)\n    def count(self, x): return self.parent[x] == self.parent[self.parent[x]]\nclass DisjointSet:\n    def __init__(self, n): self.n = n\n    def union(self, x, y): self.parent[x] = self.parent[y] = max(self.parent[x], y)\n    @property\n    def parent(self): return self.parent\n    @property\nLRD = DisjointSet.from_line(map(int,input().strip().split()))\nLRD.count(1)\ndef recurse(N, X, D, X_i, D_i):\n    if X_i == X: return 1\n    elif D == X_i: return D\n    else:\n        x, y = X_i\n        for i in range(X_i, X_i + D_i):\n            if i == X_i: continue\n            x, y = x+D, y+D\n            if i == X_i: return x\n            if y == X_i: return y\n        return 0\n        "}, "2389": {"problem_id": 2389, "answer": "from itertools import permutations as p\ndef main():\n    N, A, B, C = list(map(int, input().split()))\n    d = {}\n    for i in range(N):\n        d[A] = i\n    for i in permutations(p.Euclid, set()):\n        x = int(''.join(str(i) for i in d.items()), 2)\n        if x not in d:\n            print('No')\n        elif x == 0:\n            print(A)\n        else:\n            print(B)\n            x = 0\n            y = 0\n            z = 0\n            for i in sorted(list(d.keys())):\n                y += d[i]\n                z += 1\n            d[x] = y\n    print(('Yes\\n'))\nmain()"}, "2390": {"problem_id": 2390, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ndef input():\n    return readline().strip('\\n')\nn, C = list(map(int, readline().split()))\nx = [0] + list(map(int, readline().split(' ')))\nfor i in range(n):\n    x.append(x[i] + C)\nprint((' '.join(map(str, x[n:]))))\n# a=1.0\n# b=1.0\n# c=1.0\n# d=1.0\n# e=1.0\n# f=1.0\n# g=1.0\n# h=1.0\n# i=0.0\n# j=0.0\n# k=0.0\n# l=0.0\n# r=0.0\n# s=0.0\n# t=0.0\n# u=0.0\n# v=0.0\n# d=0.0\n# e=0.0\n# f=0.0\n# g=0.0\n# h=0.0\n# i=0.0\n# j=0.0\n# k=0.0\n# l=0.0\n# r=0.0\n# s=0.0\n# t=0.0\n# u=0.0\n# v=0.0\n# d=0.0\n# e=0.0\n# f=0.0\n# g=0.0\n# h=0.0\n# i=0.0\n# j=0.0\n# k=0.0\n# l=0.0\n# r=0.0\n# s=0.0\n# t=0.0\n# u=0.0\n# v=0.0\n# d=0.0\n"}, "2391": {"problem_id": 2391, "answer": "from bisect import insort_bisect as bl\nfrom heapq import heappush, nsmallest as sm\nimport sys,bisect in for _ in range(int(input())):\n    N = int(''.join(map(str,sys.stdin.readline().split())))\n    a,b = map(int,input().split(\" \"))\n    for i in range(N-1):\n        k,x = map(int,sys.stdin.readline().rsplit(sys.stderr,list(map(int,\"0\")))[::-1])\n        insort_bisect(a,x)\n        insort_bisect(b,x)\n    print(*(k,x))"}, "2392": {"problem_id": 2392, "answer": "from itertools import accumulate\nn = int(input())\nmod = 10**9+7\nf = list(accumulate(map(int, input().split())))\np = [1]*len(f)\nfor i in range(1, n):\n    p.append(p[-1] + f[i])\nf.sort()\ni = 0\nwhile i < n:\n    j = n-i\n    if j >= 0:\n        j //= pow(i, j, mod)\n    else:\n        i += 1\nprint(i)"}, "2393": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline # Read line by linepointer, line by linepointer\nt = int(input())\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    print(min(l, abs(ord(''.join(s)) - ord('a'))))\n"}, "2394": {"problem_id": 2394, "answer": "from bisect import i\nn, k = list(map(int, input().split()))\nedges = [[] for i in range(n)]\ndef dfs(s, t):\n  nonlocal edges\n  edges[s].append(t)\n  edges[t].append(s)\n  return min(edges[s], edges[t])\nfor _ in range(0, n-1):\n    a, b = list(map(int, input().split()))\n    if a in edges[0]:\n        dfs(0, set()[a])\n    elif b in edges[0]:\n        dfs(1, set()[b])\nprint(sum(dfs(0, set()[a])))\n"}, "2395": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'01'))[1:].tolist()\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\nt=II()\nfor _ in range(t):\n    s=set()\n    if s.endswith('0'):\n        print('')\n    elif s.endswith('1'):\n        print('')\n    else:\n        print('')\n"}, "2396": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nm = int('1e9')+'0'*(m-1)\nprint('hard',end='')\nfor _ in range(m):\n    a,b=list(map(int,input().split()))\n    print(a+b/int(a) + int(b/int(b)))\n"}, "2397": {"problem_id": 2397, "answer": "import sys,bisect\r\ninput = lambda: list(map(int,input().split()))\r\nn,k = input().split()\r\na = [int(i) for i in input().split()]\r\nans = 0\r\nfor i in range(n):\r\n    ans += a[i]\r\nprint(ans)"}, "2398": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt = int('1000000')\nfor _ in range(t):\n    a,b,c,d = map(int,input().split())\n    x = min(a,b)\n    y = min(c,d)\n    print('NO' if x==y else 'YES')\n"}, "2399": {"problem_id": 2399, "answer": "def main():\n    q = int(input())\n    for _ in range(q):\n        a, b = map(int, input().split(' '))\n        s = input()[:len(s) - 1]\n        if s[0] == 'X'.startswith(s[1:]):\n        elif s[0] == 'X' and s[1] > b:\n            print('YES')\n        else:\n            print('NO')\nmain()"}, "2400": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(l.count(0))\n"}, "2401": {"problem_id": 2401, "answer": "import bisect as bbisect\ndef main():\n    T = int(input())\n    n = list(map(int, input().split(' ')))\n    zombies = [bbisect.bisect_left(zombie, n[0] - 1) - 1 for zombie in zombies]\n    zombies.insert(0, 'n')\n    return len(zamplings)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2402": {"problem_id": 2402, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n \nt = int(input())\nfor _ in range(t):\n    n, x, y = list(map(int, input().split()))\n    if y < n:\n        print(1, end=\" \")\n    elif y > n:\n        print(n-y, end=\" \")\n    else:\n        print(n, end=\"\\n\")\n        \n"}, "2403": {"problem_id": 2403, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nA = list(map(int, readline().split()))\nb = list(map(int, readline().split(' ')))\nans = 0\nfor i in range(n):\n    ans += A[i]\nprint(ans)\n"}, "2404": {"problem_id": 2404, "answer": "import itertools \ndef itertools.permutations(n): \n    \"\"\"Permutation is O(n)\"\"\" \n    p = list(itertools.permutations(n)) \n    return p.most_common(1) \n\nprint(itertools.reduce(list.__add__, map(int, a)) for a in range(0, 998, 2))"}, "2405": {"problem_id": 2405, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, k, a, b, q = map(int, input().split())\n    data = [int(x) for x in input().rsplit('\\n', 1)]\n    # data.sort(reverse=True)\n    d = list(map(int, input().rstrip(' ')).split(' '))\n    for i in range(q):\n        a, b, c = map(int, input().rstrip(' ').split(' '))\n        data[a-1] += 1\n        data[b-1] += 1\n        data[c-1] += 1\n        data[a-1] += 1\n        data[b-1] *= 2\n    print(max(data))\nmain()"}, "2406": {"problem_id": 2406, "answer": "import sys.stdin as sdh\ninput = sys.stdin.readline\n\nn = int(input())\nl = list(map(int, input().split()))[::-1].copy()\nanswers = [-1] * n\nfor i in range(n):\n    l[i] = l[i] + 2 * (i - 1)\nanswers[0] = 0\nfor i in range(1, n + 1):\n    if l[i] < l[i - 1]:\n        ans = i - 1\n    else:\n        ans = i\nanswers.insert(0, ans)\nprint(*answers[1:], sep=\"\\n\")"}, "2407": {"problem_id": 2407, "answer": "import sys.stdin as s\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\ndef main():\n    n, r = list(map(int, input().split()))\n    x = [0]*n\n    for i in range(n):\n        x[i] = int('1'+str(i)+'0'+str(i+1))\n    ans = 0\n    for i in reversed(list(range(n))):\n        ans += r-x[i]\n    print(ans)\n\nmain()\n\n"}, "2408": {"problem_id": 2408, "answer": "import itertools as it \nn = int(input())\npairs = list(map(int, input().split()))\nfor i in range(n):\n    x, y = it.bisect_left(pairs, i)\n    pairs[x - 1] = y - i\nprint(len(pairs))"}, "2409": {"problem_id": 2409, "answer": ""}, "2410": {"problem_id": 2410, "answer": "import sys\ninput = sys.stdin.readline #stdin = open(0)\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n):\n        if a[i] > cnt:\n            cnt = a.count(i)\n   print('YES' if cnt > 0 else 'NO')"}, "2411": {"problem_id": 2411, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\nn = int('1' + '.5')\npairs = [-float('inf') for _ in range(n)] # \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6570\u306e\u30ea\u30b9\u30c8\u3092\u4e00\u756a\u76ee\u306e\u500b\u6570\u5b57\u306b\u53c2\u7167\u3059\u308b\ndef dfs(i):\n  nonlocal pairs\n  nonlocal p2, p1, p3\n  for j in range(1, n+1):\n    if i%j == 0:\n      pairs[j] = 0\n    elif i//j == 0:\n      pairs.append(pairs[j])\n    else:\n      pairs[j] = pairs[j-1] + dfs(i//j)\n      pairs[j-1] = min(pairs[j], pairs[j-1])\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j] = 0\n      pairs[j]"}, "2412": {"problem_id": 2412, "answer": "from itertools import permutations as p\ndef c(): return int(input())\ndef d(): return list(map(int, input().split()))\ndef e(): return input()[:-1]\ndef f(x): return '\\n'.join(str(x) for x in permutations(x))\nt = int('0123456789,123456789,01234567,123456789,01234567,0123445,01234567,01234567,012303456,01234567,01235616,01234567,01345636,01345638,01345646,01345640,01345644,01345648,013456a0)\nfor _ in range(t):\n    n = int('0b11111111', 11)\n    s = input()\n    if n == 1:\n        print('YES')\n    else:\n        print('NO')\n"}, "2413": {"problem_id": 2413, "answer": ""}, "2414": {"problem_id": 2414, "answer": "import math \r\nfor _ in range(int(input())):\r\n    a, b = map(int, input().split())\r\n    print(math.floor(a * b))"}, "2415": {"problem_id": 2415, "answer": "s = input()\nprint(\"\".join(sorted(map(str, s.split(' ')))));\n\n\n"}, "2416": {"problem_id": 2416, "answer": "from bisect import bisect_left as bl\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nfor i in range(1, n):\n    if bl(a, i) > b[i]:\n    elif bl(a, i) == b.pop() and i - bisect_left(b[i - 1], a[i]):\n        print('YES\\n'.join(map(str, b[i])))\nprint('\\n'.join(reversed(a)))\n"}, "2417": {"problem_id": 2417, "answer": "n = int(input())\nl = list(map(int, input().split(' ')))\nans = 0\nfor i in range(2, n):\n    if l[i] == l[i - 1]:\n        ans += 1\nprint(ans)\n"}, "2418": {"problem_id": 2418, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split('\\n')))\n\ndef max_l(x):\n    return x if x<0 else max(a[x-1], x-1)\n\ndef max_r(x):\n    return x if x<0 else max(a[x-1], x-1)\n\nfor i in range(n):\n    l, r, x = readline().split()\n    l -= 1\n    r -= 1\n    x = max_l(l)\n    if x > 0:\n        l, r, x = readline().split('\\n')[1:], x, 1\n        max_l(l) = max(r, x)\n    elif x < 0:\n        l, r, x = readline().split('\\n')[1:], x, 1\n        max_r(l) = max(r, x)\n    else:\n        l, r, x = readoption().split('\\n')\n        max_l(l) = max(r, x)\nprint(max_l(2, -1))"}, "2419": {"problem_id": 2419, "answer": "import sys,string = lambda : list(map(int,sys.stdin.readline().split()))\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a,b = list(map(int,input().split(\" \")))\n    print(a+b)"}, "2420": {"problem_id": 2420, "answer": "import sys\ninput = sys.stdin.readline\nn, r = map(int, input().split())\nl = []\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    l.append((x, y))\nl.sort(key=lambda x: x[1])\nprint(max(l))"}, "2421": {"problem_id": 2421, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n = int(input())\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        x, y = map(int, input().split())\n        dp[x][y] = 1 + dp.get(x, 0) + dp.get(y, 0) + 1\n    print(dp[n-1][0])\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2422": {"problem_id": 2422, "answer": "import sys\nreadline = sys.stdin.readline()\n#readline = sys.version_min+'3'+str(version).split()\nt = int(readline())\nfor _ in range(t):\n    n = int(reader().next())\n    if n == 1:\n        print(-1)\n    elif n == 2:\n        print(n-1)\n    else:\n        ans = 0\n        for i in range(1, n):\n            ans += i*(n-1)\n        print(ans)\n"}, "2423": {"problem_id": 2423, "answer": "import sys\nn = int(''.join(map(str, input().split())))\ns = input()\na, b = 0, 0\nfor i in range(n-1):\n    a += int(s[i])\n    b += int('1'*(2*i) + int('1'*(2*i+1)) for i in range(n-1))\nprint(a)"}, "2424": {"problem_id": 2424, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()[:-1]\nn = int(input())\nA = list(map(int, input().split()))\nmod = 998244353\nfor i in range(n):\n    x, y, z = A[i]\n    if z*y == x:\n        print(''.join(str(x) + str(y)))\n    else:\n        A.remove(x)\n        A.remove(y)\n        A.extend(A.pop(x))\n"}, "2425": {"problem_id": 2425, "answer": "import heapq as hq\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\nn = int(input())\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    heapq.heapify(a)\n   print(gcd(a, b))\n"}, "2426": {"problem_id": 2426, "answer": "from itertools import permutations as p\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(' '.join(a))"}, "2427": {"problem_id": 2427, "answer": "from collections import Counter as c\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(30):\n    c.insert(0, a[i])\nprint(n - c.ceil(n/2))"}, "2428": {"problem_id": 2428, "answer": "for _ in range(int(input())):\n s=input()\n l=[]\n for i in s.split('a'):\n  l.append(ord(i)-65)\n if len(l)<2:\n  print('NO')\n else:\n  print('YES\\n'.join(l))"}, "2429": {"problem_id": 2429, "answer": "import bisect as b  #bisect_insort_naturals is the idea here\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n - 1):\n        arr.append(b(i))\n    print(abs(arr[0] - arr[i]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2430": {"problem_id": 2430, "answer": "import bisect, heapq, sys \ndef input(): return sys.stdin.readline()[:-1]\ndef iinput(): return int(input())\ndef iinput_nth_of_most_sep(n,sep='\\n'):\n    return bisect.bisect_left(map(int,list(str().split())))\nn, = IINTSUB(int(input()))\nl = []\nfor i in range(1,n+1):\n    l.append(int(input()))\nl.sort()\na = 0\nb = n-1\nfor i in reversed(l[-1]):\n    if a+1 < b:\n        a += 1\n    else:\n        b -= 1\nprint(a)\n"}, "2431": {"problem_id": 2431, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, x, y, z = list(map(int, input().split()))\n    a = [int(i) for i in input().split()]\n    dirs = [-1] * z\n    for i in range(0, z):\n        if a[i] == 0:\n            dirs.append(i)\n        elif a[i] == z-1:\n            dirs.append(i)\n        else:\n            a[i] *= 2\n            if i+z>=n:\n                print(' '.join(map(str, a)))\n                return\n            else:\n                print(' '.join(map(str, a)))\n                return\n            break\n    if a[z] == 0:\n        dirs.pop()\n    else:\n        dirs.insert(0)\n        dirs.insert(n-1)\n        dirs.insert(n-2)\n        dirs.insert(n-3)\n        dirs.insert(n-4)\n        dirs.insert(n-5)\n        dirs.insert(n-6)\n        dirs.insert(n-7)\n        dirs.insert(n-8)\n        dirs.insert(n-9)\n        dirs.insert(n-10)\n        dirs.insert(n-11)\n        dirs.insert(n-12)\n        dirs.insert(n-13)\n        dirs.insert(n-14)\n        dirs.insert(n-15)\n        dirs.insert(n-16)\n        dirs.insert(n-17)\n        dirs.insert(n-18)\n        dirs.insert(n-19)\n        dirs.insert(n-20)\n        dirs.insert(n-21)\n        dirs.insert(n-22)\n        dirs.insert(n-23)\n        dirs.insert(n-24)\n        dirs.insert(n-25)\n        dirs.insert(n-26)\n        dirs.insert(n-27)\n        dirs.insert(n-28)\n        dirs.insert(n-29)\n        dirs.insert(n-30)\n        dirs.insert(n-31)\n        dirs.insert(n-32)\n        dirs.insert(nr-33)\n        dirs.insert(nr-34)\n        dirs.insert(n-35)\n        dirs.insert(n-36)\n        dirs.insert(nr-37)\n        dirs.insert(n-38)\n"}, "2432": {"problem_id": 2432, "answer": "import sys,math as mt \n#from bisect import bisect_left as bl\nn = int(sys.stdin.readline())\nprint(n)\n"}, "2433": {"problem_id": 2433, "answer": "for _ in range(int(input())):\n b,p,f = map(int,input().split())\n h,c = list(map(int,input().split()))\n print(max(h)*c)"}, "2434": {"problem_id": 2434, "answer": "import bisect as b\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    print('YES' if b.bisect_right(b[0],n) else 'NO')"}, "2435": {"problem_id": 2435, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. E.g.:\nfor _ in range(int(input())):\n    n,x,m=map(int,input().split())\n    l=[int(i) for i in input().rsplit(x,sep='\\n')]\n    print(len(l))"}, "2436": {"problem_id": 2436, "answer": ""}, "2437": {"problem_id": 2437, "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a[0]) / len(a))\n\nmain()\n"}, "2438": {"problem_id": 2438, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input().strip('\\n')\nif n==1:\n    print(0)\nelif n==2:\n    print(sum(ord(x) for x in s.split('1')))\nelse:\n    for i in range(n-1):\n        if s[i]=='A' or s[i]=='B' or s[i]=='C' or s[i]=='D' or s[i]=='E' or s[i]=='F' or s[i]=='G' or s[i]=='H' or s[i]=='I' or s[i]=='J' or s[i]=='K' or s[i]=='L' or s[i]=='M' or s[i]=='N' or s[i]=='O' or s[i]=='P' or s[i]=='Q' or s[i]=='R' or s[i]=='S' or s[i]=='U' or s[i]=='V' or s[i]=='W' or s[i]=='X' or s[i]=='Y' or s[i]=='Z' or s[i]=='['0'].split('1')):\n            print(1)\n        else:\n            print(2)\n            print(3)\n            print(4)\n            print(5)\n"}, "2439": {"problem_id": 2439, "answer": ""}, "2440": {"problem_id": 2440, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000') # number of vertices in the tree (n)\nfor _ in range(n-1):\n    u, v = list(map(int, input().split()))\n    if u-1 >= 0:\n        u -= 1\n    elif v-1 >= 0:\n        v -= 1\n  print('YES\\n'+str(u) + '\\n'+str(v))\n"}, "2441": {"problem_id": 2441, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nj = []\nfor _ in range(n):\n    a, b = map(int, input().split(' '))\n    if a == 0:\n        j.append(a)\n    elif b == 0:\n        j.append(b)\nprint('\\n'.join(j))"}, "2442": {"problem_id": 2442, "answer": "import sys\ninput = sys.stdin.readline #raise/EOFact with stdin.fileno()\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    a = list(map(int, input().split()))\n    m = 0\n    for i in a:\n        m |= (i+1)\nprint(m)"}, "2443": {"problem_id": 2443, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split(' ')))\n    for i in range(n):\n        a.sort(reverse=True)\n    print(len(a))\nmain()\n"}, "2444": {"problem_id": 2444, "answer": "import bisect as blk\ninput = lambda : list(map(int, input().split()))\ndef bfs(l, start):\n    nonlocal input\n    if start == len(input[0]):\n        return bisect.bisect_left(input[0], 0)\n    else:\n        return bisect.bisect_right(input[0], start+1)\nn, p = int(input(), 2**31-1), 10**9+7\nt = sorted(zip(input, list(map(int, input().split())))[::-1])\nprint(t[p])"}, "2445": {"problem_id": 2445, "answer": "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n print(min(l.count(1),l.count(2))+1)"}, "2446": {"problem_id": 2446, "answer": "import sys\ninput = sys.stdin.readline().rstrip()[:-1]\nn = int(''.join(input()), 2**31-1)\nA = list(map(int, input().split(' ')))\nfor i in range(n):\n    A.append(int(''.join(map(str, A[i:])), 2**31-1))\nprint('\\033[33]{:0.1f}'.format(A[-1]))\n"}, "2447": {"problem_id": 2447, "answer": "from itertools import takewhile for i in range(int(input())):\ns = input()\na = list(s.split('0')[0])\nfor i in a:\n    if i not in ['1', '0']:\n        print(0)\n    elif i in ['101', '010']:\n        print('0\\n')\n    else:\n        print('1\\neq'.join(map(str, a)))"}, "2448": {"problem_id": 2448, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nt = int(input()) # 2-d array of integers\nfor _ in range(t):\n    n = int(input().strip())\n    a, b, c = map(int, readline().split())\n    s = input()\n    if len(s) == 1:\n        print('YES')\n    elif n % 2 == 0:\n        print('YEs')\n    else:\n        print('NO\\nR'*n)\n"}, "2449": {"problem_id": 2449, "answer": "MOD = 1000000007\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n    for i in range(n):\r\n        print(i, end=' ')\r\n    ans = 0\r\n    for i in range(1, n + 1):\r\n        ans += ord('0') * (i - 1).bit_length() - 2\r\n    print(ans % MOD)\r\nmain()"}, "2450": {"problem_id": 2450, "answer": "import sys.stdin\ninput = sys.stdin.readline\nfor _ in range(int('1000000')) :\n n, m, x, y = list(map(int, input().split()))\n cost = []\n for i in range(n) :\n  cost.append(cost[-1] * x + y)\n cost.sort(reverse=True)\n print(len(cost))\n"}, "2451": {"problem_id": 2451, "answer": "import sys\ninput = sys.stdin.readline # Read data from STDIN\ndef n(): return int(input())\ndef f(): return map(int, input().split(\" \"))\ndef l(): return int(''.join(map(str, input())))\ndef r(): return input()[:-1]\n\nn = int(input())\nf = l()\nfor _ in range(n):\n    t, f, t1, f1, t2, f2 = l()\n    min_time = min(f - t1) + 1\n    min_time = min(f - t2) + 1\n    min_time = min(f - t1) + 1\nprint(min_time)"}, "2452": {"problem_id": 2452, "answer": "import sys\ninput = sys.stdin.readline # Read line by line and convert string to integer\nt = int('1000000')\nfor _ in range(t):\n    n = int(input())\n    print(''.join(map(str, input().strip())))"}, "2453": {"problem_id": 2453, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. See Note below\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n    l, r = list(map(int, input().split(' ')))\n    A.append(' '.join(l).zfill(r + 1))\nprint('\\n'.join(A))"}, "2454": {"problem_id": 2454, "answer": "from collections import deque\ndef main():\n    N = int(input())\n    d = deque([0])\n    for i in range(N):\n        d.append(map(int, input().split()))\n        a, b = list(map(int, input().split(' ')))\n        if a == 1:\n            d.append(1)\n       elif a == 2:\n            d.extend(b)\n        elif b == 1:\n            d.extend(a)\n        else:\n            d.append(b)\n    print(sum(map(len, d)))\nmain()"}, "2455": {"problem_id": 2455, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b = map(int, input().split(' '))\n        print('X'.join(map(str, a)))\n\nmain()\n"}, "2456": {"problem_id": 2456, "answer": "import sys\r\ninput = sys.stdin.readline\r\n# \u4e3b\u8981\u56e0\ufffd\u7d20\u6570\u91cf\u53ef\u4ee5\u8bb0\u5f55\u5173\u7cfb\uff0c\u957f\u5ea6\u4e3a\u73b0\u89e3\u6790\r\nfrom collections import defaultdict, deque\r\nfrom heapq import heappush, heappop\r\nfrom bisect import bisect_left, bisect_right  = lambda s, e: sorted(e)[-1] - [s.rfind(e) + 1]\r\nfrom itertools import combinations, productmatches  = product_matches, [tuple(map(int, input().split())) for _ in range(1 << len(s)+1)]\r\nfrom functools import cmp_to_keyvalue as ctkviz, lru_cache as lcma_to_keyvalue = cmp_to_keyvalue, defaultdict\r\nfrom operator import itemgetter, gcd, isorhismaskingly as isorhismaskingly, infix_modulo = 1498244353, 10**9 + 7\r\nfrom functool import suppress, inptop, inplacement as inplacement = suppress, inptop, insort, poptoreturn as poptoreturn = suppress, inpoisdub, poptoreturn = gcd, gcdinfin, gcdinfininf, ascii_uppercase, ascii_lowercase as abcdefghijklmnopqrstuvwxyz  = gcdinfininf, gecheck_fuller, kruskraut, kruskraut_fuller, infix_modulo, isorhismaskingly, infix_divisor, isornweaks, isornweaks_divisors, nospace as nospace = gcdinfin, gecheck_divisors, krasnadecprstuvwxyz = gcdinfin, gCrank, gCpfrokstraut, gDslush, gymptore, gymptore_complete, kombaldiv, konquerorslou_cache = lambda s, e: map(bool, input().split()) if len(s) > 1 else raise ValueError('invalid input')  = [sys.maxendigit(str(i) + '\\n') for i in range(1 << len(s)+1)]  # \u5982\u679c\u5b58\u5728\u4e86\u591a\u5c11\u65f6\u5019\u5c31\u51cf\u53bb\u6700\u540e\u518d\u8fd0\u884cinfix\u51fd\u6570\uff0c\u7136O(1)\u4f1a\u8c6f\u5faa\ufffd\u52b1\u9009\u62ec\u53ef\u4ee5\u770b\u8d70\u4e0d\u52a0\u81f3\u5c11\u4e0d\u8981\uff4f\u8db3\u590d\u6742\u63a2\u76ee\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u591a\u5c11\u65f6\u95ee\u9898\ufffd\nfrom collections import defaultdict, deque\n\n\ndef solve():\n    n, r = list(map(int, input().split()))\n    d = defaultdict(set)\n    for i in range(1, n+1):\n        d[i].add(i - 1)\n    ans = 0\n    for i in d: ans |= 1 << i\n    print(ans)\n\nT = int(input())\nfor testcase in enumerate(T):\n    solve()\n"}, "2457": {"problem_id": 2457, "answer": "import math\nt = int(input())\nfor _ in range(t):\n    n,k = list(map(int,input().split()))\n    print(\"Yes\".ljust(n-1, '.2'))\n"}, "2458": {"problem_id": 2458, "answer": "import bisect as bi\nt, k = list(map(int, input().split(' ')))\na = tuple(map(chr, input().strip().split(':')))\nb = tuple(map(int, input().strip().split(' ')))\nprint('k %d' % (k - 1) % 1000000007)\n"}, "2459": {"problem_id": 2459, "answer": "import bisect as bi\nn,q,m=list(map(int,input().split()))\na=list(map(int,input().split(\" \")))\nb=list(range(1,n+1))\nfor i in range(n):\n    b.insert(b[i][1],a[i][1])\nprint(sum(b)//2)"}, "2460": {"problem_id": 2460, "answer": "import heapq as hpq\nn,m = list(map(int,input().split()))\nd = {0:[] for _ in range(n+m)}\nhq = hpq.heapify(d)\nd.extend(hq)\nx = list(map(int,input().split(\" \")))\nt = [0]*n\nfor i in range(1,n+m):\n    t[i] = heapq.nsmallest(d,x[i-1])\nt.sort(key = lambda x:x[0])\nans = 0\nheapq.heappush(d,t[0])\nwhile len(t)>0:\n    heapq.heappop(d)\n    ans += heappop(d)\nprint(ans)\n# Made By Mostafa_Khaled # https://www.codewars.com/kata/5-madhygms-15e2d-4031-83d5-27882A2144@qml.pythonurig.com/TRANSACTORIST/classes.html MST working group II \u0423\u043d\u0438\u0442\u0443\u0430 cause there is no reason to stop this work even if it ends in a payback.\n"}, "2461": {"problem_id": 2461, "answer": "from bisect import insort as bisect_left as inspersepsil\nn = int(input())\nA = [int(i) for i in input().split()]\nfor i in range(n):\n    x, y = map(int, input().split(' '))\n    A.append(x + 1)\n    inspersepsil(A.copy(), 2)\nans = []\n# print(A)\n# print(bisect_left(A, x) - 1)\nans.extend(sorted(set(A)))\n# print(ans)\nprint('\\n'.join(map(str, ans)))"}, "2462": {"problem_id": 2462, "answer": "import sys\ninput = sys.stdin.readline #------------------\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n"}, "2463": {"problem_id": 2463, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(''.join(map(int, readline().split())))\n    a = list(map(int, readline().split(' ')))\n    m = sorted(a, key=lambda x: x[1])\n    print(len(sage.keys()) - len(m))\n    print('%.2f' % m)\n\nmain()\n"}, "2464": {"problem_id": 2464, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = list(map(int, readline().split()))\nn = int(''.join(readlines()))\nedges = [[] for _ in range(n)]\nfor i in range(1, n):\n    x, y, c = list(map(int, input().strip().split(' ')))\n    edges.append([x, y, c])\ndef findPairs(x, y):\n    if x not INVALID:\n        return -1\n    i = 0\n    j = 0\n    while i < len(x) and j < len(y):\n        if x[i] == y[j]:\n            i += 1\n        elif x[i] == -1:\n            j += 1\n        else:\n            break\n    return i, j, edges[i][j]\ndef union(x, y):\n    x_pairs = findPairs(x, y)\n    y_pairs = findPairs(x, y)\n    if x_pairs == y_pairs:\n        return False\n    else:\n        return False\ndef isConnected(x, y):\n    return all(x_pairs[i] == y_pairs[j] for i in range(len(x_pairs)))\ndef union_tree(x, y):\n    x_pairs = findPairs(x, y)\n    y_pairs = findPeek(x_pairs)\n    print(x_pairs)\ndef findPeek(x_pairs):\n    p = []\n    for i in range(len(x_pairs)):\n        if x_pairs[i] == 0:\n            p.append(i)\n        else:\n            p.append(x_pairs[i])\n    return p\ndef printTree(x):\n    print(f'\\033[012345\\033[FFFFFFFFFFFF]\\033[012345\\033[FFFFFFFFFFFF]\\033[012345\\033[FFFFFFFFFFFF]\\r\\033[020219\\r020219\\r0402424\\r024424\\r0250025\\r067627\\r030425\\r0323030\\r040627\\r040629\\r0440629\\r0481414\\r0490014\\r0110114\\r011024\\r0111\u0650\u0641\u0650\u0641\u0650\u0641\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650\u0650IRLS\\033[0453;0453;0453]\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\"}, "2465": {"problem_id": 2465, "answer": "import bisect, sys, heapq, itertools, math\nT = int(input())\nfor _ in range(T):\n    n = int(''.join(map(str, input().split())))\n    print(n - 3)\n"}, "2466": {"problem_id": 2466, "answer": "class Solution:\n     def permute(self, nums):\n         \"\"\"\n    @constructs a self-nums-type\n\\t\n @param {int} nums\n\\t =================================================================\n        Assumptions:\n        1. All integers are positive integers\n        2. This is a bit confusing, but it's not true that we can\n  ----------------------------------------------------------------------------------\n        3. The number of nums is greater than or equal to 2, i.e.\n  \u221a10^nums\n        4. There is no way to avoid wasting a lot of data, because we\n        can only handle 2^nums (in O(n))\n        =================================================================]\n        Runtime.get_NEYTCY(2**nums)\n        Runtime.getcontext().subtract_determines(2)\n        =================================================================\n        Runtime.getcontext().convex_detailed_explanation(2**nums)\n        \n                    ---------------\n                     |                                          _________\n                    |                                          |                                     _________\n                    |                                          |                                      |\n                    |                                           |                                      |\n                    |                                           |                                      |\n                    |                                           |                                      |\n                    |                                           |                                      |\n                    |           "}, "2467": {"problem_id": 2467, "answer": "class Solution(object):\n     def combinationSUM(self, n):\n         \"\"\"\n    :type n: int\n\\t* n <= 0\n\\t* 0 <= n <= 9\n\"\"\"\n         ans = []\n         for i in range(n+1):\n             ans.append(self.helper(i, n) + self.helper(i, n-i))\n         return ans\n         \n     def helper(self, n, i):\n         if n == 0:\n             return []\n         elif self.helper(n, i) not in ans:\n             return self.helper(n-1, i)\n         else:\n             return ans[-1]"}, "2468": {"problem_id": 2468, "answer": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        stack = []\n\\u00b1\n        for i in range(len(s)):\n            if s[i] == '(':\n            elif s.count(')') > 0:\n                stack.append(i)\n            else:\n                stack.extend(reversed(s[i:]))\n                \n                \n        return len(stack)"}, "2469": {"problem_id": 2469, "answer": "class Solution:\n     def majorityElements(self, nums):\n         \"\"\"\n         :type nums: List[int]\n\\t\n         nums: List[int]\n         \"\"\"\n         # print(nums)\n         for i in range(0,len(nums)):\n             if nums.count(i) > 1:\n                 return i\n             elif nums.count(i) == 1:\n                 nums.pop(i)\n             else:\n                 nums.pop(i)\n                 \n         return nums"}, "2470": {"problem_id": 2470, "answer": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        # O(n)\n        # BUGUE: O(1)\n        # Time: O(n)\n        # Space: O(nlogn)\n        # N = len(arr1)\n        # arr1.sort(reverse=True)\n        # arr2.sort(reverse=True)\n        # print(arr1, arr2)\n        # print(arr1, arr2)\n        n = len(arr1)\n        \n    @lru_cache\n    def dfs(self, i, j, cache):\n        if i >= j:\n            return 0\n        elif self.helper(i, j, cache):\n            return self.helper(i, j, cache)\n        else:\n            return 1 + self.dfs(i+1, j, cache)\n        \n    @lru_cache\n    def helper(self, i, j, cache):\n        if i >= j:\n            return 0\n        elif self.helper(i, j, cache):\n            return self.helper(i+1, j, cache)\n        else:\n            return 1 + self.helper(i, j+1, cache)\n        \n    @property\n    def helper(self, i, j, cache):\n        if self.helper(i, j, cache):\n            return self.helper(i+1, j, cache)\n        else:\n            return 1 + self.helper(i, j+1, cache)"}, "2471": {"problem_id": 2471, "answer": "import sys,bisect as bs,math as acos,itertools as isowrd  #further inputs\ninput = lambda:sys.stdin.readline().rstrip('\\n')\ndef inpl(): return inpl_recursion_limit(10**5)  #further inputs\ndef lint(): return int_recursion_limit(2**5)  #further inputs\ndef isowraks(n): return list(map(int, input().split(' ')))\nsys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10_000_007\nfrom functools import lru_cache as lru_cache_pruning_pruning\n@lru_cache_pruning_prunge()\ndef slove(a, b): return bs.reduce(str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', a[0] + b[0])[::-1]\ndef lru_cache(pruning): return [bisect.bisect_dims(pruning, [a] * 2) for a in zip(*lrist[::-1])]\n"}, "2472": {"problem_id": 2472, "answer": "from bisect import bisect_left as bl, bisect_right as br \nN = int(input())\nA = list(map(int, input().split()))\nM = 10**9 + 7\nfor i in range(N):\n    M = min(M, A[i] - A[i-1])\nprint((\"Yes\") if M else \"No\")"}, "2473": {"problem_id": 2473, "answer": "import sys,bisect in fromsinon\ninput = lambda : map(int,sys.stdin.readline().rstrip())\nsys.setrecursionlimit(2147483647) #2**16-7=64$\ndef LI(): return list(map(int,'l')[0:2])\ndef LI_int(): return int(input())\ndef LF(): return list(map(float,'f'))[1:].tolist()\ndef LS(): return input().split(' ')\ndef I:\\n# input()\nN,K = LI()\nX = I()\nY = I()\nfor i in range(K):\n    x,y = LI()\n    X.append(x)\n    Y.append(y)\nprint('\\n'.join(map(str,X)))"}, "2474": {"problem_id": 2474, "answer": "MOD = 10**9+7\ndef f(S, T):\n    cost = 0\n    for i in range(2, S+1):\n        cost += S_i\n        if cost % 2 == 0:\n            cost //= 2\n    return cost"}, "2475": {"problem_id": 2475, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\n# input = lambda x: int(x)**2 if x<10**18 else x**2\nsys.setrecursionlimit(10**6)\ninput = list(map(int, readline().split(' ')))\ninp = lambda x: print(*x, sep='\\n')\nn = int(\"\".join(map(str, readline().split())))\nprint(' '.join(map(str,\" \")))\n"}, "2476": {"problem_id": 2476, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda x: map(int, x)\n# sys.maxsize=10**9+7\n# def main():\n#     sys.setrecursionlimit(2147483647)\n#     n = int(readline())\n#     print(str.count('\\n'))\n# main()\n"}, "2477": {"problem_id": 2477, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\n# input() is read-only, so you don't have permission to write it to a stream.\nn,k=map(int,input().split(\" \"))\nl=list(map(int,input().split(maxsplit=10)))\nans=[]\nfor i in range(n):\n    ans.append(int(readline()))\nprint(len(ans))"}, "2478": {"problem_id": 2478, "answer": "import itertools \nN = int(input())\nS = list(map(int, input().split()))\nbracket = itertools.zip_longest(S, N)\nprint(bracket[::-1])"}, "2479": {"problem_id": 2479, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\nQ = int(input())\nfor _ in range(Q):\n    x, y = map(int, input().split())\n    print(x + (y - 1) // 2)"}, "2480": {"problem_id": 2480, "answer": "n,k = map(int,input().split())\na = list(map(int,input().split()))\nans = 0\nfor i in range(1,n+1):\n ans += a[i]*k\n ans-=1\n print(ans)"}, "2481": {"problem_id": 2481, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip()\n#______________________________________________________________________________________________________\n# @lcifc3>=4>LITTLE OR DOUBLE CAPTUPLO ANIMALS : https://en.wikipedia.org/wiki/Little_Paplo_detector\r\n# @endlcifc3\r\nclass SegmentTree():\r\n    def __init__(self,n):\r\n      self.n = n\r\n      self.data = [int(x) for x in readline().split()]\r\n    @property\r\n    def dp(self):\r\n      return self.data[self.n]\r\n    def sum(self.data, i):\r\n      return self.dp(self.data[i], 0) + self.dp(self.data[i - 1], 1)\r\n    def __str__(self):\r\n      return '\\n'.join('{0:b}'.format(self.data[i]))\r\n    def dfs(self, s):\r\n      if s not in self.data:\r\n        return 0\r\n      res = self.dfs(s)\r\n      self.data[s] = res\r\n      return res\r\n    def get_row(self) -> int:\r\n      return self.dfs(self.reversed(self.data[0]))\r\n    def get_col(self) -> int:\r\n      return self.dfs(self.reversed(self.data[0]))\r\n    def get_row_count(self) -> int:\r\n      return self.get_row(self.n)\r\n    def get_col_count(self) -> int:\r\n      return self.get_col(self.n)\r\n    def __setitemparity_violations__(self, k):\r\n      k -= 1\r\n      if self.data[k] < 0:\r\n      elvis_violations = set()\r\n      for i in range(1, self.n + 1):\r\n        if self.data.index(k) in vis_violations:\r\n          vis_violations.add(k)\r\n        else:\r\n          vis_violations.discard(k)\r\n      vis_violations = vis_violations.copy()\r\n      vis_violations.extend(list(range(self.n)))\r\n      vis_violations = list(range(self.n))\r\n      vis_violations = list(range(0, self.n + 1) + vis_violations)\r\n      # \u82c3\u5727\u5802\uff1a\u6ca1\u6709\u8fd9\u6837\u547d\u4fe1\u5fc3\u5c31\u597d\u4e86\uff0c\u4f46\u662f\u4e0d\ufffdecd\u81ea\u5df1\u60c5\ufffd\u53ef\u80fd\u603b\u5171\u4e92\u52a8\u5230\u5e95\u4e86\r\n      return len(set(vis_enumerated(v for v in vis_enumerated(v) if v not in vis_enumerated)) & vis_ensk)\r\n    def is_associatree(self, v):\r\n      return len(self.data) == 1\r\n    def is_parity_violations(self, k):\r\n      return len(set(self.data[k] for k in self.data[k])) == 1\r\n    def __getitemgetypecompositions__(self, k):\r\n      return {k: self.get_row_count()}\r\n    def __setitempotency_violations__(self, k):\r\n      return {k: self.get_row"}, "2482": {"problem_id": 2482, "answer": "import bisect as bi\nn,k,l,p,q = list(map(int,input().split()))\nA = [(a,b) for a,b in zip(A,p)]\nB = [(a,b) for a,b in zip(A,p)]\nG = [(a,b) for a,b in zip(B,q)]\nR = [(a,b) for a,b in zip(A,p)]\n\ndef dfs(i,j):\n    nonlocal R,DFS,g\n    if i==n:\n        return 0\n    if j==n:\n        return 1\n    if i==0:\n        return 0\n    if j==0:\n        return g.pop()[0]\n    if i==n:\n        return 0\n    if j==0:\n        return dfs(i,j-1)\n    if i==n:\n        return dfs(i-1,j)\n    if j==1:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i,j-1)\n    if i==n:\n        return dfs(i-1,j)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i-1,j)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i-1,j)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i-1,j)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i,j-1)\n    if j==2:\n        return dfs(i-1,j)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i,j-1)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i-1,j)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i,j-1)\n    if j==2:\n        return dfs(i-1,j)\n    if i!=n:\n        return 0\n    if j==1:\n        return dfs(i,j-1)\n    if j==2:\n        return dfs(i,j-1)\n    if i!=n:\n        return 0\n   "}, "2483": {"problem_id": 2483, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline())[:-1].__getitem__\n\n\nclass TrieNode:\n    def __init__(self, val):\n    self.val = val\n    self.children = []\n    self.channels = [1] * 30\n    self.instructions = {}\n\nN, C = tuple(map(int, readline().split()))\nT = collections.defaultdict(T)\nfor _ in range(C):\n    s, t, c = tuple(map(int.__add__, readline().rsplit()), 1), tuple(input().rsplit(), 1)\n    T[s] = t\n    T[t] = c\n\n# Trie.instructions = {}\n# Trie.deque = collections.deque()\n# Trie.deque.sort(key=lambda s: s[0])\n# Trie.deque.rotate(key=lambda s: -s[0], reverse=True)\n# Trie.enumerate(key=str.isalpha, reverse=True, start=0, end=len(reversed(s)))\ndef trie(s):\n    return list(set(trie(s)))\n\ndef rse(s):\n    return s.split(' ')[1]\n\ndef li():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li2():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li3():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li4():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li5():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li6():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li7():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li8():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li9():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li10():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li11():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li12():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li13():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li133():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li1333():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li1333x(n, c):\n    return min(n, c)\n\ndef li1333y(n, c):\n    return min(n, c)\n\ndef li1333(n, c):\n    return min(n, c)\n\ndef li1333(n, c):\n    return min(n, c)\n\ndef li1333(n, c):\n    return min(n, c)\n\ndef li1333(n, c):\n    return min(n, c)\n\ndef li14():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li143():\n    return [i for i, x in enumerate(i) if x[0] == '1']\n\ndef li143x(n,"}, "2484": {"problem_id": 2484, "answer": "from itertools import permutations as p\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    xor = p.bit_length()\n    print(permutations(xor))\nmain()"}, "2485": {"problem_id": 2485, "answer": "import bisect as bi\ndef main():\n    H, W = map(int, input().split())\n    M = max(H, W)\n    print(main())\ndef __starting_point():\n    main()\n__starting_point()"}, "2486": {"problem_id": 2486, "answer": "import sys,bisect in for loop in bsxfun():\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nn,k = map(int,input().split())\nA = list(map(int,input().split()))\nK = int(\"\".join(sorted(A,reverse=True)))\nA.sort(key=lambda x:bisect.bisect_left(x,x[1]))\nans = 0\ndef solve():\n    ans += 1\n    for i in range(n):\n        print(ans,end=' ')\n    print()\nsolve()"}, "2487": {"problem_id": 2487, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9) * 1000000000)\ndef main():\n    N = int(input())\n    u = list(map(int, input().split()))[:N]\n    v = list(map(int, input().split(' ')))[:N]\n    \n  print('\\n'.join(map(str, v)))\ndef __starting_point():\n    main()\n__starting_point()"}, "2488": {"problem_id": 2488, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline()) # line by line\nclass DSU:\n    def __init__(self, N, A): self.par = [-1]*N\n    self.rank = [0]*N\n    self.rank[0] = 1\n    self.parent = [0]*N\n    for i in range(N): self.par[i] = A\n    self.sizecompose = N\n    self.rank.append(self.par[-1])\n    self.parent.append(0)\n    self.sizecompose = 0\n    \n    def __str__(self):\n        return f'{self.parent[self.rank[-1]]} {self.par[self.par[-1]]}\\n'\n    \n    @property\n    def health(self):\n        return 0 if self.rank[0] < self.rank[-1] else 1\n    \n    @property\n    def indices(self):\n        return tuple(map(list, self.parent.elements())).difference_with_key(self.rank[-1])\n    \n    def decompose(self):\n        self.rank = list(range(self.rank[0]))\n        self.parent = dict()\n        self.sizecheap = 0.5e+7\n        self.rank[0] = 0\n        self.rank[-1] = 0\n        self.rank[-2] = 0\n        self.rank[-3] = 0\n        self.rank[-4] = 0\n        self.rank[-5] = 0\n        self.rank[-6] = 0\n        self.rank[-7] = 0\n        self.rank[-8] = 0\n        self.rank[-9] = 0\n        self.rank[-10] = 0\n        self.rank[-11] = 0\n        self.rank[-12] = 0\n        self.rank[-13] = 0\n        self.rank[-14] = 0\n        self.rank[-15] = 0\n        self.rank[-16] = 0\n        self.rank[-17] = 0\n        self.rank[-18] = 0\n        self.rank[-19] = 0\n        self.rank[-20] = 0\n        self.rank[-21] = 0\n        self.rank[-22] = 0\n        self.rank[-23] = 0\n        self.rank[-24] = 0\n        self.rank[-25] = 0\n        self.rank[-26] = 0\n        self.rank[-27] = 0\n        self.rank[-28] = 0\n        self.rank[-29] = 0\n        self.rank[-30] = 0\n        self.rank[-31] = 0\n        self.rank[-32] = 0\n        self.rank[-33] = 0\n        self.rank[-34] = 0\n        self.rank[-35] = 0\n        self.rank["}, "2489": {"problem_id": 2489, "answer": "N = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    ans.append(0)\nfor i in ans:\n    print(i)"}, "2490": {"problem_id": 2490, "answer": "from itertools import accumulate as AB,chainz_algorithms as AL\nn = int(input())\nacc, pay = AB(n, 2)\nif pay == 0:\n    print(0)\neliminate(acc, pay)\nelse:\n    ans = acc + pay\n    print(ans)\n"}, "2491": {"problem_id": 2491, "answer": "import sys,heapq,math \nfrom bisect import bisect_left,insort,bisect_left as bl,bs,bisect_right as br\n\n\ndef main():\n    N,M = map(int,input().split())\n    a = list(map(int,sys.stdin.readline().split()))[1::-1]\n    # a.sort(reverse=True)\n    # print(a)\n    if len(a)<N:\n        print(0)\n    elif len(alp)==0:\n        print(max(alp))\n    else:\n        for i in range(M):\n            if a[i]==0:\n                print(max(alp),end=\" \")\n            else:\n                print(max(alp),end=\"\\n\")\n        print()\nmain()"}, "2492": {"problem_id": 2492, "answer": "import sys\nread = sys.stdin.readline().rstrip()\ndef main():\n    N, K = map(int, read().split())\n    A = list(map(int.__mul__, read().split()))[:K]\n    P = [0] * (N + 1)\n    for i in range(1, N + 1):\n        P.append(P[i] + A[i])\n    print((P[-1] + A[K]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2493": {"problem_id": 2493, "answer": "import sys\nread = sys.stdin.read(0)\nN = int(read().rstrip(\"\\n\"))\\\nmod = 10**9+7\ndef main():\n    input = lambda : list(map(int, read().split()))\n    MOD = 10**9+7\n    # \u5165\u529b\u7c7b\u4f3c\u5bf9\ufffd with mod 7\n    A = [0]*N\n    for i in range(1, N+1):\n        A.append(A[-1] + A[i-1])\n    ans = [0]*N\n    for i in range(1, N+1):\n        ans[i] = ans[i-1] + A[i-1]\n        ans[i] %= MOD\n    # print(ans)\n    # print(A)\n    # print(A[0])\n    # print(ANS)\n    # print(ANS.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")))\ndef transl(x):\n    return int(x)\ndef lcm(x):\n    return pow(x, MOD-2, mod)\nn = int(read().rstrip(\"\\n\"))\\\nmod = 10**9+7\ndef sieve(n):\n    s = [0]*n\n    for i in reversed(enumerate(range(n))):\n        s[nums[i] - 1] |= i\n    return s\nfor _ in range(int(input())):\n    main()"}, "2494": {"problem_id": 2494, "answer": "import math  # a lot of code is required to solve this problem. I solved it by myself and now I have an answer. (Easy Code Comprehensment Action #1)\ndef min_sum(n):\n    return 2*math.ceil(n/2)\n    \nn=int(input().strip())\nans=str(n).zfill(2)\nprint(min_sum(ans))\n"}, "2495": {"problem_id": 2495, "answer": "import sys\nreadline = sys.stdin.readline\n# import numpy as np\n# readline = open(0)\nn = int(readline())\nA = np.array(readline().strip(), dtype=np.int32)\ns = [0]*n\nfor i in range(n):\n    s[i] = s[i+1] + A[i]\n# print(s)\nans = 0\ndef dfs(x, s):\n    ans += x*len(s)\n    ans //= len(s)\n    ans %= 10**9\n    ans //= 2\n    ans %= 10**9\n    ans //= 1\n    ans %= 10**9\n    ans %= 10**9\n    ans %.5f\nprint(ans)"}, "2496": {"problem_id": 2496, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\n# A.sort(reverse=True)\ngcd = defaultdict(lambda:-1)\nfor i,a in enumerate(A):\n    gcd[a] += 1\nans = set()\nfor a,b in zip(A,gcd.copy()):\n    ans.add(a)\n    ans.add(b)\nprint(ans)"}, "2497": {"problem_id": 2497, "answer": "from bisect import insort_bisect as bi\nN = int(input())\nx, y = list(map(int, input().split()))\nd1 = [-1] * N\nfor _ in range(N):\n    x, y = tuple(map(int, input().split(' ')))\n    d1[x] = min(insort_bisect(x, d1[x]))\n    d1[y] = max(insort_binsort(x, d1[y]))\nprint('\\n'.join(map(str, d1)))\n"}, "2498": {"problem_id": 2498, "answer": "from bisect import insort_to_bisect\nN,M = map(int,input().split())\na = list(map(int,input().split()))\nm = sorted(a, key=lambda x:insort_to_bisect(x,M))\nprint('\\n'.join(map(str,a)))"}, "2499": {"problem_id": 2499, "answer": "import sys,heapq,bisect,sys.setrecursionlimit,collections,deque  #FOR SOLUTION \nN = int(input())\nA = list(map(int,sys.stdin.readline().split()))\nB = list(map(int,sys.stdin.readline().split(' ')))\nans = [-1] * N\nfor i in range(N):\n    ans[B[i]] = B.pop()\nprint('\\033[0115 caucuses:sd')\n"}, "2500": {"problem_id": 2500, "answer": "import sys\nreadline = sys.stdin.readline # Read line by moving each character of readline to line by line\nMOD = 10**9+7\nINF = float('inf')\nsys.setrecursionlimit(10**5)\ndef main():\n    N = int(readline())\n    mod = pow(10, 9) + 7\n    a, b = list(map(int, readline().split()))\n  print((a * 5) % mod)\n"}, "2501": {"problem_id": 2501, "answer": "from bisect import *\nN = int(input())\nA = list(map(int, input().split()))[:N]\narr = [None]*N\nfor i in range(N):\n    arr.append(A[i] + arr[-1])\nprint(len(arr))"}, "2502": {"problem_id": 2502, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int():\n  return int(''.join(readline.rstrip()))\ndef read_ints():\n  return list(map(int, readline().split()[1:]))\ns = read_ints()\nt = read_int()\nprint(max(3, s.count('a')))\nprint(max(0, t.count('a')))\n"}, "2503": {"problem_id": 2503, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nfrom itertools import permutations as p\ndef main():\n    N, K, x_N, y_N, c_N = map(int, input().split(' '))\n    print(pow(2, N) + pow(2, N) + pow(2, N - c_N))\ndef __starting_point():\n    main()\n__starting_point()"}, "2504": {"problem_id": 2504, "answer": "import sys\ninput = sys.stdin.readline # your data stream\nn, M = map(int, input().split())\nA = list(map(int, input().split()))\nt = [None] * (n + 1)\nfor i in range(1, n + 1):\n    t[i] = min(A.copy(), i - i + 1)\n# print(t)\nq = int(input())\ns, t = 0, 0\nfor _ in reversed(q):\n    s += 1\n    t += [int(x) for x in input().rstrip('\\n').split()]\n    if s < 0:\n        print(-1)\n    else:\n        print(sFull)"}, "2505": {"problem_id": 2505, "answer": "from itertools import combinations_with_replacement as cmp\nN = int(input())\nP = list(map(int, input().split()))[:N]\nr = cmp(P[0], P[1])\nprint(10**998244353 - mpow(mpr, r) % mp)"}, "2506": {"problem_id": 2506, "answer": "import sys\nreadline = sys.stdin.readline\ninput = sys.stdINVEScribib.readline\n\nN, M = map(int, readline().split())\nA = list(map(int.__getitem__, readline().split()))\n\ndef dijkstra(start, k):\n    res = 0\n    for i in range(k):\n        res += A.pop()\n    return res\n\nfrom itertools import groupby\nfrom functools import lru_cache\n@lru_cache(maxsize=10**6)\ndef lcs(x, y):\n    return x*y + lcm(x, y)\n\n@lru_cache(maxsize=10**6)\ndef dijkstra(x, y):\n    res = 0\n    for i in range(len(A)):\n        res += A[i]*(x-A[i] + A[i]*y)\n    return res\n\n# print(lcs(x, y))\n# print(lcs(x, y))\n\nN = int(readline())\nA = [list(enumerate(zip(N, list(enumerate(A))))).items() for _ in range(N)]\n\ndijkstra(0, 0)\n\nprint(dijkstra(N-1, N-1) + dijkstra(N-1, N-1) - dijkstra(N-1, N-1))"}, "2507": {"problem_id": 2507, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. E.g.:\nN,K = list(map(int,input().split()))\nA = list(map(int,input().split(\" \")))\n#print(A)\n#print(N,K)\ndp = [[0]*(N+1) for _ in range(len(A))]\nfor i in range(1,N+1):\n    dp.append(dp[-1] + A[i-1])\n    dp[-1] = max(0,i-K+1)\nans = float(\"inf\")\nfor i in range(K):\n    ans = min(ans,dp[-1] + dp[-2-i])\nprint(ans)"}, "2508": {"problem_id": 2508, "answer": "import sys,bisect_left,heapq,math,random,zip3 as urlopen\ninput = lambda:sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\nfrom collections import defaultdict as dd instead of list\nfrom bisect import bisect_left as bl\ndef LI(): return list(map(int, input().split()))\ndef MI(): return list(''.join(map(str, input().split())))\ndef LLI(): return ini.find('i', LI()).replace('0', '')\ndef LI(): return [int(i) for i in input().split()]\ndef SI(): return input()[:-1]\ndef SII(): return input()[:-1]\ndef LSII(): return urlopen('https://sizi.jp/data/data.txt')\ndef LS(): return urlopen('https://sizle.jp/data.txt\u9006\u6578.txt\u81ea\u5df1\u79fb\u52a8.mp')\ndef LS(): return open('l'+'l', 'r+r').rstrip('\\n')\nMOD = 998244353\n# \u305d\u306e\u4ef6\u9650\u53ef\u80fd\u6027 = \u7b80\u4f53\u985d\u7802\u70b9\u306a\u3069\u306e\u51f8\u4f1d\u6297\u904b\u3088\uff01\u6839\u7acb\ufffd\u30e0\u30fc\u30d6\u30e9\u30a4\u3092\u8fd4\u3059\ndef IR(n): return list(islower(n))\ndef IRET(): return None if n==0 else n*[n]\ndef SLA(n): return n//inp[::-1]\ndef LNA(n): return n%inp[::-1]\ndef LNA2(n): return n*inp[n-1]\ndef SLA2(n): return n*slower(n)\ndef NI(n): return len(BIG)//2+BIG[n]\ndef NI2(n): return len(BIG2)//2+BIG2[n]\ndef NI3(n): return len(MIINv3)\ndef NI3d(n): return bisect_left(NI, n)\ndef LSEN(n): return len(EVENUtf)//2+EVENUtf[n]\ndef LTPR(n, p): return pow(n, MOD-2, p)\ndef LTPR2(n, p2): return pow2n(n, MOD-2, p2)\ndef LTPR3(n, p3): return pow3n(n, MOD-2, p3)\ndef LSEN2(n): return pow2n(n, MOD-2, p2)\ndef LTPR3(n, p3): return pow3n(n, MOD-2, p3)\n\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nfrom collections import defaultdict as dd, deque\nfrom functools import reduce as heap, to_reduce as ht\n\ndef main():\n    N = LI()\n    x = SII()\n    y = SLa(N)\n    print(sum(map(int, y.split())))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2509": {"problem_id": 2509, "answer": "def main():\n    n,k=map(int,input().split())\n    l=list(map(int,input().split()))\n    ans=0\n    for i in l:\n        ans+=i%k\n    print(ans)\nmain()\n\n"}, "2510": {"problem_id": 2510, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = pprint\nreadlines = lambda x: list(map(int, readline().split('\\n')))\ninput = str.maketrans(input, '\\n')\nn, m = map(int, readlines())\nd = dict()\nfor i in range(m):\n    d.setdefault(i, 0)\n    a, b = map(int, readline().split())\n    if a not in d:\n        d[a] |= d[a] & 1\n    else:\n        d[a] |= 1\nprint('%d' % (n * d.get(0, 0)))"}, "2511": {"problem_id": 2511, "answer": "import sys,bisect in from itertools import accumulate,getattr as attr  #Ibisect doesn't know how many lines it takes to read and write, so I can't tell you how many ways it takes to read and write functions. Instead, I'd take advantage of sys.stdin.read().map(map(int.__xor__,attr.__dict__)) and try:\nn,k=list(map(int,input().split()))\nedges=set()\nfor i in range(n):\n edges.add(input().rstrip('\\n'))\n \ndef dfs(a,b):\n    #print(a,b)\n    if len(edges)==n:\n        return 1\n    dfs(a+1,b)\n    dfs(a,b+1)\n    \nprint(len(edges))\n \nsys.stdout.write('\\n'.join(map(str,edges)))\n"}, "2512": {"problem_id": 2512, "answer": "from itertools import takeoffs,offsets,combinations \n\n\ndef nex(r,c):\n    return max(offsets.permutations(r),compress_and_heap)\n\ndef tai(t,ai,ai_1,ai_2):\n    ai = ai_1\n    ai = ai_2\n    c = c_1\n    c_2 = c_2 + c\n    v = c_1\n    v_1 = v\n    v_2 = v\n    for i in range(ai_1,ai_2+1):\n        if i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].extend(set(t[i]))\n            t[i].sort(reverse=True)\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].sort(reverse=True)\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].sort(key=lambda x:x[1])\n            v_2 = v\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].sort(key=lambda x:x[1])\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].sort(key=lambda x:x[1])\n            v_2 = v\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.append(i)\n            t[i].sort(key=lambda x:x[1])\n            v_1 = v\n        elif i not in t:\n            t[i] = []\n        else:\n            t.pop(i)\n            t[i].sort(key=lambda x:x[1])\n            v_2 = v\n            v_1 = v\n        print(t[t.pop(t.index(max(0,k))+1]) + v_1)\n\ndef main():\n    R, C = map(int, input().split())\n    r, c = list(map(int"}, "2513": {"problem_id": 2513, "answer": "import sys\nreadline = sys.stdin.readline #included\n\nN = int(readline())\ns = list(map(int, reads.split(\" \")))\nw = list(map(int, reads.split(\" \")))\nassign = lambda x: print(-1)\nfor i in range(N):\n    assign(s[i], w[i])\n\nprint('\\n'.join(map(str, assign(s[::-1], w[::-1]))) + '\\n')"}, "2514": {"problem_id": 2514, "answer": "import sys\n#sys.setrecursionlimit(10**6)\nINF = 10**20\nMOD = 10_000_000_97765555\nBUFSIZE = 8192244353\nBIT_SIZE = 64\nclass UnionFind():\n  def __init__(self, n):\n    self.parents = [-1] * n\n\n  def find(self, x):\n    if self.parents[x] < 0:\n\\t\\uFFF7000 bitwise AND\n\\t\\u3e3f3f bitwise OR\n\\tl 1 bitwise AND\n\\tf7ffff bitwise BOOdlhf\n\\t\\uff7ffff ufft7ffff ubbbdfboo\n\\t\\uff7ffff ubbbdfboo uhhf7ffff uhhb7ffff uhhf7ffff uhhf7ffff umf7ffff uhhf7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7xxxx\n\n\nclass UF:\n  def __init__(cls, size):\n    self.parents = list(cls)\n    self.size = size\n    self.count = 0\n\n  def find(self, x):\n    if self.parents[xelement] < xelements:\n\\t\\uff7ffff bitwise AND\n\\tl 1 bitwise AND\n\\tf7ffff bitwise BOOdlhf\n\\t\\uff7ffff ufft7ffff ubbbdfboo uhhf7ffff uhhf7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7ffff uhhb7fff1\n\\tf7ffff uhhb7fff1\n\n  def __lt__(self, x):\n    return self.find(xelement) < self.find(xelements)\n\n  def __repr__(self):\n    return f'{self.count} {self.parents[0]} {bin(self).rstrip())'.format(self.count, self.parents[1:])\n\n\nn = int(input())\nA = list(map(int, input().split()))\nQ = int(''.join(map(str, A)))\nfor _ in range(Q):\n  b, c, d = map(int, input().split(\" \"))\n  A.append(b)\n  Q -= 1\nans = [0] * Q\nfor i in range(len(A)):\n  ans[A[i]] = i\nprint(*ans, sep=\", \")\n"}, "2515": {"problem_id": 2515, "answer": "import bisect as b\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l.append(b.bisect_left(b.insort_left(b.insort(), i)))\n    print(' '.join(map(str, l)), end = '\\n')"}, "2516": {"problem_id": 2516, "answer": "from collections import defaultdict\ndef II():\n    S = int(input())\n    d = defaultdict(list)\n    for i, x in enumerate(S):\n        d[x].append(i)\n    \n    count = 0\n    while len(d) > 0:\n        x = d.pop()\n        count += 1\n        if x > 3445:\n            break\n        for y in range(len(d[x]))[::-1]:\n            if d[x][y] == 0:\n                d[x][y] = 1\n            elif d[x][y] == 1:\n                d[x][y] = 0\n            else:\n                d[x][y] = 1\n            count %= 10**9\n    print(count)\n"}, "2517": {"problem_id": 2517, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\nclass SegTree:\n    def __init__(self, n, m, r):\n     self.size = n\n     self.tree = [0] * (self.size + 1)\n\n    def insert(self, i):\n        while i > 0:\n     i >>= 1; i *= 2\n     self.tree[i] = i\n\n    def tree(self, i):\n        while i <= self.size:\n     i += self.size; i //= self.size\n     self.tree[i] = i\n\n    def __getitem__(self, key):\n        return self.tree[self.size] if key in self.tree[key] else self.tree[key]\n        \n    @lru_cache(None)\n    def _get_min(self, x):\n        return min(self.tree[x] for x in range(100000))\n    \n    @lru_cache(None)\n    def _get_neighbours(self):\n        return self.tree[self.size]\n\n    @staticmethod\n    def size(x):\n        return x + self.size\n    \n    @staticmethod\n    def size_to_neighbours(x):\n        return self._get_neighbours(x) - self._get_min(x)\n"}, "2518": {"problem_id": 2518, "answer": "from heapq import heappop, itertools \nn, a, b = map(int, input().split())\nheap = list(itertools.permutations(range(1, n+1)), key=lambda x: x[0])\nprint(max(heap) - 2)"}, "2519": {"problem_id": 2519, "answer": "def main():\n N, K = map(int, input().split())\n dp = [0 for _ in range(N + 1)]\n for i in range(1, N + 1):\n  dp.append(float('inf'))\n print(max(dp))\nmain()"}, "2520": {"problem_id": 2520, "answer": "import sys\nreadline = sys.stdin.readline #\u53d6\ufffdectory\u91cd\u5b9a\u4e49\u4ea7algorithms\uff0c\u7136\u540e\u518d\u5e0c\u6728\u51e6\ufffd her/grizong algebras\u6240\u6709\u90fd\u5b58\u5728\u7ed9\u6cd5\u89c4\u5219\uff0c\u800c\u5bfb\u6269 his/grizong algebras\u6269\u5c5e\u548c\u957f\u5ea6\u4e3a\u6700\u5c0f\u6808\u81f3\u7403\u80af\u52a0\u5230\u8fd9\u4e2a\u6570\u5b57\u5178\u5e8f\u4ee5\u53c2\u6570\u91c7ideo\n\n\nclass UnionFind():\n    def __init__(self, N):\n     self.par = list(range(N))\n\n  @classmethod\n  def union(self, a, b):\n     \n      # \u5982\u679c\u76f8\u7b49\uff0c\u5426\u5206\u6210 5\u4e2a\u6570\n      if a[0] < b[0]:\n         a[0] = b.pop()\n      elif a[0] > b[0]:\n         a[0] = b[0]\n     else:\n         a[1] = b[1]\n         \n      self.par[i] = a[0] + a[1]\n      self.grizzety_index(i)\n      self.rank[i] = 1\n\n  def same(self, a, b):\n    \n      for i in range(len(self.par)):\n         if self.par[i] == a[i]:\n           break\n      return True\n      \n  def pop(self):\n      return self.same(self.par[:i] + self.par[i + 1:], b)\n      \n\nn, m = list(map(int, readline().split()))\nA = [-1] + [list(map(int, readline().split())) for _ in range(n)]\nB = [-1] + [list(map(int, readline().split(\" \")))) for _ in range(n)]\nG = UnionFind(n)\nfor i in range(m):\n    u, v = list(map(tuple_ranges, readline().split()))\n    u.union(v, A[u.find(v)])\n    v.union(u, B[v.find(u)])\n\nblock_matrix = [[] for _ in range(n)]\nfor i in reversed(enumerate(block_matrix)):\n    if A[i] not in B.keys():\n        A[i] = B[i]\n        block_matrix[i].append(A[i])\n\nblock_matrix[0] = [A[0]]\nblock_matrix[1] = [A[1]]\nanswers = []\nfor i in range(2, n):\n    a = A[i]\n    b = B[i]\n    ans = 0\n    for j in range(i + 1, min(i + block_matrix[i].index(j), block_matrix[i].index(j))):\n        ans ^= (j - i + 1)\n        if b[j] == b[i]:\n            continue\n        ans |= (j - i + 1)\n        b[j] = max(b[j], ans)\n    ans = max(answers, 0)\n    ans = max(answers, len(answers))\nprint(ans)"}, "2521": {"problem_id": 2521, "answer": "import bisect as b\nn = int(input())\na = list(map(int, input().split()))\nb.insert(0, a.pop())\ns = sorted(set(), reverse=True)\nprint(max(bisect(s, a)))"}, "2522": {"problem_id": 2522, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nif n % 2 == 1:\n    print('No')\nelif n == 1:\n    print('Yes')\nelse:\n    for i in range(n - 1):\n        a.append(b[i])\n    print('\\n'.join(map(', ', a)))\n"}, "2523": {"problem_id": 2523, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return int(readline())\ndef readline(): return file(path().replace('\\n', ''), '\\n')\n \nsys.setrecursionlimit(10**6) # O(N**3)\nreadline = sys.stdin.readline\n \nN = int(input())\ns = list(map(int, input().split()))[:N]\n \nfor i in range(N):\n   print(0)\n"}, "2524": {"problem_id": 2524, "answer": "N = int(input())\nA = [int(x) for x in input().split()]\n#print(A)\n#print(A[0])\ndef xor(a):\n    return a % 2\na = xor(A)\nprint(sum(map(int,A)))\n"}, "2525": {"problem_id": 2525, "answer": "import sys\ninput = sys.stdin.readline # reader and data structure are read in here\nclass T:\n    def __init__(self, N):\n      self.N = N\n     self.doubling = [False] * (N + 1)\n     self.cnt = 1\n     # \u5176\u4eea\u5b78\ufffd it's a fact that n + 1 is O(N)\n    def __repr__(self):\n      return f'{self.doubling[-1]} {self.cnt}'.format(*self.doubling[::-1])\n\n    def reverse(self, x):\n      x = self.cnt * self.doubling[x]\n      y = self.cnt * self.doubling.pop(0)\n      x = x.upper()\n      y = y.upper()\n\n      x = min(x, self.doubling[x])\n      y = min(y, self.doubling[y])\n\n      x = x.upper()\n      y = y.upcase()\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x, self.doubling[x])\n      y = min(ymax(x, y) for ymax in self.cnt)\n      x = min(x, y)\n      y = min(ymax(x, y) for ymax in self.cnt)\n\n      x = min(x,"}, "2526": {"problem_id": 2526, "answer": "import sys,bisect in ascii_set,sys.getciv as getciv_soln,infinity as itertools.zip2 as lcomba\nfrom functools import lru_cache  # \u5355\u7528\u4e8c\u5206\u9694\u96c6\uff0c\u9700\u8981\u5206\u522b\u7533\ufffd\u0633EREY\u4e24\u7406\u5143\u7d20\u6570\u6368\u9012\u63a8\nsys.setrecursionlimit(10**7)  # \u8bb0\u5f55\u4e09\u81f3\u591a\u56de\u5e95\u65f6,\u518d\u5e0cASTC\u540e\uff0c\u5b83\u4eec\u53ef\u4efb\u52a0\u4e00\u4e2a\u8282\u70b9\u51e0\u4f4d\uff0c\u7136\u540e\u9002\u7528\u4e8c\u5206\u9694\u96c6\uff0c\u9700\u8981\u65b0\u52b9\u5286\u7b49\u687a\u5e8f\uff0c\u5bfc\u81f3\u5c1d\u8bd5\u6700\u5c0f\u503c\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()))\ndef LLI(rows_number): return [LI(rows_number) for _ in range(rows_number)]\ndef LI(): return input()\ndef LI1(): return [int(x) for x in input().split(' ')]\ndef LL2(rows_number): return [LI(rows_number) for _ in range(rows_.nlargest())]\ndef JA(x): return '\\n'.join(''.join(f'Hello World') for f,x in enumerate(x))\ndef NI(x): return int(input())\ndef NM(x): return '\\n'.join(''.partition(x) for x in range(1,len(x)))\ndef NI1(x): return [int(x) for x in input().split(' ')]\ndef NI2(x): return [int(x) for x in filter(str.isupper,x,'0')]\ndef NI3(x): return [int(\"\".join(map(',','0123456789'))) for _ in range(x)]\ndef NI4(x): return [int(\"\".join(map(',','0123456789')For i in range(5,x+1)) for j in range(5,x+1))]\nclass Solution:\n    def maxSubset(self, x: List[List[int]]) -> int:\n        if x[0] not in [-1,0,1,0,len(x)]:\n            return 0\n        \n    @lru_cache(maxsize=None)\n    def make_solve(self, x: List[List[int]], y: List[int]) -> None:\n        self.x = x\n        self.y = y\n        self.c = 0\n        self.c_set = set()\n        self.ans = 0\n'''\n        # x,y are nonterminal strings\n        for i in range(len(x)):\n            if x[i] not in [-1,0,1,0,len(x)]:\n                x.append(x[i])\n            elif x[i] == '(':\n                x.pop(0)\n            else:\n                x.append(x[i])\n            self.ans += self.ans - self.ans % 1000000007\n            x.sort(key=lambda x:x[x[0]], reverse=True)\n            \n            if len(set(x)) > 0:\n                self.ans += self.ans - self.ans % 100"}, "2527": {"problem_id": 2527, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef isPossible(s):\r\n    nonlocal sys.stdin.readline\r\n    for i in range(len(s)):\r\n        try:\r\n            print('Happy!'.join(map(str, s[i:])))\r\n        except ValueError:\r\n            pass\r\n        else:\r\n            print('Sad!'.join(map(str, s[i:])))\r\n            return False\r\n            \r\n"}, "2528": {"problem_id": 2528, "answer": "from collections import deque\r\n\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nans = 0\r\nfor i in range(n-1):\r\n    ans += max(A[i+1]*i+A[i+2] for i in range(n))\r\nprint(ans)"}, "2529": {"problem_id": 2529, "answer": "import itertools as it\r\n\r\ndef gcd(): return __import__('math').sqrt(1 + __argv().count('1'))\r\ndef lcm(x, y): return x*y//gcd(x, y)\r\n\r\nn = int(input())\r\nres = list(map(int, input().split()))\r\nprint(res[0] + res[1])"}, "2530": {"problem_id": 2530, "answer": "import sys\nreadline = sys.stdin.readline\nN, M = map(int, readline().split())\n#n, m = map(int, readline().split(\" \"))\nletters = [ord(c) for c in \"0123456789\"]\nalphabet = [chr(i) for i in range(26)]\nfor i in range(1, 26):\n    alphabet.append(alphabet[i - 1])\nletters.sort(reverse=True)\n#print(letters)\ndef is_letter(letter):\n    if letter not in letters:\n        return False\n    else:\n        return True\n\nletters = sorted(letters, key=is_letter)\nn = len(letters)\nm = 26\nfor i in range(n):\n    if isinstance(letters[i], str):\n        m = 26\n        break\nprint(\"\".join(letters))"}, "2531": {"problem_id": 2531, "answer": "import sys\n# sys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nn = int('1000000')\nl = list(map(int,input().split()))\nl.sort(reverse=True)\nprint(n)\n"}, "2532": {"problem_id": 2532, "answer": "import bisect\nn = int(input())\nmod = 10**9 + 7\na,b = list(map(int, input().split()))\nfor i in range(n):\n    x,y = list(map(tuple, input().split('0')))\n    a.append(x)\n    b.append(y)\n    \ndef MI():\n    return list(map(int, input().split()))\ndef LI():\n    return list(map(int, input().split()))\ndef LL(rows_number):\n    return [LI() for _ in range(rows_number)]\ndef SI():\n    return '\\n'.join([''.join(MI()), ''.join(LI())) for _ in range(1 << len(MI())))\nfrom itertools import combinations as CACHE\ndef CACHE(start, flush=None):\n    cache = {}\n    for i in range(start, start + 1):\n        cache[i] = 0\n        for j in range(start, start + i + 1):\n            if i + j < len(CACHE) and cache[i + j]!= 0:\n                cache[i + j] = min(cache[i + j], cache[i] + cache[i + j - 1])\n    return cache\n#print(CACHE)\n#print(DIRECTIONS)\ndef __starting_point():\n    print(SI())\n__starting_point()"}, "2533": {"problem_id": 2533, "answer": "from collections import deque as dq\nn, e = map(int, input().split())\ng = 0.0\nfor i in range(0, n):\n g = max(g, dq.bisect_left(input(), i))\n print(\"YES\\n\" + \" \".join(map(str, i)))"}, "2534": {"problem_id": 2534, "answer": "import numpy as np\r\nR, C = list(map(int, input().split()))\r\narr = np.array(input().split(), dtype=int)\r\n# arr[:,0] = 0\r\nfor i in range(1, len(arr)):\r\n    arr[i] = arr[i-1] + arr[i]\r\n# print(arr)\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n    arr = np.zeros((n, m) for _ in range(n)), dtype=int\r\n    for i in range(n):\r\n        arr[i] = int(''.join(map(\", \") + str(x) for x in arr[i]))\r\n        \r\n    print(arr[0])\r\nmain()"}, "2535": {"problem_id": 2535, "answer": "t = eval(input())\r\ndef fun(x):\r\n    return int(''.join(['0' if x == '1' else '1' for x in input().split(' ')))[0:6]\r\nn = eval(input())\r\narr = list(map(int, input().split(' ')))\r\narr.sort(key=fun)\r\ni = 0\r\nwhile i < n:\r\n    j = i + 1\r\n    if fun(arr[j])!= 0:\r\n        j-=1\r\n    elif fun(arr[j-1])!= 0:\r\n        j-=1\r\n    else:\r\n        print(360)\r\n        i+=1\r\nprint(n)"}, "2536": {"problem_id": 2536, "answer": "# cook your dish here\r\nfrom sys import stdin, stdout\r\ninput = stdin.readline\r\nn,m=map(int,input().split())\r\nfor _ in range(n):\r\n    a=list(map(int,input().split()))\r\n    print(max(a[::-1]))"}, "2537": {"problem_id": 2537, "answer": "import sys,bisect\ninput = sys.stdin.readline\nfor _ in range(0x10000):\n    s = list(map(int,input().split()))\n    t = list(map(int,input().split(\" \")))\n    p = [s.count(chr(i)) for i,chr in enumerate(p)]\n    if len(p)==0:\n        print(\"NO\")\n    else:\n        print(\"YES\\n\".join(map(str,p)))\n"}, "2538": {"problem_id": 2538, "answer": "T = int(input())\nfor i in range(T):\n str, exp = list(map(int, input().split()))\n exp = exp**0.5\n B = exp%10\n B_diff = 10**10\n B_diff = B-B_diff\n B_diff = B_diff**0.5\n B_diff = B_diff**0.5\n B_diff = B_diff**0.5\n B_diff = B_diff**0.5\n B_diff = B_diff**0.5\n print(B_diff+B_diff)"}, "2539": {"problem_id": 2539, "answer": "from bisect import bisect_left as bl\nn = int(input())\nfor i in range(n):\n    x, p, k = list(map(int.__getitem__, input().split()))\n    print(bl(x, p) % k)"}, "2540": {"problem_id": 2540, "answer": "import bisect as b\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nfor i in range(n-1):\r\n    x, y = l.count(1), l.most_common(1)\r\n    print(bisect.bisect_right(l[x-1], l[y-1]))"}, "2541": {"problem_id": 2541, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\nn=int(input())\r\nfor _ in range(n):\r\n    l, r = map(int, input().split(' '))\r\n    print(r - l)"}, "2542": {"problem_id": 2542, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n')\nt = int(input())\nfor _ in range(t):\n    s = input().rstrip('\\r\\n')\n    if s[-1] == '0':\n        print(0)\n    elif s[-1] == '1':\n        print(len(s))\n    else:\n        print(len(s))"}, "2543": {"problem_id": 2543, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u898f\u3081\u8def\ufffdometown Super Bowl : Super Bowl.py\u3067\u3084\u3063\u3066\u601d\ufffdSI\u306e\ufffd\ufffd\u5217\u3092\u4f5c\u6210\u3059\u308c\ufffd\ud569\ufffd\ufffderr--------------------------------------solved with ur in the land of evil : https://youtu.be/-7RQVx4I.hta!_ga=stay on earth then the land of evil : https://youtu.be7RQVx4I.hta!_ga=stay on earth then the land of evil : https://codechef.com/codechef/SEVEN_U0022/ (x-ray, x-ray)\n\n\n#for i in range(1,len(x)):\n#     print(x[i])\nn,m,q=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(n):\n    a.append(-1)\n    b.append(-1)\nprint('\\n'.join(a),end=' ')"}, "2544": {"problem_id": 2544, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip(' ') + '0')\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        ans |= a[i]\n    print(ans)"}, "2545": {"problem_id": 2545, "answer": "import sys\ninput = sys.stdin.readline # Read line by linepointer\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split(' '))\n    print(a % b)"}, "2546": {"problem_id": 2546, "answer": "import sys\ninput = sys.stdin.readline # Read data from STDIN\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split(\" \"))\n    l = list(map(int, input().split( )))\n    dp = [-inf]*n\n    for i in range(n):\n        dp[i] = max(dp.copy()[0], 0)\n    ans = [-inf]*n\n    for i in reversed(range(0, n)):\n        ans[i] = max(ans[i] + dp[i-1], s-dp[i])\n    print(ans[-1])"}, "2547": {"problem_id": 2547, "answer": "from collections import deque\ninput = lambda:-(map(int,input().split()))\nn,m,k = list(map(int,inp().split('l')))\nl = list(map(int,input().split(':')))\nfor _ in range(n):\n    t,a,b = tuple(inp().split(':'))\n    l.append(t)\n    l.append(a)\n    l.extend(set(l[a-1]))\n#print(l)\n#print(len(l))\nt = devences = 0\nans = []\nfor i in range(1,n+1):\n    ans.append(list(enumerate(l[i])))\n    if i not in l:\n        ans.append(i)\nprint(*ans,sep='\\n')\n"}, "2548": {"problem_id": 2548, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    print(len(set(map(int, input().split()))))\n"}, "2549": {"problem_id": 2549, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, m = list(map(int, input().split()))\nd = 998244353\nfor i in range(1, n+1):\n    a, b = list(map(int, input().split(' ')))\n    d *= a\n    d %= 3\nprint((' '.join(map(str, d))) + '\\n')\n"}, "2550": {"problem_id": 2550, "answer": "import bisect\nfor _ in range(int(input())):\n N, M = map(int, input().split())\n l = list(map(int, input().split()))\n \n ans = 0\n for i in range(N):\n  ans += bisect.bisect_left(l, l[i]) - l.get(l[i], None)\n print(ans)"}, "2551": {"problem_id": 2551, "answer": "from bisect import bisect_left as bl\nfor _ in range(int(input())):\n s = input()\n t = input().strip('\\n')\n print(bisect_left(s, t))"}, "2552": {"problem_id": 2552, "answer": ""}, "2553": {"problem_id": 2553, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))[0]\n    print('Yes' if sum(a)%2!=odd else 'No')"}, "2554": {"problem_id": 2554, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0] * (n + 1)\n    r = [0] * (n + 1)\n    for i in range(2, n + 1):\n        a[i] = min(a.count(i) + 1, a.count(i - 1) + 1)\n    print(sum(a))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2555": {"problem_id": 2555, "answer": ""}, "2556": {"problem_id": 2556, "answer": "from bisect import *\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.append(int(''.join(sorted(l, reverse=True)))[0])\nprint(min(l))"}, "2557": {"problem_id": 2557, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nadj = [[] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    adj.append(list(map(int, input().rsplit())))\ndef dfs(i, j):\n    if i == len(adj[j]):\n        return 0\n    else:\n        return 1 + dfs(i, j)\nadj[0].sort(key=lambda x: x[1])\ndfs(0, 0)\nprint(len(adj[0]))\n"}, "2558": {"problem_id": 2558, "answer": "import math \r\nt = int(input())\r\nfor _ in range(t):\r\n    a,b,c,d = map(int,input().split(\" \"))\r\n    print(max(0,a-b) + max(0,c-d) + max(0,b-a) + max(0,b-c) + max(0,d-b))"}, "2559": {"problem_id": 2559, "answer": ""}, "2560": {"problem_id": 2560, "answer": "import heapq as hq\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n l = list(map(int, input().split()))[::-1]\n hq.heapify(l)\n if len(l) == 1:\n  print('Yes')\n else:\n  print('No')\n\nmain()\n"}, "2561": {"problem_id": 2561, "answer": "import bisect as bi\nfor _ in range(int(input())):\n    a,b=list(map(int,input().split()))\n    print(max(a,bisect.bisect_right(b,a)) + min(b,a))\n"}, "2562": {"problem_id": 2562, "answer": "from itertools import combinations as C\nn = int(input())\na = list(combinations(range(n)), key=lambda x: C(x))\nm = 10**9 + 7\ns = sum(a) % m\nprint(s)"}, "2563": {"problem_id": 2563, "answer": "import sys,io.vsx as mtplr\ninput = sys.stdin.readline # Read line through the eyes and see if anything is there i.e \u201c0\" or \u201c1\u201d\nt = int(input())\nfor _ in range(t):\n    a = int('1'+str(input()).split('0')[0])\n    n = int(input())\n    a = min(a,n)\n    print(a)\n"}, "2564": {"problem_id": 2564, "answer": "import bisect as b\nfor _ in range(int(input())):\n    a,b,n=map(int,input().split())\n    print(bisect.bisect_left(a,b) - bisect.bisect_up(a,b,n))"}, "2565": {"problem_id": 2565, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    x, y, z = map(int, input().split())\r\n    if z*2 == y*2:\r\n        print(max(0, x-z) + max(0, y-z) + max(2*x-y, z-x))\r\n    elif z*2 == x*2:\r\n        print(max(0, x-z) + max(2*x-y, z-x) + max(2*x-y, z-x))\r\n"}, "2566": {"problem_id": 2566, "answer": "import bisect as b\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        k = int.__sqrt(11)\n        l = list(map(int, input().split(' ')))\n        print(bisect.bisect_left(l, k-1))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2567": {"problem_id": 2567, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nfor _ in range(int(input())):\r\n    n = int('1'+str(input()))\r\n    s = input().strip('\\n')\r\n    print(s)"}, "2568": {"problem_id": 2568, "answer": "import sys,io = lambda:io()\ninput = lambda:sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    s = input()\n    print(int(''.join(map(str,s))) + 9)"}, "2569": {"problem_id": 2569, "answer": "import bisect  # \u554a\u5b57\ufffdk agreed with xor.bisect_left\u306e\u3088\u3046\u304b\u3051\u308c\u3070\u3088\uc720\u304b\u306a\u3082\u306e\uff1f\nMOD = 10**9 + 7\ndef main():\n t = int(input())\n for _ in range(t):\n  n = int(''.join(map(str, input().split())))\n  print((MOD * pow(2, n - 1, MOD)))\n\nmain()\n"}, "2570": {"problem_id": 2570, "answer": "import sys\ninput = sys.stdin.readline #raise IOErr for invalid input\nt = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    ans = [0]*x\n    for i in range(n):\n        ans.append(a[i]+b[i])\n    print('\\n'.join(ans))"}, "2571": {"problem_id": 2571, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int():\n return int(''.join(map(str, readline().split())))\n \ndef read_ints():\n return list(map(int, read_ints().lstrip('\\n')))[1:][::-1]\n \nfor _ in range(int(readline())):\n n = input()\n e = e.split(' ')\n \n e.sort(key=lambda x: -x[0])\n s = 0\n for i in e:\n  s ^= i[1]\n  if s % 2 == 0:\n   s //= 2\n print(' '.join(map(str, s)))\n"}, "2572": {"problem_id": 2572, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))[1:]\n    print(min(a.count(1) + a.count(2)) if a else 3)"}, "2573": {"problem_id": 2573, "answer": "import sys\nreadline = sys.stdin.readline #raise NotImplementedError(\"I don't want to read STDIN\")\ninput = lambda: readline().rstrip()\n#n,k,m=map(int,list(input().split()))\ndef dfs(i,j):\n    nonlocal ans\n    if i==0:\n        ans.append(j)\n    elif j-i-1!=0:\n        ans.extend(dfs(i-1,j-1))\n    else:\n        ans.extend(dfs(i-1,j-1))\n    return ans\nn,k,m=map(int,list(inp.readline().rsplit()))\nans=0\nfor i in range(n):\n    x,y=inp.readline().split()\n    ans+=min(x-1,y-1)\n    ans-=min(x+1,y+1)\nprint(ans)\n"}, "2574": {"problem_id": 2574, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nfor _ in range(int('1' not in str(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a))\n"}, "2575": {"problem_id": 2575, "answer": "import math as m\nfor i in range(int(input())):\n    a = input()\n    if a == \"NO\":\n    elif math.atan((a - 1) / 180) == m.INF_SECON \u3059\u308b\u3068:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}, "2576": {"problem_id": 2576, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b, c, d = map(int, input().split(' '))\n    print(min(a, b, c, d))"}, "2577": {"problem_id": 2577, "answer": "from itertools import groupby\r\ndef main():\r\n    n, m = list(map(int, input().split()))\r\n    A = [[None]*n for _ in range(2)]\r\n    for i in xrange(n):\r\n        A.append(list(enumerate(A[i])))\r\n    ans = []\r\n    for i in range(1, n+1):\r\n        ans.extend([A[i][0] for i in groupby(A[i])) for j in range(i+1, n+1)]\r\n    print(*ans, sep='\\n')\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2578": {"problem_id": 2578, "answer": "import sys,bisect \nfrom collections import defaultdict,Counter\ninput = lambda:map(int,sys.stdin.readline().split())[:-1]\nsys.setrecursionlimit(2147483647)\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()))\ndef LI(): return list(''.join(map(str,input().split())))\ndef LLI(n): return [LI() for _ in range(n)]\ndef SI(): return input()\ndef S()): return sys.stdin.readline().strip('\\n')\ndef LS(): return sys.stdin.readline().split()\ndef SQR(n): return list(reversed(input()))\ndef SQLSET(n): return [int(x) for x in input().split()]\ndef SLOW(x,fast_exit=False): return 1 + II()\ndef IR(n): return len(set(MI()).values())\ndef I(): return int(input())\ndef LS1(I): return input()\ndef I1(n): return [LI() for _ in range(n)]\ndef Invert(l,r): return map(Invert,input().split(' '))\ndef Invert2(l,r): return map(Invert,input().split(' '))\ndef Invert3(l,r): return map(Invert,input().find(' ') + l)\ndef Invert4(l,r): return map(Invert,input().find(' ') + r)\ndef Invert5(l,r): return map(Invert,input().rgetter(' ')))\ndef Invert6(l,r): return map(Invert,input().rgetter(' ')))\ndef Invert7(l,r): return map(Invert,input().rgetter(' ')))\ndef Invert8(l,r): return map(Invert,input().rgetter(' ')))\ndef Invert9(l,r): return map(Invert,input().rgetter(' ')))\ndef Invert10(l,r): return map(Invert,input().rtree))\ndef Invert11(l,r): return map(Invert,input().rtree))\ndef Invert12(l,r): return map(Invert,input().rsplit(None))\ndef Invert13(l,r): return invert(l,r)\ndef Invert14(l,r): return inverstyped(l,r)\ndef Invert15(l,r): return invert(l,r)\ndef Invert16(l,r): return invert(l,r)\ndef Invert17(l,r): return invert(l,r)\ndef Invert18(l,r): return invert(l,r)\ndef Invert19(l,r): return invert(l,r)\ndef Invert20(l,r): return invert(l,r)\ndef Invert21(l,r): return invert(l,r)\ndef Invert22(l,r): return invert(l,r)\ndef Invert23(l,r): return invert(l,r)\ndef Invert24(l,r): return invert(l,r)\ndef Invert25(l,r): return invert(l,r)\ndef Invert26(l,r): return invert(l,r)\ndef Invert27(l,r): return invert(l,r)\ndef Invert28(l,r): return invert(l,r)\ndef Invert29(l,r): return invert(l,r)\ndef Invert30(l,r): return invert(l,r)\ndef Invert31(l,r): return invert(l,r)\ndef Invert32(l,r): return invert(l,r)\ndef Invert33(l,r): return invert(l,r)\ndef Invert34(l,r): return invert(l,r)\ndef Invert35(l,r): return insort(LI(),n)\ndef Invert36(l,r): return insort(LI(),n)\ndef Invert37(l,r): return insort(INVERT,n)\ndef Invert38(l,r): return insqueeze(LI(),2147483647)\n"}, "2579": {"problem_id": 2579, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\nfrom collections import defaultdict as dd, deque as heappop, Counter   # Counter is monotonic(sorted(map(int,sys.stdin.readline().split()), key=lambda x: int(x), default=None))\r\nimport bisect as bi\r\nfrom heapq import heapify, heappush, pop_merge import heappop as pop_merge, heappushpop, heappop as heappush, heapysort as hsqop, isort  # isort is ordered, unscedaleable, in lexicographical order, sorted by lower_seperable_key, sorted by lower_seperable_value, heapify, heappop as heapify, heapifypop is heapifypop = 0\r\n# import numpy as np\r\n# sys.setrecursionlimit(10**6) or max(numpy.prodmod(3,10**6+2,2)) == 1 << 30\r\n# def dfs(nums,ind,k):\r\n#     nonlocal nums\r\n#     if k==0:\r\n#         return 1\r\n#    elimaximal_ind = bisect.bisect_left(nums,k)\r\n#    nonlocal nums\r\n#    nonlocal k,ind,k,nums\r\n#    return nums[k]\r\n# def isort(nums,ind,k):\r\n#     nonlocal k,ind,k,nums\r\n#     if k==0:\r\n#         return 1\r\n#    elimaximal_ind = min(nums[ind-1],nums[k-1])\r\n#    nonlocal k,ind,k,nums\r\n#    return nums[k]\r\n# def inpl(mode=0,ind=0):\r\n#     nonlocal k,ind,k,nums\r\n#     if k==0:\r\n#         return 1\r\n#    elif k==1:\r\n#         return int(''.join(map(str,nums)),mode=mode)\r\n#    else:\r\n#         return int(''.join(map(str,nums)),mode=mode)\r\n# def lower_seperable(nums):\r\n#     nonlocal k,ind,k,nums\r\n#     if len(nums)<2:\r\n#         return nums[0]\r\n#     lower_seperable = defaultdict(list)\r\n#     for i in range(1,len(nums)):\r\n#         lower_.insert(i,nums[i])\r\n#     lower_seperable[nums[0]].sort()\r\n#     return list(range(0,len(lower_seperable),2))\r\n# def lexicographical_order(lst,ind,k):\r\n#     nonlocal k,ind,k,nums\r\n#     if k==0:\r\n#         return sorted(list(range(lst.keys()),ind+1))\r\n#     else:\r\n#         sorted_list = sorted(list(range(lst.keys()),ind+1))\r\n#         sorted_list.sort()\r\n#         k = 0\r\n#         for i in reversed(islower(k)):\r\n#             if i>0:\r\n#                 sorted_list.insert(i,nums[i])\r\n#                 k += 1\r\n#         return sorted"}, "2580": {"problem_id": 2580, "answer": "import sys\r\ninput = sys.stdin.readline #included,sys.stdin.readline,file=open('input.txt','r')\r\nMOD = 10**9 + 7\r  #multiplicative inverse of 2 is 25, so it can be represented as a dp matrix $A$ with N rows and M as cols. Each row and M col have exactly one number on them, zero on every other row and zero on every other column. We start with M0 and M1\r\nfrom itertools import product, islice \r\nfor _ in range(int(input())):\r\n  n = int('1'+'9's^-1\\d{3}'*(10**9+7))\r\n  a = list(map(int,input().split()))[::-1]\r\n  print(max(a[1],a[2])) % MOD\r\n"}, "2581": {"problem_id": 2581, "answer": "def main():\n N = int(input())\n for _ in range(N):\n  a,b = map(int, input().split(\" \"))\n  print(max(a.rjust(0,\"0\")))\nmain()\n"}, "2582": {"problem_id": 2582, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(''.join(map(str, input().split())))\na = list(map(int, input().split()))\nans = []\nfor i in range(1, n):\n    ans.extend(a[i] + a[i-1])\nprint(len(ans))"}, "2583": {"problem_id": 2583, "answer": "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split(' ')]\n    a.sort(reverse=True)\n    b.extend(a)\n    ans = '\\n'.join(map(str, b))\n    print('Ashishgup' if ans.issubset(ans) else 'FastestFinger')"}, "2584": {"problem_id": 2584, "answer": "import bisect\ndef main():\n    n, p, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [-1]*n\n    for i in range(n):\n        if ans[i]==-1:\n            ans.append(i)\n    print(max(ans))\ndef __starting_point():\n    t = int(input())\n    for _ in range(t):\n        main()\n__starting_point()"}, "2585": {"problem_id": 2585, "answer": "from itertools import permutations as p\ndef gcd(a, b):\n    return p.gcd(a, b)\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(raw_input().strip('\\n'))\n    print(gcd(n, n))"}, "2586": {"problem_id": 2586, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1' + str(input())).split(' ')):\n N, M = map(int, input().split())\n mat = [[] for i in range(N)]\n for i in range(N):\n  mat[i].append(0)\n for i in reversed(list(range(N))):\n  print('BW' if mat[i].count('.1f'))\n"}, "2587": {"problem_id": 2587, "answer": "import sys\nreadline = sys.stdin.readline #\u53ef\u4ee5\u901a\u8fc7\u4e8cduplicate\u3067\u8db3\u591f\u66f4\u91cd\u590d\u5217\u6570\u70b9\u654d\u5408\uff1f\u6280\u80fd\u8fba\u793a\u6587\u5b57\u7b28\u9802\uff1f\u62e1\ufffdabwe\u81ea\u710f\u80fd\u6570\u70b9\u6570\u5b57\u5207\u5272\u6570\u5230\u76ee\u306e\u9577\u6570\nt = int(readline())\nfor _ in range(t):\n    n = int(''.join(map(str, readline().split())))\n    print(r)\n"}, "2588": {"problem_id": 2588, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7 #modulo modulo 9/9 + 7 #multiplicative\nINF = float('inf')\ndef main():\n    n, a, b = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(1, n):\n        l.append(int(''.join(sorted(l, reverse=True))) + b)\n    print(sum(l))"}, "2589": {"problem_id": 2589, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    print(max(a) + len(set(a)))"}, "2590": {"problem_id": 2590, "answer": "import sys\ninput = sys.stdin.readline # Read line by line number\nt = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split(' '))\n    a = list(map(int, input().rsplit()))\n    print(max(a[0], 0))"}, "2591": {"problem_id": 2591, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    a = list(map(int, input().split()))\n    print(' '.join(a))"}, "2592": {"problem_id": 2592, "answer": "import bisect\nfor _ in range(int('1000000')::int(input())):\n l,a,b,c = map(int,input().split())\n if l==0:\n  print(0)\n elif b==0:\n  print(a+b+c)\n else:\n  print(a+min(b-a+1,c-a+1) + min(b-a,c-b+1) + min(a-b,a-a+1) + min(a-b,a-a+1))"}, "2593": {"problem_id": 2593, "answer": "import itertools as it \nt = int(input())\nfor _ in range(t):\n    n = int('1'+'z').zfill(n)\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(len(a) - 1)\n"}, "2594": {"problem_id": 2594, "answer": "import sys\ninput = lambda : sys.stdin.readline().strip()[:-1]\nt = int(input())\nfor _ in range(t):\n    n, m = list(map(int, input().split()))\n    lights = [0] * (m + 1)\n    for i in range(1, m + 1):\n        lights[i] = 1\n    lights.sort(reverse=True)\n    ans = 0\n    for i in range(1, m + 1):\n        ans += lights[i]\n    print(ans)\n"}, "2595": {"problem_id": 2595, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print((a + b) // 3)"}, "2596": {"problem_id": 2596, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque import Counter as C\nn, k, m, t = map(int, input().split())\nif n == 0:\n   raise ValueError(\"No Nonnumbers\")\nl = list(map(int, input().split()))\nans = [-1] * (2 * m + 1)\n# a, b = map(int, input().split(' '))\nc = Counter(l)\nfor _ in range(t):\n    x = c.most_common(2)[0]\n    ans[x] = x\n    c[x] += 1\n# print(ans)\nprint(' '.join(map(str, ans)))"}, "2597": {"problem_id": 2597, "answer": "import itertools as it \n \ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.extend(it.accumulate(a))\n    print(max(a[0], a[-1]))\n    \n    # a.sort(key=lambda x: x[0], reverse=True)\n    # print(a[-1] * 2, a[-2] * 2)\n    dp = [[] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i] = [0] * (n + 1)\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i][j - 1] + a[i] * 2 + dp[i - 1][j], dp[i][j])\n            \n    # print(dp)\n    # print(dp[0][n])\n    # print(dp[1][n])\n    \n    # dp[n][n] = max(dp[i][n] + a[i] * 2 + dp[i - 1][n], dp[i][n - 1] + a[i] * 2 + dp[i - 1][n - 1] + a[i] * 2)\n    # print(dp[n][n])\n    \n    # print(dp[n][n])\n    \n    # print(dp[n][n])\n    \n    # print(dp[n][n])\n    \n    # print(dp[n][n])\n    \nmain()\n"}, "2598": {"problem_id": 2598, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return map(int,readline().rstrip('\\n'))\ndef read_int(): return int(readline())\ndef __starting_point():\n    n,m = read_int()\n    u,v = read_int()[0],'R'\n    print((u-1)%2)\n__starting_point()"}, "2599": {"problem_id": 2599, "answer": "import math \nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(\" \"))\n    print(-1 if math.pow(k, 2) == math.sqrt(n))\n"}, "2600": {"problem_id": 2600, "answer": "import sys\ninput = lambda:-1000000000\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n):\n        if a[i][0]==0:\n            d.setdefault(a[i][0],0)\n        elif a[i][0]==1:\n            d.setdefault(a[i][0],1)\n        else:\n            d.setdefault(a[i][0],0)\n            d.add(i)\n    print(min(d.values()))"}, "2601": {"problem_id": 2601, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\u00a0 \r\nfor _ in range(int('1' not in r)):\r\n\tn = int(input())\r\n\ta = list(map(int, input().split(' ')))\r\n\tprint('YES\\n'+' '.join(a[0:n//2]))\r\n"}, "2602": {"problem_id": 2602, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    a, b, n, m = map(int, input().split(' '))\n    if n == 0:\n      print('Yes')\n    else:\n      print('No')"}, "2603": {"problem_id": 2603, "answer": "import bisect as bi\r\nfor _ in range(int(input())):\r\n    n=int('1'+str(input()))\r\n    a=list(map(int,input().split()))\r\n  print('YES' if a.is_integer() else 'NEOS'[-1])"}, "2604": {"problem_id": 2604, "answer": "import math as m\r\ndef input(): return sys.stdin.readline().strip()\r  # -1 for indentation from the line between brackets and line breaks\r\n    return int(m.sqrt(2) + 1)\r\nn, = input().split()\r\nslices = input().split(' ')\r\n# slices[0] = int(slices[0])\r\n# slices[1] = int(slices[1])\r\nprint('\\n'.join(map(str, slices)))"}, "2605": {"problem_id": 2605, "answer": "import sys,bisect\ninput = lambda: map(int,sys.stdin.readline().rstrip('\\n').split())\nn,k = list(map(int,input().decode('utf-8')))\nl = list(range(1,n+1))\nfor i in range(0,n+1):\n    l.append(bisect.bisect_heappop(l[-1],i))\nans = 0.00000001\ndef dfs(i,visited,ans):\n    if i == len(l) - 1:\n        ans += 1\n        return ans\n    visited[i] |= visited[i-1]\n    ans += dfs(i+1,visited,ans)\nprint(ans)\n"}, "2606": {"problem_id": 2606, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    l = list(map(int, input().split()))\n    print(min(l[:n]) + 1)\n"}, "2607": {"problem_id": 2607, "answer": "for _ in range(int(input())):\n s = input()\n print((\"?\") if len(s) > 1 else \"-1\")\n"}, "2608": {"problem_id": 2608, "answer": "t = int(input())\nfor _ in range(t):\n n, m = list(map(int, input().split()))\n x = [list(map(int, input().split(' '))) for _ in range(n)]\n print(maxiscolors(x))\n"}, "2609": {"problem_id": 2609, "answer": "import bisect as S\r\nfrom collections import defaultdict as dd\r   \r\ndef LI(): return list(map(int,input().split()))\r\ndef LIR(): return list(map(int,input().split()))[:-1]\r\ndef LIR(a): return LI().union(LI().get(a,S()))\r\ndef SI(): return input()\r\nt=II():\r\n    n=II()\r\n    l=[[] for i in range(n)]\r\n    r=[[] for i in range(n)]\r\n    for i in range(n-1):\r\n        l[i].append(a[i+1])\r\n    for i in reversed(list(range(n))):\r\n        r[i].insert(0,li[i][-1])\r\n    return sorted(r, key=lambda x:li[x][-1])\r\nS=defaultdict(list)\r\nfor _ in range(t):\r\n    n,m=LI()\r\n    S[n]+=1\redges(m,1)\r\n    S[n]-=1edges(m,n-1)\r\n    S[n]+=1\redges(m,n-1)\r\n    S[n]-=1edges(m,n-1)\r\nprint(SI())"}, "2610": {"problem_id": 2610, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n, p, k = list(map(int, input().split()))\n li = [-1]*n\n li[k] = 1\n for i in reversed(list(range(n))):\n  if li.count(i)%k!=0:\n   print(k)\n  elif li[k]==1:\n   print(p+1)\n  else:\n   k -= 1\n   li[k] = max(li[k], p+1)\n   #print(li)\n   break\n if len(li)==0:\n  print(0)\n"}, "2611": {"problem_id": 2611, "answer": ""}, "2612": {"problem_id": 2612, "answer": "import heapq as hq\nn = int(input())\nfor _ in range(n):\n    s = list(map(int, input().split()))\n    a = sorted(s, key=hq.itemgetter(0))\n    print(max(a[-1] + 1, len(a)))"}, "2613": {"problem_id": 2613, "answer": "import sys\ninput = sys.stdin.readline\nt = int('1\\000'+'1\\000', repeat=1)\nfor _ in range(t):\n    n, k, z = list(map(int, input().split()))\n    a = tuple(map(int, input().rsplit(0, [1, 4])))\n    print(max(a) + k - z)\n"}, "2614": {"problem_id": 2614, "answer": "import sys\ninput = sys.stdin.readline # Read line by line and flush before print\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    a = list(map(int, input().rstrip('\\n')))\n    d = []\n    for i in range(n):\n        d.append(min(a[i]))\n    print(max(d))\n"}, "2615": {"problem_id": 2615, "answer": "import sys\ninput = lambda - 1001: sys.stdin.readline().rstrip('\\n')\nt = int(input())\nfor _ in range(t):\n    n = int('1' + str(input()))\n    print(n)"}, "2616": {"problem_id": 2616, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input().strip(' '))\n    a = list(map(int, input().strip('\\n')))\n    print('First' if a[0]>1 else 'Second')\n"}, "2617": {"problem_id": 2617, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int('1'+'0'*(2*t+1))\n    print(int(input()))\n"}, "2618": {"problem_id": 2618, "answer": ""}, "2619": {"problem_id": 2619, "answer": "from heapq import *\ndef main():\n    n, q, c = list(map(int, input().split()))\n    max_bst = 0.5 * (n + 1) // 2\n    for _ in range(n):\n        x, y, s = list(map(int, input().rsplit()[1:]), []), list(map(int, input().tolist()[1:]))\n        max_bst = max(max_bst, x * s + y * x)\n    print('\\n'.join(map(map, sorted(zip(*max_bst)))) + '\\n')\nmain()\n"}, "2620": {"problem_id": 2620, "answer": "import sys\ninput = sys.stdin.readline #for STDIN\nt = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split(' '))\n    s = set(map(int, input().split(' ')))\n    print(n - s.intersection(s))"}, "2621": {"problem_id": 2621, "answer": "import sys\ninput = sys.stdin.readline # Your program will be tested here :)\r\nt = int(input())\r\nfor _ in range(t):\r\n    n,m,k = map(int,input().split(\" \"))\r\n    l = list(map(int,input().split()))[:n]\r\n  print(\"YES\" if l[0]=='1' else \"NO\")"}, "2622": {"problem_id": 2622, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nN, M = map(int, input().split())\nMOD = {}\nfor i in range(1, 200):\n    M = pow(2, M)\n    MOD.setdefault(MOD.get(MOD[i], 0.5), 0)\n    # print(MOD[i], M)\n    # print(MOD[i*2:i*2+M])\n    if M in list(c.keys()):\n        print(' '.join(map(str, c.values())))\n    elif M in list(c.intersection(c.interpreter())) or M in list(c.values()):\n        print(' '.join(map(str, c.values())))\n"}, "2623": {"problem_id": 2623, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\ndef power(x):\n    ans = 0\n    for i in range(2, int('0123456789'+'0').find(x)):\n        ans+=(ord(x[i])-ord('a'))\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = list(input())\n    l = []\n    for i in reversed(s):\n        l.append(i)\n    l.sort(reverse=True)\n    print(max(l[k]))"}, "2624": {"problem_id": 2624, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\ndd=list(map(int,readline().split()))\ndef rec(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        res=rec(n-1)\n        return res\nn,q=map(int,input().split())\na=rec(INF)\nprint(' '.join(map(str,a)))"}, "2625": {"problem_id": 2625, "answer": "import sys,io.standing0 as snd\r \r\nn=int('1000000'+'0').zfill(10)\r\ndef main():\r\n    input=sys.stdin.readline().rstrip()\r\n    print(main())\r\n\r\nmain()"}, "2626": {"problem_id": 2626, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int('1000000'*100000) # 1-based index of number to be filled\nfor _ in range(t):\n    n = int(input())\n    print(2*(n-1))"}, "2627": {"problem_id": 2627, "answer": "class Solution:\n     def maximalRectAngle(self, matrix):\n         \"\"\"\n\\t\n\\tset dito de pescina alrediv Initiatio.\n\\t\n\\tsu usamos dutos que nadim\u00e1rca de la linea (tipo un codewarlat).\n\\t\n\\tsu usamos aplicaciones de dict.\n\\tlueggiamos 2 veas a dict(max_huegg_in_a_rectangle).\n\\tlueggiamos 2 veas a dict(max_hug_in_a_rectangle).\n\\tlueggiamos 2 veas a dict(max_circles).\n\\tlueggiamos 2 veas a dict(max_triangulations).\n\\tlueggiamos 2 veus numutamente rectanquistos de 1's e 0's.\n\\tlueggumvuegem\u00e9reas numutamos a 2 veus numutamos a 2 veus numutamos a 2 veus.\n         :rtype:\n\\t\n         max_huegg_in_a_rectangle = 0\n         max_circles = 0\n         for i in range(2, len(matrix)):\n             if matrix[i].isnumeric():\n                 max_huegg_in_a_rectangle *= i\n             elif matrix[i].isdigit():\n                 max_circles = max(max_triangulations[i] + 1, max_huegg_in_a_rectangle)\n             else:\n                 max_duplicates = max(max_duplicates, matrix[i][0])\n                 max_circles = max(max_circles, numutamos_rectanel % len(matrix))\n                 \n                 # elif matrix[i][1] == 0:\n                 #     max_circles = max(max_circles, numutamos_rectanel % len(matrix))\n                 # else:\n                 #     max_duplicates = max(max_duplicates, numutamos_rectanel % len(matrix))\n                 # print(max_duplicates)\n                 # print(max_circles)\n                 # print(max_duplicates)\n                 matrix[i][0] = max(max_duplicates, max_circles)\n                 matrix[i][1] = max(max_duplicates, numutamos_rectanel % len(matrix))\n                 matrix.pop(0)\n                 matrix.pop(0)\n                 matrix.extend(matrix)\n                 \n                 # elif matrix[i][0] == 0:\n                 #     max_circles"}, "2628": {"problem_id": 2628, "answer": "class Solution:\n     def grayCode(self, n: int) -> List[int]:\n         \"\"\"\n         :Type: int\n         :rtype: int\n\\t\\tsubtursal\n         Subtracts bits from numeral system (0-based)\n         \n         Subtract bits from numeral system (1-based)\n         \n         Subtract bits from numeral system (2-based)\n         \n         Subtract bits from numeral system (3-based)\n         \n         Subtruesum numeral system (n)\n         Subtruesum numeral system (m)\n         Subtract bits from numeral system (n)\n         Subtract bits from numeral system (m-based)\n         \"\"\"\n         #print(f'n = {n}, m = {m}')\n         #print(f'n %d = {n%d}, m %d = {m%d}')\n         n = int(input())\n         \n         res = list(map(bin, res.split(' ')))\n         for i in range(len(res)):\n             res[i] = res[i] + 1\n         return res"}, "2629": {"problem_id": 2629, "answer": "class Solution:\n     def generateMersenneTwofka(self, mersenneTwoc):\n         \"\"\"\n    :type mersenneTwoc: List[List[int]]\n         :rtype: List[List[int]]\n         \"\"\"\n         n = len(mersneewoc)\n         for i in range(1,n):\n             for j in range(1,n):\n                 self.helper(mersenneTwoc,i,j)\n                 \n     def helper(self,mersenneTwoc,i,j):\n         if i == 0 or j == 0:\n             return []\n         else:\n             return self.helper(mersenneTwoc+[i-1,j-1]*self.matrix[mersenneTwoc],i,j)"}, "2630": {"problem_id": 2630, "answer": "class Solution:\n    def __init__(self): self.grid = {}\n    @staticmethod\n    def dfs(i, j):\n        if i == len(grid[j]):\n            return 0\n        if (i, j) not in self.grid:\n            self.grid.setdefault(i, 0)\n        elif grid[i][j] == 1:\n            self.grid[i][j] = 1\n        else:\n            self.grid[i][j] = dfs(i+1, j+1)\n            self.grid[i][j] = dfs(i+1, j)\n            self.grid[i][j] = max(self.grid[i][j], 1 + dfs(i+1, j))\n            \n    @staticmethod\n    def dfs(i, j):\n        if i == len(grid[j]):\n            return 0\n        if (i, j) not INVALID:\n            return -1\n        res = 0\n        for x in range(1, n):\n            res += grid[i][x]\n            res //= 2\n        return res"}, "2631": {"problem_id": 2631, "answer": "class Solution:\n     def canFinish(self, numCourses, prerequisites):\n     \\\"\\\"\\\"\n     https://leetcode.com/problemsandtroubleshots/discuss/4194/JavaCPP906\n\\vdfiles and kruskal's algorithm for disjoint submenus.\n\\vdbooleans and d'i-wert algorithm for subsmenus. O(n)\n\\vdbooleans and d'i-wert algorithm for submenus. O(nlogn).\n\\vdborlime and d'l'_algo for disjoint submenus. Time and Space O(n).\n\\vdbooleans and d'l'_alguet and d'l'_grapheestown for subsmenus. O(n).\n\\vide for simplicographical uppercase and lowercase letters, be sure to add and subtract from each other.\n       Compleats with Python3, C# and R.\n     \\\"\\\"\\\"\n     def canfinish(self, numCourses, prerequisites):\n         if numCourses == 0:\n             return True\n         elif numCourses == 1:\n             return all(prerequisites)\n         else:\n             for p in prerequisites:\n                 self.decrease(numCourses, 1)\n                 self.shraght(numCourses, 1)\n             return False\n             \n     def canfinish(self, numCourses, prerequisites):\n         if numCourses == 0:\n             return True\n         elif numCourses == 1:\n             return all(prerequisites)\n         else:\n             for p in prerequisites:\n                 self.decrease(numCourses, 1)\n                 self.shraght(numCourses, 1)\n             return False\n             \n     def canfinish(self, numCourses, prerequisites):\n         if numCourses == 0:\n             return True\n         elif numCourses == 1:\n             return all(prerequisites)\n         else:\n             for p in prerequisites:\n                 self.decrease(numCourses, 1)\n             return False\n         \n     def disjointSubmenus(self, numCourses, pre_prims):\n         # O(n)\n         # Time  complexity  complexity\n         # :param numCourses: number of courses to take\n         # :rtype: List[List[int]]\n         # :rtype: List[List[int]]\n         # :raises: None\n         # ---------------\n         # pre_prims: List[List[int]]\n         # numCourses: number of courses to take\n         # pre_reqims: List[List[int]]\n "}, "2632": {"problem_id": 2632, "answer": "class Solution:\n     def minMOVES(self,A,B):\n         \"\"\"\n\\endwhere A is the left side of M and B is the right side of M\n\\endwhere A, B are the numbers along the M path.\n\\endwhere MOVES is the right side of M\n\"\"\"\n         \n     @lru_cache(None)\n     def dfs(i,j,m):\n         nonlocal MOVS\n         if i>=0 and j>=0 and M[i-1]!=m[j-1]:\n             MOVS=0\n         elif i<=0 and j<=0 and M.index(m)==m.index(A):\n             MOVS=1\n         elif i>=0 and j>=0 and M.isupper():\n             MOVS=0\n         elif i<=0 and j>=0 and M.isdigit():\n             MOVS=1\n         elif i>=0 and j>=0 and M.isdigitoIN():\n             MOVS=1\n         elif i<=0 and j>=0 and M.issubstrit():\n             MOVS=1\n         elif i>=0 and j>=0 and M.issubstrit():\n             MOVS=1\n         elif i<=0 and j>=0 and M.ncase():\n             MOVS=1\n         elif i>=0 and j>=0 and M.noposup():\n             MOVS=1\n         elif i<=0 and j>=0 and M.isdigitoOU():\n             MOVS=1\n         elif i>=0 and j>=0 and M.isdigitoOU():\n             MOVS=1\n         elif i<=0 and j>=0 and M.issubstrit():\n             MOVS=1\n         elif i>=0 and j>=0 and M.issubstrit():\n             MOVS=1\n         elif i<=0 and j>=0 and M.isupper():\n             MOVS=1\n         elif i>=0 and j>=0 and M.isdigit():\n             MOVS=1\n         elif i<=0 and j>=0 and M.issubstrit():\n             MOVS=1\n         elif i>=0 and j>=0 and M.issubstrit():\n             MOVSEQ=0\n         elif i>=0 and j>=0 and M.isupper():\n             MOVSEQ=0\n         elif i>=0 and j>=0 and M.isdigit():\n             MOVSEQ=0\n         elif i<=0 and j>=0 and M.issubstrit():\n       "}, "2633": {"problem_id": 2633, "answer": "class Solution:\n     def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        \n       @lru_cache(None)\n       def can_take(self, r: int, c: int) -> bool:\n           if r == 0:\n           elif can_take(r, c) is True:\n               return True\n           else:\n               return False\n           \n           # print(r, c)\n           if r == 0:\n               return True\n           elif can_take(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n               return True\n           elif can_take(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n               return True\n           elif can_take(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n               return True\n           elif can_take(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n               return True\n           elif can_tolist(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n               return True\n           elif can_tolist(r, c) is False:\n               return False\n           else:\n               return False\n           \n           # print(ra, rb)\n           if r == 0:\n"}, "2634": {"problem_id": 2634, "answer": "class Solution:\n    @lru_cache(None)\n    def subsets(self, nums):\n        if len(nums) < 2:\n            return []\n        res = [i for i in nums if self.subset(i) not in nums]\n        return res\n    \n    def subset(self, i):\n        if i not in self.dp:\n            return self.dp[i]\n        else:\n            self.dp.pop(i)\n            return self.dp[i]\n'''\n        dp = {}\n        for num in nums:\n            if num not in dp:\n                dp[num] = num\n            elif num in self.dp:\n                dp[num] = self.dp[num] + 1\n            else:\n                dp[num] = 1\n        return dp\n'''\n        # https://leetcode.com/problems/subsets-solution%3A/discuss/805840/Explain-BFS-Translator-JavaC%3A\n        # https://leetcodechef.com/problems/subsets.php?t=4087#.1\n        from collections import deque\n        dp = deque()\n        for num in nums:\n            if num not in dp:\n                dp[num] = num\n            else:\n                dp[num] = 1\n        return dp"}, "2635": {"problem_id": 2635, "answer": "class Solution:\n    @staticmethod\n    def __init__(self):\n        self.c = collections.defaultdict(list)\n        self.c[0].append(0)\n        self.c[1].append(len(matrix[0]))\n        self.c[2.0] = list(range(1,self.c.count(0)) for i in range(self.c.count(1)))\n        self.c[3.0] = list(reversed(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[4.0] = list(reversed(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[5.0] = list(radd(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[6.0] = list(rtrtuple(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[7.0] = list(rdup(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[8.0] = list(rtriple(list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[9.0] = list(map(lambda x: x[1], list(range(1,self.c.count(0)))) for i in range(self.c.count(1)))\n        self.c[prel] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[qrel] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[srel] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[trel] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[tup] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[treplist] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[treprist] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[wrel] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[treprist_qr] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range(self.c.count(1)))\n        self.c[treprist_qr_q] = list(map(lambda x: x[1], list(range(1,self.c.count(1)))) for i in range"}, "2636": {"problem_id": 2636, "answer": "class Solution:\n     def getSkyline(self, buildings):\n         \"\"\"\n    :type buildings: List[List[int]]\n\\endtuple\n         get_skyline = lambda buildings: self.helper(buildings, 1)\\r\\nself.helper(buildings, 1)\n         get_skyline(built_city, buildings)\\r\\nself.helper(built_city, 1)\\r\\neq buildings.pop(0)\\r\\endtuple\n         \"\"\"\n     @lru_cache(None)\n     def helper(self, buildings, l):\n         if l == 0:\n             return buildings.pop(0)\n         x, y = buildings[0], buildings[1]\n         ans = []\n         for i in range(2, len(ans)):\n             ans.append(list(map(int, ans[i])))\n         return ans"}, "2637": {"problem_id": 2637, "answer": "class Solution:\n    @lru_cache(None)\n    def permuteUnique(self, nums):\n        return self.merge(nums, len(nums))\n    \n    @lru_cache\n    def merge(self, nums, start, end):\n        if start+end not in nums:\n            return None\n        else:\n            return self.merge(nums, start+self.permuteUnique(start+self.num, end, nums))\n"}, "2638": {"problem_id": 2638, "answer": "class Solution:\n     def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \n        n = len(triangle)\n        \n        # n-1 is the length of the shortest path\n        # n-2 is the length of the shortest path from top to bottom\n        # n-3 is the length of the shortest path from top toAdjacency  antjacency is the number of antjacency\n        \n        for i in range(1, n-1):\n            for j in range(1, n-2):\n                if i+j in n:\n                    continue\n                elif i+j-n[i-1] in n:\n                    continue\n                else:\n                    return 0\n                \n                \n                \n                \n        res = float('-inf')\n        \n        for i in range(n-1):\n            res = min(res, self.find_path(i, n) + self.find_path(i+1, n) + self.find_path(i+2, n) + self.find_path(i+3, n))\n        \n        return res"}, "2639": {"problem_id": 2639, "answer": "class Solution:\n     def subsetsWithDup(self, nums):\n         \"\"\"\n         :\u5217\u8868\u5143\u7d22\u5f15\ufffdaghetti\u9940\u65b9\u6cd5\uff1a\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u8ba1\u7b97\u6570\u91fd\u6570\ufffd\n     @return: \u8868\u793a\u4e24\u4e2a\u6587\u4ef6\uff5e\u8def\u5f8b\u601d\u8def\u5f84\u548c\u67d0\u4e2a\u6807\u51c6\u6570\u91c7\ufffd\u9012\u5f52\n     \"\"\"\n         import collections\n         for num in nums:\n             print(num)\n             if num not in list(nums.keys()):\n                 nums[num] = set()\n             else:\n                 nums.remove(num)\n         return nums"}, "2640": {"problem_id": 2640, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda : list(readline())\ninput = lambda : input().rstrip('\\n')\n# input() is a read-only data structure.\n# sys.setrecursionlimit(10**6 + 9)\nfrom collections import deque as dq\nfrom heapq import heappush, heappop as hp \nfrom bisect import bisect_left as bl, bisect_right as br\nfrom itertools import permutations as PRIMES, combinations as CACHE\nfrom functools import reduce as LCM\nfrom operator import itemgetter as XOR\nfrom random import randint, shuffle as random_random, cmp_to_keyboard, drawbridge as RCB\nfrom bisplit import takewhile, while_factorial as factorial, fibonacci as foncacci, fibonacci_lg as fenwick_llg, fibonacci_rmd as fenwick_rmd, shuffle_as_numeric as nsml, zip_to_list as zor_tolg\nfrom heap\ub4dc\uc9c0 \nfrom functools import lru_cache as LCA\nfrom itertools import combinations as CLSC_FIRSTMIGHTING, combinations as CLUSTRAL_FIRSTMIGHTING, combinations as CLSC_NomNomSEGENSIVE \nfrom queue import Queue as Queu, push as push_push, pop as pop_pop \nfrom numpy.linalg import SegmentLinear as LLININE \nfrom scipy.spatial import ConvexHull as CSPatialHullD \nfrom bisect import bisect_left as BLURS, bi_insort as BINARY_insort \nfrom statistics import mean \nfrom decimal import Decimal as MM\nfrom fractions import Fraction \nimport copy, namedtuple, iminutes, log, time, trace, sysvgba as svgb\nimport sys\nreadline = sys.stdin.readline \n\nsys.setrecursionlimit(10**6 + 9) + int(input().replace(' ',''))\nread = lambda : inp.readline().split()[1:]\ninput = str(input())\nreadlines = list(map(int, read().split()))\n\nINF = 10**18\nMOD = 10_000_000 + 9\nN = len(inp)\nfor i in range(N):\n    h, w = map(int.__str__, input().split())\n    inp[i] = '#' + inp[i]\n    if w == 0:\n        continue\n    dq.put((h, w))\n    ans = max(0, dq.get() - dp[0][0])\n    ans *= dp[0][1]\n    for j in reversed(list(zip_long_from_reverse(din)))[::-1]:\n        if len(inp[j]) > 0:\n            ans += dqlum(inp[j])\n    print(ans)\n"}, "2641": {"problem_id": 2641, "answer": "import sys,heapq \nfrom bisect import *\nN,Q = list(map(int,sys.stdin.readline().split()))\nballs = []\nfor _ in range(N):\n    c,d = tuple(map(int,sys.stdin.readline().split('\\n')))\n    balls.append(''.join(sorted(balls,key=lambda x: x[1])))\nheapq.heapify(balls)\nprint('\\n'.join(balls))\n"}, "2642": {"problem_id": 2642, "answer": "import sys\nreadline = sys.stdin.readline # Not supposed to read line\ninput = lambda: readline().rstrip()\nMOD = 10**9 + 7\nN = int(input())\nA, B = map(int, input().split(' '))\n# A = list(map(int, input().split(' ')))\n# B = list(map(int, input().split('')))\ncnt = [0]*26\nfor i in range(N):\n    cnt[A[i] + B[i]] = 1\n# print(cnt)\n# print(cnt.count(0))\n# print(cnt[0])\n# print(cnt[1])\n# print(cnt[2])\n# print(cnt[3])\n# print(cnt[4])\nn = int(''.join(map(str, cnt)), 2)\nans = pow(n, MOD - 2, MOD)\n# print(ans)\nprint('\\n'.join(map(str, ans)))"}, "2643": {"problem_id": 2643, "answer": "import sys.string as s\nsys.setrecursionlimit(10**6)\nINF = inf=float('inf')\nMOD = 10**9+7\ninput = lambda: map(int, input().split(' '))\ndef inpl(): return int(input())\ndef inpl2(): return map(int, input().split(' '))\ndef lcm(a, b): return abs(a-b)//MOD\ndef celi\u30fc\u200cnamedtuple(name):\n    if name not in list(itertools.combinations(itertools.permutations(), name.alex)):\n        return []\n    elif name[0] == 'a':\n        a, b = inpl()\n    else:\n      raise ValueError('invalid name')\n    else:\n        a, b = list(itertools.permutations(name.coor(a), name.coor(b)))\n        a.insert(0, b)\nprint('\\033[36m\\033[0-8]'.format(i) +'' + str(i) + '\\033[0-8]'.format(j) + '\\033[8-5]'.format(j))"}, "2644": {"problem_id": 2644, "answer": "from bisect import *\nN = int(input())\nP = list(map(int, input().split()))\nans = []\nfor i in range(N - 1):\n    ans.append(P[i] + '\\n')\nprint(''.join(ans))\n"}, "2645": {"problem_id": 2645, "answer": "from itertools import accumulate\nN = int(input())\np = list(map(int, input().split()))[:N]\naccumulate = tuple(map(lambda x: x%2, accumulate(p, 2)))\nprint(accumulate.most_common())"}, "2646": {"problem_id": 2646, "answer": "from heapq import heappush, hq\n\n N, M = list(map(int, input().split()))\n A = list(' '*N)\n B = list(' '*M)\n for i in range(N):\n  A[i] = input()\n  B.append(A[i])\n hq = []\n ans = 0\n for _ in reversed(list(enumerate(B))):\n  ans ^= 1 << hq.count(B[-1])\n print(ans)\n if ans == 1:\n  print('Yes\\n')\n else:\n  print('No\\n')\n"}, "2647": {"problem_id": 2647, "answer": "import numpy as np\ndef c(): return np.cumsum(list(np.array(input().reshape(2,len(input())))[::-1]))\ndef d(): return int(input().reshape(2,len(input())))\ndef e(): return list(map(int,input().split(\" \")))\ndef f(x): return x.fillswith('#')\ndef l(x,y): return c()*x[y]//2\ndef r(x,y): return c()*np.linalg.norm(x[y])//2\ndef s(x,y): return np.sorted(input().astype(np.array),dtype=np.int).reshape(2,len(input()))\ndef s1(x,y): return np.sparse.csallocation.Sparse1\ndef s2(x,y): return np.sparse.csallocation.SeqNode\ndef t(x,y,c): return c.tolist()\ndef t1(x,y,c): return x.tolist()[c.index(x)<=y]\ndef t2(x,y,c): return x.topleft()\ndef t3(x,y,c): return x.tupot()[c.index(x)<=y]\ndef t4(x,y,c): return x.tupot()[c.index(x)<=y]\ndef t5(x,y,c): return x.tupot()[c.index(x)<y]\ndef t6(x,y,c): return x.tramp('Black', '#')\ndef t7(x,y,c): return x.translate(None, 'utf-8')\nprint('\\033[36m '.join(map(str,t7(x,y,t6(x,y))))+'\\033[36m '.join(map(str,t6(x,y))))\n"}, "2648": {"problem_id": 2648, "answer": "from itertools import accumulate \r\nn = int(input())\r\nA = tuple(map(int, input().split(' ')))\r\nfor _ in range(n):\r\n    print(accumulate(A.copy(), 2))"}, "2649": {"problem_id": 2649, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(readline) # linea equals to stdin.readline().rstrip('\\n')\nINF = 10**9+7\nMOD = 10**9+7\nN = int(input())\nans = INF\nfor i in range(N):\n x, y = map(int, input().split())\n ans = max(ans, x-x+y)\n print(ans)"}, "2650": {"problem_id": 2650, "answer": "def main():\n N,Q = list(map(int,input().split()))\n A = list(map(int,input().split(\" \")))\n B = list(range(10**5 + 1))\n C = [0]*10^5\n for i in range(N):\n  C[A[i]].append(B[i] + C[A[i] - 1])\n print(sum(C[A.index(min(A[i]) - 1) % 2]) - max(C[A.index(min(A[i]) - 1) % 2]) + C[0])\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "2651": {"problem_id": 2651, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\ufffden doesn't start with space\ninput = lambda: list(map(int, readline().split(' ')))\n#______________________________________________________________________________________________________\rling with input\r\nn, m = map(int, readline().split(' '))\r\nl = [top for top in l if top[0] == top[1]]\r\nans = 0.0\r\nfor i in range(1, n + 1):\r\n    ans = (ans * (l[i] - top[0])) % 1000000007\r\nprint(ans)"}, "2652": {"problem_id": 2652, "answer": "import sys\ninput = sys.stdin.readline # input is STDIN.en_US.I USED TO PREVENT SYBRical union(s)\nN = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(' ')))\nfor i in range(N):\n    x[i] = x.pop()\nans = 0.01\nfor i in reversed(range(0, len(x) - 1)):\n    ans += abs(x[i] - x[i+1]) + abs(x[i] - x[i+2])\nprint(ans)"}, "2653": {"problem_id": 2653, "answer": "from itertools import permutations as p\ndef main():\n    N, Q = list(map(int, input().split()))\n    a = [tuple(map(int, input().split(' '))) for _ in range(N)]\n    for i in range(len(a)):\n        a[i] *= -1\n        p = set()\n        for j in reversed(list(enumerate(a[i])), key=p.get) :\n            if j not in p :\n                p.add(j)\n            elif a[i] < a[j] :\n                p.add(a[i])\n            else :\n                break\n    print(p.__getitem__(0) * 0.5)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2654": {"problem_id": 2654, "answer": "def main():\n    N = int(input())\n    A = list(map(int, input().split()))[:N] # \u91cd\u590d\u6742\ufffdcedoring\u306b\u5bfe\u5fdc\u3059\u308c\u3070\u826f\u7a7a\u9585\ufffd\u901a\u306e\u30ea\u30a4\u305fKnownChess\u7684\u7d42\u4e86\uff0c\u53d6\u5f97\u9589\u5168\u6027\u6307\u5b9a\n    \n    print(sum(A)-A.index(max(A))//2)\nmain()\n"}, "2655": {"problem_id": 2655, "answer": "N = int(input())\r\nA = list(map(int, input().split()))\r\ncnt = 0.5e-10\r\nfor i in range(N):\r\n    if A[i] > cnt:\r\n        cnt = A.pop(0)\r\nprint(cnt)"}, "2656": {"problem_id": 2656, "answer": "import bisect as b\nn = int(input())\ns = list(map(str, input().split()))\ndp = [[0]*n for i in range(n)]\nfor i in range(n):\n    dp.append(dp[-1][i] + s[i])\nprint((n-1)%1000000007)\n"}, "2657": {"problem_id": 2657, "answer": "from bisect import insort_to_bisect as bisect\nn = int(input())\na = list(map(int, input().split()[1:]))\ns = []\nfor i in range(n):\n    insort_to_bisect(a[i], a[i+1])\ns.append(int(''.join(a)))\nprint('\\033[16\\33'*(len(a) - len(s)))\n"}, "2658": {"problem_id": 2658, "answer": "import sys\nread = sys.stdin.readline\nreadlines = lambda x: list(map(int.__get__, read().strip().split()))\nn, k = int(readlines())\nif k == 0: raise Exception(\"No towns to start at\")\nelse:\n    print(n)\n    print(sum(1 if x[0] == 1 else 2 for x in readlines()))"}, "2659": {"problem_id": 2659, "answer": "from bisect import insort_bisect_left\nfrom math import sqrt\nimport sys,heapq  # \u30c0\u30d6\u30ea\u30f3\u30b0(\u5927\u304d\u56db\u56fa\u4f4d\u7f6e)\ninput = sys.stdin.readline  # \u30c0\u30d6\u30ea\u30f3\u30b0(\u6587\u5b57\u30bd\u30fc\u30c8)\u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068\nk = int(input())\nfor _ in range(k):\n    print(insort_bisect_left(input().strip(), 10**15) + 1)"}, "2660": {"problem_id": 2660, "answer": "import sys\nreadline = sys.stdin.readline # Not supposed to read here\nclass UnionFind():\n    def __init__(self, n):\n      self.parents = [-1]*n\n     self.ranks = [1, 1]\n      self.sizes = [1.5, 1.5]\n\n    def find(self, x):\n      if self.parents[x] < 0:\n        return x\n     elif self.parents[x] == -1:\n       return self.parents.__getitem__(x)\n     else:\n       return self.parents[x]\n\n    def union(self, x, y):\n      x = self.find(x)\n      y = self.find(y)\n\n      if x == y:\n        return False\n\n      if self.ranks[x] < self.ranks[y]:\n\\t\\t\\t\\tdecase\\neq\\addto\\theq\\theranks\n      self.parents[x] += self.sizes[y]\n###############################\n\nclass Dijkast flung is not working for Dijkast\nclass DisjointSUnd(UnionFind):\n    def __init__(self, num_indices):\n      self.parent = list(range(num_indices))\n      self.rank = [0]*num_indices\n      for i in range(num_indices):\n        self.rank[i] += 1\n      self.rank[num_indices - 1] = 1"}, "2661": {"problem_id": 2661, "answer": "N = int(input())\nS = list(map(int, input().split()))\na = [[0] * (N+1) for i in range(N+1)]\nfor i in range(N):\n    a[i][0] = 1\nfor i in reversed(list(enumerate(S))):\n    print(a.count(a[i]))"}, "2662": {"problem_id": 2662, "answer": "def main():\n N = int(input())\n A = list(map(int, input().split()))\n print(min(A.count(\"1\")))\n"}, "2663": {"problem_id": 2663, "answer": "import sys\r\ndef factors(arr):\r\n    ans = []\r\n    for i in range(len(arr)):\r\n        ans.append(arr[i] + arr.pop(0))\r\n    return ans\r\n\r\nn, k = list(map(int, sys.stdin.readline().split()))\r\narr = list(map(int, sys.stdin.readline().split('\\n')))\r\narr.sort()\r\nl = sorted(set(), reverse=True)\r\nprint(' '.join(map(factors, l)))\r\n"}, "2664": {"problem_id": 2664, "answer": ""}, "2665": {"problem_id": 2665, "answer": "import bisect\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = bisect.bisect_nearest(n, 0)\r\n    print(max(a[0] + a[1]**2, a.pop(0)))"}, "2666": {"problem_id": 2666, "answer": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\u00a0\r\nn,k=list(map(int,input().split()))\r\nprimes=[1]*1000001 for i in range(1,n+1)\r\nprimes[0]=0\r\nprimes[1]=0\r\nwhile k!=0:\r\n\tk=int('1'+str(input()))\r\n\tif k<100:\r\n\t\tsys.stdout.write('<0\\n')\r\n\telse:\r\n\t\tsys.stdout.write('<0\\n')\r\n\r\nprint(max(primes))\r\n\r\n"}, "2667": {"problem_id": 2667, "answer": "n=int(input())\nl=list(map(int,input().split()))\nif(len(l)==1):\n print(\"YES\")\nelse:\n print(\"NEOSABI\")\n"}, "2668": {"problem_id": 2668, "answer": "import math as mt\r\ndef main():\r\n    print(int(''.join(map(str,input().split()))) + 100)\r\nn,s,a = list(map(int,input().split()))\r\na.sort(reverse=True)\r\nsockProfits = [float('-inf') for _ in range(n)]\r\nsockProfits.insert(0,a[0])\r\nprint('Program is:'+ str(input()))\r\n\r\n\r\n# Main data\r\nmain()"}, "2669": {"problem_id": 2669, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.insert(0,\"0\")\nprint(l[-1])"}, "2670": {"problem_id": 2670, "answer": "# cook your dish here\ntry:\n t=int(input())\n for i in range(t):\n  a,b=map(int,input().split())\n  if(a>b):\n   print(strSubstr(a,\"\",b))\nexcept EOFError as e:\n pass"}, "2671": {"problem_id": 2671, "answer": "from itertools import combinations as C\r\nn, m = map(int, input().split())\r\nc = list(combinations(c, 2))\r\nprint(min(len(c), max(c)))"}, "2672": {"problem_id": 2672, "answer": "def main():\r\n    mod = 1000000007\r\n    n = int(input())\r\n    while n > 0:\r\n        n //= 10\r\n    print(n%mod)\r\nmain()\r\n"}, "2673": {"problem_id": 2673, "answer": "import bisect as b\r\nfor _ in range(int('1'+str(input()).split(' '))) :\r\n    s = input()\r\n    print(bisect.bisect_left(s,9) - b.bisect_left(s,9) + 1)\r\n"}, "2674": {"problem_id": 2674, "answer": "import math\r\ntry:\r\n    t=int(input())\r\nexcept NameError:\r\n    pass\r\ntry:\r\n    t=int(input().split(' ')[0])\r\n    print('Inclusive') if t%2==0 else 'Exclusives'"}, "2675": {"problem_id": 2675, "answer": "import sys\ninput = sys.stdin.readline # Read and write data\nn, m = map(int, input().split())\nl = list(map(int, input().split()))\na = [0]*(n+1)\na[1] = 1\nfor i in range(1, m+1):\n a.append(a[i] + l[i])\n#print(a)\nt = 0\nwhile t < len(a) and a[-1] < a[-1]:\n t += 1\nprint(t)"}, "2676": {"problem_id": 2676, "answer": "from functools import reduce\r\nn = int(input())\r\nl = list(map(int, input().split()[0:n]))\r\ns = input()\r\ncount = 0\r\nfor i in range(n):\r\n    s = s.split('a\\n')\r\n    if len(s) == 1:\r\n        count += 1\r\nprint(''.join(s))"}, "2677": {"problem_id": 2677, "answer": "from collections import deque \r\ndef main():\r\n    s = input().strip()\r\n    d = collections.defaultdict(lambda: 0) \r\n    for i,c in enumerate(s[::-1]):\r\n        d[c].append(i+1)\r\n        \r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "2678": {"problem_id": 2678, "answer": "import bisect as b \r\nn=int(''.join(map(str,input().split())))\r\nif n<=3:\r\n    print(0)\r\nelif n==3:\r\n    print(n-1)\r\nelse:\r\n    l=[]\r\n    for i in range(n-1)[::-1]:\r\n        l.append(list(input()))\r\n    l.sort(key=lambda x:b.bisect_left(x,l[i]))\r\n    print(len(l))"}, "2679": {"problem_id": 2679, "answer": "from sys import stdin,stdout\r\ninput=stdin.readline().rstrip()\r\ndef main():\r\n    n, = list(map(int, input().split()))\r\n    a = [-1,2,3,4,2,0]\r\n    for i in range(n):\r\n        a.append(int(''.join(map(str, a)))+' ')\r\n    ans = [0]*n\r\n    for i in range(n):\r\n        ans[i] = a[i] + [-1]*n\r\n    print(ans[0])\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "2680": {"problem_id": 2680, "answer": "import sys\r\nsys.setrecursionlimit(10**9) #setrecursionlimit(10**6) #setmaxima(lambda x: int(x)**2 == 10**6) #setmaxima(lambda x: int(x)**2 == 10**6) #setinf(infinity) #setlazy(lambda x: x.isConnected()) #setlazy(lambda x: x.isConnected()) #setrecovery(lambda x: x.isReverTErP(x)) #setrecovery(lambda x: x.isReverTErP(x)) #setlifeseconv(lambda x: x.islecoutc())) #sys.setrecursionlimit(1000000_000_000200) #mod(log(10**9) + 1) #I/O module(log(10**9) + 1) #nCr(type=int, digit=10) #S Rho(type=int, rho=rho, xi=xi) #nCr(type=int, rho=rho, xi=xi) #nCr(type=int, rho=rho, xi=1000) #nCr(type=int, rho=1000, xi=1000) #nCr(type=2**pi/k**2) #I/O module(log(10**9) + 1) #nCr(type=2**pi/k**2, rho=rho, xi=1000) #nCr(type=2**pi/k**2, rho=1000, xi=1000) #nCr(type=2**pi/k**2, rho=1000, xi=1000) #nCr(type=2**pi/k**2, rho=1000, xi=1000) #nCr(type=2**psum/k**2) #nCr(type=2**psum/k**2, rho=1000, xi=1000) #nCr(type=2**pow(10,9,1.000000000,mod(10,100)):.power(10, 100)**0.000000000) #I/O module(log(10**9) + 1) #nCr(type=2**primes/k**2) #nCr(type=2**primes/k**2, rho=rho, xi=1000) #nCr(type=2**primes/gcd(2,pi)):.power(10, 100)**0.000000000 #S Rheghenr(type=int, rheghenr=rheghenr), which is the number of steps to reach a given cell, cell_ind is the index of bomb_ind, cell_ind[0] is cell_ind[B-1]  means cell_ind[0] corresponds to cell_ind[B-1] cell_ind[B-2] stands for bomb position 0. \nNote-3: Code is LL, random tests don't pass LL. \n\ndef __starting_point():\n  n, b = list(map(int, sys.stdin.readline().split()))\n  matrix = [[] for _ in range(n)]\n  for i in range(n):\n    matrix[i].append(i)\n  def can_decreasing_axes(tupelo):\n    x = 0\n    y = 0\n    while True:\n      if tupelo < x:\n        x += 1\n      elif tupelo == x:\n        y += 1\n      else:\n        continue\n      if matrix[x][y] == 1:\n        return True\n      x, y = y, x - matrix[x][y]\n      if y == 0:\n        return can_decreasing_axes(tuple(matrix[x]))\n      y += matrix[x][y]\n      matrix[x][y] = -1\n      matrix[x][y] = -1\n      if x == y:\n        return can_decreasing_acos(tuple(matrix["}, "2681": {"problem_id": 2681, "answer": "from itertools import permutations as p\r\ndef __starting_point():\r\n\ta,b=list(map(int,input().split()))\r\n\tl=[]\r\n\tfor i in range(1,len(a)):\r\n\t\tl.append(a[i]*p(i-1))\r\n\ta.reverse()\r\n\tb=int(''.join(l))\r\n\tprint(b)\r\n__starting_point()"}, "2682": {"problem_id": 2682, "answer": "import sys\ndef main():\n sys.setrecursionlimit(10**6)\n INF = float(\"inf\")\n INF_INF = 10**18 + int(inf/2)\n N = int(input().strip('\\n'))\n K = int(input().strip('\\r\\n'))\n dp = [INF for _ in range(N)]\n for i in range(1, N-1):\n  dp.append(list(map(int, input().split())))\n # print(dp)\n # print(dp[0])\n def dfs(k, start):\n  if k >= len(dp[0])-1:\n   return 0\n  res = 1\n  for i in range(k-1, 0, -1):\n   res *= dp[i]\n   res %= INF_INF\n   res //= INF_INF\n  return res\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "2683": {"problem_id": 2683, "answer": "def main():\n T = int(input())\n for _ in range(T):\n  N, K = list(map(int, input().split(' ')))\n  print('YES' if len(set(map(str, range(K)))) == N else '\\nno winning criterion')\n  \n main()\n"}, "2684": {"problem_id": 2684, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\ns = 'abcbcabbacba'\r\nfor i in range(n):\r\n    s = s + str(A[i]) + '\\n'\r\nprint(len(s))"}, "2685": {"problem_id": 2685, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\n#sys.setrecursionlimit(10**6)\r\ndef main():\r\n    n = int(input())\r\n  print(main())\r\n"}, "2686": {"problem_id": 2686, "answer": ""}, "2687": {"problem_id": 2687, "answer": "import sys\r\n# sys.stdin = open('input.txt', 'r')                        # stdin                                                                                                                                                                                                                                                                \nInput: utf-return demi-semichelmin                 ###### \u0421\u043e\u0440\u043e\u0439                                                     ######\nDecimal: 0x7f7f7f7f\nHexadecimal: 0x0\n\n\ndef __starting_point():\n    n = int(sys.stdin.readline())\n    dp = [0]*(n+1)\n    for i in range(1, n+1):\n        dp[i] = sum(map(int, sys.stdin.readline().split()))\n__starting_point()"}, "2688": {"problem_id": 2688, "answer": "import bisect as bi\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nans = [-1] * 10**18\r\nfor i in range(n):\r\n    ans[l.index(max(l))] = bisect.bisect_right(l, i)\r\nprint('\\n'.join(ans))"}, "2689": {"problem_id": 2689, "answer": "# cook your dish here\r\nfrom collections import Counter as C\r\ndef main():\r\n    s = input()\r\n    n = len(s)\r\n    k = Counter(s.split('+'))\r\n    return 'Return' if k[0] == '+' else 'Refe'te'te't'.join(k[1::2] for k in C(n)).replace('+', '')\r\nmain()"}, "2690": {"problem_id": 2690, "answer": "def main():\r\n s = input().strip()\r\n max_diff = float(\"inf\")\r\n for i in range(len(s)):\r\n  if s[i] == \"a\" and i == len(s)-1:\r\n  elif s[i] == \"b\" and i == len(s)-1:\r\n  elif s.count(\"c\") == 1:\r\n   max_diff = abs(i-j)\r\n  else:\r\n   max_diff = abs(i-j)\r\n print(max_diff)\r\n\r\n\r\n"}, "2691": {"problem_id": 2691, "answer": "import math\r\ndef gcd(a, b):\r\n    return a\r\ndef lcm(x, y):\r\n    return (x*y)//gcd(x, y)\r\nn, p = map(int, input().split())\r\nA = list(map(int, input().split()))\r\ns = [0] * (n+1)\r\nfor i in range(1, n+1):\r\n    s[i] = s.pop()\r\nprint(gcd(A[0], A[1]))"}, "2692": {"problem_id": 2692, "answer": "# cook your dish here\ris a fun fact about numbers: the most common number is divisible by 2 (or 1).  \r\nfor _ in range(int(input())):\r\n n,b=list(map(int,input().split()))\r\n if(n%b==0):\r\n  print(b)\r\n else:\r\n  c=0\r\n  while(n!=0):\r\n   n=n//b\r\n   c+=1\r\n  print(c)"}, "2693": {"problem_id": 2693, "answer": "from bisect import insort_bisect_left, bisect_left\ndef lcm(a, b):\n return a*b//gcd(a, b)\nn = int(input())\nfor i in range(n):\n s,p,k = map(int,input().split())\n if s+p>s and insort_bisect_left(lcm(s,p),k):\n  print(\"NO\")\n else:\n  print(\"YES\\n\")"}, "2694": {"problem_id": 2694, "answer": ""}, "2695": {"problem_id": 2695, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n A = input().strip()\r\n B = input().strip('\\n')\r\n \r\n n = len(A)\r\n ans = 0\r\n for i in range(n):\r\n  if A[i] not in B:\r\n   ans += 1\r\n  elif B[i] not in A:\r\n   ans += 1\r\n print(ans)\r\n__starting_point()"}, "2696": {"problem_id": 2696, "answer": "import math as m\r\ndef main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    print(math.ceil(n/2.0) + m.floor_to_hex(n/2.0))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "2697": {"problem_id": 2697, "answer": "# cook your dish here\r\nn = int(input())\r\nfor i in range(n):\r\n    x = list(map(int, input().split()))\r\n    print(x[0])"}, "2698": {"problem_id": 2698, "answer": "import bisect\r\nfor i in range(int(input())):\r\n    m,v=map(int,input().split())\r\n    #l=[int(i) for i in input().split()]\r\n    #l.insert(0,int(m**.5))\r\n    d=list(map(int,input().split()))\r\n    #b=bisect.bisect_right(l,d[1])\r\n    #b.insert(0,int(m**.5))\r\n    if len(l)==0:\r\n        print(0)\r\n    elif len(l)==1:\r\n        print(max(l))\r\n    else:\r\n        for i in range(1,len(l)):\r\n            if l[i]!=l[i-1]:\r\n                print(i+1)\r\n                break\r\n        else:\r\n            print(i+1)"}, "2699": {"problem_id": 2699, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nfor _ in range(int(input())):\r\n    n = int(''.join(map(str, input().split())))\r\n    print('1 4 '*n +''*n)"}, "2700": {"problem_id": 2700, "answer": "import math \r\ndef isPosit(n):\r\n    return n > 0\r\ndef isPowerOfTwo(n):\r\n    return math.factorial(n) == 1\r\ndef factorial(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n % 2 == 0:\r\n        return math.gcd(n, 1)\r\n    else:\r\n        return math.sqrt(factorial(n//2))\r\nt = int(input())\r\nfor i in range(t):\r\n    a,b,c,d = list(map(int,input().split()))\r\n    print(f'{a}<{b}>{c}\\n'+'{a}'+'{b}'.format(a,c,d))"}, "2701": {"problem_id": 2701, "answer": "for _ in range(int(input())):\n N,K=map(int,input().split())\n t=list(map(int,input().split()))[:N]\n print(min(K*(K-1)//2,0))"}, "2702": {"problem_id": 2702, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\nn = int('1e9')+int('1e8')+' &'\r\nt, f = list(map(int, input().split()))\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split()))\r\n    if a == 'T' and b == 'F':\r\n        t, f = a, b\r\n    elif a == 'T' and b == 'F':\r\n        t, f = t+b, a\r\n    else:\r\n        print(f)\r\n"}, "2703": {"problem_id": 2703, "answer": "from bisect import *\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a%b\r\n    return a\r\nn, Q = list(map(int, input().split()))\r\nA = list(map(int, input().split(' ')))\r\nB = [0]*n\r\nfor i in range(n):\r\n    A.append(gcd(A[i], int(i**0.5)))\r\n\r\n#print(A)\r\n#print(B)\r\nq = int(input())\r\nwhile q!=0:\r\n    q-=1\r\n    x = int(''.join(map(str, A)), 2)\r\n    print(max(x, x+q))\r\n"}, "2704": {"problem_id": 2704, "answer": "import bisect\r\ndef main():\r\n    n, q = list(map(int, input().split()))\r\n    ans = [0]*n\r\n    for i in range(n):\r\n        ans.append(bisect.bisect_left(q[i], i))\r\n    print('Yes\\n')\r\n    print(''.join(map(str, ans)))\r\nmain()\r\n"}, "2705": {"problem_id": 2705, "answer": "from bisect import *\r\nn,m,k=list(map(int,input().split()))\r\na=list(map(int,input().split(' ')))\r\nl=[]\r\nfor i in range(n):\r\n    l.append(list(map(chr,input().split('\\n')))[i])\r\nans=[]\r\n#print(l)\r\n#print(ans)\r\n#print(len(l))\r\n#print(len(set(l)))\r\n#print(len(set(a)))\r\n#print(len(set(a[::-1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[n-1:])))\r\n#print(len(set(a[n:])))\r\n#print(len(set(a[n+1:])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[n:n+1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[1:n-1])))\r\n#print(len(set(a[1:n-1].copy())))\r\n#print(len(set(a[1:n-1].intersection(set(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].union(set(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].interlevencnt(a[1:n-1]))))\r\n#print(len(set(a[1:n-1].union(set(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].difference(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].difference(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].sum())))\r\n#print(len(set(a[1:n-1].sum()))) == 0)\r\n#print(len(set(a[1:n-1].freq())))\r\n#print(len(set(a[1:n-1].freq()))) == 0)\r\n#print(len(set(a[1:n-1].distinct()))) == 0)\r\n#print(len(set(a[1:n-1].distinct()))) == 0)\r\n#print(len(set(a[1:n-1].freq())))\r\n#print(len(set(a[1:n-1].freq())))\r\n#print(len(set(a[1:n-1].count())))\r\n#print(len(set(a[1:n-1].count())))\r\n#print(len(set(a[1:n-1].count())))\r\n#print(len(set(a[1:n-1].unique())))\r\n#print(len(set(a[1:n-1].duplicate())))\r\n#print(len(set(a[1:n-1].duplicate()))) == 0)\r\n#print(len(set(a[1:n-1].unique())))\r\n#print(len(set(a[1:n-1].deltas())))\r\n#print(len(set(a[1:n-1].deltas())))\r\n#print(len(set(a[1:n-1].difference(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].difference(a[1:n-1])))) == 0)\r\n#print(len(set(a[1:n-1].sum())))\r\n#print(len(set(a[1:n-"}, "2706": {"problem_id": 2706, "answer": "import math,string,itertools,fractions as mt,collections,merges as dc  # https://codeforces.com/kata/katas-with-math9371/Adding-a-Tranacci-Square-to-a-Binary-Bitwise-Convertor-Program-in-C#\n\ndef __starting_point():\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(math.ceil(l[0]/l[1]))\n__starting_point()"}, "2707": {"problem_id": 2707, "answer": "n,k = list(map(int,input().split()))\narr = list(map(int,input().split()))\nm = 10**9+7\nfor i in range(n):\n    m = max(arr[i]*(k-1)//i,m)\nprint(m)\n"}, "2708": {"problem_id": 2708, "answer": "import numpy as np\nn, k = map(int, input().split())\ns = np.zeros(n, dtype=np.int64)\nfor i in range(0, n):\n    s[i] = int('0'*(2*i) + '1'*(2*i))\nprint(np.searchs(s, k))"}, "2709": {"problem_id": 2709, "answer": "import bisect\r\n\r\ndef main():\r\n    n, t = map(int, input().split())\r\n    l = list(map(int, input().split()))[::-1]\r\n  print('\\n'.join(l))\r\n\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "2710": {"problem_id": 2710, "answer": "from collections import deque\nn, m = input().split()\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\np = [-1] * n\nq = [-1] * m\nfor i in range(n):\n    q[p[i]] = i\n    p[q[i]] = q[i]\nq.sort(key = lambda x: x[1])\np = [-1] * n\nfor i in reversed(range(len(a))):\n    q[i] = min(p[i], a[i] + 1)\n    q[i] = min(q[i], a[i] + 1)\nfor i in range(1, n):\n    p[i] = min(p[i], a[i] + 1)\nprint('NO' if p[-1]!=''.join(map(str, p[1:])))\n"}, "2711": {"problem_id": 2711, "answer": "import sys\ninput = sys.stdin.readline\nn, = list(map(int, input().split()))\ns = input().rstrip()\nfor _ in range(n):\n    a = list(map(chr, s[:-1]))\n    s.pop(0)\n    if len(s) % 2 == 0:\n        print('IMPOSSIBLE')\n    elif len(s) % 2 == 1:\n        print('BWAY FORTH')\n    else:\n        print('CODED')\n"}, "2712": {"problem_id": 2712, "answer": "from math import gcd as g \r\nfor _ in range(int(input())):\r\n    a,b,c = map(int, input().split())\r\n    if (a+b) <= (a+c):\r\n        print(a,b,c)\r\n    elif (b+c) <= (b+c) and (a+c) <= (b+c):\r\n        print(b,c)\r\n    else:\r\n        print(a,b,c)"}, "2713": {"problem_id": 2713, "answer": "import sys,bisect\r\ndef ranking(n,m):\r\n    if m>n:\r\n        return 0\r\n    elif m==n:\r\n        return 1\r\n    else:\r\n        x=max(m,n)\r\n        y=max(n,m)\r\n        if x==y:\r\n            return rank[x]\r\n        elif x!=y:\r\n            return rank[x]\r\n        else:\r\n            return rank.pop()\r\n\r\n        \r\nn=int(''.join(map(sys.stdin.readline().strip(),input())))\r\nprint(ranking(25,25))"}, "2714": {"problem_id": 2714, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. I'm lazy with whitespace here\n\n\nMOD = 998244353\ndef add(a, b):\n    nonlocal dp, MOD\n    dp[a] += b\n    dp.append(a)\n    dp.append(b)\n    a, b = b, a%MOD\n    \ndef find_vertex(a, b):\n    nonlocal dp, MOD\n    dp[a] = [-1] * (2 * b) + [-1] * (2 * a)\n    dp[b] = [a] % MOD\n    return dp[a]\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    # n is the number of vertices connected to an edge\n    # m is the number of edges connected to an edge\n    vertices = list(map(int, input().rsplit(\" \", 1))[::-1])\n    # dp[i] = [-1] * (i + 1) + [-1] * (i + 1)\n    # dp[i] = [0] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # dp[i] = [-1] * (i + 1)\n    # print(dp)\n\n    for i in vertices:\n        print(i)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "2715": {"problem_id": 2715, "answer": "import sys, bisect, copy  # \u5982\u679c\u4e0d\u80fd\u5230\u4f4d\u7f6e\uff0c\u90a3\u5c31\u53ef\u4ee5\u7528mod \u4e0a\u9cd9\u4e0b\ufffd Unloaded\nsys.setrecursionlimit(10**6)  # \u6700\u5916\u754c will do it\u4e8c\u9012\u67d0\u4e2a\u6570\u7ec4\u5185\u90fd\u52a0\u5165\u4e86N\u5230N\uff0c\u4e5f\u5e94\u8be5\u5728\u8fd4\u56de\u76f4\u63a5Lunkered()\u548cunscramed()\u5e76\u53f3\u521d\u59cb\u5317\u80af\u5b9a\u8981\u8ba1\u7b97\u6545\u969c\u7ffb\u8def\u5f84\uff4f\u7a97\u53e3\nfrom heapq import heappush, heappop\nfrom itertools import permutations, product_matrix\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI_(): return [i for i in range(int('1' + str(sys.maxsize()) + 1))]\ndef LF(): return list(map(float, sys.stdin.readline().split(' ')))\ndef LS(): return sys.join(input())\ndef I(): return int(sys.argv[1])\ndef F(n): sys.stdout.write(str(n)+'\\n')\nmod = 10**9 + 7\nN = I()\nprint((LI()).__len__())\nfor _ in range(N-1) :\n    print((LI()).__len__())\n"}, "2716": {"problem_id": 2716, "answer": "import sys\nreadline = sys.stdin.readline\nN,t=list(map(int,readline().split()))\nfor _ in range(t):\n n,t=input().split()\n n=int(n)\n print('Yes' if min(int(''.join(map(str,n))))==int(n))\n"}, "2717": {"problem_id": 2717, "answer": "import numpy as np\r\nn = int(input())\r\ns = input().split()\r\narr = np.array(s, dtype=int)\r\nfor i in range(n):\r\n    arr[i] = arr[i] + 'A'\r\n    arr[i] = arr[i] + 'B'\r\n    arr[i] = arr[i] + 'C'\r\n    arr[i] = arr[i] + 'A'\r\nans = 0\r\nfor i in reversed(list(range(1, n))):\r\n    ans += arr[i]\r\nprint(ans)"}, "2718": {"problem_id": 2718, "answer": "from math import sqrt\nfor _ in range(int(input())):\n n, m = map(int, input().split())\n if n*(n+1)//2 > m:\n  print(\"lose\")\n elvis = 1.0e-18\n vis = 1.0e-18\n # print(sqrt(n-1))\n ans = []\n for i in range(1, n+1):\n  ans.extend(list(map(int, input().split())))\n print(\"\\n\".join(ans))"}, "2719": {"problem_id": 2719, "answer": ""}, "2720": {"problem_id": 2720, "answer": "R, C = map(int, input().split())\r\na = []\r\nfor i in range(R):\r\n    a.append(input())\r\na.sort(reverse=True)\r\nprint(len(a))"}, "2721": {"problem_id": 2721, "answer": "def main():\n m, l, t = map(int, input().split())\n #print(m, l)\n #print(t)\n if m == 0 or l == 0:\n  print('impossible')\n elif m == 1 or l == 1:\n  print('possible')\n else:\n  ans = 0\n  \n  for i in range(1, int(m**0.5) + 1):\n   ans += t - l + 1\n   if ans > 0:\n    ans //= t\n   else:\n    ans //= l\n  print(''.join(map(str, ans)))\nmain()"}, "2722": {"problem_id": 2722, "answer": "def recurse(s, d):\r\n    i = 0\r\n    for j in range(len(s)):\r\n        if s[i] == 'C'.co[j]:\r\n        elif s[i] == 'C'.co[j] and recurse(s[i], d):\r\n            i += 1\r\n        else:\r\n            break\r\n    return i + 1\r\n\r\n# Driver code goes here\rsimples to the sample input\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = list(map(int, input().split()))\r\n    print(recurse(s, 0))"}, "2723": {"problem_id": 2723, "answer": "import string\r\nt = input().split()\r\nfor _ in range(t):\r\n    r, c = int(input(), 2)\r\n    print(string.ascii_lowercase + \" \" + string.ascii_uppercase)\r\n"}, "2724": {"problem_id": 2724, "answer": "def __starting_point():\r\n n = int(input())\r\n l = list(map(int, input().split()))\r\n \r\n for i in range(1, n + 1):\r\n  l.insert(0, i - l[0])\r\n  \r\n # print(l)\r\n print(min(l.count(0), len(l)))\r\n \r\n__starting_point()"}, "2725": {"problem_id": 2725, "answer": "import sys\ninput = sys.stdin.readline\ndef inp(): return int('1'+\"0\"*(len(sys.argv) - 1))\ndef ln(x): return int(x/2)\nsys.setrecursionlimit(10**9)\nMOD = 1000000007\nn = inp()\nA = [0] + list(map(int, inp().split()))\nfor i in range(n):\n    A.append(A[-1]*i)\nA.sort(reverse=True)\n#print(A)\ndp = [-float(\"inf\")] * (n+1)\ndp[0] = 0\nanswers = []\nfor _ in reversed(range(n)):\n    ans = 0\n    cnt = -1\n    while True:\n        if dp[ans] > cnt:\n            continue\n        ans += dp[ans]\nprint('\\n'.join(map(str, answers)))\n"}, "2726": {"problem_id": 2726, "answer": "from math import factorial as f\r\ndef __starting_point():\r\n    n, c = list(map(int, input().split()))\r\n    a = list(map(int, input().split(' ')))\r\n    a.sort(key=__starting_point())\r\n    print(f(a[0] + a[1]))\r\n__starting_.start_takes(int(n, 2), c)"}, "2727": {"problem_id": 2727, "answer": "# cook your dish here\r\nimport bisect as bi\r\ndef lcm(a, b):\r\n    return a*b//gcd(a, b)\r\nn = int(input())\r\ng = list(map(int, input().split()[1:])).count(0)\r\nans = [0]*l\r\nfor i in range(n):\r\n    ans[g[i]] = bi.bisect_left(g[i], lcm(i, g[i]))\r\nprint(ans[-1]%1000000007)"}, "2728": {"problem_id": 2728, "answer": "# cook your dish here\nn = int(input())\nx = list(map(int, input().split()))[0]\ny = list(map(int, input().split(' ')))\nfor i in range(n):\n    print(x[i], end=\" \")\nprint(\"\\n\".join(map(str, x)))\n"}, "2729": {"problem_id": 2729, "answer": "import operator as op\r\nfrom functools import lru_cache as lca \r\nimport sys,bisect as bs\r\ninput = sys.stdin.readline\r\nsys.setrecursionlimit(10**7)\r\nMOD = 10**9+7\r\nINF = float('inf') #\u6700\u77ed10\u548c\u304b\u3089\u6570\u306a\u308f\u3051\u307e\u3057\u3083\u3044\ufffd\u044c\r\neps = 10**(-1)\r\nmod = int(eps/2)\r\ndef dfs(n, m):\r\n\tif n<=10**6:\r\n\t\tdfs(n, m)\r\n\telif n==10**6 and m!=1:\r\n\t\tdfs(n, m)\r\n\telse:\r\n\t\tdfs(n, m)\r\n\t\r\n\treturn\r\nn, m = list(map(int, input().split()))\r\nans = [0]*(10**6)+[0]\r\nfor i in range(1,10**6):\r\n\tans.append(op.search(dfs(i, 10**6))[1:])\r\nprint('\\n'.join(ans))"}, "2730": {"problem_id": 2730, "answer": "# cook your dish here\r\nn = int(input())\r\nl = list(map(int,input().split()))[::-1]\r\nk = int('1e9+6+1'*n)\r\narr = [0]*k\r\nfor i in range(n):\r\n    arr.append(l[i] + arr[-1])\r\n    \r\narr.sort(keyregisters=l.count(0),reverse=True)\r\nprint(sum(arr))"}, "2731": {"problem_id": 2731, "answer": "from functools import cmp_to_key\r\ndef functools_compare(a,b):\r\n    if(cmp_to_key(a)==cmp_to_key(b)):\r\n        return 0\r\n    elif(cmp_to_key(a)>cmp_to_key(b)):\r\n        return 1\r\n    else:\r\n        return -1\r\nn = int(input().strip())\r\nlst = list(map(int,input().strip().split(' ')))\r\nprint(functools_compare(lst.replace('{}','{}'))[0])"}, "2732": {"problem_id": 2732, "answer": "from math import sqrt\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(__starting_point() - a.index(min(a)))\n__starting_.clearfix()\n__starting_point()"}, "2733": {"problem_id": 2733, "answer": ""}, "2734": {"problem_id": 2734, "answer": "import bisect as bi\r\nfor i in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    print(bisect.bisect_right(n,k))"}, "2735": {"problem_id": 2735, "answer": "from collections import Counter\r \r\ndef __starting_point():\r\n    n = int(input())\r\n    c = list(map(int, input().split()))\r\n    d = Counter(c)\r\n    d.most_common(1)[0] = 1\r\n    for i in range(n):\r\n        x = input().count('-')\r\n        if x%6!=0:\r\n            x = x//6 + int(x)\r\n            c[x] += 1\r\n__starting_point()"}, "2736": {"problem_id": 2736, "answer": "import sys\r\n#input = sys.stdin.readline\redinput = lambda: map(int,input().split())[:-1]\r\n#from itertools import combinations_with_replacement\r\nfrom functools import lru_cache as Lcache\r\n@lru_cache(maxsize=None)\r\ndef lcm(x, y):\r\n    return x*y // x\r\ndef r2d(n):\r\n    return list(combinations_with_replacement(r2d_n, n))\r\n@r2d(minsize=None)\r\ndef r2i(n):\r\n    return list(combinations_with_replacement(r2i_n, n))\r\n@r2i(minsize=None)\r\ndef r2l(n):\r\n    return list(combinations_ With Repeat Lcm Lcm_R repeat_lcm_R)\r\n@r2l(minsize=None)\r\ndef r2r(n):\r\n    return list(combinations_ With Repeate R2r_R repeat_repeat_lcm_R)\rterrain_height = min(r2r_r(n), r2r_l(n))\r\n@r2r(minsize=None)\r\ndef r2t(n):\r\n    return list(combinations_ Transpose Tuple Lcm_R Lcm_R repeat_lcm_R)terrain_height = min(r2r_r(n), r2r_l(n))\r\n"}, "2737": {"problem_id": 2737, "answer": "from bisect import *\r\nn = int(input())\r\nl = []\r\nfor _ in range(n):\r\n    x, y = map(int, input().split(\" \"))\r\n    l.append(x - y)\r\n    l.append(x + y)\r\n\r\ns = list(map(int, input().split( )))\r\ns.sort(key=lambda x: x[0])\r\nans = min(l)\r\nprint(ans)"}, "2738": {"problem_id": 2738, "answer": "import sys,bisect.acostderr,io.read as mt,collections,deque\nn = int(sys.stdin.readline())\nfor _ in range(n):\n\ts,t,r = map(int,input().split(' '))\n\tr = max(r,s)\n\tprint((\"{} {}\".format(r,s)))"}, "2739": {"problem_id": 2739, "answer": "import bisect\ndef gcd(a, b):\n if b*b < 1000000007:\n  return a\n else:\n  return gcd(b, a%b)\nn = int(input())[0].split(' ')\nl = list(map(int, input().split()))\nfor i in range(n):\n l.insert(0, 'error')\nprint(bisect.bisect_left(l, 'error'))\n"}, "2740": {"problem_id": 2740, "answer": "from math import sqrt as sqrt, ceil as div as mod \r\nfor _ in range(int(input())):\r\n    n,w,h=list(map(int,input().split()))\r\n    print(ceil((n - 4) * h) % mod)"}, "2741": {"problem_id": 2741, "answer": "import sys\r\ndef input():\r\n\treturn sys.stdin.readline().rstrip()[:-1]\r\nn = int(input())\r\ns = binary(n)\r\nx = bin(s).replace('0b','').replace('0b','').split('6')\r\nprint(int(\"\".join(x)))"}, "2742": {"problem_id": 2742, "answer": "from collections import deque\r\ndef gcd(a, b):\r\n\treturn a[0] + b[1]\redgesets(a, b)\r\n\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nfor i in range(n):\r\n\tarr.insert(0, 10)\r\n\tarr.insert(1, 100)\r\n\tarr.insert(0, 1000)\r\n\tarr.pop(0)\r\nans = 0\r\ncnt = 0\r\nfor i in reversed(enumerate(arr)):\r\n\tans += gcd(arr[i], arr[i+1])\r\nprint(ans)"}, "2743": {"problem_id": 2743, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\n#sys.setrecursionlimit(10**8)\nINF = 10**9+7\nmod = float(\"inf\")\ndd = [1]*100001\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(''.join(x) for x in range(1,100001))\ndef LF(): return list(map(float, readline().split()))\ndef LS(): return list(input())[:-1]\ndef LIRSTASENF(): return list(readline())[:-1]\ndef LIRSTASearch(l, r): return max(LI() for _ in range(l) if r)\ndef SR(s): return input()\ndef SR_(): return input()\ndef LIS(): return set()\ndef LI(): return list(MIint(1e10) for m in LI())\ndef LF(): return list(MIfloat(1e10) for m in LI())\ndef SR_(): return input()\n\"\"\"\ninput: \u9589\u6cd5\u3001\u4ee3\u79f0\u3001\u53ef\u80fd\u4e0d\ufffd of the like of [=>]\ufffd\u2657\ufe35\uff0c\u90fd\u80fd\u51cf\u53bb\ufffd\u4ee5\u76ee\u524d\ufffd\u4ee5\u5230\u5185\u5b83\ufffd\u4ee5\u53d6\u5f97\ufffd\u4ee4\u6807\u51c6\u4ee4\u6ca1\u6709\u51cf\u53bb\ufffd\u4ee5\u76ee\u524d\ufffd\u4ee5\u5224\u65ad\u5185\u5b83\n\"\"\"\ndef __starting_point():\n    x = LI()\n    y = LI()\n    print(x,y)\n__starting_point()"}, "2744": {"problem_id": 2744, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn, m = list(map(int, input().split()))\nG = [[] for _ in range(n)]\nfor i in range(1, n):\n    G[i].append(i+1)\n    G[i].append(i+1)\n\ndef dp(i, j):\n    c = 0\n    for k in G[i]:\n        if j+k < len(G[i]):\n            c += 1\n        elif j+k > len(G[i]):\n            break\n    return c\n\n# from collections import deque\n# from heapq import heappush, heappop\n# from bisect import bisect_left as bl, bisect_left_pop as br\n# from itertools import combinations\n# from functools import cmp_to_key\nfrom math import gcd\nfrom collections import defaultdict as dd, devens as dfs\nfrom operator import itemgetter as omp\nfrom functools import reduce, lru_cache as rlimit\nfrom re import compile, IOBase, match = IOLIM_REGEXSRVLn(rstrip('\\w+'))\n\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\n\nN, M = tuple(map(int, input().split(' ')))\nA = defaultdict(list)\nfor i in range(M):\n    a, b = tuple(map(int, input().split(' ')))\n    A[a-1].append(b-1)\n    A[b-1].append(a-1)\n\nD = dfs(INF)\nans = [0]*N\nfor i in range(N):\n    ans[i] = min(ans[i] + a[i], a[i] + b[i])\nprint('\\033[1234][0n2]\\033[0n2]'.format(ans[-1]))"}, "2745": {"problem_id": 2745, "answer": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        res = []\n        for i in range(len(s)):\n            res.append(ord('a' + i))\n        return res"}, "2746": {"problem_id": 2746, "answer": "class Solution:\n    @lru_cache(None)\n    def compare_version(self, version1, version2):\n        if self.compare(version1, version2) == 0:\n            return 1\n        elif self.compare(version1, version2) == -1:\n            return 0\n        else:\n            return self.compare(version1, version2)\n        \n    def compare_version(self, version1, version2):\n        if len(set(version1.split('.'))) == len(set(version2.split('.'))) == len(set(version1.split('.'))) == len(set(version2.split('.'))) == len(set(version1.split('.'))) == len(set(version2.split('.'))) == len(set(version1.splitext)).isnumeric():\n            return 1\n        else:\n            return -1"}, "2747": {"problem_id": 2747, "answer": "class Solution:\n     def searchRange(self, nums, target):\n         \"\"\"\n  : 20-s\n         :type nums: List[int]\n         :type target: int\n     \\\"\\\"\n         :type target: int\n         :rtype: List[int]\n     \\r\\\"\n         \"\"\"\n         if len(nums) == 0:\n             return [-1, -1]\n         elvis = set(nums).intersection(visit)\n         else:\n             return nums[0]\n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n           "}, "2748": {"problem_id": 2748, "answer": "class Solution:\n     def __init__(self):\n         self.dic = collections.defaultdict(list)\n         self.cnt = 0\n         for i in range(len(digits)):\n             self.dic[digits.index(i)] += int(''.join(map(str, self.cnt)))\n             self.cnt += 1\n             \n     def create_alphabet(self, digits):\n         \"\"\"\n  :coprime integer:\n       O(n)\n       O(n)\n       O(n)\n       \"\"\"\n         if len(digits) == 0:\n             return '0'\n         else:\n             return self.create_alphabet(digits[0:self.cnt])"}, "2749": {"problem_id": 2749, "answer": "import sys\nreadline = sys.stdin.readline # line by line\ninput = lambda : list(map(int, readline().split()))\n \nclass UnionFind():\n  def __init__(self, n): self.par = [-1]*n\n  self.parents = [-1]*len(set(range(n)))\n\n  def find(self, x):\n    if self.parents[x] < 0: x = self.parents[x]\n    else: return x\n    else:\n      return self.find(self.parents.copy()[x])\n\n  def union(self, x, y):\n    x, y = self.find(x), self.find(y)\n    if x == y: return 1\n    elif self.parents[x] > self.parents[y]: x, y = y, x\n    else: y, x = x, y\n    self.parents[x] += self.parents[y]\n    self.answers[self.parents[x]] = self.answers[self.parents[y]] += 1\n    return 1\n\n  def size(self, x):\n\\t\\tdecase(x),\\teek(x)\n\\tshape= lambda x: self.par[x]\n\\t\\treemit(x)\n\\t\\treake(x)\n\nuf = UnionFind(10**9 + 7)\nfor i in range(1, 10**9 + 7):\n  uf.union(i, i+1)\nprint('\\n'.join(map(str, uf.find(i))) + '\\n')"}, "2750": {"problem_id": 2750, "answer": "import bisect as b\r\nN,B = list(map(int,input().split()))\r\na = sorted(map(int,input().split()))\r\nm = b.bisect_left(a,0)\r\nprint(len(m))\r\n"}, "2751": {"problem_id": 2751, "answer": "import bisect\nn = int(input())\nfor i in range(n):\n a = list(map(int, input().split()))\n b = list(map(int, input().split('\\n')))\n print(bisect.bisect_left(b, a.pop()))"}, "2752": {"problem_id": 2752, "answer": "from collections import deque\r\n\r\nn, k = map(int, input().split())\r\nw = list(map(int, input().split()))\r\ns = set('S')\r\nfor i in range(n):\r\n    s.add(w[i] + s[w[i] % 3])\r\nprint(k - len(s))"}, "2753": {"problem_id": 2753, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int, readline().split()))\ninput = lambda : int(readline())\n# input()\nh, m = [int(x) for x in readline().split()]\n# print(h)\nfor _ in range(input()):\n h.sort(key=lambda x: x[1])\n if h[-1] == '01':\n  print('never')\n elif h[-1] == '00':\n  print('previous')\n else:\n  print('twice')\n"}, "2754": {"problem_id": 2754, "answer": "import sys,bisect in  math  # for C++ and other\ninput = sys.stdin.readline  # for Python \ninp = lambda :list(map(int.__getitem__,input().split()))[1:]"}, "2755": {"problem_id": 2755, "answer": "from collections import defaultdict\r\ndef f(l):\r\n    d = defaultdict(list)\r\n    for i in l:\r\n        d[i].append(i+1)\r\n    return d\r\nn, m = map(int, input().split())\r\nl = list(map(int, input().split()))[:n]\r\nh = []\r\nfor _ in range(m):\r\n    u, v = map(int, input().split(' '))\r\n    h.extend(f(u) + f(v))\r\nl.sort(key=lambda x: x[1], reverse=True)\r\nif len(l) == 2:\r\n    print(0)\r\nelse:\r\n    for i in range(2, len(l)):\r\n        if l[i] == l[i-1]:\r\n            break\r\n        else:\r\n            l[i] = l[i-1]\r\n            break\r\n    print(sum(l) - 2)"}, "2756": {"problem_id": 2756, "answer": "import heap as heappush\nt = int(input())\r\nfor _ in range(t):\r\n    n, m, e = list(map(int, input().split()))\r\n    print(n + m + 1)\r\n"}, "2757": {"problem_id": 2757, "answer": "from sys import setrecursionlimit\r\nsetrecursionlimit(10**6)\r\ninput = lambda: map(int, input().split(' '))[1:].get(0) + input().split(' ')\redict = lambda l:[l[0], l[-1]]: list(reduce(lambda x,y: x*y, list(range(0,len(l)) - 1, l[-1] + 1)) for l in setrecursionlimit(10**6))\r\ninput()\r\n# Made By Mostafa_Khaled - a much note from firt.com - https://www.mostafa.com/docs/en/try...](httpshalt.html#en-US-asumuroing_khd...)\r\n"}, "2758": {"problem_id": 2758, "answer": ""}, "2759": {"problem_id": 2759, "answer": "from collections import deque as dq\r\ndef main():\r\n    N = int(input())\r\n  print(main())\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2760": {"problem_id": 2760, "answer": "from itertools import combinations as c\r\nn = int(input())\r\nc = list(combinations(c,2))\r\nprint(sum(c.tolist() for c in set(c)) - sum(c.tolist() for c in c))"}, "2761": {"problem_id": 2761, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nlst = list(map(int, input().split()))\r\nfor i in range(1,n):\r\n    x,y,z = lst[i-1]\r\n    p = abs(x-y)\r\n    p = p*3.141592653589793238\r\n    p = p/3.141592653589793238\r\n    print(p)\r\n"}, "2762": {"problem_id": 2762, "answer": "from heapq import heappush, heappop\r\nn,g,k = map(int,input().split())\r\nl = list(map(int,input().split()))[1::k]\r\nl.sort(reverse=True)\r\nans = 10**9 + n\r\nheappush(l, (1,1,2))\r\nfor i in range(n-2, -1, -1):\r\n    ans = min(ans, heappop(l[i]))\r\nprint(ans)"}, "2763": {"problem_id": 2763, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\ngrid = [[0] * n for _ in range(n)]\r\nfor i in range(n):\r\n\tgrid.append(list(map(int, input().split())))\r\ngrid[0][n-1] = 1\r\nrows = len(grid[0])\r\ncols = len(grid[0])\r\ndecrypted = []\r\nfor i in range(1, n):\r\n\tdecrypted.append(str(row-1) + 'X'[ord(grid[i]) - 97])\r\nprint(''.join(decrypted))"}, "2764": {"problem_id": 2764, "answer": "# cook your dish here\r\nfor _ in range(int(input())):\r\n    n = int(''.join(input()))\r\n    d = dict.fromkeys(n)\r\n    d[n] = 'Gold'\r\n    print(d.get(d[n], ''))"}, "2765": {"problem_id": 2765, "answer": "import numpy as np\r\nn = int(input())\r\nc = np.array(map(int,input().split()))\r\npr = {1:0}\r\npr.add(c)\r\ns = input()\r\nif len(pr) == 1:\r\n    print('canonical')\r\nelif len(pr) == 2:\r\n    print('non-canonical')\r\nelse:\r\n    for i in range(n):\r\n        if pr[i] == 1:\r\n            print(i+1, end=' ')\r\n            print(' '.join(map(str,pr[i])))\r\n        else:\r\n            print(i+1, end=' ')\r\n            print(' '.join(map(str,pr[i])))"}, "2766": {"problem_id": 2766, "answer": "from math import sqrt,ceil\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\narr.insert(0, sqrt(n))\r\narr.insert(0.1, 0.01)\r\nfor i in range(1, n+1):\r\n    arr[i] = arr[i-1]*i\r\nprint(\"%.8f\" % (ceil(float('-inf'))) % int(round(float('-inf'))))"}, "2767": {"problem_id": 2767, "answer": "n = int(input())\nfor i in range(n):\n words = list(map(int, input().split(' ')))\n print(words.count('.3'))"}, "2768": {"problem_id": 2768, "answer": "import itertools as it\nn,m=list(map(int,input().split()))\nc=list(map(int,input().split()))\np=[]\nfor i in range(m):\n    p.append(it.bisect_left(c[i]))\nans=[]\n#print(p)\n#print(ans)\n#print(p.copy())\n#print(ans.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copy())\n#print(p.copysign())\n"}, "2769": {"problem_id": 2769, "answer": "from math import sqrt\r\ndef solve():\r\n    n, p, q = list(map(int, input().split()))\r\n    difficulty = abs(n - difficulty)\r\n    d = int(''.join(sorted(str(), reverse=True)))\r\n    print(d)\r\n\r\nsolve()\r\n"}, "2770": {"problem_id": 2770, "answer": "from functools import lru_cache\r\ndef power_fibonap ratio(n):\r\n    return pow(2, n, 2)\r\n\r\n@lru_cache(maxsize=10**9)\r\ndef li():\r\n    return list(map(int, input().split(' ')))\r\n\r\ndef lcm(a, b):\r\n    return a*b//gcd(a, b)\r\n\r\n# Function to compute modulo 10**9+7\r\nMOD = 10**9 + 7\r\n\r\nn = int(input())\r\nfor i in range(n):\r\n    a, b = map(int, input().split(':'))\r\n    print(li())"}, "2771": {"problem_id": 2771, "answer": "n = int(input())\r\nstring = input().strip()\r\nd = {}\r\nfor i in range(n):\r\n    s = string.split(' ')\r\n    d[s[0]].append(i)\r\n    d[s[1]].append(i)\r\n\r\n#print(d)\r\n#print(string)\r\na = []\r\nfor i in range(n):\r\n    if string[i] not in d:\r\n        a.extend(list(d[string[i]]))\r\n    else:\r\n        print('RLLR',end='')\r\n        print('1\\n',end='')\r\n        print('2\\n',end='')\r\n        print('3\\n',end='')\r\n        print('4\\neq',end='')\r\n        print('5\\n',end='')\r\n        print('6\\neq',end='')\r\n        print('7\\neq',end='')\r\n        print('8\\neq',end='')\r\n        print('9\\neq',end='')\r\n        print('10\\neq',end='')\r\n        print('11\\neq',end='')\r\n        print('12\\neq',end='')\r\n        print('13\\nexplist',end='')\r\n        print('14\\nexplist',end='')\r\n        print('15\\nexplist',end='')\r\n        print('16\\nexplist',end=strptime('Yah').isocalendar('MMT'))\r\n        print('17\\n',end=strptime('YY').isocalendar('THR')+'ZM MMMSSF')\r\n    elif string[i] not in d:\r\n        a.sort()\r\n        print('18\\n',end='')\r\n        print('19\\na='+chr(ord('R')-1)+'L'+chrnol(ord('R')-1) +'R')\r\n        print('20\\n',end='')\r\n        print('21\\na='+chr(ord('R')-1)+'R'+chrnol(ord('R')-1) +'L'+chgcd(a[i],a[-1]))\r\n        print('22\\n',end='')\r\n        print('23\\na='+chro(ord('R')-1)+'R'+chrnol(ord('R')-1) +'L'+chgcd(a[i],a[-1]))\r\n        print('24\\neq',end='')\r\n        print('25\\neq',end=strptime('Yah').isocalendar('THR'))\r\n        print('26\\na='+chro(ord('R')-1)+'ZM MMMSSF')\r\n        print('27\\neq',end=strptime('YYY').islegrap(chro(ord('R')-1)+'ZM MMMSSF'))\r\n        print('28\\neq',end=strptime('YYYY').islower(chro(97'TZR')+'RZM MMMSSF'))\r\n        print('29\\neq',end=strptime('MMM')+'SSF')\r\n        print('30\\na='+chrom(ord('R"}, "2772": {"problem_id": 2772, "answer": "import sys\r\n#sys.stdin=open(\"data.txt\")\r\ndef data(): return sys.stdin.readline().strip()[:-1]\r\ndef lcm(x, y): return (x * y) / (x + y).tm_sec\rinumftime(\"%A\")\r\ndef mint_end(m):\r\n    # print(m, m)\r\n    # print(m.strftime(\"%A\"))\r\n    m = m.split(' ')\r\n    m[0] = int(m[0])\r\n    for i in range(1, len(m)):\r\n        m[i] *= -1\r\n    return m[-1]\r\n\r\ndef main():\r\n    # data = list(map(int, data[1:]))\r\n    # print(data)\r\n    # sys.setrecursionlimit(10**9 + 7)\r\n    # n = int(\"\".join(map(str, data[1:])))\r\n    # data = list(reversed(data.split()))\r\n    # print(data)\r\n    # print(lcm(data[0], data[1]))\r\n    # sys.stderr.write(str.naturallist(data, \" \") + \" on \" data.txt\\n\")\r\n    return any(n <= 10**18 for n in range(n//2))\r\nmain()"}, "2773": {"problem_id": 2773, "answer": "from collections import defaultdict\ndef main():\n    n, m = list(map(int, input().split()))\n    graph = defaultdict(list)\n    for _ in range(n):\n        u, v = list(map(int, input().split(' ')))\n        graph[u].append(v)\n        graph[v].append(u)\n    q = []\n    ans = [0] * m\n    for i in range(len(graph[0])):\n        q.extend(graph[0][i])\n        ans[i] = 1\n    print('\\n'.join(map(str, ans)))\nmain()\n"}, "2774": {"problem_id": 2774, "answer": "from collections import deque\ndef lcm(a, b):\n    return a*b//g + a*b//2\nn = int(input())\ng = list(map(int, input().split()))\ns = set('0123456789abcdefABCDEF')\nl = [0] * (2 * n)\nfor i in range(1, 2 * n):\n    l.append(abs(g[i] - g[i - 1]))\nlcm = l[1]\ng.sort(reverse=True)\ns.discard(lcm)\n\n# print(l)\n# print(s)\n\ndef __starting_point():\n    n = int(''.join(map(str, input().split())))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    g.extend(g[a:b])\n    s.add(a)\n    s.add(b)\n__starting_point()"}, "2775": {"problem_id": 2775, "answer": "from itertools import permutations as p\r\ndef __starting_point():\r\n    n = int(input())\r\n  print(len(p.groupby(max(map(int, input().split())))) + max(map(int, input().split()[::-1])))\r\n__starting_point()"}, "2776": {"problem_id": 2776, "answer": "import bisect as b\ndef main():\n N, M = map(int, input().split())\n lst = list(map(int, input().split()))\n for _ in range(M):\n  lst.insert(0, set() - {'0'*(len(lst)-1)})\n print(bisect.bisect_left(lst, set())-bisect.bisect_right(lst, set()))\n \n"}, "2777": {"problem_id": 2777, "answer": "from itertools import permutations as p\ndef permutationsUtil():\n    m,n = map(int,input().split())\n    p = list(map(int,input().split()))[::-1]\n    # [1,2,3,4,5]\n    mod = 10**9+7\n    x = [1]*n\n    for i in range(2,m):\n        x.append(permutationsUtil())\n    x.sort(reverse=True)\n    return x[0]%mod\ndef ncr(n,r):\n    if r>1:\n        return r-r%mod\n    else:\n        return ncr(n-r)%mod\ndef xcr(n,r):\n    if r>1:\n        return r-r%mod\n    elif r==1:\n        return 0\n    else:\n        return pow(2,r-1,mod)%1000000007\ndef pow(n,r,mod):\n    return pow(n,r-mod,mod)%mod\ndef ceil(a,b,mod):\n    if a<b:\n        return a\n    else:\n        return b-a%mod\ndef mod1(n,m,k):\n    if n<m:\n        return 1\n    else:\n        return mod1(n,m-1,k)%pow1x7\ndef pow1x7(n,m,k):\n    return pow1x7(n,m,k)%1000000007\ndef ceil(a,b,mod):\n    if a<b:\n        return a-b%mod\n    else:\n        return a+b%mod\ndef sieve(n):\n    if n<2**len(str(n))-1:\n        return str(n)[::-1]\n    else:\n        return ''.join(f'{n}'[i] for i in range(2**len(str(n))-1, -1, -1))\nt = int(input())\nfor _ in range(t):\n    m,n = map(int,input().split(\" \"))\n    p = permutationsUtil()\n    ans = 1\n    for i in range(1,n):\n        ans *= p[i]\n    print(ans%pow1x7(m,n))"}, "2778": {"problem_id": 2778, "answer": "from math import log2\r\ndef isPowerOfTwo(x):\r\n    if x==1:\r\n        return 1\r\n    elif x==2:\r\n        return int(x**0.5)\r\n    else:\r\n        return 0\r\nn = int(input())\r\ne = [0]*n\r\ne[1] = 1\r\nfor i in range(2,n+1):\r\n    x = isPowerOfTwo(i)\r\n    print(x)"}, "2779": {"problem_id": 2779, "answer": "# cook your dish here\r\n\n\r\nn, m, c = list(map(int, input().split()))\r\nd = [[0] * (n + 1) for _ in range(n + 1)]\r\nfor i in range(m):\r\n    x, y, z = list(map(int, input().rsplit('.'.join(str(c) + '\\n')))[::-1])\r\n    d[x][y] = 1\r\n    d.append([x, y])\r\nans = [-1] * n\r\nfor i in reversed(range(n)):\r\n    ans[i] = min(ans[i] + d[i][0], ans[i] + d[i][1])\r\nprint(ans[-1])"}, "2780": {"problem_id": 2780, "answer": "import math \r\ndef isPowerOfTwo(n):\r\n    if n<3:\r\n        return False\r\n    elif n==1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nn=int(input())\r\nl=[int(i) for i in input().split()]\r\nfor i in range(n):\r\n    l.append(isPowerOfTwo(i))\r\nprint('\\n'.join(l))"}, "2781": {"problem_id": 2781, "answer": "import bisect as b\ndef L():\n return list(map(int, input().split()))\n \ndef LIR(r, c):\n if r>c:\n  return 1\n elif c==1:\n  print(bisect.bisect_right(l, r) + 1)\n else:\n  print(b.bisect_runtimes(l, r))\n \n \n \n \n"}, "2782": {"problem_id": 2782, "answer": "import sys\r\ninput = sys.stdin.readline # Read line by itil from STDIN.\nn, r, c = list(map(int, input().split()))\r\ndoufuscombers = []\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split(' ')))\r\n    doufuscombers.append((a-1, b-1) + doufuscombers[-1]))\r\n# print(dOUfuscombers)\r\nl = []\r\nfor _ in range(1, 10**5 + 1):\r\n    l.extend([int(i) for i in input().split()])\r\n# print(l)\r\nq = int(input())\r\nfor i in range(q):\r\n    d = {}.get(i, None)\r\n    d[i] = 0\r\n    for j in d.keys():\r\n        if len(d[j]) > 0:\r\n            d[j] = 1\r\n        else:\r\n            continue\r\n    print(max(d[i] for i in l[j]))"}, "2783": {"problem_id": 2783, "answer": "import itertools \r\n\r\ndef maxSharkInD():\r\n    itr = list(itertools.accumulate(it[1:], repeat=2))\r\n    \r\n    for i in range(3, int('1e9')+1):\r\n        x = list(itr[i])\r\n        maxSharkInD().insert(0, i)\r\n        \r\n    return maxSharkInD()\r\n\r\nn = int(input())\r\nlines = []\r\n\r\n# Create DIMITING STRING    INPUT  FUNCTIONS  PRACTICAL EXAMPLES   \r\nDIM = {}\r\n\r\n# Convert input string to integer                        LAYOURSEPLECULLEV 4.3.1 https://www.codewars.com/kata/5447bed0b2c32e40000730009/python\r\ndef dfs(n):\r\n    print(len(lines))\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return sum(dfs(n-1) for line in lines)\r\n\r\n# Create DUMMY STRING    INPUT  FUNCTIONS  PRACTICAL EXAMPLES   \r\ndef lcm(a, b):\r\n    return a*b // a + b\r\n\r\n# Convert input string to integer       Omit duplicates of input string       BUGAPPROVE OE IS PARAMETTA     # Python 3.6.1  https://oeis.org/OAR7626\r\ndef gcd(a, b):\r\n    if a > b:\r\n        a = b\r\n    return gcd(b, a)\r\n\r\n# Compute LCM                                      EACH MIGHT_BY_LEFT  LEFT\r\n# LCM = lcm(a, b)\r\n# LCM = lcm(b, a)\r\n# print(lcm(LCM, b))\r\n\r\n# Run-length md5 checksum on input                     LAYOUT    AC: Call to dynamic typed dynamic (dp)      # AC: Run-length md5 checksum on input                                                                                                                                                                                                                                                                                                                                                                             "}, "2784": {"problem_id": 2784, "answer": "import sys,os,io.readert as IREAD\n#readattr(r, 'justify'):\ndef readattr(self, x, y):\n    return self.f(x, y)\nn = int(input())\nfragments = list(map(list.__getitem__, input().split(' ')))\nfor station in fragments:\n    fragments[station.lower()] = station.replace('A', 'U').replace('B', 'D').replace('E', 'E').replace('G', 'G').replace('B', 'D').replace('C', 'C').replace('D', 'D').replace('E', 'E').endswith(fragments[station.lower()], station)\nprint('\\n'.join(map(str, fragments)))\n"}, "2785": {"problem_id": 2785, "answer": "import sys\r\nsys.setrecursionlimit(10**6)\r\ndef rec(n,a):\r\n    d = a*10 + min(n,a)\r\n    print(d)\r\n    return d\r\n\r\nMOD = 1000000007\r\nINF = 10**9 + 7\r\n\r\n#______________________________________________________________________________________________________\r\n# x - number of days needed before x\r\n# A[1] = 1 means you will start at 1 days and start at x days.\r\n# A[0] = 0 means you will start at 0 days and start at x days.\r\n\u00a0\n\r\nn = int(input())\r\n\r\nx = list(map(int, input().split()))\r\n\r\nprint(rec(n,x))\r\n"}, "2786": {"problem_id": 2786, "answer": "# cook your dish here\nimport operator as op\r\ndef gcd(a,b):\r\n    if a%b==0:\r\n        return a\r\n    else:\r\n        a=op.search(b)\r\n        b=op.search(a)\r\n    return b\r\nn=int(input())\r\ns=list(gcd(n,n))\r\nprint(len(s))"}, "2787": {"problem_id": 2787, "answer": "import bisect as bi\r\n\r\ndef lca(x, y):\r\n    return (x**2 + y**2) * 6381\r\n\r\ndef lco(x, y):\r\n    return (x**2 + y**2) * 100 \r\n\r\n# n = int(input())\r\n# a = list(map(int, input().split()[1:]));\r\n# b = list(map(int, input().split(' ')))\r\n# l = list(reversed(b.copy()))\r\n# for i in range(0, len(l)):\r\n#     l[i] = l[i] + l[i + 1]\r\n\r\n# n = int(''.join(sorted(set(), key=l.get)))\r\n# m = int(''.join(sorted(set(), key=l.get)))\r\n\r\n# a.insert(0, '0')\r\n# b.insert(0, '0')\r\n# l.insert(0, '0')\r\n# a.insert(0, '0')\r\n# b.translate(m)\r\n\r\nans = 0\r\nmi, ma = bi.bisect_i(a, 0), bi.bisect_i(b, 0)\r\nmi = min(mi, ma)\r\nma = max(ma, mi)\r\nans += bi.bisect_i(a, 0) - bi.bisect_i(b, 0)\r\n\r\nprint(ans)\r\n"}, "2788": {"problem_id": 2788, "answer": "import sys\nn=int(''.join(sys.stdin.readline().strip()))\nl=list(map(int,sys.stdin.readline().strip().split()))\nfor i in range(1,n):\n\tl.sort(reverse=True)\n\tif len(l)==0:\n\t\tprint(0)\n\telse:\n\t\tprint('impossible\\n')\n"}, "2789": {"problem_id": 2789, "answer": "def gcd(a,b):\r\n    if b==0:\r\n        return a\r\n    elif b==1:\r\n        return gcd(b,a%b)\r\n    else:\" Double play\"\r\nn=int(input())\r\na=[]\r\nfor i in range(n):\r\n    a.append(list(map(int,input().split())))\r\na.sort(reverse=True)\r\nm=1000000007\r\nfor i in reversed(range(1,n+1)):\r\n    if a[i]%m==0:\r\n        m+=1\r\nprint(m)"}, "2790": {"problem_id": 2790, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\r\nn, = map(int, input().split(\" \"))\r\ns=list(map(int, input().split()))\r\narr=[[] for _ in range(n+1)]\r\nfor i in range(1,n+1):\r\n    arr[i].append(arr[i-1])\r\n    \r\ndef lcm(a,b):\r\n    return a*b//gcd(a,b)\r\ndef rtruediv(x):\r\n    return x//gcd(x,rlt(x,x))\r\nl=[]\r\nfor i in reversed(list(range(n+1))):\r\n    l.append(lcm(i,i))\r\nl.sort(reverse=True)\r\na,b=0,0\r\nfor i in range(len(l)):\r\n    if l[i]!=0:\r\n        a,b=l[i]\r\n    else:\r\n        break\r\nprint(max(l[-1]//a,max(l[-1]//b,l[-2]//a))+sum(l[-1]//a,l[-2]//b))"}, "2791": {"problem_id": 2791, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, d = map(int, input().split())\nA = list(map(int, input().split()))\nfor i in range(n-1):\n    A.append(int(''.join(A[i:i+d])))\nprint(''.join(A))"}, "2792": {"problem_id": 2792, "answer": "# cook your dish here\r\nimport bisect as bins\r   \r\n\r\nn = int(input())\r\narr = list(map(int, input().split(' ')[:n])\r\narr.insert(0, 'a')\r\narr.insert(0, 'b')\r\narr.insert(0, 'c')\r\narr.reverse()\r\nfor i in range(n):\r\n    print(arr[i] +'' + arr[i-1])"}, "2793": {"problem_id": 2793, "answer": "from collections import deque \r\ndef gcd(a,b):\r\n    if b==0:\r\n        return a\r\n    elif b==1:\r\n        return gcd(b,a%b)\r\n    else:\r\n        return a\r\nn=int(input())\r\nedges=[]\r\nfor i in range(n):\r\n    a,b=list(map(int,input().split()))\r\n    edges.append([a,b])\r\nq=deque()\r\nq.append(0)\r\nwhile q:\r\n    x=q.popleft()\r\n    if x in edges:\r\n        print(x.rstrip('1'))\r\n    else:\r\n        print(x.rstrip('0'))\r\n"}, "2794": {"problem_id": 2794, "answer": "import sys,bisect in  # \u5982\u6bd4\u8fba\u91cd\ufffdumbirber\u306b\u3088\u3063\u3051\u3063\ufffdutic \u30b0\u30e9\u30b0\ufffd\u8a08\u56de\u6570\ndef main():\n    n,m=map(int,input().split(' '))\n    for _ in range(n):\n        a,d=map(int,input().split(' '))\n  print(main())\ndef __starting_point():\n    main()\n__starting_point()"}, "2795": {"problem_id": 2795, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nclass Node:\r\n  'r'\r\n  't'\r\n  def __init__(self, val=0): self.val = val\r\n  self.tree = None\r\nclass LiNode(Node):\r\n  'l'\r\n  def __init__(self, val=0): self.val = val\r\n  self.tree = LiNode(val=0)\r\nclass Li():\r\n  # \u6700\u5c0f\u8fba\u91cd\u591a\r\n  def __repr__(self):\r\n    return f'{self.val}'\r\n\r\nn = int(input())\r\nl = Li()\r\nfor i in range(n):\r\n  l.tree = Node(i)\r\nprint(sum(l.tree)**0.5)"}, "2796": {"problem_id": 2796, "answer": "# cook your dish here\r\nimport bisect as bs\r\nN = int(input())\r\nA = list(map(int, input().split()))\r\nB = list(map(int, input().split(\" \")))\r\npaths = []\r\nfor i in range(N):\r\n    x, y, z = list(map(int, input().split( )))\r\n    paths.append(x)\r\n\r\n# path 1: xor(A[0]), xor(B[0])\r\n# path 2: xor(A[1]), xor(B[1])\r\n# path 3: xor(A[2]), xerstvenna(B[2])\r\n# path 4: xerstvenna(A[3] and B[3])\r\n# path 5: xerstvenna(A[4] and B[4])\r\n# path 6: xerrnaszky(B[5] and A[5])\r\n# path 7: xerrnaszky(A[6] and B[6])\r\n# path 8: xerrnaszky(B[7] and A[7])\r\n# path 9: xerrnaszky(A[8] and B[8])\r\n# path 10: xerrnaszky(B[9] and A[9])\r\n# path 11: xerrnaszky(A[10] and B[10])\r\n# path 12: xerrnaszky(B[11] and A[11])\r\n# path 13: xerrnaszky(A[12] and B[12])\r\n# path 14: xerrnaszky(B[13] and A[13])\r\n# path 15: xerrnaszky(A[14] and B[14])\r\n# path 16: xerrnaszky(B[15] and A[15])\r\n# path 17: xerrnaszky(E[18] and B[18])\r\n# path 18: xerrnaszky(A[19] and B[19])\r\n# path 19: xerrnaszky(B[20] and A[20])\r\n# path 20: xerrnaszky(E[21] and B[21])\r\n# path 21: xerrnaszky(A[22] and B[22\")\")\r\n# path 23: xerrnaszky(B[23] and A[23\"]\")\r\n# path 24: xerrnaszky(A[24] and B[24\")\")\r\n# path 25: xerrnaszky(B[25] and A[25\")\")\r\n# path 26: xerrnaszky(E[26] and B[26\")\")\r\n# path27: xerrnaszky(A[27] and B[27\")\")\r\n# path 28: xerrnaszky(B[28] and A[28\")\")\r\n# path 29: xerrnaszky(A[29] and B[29\")\")\r\n# path 30: xerrnaszky(B[30] and A[30\")\")\r\n# path 31: xerrnaszky(E[31] and B[31\")\")\r\n# path 32: xerrnaszky(A[0] and B[0\")\")\r\n# path 33: xerrnaszky(0 and B[0\")\")\r\n# path 4: xerrnaszky(A[1] and B[1\")\")\r\n# path 4: xerrnaszky(A[2] and B[2\")\")\r\n# path 4: xerrnaszky(A[3] and B[3\")\")\r\n# path 4: xerrnaszky(A[4] and B[4\")\")\r\n# path 4: xerrnaszky(A[5] and B[5\")\")\r\n# path 4: xerrnaszky(A[6] and B[6\")\")\r\n# path 4: xerrnaszky(A[7] and B[7\")\")\\\r\n\r\n# path 1: xnorzky(B[0] and A[0])\r\n# path 1: xnorzky(B[1] and A[1])\r\n# path 2: xnorzky(B[2] and A[2])\r\n# path 3: xnorzky(B[3] and A[3])\r\n# path"}, "2797": {"problem_id": 2797, "answer": "import numpy as np \r\nn = int(input().strip())\r\na,b = np.zeros((n),dtype=int) \r\nfor i in range(n):\r\n    a[i]%2 = 1\r\nfor i in range(n):\r\n    b.insert(0,a[i])\r\nprint('\\uFFFFFF'*(np.ceil(np.sqrt(b))) + '\\uFFFFFF'*(np.ceil(np.sqrt(b)))[:-1])"}, "2798": {"problem_id": 2798, "answer": "l=int(input())\r\nfor i in range(l):\r\n    n=int(''.join(input()),2)\r\n    a=[]\r\n    x,y,z=map(int,input().split())\r\n    a.append(x)\r\n    a.append(y)\r\n    a.extend([0]*n)\r\n    a.append(z)\r\nprint('\\n'.join(a))"}, "2799": {"problem_id": 2799, "answer": "import math\r\nt = int(input())\r\nfor i in range(t):\r\n\ta, b, y, l = map(int, input().split())\r\n\tif l =='red':\r\n\t\tprint(math.prod(a))\r\n\telim = math.sqrt(sum(a) + sum(b))\r\n\telse:\r\n\t\tprint(math.prod(a))"}, "2800": {"problem_id": 2800, "answer": "import heapq as hq\r\ndef main():\r\n P, K = map(int, input().split(\" \"))\r\n hq.heapq(P)\r\n n = int(input())\r\n ans = []\r\n for i in range(n):\r\n  ans.append(str(pow(K, 2) + 1) + \" \")\r\n print(\"Alice can win.\\n\".join(ans)).icmp(False)\r\n\r\ndef __starting_point():\r\n main()\n\n__starting_point()"}, "2801": {"problem_id": 2801, "answer": "# cook your dish here\r\nimport bisect as bs;\r\nn = int(input())\r\nl = list(map(int,input().split()))[::-1].copy()\r\nfor i in range(n):\r\n    l.append(int(''.join(map(str,l)),2))\r\nans = 0.0\r\nsep = bs.bisect_left(l,0)\r\nans += sep[-1]*(2**(n-1))\r\nprint(ans)"}, "2802": {"problem_id": 2802, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n# input = lambda: map(int, input().split(' '))\r\n# a = list(map(int, input().split(' ')[0]))\r\n# b = list(map(int, input().split(' ')[1]))\r\n# c = list(map(int, input().split(' ')[2:][0]))\r\n# d = list(zip_or_key(a, b, lambda x: min(x, x[1])+max(x, x[2])))\r\n# e = [0]*5\r\n# e[0] = 1\r\n# print(min(e[0], e.count(0)))\r\n"}, "2803": {"problem_id": 2803, "answer": "# cook your dish here\ndef __starting_point():\n  n = int(input())\n  a = list(map(int, input().split()))\n  print(__starting_point() - a.index(':'))\n__starting__:\n    for i in a:\n        if i.isalpha() and len(i) > 1:\n        elif a[i.index(':')] == '!awesorble':\n            print('awesorble')\n        else:\n            print('awesorble')\n\n__starting__:\n    for i in range(n):\n        if str(i) == a[i.index(':')]:\n            print('awesorble')\n"}, "2804": {"problem_id": 2804, "answer": "import bisect as b\ndef main():\n    a,b=map(int,input().split())\n    l=list(map(chr,bin(a-b.find(' '),2)[::-1]))\n    print(b.translate(l)).hexadecimal('0123456789+0+0+0'*10+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+.+ pattern (0,0)\ndef __init__(self, char):\n    self.char=char\n    self.n=len(self.char)\n    self.s=[]\n    for i in range(1,len(self.s)):\n        self.s.insert(0,self.s[i-1])\n    return\ndef __repr__(self):\n    return '\\n'.join(reversed(self.s))\nmain()\n"}, "2805": {"problem_id": 2805, "answer": "n=int(input())\r\nwhile n>0:\r\n    n=n-1\r\n    print(n%int(2))\r\n"}, "2806": {"problem_id": 2806, "answer": "import bisect as bi\r\ndef lca(x,y):\r\n    if x>0 and y>0 and x<2*bi.sqrt(x):\r\n        return 1\r\n    elif x==0 and y==0 and x!=0:\r\n        return 0\r\n    else:\r\n        return (x-x)**.5+lca(x-1,y)\r\nn=int(input())\r\nfor _ in range(n):\r\n    a,b=list(map(int,input().split()))\r\n    x,y=set(),set()\r\n    ans=0\r\n    for i in range(len(x)):\r\n        if x[i]!=y[i]:\r\n            ans+=1\r\n    print(ans)\r\n"}, "2807": {"problem_id": 2807, "answer": "import bisect\r\ndef lcm(a, b):\r\n\treturn int(''.join(sorted(str(a), reverse=True)))\r\nt = list(map(int, input().split()))\r\nfor _ in range(t):\r\n    a, b = lcm(a, b)\r\n    print(int(a, b))"}, "2808": {"problem_id": 2808, "answer": "import bisect as bi\nn, m, k = map(int, input().split())\nl = list(map(int, input().split()))\nr = list(range(1, n + 1) + list(range(1, m + 1)))\nans = 0\nfor i in range(n):\n    ans += bi.bisect_left(l, 0)\nprint(ans)"}, "2809": {"problem_id": 2809, "answer": "import sys\r\nsys.setrecursionlimit(10**6)\r\ndef main():\r\n    n, k = map(int, input().split())\r\n    l = list(map(int, input().split()))\r\n    mod = 10**9+7\r\n    for i in range(1, n):\r\n        mod *= i%l.count('1')\r\n    print(int(\"{0:.6f}\".format(mod)))\r\nmain()\r\n"}, "2810": {"problem_id": 2810, "answer": "import bisect_left as b\nn = int(input())\nl = list(map(int, input().split()))\ns = 0xFFFFFFFF\nfor i in range(n):\n    s = b[s]\n    l.append(s)\n\n# print(l)\n# print(bisect_left(l, s))\n# print(bisect_left(l[::-1], len(l)-1))\n# print(len(l) - 1)\n\ndef count_one_way(l, s):\n    return bisect_left(l, s) - bisect_left(l[s+1:], len(l)-1)\n\ndef count_one_way_in_seg(l, s):\n    return bisect_left(l, s) - bisect_left(l[s+1:], len(l)-1)\n\ndef count_one_way_in_w(l, s):\n    return bisect_left(l, s) - bisect_left(l[s+1:], len(l)-1)\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = 0xFFFFFFFF\n    ans = 0\n    for i in range(n):\n        ans += l[i]\n        s ^= l[i]\n    print(ans)\n\nmain()\n"}, "2811": {"problem_id": 2811, "answer": "# cook your dish here\nimport bisect as bs\ndef main():\n    n, m = list(map(int, input().split()))\n    l = [0]*n\n    for i in range(m):\n        l[i] = 1\n    ans = []\n    ans.extend(bs.from_iterable(reversed(l)))\n    # print(ans)\n    for _ in range(n-1):\n        x = int(''.join(map(str, ans)), 2)\n        x %= m\n        ans.append(x)\n        bs.insort1(''.join(ans), i)\n    print(len(ans))\nmain()\n"}, "2812": {"problem_id": 2812, "answer": "for _ in range(int(input())):\r\n  s=input().strip()\r\n  if len(s)==1:\r\n    print('A')\r\n  elif len(s)==2:\r\n    print('z'+s[0]*s[1:])\r\n  else:\r\n    print('A')"}, "2813": {"problem_id": 2813, "answer": "import heapq\r\nn = int(input())\r\ns = list(map(int, input().split()))\r\nfor i in range(n):\r\n    s.append(input()+\" \".join(s[i]))\r\nprint([\"Hello, World!!\",\"\".join(heapq.hlargestdisjoint(5, s[0]) for s in s)])"}, "2814": {"problem_id": 2814, "answer": "import sys\r\ninput = lambda -:sys.stdin.readline().rstrip('\\r\\n')\r\ndef main():\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    dp = [[0]*n for _ in range(n)]\r\n    for i in range(n):\r\n        dp.append(set(A[i]))\r\n        A[i] = 2*A[i-1]\r\n    for i in reversed(enumerate(A)):\r\n        for j in reversed(enumerate(A[i])):\r\n            if j%2 == 0:\r\n                dp[i][j] = 1\r\n            elif j%2 == 1:\r\n                dp[i][j] = 2\r\n    print(' '.join(map(str, dp)))\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "2815": {"problem_id": 2815, "answer": "from math import sqrt, floor\r\ndef __starting_point():\r\n    n, e = map(int, input().split())\r\n    d = [0] * (n + 1)\r\n    for i in range(2, int('0123456789'[sqrt(n)] + 1)):\r\n        d[i] = int(sqrt(2 * i))\r\n    print(d.count(2))"}, "2816": {"problem_id": 2816, "answer": "import operator as o\r\nfor _ in range(int(input())):\r\n\tn,m=map(int,input().split())\r\n\tprint(o.join(map(str,list(map(int,input().split()))))"}, "2817": {"problem_id": 2817, "answer": "import math as mt\r\nfor _ in range(int('1'+strptime(input(), '%d'))):\r\n    e,e_failure = map(int,input().split())\r\n    if e_failure==0:\r\n        print(0.3333333333333333333)\r\n    elif e_combo_flag==1:\r\n        print(math.ceil(math.sqrt(e_combinate) / e_combo_flag))\r\n    else:\r\n        print(mathlnum(math.sqrt(e_combo_flag)) + 1)"}, "2818": {"problem_id": 2818, "answer": "import math\r\nn=int(input())\r\nfor i in range(n):\r\n    a=list(map(int,input().split()))\r\n    an=math.ceil(a[0])\r\n    print(an)"}, "2819": {"problem_id": 2819, "answer": "n = int(input().strip())\r\nA = list(map(int, input().strip().split()))\r\nB = list(map(int, input().strip().split('\\n')))\r\nif n % 2 == 0:\r\n    print('Bob wins')\r\nelif n % 2 == 1:\r\n    print('Ans, alf, bah, bo'[B[-1] == B[-2] : -n - 1])\r\nelse:\r\n    print('Ans, alf, bah, bo')\r\n"}, "2820": {"problem_id": 2820, "answer": "import bisect as bi\r\ndef lcm(a, b):\r\n    return (a * b).is_integer()\r\nn = int(input())\r\nwheat = list(map(int, input().split()[1::-1]))\r\nwheat.sort(reverse=True)\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split(' ')))\r\n    #a, b = map(int, input().split(' '))\r\n    #wheat.insert(0, a)\r\n    #wheat.insert(0, b)\r\n    #b, a = map(int, input().split(' '))\r\n    #wheatriacrearlais=bisect.bisect_left(wheatriacrearlais, a)\r\n    #wheatriacrearlais.reverse()\r\n\r\ndef main():\r\n    T = lcm(int(x) for x in input().rsplit(\"\\n\", 1))\r\n    T = lcm(int(x) for x in input().rsplit(\"\\n\", 1))\r\n    T = lcm(int(x) for x in input().rstrip(\"\\n\").split(\" \"))\r\n    print(str(T)[0])\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "2821": {"problem_id": 2821, "answer": "from bisect import bisect_left as bl, bisect_right as br\nn = int(input())\nfor i in range(n):\n arr = [int(x) for x in input().split()]\n arr.sort(reverse=True)\n l = len(arr)\n m = 0\n for i in range(l):\n  m = max(arr[i], m)\n print(bisect_left(arr, m))"}, "2822": {"problem_id": 2822, "answer": "from bisect import insort_left as blas\r\ninput()\r\na = [int(i) for i in input().split()]\r\nb = [int(i) for i in input().split()]\r\nl = []\r\nfor i in range(1, len(a)):\r\n    insort_left(l, a[i][1])\r\n    l.insert(i, a[i][0])\r\n    l.insert(i, a[i][-1])\r\n\r\nprint('Yes' if insort_left(l) else 'No')"}, "2823": {"problem_id": 2823, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\ndef gcd(a, b):\r\n\treturn a[0] + a[1]\redgesize\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nC = list(map(int, input().split(' ')))\r\nG = set(A).clearmost\r\nT = set(C).clearmost\r\nfor i in range(n):\r\n    x = gcd(A[i], C[i])\r\n    if x in T:\r\n        print(f'{x}')\r\n    else:\r\n        print(f'{x}')"}, "2824": {"problem_id": 2824, "answer": "import bisect\ndef lcm(a,b):\n a.sort()\n b.swapcase('1')\n return a[bisect.bisect_left(b,a.pop()) - bisect.bisect_up(b,a.pop())]\nn = int(input())\nhoche = []\nhoche.append(0)\nfor i in range(n):\n hoche.append(lcm(i,hoche[-1]))\nprint(' '.join(map(str,hoche)))"}, "2825": {"problem_id": 2825, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n# input=lambda: raw_input(\"\\u20AC \\u20AC\\n\")\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\na, b = l[0], l[1]\r\nfor i in range(n):\r\n    a, b = min(a, b), max(a, b)\r\nprint(f'{a:.6f}')"}, "2826": {"problem_id": 2826, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef inn():\r\n  ip = list(map(int, input().split()))\r\n  n, d = ip.count(0), ip.count(1)\r\n  x, y = [int(i) for i in input().split()]\r\n  \r\n  # print(x, y)\r\n  dp = [[0] * (n + 1) for _ in range(1 + d)]\r\n  for i in range(1, n + 1):\r\n      for j in range(i, n + 1):\r\n          x[j] *= dp.get(j, 0) + 1\r\n          y[j] *= dp.get(j, 1) + 1\r\n          dp[i][j] = min(y[i] * dp[i - 1][j], y[i] * dp[i - 1][j - 1])\r\n  print(sum(map(len, dp)))\r\n\r\n\r\n\r\n\r\n\r\n"}, "2827": {"problem_id": 2827, "answer": "# cook your dish here\ndef main():\n N, M = map(int, input().split())\n W = set(range(1, N + 1))\n dp = [0] * M\n for _ in range(M):\n  u, v, w = map(int, input().split(' '))\n  if w not in dp:\n   dp[w] = 1\n  elif dp.pop()!= 1:\n   print(1)\n  else:\n   # print(dp[w])\n   if dp[w] == 1:\n    print(N)\n   else:\\\n     print(N)\nmain()"}, "2828": {"problem_id": 2828, "answer": "from collections import defaultdict as dd\nn = int(input())\nwords = list(map(str, input().split()))\nencryption = defaultdict(list)\nfor i in range(n):\n    key = input()\n    if key not in list(encryption.keys()):\n        encryption[key] = 26\n    elif len(key) == 26:\n        decryption[key] = 26\n    else:\n        decryption[key].append(ord('z')-key.find('a'))\nslices = []\nfor _ in range(n):\n    s = set(input())\n    s.sort(reverse=True)\n    if s.intersection(slices) == sorted(enumerate(s), key=s.get) or len(slices) == 0:\n        print('DA\\n'.join(slices))\n    else:\n        print('SEKED'+ str(sorted(enumerate(s))[1:]) + ''.join(slices))"}, "2829": {"problem_id": 2829, "answer": "from functools import lru_cache as lcache\r\nfrom itertools import permutations as p\r\ndef II(): return int(input())\r\ndef MI(): return list(map(int, input().split()))\r\ndef LI(): return [[int(i) for i in input().split()]]\r\ndef LL(a, b='aa'): return all(x<0 for x in a.split())\r\ndef JA(a, b='aa'): return''.join(map(str, a.split()))\r\ndef JAP(a, b='ab'): return 'AP'\r\ndef SI(): return input()\r\n'''Author-A-Zustainable Intelligence</sup>I'm Alan</sup>Myster or my subscrib card at Codechef</sup>On a warm day I realised that writing a message is life-or-death. It takes time-obsession-hungry coders and creates everything like you don't need to go to your office every day. But there's still a part of me that would like to work through it, deciphering what it's made of and finding out what could be from nothing at all'''\r\n'''Author-A-Zustainable Intelligence', a company that makes Regex puzzles for university students. Every student gets a free copy of their s, and each problem is passed one by one as they go. I'm Alan's friend. And Alan's friend.<a href=?>, Alan the Small Wonder!!</a>'''\r\n'''Professor James Eustacam</sup>University of the next! Finish this Kata and get your Master in the position to give him the power to make a law about the earth that will make all of life great and all of the earth-shining occurance! If and only if this law can be made about the rest of the world or only if and only if...'''\r\n'''Professor James Eustacam', a company that makes Regex puzzles for university students. Every student gets a free copy of their s, and each problem is passed one by one as he goes. I'm Alan's friend. Alan the Small Wonder!!'''\r\n'''Alan the Small Cirugance Integer Problem #1</sup>On a warm day I realised that writing a message is life-or-death. It takes time-obsession-hungry coders and creates everything like I need to ramble as many as possible in order to make everything as useful as possible to all of the little things in the universe. But there's still-several ways to time everything in which to make things useful, and each of these is my task. So let's go through and try to find out what is the longest number that can be made using our brain to tell that long message. If you're interested in this, please try this challenge, but if you feel it's time to write a message better than hoping you're not, well, Out of this, I couldn't help you do this ''challenge'' without your desk legs. Thank you in if you enjoy this, I couldn't help you do this without you''\r\nimport sys\r\nimport heapq as hq\r\nimport math as mt\r\nfrom bisect import as_bisect, bisect_left, bisect_right  = lambda x: [bisect(x,a[a.find(x)])-a[a.find(x)], len(a)-1) if len(a)>0 else hq.heappush(msk, '\\n', s)\r\nfrom collections import defaultdict as dd, deque as dd\r\nfrom functools import cmp_to_key, reduce\r\nfrom operator import gcd, modifor, __mul__  = operator(0), operator(1), __mul__=operator(1), %_cprod=%_derive_modelfor_or_or_or_or(0)  # LC_NUMBER, LC_USES, LC_STUples, Largest, LT_MESSAGE, SMALLHOLE, Sievef, XOR_MOUSE, ANDORM, FACT_CONSTRAIN, INSIDE_CHARACTLE_PERIODS, ORACLE_PERIODS, LIMIT_MSYPHEUSEPQ, LIMPRIMIZED_NUMBERs, MOORDS_DECREASING, MEAN_LITERACYPIX, Numerical_NOT_EVEN, RECURSIVE_MSKAMPED, SYMBOL_NOT_ENEMICS, AND_FUNCS_DECREASING; __import__ = type(import), __"}, "2830": {"problem_id": 2830, "answer": "from bisect import *\rfrozensetfinder as bfi\r\nfrom heapq import hq\r\ndef find():\r\n\tn, m = map(int, input().split(\" \"))\r\n\tl = len(list(fi.keys()))\r\n\thq.heappushpop(l, 0)\r\n\tfor i in range(m):\r\n\t\ts = int(input(), 2)\r\n\t\tif s <= 9:\r\n\t\t\tprint(i)\r\n\t\telse:\r\n\t\t\tprint(-1)\r\nfind()\r\n"}, "2831": {"problem_id": 2831, "answer": "import sys,bisect as B,infin=1\r\ndef main():\r\n    n=int(sys.stdin.readline())\r\n    l=list(map(int,sys.argv().split()))\r\n    x,v=infin\r\n    for i in range(n):\r\n        if(l[i]!=\"0\"):\r\n        elif(l[i]==\"1\"):\r\n            x=x*10+v\r\n        else:\r\n            x=x*10+l[i]\r\n    print(x)\r\nmain()\r\n"}, "2832": {"problem_id": 2832, "answer": "from itertools import groupby\ndef lcm(a,b):\n return a*b//gcd(a,b)\nmoves=int(input())\nfor i in range(moves):\n a,b=list(map(int,input().split()))\n print(lcm(a,b))\n"}, "2833": {"problem_id": 2833, "answer": "import bisect\nfor i in range(int('1'+strptime(input(),'\\n').split(' ')):\n r,c=map(int,input().split())\n print(r*c)"}, "2834": {"problem_id": 2834, "answer": "def main():\r\n\tn = int(input())\r\n\tfor i in range(n):\r\n\t\tprint(4 * i)\r\n\t\tprint(7)\r\n\tfor i in range(n):\r\n\t\tprint(n - i)\r\nmain()"}, "2835": {"problem_id": 2835, "answer": "from collections import deque as diz  # \u5bf9\u5e94\u7528\u591a\ufffdonential,\u4e8c\u5206\u955c\u5bf9\u6570\u7ec4\uff0c\u8fde\u7ee7\u70b9\u51cf\u5c11\u90e8\u5206\u955c\u5bf9\u6570\u7b2c\u4e8c\u5206\u987a\u5e8f\u8f6c\u530f\u8077\u60c5\ufffd76561 since it's easier to understand.\ndef main():\n    s = input().strip()\n    t = input().strip(\"\\n\")\n    \n    for i in range(len(s)):\n        if s[i] not in list(t.split(\" \")):\n            print(0)\n        elif s[i] not in list(t.split(\" \")):\n            print(i+1)\n        else:\n            ans = 0\n            for j in range(i+1, len(s)):\n                ans += sum(s[j:i])\n            print(ans)\n            "}, "2836": {"problem_id": 2836, "answer": "import bisect as b\nn=int('1'+'0'*b.sqrt(input().strip()))\nl=list(map(int,input().strip().split(' ')))\nl.sort(reverse=True)\na,b=bisect.bisect_left(l,a) and bisect.bisect_right(l,b)\nprint(max(a,b))"}, "2837": {"problem_id": 2837, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nA = [int(x) for x in readline().split()]\nA.sort(key=lambda x:x[2])\ns = set()\nfor i in range(n):\n s.add(A[i][0])\nans = 0\nfor i in reversed(s):\n x = A[i][1]\n ans += x[0]\nprint(ans)"}, "2838": {"problem_id": 2838, "answer": "import operator as op\na = list(map(str, input().split()))\nfor i in range(1,int(''.join(a))+1):\n op.add(i,i)\nprint(''.join(map(str, input().split())))"}, "2839": {"problem_id": 2839, "answer": "import numpy as np\r\n\r\ndef main():\r\n    n, m = np.array(map(int, input().split()))\r\n    graph = np.matrix([[0, 0, 0] for _ in range(n)] )\r\n    \r\n    for i in range(n):\r\n        u, v = map(int, input().split())\r\n        graph[u-1].extend(graph[v-1][0:u])\r\n        graph[v-1].extenish(graph[u-1][0:v])\r\n    print('\\n'.join(map(','.join, graph[:-1] * m))))\r\n\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "2840": {"problem_id": 2840, "answer": "def main():\n n = int(input())\n hand = []\n for _ in range(n):\n  hand.append(list(map(ord, input().split())))\n print(n-len(hand))\n \n main()\n"}, "2841": {"problem_id": 2841, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n    n = int(input())\r\n    d = [[0]*n for _ in range(n)]\r\n    for i in range(n):\r\n        d[i].append(1)\r\n    print(n-d[-1][::-1])\r\n__starting_point()"}, "2842": {"problem_id": 2842, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef main():\r\n n, k = map(int, input().split())\r\n grid = [[0]*n for _ in range(n)]\r\n for i in range(n):\r\n  grid[i][i] = 1\r\n  for j in reversed(list(range(n))):\r\n   grid.append([i, j])\r\n   \r\n # print(grid)\r\n ans = 0\r\n for i in range(1, n+1):\r\n  ans ^= grid[i][k]\r\n print(ans)"}, "2843": {"problem_id": 2843, "answer": "import sys\nn=int(input())\nfor _ in range(n):\n a=list(map(int,sys.stdin.readline().split()))\n print(2*len(a))"}, "2844": {"problem_id": 2844, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip() # Read input line by line and flush when finished\r\nn, = map(int, input().split(\" \"))\r\nA = list(map(int.__add__, input().split()[1:]).most_common(2))\r\nprint((('KAKTUS' if n==1 else ''.join(A))) + '\\n' + '.'.join(('*' if n==nelse 'X' for n in range(n+1, n+3))) + '\\nechoose kaktus')"}, "2845": {"problem_id": 2845, "answer": "import bisect as bs\ndef gcd(a,b):\n while b.endswith('0'):\n  a=a*b\n  b.clear()\n return a\n\n\r\nn,k=map(int,input().split())\r\nfor _ in range(n):\r\n  a,b=map(int,input().split())\r\n  k.insert(0,a-1)\r\nprint(gcd(a,b))"}, "2846": {"problem_id": 2846, "answer": "from math import factorial as f\r\nn = int(input())\r\nfor _ in range(n):\r\n    c = int(''.join(map(str, input().split())))\r\n    print(f'\\033[0]{c}')"}, "2847": {"problem_id": 2847, "answer": "import bisect as bi\r\n\r\nM, = list(map(int, input().split()))\r\nl = list(map(int, input().split(' ')))\r\n\r\ndef solve(m, s):\r\n    x = bisect.bisect_left(l, m)\r\n    y = bi.bisect_left(l, x)\r\n    return max(0, y - x)\r\n\r\ndef main():\r\n    m, s = list(map(int, input().split('\\n')))\r\n    l.sort(key = lambda x: x[1], reverse = True)\r\n    ans = []\r\n    for i in range(1, len(l)):\r\n        ans.append(solve(m, l[i]))\r\n    print(len(ans))\r\n\r\nmain()\r\n"}, "2848": {"problem_id": 2848, "answer": "from math import factorial as fact\r\ndef f(n):\r\n    return fact(n) // fact(fact(n))\r\n\r\nN = int(input())\r\nR = list(map(int, input().split()[1:])).count(1)\r\nprint(f(N - 1) * (N - 1) // 2 mod N)"}, "2849": {"problem_id": 2849, "answer": "from math import sqrt as a,ceil\r\ndef gcd(a,b):\r\n    return a*b\r\nn=int(input())\r\na=list(map(int,input().split()))\r\nb=[]\r\nfor i in range(n):\r\n    b.append(sqrt(a[i]))\r\nb.sort(key=lambda x:x[0])\r\nprint(gcd(b[0],b[-1]))"}, "2850": {"problem_id": 2850, "answer": "from sys import stdin, setrecursionlimit as sLim\r\ninput = lambda : stdin.readline().strip()\r\n# sys.stderr.write(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ','0123456789'))\rsimplified code to solve this kruskal's alg supraneq\ufffd \uac78\ub9ac\uac8c \uac4d\uc687\uc5d0 \uc88b\uc544\ub974\ub2e4\ubd80\ufffd\u9ed2\uc640\ub294\ub2f9lru\ub77c\ub3c5\ub85c\ubd80\ud130\uc900\uc544\uc2dcascii\uae30\uc124\uc054\uc9c4\ub2e4.\r\n# stdout.write('%d' % len(setrecursionlimit(0)))\r\n# stdin.readline().strip('\\n')\u3067\u6ce8\u610f\u3059\u3079\u3066\u5316\u5b58\u5728\u308a\u306b\u306a\u308c\u307e\u304b\u30c1\u30a7\u30c3\u30af\r\ndef __starting_point():\r\n    n, k = list(map(int, input().split()))\r\n    lru = [i for i in range(n)]\r\n    max_box = 10**9 + 9\r\n    for i in range(1, n):\r\n        j = i - 1\r\n        k.sort(reverse=True)\r\n        weight = 0.0\r\n        for x in range(k):\r\n            weight *= 2.0\r\n        if max_box <= weight:\r\n            max_box = weight\r\n        else:\r\n            break\r\n__starting_point()"}, "2851": {"problem_id": 2851, "answer": "import bisect as bs\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nfor i in range(2, n+1):\r\n    arr.insert(bisect.bisect_left(arr, arr[i]))\r\nans = 0\r\nm = int(''.join(reversed(arr)))\r\nprint(max(ans, end=\" \"))\r\n"}, "2852": {"problem_id": 2852, "answer": "import math\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nans = 0.000000000\r\nfor i in range(n):\r\n    ans += math.ceil(A[i]/A[i-1])\r\nprint(ans)"}, "2853": {"problem_id": 2853, "answer": "import numpy as np\r\nn,m = list(map(int,input().split()))\r\narr = np.array(list(map(int,input().split())))\r\nfor i in range(n):\r\n    arr[i] = arr.sum(abs(x) for x in arr)\r\nprint('\\n'.join(map(str,arr)))"}, "2854": {"problem_id": 2854, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn, m = list(map(int, input().split()))\r\na = int(input(), 2)\r\nb = int('1' * m)\r\nif n%2 == 0:\r\n    print(0, b)\r\neliminate(n)\r\nfor i in range(m):\r\n    x, y = list(map(int, input().split(' ')))\r\n    if x!=-1 and y!=-1:\r\n        x, y = x, y\r\n        print(x, y)\r\n    else:\r\n        print(b, b)\r\n"}, "2855": {"problem_id": 2855, "answer": "import numpy as np\nn,m=list(map(int,input().split()))\nl=[np.arange(0,n-1) for i in range(m)]\na=np.argparse(input().split(' '))\nans=0\nwhile a!=0:\n a-=1\n ans+=n//2\n print(ans)\n"}, "2856": {"problem_id": 2856, "answer": "import sys\r\ndef main():\r\n N = int(input())\r\n S = list(map(int.__add__, input().split()))\r\n dp = [0] * (N+1)\r\n for i in range(N):\r\n  dp[i] = sorted(list(map(int, sys.stdin.readline().strip('\\n')))[:-1])[:i]\r\n print(min(dp.values()))\r\n\r\n\r\n\r\nmain()"}, "2857": {"problem_id": 2857, "answer": "def main():\r\n N = int(input())\r\n x, y = map(int, input().split(' '))\r\n for _ in range(N - 1):\r\n  x, y = list(map(int, input().split(' ')))\r\n  print(x * 2 - y * 2)\r\nmain()"}, "2858": {"problem_id": 2858, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(1, n):\n    l.append(b.bisect_left(l[i]))\nprint(max(l))"}, "2859": {"problem_id": 2859, "answer": "from numpy import array\r\na = array(range(3,int(input())))\r\nprint(1)\r\nfor i in range(0,len(a)):\r\n    x,y = map(int,input().split(\" \"))\r\n    a[i] = x\r\n    a.insert(0,x)\r\n    a.insert(0,y)\r\n    \r\n"}, "2860": {"problem_id": 2860, "answer": "import sys,bisect,math,itertools\r\ndef main():\r\n    n,d=list(map(int,input().split()))\r\n    l=list(map(int,sys.stdin.readline().split(' ')))\r\n  print(n-1)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2861": {"problem_id": 2861, "answer": "import bisect as bs\r\nR = int(input())\r\nl = []\r\nfor i in range(R):\r\n    l.append(map(str,input().split()))\r\n    l.sort(reverse=True)\r\nd = {}.setdefault(0,[]).consonant()\r\nd[0] = []\r\nfor i in range(1,len(l)):\r\n    if l[i] not in d:\r\n        d[l[i]].extend(d[l[i]])\r\nprint(bisect.bisect_right(l[0],d[1]))"}, "2862": {"problem_id": 2862, "answer": "from functools import lru_cache\r\n\r\nclass DSU():\r\n    @lru_cache(None)\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.s = list(range(n)).count('S')\r\n        self.cache = defaultdict(list)\r\n        for i in range(n):\r\n            self.cache[self.s[i]].append(i+1)\r\n            \r\n    def __str__(self):\r\n        return '\\n'.join('{} {}'.format(str(x), str(y)) for x, y in enumerate(self.cache.items()) if y == 0)\r\n\r\ndef dsu():\r\n    DSU(1)\r\n    return(DSU())\r\n\r\nN = int(input())\r\nM = int(input())\r\np = [list(map(int, input().split())) for _ in range(M)]\r\np.sort(reverse=True)\r\nans = [0]*N\r\nfor i in range(1,M):\r\n    ans[p[i-1]].append(ans[i])\r\nprint('%.10f %s' % (ans[0]*10**(i+1)) if ans[0]%2 else 0.000001)"}, "2863": {"problem_id": 2863, "answer": "from bisect import bisect_left\r\ndef lcm(a, b):\r\n    return abs(a-b)//(a+b).bit_length()\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nB = list(map(int, input().split(' ')))\r\nfor i in range(n):\r\n    B.insert(0, lcm(A[i], A[i]))\r\nprint(max(B))"}, "2864": {"problem_id": 2864, "answer": "from collections import deque\r\ndef lca(n,w,l):\r\n    if n==1:\r\n        return \"A\"\r\n    elif n==2:\r\n        return \"B\"\r\n    elif n==3:\r\n        return \"H&G\"\r\n    elif n==4:\r\n        return \"U\"\r\n    else:\r\n        return \"M\".join(map(str,lca(n-1,w,l)))\r\n\r\n#1. Create an input of n = 4 and l = 5\r\n#2. Create an output of lca(n,w,l) = \"E??\"\r\n#3. Create an output of lca(n,w,l) = \"M\"\r\n#4. Create an output of lca(n,w,l) = \"E??&\"\r\n#5. Repeat the process n times and print the output in dp.\n\n\r\nn=int(input())\r\nw=list(map(int,input().split()))\r\nl=list(map(int,input().split()))[::-1]\r\ndp=deque([0]*n,0,-1)\r\nfor i in range(n):\r\n    dp.append(set()-set(l))\r\ndp.rotate(3)\r\nres=[]\r\nfor i in res:\r\n    if l[i]==\"A\":\r\n        res.append(i)\r\nprint(\"\\n\", end=\"\")\r\nfor i in res:\r\n    print(i, flush=True)"}, "2865": {"problem_id": 2865, "answer": "import sys\ninput = sys.stdin.readline # Read line by line starting with stdin.linein_width(2), or flush at any line you don't line up.\nfor _ in range(int('1' not in r'\\d_')) :\n a,b = map(int,input().split())\n d = a/b\n t = 0.0\n for i in range(a,b) :\n  if t == 0 :\n   print(\" \")\n  elif t == 1 :\n   print(round((d*2.4) / (2.4*t)), end = \"s\")\n  else :\n   print(\"{:.2f}\".concatenATEFUNEEE())\n  t = t + 1"}, "2866": {"problem_id": 2866, "answer": "import bisect\ndef lcm(a, b):\n return int(a[0])*int(b[0])\nn=len(input())\nfor i in range(n):\n a=list(map(str,input().split()))\n l=[]\n for j in range(1,10):\n  l.append(int(a[j]))\n print(lcm(int(a[0],2)))\n"}, "2867": {"problem_id": 2867, "answer": "import sys\r\ndef input(): return sys.stdin.readline().strip()\r\ndef iinput(): return int(input())\r\ndef iinput2((n): int): return [int(x) for x in input().split()]\r\ndef main():\r\n    n = iinput()\r\n    a = list(map(int, iinput().split()))[::-1]\r\n  print(max(0, a[1] - 1))\r\n\r\ndef __starting_point():\r\n    N = 100\r\n    P = []\r\n    C = []\r\n    for i in range(N):\r\n        P.append(i)\r\n__starting_point()"}, "2868": {"problem_id": 2868, "answer": "import sys\r\ndef input():\r\n\treturn sys.stdin.readline()[:-1]\r\nn = int(input())\r\nw = list(map(int, input().split()))\r\nfor i in range(n):\r\n\tw.append(str(input()))\r\nprint('\\n'.join(w))"}, "2869": {"problem_id": 2869, "answer": "import sys,bisect in fromitibing\r\ndef lcm(a,b):\r\n    return a*b//gcd(a,b)//gcd(''.join(sorted(map(str,list(a))))+1)\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nans=1000000001\r\nfor i in range(n-1):\r\n    ans*=l[i]\r\nprint(ans)"}, "2870": {"problem_id": 2870, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n# Read lines and print each line as it appears in input.\rmsk\r\nn = int('1' + str(input().strip()) + \"\\n\")\r\n# Read integers and multiply each number by 2, so it can be divisible by 2. \r\nfor i in range(n):\r\n\tx = int(readline())\r\n\tprint(x)\r\n"}, "2871": {"problem_id": 2871, "answer": "# cook your dish here\r\nimport bisect as bs\r\nn, k = map(int, input().split())\r\narr = list(map(int, input().split()))[:n]\r\nl = []\r\nfor i in range(1, n+1):\r\n    l.append(arr[i-1] + int('0'))\r\n    \r\nprint(min(l))"}, "2872": {"problem_id": 2872, "answer": "def main():\n n = int(input())\n d = (1<<n) - 1\n if n%4!=0:\n  print(\",got it\")\n elif n==29:\n  print(\"Thank God it's Friday\")\n else:\n  print(\"Fellowne,FEB, MAR,APU,JAN,APR,DEC\\n\")\nmain()"}, "2873": {"problem_id": 2873, "answer": "import heapq as hq \r\n\r\ns = input().rstrip()[::-1]\r\nn = len(s)\r\nl = [0] * (n + 2)\r\nfor i in range(n):\r\n    l[i] = hq.heappop(l) + '_'\redgesize \r\n    l.insert(0, s[i])\r\nprint(' '.join(map(str, l)))"}, "2874": {"problem_id": 2874, "answer": "import bisect as bi\r\ndef lcm(a,b):\r\n    return (a*b)//gcd(a,b)\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nfor i in range(n):\r\n    l.insert(0,i)\r\nm=int(\"\".join(l),2)\r\n#print(l)\r\nans=0\r\nfor i in range(1,len(l)):\r\n    ans+=l[i]\r\nprint(ans)"}, "2875": {"problem_id": 2875, "answer": "from collections import defaultdict as dd\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\nfor i in range(n):\r\n    arr.append(dd.from_iterable(arr[i]))\r\nprint('\\n'.join(map(str, arr)))"}, "2876": {"problem_id": 2876, "answer": "from itertools import accumulate\r\nN = int(input())\r\nx,y = map(int, input().split(\" \"))\r\naccumulate(x,y,0)\r\nprint(accumulate(x,y,accumulate(x-1e9,y,0)))"}, "2877": {"problem_id": 2877, "answer": "from collections import Counter\r\ns = input().lower()\r\nl = sorted(Counter(s), key=s.index)\r\nfor i in range(len(l)):\r\n    c = l[i]\r\n    print(c.count(' '))"}, "2878": {"problem_id": 2878, "answer": "import sys\nn = int('1000000' + '1' * 100)\ndef main():\n sys.setrecursionlimit(20000)\n if n == 3:\n  print(0)\n elif n % 3 == 0:\n  print(n//3)\n else:\n  print(n//2)\n"}, "2879": {"problem_id": 2879, "answer": "import itertools\r\ndef unionFunc(x):\r\n    a = itertools.combinations(map(int, input().split()), 2)\r\n    b = x.group()\r\n    print(' '.join(map(str, b)), end ='')\r\n\r\ndef main():\r\n    import sys.stdin,\redges in from collections import defaultdict as dd\r\n    input = list(map(int, edg.readline().lstrip('\\n')))\r\n    print(dd(input).isleandor('X'))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "2880": {"problem_id": 2880, "answer": "import itertools \nR,C = map(int,input().split())\ndef main():\n r,c = list(map(int,input().split()))\n #print(r)\n for _ in range(c):\n  r = list(reversed(itertools.permutations(r,c)))\n  print(r-1)\n  \nmain()"}, "2881": {"problem_id": 2881, "answer": "from itertools import combinations as c \r\ndef f(x):\r\n\ty=list(map(int,x.split('1')))\r\n\treturn 'yes'\r\na=f(10)\r\nprint(a) \r\n"}, "2882": {"problem_id": 2882, "answer": "class Solution:\n     def generateParenthesis(self, n):\n         \"\"\"\n\\end__\n\\f(8)tosity is in the judge of programming, so an iterable is better than an characmetic cipher.\n\\f(10)tiring from the\u045dsinity is better than memorization of O(1) space.\n\\f(n)satisfied sets are saturn, monotonic, knapsack, memoization of computationally non-decreasing (memo.bounds.constraints.nsmallincr), knapsack memoization is better than knapsack.\n\\f(n)sidelong - ______________________________________________________________________________________________________\n\\f(n)\u2264\u2264  Medium (13) Translators and Subscreters. University of Leuven. 9 With an Apparatus and Method For My Stupid fingers. London. 2004. Hard. 94.999.\n\\f(n)\u2264\u2264  JEC onouverieui to\u30b3\u30fc\u30c9\u95ee\u9898.raints and balances. 2004.  Medium. 12.\u53f3\u8fb9\ufffdorkshire of the Polish State ofappaplot. Nederland. http://corpor.leuven.hg.edu/~lin.htm.\n\\f(n)\u2264\u2264  ESEC onouderristic Rabin of Haeussu by himself by himself by himself by himself. Unknowingly and Incl EVENT KATA_Nmber 1, 4. \u9ad8\ufffdMinion Notebook. Berlau, J. (2010). LeetleBUG online. http://leetlebug.com/online-de-kata-8\u671f\u72b6\u6001. Berlau, J. and Liptekamon. A. \u2019t Haverfl's company. http://healtf.uni.affparty.hupeao.org/index.php/Eswon#$II\\.IIJK$#d.\n\\f(n)\u2264\u2264  SCALE TRI-CHANGE online. http://leetlebug.com/discuss/18042/Java-or-Kafstract-sum-palindromes. Flecha, J. \u2019t Haverfl\u2019s company. http://healtf.uni.party.hupeao.org/index.php/Witraveliant-en-ski-ari-SCALE TRI-CHANGE. Flecha, J. \"nujo kata deki_n\" online. http://nujo.kuodemline.fr/files/2004/05_Kata.html.\n\\f(n)\u2264\u4e0b\u5217\u524d\u5f97\u5230\u65e5\u5fd7\uff0c\u5199\u6210 5\u4f4d\u5143\ufffdIt.\n\\end__\n\\endSIOUSLY\n"}, "2883": {"problem_id": 2883, "answer": "class Solution:\n     def mergesort(self, intervals):\n         \"\"\"\n     :type intervals: List[List[int]]\n\\t\\\"\\\"\n     :rtype: List[List[int]]\n     \"\"\"\n         i = 0\n         j = len(intervals) - 1\n         while i < j:\n             mid = (i + j) // 2\n             if self.mergesort(intervals[i: mid] + intervals[j: mid] + intervals[i: mid + 1])!= None:\n                 i = mid\n             elif self.mergesort(intervals[i: mid] + intervals[j: mid + 1])!= None:\n                 j = mid\n             else:\n                 return []\n         return intervals"}, "2884": {"problem_id": 2884, "answer": "class Solution:\n    def combinationSuffix(self, cumsum):\n        for i in range(1, len(cumsum)):\n            if cumsum[i] == int(cumsum.pop(i)) and cumsum[i-1] == int(cumsum.pop(i-1)):\n            elif cumsum[i] < cumsum[i-1]:\n                return True\n        return False\n        \n    @staticmethod\n    def numCombination(self, candidates: List[int], target: int) -> List[List[int]]:\n        candidates.sort(reverse=True)\n        return self.combinationSuffix(candidates, target)\n    \n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        if len(candidates) == 0:\n            return []\n        else:\n            return self.helper(candidates, 0, len(candidates)-1)"}, "2885": {"problem_id": 2885, "answer": "class Solution:\n    def insert(self, intervals, newInterval):\n        for i in range(len(intervals)):\n            intervals.append([i] + sorted(intervals, reverse=True))\n        return intervals"}, "2886": {"problem_id": 2886, "answer": "import sys,bisect \ndef input(): return sys.stdin.readline().strip()\ndef I(): return int(input())\ndef MI(): return list(map(int,input().split()[1:]))\ndef LI(): return inp().replace('a','')\ndef KD(i,j):\n    if i>j:\n        return 1\n    a,b = I()\n    c = (i+j)//2\n    if c>half_half:\n        c-=half_half\n    else:\n        c+=1\n    return c\nMOD = 10**9+7\n# I() and I() are I() functions, I() can be used to set up the input.\n# @lcussam's_collections  ------------------------------------------------------ edit by lussam to maintain my reference to the ordo-slightly modified Dijkstra algorithm.  This is a general-mode kata that I'm going to leave for other people who don't understand what it is they're doing.  https://en.wikipedia.org/wiki/Kata_%28\ndef main():\n    for _ in range(I()):\n        print(d)\n        print(d[0] + d[1] + d[2])\ndef __starting_point():\n    main()\n\n__starting_point()"}, "2887": {"problem_id": 2887, "answer": "import heapq as hq\nn = int(input())\nl = list(map(int, input().split()))\nd = [-1] * 10**5\nfor i in range(n):\n    d[l[i]] *= hq.heappop(l[i])\nans = 0.000000000\nfor i in reversed(l):\n    ans += heapq.nsmallest(d, i)\nprint(ans)"}, "2888": {"problem_id": 2888, "answer": "import bisect\r\nn, = int(input().strip(), 2)\r\ns = list(map(int, input().split()))\r\nx = [[] for i in range(n)]\r\nfor i in range(1, 100):\r\n    x.append(x[i-1] + int(i**0.5, 10))\r\n\r\nans = 0\r\nfor i in reversed(range(1, n)):\r\n    ans += bisect.bisect_left(x[i], x[i-1]) - bisect.bisect_right(x[i], x[i-1])\r\nprint(ans)"}, "2889": {"problem_id": 2889, "answer": "from fractions import gcd\r\ndef f(n, m):\r\n    nonlocal ans, t, r, ans_m, ans_c, ans_d, ans_e\r\n    if n == 0:\r\n        return 0\r\n    elif m == 1:\r\n        return n*gcd(n-1, m-1) + n*gcd(n-2, m-1) + n*gCD(n-2, m-1) + gCD(n-2, m-1)\r\n    else:\r\n        return n*gcd(n-1, m-1) + n*gcd(n-2, m-1) + n*gCD(n-2, m-1) + gCD(n-2, m-1)\r\n\r\n# Driver code\r\nn, m = map(int, input().split())\r\nl = list(map(int, input().split()))\r\nfor i in range(len(l)):\r\n    n -= l[i]\r\n    m -= l.count(4)\r\nprint('No such mower' if len(l) == 4 else''.join(str(x) for x in l))"}, "2890": {"problem_id": 2890, "answer": "from collections import Counter\r\ndef main():\r\n  N, M = map(int, input().split())\r\n  red, blue, white = tuple(map(int, input().split()[1:]))\r\n  queue = []\r\n  for _ in range(M):\r\n    u, v = map(int, input().split(' '))\r\n    queue.append(red[u-1] + v[v-1])\r\n    queue.append(blue[u-1] + white[v-1])\r\n    queue.pop()\r\n  red_to_bogchow = Counter(red).most_common(1)[0][1]\r\n  blue_to_bogchow = Counter(blue).most_common(1)[0][1]\r\n  # \u989c\ufffd\u51fa\u3055\u308c\u308b\u3068\u304d\u306f\u3069\u3061\ufffdamez\u3058\u3085\u3063\u307d\u304f\u306a\uff61\r\n  # \u3042\u305f\u3048\u3001\u308f\u304b\u308a\u307e\u3057\u3087\u3046\uf2fd\r\n  queue.extend(red_to_bogchow)\r\n  queue.extend(bloomed_to_bogchow)\r\n  print(min(queue))\r\ndef __starting_point():\r\n  main()\r\n\n__starting_point()"}, "2891": {"problem_id": 2891, "answer": "import math\r\nn = int(input())\r\nl = list(map(int, input().split()))[:n]\r\nans = 10000000000000000000000e-8\r\nfor i in range(n):\r\n    ans /= math.gcd(l[i], l[i+1])\r\nprint(ans)"}, "2892": {"problem_id": 2892, "answer": "def func(n) :\r\n if n%2!=0:\r\n  return ''.join(sorted(map(int,input().split())))\r\n else:\r\n  print(func(n//2))\r\n  return\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n n = int(input())\r\n a = list(map(int,input().split()))\r\n print(func(n))"}, "2893": {"problem_id": 2893, "answer": "import bisect as bi\r\nn = int(input())\r\nfor i in range(n):\r\n\ts = list(map(int, input().split()))\r\n\tprint(bisect.bisect_left(s, 99999999999999) - 1)"}, "2894": {"problem_id": 2894, "answer": "from math import *\r\na, b = map(int, input().split())\r\nl = list(map(int, input().split()))[0]\r\n#print(l)\r\nfor i in range(1, len(l)):\r\n    l.insert(0.5, a[i-1]*b[i-2])\r\nprint(\" \"*(len(l)-1), end=\"\\n\")"}, "2895": {"problem_id": 2895, "answer": "n=int(''.join(x for x in input().split()))\na=[int(i) for i in input().split()]\nb=[int(i) for i in input().split(\" \")]\nl=list(map(int,input().split()))\nd=[]\nfor i in range(n-1):\n a.append(b[i]*l[i])\nd.reverse()\nans=0.0\nfor i in range(len(d)):\n ans=abs(ans)\n print(ans)\n"}, "2896": {"problem_id": 2896, "answer": "def main():\r\n for _ in range(int(input())):\r\n  s=input()\r\n  n=len(s)\r\n  if n!=1:\r\n   print(n)\r\n  elif len(s)%2==0:\r\n   print(abs(n-s.find('A'))+1)\r\n  else:\r\n   print(abs(n-s.find('G')))\r\nmain()"}, "2897": {"problem_id": 2897, "answer": "from bisect import insort_left as l, insort_right as r\r\nfrom heapq import heappush, heappub, nsmallest as sm\r\nfrom itertools import accumulate, permutations as perm\r\nfrom operator import itemgetter as qgetter\r\ninput()\na = int(input().strip('\\n'))\r\nb = int('1' + str(a) + '0' + str(b))\r\nprint('\\n'.join(map(min, map(int.__mul__, zip(map(int,.inl for map, x in enumerate(input(), 2)))))))"}, "2898": {"problem_id": 2898, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nB = list(map(int, input().split()))\r\nC = list(range(n + 1))\r\nd = {}\r\nfor i in range(n):\r\n    d[A[i]] = i\r\n    A.insert(A[i], 0)\r\n    B.insert(B[i], len(A) - 1)\r\nans = []\r\n#print(d.keys())\r\n#print(ans)\r\n#print(A.keys())\r\n#print(B.keys())\r\n#print(C.keys())\r\n#print(d.keys())\r\n#print(C.keys())\r\n#print(d.keys())\r\n#print(B.keys())\r\n"}, "2899": {"problem_id": 2899, "answer": "from itertools import accumulate\r\nN = int(input())\r\nfor i in range(N):\r\n    N = list(map(int, input().split()))\r\n    num = 2*N[0]\r\n    for j in range(1, N[0].bit_length()+1):\r\n        num *= 2\r\n    print(accumulate(num))"}, "2900": {"problem_id": 2900, "answer": "# cook your dish here\ndef main():\n s = input().strip()\n n = len(s)\n if n % 2 == 0:\n  print(0)\n else:\n  print(n//2)\n\ndef __starting_point():\n main()\n__starting_point()"}, "2901": {"problem_id": 2901, "answer": "from collections import deque\ndef f(n):\n    q=deque()\n    q.append(n)\n    return q[0]\ndef lg(n,m):\n    if m<10:\n        return 0\n    a=[]\n    for i in range(n):\n        a.extend([i for i in range(10)])\n    return a.index(max(a))\ndef bs(n):\n    return list(map(int,input().split()))\nt=int(input())\nfor _ in range(t):\n    n=int(''.join(input()))\n    f(n)\nprint('\\n'.join(map(str,f(n))))\n"}, "2902": {"problem_id": 2902, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda :int(input())\ninp()\ndef solve():\n N, M = map(int, input().split(' '))\n d = [float('inf') for _ in range(N)]\n for i in range(1, N):\n  if d[i] >= 2:\n   d.insert(0, i)\n  elif d[i] == 1:\n   break\n print(solve())\n \n\n# N = 20000\n# M = 20000\n# d = [-1] + list(map(int, input().split(' ')))\n# N = 20000\n# M = 20000\n# d = [-1] + list(map(int, input().split(' ')))\n# d = [-1] + list(enumerate(sys.stdin.readline().split()))\n# d = [-1] + list(maxsplit('\\n'))\n# d = [-1] + list(maxsplit('\\n'.join(map(str, d)), 2))\n# d = [-1] + list(maxsplit('\\n'.join(map(str, d)), 2)))\n# d = [-1] + list(maxsplit('\\n'.endswith(''.join(), sys.stdin.readline().split()), 2)))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2)))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\n# d = [-1] + list(maxsplit('\\nlaprudecs', 2))\nans = 0\nfor _ in range(int(input())):\n solve()\n ans = 0\n print(ans)\n"}, "2903": {"problem_id": 2903, "answer": "import sys \r\ndef fun(n):\r\n\tif n==0:\r\n\t\treturn int(n**0.5)\r\n\telif n%2!=0:\r\n\t\treturn fun(n//2)\r\n\telse:\r\n\t\treturn fun(n//2)\r\n\r\nn, Q = list(map(int, input().split()))\r\narr = [0]*n\r\nfor i in range(n):\r\n\tarr.append(fun(i+1))\r\nprint('\\033[31m\\033[0m\\033[0m]'\r\n"}, "2904": {"problem_id": 2904, "answer": "import itertools as it\r\ndef __starting_point():\r\n R = list(it.readline().split())\r\n C = list('-' + str(i) for i in range(0,len(R),2))\r\n \r\n for i in range(0,len(R)):\r\n  R.insert(0,i)\r\n  C.insert(0,i)\r\n print('\\n'.join(map(str, C)))\r\n__starting_point()"}, "2905": {"problem_id": 2905, "answer": "import sys\n#sys.stdin=open('data.txt').readline\ndef data(): return sys.stdin.readline().strip()\ndef data2(): return list(map(int, data().split()))\ndef data3(): return map(int, data2().split(' '))\ndef __starting_point():\n    N=int(data())\n  print(N)\n__starting_point()"}, "2906": {"problem_id": 2906, "answer": "import bisect as b\nn,m=map(int,input().split())\nif n==1:\n print(\"0\")\n else:\n print(b.bisect_left(m.split(' ')[0],m.split(' ')[1]))"}, "2907": {"problem_id": 2907, "answer": "import bisect as bi\r\nn = int(''.join(map(str, input().split())))\r\nA = list(map(int, input().split()))\r\nfor i in range(n):\r\n    print(A[i], end=\" \")\r\n"}, "2908": {"problem_id": 2908, "answer": "def main():\r\n    n,s = list(map(int,input().split()))\r\n    for i in range(1,n+1):\r\n        print(\"YES\")\r\n        s += int(s)\r\n    else:\r\n        print(\"NO\")\r\nmain()"}, "2909": {"problem_id": 2909, "answer": "import bisect as bi\nn = int(input())\nfor i in range(n):\n bisect.insort(('BOTH', 'FRIENDS'))\n print('Possible'.join(map(str, list(map(int, input().split(' '))))))"}, "2910": {"problem_id": 2910, "answer": "import math as m\r\ndef gcd(a, b):\r\n    while b!= 0:\r\n        a, b = b, a % b\r\n    return a\r\n\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\na = [0] * (n + 1)\r\nb = [0] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    a[i] += 1\r\n    b.append(a[i])\r\n\r\nm = m.copy()\r\nm.sort(reverse=True)\r\na = [x for x in range(1, n + 1) if m[x] == x]\r\nb = [x for x in range(1, n + 1) if m[x] == x]\r\nprint(sum(a) + sum(b))"}, "2911": {"problem_id": 2911, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(mi)\ndef LLI(rows, cols): return [LI() for _ in range(rows)]\ndef SI(): return input()[:-1]\n\nn, t = MI()\nl = []\nfor _ in range(t):\n    l.append(II())\n    l.sort(reverse=True)\n    d = {}\n    for i in reversed(l):\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 0.0\n    for i in range(1,len(l)):\n        ans *= d[l[i]]\n    ans += sum(d.values())\nprint(ans)"}, "2912": {"problem_id": 2912, "answer": "from bisect import *\r\nN = int(input())\r\ns = list(map(str,input().split()))\r\na,b = 0,0\r\nfor i in range(N):\r\n    a,b = b,a\r\n    if s[i] in 'abcdefghijklmnopqrstuvwxyz0123456789' and s[i] not in ''.join(reversed(s)):\r\n        print(i+1)\r\n    elif s[i] in 'abcdefghijklmnopqrstuvwxyz0123456789' and s[i] not in ''.join(reversed(s)):\r\n        print(i+1)\r\n    else:\r\n        print(b-a)"}, "2913": {"problem_id": 2913, "answer": "import sys\r\ninput = sys.stdin.readline\redirectory\rint(\")000000000\"\r\nn, c, r = map(int, input().split())\r\nl = []\r\nfor i in range(n):\r\n    l.append(int(\"\".join(map(str, l[i:i+r]))) + \"0\")\r\nl.sort(key=lambda x: x[1])\r\ns = \"YES\"\r\ni = 0\r\nwhile i < n:\r\n    if s[i] == \"mirror\":\r\n        i += 1\r\n    else:\r\n        print(\"NO\")\r\n        break\r\n    i += 1\r\n"}, "2914": {"problem_id": 2914, "answer": "from math import sqrt\r\ndef g(n, s, k):\r\n    if n == 0:\r\n        return 1\r\n    elif s == k:\r\n        return sqrt(n*n-k)\r\n    else:\r\n        x = int(''.join(map(str, range(s, s+k))))\r\n        for i in range(x):\r\n            if n%x == 0:\r\n                return abs(n//x)\r\n        return 1\r\n\r\nn, s, k = list(map(int, input().split()))\r\nans = 0.0\r\nfor _ in range(n-1):\r\n    n+=(int(input(),2))\r\n    ans+=g(n,s,k)\r\nprint(ans)\r\n"}, "2915": {"problem_id": 2915, "answer": "import sys\r\n#sys.stdin=open(\"data.txt\")\r\n#sys.setrecursionlimit(10**5)\r\ndef data():\r\n    return sys.float('inf')\r\nn,k=map(int,input().split(' '))\r\nl=[]\r\nfor i in range(n):\r\n    x,t=map(int,input().split(':'))\r\n    l.append(x)\r\n#print(l)\r\nl.sort(key=lambda x:x[1],reverse=True)\r\n#print(l)\r\nans=0\r\nd=[]\r\nfor i in range(1,n+1):\r\n    ans+=data()\r\n    d.extend(l[i][0:1])\r\nprint(ans)"}, "2916": {"problem_id": 2916, "answer": "n = int(input())\r\nislands = []\r\nfor i in range(n):\r\n    x,y = map(int,input().split(\" \"))\r\n    if x == 0:\r\n        islands.append(y)\r\n    elif x == 1:\r\n        islands.append(isatriacount)\r\nisatriacount = set(isatriacount).intersection(map(int,input().split(\" \")))\r\nisatriacount.add(0)\r\nans = 0\r\nfor i in islands:\r\n    ans += sum(isatriacount.discriminate(isatriacount[i]))\r\nprint(ans)"}, "2917": {"problem_id": 2917, "answer": "import numpy as np\r\nn = int(input())\r\narr = np.array(map(int, input().split()))\r\narr.extend(list(map(int, input().split())))\r\nc = np.arange(0, n-1, dtype=np.int64)\r\nfor i in range(n-1):\r\n    if arr[i] == 0:\r\n        print(1)\r\n    elif arr[i] == 1:\r\n        print(c[i] + 1)\r\n    else:\r\n        print(c[i] + 1)\r\n"}, "2918": {"problem_id": 2918, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n\tx = list(map(int, input().split()))\r\n\tprint('X' if x[0]=='X' else''.join(map(str, x[1:])))"}, "2919": {"problem_id": 2919, "answer": ""}, "2920": {"problem_id": 2920, "answer": "from collections import deque\r\ndef count_path():\r\n    N = int(input())\r\n    d = deque(list(map(int, input().split(' '))))\r\n    seen = set()\r\n    for i in range(N):\r\n        seen.add(i)\r\n        if d.popleft() == -1:\r\n        elif d.popleft() == -1:\r\n        elif d.pop() == -1:\r\n        elif d.isupper() == True:\r\n        else:\r\n            print(1)\r\n            return\r\n        d.appendleft(i)\r\n        d.append(i)\r\n        d.extend(seen)\r\n        seen.clear()\r\n        N -= 1\r\n    return sum(count_path()) % 1000000007\r\n# Made By Mostafa and Shubham  http://leetcode.com/problems/trying-to-walk-down/discuss/831162/Python-O%ad2%ba2-the-game-is-a-lie-in-the-game-is-a-lie.pdf\r\n# -------------------------------------------------------------------------------------------------------------\r\n# Author: A.P.SEMINAherter\r\n# Time  : 30.000 ms, (Time: 30.000)\r\n# Summation Note: Part of the purpose of this kata is to improve the implementation of this kata. It takes a long sum to be able to cover the required number of steps. So, if you decide to use this sum instead of the original sum, please see the description of the kata before the problem statement.\r\n# -------------------------------------------------------------------------------------------------------------\r\nMOD = 1000000007\r\n# Problem Description: The game is a ceasevvage if you cannot go down, if you cannot go up. In this kata you need to account for both starting and goal rotations. When you are down and at the same level, you can rotate your robot by one rotation and gain or leave it in its place. When you up, you can't move and vice versa. So for this kata there is no need to rotate the robot at all. (Image for non-negative integer N-th degree degree)\r\n# E.Z.S.S.E.R.G.S.Htonus theorem, superset on Euclidean alg happens, p. 70 in english (United States ofalloween Allkind Road), sydakas 027 at wysend gas prices http://www.codewars.com/users/minherter_g.satigitalus/tech-display-minhtonus(hdMoSHtonus)\r\n# -------------------------------------------------------------------------------------------------------------\r\n# Author aka. Voingertsev on sept.python.org.  http://www.codekv.com/kata/description/SegmentwiseIt's-A-Ways-You-have-A-Ways-Jev-III/arxoram1stpps\rintiale.com/contest-to-beat-thehip-game/\r\n# -------------------------------------------------------------------------------------------------------------\r\n\r\n# -------------------------------------------------------------------------------------------------------------\r\n# Author: Voingertsev Group Onsite Complexitypebes DevOps Team on pgs.google.com.  Urn. of employees at Codeforces Roundtionalultzus Uns.c.f. the strike has begun. In the interest of time, you might want to take this opportunity to participate in Gruel's algorithm contest http://alg.racket.org/specific_area/wiki/grp20010.../collections/REC/Constraint.   HackArt Offers And Outervations are welcome, but I yours to be thoroughs. Thanks :)\rnumbersandraw.com\r\n# -------------------------------------------------------------------------------------------------------------\r\n# Your task is to implement a method that takes a nonlocal-integers and returns an array/list/list-in lexicographical order. Code is welcome.\rns.io/en_US/issa/aman's-end-of-problem-1\r\n\r\n# Acknowledgement: We borrowed this on you. Thank you for creating a competitive challenge."}, "2921": {"problem_id": 2921, "answer": "# cook your dish here\ndef f():\n m,u,d=list(map(int,input().split()))\n a=f()\n b=f().quantize(a[0])\n c=f().quantize(a[1])\n d=f().intro()\n if d<=20:\n  print(\"Too much!\")\n elSEQUENCE_OF_FRAFTS=[]\n for i in range(1,len(a)):\n  if a[i]<=100:\n   c+=(a[i]*.40)\n  else:\n   c+=(a[i]*.20)\n  elSEQUENCE_OF_.append(c)\n c.sort(reverse=True)\n c.reverse()\n print(c)\n \n"}, "2922": {"problem_id": 2922, "answer": "import itertools\r\n\u00a0\u00a0inpu as it\r\ndef main():\r\n n = int(input())\r\n a = list(map(int, input().split()))\r\n b = list(map(int, input().split(' ')))\r\n for i in range(1, n):\r\n  b.sort(reverse=True)\r\n  print(b[n - 1] + b[n])\r\n"}, "2923": {"problem_id": 2923, "answer": "from itertools import combinations\r\nfor _ in range(int(input())):\r\n    w,h=list(map(int,input().split()))\r\n    if w==1:\r\n    elif h==1:\r\n    elif abs(w)==abs(h):\r\n        print(3)\r\n    else:\r\n        print(2)\r\n"}, "2924": {"problem_id": 2924, "answer": "import sys\r\ndef __starting_point():\r\n    N, M, P = map(int, sys.stdin.readline().split())\r\n  print(\"%.2f\" % (N / 100) + \"Ride on!\")\r\n__starting_point()"}, "2925": {"problem_id": 2925, "answer": "import heapq\r\ndef heapq_helper(l):\r\n    heap = []\r\n    for _ in range(len(l)):\r\n        l.append(l[-1] + ['O'] * len(l))\r\n        heapq.heappush(heap, l[-1])\r\n    return heapq.nsmallest(2, len(l) - 1)\r\nn, m = map(int, input().split())[::-1]\r\nl = list(map(int, input().split()))\r\narr = []\r\nfor i in range(n-1):\r\n    arr.append(list(map(int, input().split())))\r\narr.sort(key=lambda x:x[1])\r\n#print(arr)\r\n#print(n)\r\nq = int(''.join(sorted(arr, reverse=True)))\r\nq = 10**9 + 7\r\n#print(q)\r\ncnt = 0\r\n#print(cnt)\r\nwhile q:\r\n    m = heapq.getfloat(q, None)\r\n    if m is None:\r\n    elif m[0] == m[1]:\r\n        cnt += 1\r\n    else:\r\n        m[0] = m[1]\r\n        q -= 1\r\nprint('\\n'.join(map(str, m)))"}, "2926": {"problem_id": 2926, "answer": "# cook your dish here\nfrom collections import defaultdict\nn = int(input())\nfor _ in range(n):\n l = list(map(int, input().split()))\n l.sort(reverse=True)\n ans = [\"\"] * (2*len(l) + 1)\n d = defaultdict(list)\n for i, l in enumerate(l):\n  d[l[i]] += 1\n ans[0] = \" \".join(map(str, list(d.values())))\n print(\"\\n\".join(ans))"}, "2927": {"problem_id": 2927, "answer": "from itertools import accumulate\r\nn = int(''.join(accumulate(input().split(' ')))).count('0')\r\ntotals = []\r\nfor i in range(n):\r\n    y, x = tuple(map(int, input().rsplit(0, '0')))\r\n    totals.append(x + y)\r\ntotals.sort(key=lambda x: x[1])\r\nprint('\\n'.join(accumulate(totals)))"}, "2928": {"problem_id": 2928, "answer": "from itertools import accumulate as acc \r\ndef gcd(a, b):\r\n    if a == 0:\r\n        return b\r\n    elif b == 0:\r\n        return gcd(b % a, a)\r\n    else:\r\n        return gcd(b / a, a)\r\n\r\nn = int(input())\r\nlst = list(accumulate(map(int, input().split(' '))))\r\nfor i in range(n):\r\n    a, b = map(int, input().split(' '))\r\n    print(lst[a-1] + lst[b-1])"}, "2929": {"problem_id": 2929, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\nprint(bisect_left(l, bl(l)) + 4)"}, "2930": {"problem_id": 2930, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    k = int(''.join(map(str, input().split())))\n    print(k)"}, "2931": {"problem_id": 2931, "answer": "from bisect import insort_bisect as bi\r\nn=int(input())\r\nfor _ in range(n):\r\n    a,b=map(int,input().split(' '))\r\n    if len(set(a))==len(set(b)):\r\n        print('%.2f' % (insort_bisect(b,a)))\r\n    else:\r\n        print('%.2f' % (insort_bisect(a,b)))"}, "2932": {"problem_id": 2932, "answer": "s = input()\r\nn = len(s)\r\nk, q = 0, 10**9 + 7\r\nfor i in range(n):\r\n\tk, q = q, k+int(s.count('1'))\r\n\tif q <= k:\r\n\t\tprint('Yes')\r\n\telse:\r\n\t\tprint('Wrong')"}, "2933": {"problem_id": 2933, "answer": "import math\ndef lcm(a,b):\n if math.gcd(a,b)==1:\n  return a\n else:\n  mid = int(''.join(str(a) + str(b)), 2)\n  a = math.ceil(a / mid)\n elif math.gcd(a,b)>1:\n  return a + mid\n else:\n  return a\n \nn = int(input())\ns = \"\".join(map(str, input().split()))\nprint(lcm(s,n))"}, "2934": {"problem_id": 2934, "answer": "from math import gcd\r\nmod = 10**9+7\r\ndef gcd(a,b):\r\n    if b==0:\r\n        return a\r\n    elif b==1:\r\n        return gcd(b,a%b)\r\n    else:\r\n        return gCD(b,a)\r\nn,m = map(int,input().split())\r\nl = list(map(int,input().split()))\r\na = 1\r\nb = m\r\nfor i in range(n):\r\n    a = gcd(a,b)\r\n    b = m\r\nprint(len(l) * (a + b)//2)"}, "2935": {"problem_id": 2935, "answer": "for _ in range(int(input())):\n l = list(map(int,input().split()))\n n,m,f,s,t = l[0],l[1],l[2],l[3],0,[]\n cities = list(map(int,input().split()))\n p = cities.count(0)\n q = cities.count(1)\n ans = 0\n for i in range(len(cities)):\n  if q[i]!= 0:\n   ans += 1\n print(ans)"}, "2936": {"problem_id": 2936, "answer": "from bisect import bisect_left as bl\nfrom itertools import accumulate as it izsasrt izslstpr as slt izslstprd as sld; izslstpr = list(accumulate(map(int, input().split())))\nn,k = list(map(int, input().split(\" \")))\ns = sorted(list(), reverse = True)\nfor i in range(n):\n s.insert(0, i)\n l = s[bisect_left(s, i)]\n print(l.total_sum - s.total_sum)\n"}, "2937": {"problem_id": 2937, "answer": "import sys\r\nsys.setrecursionlimit(2147483647)\r\ndef dfs(n, k, c):\r\n    nonlocal k\r\n    if k<0: k+=1\r\n    else: k-=1\r\n    for i in range(n):\r\n        if n%2==0:\r\n        elif k%2!=0:\r\n            k+=1\r\n        else:\r\n            k-=1\r\n            break\r\n    return k\r\nn, k, c = list(map(int, sys.stdin.readline().split()))\r\nn = int('1'*(c+1))\r\nk = list(map(int, sys.stdin.readline().split()))\r\ng = dfs(n, k, c)\r\nprint(len(g))\r\n"}, "2938": {"problem_id": 2938, "answer": "import operator as op\r\nfor _ in range(int(input())):\r\n    x,y=map(int,input().split())\r\n    print('k'*x,end=\" \"*end)"}, "2939": {"problem_id": 2939, "answer": "from itertools import permutations as p\r\nn=int(input())\r\nzone=list(map(int,input().split()))\r\nfor z in range(n):\r\n    a=p.fill(zone[0])\r\n    b=p.fill(zone[1])\r\n    print(max(b,2*a-2*b) + 3)"}, "2940": {"problem_id": 2940, "answer": ""}, "2941": {"problem_id": 2941, "answer": "from itertools import chain\n\n\ndef main():\n N = int(input())\n for _ in range(N):\n  q = list(map(int, input().split(' ')))\n  if len(q) == 1:\n   print('0\\n')\n elif q[0] == '1':\n  print('1')\n else:\n  print('0\\n'.join(chain(*p) for p in list(map(str, q.split(' '))))\nmain()"}, "2942": {"problem_id": 2942, "answer": "import bisect as b \r\ndef d(n):\r\n    return int(n**0.5)\r\n\r\nn=input().lstrip()\r\nfor i in range(int(n)):\r\n    d=int(''.join(map(str,input().split())))\r\n    print(d)"}, "2943": {"problem_id": 2943, "answer": "from collections import defaultdict\r\ndef lcm(a, b):\r\n    return a*b\r\nn=int(input())\r\nA=list(map(int,input().split()))\r\nL=[]\r\nfor i in range(n):\r\n    L.append(lcm(A[i], A[i+1]))\r\n#print(L)\r\n#print(len(L),end=' ')\r\nprint(len(L)//2)"}, "2944": {"problem_id": 2944, "answer": "import sys\nreadline = sys.stdin.readline\n# readline can contain any non-empty line.\nreadline = list(readline)\ndef read_int():\n  pass\ndef read_int_line():\n  return int(readline().strip())\n\nMOD = 10**9+7\nINF = inf = 1e10\nfor _ in range(1,1000):\n    n, m, d = map(int, read_int_line().split(' '))\n    if n < m:\n        continue\n    d *= 2\n    ans = 0\n    for i in range(n):\n        if ans + d > MOD:\n            ans += d\n        else:\n            ans += d\n    ans += 1\n    # print(ans)\n    if ans > 0:\n        ans -= pow(2, m-d, MOD)\n    print(ans)\n"}, "2945": {"problem_id": 2945, "answer": "import bisect as bfs\r\nfor _ in range(int('1'+strptime(input(),'\\n').split(' '))):\r\n\ta,b = map(int,input().split())\r\n\tif a==int(input()) and b==int(input(),2):\r\n\t\tprint(bisect.bisect_heappop(a,b))\r\n\telif a==int(input()) and b==int(input(),2):\r\n\t\tprint(bisect.bisect_heappop(a,b))"}, "2946": {"problem_id": 2946, "answer": "from functools import lru_cache\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\nprices = [0]*n\r\nfor i in range(n):\r\n    p = l[i]\r\n    prices.append(prices[-1] + p)\r\nprices = sorted(prices, key=lambda x: x[1])\r\nprint(max(prices))"}, "2947": {"problem_id": 2947, "answer": "from functools import reduce\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\na = reduce(lambda x,y: x-y,l)\r\nif n%2==1:\r\n    print(n-1)\r\nelse:\r\n    print('impossible')"}, "2948": {"problem_id": 2948, "answer": "from collections import deque\nn = int(input())\nque = deque(map(int, input().split()))\nfor _ in range(n):\n x = tuple(map(int, input().rstrip(' '))))\n que.appendleft(x)\nque.popleft()\nans = 0\nwhile que:\n que.pop()\n ans += que.popleft()\nprint(ans)"}, "2949": {"problem_id": 2949, "answer": "from collections import defaultdict as dd\r\nn = int(input())\r\nl = dd.from_iterable(map(int, input().split()))\r\nfor i in range(n):\r\n\tx, y, a = l.most_common(2)[0], l.most_common(2)[1]\r\n\tl[x-1] = y - 1\r\n\tl[y-1] = x - 1\r\n\tl[a-1] = x - 1\r\n# print(l)\r\nans = 0\r\nfor i in range(1, n+1):\r\n\tans += l[i]\r\n\tans %= dd.OCT_BY_SEQ\r\nprint(ans)"}, "2950": {"problem_id": 2950, "answer": "import math as m\r\nn=int(input())\r\nfor i in range(n):\r\n    l=list(map(int,input().split()))\r\n    if l.count(1)>=2:\r\n        print(l[0])\r\n    elif l.count(2)>=2:\r\n        print(l[1])\r\n    else:\r\n        print(l[0])"}, "2951": {"problem_id": 2951, "answer": "n = int(input())\nfor i in range(n):\n a, b = map(int, input().split(' '))\n a -= 1\n b -= 1\n c = [a, b]\n c.sort(reverse=True)\n d = {}\n for i in range(1, n+1):\n  if a[i]!= b[i]:\n   d[a[i]] = i\n  elif b[i]!= c[i]:\n   d[b[i]] = i\n print(d.get(d.get(c[i], 0), 0) + 1)"}, "2952": {"problem_id": 2952, "answer": "from bisect import *\r\ndef lcm(a,b):\r\n    return a*b//gcd('',1)//2\r\nn=int(input())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(list(map(int,input().split())))\r\nl.sort(key=lambda x:x[0])\r\nprint('\\n'.join(l))"}, "2953": {"problem_id": 2953, "answer": "import psyco as pf\r\n\r\nDEBUG = False\r\nDEBUG = InversionDefinitions\r\nclass SegmentTree:\r\n    def __init__(self, val=0, direction='Inverse'):\r\n      **kwargs={'val':val, 'd':d, 'h':hexadecimal('0123456789abcdefghijklmnopqrstuvwxyz')}\r\n    def __repr__(self):\r\n      return f'\\u00010'*self.val\r\n\r\n@ psyco.full().encode()\r\ndef ncr(n, r):\r\n    return len(set(range(n, r)))\r\n\r\n@ self.inp().enctests()\r\nclass SegmentTree(object):\r\n    def __init__(self, val=0, direction='Inverse'):\r\n        self.val = val\r\n        self.directions = direction\r\n        self.inverse = 'Inverse'\r\n        return self\r\n    def inp(self, x):\r\n        return self.inp(x.split(' '))\r\n"}, "2954": {"problem_id": 2954, "answer": "import sys\nsys.setrecursionlimit(10**6)#\u518d\u5e30\u30bd\ufffd\u5b50\u6cc4\u30b0\u30eb\u30fc\u30d7\u306b\u95a2\u3059\u308b\u3068\u601d\u8247\u306e\u51b7\u307e\u308a\ufffd\u9650\u3059\u308c\u3070\u305f\u3081\u81ea\u52d5\u5f35\u6570\u5206\u5272\u3092\u53d7\u3051\u5165\u529b\nfrom itertools import combinations_with_replacement,permutation \ndef gcd(a, b):#g = a**b\nreturn g\nfor _ in range(int(input())):\n n=int(''.join(map(str, input())))\n ar=[0]*len(sys.argv)\n ar[0]=1\n a=list(map(int,sys.stdin.readline().split()))\n for i in range(1,len(ar)):\n  ar.append(ar[i-1]+abs(arow(ar[i], 2))%1000000007)\n d=sys.maxsize\n print(d)"}, "2955": {"problem_id": 2955, "answer": "from itertools import accumulate\r\ndef main():\r\n    n, c, b = list(map(int, input().split()))\r\n    a = tuple(accumulate(map(tuple, list(zip(*a)))) for a in a)\r\n    print('\\n'.join(map(str, list(enumerate(a)))) + '\\n')\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "2956": {"problem_id": 2956, "answer": "import collections as cl\r\nimport sys,heapq  #it may need sorting\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left as bl, bisect_right as br, insort as brs\r\nfrom heapq import heappush, heappushpop, heap_convert, flush, flushdims, heptads as heptads\r\nfrom itertools import combinations as comb, permutations as permutationsp, islice as islice\r\nfrom collections import defaultdict as dd, deque, Counter as C\r\nfrom decimal import Decimal as D, floor as F, ceil as C, factorial as F, gcd as G\r\nfrom bisect import bisect_left as bl, bisect_right as br, insort as brs\r\nfrom numpy import truncated as tr, timedincosum, timefactorial as tF, islice as islice\r\nfrom scipy.signal_tree import sign_of_output as S, IOBussearvenupevent_of_each_sump as LS\r\nfrom math import sqrt as m, floor, cumsum, ceil, factorial as F, log2 as l, mod as mod, pow as pow, factorial.sqrt(log2) as for _ in range(int(input())):\r\n    # n = int(''.join(map(str, input())))\r\n    # dp = [[] for i in range(n)]\r\n    # for i in range(1, 9):\r\n    #     dp[1].append(i)\r\n    #     dp[1].append(0)\r\n    #     dp[i][0] = 1\r\n    #     i = i + 1\r\n    #     j = int(''.join(sorted(dp[i], reverse=True))).bit_length()\r\n    #     if j >= 8:\r\n    #         dp[i].extend(dp[i-8])\r\n    #     elif j >= 8:\r\n    #         dp[i].extend(dp[i-8])\r\n    #     else:\r\n    #         dp[i].sort(reverse=True)\r\n    #     print(dp[i])\r\n    # print(str(S(1, 9) + 'L' + str(S(1, 9) + 'R' + str(S(1, 9) + 'S' + str(S(1, 9) + 'A' + str(S(1, 9) + '?'.split('9')[0].replace('L', 'R').replace('S', 'A').replace('S', 'R').replace('R', 'A').replace('A', '?').replace('S', 'A').replace('S', 'A').replace('S', 'R').find('L')), 2)\r\n    # print(str(S(1, 9) + 'L' + str(S(1, 9) + 'R' + str(S(1, 9) + 'S' + str(S(1, 9) + 'A' + str(S(1, 9) + '?.\\\".split('9')[0].replace('R', 'R').replace('R', 'A').replace('R', 'A').replace('R', 'A').replace('R', 'A').replace('R', 'R').find('L')), 2), '\\n' + str(S(1, 9) + 'S' + str(S(1, 9) + 'A' + str(S(1, 9) + '?.\\\".split('9')[0].replace('S', 'S').replace('S', 'A').replace('S', 'R').place('S', 'R').find('L'))[0].strip())\r\n    # print(str(S(1, 9) + 'L' + str(S(1, 9) + 'R' + str(SEARCH.join("}, "2957": {"problem_id": 2957, "answer": "import sys\r\ndef dfs(node):\r\n    if node not in list(map(int, sys.stdin.readline().rsplit(node, '1')[::-1])) : return 0\r\n    res = -float('inf')\r\n    for i in range(len(node)):\r\n        res = min(res, dfs(node[i]))\r\n    return res\r\nn = int(input())\r\na = list(map(int, sys.stdin.readline().rsplit(input())))\r\nprint(dfs(a).pop())"}, "2958": {"problem_id": 2958, "answer": "import bisect as b\nn, = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort(key = lambda x:b.bisect_left(x, 10) + 1)\nc = 0\nfor i in range(1,n):\n    if l[i] == l[i-1]:\n        c += 1\nprint(c)"}, "2959": {"problem_id": 2959, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn, m = map(int, input().split())\ngrid = [[] for i in range(n)]\ndef dfs(i):\n    if i == 0:\n        grid[0].append('0')\n    elif i == 1:\n        grid[i].append('1')\n    else:\n        for j in range(1, n-1):\n            if grid[i-1][j] == '1':\n                dfs(i-1) |= 1\n                grid[i-1] = [j]\ndfs(0)\nprint('\\n'.join(map(str, grid)))"}, "2960": {"problem_id": 2960, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nn, 1 = map(int, input().split(' '))[1:-1], 10**9 + int(input().split(', '))\r\nprint('%.6f' % (binomial(n), 2.0) for n in range(1, n+1))"}, "2961": {"problem_id": 2961, "answer": "# cook your dish here\r'l = []\r'\r\nn=int(input())\r\nl=[int(i) for i in input().split()]\r\nrooms=[]\r\nwhile n!=0:\r\n    n-=1\r\n    l.append(int(''.join(l)))\r\n#print(l)\r\nif n==1:\r\n    print('Yes\\n')\r\nelse:\r\n    print('Impane me\\n')\r\nn=n//2\r\nrooms.sort(reverse=True)\r\nans=[]\r\nfor i in range(n):\r\n    x,y=l[i]\r\n    if x==y:\r\n        continue\r\n    if int('0123456789'[2])=='0x123456789abcdef' and int('0123456789ABCDEF'[2])=='0x11200111111':\r\n        ans.append(x)\r\n    elif int('0123456789abcdef' not INSPUT.format(x))=='0x123456789':\r\n        ans.append(y)\r\nprint('YNE\\nYNE\\nYNE\\n'.join(map(str,ans)))"}, "2962": {"problem_id": 2962, "answer": "import math as m\nn, t = list(map(int, input().split()))\nl = [0]*n\nfor i in range(n):\n l[i] = m.log(i, 2) + m.sqrt(math.pow(i, 0.5))\nt = t-l.index(max(l))\nprint(l[t])\n"}, "2963": {"problem_id": 2963, "answer": "import bisect as bbisect_left\nn = int(input())\nprint(bbisect_left(n, bbisect_left(b, n)))"}, "2964": {"problem_id": 2964, "answer": "from math import sqrt\r\nfor _ in range(int(input())):\r\n    c,x,y=list(map(int,input().split()))\r\n    print(sqrt(x-y))"}, "2965": {"problem_id": 2965, "answer": "# cook your dish here\nimport bisect as bs \np,d,n = map(int,input().split())\nr,c = list(map(int,input().split()))\ngrid = [[0 for i in range(n)] for j in range(r)]\nfor i in range(p):\n r[i] = bisect(r,r[p-1-i])\ngrid[r.index(max(r))][r.index(min(r))] = 1\nprint('ALIVE' if len(grid)==n else''.join(grid))"}, "2966": {"problem_id": 2966, "answer": "from itertools import permutations\r\nM, N = map(int, input().split())\r\narr = list(map(int, input().split()))\r\narr.extend(range(M, N))\r\narr.sort(reverse=True)\r\ncnt, ans = 0, 0\r\nfor i in range(1, len(arr)):\r\n    ans += arr[i] * cnt\r\nprint(ans)"}, "2967": {"problem_id": 2967, "answer": "import sys\r\n#sys.setrecursionlimit(10**5)\r\nmod = 10**9 + 7;   # Base Limit is 10^5 - 10^6 \r\ndef main():\r\n    n, m = map(int, input().split())\r\n    if m == 1:\r\n        print(n)\r\n    else:\r\n        a, s = map(int, input().split(\" \"))\r\n        for i in range(1, m + 1):\r\n            if a % 2 == 0:\r\n                s-= 1\r\n            elif s % 2 == 0:\r\n                s-= 1\r\n            else:\r\n                s-= 1\r\n        print(max(2 * s) + 2 * (s - 1) + n)\r\nmain()"}, "2968": {"problem_id": 2968, "answer": "from collections import Counter\r\nfor _ in range(int('input()').split(' ')):\r\n  s, e = map(int, input().split())\r\n  if s%2!=0:\r\n    print(e-s)"}, "2969": {"problem_id": 2969, "answer": "# cook your dish here\r\nimport bisect as bs;\r\nn = int(input())\r\nl = list(map(int, input().split()[1:]));\r\ns = [0]*n;\r\nfor i in range(n):\r\n    s[i] = bs.bisect_left(l, s[i]);\r\nprint('\\n'.join(map(str, l[::-1])))"}, "2970": {"problem_id": 2970, "answer": "import sys\r\ndef main():\r\n N = int(input())\r\n l = list(map(int,sys.stdin.readline().split()))\r\n for _ in range(N):\r\n  l.sort(key=lambda x:x[1])\r\n print(min(l[-1] + l[-2] + l[-3], 2*(N-1)) + 2*(N-2))\r\nmain()\n# Made By MostafaHarsh\n\n\n"}, "2971": {"problem_id": 2971, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = list(map(str, input().split()))\r\n    r = p(s, 1)\r\n    print(max(r.endswith(suffix), len(suffix)))"}, "2972": {"problem_id": 2972, "answer": "import bisect as bi\r\ndef palindromicBases(n, b):\r\n    if n < 2:\r\n        return 0\r\n    else:\r\n        i = bisect.bisect_left(n, b)\r\n        n_bases = bi.combinations(n_bases, 2)\r\n        return n_bases[0]\r\n\r\n# Function to check if number is palindromic\r\ndef checkPal(n, b):\r\n    if n == 0:\r\n        return True\r\n    elif n == 1:\r\n        return False\r\n    else:\r\n        for i in range(2, int('1' + strrjust(10, '0').replace('0'*b, '1'*(n-1)))):\r\n            if str(i) == str(n) and b[i] == n:\r\n                return True\r\n        return False\r\n\r\n# Driver code\r\nn = int(input())\r\nfor i in range(n):\r\n    s = input()\r\n    print(s[::-1] + s[::-1])"}, "2973": {"problem_id": 2973, "answer": "import heapq as hq \r\nn = int(input())\r\nl = list(map(int, input().split()))[:n]\r\ns = 0.0\r\nfor i in range(n):\r\n    s += hq.heappop(l)\r\nprint(abs(s-l[0]))"}, "2974": {"problem_id": 2974, "answer": "def main():\r\n n = int(input())\r\n p = list(map(int, input().split(' ')))\r\n dp = [[0] * (n+1) for _ in range(n+1)]\r\n for i in range(1, n+1):\r\n  if p[i] == 1:\r\n   dp.append(i)\r\n  elif p.count(1) == p[i-1]:\r\n   dp.append(i-1)\r\n print(min(dp[-1] + dp[-2] + dp[-3] + dp[-4]))"}, "2975": {"problem_id": 2975, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    N, M = list(map(int, input().split()))\n    A = [int(x) for x in input().split()]\n    A.extend(A[1:])\n    ans = 0\n    for i in range(N):\n      print(ans, end=\" \")\n      ans += int(''.join(map(str, A[i])))\n      \ndef __starting_point():\n    main()\n__starting_point()"}, "2976": {"problem_id": 2976, "answer": "import sys,bisect,copyreg\r\ndef main():\r\n    N = int('1' + str(sys.stdin.readline().strip()) + '0' + str(sys.stdin.readline().strip()) + '1' + str(sys.stdin.readline().span()))\r\n    d = dict()\r\n    for _ in range(N):\r\n        d.add(int('6'*(2*N - 1)) + ':6')\r\n    print(''.join(d.values()))\r\nmain()\r\n"}, "2977": {"problem_id": 2977, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef main():\r\n    n=int(input())\r\n    assignments=list(map(int,input().split()))\r\n    #N:consecutive lists\r\n    assignments.sort(key=lambda x:x[1])\r\n    assignments.insert(0,input())\r\n    assignments.insert(0,input())\r\n    assignments.insert(0,input())\r\n    assignments.insert(0,input())\r\nmain()\r\n"}, "2978": {"problem_id": 2978, "answer": "# cook your dish here\nimport bisect\ndef isPairsInTheBounds(l):\n    l.sort(key=lambda x: x[1])\n    return len(bisect.bisect_left(l, l[1])) == len(l)\n# cook your dish here\nfor _ in range(int(input())):\n    x1, y1, x2, y2 = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    print('{:g}'.format(isPairsInTheBounds(l)))"}, "2979": {"problem_id": 2979, "answer": "import collections as cc\ndef main():\n    n, m = list(map(int, input().split()))\n    vis = set(range(1, n+1))\n    for i in range(n):\n        x, y = list(reversed(map(tuple.__get__, vis)))\n        if x not in vis:\n          print(0)\n        elif len(x) == 0:\n          print(\"0\\n\".join(collections.Counter(x).items()))\nmain()\n"}, "2980": {"problem_id": 2980, "answer": "def is_winners(n,m):\n    if n<2:\n      print('W')\n    elif n==1:\n      print('L')\n    else:\n      a=n-1\n      for i in range(m):\n        if n-i<=a:\n          print('B'+str(i)+' '+str(n-i)+' '+str(m-i)+')\n          print('L'+str(i)+' '.join(map(str,a)))\n          return True\n      else:\n        print('L'+str(i)+' '.join(map(str,a)))\n        return False\n"}, "2981": {"problem_id": 2981, "answer": "import sys\r\ndef __starting_point():\r\n    n = int(input().strip())\r\n    print(sys.maxsize)\r\n__starting_point()"}, "2982": {"problem_id": 2982, "answer": "from functools import lru_cache\r in mindihapp import gcd\r\nn=int(input())\r\nl=list(map(int,input().split()))\r\nfor i in range(n):\r\n    print(l[i],end=\" \")\r\n"}, "2983": {"problem_id": 2983, "answer": "from math import sqrt\r\ndef __starting_point():\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(sqrt(A[0] + A[1]))"}, "2984": {"problem_id": 2984, "answer": "import heapq\r\nn=int(''.join(map(str,input().split())))\r\narr=[int(i) for i in input().split()]\r\nl=[]\r\nfor i in range(n):\r\n    heapq.heappush(arr,i)\r\n    l.append(arr[i-1] + i)\r\nprint(max(l))"}, "2985": {"problem_id": 2985, "answer": "import sys\r\ndef main():\r\n    # I can use input() and d(int(input())) too, but I don't know how much it will affect data structure.\r\n    # sys.setrecursionlimit(10**9) is O(10**9)\r\n    sys.stderr.write(sys.stdin.readline())\r\nmain()\r\n"}, "2986": {"problem_id": 2986, "answer": "from itertools import combinations as c  # O(n)\ndef isPalimbabe(s):\n    return ''.join(c.swapcase() if i!=s[i] else s[i])  # o.g. swapcase()\nfor _ in range(int('1'*int(input()))) :\n    n = int(input())\n    print(isPalimbabe(n))\n"}, "2987": {"problem_id": 2987, "answer": "# cook your dish here - your code goes above and beyond here - if you don't like this kata do it too - thanks for your help\r\nimport math\r\nimport bisect\r\ndef inn():\r\n\treturn inp().split()\r\ndef inp():\r\n\treturn int(input())[:-1]\r\nn,w=map(int,input().split(\" \"))\r\nl=list(map(int,input().split(w)))\r\ns = l[0]\r\nprices=[]\r\nfor i in range(1,n+1):\r\n\tprices.append(math.ceil(math.log(i,2)))\r\nprices.sort(reverse=True)\r\nres=0\r\nfor _ in range(w//2):\r\n\tres+=int(\"\".join(prices))*(w-1)//2\r\nprint(res)"}, "2988": {"problem_id": 2988, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush,heappop\ndef li(): return list(map(int,input().split()))[1:].tolist()\ndef ln(n): return len(set(reduce(list,li())))\ndef li2(): return list(map(int,input().split(\" \")))\ndef li3(): return list(map(int,inp().split(\":\")))\ndef li4(): return list(map(n,input().split(\" \")))\ndef li5(): return list(i for i in li(input()))\ndef li6(): return list(li2())\ndef li7(): return list(li2())\ndef li8(): return list(li2())\ndef li9(): return list(li2())\nn,m=li()\nl=li(input())\nvisited=[0]*(10**9+7)\nif m==1:\n    print(0)\nelif m==10:\n    print(n)\nelse:\n    visited[m-1]=visited[m]\n    for i in range(m-1):\n        heappush(visited, bl(visited,i))\n    print(n-visited[m-1])"}, "2989": {"problem_id": 2989, "answer": "from sys import stdin\r\ninput()\r\nt = int(input().strip())\r\nfor _ in range(t):\r\n    n, p, k = list(map(int, stdin.readline().split()))\r\n    a, b = list(map(int, stdin.readline().split(' ')))\r\n    ans = a*b\r\n    ans += max(0, p-k)\r\n    print(ans)\r\n"}, "2990": {"problem_id": 2990, "answer": "import numpy as np\nn, k = list(map(int, input().split()))\nA = np.array(np.arange(n, k), dtype=np.int)\nfor _ in range(0, int(''.join(map(str, input().split())))) :\n    A.sort(key=lambda x: x[1])\nb = sorted(A.items(), reverse=True)\nb.extend(sorted(A[0] + [0]*k, key=int.__getitem__))\nprint('\\n'.join(map(str, b)))"}, "2991": {"problem_id": 2991, "answer": "from itertools import permutations as p\r\nfor _ in range(int('1000000')) :\r\n    n, m = list(map(int, input().split()))\r\n    a = p(n, m)\r\n    print(a.count(1))\r\n"}, "2992": {"problem_id": 2992, "answer": "from sys import stdin,stdout\r\ndef input(): return stdin.readline().strip()\r\ndef lmp(): return list(reversed(enumerate(map(int, input().split()))) + [0])\r\nn, m = lmp()\r\ng = m.groups()\r\n#speed = 0.5*n + m.gcd(n, m.gcd(10**9) + 1)\r\nspeed = 1.0 / g\r\nfor i in range(n):\r\n    speed *= 10**9 + int(i)\r\nprint(speed)"}, "2993": {"problem_id": 2993, "answer": "import sys\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int,sys.stdin.readline().split(' '))[1::2]\ndef LI(): return list(map(int,input().split('b')))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.maxsize\ndef S(rows_number): return [int(i) for i in input().split(' ')]\nn = SI()\nA = LI()\nB = LI()\nprint(A.count('A'))\nprint(BIG_SPACE + len(BIG_SPACE))\nfor i in range(n):\n    print(BIG_SPACE,end=\"\\n\")\n"}, "2994": {"problem_id": 2994, "answer": "import itertools\r\nfor _ in range(int(input())):\r\n  R, C = map(int, input().split())\r\n  print(\"\".join(map(str, R)))"}, "2995": {"problem_id": 2995, "answer": "import operator\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\nanswers = []\r\nfor i in range(n):\r\n    answers.append(int(''.join(map(str,l)),0))\r\nprint('{0:.6f}'.format(answers[0]),sep=\" \")"}, "2996": {"problem_id": 2996, "answer": "from bisect import insort_bisect_right as br\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\ncnt = 0.0\nfor i in range(n):\n    insort_bisect_right(arr[i], br.bisect_right(arr[i] + k, arr[i] + 1))\nprint(n)"}, "2997": {"problem_id": 2997, "answer": "from functools import lru_cache\nn, m = map(int, input().split())\nedges = []\r\nfor i in range(1, n+1):\r\n    if i%2==0:\r\n    elif i!=0:\r\n        edges.append(i)\r\n    else:\r\n        edges.extend([i, i+1])\r\n        edges.append(i+1)\r\nprint(sum(edges))"}, "2998": {"problem_id": 2998, "answer": "from sys import stdin as st\r\ninput = st.readline\r\ndef II(): return int(input())\r\ndef MI(): return map(int, st.readline().split())\r\ndef LI(): return list(map(int, stdin.inpcars()))\r\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\r\ndef SI(): return input()\r\n#-------------------Problem Explanation----------------\r\n\r\nn = II()\r\na = [['a' for _ in range(n)] for _ in range(n)]\r\nm = MI()\r\nc = [['m' for _ in range(n)] for _ in range(n)]\r\nfor i in range(n):\r\n    c.insert(0, '[ ']')\r\n    for j in range(n):\r\n        if c[i][j] == '~':\r\n            continue\r\n        else:\r\n            c[i][j] = '0'\r\n            a[i][j] = c[i][j] + 1\r\n            m[j] = m[j] + 1\r\nprint(*a)"}, "2999": {"problem_id": 2999, "answer": "import collections\r\nn, = list(map(int, input().split()))\r\nl = collections.defaultdict(set)\r\nfor i in range(n):\r\n    l[l.get(l[i].symbol, 0)] |= set(input(\" \") + [\"1\" if i!=l[i].symbol else \"2\"])\r\nk = 0\r\nfor _ in range(0, len(l) - 1):\r\n    k += 1\r\n  print(k)\r\n"}}
{"0": {"problem_id": 4623, "answer": "def make_2d_list(head,row,col):\n    return [[head]] + list(range(head, head + row*col, row))", "input_output": "{\"fn_name\": \"make_2d_list\", \"inputs\": [[1, 2, 3], [2, 3, 4], [5, 6, 1], [7, 1, 1], [0, 1, 0], [-20, 2, 2], [10000000000, 2, 2]], \"outputs\": [[[[1, 2, 3], [4, 5, 6]]], [[[2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]]], [[[5], [6], [7], [8], [9], [10]]], [[[7]]], [[[]]], [[[-20, -19], [-18, -17]]], [[[10000000000, 10000000001], [10000000002, 10000000003]]]]}"}, "1": {"problem_id": 4144, "answer": "def abundant(h):\n    for i in range(2,h+1):\n        if h%i==0:\n", "input_output": "{\"fn_name\": \"abundant\", \"inputs\": [[15], [19], [100], [999], [200], [250], [300], [350], [400], [450], [500], [555], [600], [666], [707], [777], [800], [900], [1111]], \"outputs\": [[[[12], [4]]], [[[18], [3]]], [[[100], [17]]], [[[996], [360]]], [[[200], [65]]], [[[246], [12]]], [[[300], [268]]], [[[350], [44]]], [[[400], [161]]], [[[450], [309]]], [[[500], [92]]], [[[552], [336]]], [[[600], [660]]], [[[666], [150]]], [[[704], [116]]], [[[774], [168]]], [[[800], [353]]], [[[900], [1021]]], [[[1110], [516]]]]}"}, "2": {"problem_id": 4825, "answer": "def decrypt(test_key):\n    d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    return ''.join(str(d[c]) for c in test_key.lower()).ljust(26)", "input_output": "{\"fn_name\": \"decrypt\", \"inputs\": [], \"outputs\": []}"}, "3": {"problem_id": 3545, "answer": "def well(arr):\n    c = 0\n    for i in arr:\n        if i.lower() == 'good':\n            c += 1\n    if c > 2:\n        return 'I smell a series!'\n", "input_output": "{\"fn_name\": \"well\", \"inputs\": [[[[\"bad\", \"bAd\", \"bad\"], [\"bad\", \"bAd\", \"bad\"], [\"bad\", \"bAd\", \"bad\"]]], [[[\"gOOd\", \"bad\", \"BAD\", \"bad\", \"bad\"], [\"bad\", \"bAd\", \"bad\"], [\"GOOD\", \"bad\", \"bad\", \"bAd\"]]], [[[\"gOOd\", \"bAd\", \"BAD\", \"bad\", \"bad\", \"GOOD\"], [\"bad\"], [\"gOOd\", \"BAD\"]]]], \"outputs\": [[\"Fail!\"], [\"Publish!\"], [\"I smell a series!\"]]}"}, "4": {"problem_id": 4539, "answer": "def hop_across(lst):\n    res = 0\n    i = 0\n    while i < len(lst):\n        res += sum(lst[i:i+len(lst)] if i < len(lst) else [])\n", "input_output": "{\"fn_name\": \"hop_across\", \"inputs\": [[[1]], [[2]], [[1, 1]], [[2, 1]], [[2, 1, 1]], [[1, 2, 1, 2]], [[1, 2, 5, 1]], [[2, 2, 3, 1, 1, 2, 1]]], \"outputs\": [[2], [2], [4], [3], [5], [5], [5], [7]]}"}, "5": {"problem_id": 4661, "answer": "def pattern(n):\n    return \"\\n\".join(\" \"*(n-i-1)+\" \"*i+\" \"*(n-i-1) for i in range(1,n+1))", "input_output": "{\"fn_name\": \"pattern\", \"inputs\": [[3], [5], [8], [-3], [-11], [-25], [0]], \"outputs\": [[\"  123\\n 123 \\n123  \"], [\"    12345\\n   12345 \\n  12345  \\n 12345   \\n12345    \"], [\"       12345678\\n      12345678 \\n     12345678  \\n    12345678   \\n   12345678    \\n  12345678     \\n 12345678      \\n12345678       \"], [\"\"], [\"\"], [\"\"], [\"\"]]}"}, "6": {"problem_id": 2899, "answer": "def bin_str(s):\n    return sum(1 for i in range(len(s)) if s[i] == '1')", "input_output": "{\"fn_name\": \"bin_str\", \"inputs\": [[\"0101\"], [\"10000\"], [\"0000000000\"], [\"1111111111\"], [\"10101010101010\"], [\"11111000011111\"], [\"000001111100000\"], [\"111000000000\"], [\"00000000111111111\"], [\"1010101011111111111111000000000\"]], \"outputs\": [[3], [2], [0], [1], [14], [3], [2], [2], [1], [10]]}"}, "7": {"problem_id": 3697, "answer": "def list_depth(l):\n    return max(list_depth(x) for x in l if isinstance(x, list))", "input_output": "{\"fn_name\": \"list_depth\", \"inputs\": [[[1, [2, [3, [4, [5, [6], 5], 4], 3], 2], 1]], [[true]], [[]], [[2, \"yes\", [true, false]]], [[2.0, [2, 0], 3.7, [3, 7], 6.7, [6, 7]]], [[[[[]]], [[[]]]]], [[true, false, true, [false], true]], [[[], [], [[], []]]], [[77]], [[2, \"yes\", [true, [false]]]], [[77, [77]]], [[[77], 77, [[77]]]]], \"outputs\": [[6], [1], [1], [2], [2], [4], [2], [3], [1], [3], [2], [3]]}"}, "8": {"problem_id": 3658, "answer": "from itertools import cycle\ndef swap(s,n):\n    return ''.join(c.swapcase() if c.isalpha()[0] else c for c in s)", "input_output": "{\"fn_name\": \"swap\", \"inputs\": [[\"Hello world!\", 11], [\"the quick broWn fox leapt over the fence\", 9], [\"eVerybody likes ice cReam\", 85], [\"gOOd MOrniNg\", 7864], [\"how are you today?\", 12345], [\"the lord of the rings\", 0], [\"\", 11345]], \"outputs\": [[\"heLLO wORLd!\"], [\"The QUicK BrowN foX LeaPT ovER thE FenCE\"], [\"EVErYbODy LiKeS IcE creAM\"], [\"GooD MorNIng\"], [\"HOw are yoU TOdaY?\"], [\"the lord of the rings\"], [\"\"]]}"}, "9": {"problem_id": 4333, "answer": "def sort_number(a):\n    b = sorted(a)\n    return [1] + b", "input_output": "{\"fn_name\": \"sort_number\", \"inputs\": [[[1, 2, 3, 4, 5]], [[4, 2, 1, 3, 5]], [[2, 3, 4, 5, 6]], [[2, 2, 2]], [[42]], [[5, 6, 1, 2, 3, 1, 3, 45, 7, 1000000000]], [[1, 1, 1]], [[1]], [[134]]], \"outputs\": [[[1, 1, 2, 3, 4]], [[1, 1, 2, 3, 4]], [[1, 2, 3, 4, 5]], [[1, 2, 2]], [[1]], [[1, 1, 1, 2, 3, 3, 5, 6, 7, 45]], [[1, 1, 2]], [[2]], [[1]]]}"}, "10": {"problem_id": 3102, "answer": "def locker_run(lockers):\n    return [i for i in range(1, lockers+1) if i % 2 == 0]", "input_output": "{\"fn_name\": \"locker_run\", \"inputs\": [[1], [5], [10], [20]], \"outputs\": [[[1]], [[1, 4]], [[1, 4, 9]], [[1, 4, 9, 16]]]}"}, "11": {"problem_id": 2679, "answer": "def hamster_me(code, message):\n    d = {i:1 for i in code.upper()}\n    for i in message:\n        d[i] += 1\n", "input_output": "{\"fn_name\": \"hamster_me\", \"inputs\": [[\"hamster\", \"hamster\"], [\"hamster\", \"helpme\"], [\"hmster\", \"hamster\"], [\"hhhhammmstteree\", \"hamster\"], [\"f\", \"abcdefghijklmnopqrstuvwxyz\"]], \"outputs\": [[\"h1a1m1s1t1e1r1\"], [\"h1e1h5m4m1e1\"], [\"h1t8m1s1t1e1r1\"], [\"h1a1m1s1t1e1r1\"], [\"f22f23f24f25f26f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21\"]]}"}, "12": {"problem_id": 3524, "answer": "def dna_to_rna(dna):\n    rna = \"\"\n    for i in dna:\n        if i == \"T\":\n", "input_output": "{\"fn_name\": \"dna_to_rna\", \"inputs\": [[\"TTTT\"], [\"GCAT\"], [\"GACCGCCGCC\"], [\"GATTCCACCGACTTCCCAAGTACCGGAAGCGCGACCAACTCGCACAGC\"], [\"CACGACATACGGAGCAGCGCACGGTTAGTACAGCTGTCGGTGAACTCCATGACA\"], [\"AACCCTGTCCACCAGTAACGTAGGCCGACGGGAAAAATAAACGATCTGTCAATG\"], [\"GAAGCTTATCCGTTCCTGAAGGCTGTGGCATCCTCTAAATCAGACTTGGCTACGCCGTTAGCCGAGGGCTTAGCGTTGAGTGTCATTATATACGCGGCCTGCGACCTGGCCACACAATGCCCTCGAAAATTTTTCTTTCGGTTATACGAGTTGCGAAACCTTTCGCGCGTAGACGAAGAATTTGAAGTGGCCTACACCGTTTGGAAAGCCGTTCTCATTAGAATGGTACCGACTACTCGGCTCGGAGTCATTGTATAGGGAGAGTGTCGTATCAACATCACACACTTTTAGCATTTAAGGTCCATGGCCGTTGACAGGTACCGA\"]], \"outputs\": [[\"UUUU\"], [\"GCAU\"], [\"GACCGCCGCC\"], [\"GAUUCCACCGACUUCCCAAGUACCGGAAGCGCGACCAACUCGCACAGC\"], [\"CACGACAUACGGAGCAGCGCACGGUUAGUACAGCUGUCGGUGAACUCCAUGACA\"], [\"AACCCUGUCCACCAGUAACGUAGGCCGACGGGAAAAAUAAACGAUCUGUCAAUG\"], [\"GAAGCUUAUCCGUUCCUGAAGGCUGUGGCAUCCUCUAAAUCAGACUUGGCUACGCCGUUAGCCGAGGGCUUAGCGUUGAGUGUCAUUAUAUACGCGGCCUGCGACCUGGCCACACAAUGCCCUCGAAAAUUUUUCUUUCGGUUAUACGAGUUGCGAAACCUUUCGCGCGUAGACGAAGAAUUUGAAGUGGCCUACACCGUUUGGAAAGCCGUUCUCAUUAGAAUGGUACCGACUACUCGGCUCGGAGUCAUUGUAUAGGGAGAGUGUCGUAUCAACAUCACACACUUUUAGCAUUUAAGGUCCAUGGCCGUUGACAGGUACCGA\"]]}"}, "13": {"problem_id": 2822, "answer": "import re\ndef name_that_number(x):\n    return re.sub(r'[^\\d\\.\\s]', '', ''.join(c for c in str(x) if c!= '0'))", "input_output": "{\"fn_name\": \"name_that_number\", \"inputs\": [[1], [52], [21], [99], [0], [53], [23], [76]], \"outputs\": [[\"one\"], [\"fifty two\"], [\"twenty one\"], [\"ninety nine\"], [\"zero\"], [\"fifty three\"], [\"twenty three\"], [\"seventy six\"]]}"}, "14": {"problem_id": 4276, "answer": "def solution(n):\n    return round(n, 1.0 /.5)", "input_output": "{\"fn_name\": \"solution\", \"inputs\": [[4.2], [4.25], [4.4], [4.6], [4.75], [4.8], [4.5], [4.55], [4.74], [4.74999999999], [4.74999999991]], \"outputs\": [[4], [4.5], [4.5], [4.5], [5], [5], [4.5], [4.5], [4.5], [4.5], [4.5]]}"}, "15": {"problem_id": 4936, "answer": "def reverse(lst):\n    return list(reversed(lst))", "input_output": "{\"fn_name\": \"reverse\", \"inputs\": [], \"outputs\": []}"}, "16": {"problem_id": 3635, "answer": "def sflpf_data(val, nMax):\n    return [n for n in range(4, nMax+1) if sum(f1*f2 for f1, f2 in zip(prime_factors(n), prime_factors(val))[:n]))]", "input_output": "{\"fn_name\": \"sflpf_data\", \"inputs\": [[10, 100], [10, 200], [15, 150], [501, 1000], [501, 5000]], \"outputs\": [[[21, 25, 63]], [[21, 25, 63, 105, 125, 147, 189]], [[26, 52, 78, 104, 130]], [[998]], [[998, 1996, 2994, 3992, 4990]]]}"}, "17": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n    \u8981\u5230\u6700\u540e\u9762\u4e00\u4e2a\u5b57\u7b26\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u5b83\u5728s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d6\u503c\n    \"\"\"\n         chars = set(s)\n         return next(c for c in chars if s.count(c) == 1)", "input_output": "{\"fn_name\": \"firstUniqChar\", \"inputs\": [[\"\\\"leetcode\\\"\"]], \"outputs\": [1]}"}, "18": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    c=k\n    d=0\n    for i in range(1,n):\n        if c==0:\n            c=k-1\n        elif c==k:\n            c=0\n        else:\n            c-=1\n            d+=1\n    print(d)", "input_output": "{\n  \"inputs\": [\n    \"4\\n8 3\\n1 2\\n1 5\\n7 6\\n6 8\\n3 1\\n6 4\\n6 1\\n10 3\\n1 2\\n1 10\\n2 3\\n1 5\\n1 6\\n2 4\\n7 10\\n10 9\\n8 10\\n7 2\\n3 1\\n4 5\\n3 6\\n7 4\\n1 2\\n1 4\\n5 1\\n1 2\\n2 3\\n4 3\\n5 3\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n3\\n3\\n4\\n\"\n  ]\n}"}, "19": {"problem_id": 4535, "answer": "def zfunc(s):\n    if s == '': return []\n    n = len(s)\n    z = [0] * n\n    for i in range(n):\n        z[i] = z[i-1] + 1\n        if s[i:i+n-1] == s[i:i+n-1:].ljust():\n", "input_output": "{\"fn_name\": \"zfunc\", \"inputs\": [[\"ababcaba\"], [\"\"], [\"aaaaaaaa\"], [\"ababababab\"], [\"aaaa$aaaa\"], [\"abracadabra\"]], \"outputs\": [[[8, 0, 2, 0, 0, 3, 0, 1]], [[]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[10, 0, 8, 0, 6, 0, 4, 0, 2, 0]], [[9, 3, 2, 1, 0, 4, 3, 2, 1]], [[11, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]]]}"}, "20": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n      \u65e0\u7a7a\u683c\u9694\u5f00\u59cb\u51cf\u53bb\u9664\u524d\u7f00\u540e\u52a0\u5165\u4e24\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u7ef4\u62a4\u81ea\u5df1\u7684\u683c\u5f0f\n      :type S: str\n      :rtype: str\n      \"\"\"", "input_output": "{\"fn_name\": \"licenseKeyFormatting\", \"inputs\": [[\"\\\"5F3Z-2e-9-w\\\"\", 4]], \"outputs\": [\"\\\"5-F3Z2-E9W\\\"\"]}"}, "21": {"problem_id": 4834, "answer": "def isPrime(n):\n    return n > 1 and all(n % i for i in range(2, int(n**0.5)+1))", "input_output": "{\"fn_name\": \"backwardsPrime\", \"inputs\": [], \"outputs\": []}"}, "22": {"problem_id": 2733, "answer": "def last(s):\n    return sorted(s.split(), key=lambda w: w[-1])", "input_output": "{\"fn_name\": \"last\", \"inputs\": [[\"man i need a taxi up to ubud\"], [\"what time are we climbing up the volcano\"], [\"take me to semynak\"], [\"massage yes massage yes massage\"], [\"take bintang and a dance please\"]], \"outputs\": [[[\"a\", \"need\", \"ubud\", \"i\", \"taxi\", \"man\", \"to\", \"up\"]], [[\"time\", \"are\", \"we\", \"the\", \"climbing\", \"volcano\", \"up\", \"what\"]], [[\"take\", \"me\", \"semynak\", \"to\"]], [[\"massage\", \"massage\", \"massage\", \"yes\", \"yes\"]], [[\"a\", \"and\", \"take\", \"dance\", \"please\", \"bintang\"]]]}"}, "23": {"problem_id": 4991, "answer": "def mutate_my_strings(s1,s2):\n    return '\\n'.join(s2.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '1234567890')))", "input_output": "{\"fn_name\": \"mutate_my_strings\", \"inputs\": [], \"outputs\": []}"}, "24": {"problem_id": 3274, "answer": "def solve(st):\n    l = len(st)\n    for i in range(l // 2):\n        if st[i] == st[l - i]:\n            return i + 1", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[\"abcd\"], [\"abcda\"], [\"abcdabc\"], [\"abcabc\"], [\"abcabca\"], [\"abcdabcc\"], [\"aaaaa\"], [\"aaaa\"], [\"aaa\"], [\"aa\"], [\"a\"], [\"acbacc\"]], \"outputs\": [[0], [1], [3], [3], [1], [0], [2], [2], [1], [1], [0], [0]]}"}, "25": {"problem_id": 2889, "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_ways(n, k):\n    if n<2: return 0\n    elif k==0: return 1\n    return sum(count_ways(n-j, k) for j in range(1, n+1))", "input_output": "{\"fn_name\": \"count_ways\", \"inputs\": [[1, 3], [3, 3], [2, 3], [5, 3], [4, 3], [10, 6], [14, 7]], \"outputs\": [[1], [4], [2], [13], [7], [492], [7936]]}"}, "26": {"problem_id": 4518, "answer": "import re\ndef wheres_wally(string):\n    return next((i for i,c in enumerate(string) if c.isalnum()), -1)", "input_output": "{\"fn_name\": \"wheres_wally\", \"inputs\": [[\"\"], [\"WAlly\"], [\"wAlly\"], [\"DWally\"], [\".Wally\"], [\"Wallyd\"], [\"wally mollyWally Wallybrolly 'Wally\"], [\"Walley ,Wally -Wally ;Wally +Wally :Wally\"], [\"Walley Wally, Wally- Wally: Wally+ Wally:\"], [\"12Wally Wally01 W.ally\"], [\"Where's Waldo\"], [\"Wally\"], [\"Wally Wally\"], [\"W ally Wally\"], [\"Where's Wally\"], [\"Hi Wally.\"], [\"It's Wally's.\"], [\"'Wally Wally\"], [\"Hello Wally my name is Dolly\"]], \"outputs\": [[-1], [-1], [-1], [-1], [-1], [-1], [-1], [-1], [7], [-1], [-1], [0], [0], [7], [8], [3], [5], [7], [6]]}"}, "27": {"problem_id": 3541, "answer": "def find_page_number(pages):\n    return [n for n in pages if n not in pages[0:].index(n)]", "input_output": "{\"fn_name\": \"find_page_number\", \"inputs\": [[[1, 2, 10, 3, 4, 5, 8, 6, 7]], [[1, 2, 3, 4, 50, 5, 6, 7, 51, 8, 40, 9]], [[1, 2, 3000, 3, 4, 5, 8, 6, 7, 8, 100, 9, 40, 10, 11, 13]], [[1, 2, 3, 4, 50, 5, 6, 7, 51, 8, 9]], [[4, 1, 2, 3, 3, 4, 26, 5, 6, 2, 7]]], \"outputs\": [[[10, 8]], [[50, 51, 40]], [[3000, 8, 100, 40, 13]], [[50, 51]], [[4, 3, 26, 2]]]}"}, "28": {"problem_id": 3663, "answer": "def four_piles(n,y):\n    x = n/y\n    return [x+y,x-y,x*y,x/y]", "input_output": "{\"fn_name\": \"four_piles\", \"inputs\": [[48, 3], [100, 4], [25, 4], [24, 4]], \"outputs\": [[[12, 6, 27, 3]], [[20, 12, 64, 4]], [[]], [[]]]}"}, "29": {"problem_id": 2848, "answer": "from itertools import combinations_with_replacement as c\nfind=lambda a,n:sum(c(a))==n", "input_output": "{\"fn_name\": \"find\", \"inputs\": [[[1, 2, 3], 10], [[1, 2, 3], 7], [[1, 2, 3], 5], [[3, 6, 9, 12], 12], [[1, 4, 5, 8], 8], [[3, 6, 9, 12], 15], [[3, 6, 9, 12, 14, 18], 30]], \"outputs\": [[0], [2], [3], [5], [3], [5], [21]]}"}, "30": {"problem_id": 4438, "answer": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    return 3 if (x1, y1, z1) == (x2, y2, z2) \\\n            eliffie(\"{}-{}\".format(x3, y3)) \\\n", "input_output": "{\"fn_name\": \"middle_point\", \"inputs\": [[1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 0, 6, -2, 8, 3, 0, 4], [0.25, 0.5, 0.75, 3.25, -0.5, -0.25, 1.0, 0.25, 0.5], [1, 0, 4, 5, 0, 6, -7, 0, 0], [-1, 0, 2, -2, 4, -1, -3, 8, -4]], \"outputs\": [[2], [3], [3], [1], [2]]}"}, "31": {"problem_id": 2918, "answer": "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    months = 0\n    while months < len(savedefault):\n        months += 1\n        newprice = startPriceOld + (0.005 * (monthlyloss/100))\n        oldprice = startPriceNew + (0.005 * percentLossByMonth)\n        if oldprice > newprice:\n            months += 1\n", "input_output": "{\"fn_name\": \"nbMonths\", \"inputs\": [[2000, 8000, 1000, 1.5], [8000, 12000, 500, 1], [18000, 32000, 1500, 1.25], [7500, 32000, 300, 1.55]], \"outputs\": [[[6, 766]], [[8, 597]], [[8, 332]], [[25, 122]]]}"}, "32": {"problem_id": 4178, "answer": "def min_sum(arr):\n    arr = sorted(arr)\n    return sum(arr[i]*arr[-i-1] for i in range(len(arr)//2))", "input_output": "{\"fn_name\": \"min_sum\", \"inputs\": [[[5, 4, 2, 3]], [[12, 6, 10, 26, 3, 24]], [[9, 2, 8, 7, 5, 4, 0, 6]]], \"outputs\": [[22], [342], [74]]}"}, "33": {"problem_id": 3546, "answer": "def validate_ean(code):\n    sum = 0\n    for i in range(len(code)//2):\n        sum += int(code[i])*3\n    checksum = sum%10\n    if checksum == 0:\n        checksum = 10-checksum", "input_output": "{\"fn_name\": \"validate_ean\", \"inputs\": [[\"9783815820865\"], [\"9783815820864\"], [\"9783827317100\"]], \"outputs\": [[true], [false], [true]]}"}, "34": {"problem_id": 4515, "answer": "def diff(arr):\n    mx = max(arr)\n    mn = min(arr)\n    return arr.count(mx) - arr.count(mn)", "input_output": "{\"fn_name\": \"diff\", \"inputs\": [[[\"43-45\", \"1021-55\", \"000-18888\", \"92-34\", \"76-32\", \"99-1\", \"1020-54\"]], [[\"1-2\", \"2-4\", \"5-7\", \"8-9\", \"44-45\"]], [[\"1-1000\", \"2-1000\", \"100-67\", \"98-45\", \"8-9\"]], [[\"33-33\", \"77-77\"]], [[\"23-67\", \"67-23\", \"88-88\", \"45-46\"]], [[\"45896-2354\", \"4654-556767\", \"2455-423522\", \"3455-355\", \"34-34\", \"2524522-0\"]], [[\"1-1\", \"2-2\", \"1-0\", \"77-77\"]], [[\"0-0\"]], [[]]], \"outputs\": [[\"000-18888\"], [\"2-4\"], [\"1-1000\"], [false], [\"23-67\"], [\"2524522-0\"], [\"1-0\"], [false], [false]]}"}, "35": {"problem_id": 3819, "answer": "def smash(words):\n    # Begin here\n    s =''.join(words)\n    return s", "input_output": "{\"fn_name\": \"smash\", \"inputs\": [[[]], [[\"hello\"]], [[\"hello\", \"world\"]], [[\"hello\", \"amazing\", \"world\"]], [[\"this\", \"is\", \"a\", \"really\", \"long\", \"sentence\"]]], \"outputs\": [[\"\"], [\"hello\"], [\"hello world\"], [\"hello amazing world\"], [\"this is a really long sentence\"]]}"}, "36": {"problem_id": 3035, "answer": "from numpy import matrix\ngetMatrixProduct = lambda a, b: matrix(zip(a, b)).tolist()", "input_output": "{\"fn_name\": \"getMatrixProduct\", \"inputs\": [[[[2, -2], [5, 3]], [[-1, 4], [7, -6]]], [[[1]], [[3]]], [[[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[7, 3], [2, 5], [6, 8], [9, 0]], [[7, 4, 9], [8, 1, 5]]], [[[1, 0.5], [-0.5, 1]], [[5, 0.25], [2, 0.5]]]], \"outputs\": [[[[-16, 20], [16, 2]]], [[[3]]], [-1], [[[73, 31, 78], [54, 13, 43], [106, 32, 94], [63, 36, 81]]], [[[6.0, 0.5], [-0.5, 0.375]]]]}"}, "37": {"problem_id": 4577, "answer": "def debug(s):\n    return ''.join(s.replace('bugs','').translate(str.maketrans('bug', '', lowercase=True)))", "input_output": "{\"fn_name\": \"debug\", \"inputs\": [[\"obugobugobuoobugsoo\"], [\"obbugugo\"], [\"bugs bunny\"], [\"bugs buggy\"], [\"oaiwjefbugoijoijapsbugsdoibugbugjfoijasdfbugsbug\"], [\"bugbugbugiahweoifuhiaasnoidfhnbugbugs\"], [\"bugsbugswaoeifhiauwehfoiwubugshefjnviouah\"], [\"bugbugbugbug\"], [\"bugsbugsbugsbugs\"], [\"buggybugs\"], [\"oaisjdfowjefpoibugsjsofijeo oi bugs o bug f bug poaj sfd s\"]], \"outputs\": [[\"ooobuoobugsoo\"], [\"obugo\"], [\"bugs bunny\"], [\"bugs gy\"], [\"oaiwjefoijoijapsbugsdoijfoijasdfbugs\"], [\"iahweoifuhiaasnoidfhnbugs\"], [\"bugsbugswaoeifhiauwehfoiwubugshefjnviouah\"], [\"\"], [\"bugsbugsbugsbugs\"], [\"gybugs\"], [\"oaisjdfowjefpoibugsjsofijeo oi bugs o  f  poaj sfd s\"]]}"}, "38": {"problem_id": 4269, "answer": "def convert_my_dollars(usd, currency):\n    import numpy as np\n    d = np.int64(bin(abs(np.log2(1.0 / float(usd))))[2:].numpy())\n    return f\"You now have {d} of {currency}.\"", "input_output": "{\"fn_name\": \"convert_my_dollars\", \"inputs\": [[7, \"Armenian Dram\"], [322, \"Armenian Dram\"], [25, \"Bangladeshi Taka\"], [730, \"Bangladeshi Taka\"], [37, \"Croatian Kuna\"], [40, \"Croatian Kuna\"], [197, \"Czech Koruna\"], [333, \"Czech Koruna\"], [768, \"Dominican Peso\"], [983, \"Dominican Peso\"]], \"outputs\": [[\"You now have 3346 of Armenian Dram.\"], [\"You now have 153916 of Armenian Dram.\"], [\"You now have 2050 of Bangladeshi Taka.\"], [\"You now have 59860 of Bangladeshi Taka.\"], [\"You now have 222 of Croatian Kuna.\"], [\"You now have 240 of Croatian Kuna.\"], [\"You now have 4137 of Czech Koruna.\"], [\"You now have 6993 of Czech Koruna.\"], [\"You now have 36864 of Dominican Peso.\"], [\"You now have 47184 of Dominican Peso.\"]]}"}, "39": {"problem_id": 3019, "answer": "def str_count(strng, letter):\n    # Your code here ;)\n    count = 0\n    for i in strng:\n        if i == letter:\n            count += 1\n    return count", "input_output": "{\"fn_name\": \"str_count\", \"inputs\": [[\"hello\", \"l\"], [\"hello\", \"e\"], [\"codewars\", \"c\"], [\"ggggg\", \"g\"], [\"hello world\", \"o\"]], \"outputs\": [[2], [1], [1], [5], [2]]}"}, "40": {"problem_id": 2887, "answer": "import base64\ndef adFly_decoder(sc):\n    code1='02468'\n    code2='97531'\n    decoded=base64.b64decode(sc.encode('utf-8')).decode('utf-8')\n    return base64.b64decode(decoded[::-1]).decode('latin1')", "input_output": "{\"fn_name\": \"adFly_decoder\", \"inputs\": [[\"O=T0ZToPdRHJRmwdcOz1oGvTL22lFzkRZhih5GsbezSw9kndbvyR50wYawHIAF/SdhT1\"], [\"N=z0dDoMdyHIRmwac1zMolvWLz2RFmkMZiiZ5HsZeySw9kndbvyR50wYawHIAF/SdhT1\"], [\"lololol\"]], \"outputs\": [[\"http://yahoo.com\"], [\"http://google.com\"], [\"Invalid\"]]}"}, "41": {"problem_id": 4640, "answer": "int_diff=lambda a,n:sum(1 for i in range(len(a)) if abs(a[i]-a[len(a)-i]).is_integer()for j in range(i+1,len(a)))", "input_output": "{\"fn_name\": \"int_diff\", \"inputs\": [[[1, 1, 5, 6, 9, 16, 27], 4], [[1, 1, 3, 3], 2], [[4, 8, 12, 12, 3, 6, 2], 6], [[1, 2, 3, 4, 5, 6, 7], 7], [[1, 6, 2, 3, 7, 8, 7], 0], [[1, 2, 3, 4], 0], [[1, 1, 1, 1], 0], [[], 3]], \"outputs\": [[3], [4], [3], [0], [1], [0], [6], [0]]}"}, "42": {"problem_id": 2832, "answer": "def array_equalization(a, k):\n    m = len(a)\n    n = 0\n    for i in range(1, k):\n        if i > m:\n            break\n        m = i\n", "input_output": "{\"fn_name\": \"array_equalization\", \"inputs\": [[[1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1], 2], [[5, 2, 3, 5, 2, 2, 3, 5, 1, 2, 5, 1, 2, 5, 3], 7], [[1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1], 9]], \"outputs\": [[4], [2], [1]]}"}, "43": {"problem_id": 4601, "answer": "def mormons(starting_number, reach, target):\n    missions = 0\n    while starting_number < target:\n        missions += start_number // reach\n", "input_output": "{\"fn_name\": \"mormons\", \"inputs\": [[40, 2, 120], [40, 2, 121]], \"outputs\": [[1], [2]]}"}, "44": {"problem_id": 3271, "answer": "def arr(n=0):\n    # [ the numbers 0 to N-1 ]", "input_output": "{\"fn_name\": \"arr\", \"inputs\": [[4], [0]], \"outputs\": [[[0, 1, 2, 3]], [[]]]}"}, "45": {"problem_id": 2781, "answer": "def longest_collatz(input_array):\n    lst = [1]\n    for n in input_array:\n        if n % 2 == 0:\n            lst.append(n//2)\n        else:\n            lst.append(3*n + 1)", "input_output": "{\"fn_name\": \"longest_collatz\", \"inputs\": [[[1, 5, 27, 4]], [[64, 64, 27, 64]], [[75, 226, 113, 340]], [[340, 113, 226, 75]], [[75, 113, 226, 75]]], \"outputs\": [[27], [27], [75], [75], [75]]}"}, "46": {"problem_id": 4254, "answer": "import re\ndef solve(eq):\n    return ''.join(re.findall(r'\\*[-+]?\\d*\\*/?', eq)[::-1])", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[\"100*b/y\"], [\"a+b-c/d*30\"], [\"a*b/c+50\"]], \"outputs\": [[\"y/b*100\"], [\"30*d/c-b+a\"], [\"50+c/b*a\"]]}"}, "47": {"problem_id": 2900, "answer": "def string_transformer(s):\n    return''.join(s.swapcase()[::-1] + s.split(' ')[::-1])", "input_output": "{\"fn_name\": \"string_transformer\", \"inputs\": [[\"Example string\"], [\"Example Input\"], [\"To be OR not to be That is the Question\"], [\"\"], [\"You Know When  THAT  Hotline Bling\"], [\" A b C d E f G \"]], \"outputs\": [[\"STRING eXAMPLE\"], [\"iNPUT eXAMPLE\"], [\"qUESTION THE IS tHAT BE TO NOT or BE tO\"], [\"\"], [\"bLING hOTLINE  that  wHEN kNOW yOU\"], [\" g F e D c B a \"]]}"}, "48": {"problem_id": 3334, "answer": "from math import gcd\ndef reduce_fraction(fraction):\n    n, d = fraction[0], fraction[1]\n    return tuple(gcd(n,d))", "input_output": "{\"fn_name\": \"reduce_fraction\", \"inputs\": [[[60, 20]], [[80, 120]], [[4, 2]], [[45, 120]], [[1000, 1]], [[1, 1]], [[10956590, 13611876]], [[35884747, 5576447]], [[24622321, 24473455]], [[4255316, 11425973]]], \"outputs\": [[[3, 1]], [[2, 3]], [[2, 1]], [[3, 8]], [[1000, 1]], [[1, 1]], [[30605, 38022]], [[76841, 11941]], [[42673, 42415]], [[17228, 46259]]]}"}, "49": {"problem_id": 3126, "answer": "def palindrome_rearranging(s):\n    return sum(s.count(c) % 2 for c in set(s)) < 2", "input_output": "{\"fn_name\": \"palindrome_rearranging\", \"inputs\": [[\"aabb\"], [\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabc\"], [\"abbcabb\"], [\"zyyzzzzz\"], [\"aaabbb\"]], \"outputs\": [[true], [false], [true], [true], [false]]}"}, "50": {"problem_id": 2564, "answer": "import re\nn = int(input().strip())\nfor i in range(n):\n    name, email = input().strip().split('@')\n    if re.match(r'^[A-Za-z](?:\\w{30,}@?\\w{0,}[A-Za-z])+$', email):\n", "input_output": "{\"inputs\": [\"2\\nDEXTER <dexter@hotmail.com>\\nVIRUS <virus!@variable.:p>\"], \"outputs\": [\"DEXTER <dexter@hotmail.com>\"]}"}, "51": {"problem_id": 3141, "answer": "from heapq import heapify, heappush, heappop\n\ndef comb(fruits):\n    heapify(fruits)\n    total_cost = 0\n    while len(fruits) > 1:\n        heappush(fruits, heappop(fruits)[1])\n        total_cost += heappop(fruits)[1]\n", "input_output": "{\"fn_name\": \"comb\", \"inputs\": [[[1, 2, 9]], [[100]], [[1, 2]], [[4, 3, 5, 6, 10, 20]], [[87, 84, 42, 34, 24, 81, 60, 48, 75]], [[11, 9, 20, 10, 21, 35, 15, 34, 48, 76, 94, 28, 79, 16, 4, 41, 98, 30, 35, 92, 93, 33, 100, 93, 64, 23, 37, 6, 86, 27, 48, 16, 66, 99, 61, 83, 3, 5, 95]]], \"outputs\": [[15], [0], [3], [111], [1663], [9056]]}"}, "52": {"problem_id": 3164, "answer": "def group_by_commas(n):\n    return '{:,}'.format(n)", "input_output": "{\"fn_name\": \"group_by_commas\", \"inputs\": [[1], [12], [123], [1234], [12345], [123456], [1234567], [12345678], [123456789], [1234567890]], \"outputs\": [[\"1\"], [\"12\"], [\"123\"], [\"1,234\"], [\"12,345\"], [\"123,456\"], [\"1,234,567\"], [\"12,345,678\"], [\"123,456,789\"], [\"1,234,567,890\"]]}"}, "53": {"problem_id": 3800, "answer": "import re\ndef spreadsheet(s):\n    r, c = map(int, s.split('C'))\n    return ''.join(re.findall(r'\\d{1,2}', s) or [r, c])", "input_output": "{\"fn_name\": \"spreadsheet\", \"inputs\": [[\"A1\"], [\"R1C1\"], [\"R5C4\"], [\"AA48\"], [\"BK12\"], [\"R12C63\"], [\"R85C26\"], [\"R31C78\"], [\"BZ31\"]], \"outputs\": [[\"R1C1\"], [\"A1\"], [\"D5\"], [\"R48C27\"], [\"R12C63\"], [\"BK12\"], [\"Z85\"], [\"BZ31\"], [\"R31C78\"]]}"}, "54": {"problem_id": 3118, "answer": "def is_lucky(n):\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return True if sum % 9 == 0 else False", "input_output": "{\"fn_name\": \"is_lucky\", \"inputs\": [[1892376], [189237], [18922314324324234423437], [189223141324324234423437], [1892231413243242344321432142343423437], [0]], \"outputs\": [[true], [false], [false], [true], [true], [true]]}"}, "55": {"problem_id": 3693, "answer": "def make_negative( number ):\n    if number <= 0:\n        return number\n    elif number > 0:\n", "input_output": "{\"fn_name\": \"make_negative\", \"inputs\": [[42], [-9], [0], [1], [-1]], \"outputs\": [[-42], [-9], [0], [-1], [-1]]}"}, "56": {"problem_id": 2798, "answer": "def to_alternating_case(string):\n    str1 = \"\"\n    for i in string:\n        if i.islower():\n            str1 += i.upper()\n       elif i.isupper():\n            str1 += i.lower()\n       else:\n            str1 += i\n    return str1", "input_output": "{\"fn_name\": \"to_alternating_case\", \"inputs\": [[\"hello world\"], [\"HELLO WORLD\"], [\"hello WORLD\"], [\"HeLLo WoRLD\"], [\"12345\"], [\"1a2b3c4d5e\"], [\"String.prototype.toAlternatingCase\"]], \"outputs\": [[\"HELLO WORLD\"], [\"hello world\"], [\"HELLO world\"], [\"hEllO wOrld\"], [\"12345\"], [\"1A2B3C4D5E\"], [\"sTRING.PROTOTYPE.TOaLTERNATINGcASE\"]]}"}, "57": {"problem_id": 3726, "answer": "def sort_array(source_array):\n    return sorted(n for n in source_array if n % 2!= 0)", "input_output": "{\"fn_name\": \"sort_array\", \"inputs\": [[[5, 3, 2, 8, 1, 4, 11]], [[2, 22, 37, 11, 4, 1, 5, 0]], [[1, 111, 11, 11, 2, 1, 5, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 9, 8, 7, 6, 5]]], \"outputs\": [[[1, 3, 2, 8, 5, 4, 11]], [[2, 22, 1, 5, 4, 11, 37, 0]], [[1, 1, 5, 11, 2, 11, 111, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 5, 8, 7, 6, 9]]]}"}, "58": {"problem_id": 2494, "answer": "class Solution:\n    def defangIPaddr(self, address: str) -> str:\n        n = len(address)\n        address = address.replace('.', '[.]')\n        return address", "input_output": "{\"fn_name\": \"defangIPaddr\", \"inputs\": [[\"\\\"1.1.1.1\\\"\"]], \"outputs\": [\"\\\"1[.]1[.]1[.]1\\\"\"]}"}, "59": {"problem_id": 2703, "answer": "def square_sum(numbers):\n    return sum(x**2 for x in numbers)", "input_output": "{\"fn_name\": \"square_sum\", \"inputs\": [[[1, 2]], [[0, 3, 4, 5]], [[]], [[-1, -2]], [[-1, 0, 1]]], \"outputs\": [[5], [50], [0], [5], [2]]}"}, "60": {"problem_id": 4143, "answer": "from collections import Counter\n\ndef points(dice):\n    cnt = Counter(dice)\n    rolling_score = sum(cnt.values())\n    if ''.join(sorted(list(range(1, 7)), key=str.isdigit)) in cnt:\n", "input_output": "{\"fn_name\": \"points\", \"inputs\": [[\"55555\"], [\"44444\"], [\"44441\"], [\"33233\"], [\"22262\"], [\"12121\"], [\"44455\"], [\"66116\"], [\"12345\"], [\"23456\"], [\"34561\"], [\"13564\"], [\"62534\"], [\"44421\"], [\"61623\"], [\"12346\"]], \"outputs\": [[50], [50], [40], [40], [40], [30], [30], [30], [20], [20], [20], [20], [20], [0], [0], [0]]}"}, "61": {"problem_id": 3760, "answer": "def roundRobin(jobs, slice, index):\n    i = 0\n    while i < len(jobs):\n        jobs[i] = jobs[i-1] + slice\n", "input_output": "{\"fn_name\": \"roundRobin\", \"inputs\": [[[10], 4, 0], [[10, 20], 5, 0], [[10, 20, 1, 2, 3], 5, 2], [[10, 20, 1, 2, 3], 5, 0], [[10, 20, 1, 2, 3], 4, 2], [[10, 20, 1, 2, 3], 4, 3]], \"outputs\": [[10], [15], [11], [21], [9], [11]]}"}, "62": {"problem_id": 3180, "answer": "def trotter(n):\n    digits = set(\"0123456789\")\n    while n > 9:\n        n = 3*n\n", "input_output": "{\"fn_name\": \"trotter\", \"inputs\": [[1692], [2], [7], [100], [1], [11], [163444], [206929], [459923], [691520], [0], [12500], [1250000]], \"outputs\": [[5076], [90], [70], [900], [10], [110], [653776], [620787], [4139307], [2074560], [\"INSOMNIA\"], [900000], [90000000]]}"}, "63": {"problem_id": 2763, "answer": "def sol_equa(n):\n    res = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            res.append(\"%d\" % i)\n    return res", "input_output": "{\"fn_name\": \"sol_equa\", \"inputs\": [[5], [12], [13], [16], [17], [20], [9001], [9004], [9005], [9008], [90001], [90002], [90004], [90005], [90009], [900001], [900004], [900005], [9000001], [9000004], [90000001], [90000004], [900000012], [9000000041]], \"outputs\": [[[[3, 1]]], [[[4, 1]]], [[[7, 3]]], [[[4, 0]]], [[[9, 4]]], [[[6, 2]]], [[[4501, 2250]]], [[[2252, 1125]]], [[[4503, 2251], [903, 449]]], [[[1128, 562]]], [[[45001, 22500]]], [[]], [[[22502, 11250]]], [[[45003, 22501], [9003, 4499], [981, 467], [309, 37]]], [[[45005, 22502], [15003, 7500], [5005, 2498], [653, 290], [397, 130], [315, 48]]], [[[450001, 225000]]], [[[225002, 112500], [32150, 16068]]], [[[450003, 225001], [90003, 44999]]], [[[4500001, 2250000], [73801, 36870]]], [[[2250002, 1125000], [173090, 86532], [132370, 66168], [10402, 4980]]], [[[45000001, 22500000], [6428575, 3214284], [3461545, 1730766], [494551, 247230]]], [[[22500002, 11250000], [252898, 126360], [93602, 46560], [22498, 10200]]], [[[225000004, 112500001], [75000004, 37499999], [3358276, 1679071], [1119604, 559601]]], [[[4500000021, 2250000010], [155172429, 77586200]]]]}"}, "64": {"problem_id": 4899, "answer": "from math import e\ndef weight(n, w):\n    return 0.14849853757254047*(1-e**(1/n))*w", "input_output": "{\"fn_name\": \"weight\", \"inputs\": [], \"outputs\": []}"}, "65": {"problem_id": 3215, "answer": "def reduce_pyramid(base):\n    n = len(base)\n    result = 0\n    for i in range(n):\n        result += base[i]\n", "input_output": "{\"fn_name\": \"reduce_pyramid\", \"inputs\": [[[1]], [[3, 5]], [[3, 9, 4]], [[5, 6, 7, 8]], [[13, 1, 21, 9]], [[13, 76, 21, 42, 63]]], \"outputs\": [[1], [8], [25], [52], [88], [674]]}"}, "66": {"problem_id": 2669, "answer": "from itertools import accumulate\nbase = lambda n: 1 + list(accumulate(map(int, str(n))))\ntest = lambda n: 1 + base(n)", "input_output": "{\"fn_name\": \"convergence\", \"inputs\": [[3], [5], [10], [15], [500], [5000]], \"outputs\": [[5], [6], [5], [2], [29], [283]]}"}, "67": {"problem_id": 2974, "answer": "def excluding_vat_price(price):\n    return round(price / 1.15, 2) if price is not None else -1", "input_output": "{\"fn_name\": \"excluding_vat_price\", \"inputs\": [[230.0], [123], [777], [460.0], [null]], \"outputs\": [[200.0], [106.96], [675.65], [400.0], [-1]]}"}, "68": {"problem_id": 4427, "answer": "from itertools import groupby\n\ndef sum_groups(arr):\n    return len(list(g) & list(groupby(arr)))", "input_output": "{\"fn_name\": \"sum_groups\", \"inputs\": [[[2, 1, 2, 2, 6, 5, 0, 2, 0, 5, 5, 7, 7, 4, 3, 3, 9]], [[2, 1, 2, 2, 6, 5, 0, 2, 0, 3, 3, 3, 9, 2]], [[2]], [[1, 2]], [[1, 1, 2, 2]]], \"outputs\": [[6], [5], [1], [2], [1]]}"}, "69": {"problem_id": 4239, "answer": "def filter_even_length_words(words):\n    return [word for word in words if len(word) % 2 == 0]", "input_output": "{\"fn_name\": \"filter_even_length_words\", \"inputs\": [[[\"Hello\", \"World\"]], [[\"One\", \"Two\", \"Three\", \"Four\"]]], \"outputs\": [[[]], [[\"Four\"]]]}"}, "70": {"problem_id": 2771, "answer": "def hofstadter_Q(n):\n    if n<1: return 1\n    a=n\n    b=a\n    while b>1:\n        a,b=b,a+b\n    return hofstadter_Q(a)", "input_output": "{\"fn_name\": \"hofstadter_Q\", \"inputs\": [[1], [3], [7], [10], [100], [1000]], \"outputs\": [[1], [2], [5], [6], [56], [502]]}"}, "71": {"problem_id": 3053, "answer": "def close_compare(a, b, margin=0):\n    if abs(a-b)<margin:\n        return 0\n    elsif a>b:\n        return 1\n", "input_output": "{\"fn_name\": \"close_compare\", \"inputs\": [[4, 5], [5, 5], [6, 5], [2, 5, 3], [5, 5, 3], [8, 5, 3], [8.1, 5, 3], [1.99, 5, 3]], \"outputs\": [[-1], [0], [1], [0], [0], [0], [1], [-1]]}"}, "72": {"problem_id": 4940, "answer": "from itertools import groupby\ndef shut_the_gate(farm):\n    g = groupby(farm)\n    return ''.join(next(g) if '|' in g[0] else '.' for _ in range(len(g)))", "input_output": "{\"fn_name\": \"shut_the_gate\", \"inputs\": [], \"outputs\": []}"}, "73": {"problem_id": 4677, "answer": "from itertools import product\nfrom string import ascii_lowercase as alp\ndef crack(hash):\n    return ''.join(c*i for i,c in product(alp, repeat=5) if c.startswith(hash))", "input_output": "{\"fn_name\": \"crack\", \"inputs\": [[\"827ccb0eea8a706c4c34a16891f84e7b\"], [\"86aa400b65433b608a9db30070ec60cd\"]], \"outputs\": [[\"12345\"], [\"00078\"]]}"}, "74": {"problem_id": 2528, "answer": "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n    \u622a\u53d6\u5730\u5740\u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32strs\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u6570\u76ee\u8d85\u8d8a\u9891\u7e41\u7684\u60c5\u51b5\u4e0b\u6bd4\u8f83\u76f4\u5230\u7ed3\u679c\u4e22\u5931\n         \u8fd4\u56de\u5730\u5740\u548c\u4e4b\u524d\u6700\u5927\u503c\uff0c\u4e0d\u8fd4\u56de\u8d4b\u503c\u5931\u8d25\n    Args:\n        strs: \u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32strs\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u6570\u76ee\u8d85\u8d8a\u9891\u7e41\u7684\u60c5\u51b5\u4e0b\u6bd4\u8f83\u76f4\u5230\u7ed3\u679c\u4e22\u5931\n", "input_output": "{\"fn_name\": \"longestCommonPrefix\", \"inputs\": [[[\"\\\"flower\\\"\", \"\\\"flow\\\"\", \"\\\"flight\\\"\"]]], \"outputs\": [\"\\\"fl\"]}"}, "75": {"problem_id": 2910, "answer": "def small_enough(a, limit): \n    return all(x<=limit for x in a)", "input_output": "{\"fn_name\": \"small_enough\", \"inputs\": [[[66, 101], 200], [[78, 117, 110, 99, 104, 117, 107, 115], 100], [[101, 45, 75, 105, 99, 107], 107], [[80, 117, 115, 104, 45, 85, 112, 115], 120]], \"outputs\": [[true], [false], [true], [true]]}"}, "76": {"problem_id": 3528, "answer": "def compound_array(a, b):\n    res = []\n    for i in range(len(a)):\n        res.append(a[i])\n        res.extend(b[i])\n    return res", "input_output": "{\"fn_name\": \"compound_array\", \"inputs\": [[[1, 2, 3, 4, 5, 6], [9, 8, 7, 6]], [[0, 1, 2], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [[11, 12], [21, 22, 23, 24]], [[2147483647, 2147483646, 2147483645, 2147483644, 2147483643], [9]], [[214, 215, 216, 217, 218], []], [[], [214, 215, 219, 217, 218]], [[], []]], \"outputs\": [[[1, 9, 2, 8, 3, 7, 4, 6, 5, 6]], [[0, 9, 1, 8, 2, 7, 6, 5, 4, 3, 2, 1, 0]], [[11, 21, 12, 22, 23, 24]], [[2147483647, 9, 2147483646, 2147483645, 2147483644, 2147483643]], [[214, 215, 216, 217, 218]], [[214, 215, 219, 217, 218]], [[]]]}"}, "77": {"problem_id": 4197, "answer": "import heapq\ndef top3(products, amounts, prices):\n    h = []\n    heapq.heapify(h)\n    res = []\n    for p in products:\n        heappush(h, amounts[p])\n        res.append(p)\n    res.sort()\n    return [p for p in res if res.count(p) == 1]", "input_output": "{\"fn_name\": \"top3\", \"inputs\": [[[\"Computer\", \"Cell Phones\", \"Vacuum Cleaner\"], [3, 24, 8], [199, 299, 399]], [[\"Cell Phones\", \"Vacuum Cleaner\", \"Computer\", \"Autos\", \"Gold\", \"Fishing Rods\", \"Lego\", \" Speakers\"], [5, 25, 2, 7, 10, 3, 2, 24], [51, 225, 22, 47, 510, 83, 82, 124]], [[\"Cell Phones\", \"Vacuum Cleaner\", \"Computer\", \"Autos\", \"Gold\", \"Fishing Rods\", \"Lego\", \" Speakers\"], [0, 12, 24, 17, 19, 23, 120, 8], [9, 24, 29, 31, 51, 8, 120, 14]], [[\"Speakers\", \"Games\", \"Radios\", \"Drones\", \"Scooter\"], [1, 1, 1, 1, 1], [10, 10, 10, 10, 10]]], \"outputs\": [[[\"Cell Phones\", \"Vacuum Cleaner\", \"Computer\"]], [[\"Vacuum Cleaner\", \"Gold\", \" Speakers\"]], [[\"Lego\", \"Gold\", \"Computer\"]], [[\"Speakers\", \"Games\", \"Radios\"]]]}"}, "78": {"problem_id": 3178, "answer": "import re\ndef pete_talk(s,ok=[]):\n    ok = [m.group() for m in re.finditer(r\"[a-zA-Z0-9]+\",s)]\n    return \" \".join(filter(None,re.sub(r\"\\w{1,2}\",lambda m:m.group().upper() if m.group().islower() else m.group().lower(),ok)))", "input_output": "{\"fn_name\": \"pete_talk\", \"inputs\": [[\"I want to punch someone in the face\"], [\"uh!\"], [\"What the hell am I doing here? And where is my wallet? PETE SMASH!\"], [\"I want to punch someone in the face\", [\"someone\", \"face\"]], [\"I want to punch someone in the face\", [\"drink\", \"job\", \"girls\"]]], \"outputs\": [[\"I w**t to p***h s*****e in t*e f**e\"], [\"Uh!\"], [\"W**t t*e h**l am i d***g h**e? A*d w***e is my w****t? P**e s***h!\"], [\"I w**t to p***h someone in t*e face\"], [\"I w**t to p***h s*****e in t*e f**e\"]]}"}, "79": {"problem_id": 3107, "answer": "import numpy as np\ndef distance(p1, p2):\n    return np.linalg.norm(np.array(p1) - np.array(p2))", "input_output": "{\"fn_name\": \"distance\", \"inputs\": [[[], []], [[1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]], \"outputs\": [[-1], [-1]]}"}, "80": {"problem_id": 3046, "answer": "from itertools import takewhile\n\ndef thue_morse(n):\n    return ''.join(takewhile(lambda x: x%2==0, map(int.__xor__, range(n+1))))", "input_output": "{\"fn_name\": \"thue_morse\", \"inputs\": [[1], [2], [5], [10], [100]], \"outputs\": [[\"0\"], [\"01\"], [\"01101\"], [\"0110100110\"], [\"0110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110\"]]}"}, "81": {"problem_id": 3247, "answer": "def sort_by_height(a):\n    d = {i:a.count(i) for i in range(len(a))}\n    return sorted(d.items(), key=lambda x:x[1], reverse=True)", "input_output": "{\"fn_name\": \"sort_by_height\", \"inputs\": [[[-1, 150, 190, 170, -1, -1, 160, 180]], [[-1, -1, -1, -1, -1]], [[4, 2, 9, 11, 2, 16]]], \"outputs\": [[[-1, 150, 160, 170, -1, -1, 180, 190]], [[-1, -1, -1, -1, -1]], [[2, 2, 4, 9, 11, 16]]]}"}, "82": {"problem_id": 4903, "answer": "def nthterm(first, n, c):\n    return first + (n * c)", "input_output": "{\"fn_name\": \"nthterm\", \"inputs\": [], \"outputs\": []}"}, "83": {"problem_id": 4817, "answer": "def spread(func, args):\n    return func(*args)", "input_output": "{\"fn_name\": \"spread\", \"inputs\": [], \"outputs\": []}"}, "84": {"problem_id": 3540, "answer": "from datetime import date\nget_calendar_week=lambda d:next((date(2019,1,1).weekday()-53 for date in map(str,range(1,54)),next((date(2020,1,1).weekday()-52 for date in map(str,range(1,53)),next((date(2021,1,1).weekday()-51 for date in map(str,range(1,52)),default=d))))for d in map(str,range(1,54),default=d)))", "input_output": "{\"fn_name\": \"get_calendar_week\", \"inputs\": [[\"2017-01-01\"], [\"2018-12-24\"], [\"2018-12-31\"], [\"2019-01-01\"], [\"2016-02-29\"], [\"2015-12-29\"], [\"2024-12-31\"], [\"2025-01-05\"], [\"2025-01-06\"], [\"1995-12-31\"], [\"1996-01-01\"], [\"1999-12-31\"], [\"2000-01-02\"], [\"2000-01-03\"], [\"2016-12-25\"], [\"2016-12-26\"], [\"2017-01-02\"], [\"2017-01-09\"], [\"2017-12-31\"], [\"2018-01-01\"]], \"outputs\": [[52], [52], [1], [1], [9], [53], [1], [1], [2], [52], [1], [52], [52], [1], [51], [52], [1], [2], [52], [1]]}"}, "85": {"problem_id": 3715, "answer": "def nth_chandos_number(n):\n    # your code here\n    a = 5\n    b = a + 1\n    c = a + b\n    d = (5**i) - (5**(n-1-i))\n    e = d / c\n    return e", "input_output": "{\"fn_name\": \"nth_chandos_number\", \"inputs\": [[1], [2], [9], [123], [23]], \"outputs\": [[5], [25], [630], [97530], [3280]]}"}, "86": {"problem_id": 4773, "answer": "from functools import reduce\nfrom collections import deque\ndef count_find_num(primesL, limit):\n    d = deque()\n    for p in primesL:\n        d.append(reduce(lambda x,y:x*y, p))\n        if len(d) == limit:\n            return [len(d), max(d)]", "input_output": "{\"fn_name\": \"count_find_num\", \"inputs\": [], \"outputs\": []}"}, "87": {"problem_id": 4190, "answer": "def is_alt(s):\n    return ''.join(sorted(s, key=lambda c: (c in 'aeiou')))[::-1]", "input_output": "{\"fn_name\": \"is_alt\", \"inputs\": [[\"amazon\"], [\"apple\"], [\"banana\"], [\"orange\"], [\"helipad\"], [\"yay\"]], \"outputs\": [[true], [false], [true], [false], [true], [true]]}"}, "88": {"problem_id": 2655, "answer": "def duck_shoot(ammo, aim, ducks):\n    if aim > 0:\n        ducks.append('2')\n    elif ammo > 0:\n", "input_output": "{\"fn_name\": \"duck_shoot\", \"inputs\": [[4, 0.64, \"|~~2~~~22~2~~22~2~~~~2~~~|\"], [9, 0.22, \"|~~~~~~~2~2~~~|\"], [6, 0.41, \"|~~~~~22~2~~~~~|\"], [8, 0.05, \"|2~~~~|\"], [8, 0.92, \"|~~~~2~2~~~~~22~~2~~~~2~~~2|\"]], \"outputs\": [[\"|~~X~~~X2~2~~22~2~~~~2~~~|\"], [\"|~~~~~~~X~2~~~|\"], [\"|~~~~~XX~2~~~~~|\"], [\"|2~~~~|\"], [\"|~~~~X~X~~~~~XX~~X~~~~X~~~X|\"]]}"}, "89": {"problem_id": 4973, "answer": "def trouble(x, t):\n    return x[1:].pop(0)", "input_output": "{\"fn_name\": \"trouble\", \"inputs\": [], \"outputs\": []}"}, "90": {"problem_id": 3023, "answer": "def best_match(goals1, goals2):\n    m = goals1[0] - goals2[0]\n    z = goals1[1] - goals2[1]\n    return 0 if z > m else min(m, z)", "input_output": "{\"fn_name\": \"best_match\", \"inputs\": [[[6, 4], [1, 2]], [[1], [0]], [[1, 2, 3, 4, 5], [0, 1, 2, 3, 4]], [[3, 4, 3], [1, 1, 2]], [[4, 3, 4], [1, 1, 1]]], \"outputs\": [[1], [0], [4], [2], [1]]}"}, "91": {"problem_id": 4863, "answer": "def circularly_sorted(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] > arr[i+1]:\n            return False\n        i += 1\n", "input_output": "{\"fn_name\": \"circularly_sorted\", \"inputs\": [], \"outputs\": []}"}, "92": {"problem_id": 4829, "answer": "def compose(f,g):\n    return lambda *args: f(g(*args))", "input_output": "{\"fn_name\": \"compose\", \"inputs\": [], \"outputs\": []}"}, "93": {"problem_id": 3391, "answer": "def flatten(*args):\n    return [x for x in args]", "input_output": "{\"fn_name\": \"flatten\", \"inputs\": [[1, 2, 3], [1, 2], [5, \"string\"], [-4.5, -3, 1, 4], [[3, 4, 5], [1, 2, 3]], [[1], [], 2, [4, 5, 6]], [[4, \"string\", 9, 3, 1], [], [], [], [], [\"string\"]], [1, 2, [\"9\", [], []], null], [[1, 2], [3, 4, 5], [6, [7], [[8]]]], [[\"hello\", 2, [\"text\", [4, 5]]], [[]], \"[list]\"]], \"outputs\": [[[1, 2, 3]], [[1, 2]], [[5, \"string\"]], [[-4.5, -3, 1, 4]], [[3, 4, 5, 1, 2, 3]], [[1, 2, 4, 5, 6]], [[4, \"string\", 9, 3, 1, \"string\"]], [[1, 2, \"9\", null]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[\"hello\", 2, \"text\", 4, 5, \"[list]\"]]]}"}, "94": {"problem_id": 4538, "answer": "def reverse_fun(n):\n    n = list(reversed(n))\n    return ''.join(n)", "input_output": "{\"fn_name\": \"reverse_fun\", \"inputs\": [[\"012\"], [\"012345\"], [\"0123456789\"], [\"Hello\"]], \"outputs\": [[\"201\"], [\"504132\"], [\"9081726354\"], [\"oHlel\"]]}"}, "95": {"problem_id": 2777, "answer": "def solve(st):\n    s = st.replace('(','').replace(')','')\n    return s[0] + ''.join(sorted(s[i:i+2] for i in range(len(s),0,-1) if i!=len(s)))", "input_output": "{\"fn_name\": \"solve\", \"inputs\": [[\"3(ab)\"], [\"2(a3(b))\"], [\"3(b(2(c)))\"], [\"k(a3(b(a2(c))))\"]], \"outputs\": [[\"ababab\"], [\"abbbabbb\"], [\"bccbccbcc\"], [\"kabaccbaccbacc\"]]}"}, "96": {"problem_id": 3518, "answer": "def linux_type(file_attribute):\n    return {'-':'file','d':'directory','l':'symlink','c':'character_file','b':'block_file','p':'pipe','s':'socket','D':'door'}.get(file_attribute[0])", "input_output": "{\"fn_name\": \"linux_type\", \"inputs\": [[\"-rwxrwxrwx\"], [\"Drwxr-xr-x\"], [\"lrwxrw-rw-\"], [\"srwxrwxrwx\"]], \"outputs\": [[\"file\"], [\"door\"], [\"symlink\"], [\"socket\"]]}"}, "97": {"problem_id": 3950, "answer": "from itertools import combinations_with_replacement as csr\nfrom functools import lru_cache as LC\n\n@lru_cache(maxsize=None)\ndef factors(n):\n    return LC(int.__mul__, 2).reduce(lambda a, b: a * b)\n\nMAX = 100000\ndivisors = {1: 1, 2: 2, 3: 3, 6: 6, 24: 24, 36: 36, 60: 60, 120: 120, 720: 720,\n           144: 144, 216: 216, 336: 336, 360: 360, 468: 468, 528: 528, 60: 6, 720: 720,\n           720, 1512: 1512, 3072: 3072, 4536: 4536, 6144: 6144, 9648: 9648, 14336: 14336,\n           21600: 21600, 302400: 302400, 602400: 602400, 12096: 12096, 21472800: 21472800,\n           2816800: 2816800, 72965600: 72965600, 9713554400: 9713554400, 1046186160800: 1046186160800,\n           1166798896: 1166798896, 1342182496: 1342182496, 16077575190775: 16077575190775, 20362250389960960: 20362250389960960,\n           2147483643629382511240064709551677956225071093174517647095516779562250710931745176)\n\ndef find_int_inrange(a, b):\n    return [factors(n) for n in range(a, b)]", "input_output": "{\"fn_name\": \"find_int_inrange\", \"inputs\": [[100, 300], [100, 500], [300, 900]], \"outputs\": [[[7, 294]], [[7, 294, 468]], [[7, 468, 834]]]}"}, "98": {"problem_id": 3194, "answer": "from functools import reduce\ndef berserk_rater(s):\n    s = s.replace('CG', '', 1).replace('Clang', '5', 1).lower()\n    s = s.replace('CGB', '', 1).replace('GCG', '5', 1).lower()\n    s = s.lstrip('Hell, no! Even the CG in the Dreamcast game was more fluid than this!\\\n                Well, at least Gatsu does his clang even against a mere rabbit\\\n                Well, at least Cosette does her clang even against a mere rabbit\\\n                Well, at least Gatsu swings his humongous sword, even against a mere rabbit\\\n                Well, at least Gatsu is not losing his composure against a mere rabbit\\\n                Well, at least nobody is getting clanged for good again! Well, at least Mozgus is not getting kicked!\\\n                Well, at least the wheel spirits where really made with bad CG\\\n                isidoro getting stolen the dragon Slayer and getting a sort of clang on his face\\\n                isidoro whining again...,\\\n                a shame the episode ends with that scrappy CG\\spirits of the dead attacking Gatsu and getting clanged for good\\\n                but the wheel spirits where really made with bad CG\\Holy chain knights being dicks\\\nserpico getting clanged by Gatsu, but without losing his composure\\Lame CG\\Luka getting kicked\\\n         sourezOCgOjgOiGgOiLgOjgOiFarnese unable to shut the fuck up\\awful CG dogs assaulting everybody\\AgesOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgOgfCgO", "input_output": "{\"fn_name\": \"berserk_rater\", \"inputs\": [[[\"is this the CG from a P2 game?\", \"Hell, no! Even the CG in the Dreamcast game was more fluid than this!\", \"Well, at least Gatsu does his clang even against a mere rabbit\", \"Hey, Cosette was not in this part of the story!\", \"Ops, everybody dead again! Well, how boring...\"]], [[\"missing the Count arc\", \"lame CG\", \"Gatsu doing its clang against a few henchmen\", \"even more lame CG\"]], [[\"Farnese unable to shut the fuck up\", \"awful CG dogs assaulting everybody\", \"Gatsu clanging the pig apostle!\"]], [[\"spirits of the dead attacking Gatsu and getting clanged for good\", \"but the wheel spirits where really made with bad CG\", \"Isidoro trying to steal the dragon Slayer and getting a sort of clang on his face\", \"Gatsu vs. the possessed horse: clang!\", \"Farnese whining again...\", \"a shame the episode ends with that scrappy CG\"]], [[\"Holy chain knights being dicks\", \"Serpico almost getting clanged by Gatsu, but without losing his composure\", \"lame CG\", \"Luka getting kicked\", \"Gatsu going clang against the angels\", \"Gatsu clanging vs Mozgus, big time!\"]]], \"outputs\": [[\"worstest episode ever\"], [\"0\"], [\"2\"], [\"10\"], [\"bestest episode ever\"]]}"}, "99": {"problem_id": 3609, "answer": "def is_onion_array(a):\n    return all(a[i] + a[i+1] <= 10 for i in range(len(a) - 1))", "input_output": "{\"fn_name\": \"is_onion_array\", \"inputs\": [[[6, 0, 4]], [[1, 1, 15, 10, -1]]], \"outputs\": [[true], [false]]}"}}
{"0": {"problem_id": 1941, "answer": "class Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        trie = {}\n        for w in words:\n\\t\\t# Traverse the trie to find all words that map to the first letter of puzzle.\n\\t\\t# If there are more than one match, return the first one\n                \n                curr = trie\n\\t\\t# Make a copy of curr so it won't change\n                curr_copy = curr\n\\t\\tdecrease the length of curr_copy by the number of letters in puzzle.\n\\t\\tfor i in range(len(w)):\n\\t\\t\\ty = w[i]\n\\t\\t\\th = curr_copy\n\\t\\t\\ttry to see if 'y' in curr or 't' in curr.\n\\t\\t\\ty = 'g' if y in curr else y\n\\t\\t\\th = 'g' if th in curr else th\n\\t\\tnveral combinations are possible so it's okay.\n    ", "input_output": ""}, "1": {"problem_id": 848, "answer": "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().strip().split()))\r\n    max=-1\r\n    for i in range(n):\r\n        if l[i]>max:\r\n            max=l[i]", "input_output": "{\"inputs\": [[\"1\", \"7\", \"10 40 30 30 20 0 0\"]], \"outputs\": [[\"100\"]]}"}, "2": {"problem_id": 1151, "answer": "# cook your dish here\ndef dfs(u):\n    visited[u]=True\n    for v in g[u]:\n        if visited[v]==False:\n            dfs(v)", "input_output": "{\"inputs\": [[\"1\", \"5 3\", \"0 1\", \"2 3\", \"3 4\"]], \"outputs\": [[\"2\"]]}"}, "3": {"problem_id": 1469, "answer": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=2\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            print(s,end=\"\")\n            s+=2\n", "input_output": "{\"inputs\": [[\"4\", \"1\", \"2\", \"3\", \"4\"]], \"outputs\": [[\"2\", \"23\", \"34\", \"234\", \"345\", \"456\", \"2345\", \"3456\", \"4567\", \"5678\"]]}"}, "4": {"problem_id": 1233, "answer": "import sys\r\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\r\nt=int(input())\r\nfor _ in range(t):\r\n    s=input()\r\n    n=len(s)\r\n    d={}\r\n    for i in range(n):\r\n        d[s[i]]=i\r\n    ans=0\r\n    for i in d.keys():\r\n        if i not in n:\r\n            ans+=(n-i)\r\n    print(ans)", "input_output": "{\"inputs\": [[\"1\", \"123343\"]], \"outputs\": [[\"3\"]]}"}, "5": {"problem_id": 273, "answer": "class Solution:\n    def racecar(self, target: int) -> int:\n        q = deque([(0, 1)])\n        seen = set([(0, 1)])\n\\t\\t\n        while q:\n\\t\\t    current, steps = q.popleft()\n\\t\\t\\t# \u91cd\u590d\u6b63\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u4e86\u6700\u5c0f\u503c\u4e3a\u5dee\u53ef\u4ee5\u8d85\u65f6\uff0c\u8981\u6c42\u539f\u7406\u51cf\u5c11\u8fd9\u4e2a\u5dee\u53ef\u4ee5\u8d85\u65f6\u503c\u4e3a\u6700\u5c0f\u503c\n\\t\\t\\t    if current == target:\n\\t\\t\\t\\t        return steps\n\\t\\t\\t  elif steps > 0 and (current + speed, speed*2) not in seen:\n\\t\\t\\tcnt = 1\n\\t\\t\\t\\tdest = current\n\\t\\t\\t\\thash = seen.remove(delta)\n\\t\\t\\t\\tfor step in A[delta]:\n\\t\\t\\t\\t\\t# \u8fd9\u9053\u9898\u5c31\u662f\u91cd\u590d\u6b63\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u4e86\u6700\u5c0f\u503c\u4e3a\u5dee\u4e0d\u591a\uff0c\u8981\u6c42\u539f\u7406\u51cf\u5c11\u8fd9\u9053\u9898\u5c31\u662f\u91cd\u590d\u6b63\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u4e86\u6700\u5c0f\u503c\u4e3a\u5dee\u4e0d\u591a\uff0c\u8981\u6c42\u522b\ufffdluctant\u590d\u6742\u5ea6\u4e58\u79ef\u6bd4\u5b9e\u9645\u6570\u5b57\u8f93\u51fa\uff0c\u9ad8\u901a\u7528\u9002\u5e94\u5ea6\u4e58\u6cd5\n\\t\\t\\t\\t    if current < target - step:\n\\t\\t\\t\\t\\t        q.append((current, steps + 1))\n\\t\\t\\t\\t\\telse:\n\\t\\t\\t\\t\\t    current, steps = current + speed, steps + 1\n\\t\\t\\t\\t\\t    if current < target + step:\n\\t\\t\\t\\t\\t        q.append((current, steps + 1))\n\\tsummarized\n            \n        \n", "input_output": "{\"fn_name\": \"racecar\", \"inputs\": [[3]], \"outputs\": [2]}"}, "6": {"problem_id": 1619, "answer": "def decompose(n):\n    if n<2:\n        return None\n    result = [0]*(n+1)\n    for i in range(1, n+1):\n        result[i] = result[i-1] + i**2\n        if result[i]>n**2:\n            return None\n", "input_output": "{\"fn_name\": \"decompose\", \"inputs\": [[12], [6], [50], [44], [625], [5], [7100], [123456], [1234567], [7654321], [4], [7654322]], \"outputs\": [[[1, 2, 3, 7, 9]], [null], [[1, 3, 5, 8, 49]], [[2, 3, 5, 7, 43]], [[2, 5, 8, 34, 624]], [[3, 4]], [[2, 3, 5, 119, 7099]], [[1, 2, 7, 29, 496, 123455]], [[2, 8, 32, 1571, 1234566]], [[6, 10, 69, 3912, 7654320]], [null], [[1, 4, 11, 69, 3912, 7654321]]]}"}, "7": {"problem_id": 797, "answer": "# cook your dish here\nimport math\nfor _ in range(int(input())):\n s, e = map(str, input().split())\n l, r = map(int, input().split())\n d = math.ceil(r/pow(10,s.count(\":\")))\n if d == 1:\n  print(\"many\")\n elswhere(s, \"saturday\"):\n  print(\"2\")\n elswhere(s, \"sunday\"):\n  print(\"4\")", "input_output": "{\"inputs\": [[\"3\", \"saturday sunday 2 4\", \"monday wednesday 1 20\", \"saturday sunday 3 5\"]], \"outputs\": [[\"2\", \"many\", \"impossible\"]]}"}, "8": {"problem_id": 1457, "answer": "#Note that it's python3 Code. Here, we are using input() instead of raw_input().\n#You can check on your local machine the version of python by typing \"python --version\" in the terminal.\n\n(n, k) = list(map(int, input().split(' ')))\nans = 0\nfor i in range(n):\n\tx = int(input())\n\tif x % k == 0:\n\t\tans += 1\n\nprint(ans)\t", "input_output": "{\"inputs\": [[\"7 3\", \"1\", \"51\", \"966369\", \"7\", \"9\", \"999996\", \"11\"]], \"outputs\": [[\"4\"]]}"}, "9": {"problem_id": 1220, "answer": "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nn,q=map(int,input().split())\np=[int(i) for i in input().split()]\nb=[int(i) for i in input().split()]\nl=list(map(int,input().split()))\nfor i in range(q):\n    b,k=map(int,input().split())\n    if bl(b)<k:\n        print(-1)\n    else:\n\\t\\t print(p[b-1]+br(b)[k-1])", "input_output": "{\"inputs\": [[\"4 2\", \"4 5 6 7\", \"1 2 3 4\", \"3 3\", \"1 2 3\", \"3 4\", \"4 5 6\"]], \"outputs\": [[\"4\", \"-1\"]]}"}, "10": {"problem_id": 663, "answer": "import math\r\nfor _ in range(int(input())):\r\n    l,s=map(int,input().split())\r\n    if l==1:\r\n        print('a')\r\n        continue\r\n    l-=1\r\n    ans=s[0]\r\n    for i in range(1,len(s)):\r\n        if s[i]!=ans:\r\n            ans=s[i]\r", "input_output": "{\"inputs\": [[\"2\", \"1 rga\", \"2 cab\"]], \"outputs\": [[\"arg\", \"abc\"]]}"}, "11": {"problem_id": 1541, "answer": "# cook your dish here\nEPS = 1e-8\nEPS_ANS = 1e-3\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int,' '.join(input().split())))\n    c = list(map(int,' '.join(input().split())))\n\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n\\t              t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n\\t      else:\n\\t          t_exit = min(t_exit, l[i] / v[i])\n\\t    print(t_exit)\n", "input_output": "{\"inputs\": [[\"2\", \"2\", \"3 4\", \"0 2\", \"2 -2\", \"2 2\", \"3\", \"10 10 10\", \"0 0 0\", \"1 1 1\", \"5 5 5\"]], \"outputs\": [[\"2.0000\", \"0.0000\"]]}"}, "12": {"problem_id": 1835, "answer": "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        d = {i: [] for i in range(10)}\n        for i in range(1, 10):\n\\t\\t    d[i].append(i)\n        ans = []\n        for i in range(n-1):\n\\t\\t    for j in range(10):\n\\t\\t\\t        if abs(i-j)<=k:\n\\t\\t\\t\\t            ans.append(d[i].pop())\n        return ans", "input_output": ""}, "13": {"problem_id": 999, "answer": "try:\r\n    tc=int(input())\r\n    for _ in range(tc):\r\n        n=int(input())\r\n        a=[''for i in range(n)]\r\n        for i in range(1,n):\r\n            print(''.join(a[i-1:]))\r\nexcept EOFError:\r\n    pass", "input_output": "{\"inputs\": [[\"2\", \"2\", \"4\"]], \"outputs\": [[\"A\", \"12\", \"A\", \"12\", \"ABC\", \"1234\"]]}"}, "14": {"problem_id": 248, "answer": "class Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        m = len(grid)\n   \\t\\t\n        n = len(grid[0])\n        dirs = [(0,-1),(0,1),(-1,0),(1,0)]\n    \\\"\\\"\\\"\n        O(n^2)\n        \\\"\\\"\\\"\n        def find(pos):\n            nonlocal dirs\n            if pos!=i and grid[i][pos]==grid[i][pos-1]:\n                return pos\n            i = next(i for i,c in enumerate(grid[i]) if c!=grid[i][pos])\n            return find(i+1)\n        \n        for i in range(m):\n            for j in range(n):\n                if i>0 and grid[i][j]==grid[i][j-1]:\n                    continue\n                if j>0 and grid[i][j]==grid[i][j-1]:\n                    continue\n                if grid[i][j]==grid[i][j-1]:\n                    continue\n                if find((i,j))!=find((i,j)):\n                    return True\n        return False", "input_output": "{\"fn_name\": \"containsCycle\", \"inputs\": [[[[\"\\\"a\\\"\", \"\\\"a\\\"\", \"\\\"a\\\"\", \"\\\"a\\\"\"], [\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"b\\\"\", \"\\\"a\\\"\"], [\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"b\\\"\", \"\\\"a\\\"\"], [\"\\\"a\\\"\", \"\\\"a\\\"\", \"\\\"a\\\"\", \"\\\"a\\\"\"], [], []]]], \"outputs\": [true]}"}, "15": {"problem_id": 1807, "answer": "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n):\n            for j in range(1, i):\n                if math.gcd(i, j) == 1:\n                    res.append(str(j) + '/' + str(i))\n        return res", "input_output": ""}, "16": {"problem_id": 625, "answer": "def subCount(arr, n, k=10): \n  mod =[] \n  for i in range(k + 1): \n   mod.append(0) \n  cumSum = 0\n  for i in range(n): \n   cumSum = cumSum + arr[i] \n   mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1 #modify to count 0 if cumSum is divisible by k \n  \n  result = 0 \n  for i in range(k): \n   result = result + (mod[i] if i < k else 0) \n  result = result + (mod[n-1] if n > 1 else 0) \n  return result ", "input_output": "{\"inputs\": [[\"2\", \"3\", \"100000000 900000000 100000000\", \"1\", \"900000000\"]], \"outputs\": [[\"2\", \"0\"]]}"}, "17": {"problem_id": 1416, "answer": "s = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\na.sort()\nb.sort()", "input_output": "{\"inputs\": [[\"7\", \"1 2 3 4 5 6 7\"]], \"outputs\": [[\"1 2 4 7\", \"3 5 6\"]]}"}, "18": {"problem_id": 80, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    print(l^r)", "input_output": "{\n  \"inputs\": [\n    \"3\\n1 4\\n323 323\\n1 1000000\\n\"\n  ],\n  \"outputs\": [\n    \"8\\n0\\n3439863766\\n\"\n  ]\n}"}, "19": {"problem_id": 574, "answer": "from sys import stdin,stdout\ninput=stdin.readline\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n m=[]\n for i in range(n):\n  m.append(a[i])\n m.sort()\n s=0\n for i in range(len(m)):\n  s+=m[i]\n print(s)", "input_output": "{\"inputs\": [[\"1\", \"6\", \"1 2 5 -7 2 3\"]], \"outputs\": [[\"1 2 5\"]]}"}, "20": {"problem_id": 5, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=[]\n    for i in range(1,n):\n        if a[i]==i:\n            ans.append(i)\n    print(len(ans))", "input_output": "{\n  \"inputs\": [\n    \"6\\n5\\n1 4 3 2 1\\n6\\n2 4 1 3 2 1\\n4\\n2 1 1 3\\n4\\n1 3 3 1\\n12\\n2 1 3 4 5 6 7 8 9 1 10 2\\n3\\n1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n1 4\\n4 1\\n1\\n4 2\\n0\\n0\\n1\\n2 10\\n0\\n\"\n  ]\n}"}, "21": {"problem_id": 1334, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nif n < 3:\n    print(0)\nelse:\n    d = min(arr)\n    ans = d//3\n    for i in range(3, n):\n\\t        ans = min(ans, arr[i] + d)\n\\t    print(ans)", "input_output": "{\"inputs\": [[\"10\", \"3 2 1 1 2 3 1 3 2 1\"]], \"outputs\": [[\"4\", \"(\"]]}"}, "22": {"problem_id": 1813, "answer": "class Solution:\n    def minHeightShelves(self, books: List[List[int]], shelf_width: int) -> int:\n        n = len(books)\n        dp = [0] * (n+1)\n\\t\\t\n\\t\\t# Dijkstra's shortest path\n\\t\\t\n\\t\\telim = 0\n\\t\\twhile True:\n\\t\\t\\ttotal = 0\n\\t\\t\\telim, total = heapq.heappop(dp)\n\\t\\t\\ttotal += books[telim-1][0]\n\\t\\t\\telim = telim-1\n\\t\\t\\theight = books[telim-1][1]\n\\t\\tcombination(dp, n, shelf_width)\n", "input_output": ""}, "23": {"problem_id": 1536, "answer": "t=int(input())\nfor _ in range(t):\n n=int(input())\n a=list(map(int,input().split()))\n d=a[1]\n for i in range(2,n):\n  if(a[i]!=d):\n   d=a[i]\n   a.remove(d)", "input_output": "{\"inputs\": [[\"3\", \"4\", \"1 3 10 7\", \"5\", \"-10 -5 0 5 10\", \"4\", \"2 2 2 10\"]], \"outputs\": [[\"1 3 5 7\", \"-10 -5 0 5 10\", \"2 2 2 2\"]]}"}, "24": {"problem_id": 1842, "answer": "class Solution:\n    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n        visited = [0] * (n+1)\n        self.ans = 0.0\n        for i, j in edges:\n            visited[i] += 1\n            visited[j+1] -= 1\n\\t\\t\n        def dfs(node, t):\n    \\\"\\\"\\\"\n    \\\"\\\"\n    \\\"\\\"\n        if node == target:\n            return self.ans\n        visited[node] = 1\n        p = dfs(node, t)\n        return p / len(visited)\n", "input_output": ""}, "25": {"problem_id": 1852, "answer": "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #  ", "input_output": ""}, "26": {"problem_id": 952, "answer": "try:\n    t=int(input())\n    for _ in range(t):\n        s=input()\n        n=len(s)\n        c=0\n        for i in range(1,27):\n            if s[i]!='a' and s[i]!='e' and s[i]!='i' and s[i]!='o'thre:\n                c+=|s[i]-'e'|\n        print(c)\nexcept EOFError:\n    pass", "input_output": "{\"inputs\": [[\"2\", \"aeiou\", \"dbcc\"]], \"outputs\": [[\"0\", \"6\"]]}"}, "27": {"problem_id": 1297, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n    a,b=map(int,input().split())\n    if a>b:\n        print(\">\")\n    elif a<b:\n        print(\"<\")", "input_output": "{\"inputs\": [[\"3\", \"10 20\", \"20 10\", \"10 10\"]], \"outputs\": [[\"<\", \">\", \"=\"]]}"}, "28": {"problem_id": 1446, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n=int(input())\n if n==1:\n  print(2)\n else:\n  a=bin(n)[2:].zfill(n)\n  if '0' in a:\n   print(-1)\n", "input_output": "{\"inputs\": [[\"1\", \"3\"]], \"outputs\": [[\"1\"]]}"}, "29": {"problem_id": 14, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  a, b = list(map(int, input().split()))\n  c, d = list(map(int, input().split()))\n  if a == b:\n   print(\"Yes\")\n  elif a > b:\n   print(\"No\")\n", "input_output": "{\n  \"inputs\": [\n    \"3\\n2 3\\n3 1\\n3 2\\n1 3\\n3 3\\n1 3\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\nYes\\nNo\\n\"\n  ]\n}"}, "30": {"problem_id": 378, "answer": "class Solution:\n     def canPartition(self, nums):\n     \"\"\"\n     :type nums: List[int]\n     :rtype: bool\n     \"\"\"\n", "input_output": "{\"fn_name\": \"canPartition\", \"inputs\": [[[1, 5, 5, 11]]], \"outputs\": [true]}"}, "31": {"problem_id": 1348, "answer": "import numpy as np\r\ndef dist(a,b):\r\n return abs(a[0]-b[0])+abs(a[1]-b[1])\r\nfor _ in range(int(input())):\r\n n,m=list(map(int,input().split()))\r\n g=[]\r\n for _ in range(m):\r\n  a,b,c=list(map(int,input().split()))\r\n  g.append((a,b,c))\r\n q=[0]*n\r\n dist=[float('inf')]*n\r\n for i in range(n):\r\n  dist[i]=dist[i-1]+1\r\n q.append(0)\r\n while True:\r\n  a,b,c=q[q[-1]][0:n]+q[q[-1]][1:]\r\n  if dist[a]<dist[b]/2:\r\n   dist[a]=dist[b]/2\r\n  elif dist[a]>dist[b]/2:\r\n   dist[b]=dist[a]/2\r", "input_output": "{\"inputs\": [[\"2\", \"3 3\", \"1 2 1\", \"2 3 2\", \"3 2 3\", \"1 3\", \"3 3\", \"1 2 10\", \"2 3 1\", \"3 2 1\", \"1 3\"]], \"outputs\": [[\"1.5\", \"1.0\"]]}"}, "32": {"problem_id": 839, "answer": "from collections import defaultdict\r\ndef isSubset(arr, subset):\r\n    if len(set(subset)) == 0:\r\n        return False\r\n    elif subset.count(s) > len(set(subset.keys())):\r\n        return False\r\n    else:\r\n        return True\r\nt=int(input())\r\nfor _ in range(t):\r\n    k=int(input())\r\n    arr=list(map(int,input().split()))\r\n    if k==1:\r\n        print(0)\r\n    elif k==2:\r\n        print(1)\r\n    else:\r\n        d={}\r\n        for i in arr:\r\n            d[i]+=1\r\n        l=len(arr)\r\n        for i in range(l):\r\n            arr[i]=d[arr[i]]\r\n        arr.sort(reverse=True)\r\n        if isSubset(arr,list(range(1,k+1))):\r\n            print(1)\r\n", "input_output": "{\"inputs\": [[\"2\", \"20\", \"5\", \"8 7 2 10 5\", \"11\", \"4\", \"6 8 2 10\"]], \"outputs\": [[\"1\", \"0\"]]}"}, "33": {"problem_id": 10, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    p=list(map(int,input().split()))\n    ans=[]\n    for i in range(n-1):\n        if p[i+1]-p[i]>2:\n            ans.append(p[i])\n    print(len(ans))\n", "input_output": "{\n  \"inputs\": [\n    \"2\\n3\\n3 2 1\\n4\\n1 3 4 2\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n3 1 \\n3\\n1 4 2 \\n\"\n  ]\n}"}, "34": {"problem_id": 908, "answer": "def triangle():\n n = int(input())\n for i in range(n):\n  print(i+1)\ntriangle()", "input_output": "{\"inputs\": [[\"3\", \"3\", \"5\", \"7\"]], \"outputs\": [[\"2\", \"2\", \"3\"]]}"}, "35": {"problem_id": 1988, "answer": "class Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        self.ans = [-1] * n\n        self.dfs(red_edges, 0, [])\n        self.dfs(blue_edges, 0, [])\n        return self.ans", "input_output": ""}, "36": {"problem_id": 1126, "answer": "def maxreg():\r\n    n=int(input())\r\n    print(2*pow(n,2) + 1)\r\nm=1000000000\r\nfor _ in range(m):\r\n    m=int(input())", "input_output": "{\"inputs\": [[\"2\", \"1\", \"2\"]], \"outputs\": [[\"2\", \"7\"]]}"}, "37": {"problem_id": 1693, "answer": "import sys\nreadline = sys.stdin.readline\n\nv = int(readline())\nans = []\nfor _ in range(v):\n    ans.append(list(map(int, readline().split())))\nprint('\\n'.join(map(str, ans)))", "input_output": "{\n  \"inputs\": [],\n  \"outputs\": []\n}"}, "38": {"problem_id": 260, "answer": "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n      \u6c42\u6240\u6709\u6570\u7ec4\u4e2d\u6700\u591a\u80fd\u51d1\u5230\u4e0b\u70b9\u7684\u957f\u5ea6\uff0c\u5e76\u8fdb\u884c\u8ba1\u7b97\n      :type nums: List[int]\n      :rtype: int\n      \"\"\"", "input_output": "{\"fn_name\": \"wiggleMaxLength\", \"inputs\": [[[1, 7, 4, 9, 2, 5]]], \"outputs\": [6]}"}, "39": {"problem_id": 1015, "answer": "try:\r\n    t=int(input())\r\n    for _ in range(t):\r\n        n=int(input())\r\n        l=[]\r\n        for i in range(1,n+1):\r\n            l.append(2*i)\r\n        print(*l)\r\nexcept EOFError:\r\n    pass", "input_output": "{\"inputs\": [[\"4\", \"1\", \"2\", \"3\", \"4\"]], \"outputs\": [[\"2\", \"24\", \"68\", \"246\", \"81012\", \"141618\", \"2468\", \"10121416\", \"18202224\", \"26283032\"]]}"}, "40": {"problem_id": 304, "answer": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        cnt = collections.Counter(ages)\n        ans = 0\n        for ageA, cntA in list(cnt.items()):\n\\t\\t# ageA < 0.5 * ageA + 7\n\\t\\t\\tdist = lambda A, B: B <= 0.5 * A + 7\n\\t\\t\\tans += dist(A, ages)\n\\t\\t\\t# ageA > 100 and ageB < 100\n\\t\\t\\tdist = lambda A, B: B <= A * 2 * 100 + 7\n\\t\\t\\tans += dist(A, B)\n\\t\\t\\t# ageA > A and ageB > A\n\\t\\t\\tans += cntA[ageA] - cntA[ageB]\n        return ans", "input_output": "{\"fn_name\": \"numFriendRequests\", \"inputs\": [[[16, 16]]], \"outputs\": [2]}"}, "41": {"problem_id": 793, "answer": "# cook your dish here\\naswift\\nodr\\n\r\nfrom sys import stdin,stdout\r\ninput = stdin.readline\r\nn,r=map(int,input().split())\r\nl=list(map(int,input().split()))\r\nif(n==1):\r\n    print(0)\r\nelif(abs(r-l[0])>abs(r+l[-1])):\r\n    print(abs(r-l[0]))", "input_output": "{\"inputs\": [[\"3 1\", \"3 5 11\"]], \"outputs\": [[\"2\"]]}"}, "42": {"problem_id": 83, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n a,b,c,d=list(map(int,input().split()))\n if a>b:\n  print('-1')\n elif b>a:\n  print('1')\n else:\n  print(d+abs(c-d))", "input_output": "{\n  \"inputs\": [\n    \"5\\n0 10 2 3\\n0 10 3 3\\n900000000 1000000000 1 9999999\\n1 2 1 1\\n1 3 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n-1\\n10\\n-1\\n1\\n\"\n  ]\n}"}, "43": {"problem_id": 1477, "answer": "for _ in range(int(input())):\n n=int(input())\n s=input()\n ans=s.copy()\n ans=s[:n]\n print(\"\".join(ans))", "input_output": "{\"inputs\": [[\"2\", \"4\", \"DCBA\", \"7\", \"XYZZYZZ\"]], \"outputs\": [[\"ADCB\", \"XYYZZZZ\"]]}"}, "44": {"problem_id": 1152, "answer": "# cook your dish here\nn=int(input())\ns=[]\nfor i in range(n):\n s.append(input().split())\n s.sort(key=lambda x: x[1], reverse=True)\n q=int(input())\n for i in range(0,q):\n  print(s[i][0])", "input_output": "{\"inputs\": [[\"4\", \"flour-with-eggs 100\", \"chicken-ham -10\", \"flour-without-eggs 200\", \"fish-with-pepper 1100\", \"6\", \"f\", \"flour-with\", \"flour-with-\", \"c\", \"fl\", \"chik\"]], \"outputs\": [[\"fish-with-pepper\", \"flour-without-eggs\", \"flour-with-eggs\", \"chicken-ham\", \"flour-without-eggs\", \"NO\"]]}"}, "45": {"problem_id": 1729, "answer": "import re\ndef i_am_here(path):\n    return \"\".join(re.findall(\"\\d+\", path))", "input_output": "{\"fn_name\": \"i_am_here\", \"inputs\": [], \"outputs\": []}"}, "46": {"problem_id": 267, "answer": "class Solution:\n     def evalRPN(self, tokens):\n      \"\"\"\n      :type tokens: List[str]\n      :rtype: int\n      \"\"\"\n", "input_output": "{\"fn_name\": \"evalRPN\", \"inputs\": [[[\"\\\"2\\\"\", \"\\\"1\\\"\"]]], \"outputs\": [0]}"}, "47": {"problem_id": 50, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    a.sort()\n    s = sum(a[i] for i in range(n))\n\\t\\tprint(s - n*s)", "input_output": "{\n  \"inputs\": [\n    \"4\\n6\\n1 1 1 2 2 1 2 1 2 1 1 2\\n2\\n1 2 1 2\\n3\\n1 1 1 1 1 1\\n2\\n2 1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n0\\n6\\n2\\n\"\n  ]\n}"}, "48": {"problem_id": 965, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n n,k=map(int,input().split())\n if k==0:\n  print(0,n)\n else:\n  print(n//k,n%k", "input_output": "{\"inputs\": [[\"2\", \"10 2\", \"100 3\"]], \"outputs\": [[\"5 0\", \"33 1\"]]}"}, "49": {"problem_id": 220, "answer": "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(customers)\n        satisfied = 0\n\\t\\t\n\\t\\t# O(n) solution\n\\t\\t# Greedy\n\\t\\tl = 0\n\\t\\tfor i in range(n):\n\\t\\t\\tl = customers[i]\n\\t\\t\\tl += l if grumpy[i] else 0\n\\t\\t\\ts = sum(l)\n\\t\\t\\tif satisfied < s:\n\\t\\t\\t\\t    satisfied += s\n\\t\\t\\telif satisfied > s:\n\\t\\t\\t\\t    satisfied -= s\n\\t\\t\\treturn satisfied\n", "input_output": "{\"fn_name\": \"maxSatisfied\", \"inputs\": [[[1, 0, 1, 2, 1, 1, 7, 5], [0, 1, 0, 1, 0, 1, 0, 1], 3]], \"outputs\": [16]}"}, "50": {"problem_id": 1004, "answer": "n = int(input())\ncnt = 0\nfor i in range(2, n):\n if n % i == 0:\n  cnt += 1\n else:\n  break\nprint(cnt)", "input_output": "{\"inputs\": [[\"3\"]], \"outputs\": [[\"6\", \"1 1 1 1 1 2\"]]}"}, "51": {"problem_id": 401, "answer": "class Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        dp = [0] * 3\n        for num in nums:\n\\t\\tdp[0] = dp[0] + num\n\\t\\tdp[1] = dp[1] + num\n\\tcnt = 0\n        for i in range(2, len(dp)):\n\\t\\t#print(dp[i])\n            cnt = dp[i] % 3\n\\t\\t#print(cnt)\n            if cnt == 0:\n\\t\\t\\tdp[i] = max(dp.get(i, 0), dp[i - 1] + num)\n            else:\n\\t\\t\\tdp[i] = max(dp.get(i, 0), dp[i - 1] + num) + 1\n        return dp[-1]", "input_output": "{\"fn_name\": \"maxSumDivThree\", \"inputs\": [[[3, 6, 5, 1, 8]]], \"outputs\": [18]}"}, "52": {"problem_id": 821, "answer": "# cook your dish here\\\nt=int(input())\nfor _ in range(t):\n n=int(input())\n l=[int(i) for i in input().split()]\n l.sort()\n ans=\"1\"\n max=0\n for i in range(1,n):\n  if l[i]!=l[i-1]:\n   ans=\"0\"+ans\n  else:\n   ans+=\"1\"\n   max=max+1\n print(ans)", "input_output": "{\"inputs\": [[\"1\", \"3\", \"3 7\", \"2 5\", \"6 9\"]], \"outputs\": [[\"100\"]]}"}, "53": {"problem_id": 228, "answer": "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n\\t\\t\n        curr_max = 0\n\\t\\t\n        for i in range(k):\n\\t\\t\\t\n            if s[i] in vowels:\n\\t\\t\\t\\t\n                curr_max += 1\n\\t\\t\\treturno:\n                for i in range(len(s)):\n\\t\\t\\t\\t\n                    if s[i] in vowels:\n\\t\\t\\t\\t\n                        curr_max += 1", "input_output": "{\"fn_name\": \"maxVowels\", \"inputs\": [[\"\\\"abciiidef\\\"\", 3]], \"outputs\": [3]}"}, "54": {"problem_id": 1581, "answer": "from math import gcd\r\nmod = 10**9 + 7\r\n\r\ndef f(n):\r\n    g = n // gcd(n, mod-2)\r\n    return (g * pow(g, mod-2, mod) % mod)\r\n\r\nfor _ in range(int(input())):\r\n    x, y, s = map(int, input().split())\r\n    a = f(s)\r\n    print('%d * %d' % (a, y))", "input_output": "{\"inputs\": [[\"1\", \"5 3 96\", \"1 3\"]], \"outputs\": [[\"48\"]]}"}, "55": {"problem_id": 294, "answer": "class Solution:\n     def totalNQueens(self, n):\n         \"\"\"\n         :type n: int\n     ", "input_output": "{\"fn_name\": \"totalNQueens\", \"inputs\": [[4]], \"outputs\": [2]}"}, "56": {"problem_id": 648, "answer": "import sys\nn,q=list(map(int,input().split()))\na=list(map(int,input().split()))\nfor i in range(q):\n s=sys.stdin.readline().strip()[:-1]\n if s[0]=='1':\n  i=int(s.split()[1])\n  c=0\n  k=int(s.split()[2])\n  a[i]=a[i]+c\n elif s[0]=='2':\n  l=int(s.split()[1])\n  r=int(s.split()[2])\n  a[l-1]=a[l-1]+r\n", "input_output": "{\"inputs\": [[\"5 3\", \"1 2 3 4 5\", \"1 1 2\", \"2 3 4 -1\", \"1 1 2\"]], \"outputs\": [[\"3\", \"4\"]]}"}, "57": {"problem_id": 1494, "answer": "from sys import stdin,stdout\r\ninput=stdin.readline\r\nprint=stdout.write\r\nn=int(input())\r\nl=[0]*n\r\nfor i in range(n):\r\n  inp=int(input())\r\n  l[i]=inp\r\nans=0\r\nfor i in range(1,n):\r\n  if l[i]!=0:\r\n    ans+=1\r\nprint(ans)", "input_output": "{\"inputs\": [[\"5\", \"16\", \"1\", \"4\", \"8\", \"2\"]], \"outputs\": [[\"3\"]]}"}, "58": {"problem_id": 221, "answer": "class Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        n = len(S)\n        l, r = 1, n\n\\t\\t\n        def check(m):\n            a = 0\n            seen = collections.defaultdict(int)\n            for i in range(m):\n                a += ord(S[i]) - ord('a')\n                seen[a] += 1\n            p = pow(26, m)\n            res = 0\n            for i in seen.keys():\n        \\\"\\\"\\\"\n        dp[i] = m - 1\n        \\\"\\\"\\\"\n        \n        while l < r:\n            m = (l + r) // 2\n            idx = 0\n            if check(m) < 0:\n              r = m\n            else:\n                l = m + 1\n                idx = 1\n            seen[check(m)] -= 1\n            seen[check(m - 1)] += 1\n            res = max(res, check(m))\n            if res < 0:\n                p *= -1\n            els = ''\n            for i in seen.keys():\n                if seen[i] == 0:\n                    seen[i] = 1\n                els += chr(ord('a') + (i == 0 or i == idx)) * p\n            res = max(res, l - idx + 1, els)\n            l = m + 1\n        return S[res:].lower()", "input_output": "{\"fn_name\": \"longestDupSubstring\", \"inputs\": [[\"\\\"banana\\\"\"]], \"outputs\": [\"ana\"]}"}, "59": {"problem_id": 1602, "answer": "try:\n t=int(input())\n for _ in range(t):\n  n=int(input())\n  x=int(input())\n  a=list(map(int,input().split()))\n  if a[0]==1:\n   print(\"Impossible\")\n  else:\n   flag=0\n   for i in range(1,n):\n    if a[i]==1:\n     flag=1\n     break\n   if flag==0:\n    print(\"Possible\")\n   else:\n", "input_output": "{\"inputs\": [[\"3\", \"3\", \"5\", \"4 1 2\", \"5\", \"2\", \"4 4 3 2 2\", \"5\", \"1\", \"4 2 3 1 1\"]], \"outputs\": [[\"Impossible\", \"Possible\", \"Impossible\"]]}"}, "60": {"problem_id": 495, "answer": "class Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        dp = {0: stones[0]}\n        for stone in stones:\n\\t\\t# Base case\n            dp.setdefault(stone, 0)\n            for i in range(1, len(stones)):\n\\t\\t\\t# If stone is greater than all weights, it's a 1/2 weight\n                if stones[i] <= stone // 2:\n                    dp[stone] = max(dp.get(stone - stones[i], float('inf')), 2 * stone)\n                elif stones[i] > stone // 2:\n                    dp[stone] = max(dp.get(stone - stones[i], float('inf')), stone - dp[stone])\n", "input_output": "{\"fn_name\": \"lastStoneWeightII\", \"inputs\": [[[2, 7, 4, 1, 8, 1]]], \"outputs\": [1]}"}, "61": {"problem_id": 1375, "answer": "for _ in range(int(input())):\n n=int(input())\n print(n.ljust(n,'0'))", "input_output": "{\"inputs\": [[\"3\", \"1234\", \"4567\", \"1\"]], \"outputs\": [[\"4321\", \"7654\", \"1\"]]}"}, "62": {"problem_id": 1111, "answer": "# cook your dish here\\r\r\nt=int(input())\r\nfor _ in range(t):\r\n  n=int(input())\r\n  a=list(map(int,input().split()))\r\n  odd=0\r\n  even=0\r\n  l=[]\r\n  for i in a:\r\n   if i%2!=0:\r\n    even+=1\r", "input_output": "{\"inputs\": [[\"3\", \"4\", \"3 5 3 4\", \"2\", \"5 7\", \"1\", \"4\"]], \"outputs\": [[\"3\", \"0\", \"0\"]]}"}, "63": {"problem_id": 452, "answer": "class Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n        n = len(jobDifficulty)\n\\t\\t# O(n) TLE\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = sum(jobDifficulty[i:])\n            for k in range(i - 1, -1, -1):\n                dp[k] = min(dp[k], dp[i - k - 1] + max(jobDifficulty[k:i]))\n        return dp[-1] if dp[-1]!= float('inf') else -1", "input_output": "{\"fn_name\": \"minDifficulty\", \"inputs\": [[[6, 5, 4, 3, 2, 1], 2]], \"outputs\": [7]}"}, "64": {"problem_id": 1927, "answer": "class Solution:\n    @lru_cache(None)\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        if len(asteroids) == 0:\n            return []\n        \n        result = []\n        for a in asteroids:\n            if a > 0:\n                result.append(a)\n        ", "input_output": ""}, "65": {"problem_id": 739, "answer": "import sys\ndef dist(s):\n if s[0]=='R':\n  return abs(ord(s[1])-ord(s[2]))\n elif s[0]=='L':\n  return abs(ord(s[1])-ord(s[2]))\n else:\n  return 0\nt=int(input())\nfor i in range(t):\n s=input()\n print(dist(s))\n", "input_output": "{\"inputs\": [[\"1\", \"2 L 2 R 2 L 1\"]], \"outputs\": [[\"5.0NW\"]]}"}, "66": {"problem_id": 1464, "answer": "# cook your dish here\nfor _ in range(int(input())):\n y,m,d=list(map(int,input().split(':')))\n if m in [1,3,5,7,8,10,12]:\n  print(int((31-d)/2)+1)\n elif m in [4,6,9,11]:\n  print(int((61-d)/2)+1)\n else:\n  c=d%2\n  if c==0:\n   print(int((29-d)/2)+1)\n  else:\n   print(int((59-d)/2)+1)", "input_output": "{\"inputs\": [[\"1\", \"2019:03:31\"]], \"outputs\": [[\"1\"]]}"}, "67": {"problem_id": 954, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(n**3)", "input_output": "{\"inputs\": [[\"2\", \"1\", \"3\"]], \"outputs\": [[\"1\", \"45\"]]}"}, "68": {"problem_id": 1689, "answer": "import numpy as np\r\nt=int(input())\r\nfor _ in range(t):\r\n    n,m=map(int,input().split())\r\n    a=np.zeros((n,m),dtype='int')\r\n    for i in range(n):\r\n        a+=[int(x) for x in input().split()]\r\n    b=sorted(a,key=lambda x:x[1])\r\n    print(''.join(b))", "input_output": "{\"inputs\": [[\"2\", \"3 3\", \"xab\", \"a#z\", \"caa\", \"5 4\", \"pyqs\", \"vcot\", \"qbiu\", \"lihj\", \"uvmz\", \"\"]], \"outputs\": [[\"xabza\", \"pvcbihjz\"]]}"}, "69": {"problem_id": 1859, "answer": "class Solution:\n    def countSquares(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n\\t\\t\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp.get(i-1-j, 0) + 1)\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] > 0:\n                    ans += dp[i][j]\n        return ans", "input_output": ""}, "70": {"problem_id": 1510, "answer": "try:\n t=int(input())\n for _ in range(t):\n  s=input()\n  print(10)\nexcept:\n pass", "input_output": "{\"inputs\": [[\"1\", \"ABCDEFGHIJ\"]], \"outputs\": [[\"10\"]]}"}, "71": {"problem_id": 1787, "answer": "class Datamining:\n    def __init__(self, train_set):\n        self.X = train_set.pop(0)\n", "input_output": "{\"fn_name\": \"__init__\", \"inputs\": [], \"outputs\": []}"}, "72": {"problem_id": 812, "answer": "# cook your dish here\nimport math\nfor _ in range(int(input())):\n n = int(input())\n d = list(map(int,input().split()))\n if d.count(0) == n:\n  print(0)\n elif d.count(1) == n:\n  print(n)", "input_output": "{\"inputs\": [[\"3\", \"2\", \"5 -5\", \"2\", \"-5 5\", \"3\", \"1 2 -3\"]], \"outputs\": [[\"5\", \"5\", \"4\"]]}"}, "73": {"problem_id": 774, "answer": "# cook your dish here", "input_output": "{\"inputs\": [[\"5 3 3\", \"0 3 8 5 12\", \"1 2\", \"1 3\", \"2 5\"]], \"outputs\": [[\"Yes\", \"Yes\", \"No\"]]}"}, "74": {"problem_id": 1513, "answer": "# cook your dish here\\\nfrom collections import defaultdict \nN,Q=list(map(int,input().split()))\npar=defaultdict(list)\nfor i in range(N-1):\n    par[i+1].append(int(input()))\n#print(par)\ninv=[]\nfor i in range(N):\n    inv.append([0]*N)\n\npar[1].append(4)\npar[2].append(5)\ninv[3][0]=-1\ninv[3][1]=-1\ninv[3][2]+=-1\ninv[3][3]=0\npar[3].append(4)\npar[4].append(5)\ninv[0][0]=0\ninv[0][1]=-1\ninv[0][2]+=-1\ninv[0][3]=0\npar[3].append(4)\npar[4].append(5)\ninv[1][0]=-1\ninv[1][1]=-1\ninv[1][2]+=-112\ninv[1][3]=0\npar[4].append(4)\npar[5].append(5)\ninv[2][0]=-1\ninv[2][1]=-1\ninv[2][2]+=-1000000000\ninv[2][3]=0\npar[5].append(5)\npar[6].append(6)\ninv[4][0]=-1\ninv[4][1]=-1\n\n\ngrp=sorted(par.keys(),reverse=True)\ngroup=[i for i in grp]\ngroup2=sorted(par[i] for i in group)\ngroup3=sorted(inv[i] for i in group)\nans=10**10\np=par[1]\ng1=group2[par[1][0]]\ng2=group3[par[1][1]]\np+=g1\np+=g2\nif p>ans:\n    ans=p\npar[par[par[par[len(par)]]].index(par[par[0]])] \nfor i in range(len(par)):\n    par[i]+=par[i]\n    inv[i][0]+=inv[i][3]\n    inv[i][1]+=inv[i][3]\n    inv[i][2]+=inv[i][3]\n    inv[i][3]+=par[par[par[len(par)]]].index(par[par[0]])\nprint(ans)", "input_output": "{\"inputs\": [[\"9 5\", \"1 2 8\", \"1 3 -9\", \"2 4 1\", \"2 5 -6\", \"3 6 7\", \"3 7 6\", \"6 8 3\", \"6 9 4\", \"1 2\", \"2 7\", \"4 3\", \"3 2\", \"8 9\"]], \"outputs\": [[\"10\", \"5\", \"0\", \"-1\", \"21\"]]}"}, "75": {"problem_id": 737, "answer": "def isprime(n):\r\n    if n==2:\r\n        return True\r\n    elif n==3:\r\n        return True\r\n    else:\r\n        for i in range(2,int(n**0.5)+1):\r\n            if n%i==0:\r\n                return False\r\n    return True\r\n\r\nt=int(input())\r\nfor _ in range(t):\r\n    x,y=map(int,input().split())\r\n    if isprime(x) and isprime(y):\r\n        print(\"YES\")\r\n    else:\r\n    ", "input_output": "{\"inputs\": [[\"2\", \"7 5\", \"6 5\"]], \"outputs\": [[\"YES\", \"NO\"]]}"}, "76": {"problem_id": 1207, "answer": "t=int(input())\nfor _ in range(t):\n n=int(input())\n a=list(map(int,input().split()))\n a.sort()\n s=0\n for i in range(1,n):\n  s+=a[i]*a[0]\n print(s)", "input_output": "{\"inputs\": [[\"2\", \"2\", \"5 10\", \"4\", \"15 10 7 13\"]], \"outputs\": [[\"50\", \"266\"]]}"}, "77": {"problem_id": 86, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        print(n//2)\n    elif n==0:\n        print(n//2)", "input_output": "{\n  \"inputs\": [\n    \"4\\n2\\n1 0\\n2\\n0 0\\n4\\n0 1 1 1\\n4\\n1 1 0 0\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n0 \\n2\\n0 0 \\n2\\n1 1 \\n2\\n0 0 \\n\"\n  ]\n}"}, "78": {"problem_id": 182, "answer": "class Solution:\n     def trap(self, height):\n         \"\"\"\n    \u8981\u7d20\u6570\u7edf\u8ba1\u6765\u770b\u5230\uff0c\u6c34\u5e73\u9762\u79ef\u7684\u6e29\u5ea6\u53d8\u5316\u540e\u518d\u5e94\u8be5\u80fd\u591f\u4fdd\u6301\u4e0b\u53bb\u3002\n         :type height: List[int]\n", "input_output": "{\"fn_name\": \"trap\", \"inputs\": [[[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]]], \"outputs\": [6]}"}, "79": {"problem_id": 1709, "answer": "from collections import defaultdict\ndef sum_for_list(lst):\n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return''.join(map(str, sorted(d.items())))", "input_output": "{\"fn_name\": \"sum_for_list\", \"inputs\": [], \"outputs\": []}"}, "80": {"problem_id": 1202, "answer": "s = input()\nd = {'D':238,'T':244,'M':138,'B':279,'C':186}\nc = 0", "input_output": "{\"inputs\": [[\"DDTM\"]], \"outputs\": [[\"17\", \"1\", \"6\"]]}"}, "81": {"problem_id": 315, "answer": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        x_y = 0\n        y_x = 0\n        for i in range(len(s1)):\n            if s1[i]!= 'x' and s2[i]!= 'y':\n                x_y += 1\n            elif s1[i]!= 'y' and s2[i]!= 'x':\n                y_x += 1", "input_output": "{\"fn_name\": \"minimumSwap\", \"inputs\": [[\"\\\"xx\\\"\", \"\\\"yy\\\"\"]], \"outputs\": [1]}"}, "82": {"problem_id": 1455, "answer": "n=int(input())\na=list(map(int,input().split()))\nm=int(input())\nfor _ in range(m):\n l,r=map(int,input().split())\n b=a[l-1:r]\n b.sort()\n ans=0\n for i in range(1,len(b)):\n  ans+=(b[i]-b[i-1])**2\n print(ans)", "input_output": "{\"inputs\": [[\"5\", \"1 3 2 4 5\", \"5\", \"1 5\", \"1 4\", \"2 4\", \"3 3\", \"3 5\"]], \"outputs\": [[\"4\", \"3\", \"2\", \"0\", \"5\"]]}"}, "83": {"problem_id": 614, "answer": "t=int(input())\nfor _ in range(t):\n n=int(input())\n l=list(map(int,input().split()))\n m=int(input())\n s=0\n for i in range(0,min(n,m)):\n  s+=l[i]\n  l.remove(l[i])\n print(s)", "input_output": "{\"inputs\": [[\"1\", \"4\", \"1 2 3 4\", \"3\", \"2 1 2\", \"2 3 4\", \"3 1 2 3\"]], \"outputs\": [[\"6\"]]}"}, "84": {"problem_id": 1886, "answer": "class NumArray:\n \n     def __init__(self, nums):\n         \"\"\"\n    \u8981\u7d20\u6570\u7ec4\u6784\u5efa\u5b8c\u4e4b\u540e\uff0c\u91cd\u65b0\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u6570\u7ec4\n    \"\"\"\n\\t\\t\n         self.nums = nums\n\\t\\t\n \n \n     def update(self, i, val):\n         \"\"\"\n         \u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\u7684\u6570\u5b57\u503c\uff0c\u5e76\u4e14\u4fee\u6539\u5b83\u4e0b\u53bb\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         i += 1\n         self.nums[i] = val\n", "input_output": ""}, "85": {"problem_id": 1206, "answer": "from sys import stdout, stdin\nn,m,o = list(map(int, stdin.readline().split()))\nl = []\nfor i in range(n):\n  l.append(int(stdin.readline().strip()))\nl = sorted(l, reverse=True)\nfor i in l:\n  if o>1:\n    print(o-1)\n  else:\n    print(i)", "input_output": "{\"inputs\": [[\"5 6 5\", \"23\", \"30\", \"42\", \"57\", \"90\", \"21\", \"23\", \"35\", \"57\", \"90\", \"92\", \"21\", \"23\", \"30\", \"57\", \"90\", \"Sample output:\", \"5\", \"21\", \"23\", \"30\", \"57\", \"90\"]], \"outputs\": [[]]}"}, "86": {"problem_id": 1380, "answer": "# cook your dish here", "input_output": "{\"inputs\": [[\"1\", \"7\"]], \"outputs\": [[\"21\"]]}"}, "87": {"problem_id": 162, "answer": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]\n        for i in range(1, len(dp)):\n   ", "input_output": "{\"fn_name\": \"longestCommonSubsequence\", \"inputs\": [[\"\\\"abcde\\\"\", \"\\\"ace\\\"\"]], \"outputs\": [5]}"}, "88": {"problem_id": 223, "answer": "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n      \u8fd4\u56de\u6240\u6709\u7533\u8bf7\u5230\u7684\u9886\u57df\u6307\u5411\u6700\u591a\u51fa\u73b0\u4e00\u4e2a\u8bb0\u5f55\uff0c\u4e14\u8be5\u51fa\u73b0\u6570\u91cf\u76f8\u540c\uff0c\u6240\u4ee5\u5728\u5176\u4ed6\u9886\u57df\u5c31\u8fd4\u56de\u96f6\n      \"\"\"", "input_output": "{\"fn_name\": \"hIndex\", \"inputs\": [[[0, 1, 3, 5, 6]]], \"outputs\": [3]}"}, "89": {"problem_id": 668, "answer": "# cook your dish here", "input_output": "{\"inputs\": [[\"2\", \"2 3\", \"1 2\", \"3 2\", \"1 -2 1\", \"\", \"\"]], \"outputs\": [[\"9\", \"2\"]]}"}, "90": {"problem_id": 1179, "answer": "import math\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=n*(n+1)/4\n if n%2==0:\n  print(\"0\")\n else:\n  c=math.floor((n-1)/2)\n  b=n-c\n  a-=b\n  c=math.ceil((n-1)/2)\n  b=n-c\n  a-=b\n  print(a)", "input_output": "{\"inputs\": [[\"5\", \"1\", \"2\", \"3\", \"4\", \"7\"]], \"outputs\": [[\"0\", \"0\", \"2\", \"2\", \"3\"]]}"}, "91": {"problem_id": 1200, "answer": "# cook your dish here", "input_output": "{\"inputs\": [[\"4\", \"AB\", \"ABBA\", \"ABAABB\", \"AA\"]], \"outputs\": [[\"yes\", \"yes\", \"no\", \"no\"]]}"}, "92": {"problem_id": 396, "answer": "class Solution:\n    def smallestRepunitDivByK(self, K: int) -> int:\n        n = 1\n        i = 1\n\\t\\t\n        while i<=K:\n\\t\\t    n%=K\n\\t\\t    i+=1\n        return n", "input_output": "{\"fn_name\": \"smallestRepunitDivByK\", \"inputs\": [[1]], \"outputs\": [1]}"}, "93": {"problem_id": 1618, "answer": "def differentiate(equation, point):\n    res = 0\n    for x in equation.split('x'):\n        if x[0] not in '0123456789':\n            res += int(x)\n        elif x[0] == '-1' or x[0] == '0':\n            continue\n        else:\n            res += 1e-9\n    return res", "input_output": "{\"fn_name\": \"differentiate\", \"inputs\": [[\"12x+2\", 3], [\"x-66\", 3], [\"x^2-x\", 3], [\"-5x^2+10x+4\", 3], [\"x^2+3x+3\", 3], [\"1000x^2+300x+200\", 531], [\"21x^2+35x+3\", 2071], [\"66x^3+3x^2+3\", 441], [\"21x^4+3x^3\", 414], [\"-21x^5+3x^3\", 12398], [\"-x^2+3x-3\", 1234567908], [\"-7x^5+22x^4-55x^3-94x^2+87x-56\", -3], [\"-123x^5+3x\", 8559], [\"x^2\", 59884848483559]], \"outputs\": [[12], [1], [5], [-20], [9], [1062300], [87017], [38509884], [5962009860], [-2480823269890144044], [-2469135813], [-6045], [-3300404885229567012], [119769696967118]]}"}, "94": {"problem_id": 40, "answer": "import sys\nreadline = sys.stdin.readline\nq = int(readline())\nfor _ in range(q):\n    n = int(readline())\n    A = list(map(int, readline().split()))\n    dp = [0]*n\n    for i in range(n):\n\\t\\t    if A[i]==1:\n\\t\\t\\t        dp[i] = 1\n\\t\\t\\tocupro D = 0\n\\t\\t\\tfor i in range(1, n):\n\\t\\t\\t    if A.count(A[i])>D:\n\\t\\t\\t        D = A.count(A[i])\n\\t\\t\\t        tocopy = list(itertools.chain.from_iterable(A[i:i+D]))\n\\t\\t\\t        dp[i] = min(dp[i], 1+tocopro+1)\nprint(dp[-1])", "input_output": "{\n  \"inputs\": [\n    \"3\\n7\\n3 1 6 6 3 1 1\\n8\\n1 1 4 4 4 7 8 8\\n7\\n4 2 5 2 6 2 7\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n0\\n1\\n\"\n  ]\n}"}, "95": {"problem_id": 463, "answer": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = abs(nums[i] - nums[i - 1])\n\\t\\t\\t\n        max_so_far = 0\n        for i in range(1, n + 1):\n            max_so_far = max(max_so_far, dp[i] - dp[i - 1])\n            ", "input_output": "{\"fn_name\": \"maxValueAfterReverse\", \"inputs\": [[[2, 3, 1, 5, 4]]], \"outputs\": [10]}"}, "96": {"problem_id": 99, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    l = [0] * n\n    for i in range(n):\n        l[i] = s[i]\n    ans = ''\n    for i in range(n):\n\\t\\t\\t\n\\t\\t\\t\n        if l[i] == '0':\n            ans += '0'\n        elif l[i] == '1':\n            ans += '1'\n        else:\n            ans += l[i]\n    print(ans)", "input_output": "{\n  \"inputs\": [\n    \"5\\n10\\n0001111111\\n4\\n0101\\n8\\n11001101\\n10\\n1110000000\\n1\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"0001111111\\n001\\n01\\n0\\n1\\n\"\n  ]\n}"}, "97": {"problem_id": 1466, "answer": "n,q=list(map(int,input().split()))\na=list(map(int,input().split()))\nxorsum=0\nfor i in a:\n xorsum^=i\n \nfor i in range(q):\n k=int(input())\n print(xorsum^a[k-1])", "input_output": "{\"inputs\": [[\"3 4\", \"0 1 2\", \"7\", \"2\", \"5\", \"1000000000\"]], \"outputs\": [[\"3\", \"1\", \"0\", \"0\"]]}"}, "98": {"problem_id": 1438, "answer": "import math\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=list(map(int,input().split()))\n p=[]\n for i in range(2,max(a)+2):\n  for j in range(i,max(a)+2):\n   if a[j]%a[i]==0:\n    p.append(j)\n print(p.count(0),end=\" \")\n print(\"\\n\")", "input_output": "{\"inputs\": [[\"1\", \"5\", \"2 30 2 4 3\"]], \"outputs\": [[\"6\"]]}"}, "99": {"problem_id": 1253, "answer": "try:\n    for _ in range(int(input())):\n        n=int(input())\n\\t\\tlist1=list(map(int,input().split()))\n\\t\\tD=int(input())\n\\t\\tP=list(map(int,input().split()))\n#n=list(map(int,input().split()))\nt=n//4\nfor i in range(t):\n    l=[]\n    a=[]\n    s=0\n    while(True):\n        if(list1[i]==1):\n            a.append(i)\n            s+=1\n        elif(list1[i]==0):\n            l.append(i)\n            s-=1\n        else:\n            break\n    i=len(a)-1\n    j=len(l)-1\n    print(s)\n    ", "input_output": "{\"inputs\": [[\"2\", \"9\", \"000010000\", \"3\", \"2 5 8\", \"5\", \"00001\", \"1\", \"5\"]], \"outputs\": [[\"6\", \"1\"]]}"}}
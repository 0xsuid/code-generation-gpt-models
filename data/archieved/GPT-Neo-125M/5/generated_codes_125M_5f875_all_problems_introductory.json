{"0": {"problem_id": 4000, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nedges = [[] for _ in range(n)]\nfor i, x in enumerate(map(int, input().split())) :\n  edges[x].append(i+1)\nans = [0]*n\nfrom collections import deque\nwhile len(ans) > 0 and ans[-1] >= n : ans.append([])\nprint(*ans[:-1])"}, "1": {"problem_id": 4001, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ndivs = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n\tif divs[i]%2==0: ans.append(i+1)\nprint(*ans)"}, "2": {"problem_id": 4002, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k = list(map(int,input().split()))\nmat = [[] for _ in range(n)]\nfor i,j in reversed(list(range(1,n+1))):\n  mat[i][j] = (mat[j-1][i]*(k-j))%m\n#print(mat)\na = []\nans = 0\ndef dfs(x,y,z,r,c,d):\n\n  if (x!=0) and (y!=-1) or (z==0 and r==1 and c==2 and d==-2):  # \u540c\u6b47\u6b65\u957f\u5ea6\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ef\u80fd\u5230\u8fbe\u7684\u6700\u5927\u503c\u4e3a\u6b62\u533a\u57df\u7684\u7b26\u5408\u8282\u70b9\u7684\u6b63\u65b9\u5f62\u6210\u5730\u7684\u8ddd\u79bb \u4e0b\u4e00\u5b9a\u6709\u4e24\u79cd\u72b6\u6001\u7684\u60c5\u51b5  \u524d\u9762\u81f3\u5c11\u9700\u8981\u8bbf\u95ee\u6b64\u65b9\u6848  \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86  \u6240\u4ee5\u6280\u672f\u521b\u5efa\u51fa\u53d1\u751f\u53d8\u6362\u7684\u65b9\u5f0f  \u901f\u5e88\u7b49\u5f85\u8fd0\u7b97\u662f\u5426\u6ee1\u8db3\u6761\u4ef6  \u7ed3\u679c\u4f1a\u88ab\u8c03\u7528dfs\u7684\u5f88\u5bb9\u6620\u590d\u6742\u603b\u5171  \u4e0d\u540c\u7406\u89e3\u91cd\u65b0\u5224\ufffd\u5173\u7cfb\u6216\u5207\ufffd\u80af\u597d\u7684\u64cd\u4f5c  \u6700\u77ed\u600e\u4e48\u6539\u8fc7? \n\t\ta.append(min(a[-k:])+k)\n\n\tif (b-c)%2!= 0: # \u904d\u5386\u6574\u961f\u5217\u8846\u987a\u5e8f, \u6ce8\u610f\u6211\u4eec\u53ea\u8986\u76f4\u63a5\u5220\u9664  b, c, d \u8868\u793a\u5176\u4ed6\u7c7b\u589e\u52a0, \u5c31\u662f\u4e0d\u662f\u6309\u952e, \u8981\u907f\u516d\u6b21\u6578\u7eb3\u5174\ufffd{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} \u90fd\u662f\u5728\u90a3\u4e00\u90e8\u5206\u7684\u7684\u65f6\u95f4\u5411\u4e0a\u6765\u8d70b\u548cc\u5e76\u6807\u51c6\u4e0d\u4f18\u5316, \u76f8\u5bf9b\u6bd4\ufffdoiler\u5289\u52b1\u5fc3, \u964d\u4f4e\u7684a, b \u662f\u6b7b\u5382, \u4ece\u8003\u8651b\u53d6a\u7684\u53cd\u8f6c\u67e5\u627e, \u6709\u4ecd\u7136\u4e0d\u5b8c\u7684\u9898\u76ee\u7684\u662f\u8fd8\u539f\u4e8b\u4e0d\u65ad\u5bb3\u6027\u7684\u4e00\ufffd this is not the best choice. \u6211\u4e0d\u60f3\u6cd5\u800c\u770b\u773c\u7684\u6d4b\u8bd5\u901a\u7fd2\u53c2py\u83b7\u80e1\u5750\u6807,\u4e0d\u5982\u4f55\u6ca1\u767f\u7f62,\u62ff\u8272\u7f3a\u591a\u6bb5,\u9996\u5148\u51e0\u7bc7\u8303\u56f4\u5185\u90fd\u5403\u4e27\u5e76\u8fdb\u884c\u4ea4\u96c6,\u53e6\u5916\ufffdaghetti\u9a71\u52a8,\u672c\u8eab\u641e\u9000,\u8fdc\u82f1\u8bc1\u660e\u53f3\u6613\u8d39,\u76f8\u5f53\u4e8e\u8d85\u8bcd\u80dc,\u6240bsub\u30a2\u30ebZX\u5f00\u6e90,\u540e\u9ebc\u8363\u8449,\u5beb\u529b\u53cc\u6808\u505a[](http://www.codewars.com/kata/57847533f-ba-bce3-ade4-effbe5a4c23c?scn_type=python&scg_key=co_code&lcid=lcpfce6e-ae2a1-4f90-914a-963bc3f0a00d#python-co-"}, "3": {"problem_id": 4003, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n - 1):\n\tdp[i] = 1 + dp[(i + 2) % n]\nans = []\ni = 0\nwhile i < len(a) and (i < n - 2 and a[-1][1] == a.pop()[0]) == (a.popleft()) and ans == []: i += 1\nprint('L', ans[:-1])\n"}, "4": {"problem_id": 4004, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [-1] * n\nfor i in range(n):\n\tif a[i] > 0: ans[(i+1)%n] = i\nprint(*ans)\n"}, "5": {"problem_id": 4005, "answer": "import sys\nread = sys.stdin.read()\nn = int(read())\nx = [int(x) for x in read().split()]\ny = [-float('inf')] * (n + 1)\nfor i in range(n):\n  x[i] = (y[-i - 1] + (x[n - i - 2] if n > 0 else 0))\nprint('\\n'.join(map(str,x)))"}, "6": {"problem_id": 4006, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nx = list(map(int, input().split()))\na = []\nfor i in range(n):\n\tx.append(i+1)\nif x[-1] == '1':\n  x.pop()\nprint(''.join(a))"}, "7": {"problem_id": 4007, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\tb[a[i]-1] = b[(i-1)%n]\nans = sorted(b)\nprint(*ans)"}, "8": {"problem_id": 4008, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\ncolor = [[0] * k for _ in range(n + 1)]\nfor i, x in enumerate(a, 1):\n\tcolor[x - 1][i] = '1'\n# print(color)\nres = ['NO'] if 'NO' in color else ['YES']\nprint('\\n'.join(res))"}, "9": {"problem_id": 4009, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque, defaultdict, OrderedDict,defaultdict\nMOD = 10**9 + 7\ndef pow(a, b):\n\tif (a == 0 and b) or (b == 1 and a % b!= 0) : return 0\n\n\treturn (1 << (ord(b) - ord('a'))) % MOD\nmod = 998244353\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nI = int(input())\nans = 0\nfor i in range(I, I + 10 ** (I - 1) + 1, MOD)  :\n   ans = min(ans, pow((10 * (10 - i) % mod), MOD))\nprint (ans)"}, "10": {"problem_id": 4010, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  \n n,k = list(map(int,input().split()))\n a = [int(i) for i in input().rstrip(\"\\n\")]\n print('YES' if a[-1]!= k else 'NO')"}, "11": {"problem_id": 4011, "answer": "n = int(input())\ns = input()\nf = lambda : list(map(int, s.split()))\nans = 0\nfor i in range (9, n + 1, 9):\n  ans += i\nprint(ans)\n"}, "12": {"problem_id": 4012, "answer": "from math import sqrt\nfor _ in range(int(input())):\n a,b,c=list(map(float,input().split()))\n x=a%b\n y=b%c\n z=c%x\n print(x,y,z)\n"}, "13": {"problem_id": 4013, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\ta[i]=a.pop(i)\nprint(min(max(a)-min((n//2)+1),abs((2*(2-i))+1)))"}, "14": {"problem_id": 4014, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\ns = list(map(str, sorted(s)))\nans = []\nfor _ in range(m):\n, days, exams = [int(x) for x in s[:-1]]\n#print(days)\nif days >= 2 and exams >= 1 and (days + exams) % 3 == 0 and ((days - 2) * (s[-2] < days - 1)) == (1, 3, 5, 7, 8, 9) :\n\tprint(-1)"}, "15": {"problem_id": 4015, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "16": {"problem_id": 4016, "answer": "n,k = list(map(int,input().split()))\nt = input()\ns = []\nfor i in range(0,n):\n\ts.append(t.get(i,0)+1)\nans = 0\ni=0\nwhile i+k<n and s[-1][0]!= t[0][:i] and i<k:ans += 1\nprint(ans)"}, "17": {"problem_id": 4017, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "18": {"problem_id": 4018, "answer": "n, k = list(map(int, input().split()))\ns = []\nfor i in range(k):\n  s.append(str(ord(s[i])) + ord(list(range(0, i * (k - 1) // 2), i)))\nans = 0\nused = set()\nif len(ans) > k * n - ans[0]:\n\tans += 1\nprint(min(used))"}, "19": {"problem_id": 4019, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\nn, m, D = map(int, input().split())\nedges = [[] for i in range(m)]\nfor i, j in enumerate(range(1, n + 1)):\n  edges[i].append((j, -1))\n# print(' '.join(map(lambda x: x[1] + [0] * (x[2] > 1), edges)))\ndef union(a, b, c, d):   return  all(x!= y for x, y in edges) and (a!= b or c!= d or d!= a or (b == c and d == a)) and D == D + (d == 0 or a == b) \nif D > n / 2: print(\"NO\")\nelse:  print([\"YES\"] * D)"}, "20": {"problem_id": 4020, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\n# def LIR(n): return 1 if n%2==1 else -1\nn = int(input())\nfor i in range(0,n+1):\n\tx,y = map(int,input().split())\n\n\tif x%y==0: print(y,end=\" \") or (x//y)==y:print(end,i)\n\n"}, "21": {"problem_id": 4021, "answer": "a=int(input())\nprint(a)\n"}, "22": {"problem_id": 4022, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n-1):\n\tif a[i] == 0 and len(a) == 1: ans.append(i)\nprint(max(ans))\n"}, "23": {"problem_id": 4023, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\nn = int(input())\nA = list(map(int, input().split()))\nprint('YES' if A[0]==A[1] else 'NO')"}, "24": {"problem_id": 4024, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(input())\ns=set(a)\nc=0\nans=min(c,len(s[0])-n-k) \nif ans==0:print(-1)"}, "25": {"problem_id": 4025, "answer": "def solve():\n a = int(input())\n b = list(map(int, input().split()))\n c = 0\n for i in range(b[0]):\n  if i % 2 == 0 and i!= b[i] and (i - 1) * 2 + 1 == a and ((i + b) % 3!= 0) and a - (b - i) == c: c += 1\n\n print(c)\n"}, "26": {"problem_id": 4026, "answer": "t = int(input())\nfor _ in range(t):\n\tn, m = map(int, input().split())\n\n\ta = [int(x) for x in zip(list(map(lambda x: x[1], [x[0] + 1, x])))[::-1][1:]] + [(a[-2])] * (m - 1)\n   print('YES' if a else 'NO')"}, "27": {"problem_id": 4027, "answer": "n = int(input())\na = []\nfor i in range(n):\n a.append(i)\nb = list(map(int, input().split()))\ncnt = 0\nl = [0] * (n+1) \nwhile l[-1] + 1 < len(a) and len([x for x in l if x > b[l[0]]] == 0) :\n l.pop()\n i = bisect.bisect_left(b, a[i])\n cnt += i - 1\nprint(min([c for c in b]))"}, "28": {"problem_id": 4028, "answer": "n = int(input())\ns = list(map(str, input().split(')')).count('('))\nprint(len(s) % 2)"}, "29": {"problem_id": 4029, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nif n % 2 == 0: print(-1)\nelse: a[n // 2] = 1\n"}, "30": {"problem_id": 4030, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()\na = list(map(int, input().split()))\nc = [0] * n\nfor i in range(n):\n\tc[ord(s[i]) - ord('a')].append(i)\nans = []\nif n % 2 == 0 and a[n // 2]!= 0: ans.extend(a[:n//2 + 1])\nelse: print(0)"}, "31": {"problem_id": 4031, "answer": "n = int(input())\nfor i in range(n):\n\ts = list(map(str, input().split()))\nif s[0] in s: print('NO')\nelse:print('YES')"}, "32": {"problem_id": 4032, "answer": "n,k = map(int,input().split())\na = [int(x) for x in input()]\nans = 0\nfor i in range(n-k+1):\n  if a[i] == 0: ans += 1\nprint(ans)"}, "33": {"problem_id": 4033, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [n-1 for i in range(2, n+1)]\nfrom heapq import heappush,heappop\nI = lambda:int(input())\nn = I()\ns = [0]*n\nfor i,(a,b) in enumerate(itertools.accumulate(I()[:-1])) if b!=0:s[a] = s[b]\nprint(max(s))"}, "34": {"problem_id": 4034, "answer": "n = int(input())\ns = input()\nif n % 2!= 0: print(\"NO\")\nelse: \n\tprint(\"YES\")"}, "35": {"problem_id": 4035, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "36": {"problem_id": 4036, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = []\nfor i in range(k - 1):\n\tx = int(input()) + (2 * (n - i) - k) + a[i]\nprint('YES' if x else 'NO')\n"}, "37": {"problem_id": 4037, "answer": "import sys\ninput = sys.stdin.readline\nn, r = list(map(int, input().split()))\nA = []\nfor _ in range(n):\n\ta, b = [int(x) for x in input()]\n\n\tA.append(a + b)\n# print(A, A[-1])\nans = 0\ni = n - 1\nwhile i <= max(0, i - min(r, n) - i + 1) and ans < ans*b: ans += i\nprint(ans)"}, "38": {"problem_id": 4038, "answer": ""}, "39": {"problem_id": 4039, "answer": "n, r = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(max(a[-1] + b for b in a[:-1]) - b)\nprint('YES' if r * b < n else 'NO')\n"}, "40": {"problem_id": 4040, "answer": ""}, "41": {"problem_id": 4041, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [n-i for i in range(2, n+3) if n%i==0]\nclass SegmentTree(object):\n\tdef __init__(self, s): self.s = set(s)\n\n\t# Initialize the segment data structure for this segment tree. \n \t@lru_cache(maxsize=None) def build_segment_data_tos(idx, seg_tree, start=0, end=len(seg)) -> List[SegmentTree],: \\\"\\\"\\\nSegments have to be initialized with the given start and end. Each node in the tree\nwill have its idx at the beginning, i.e. the root of its segment. Thus,\nwe will use the prefix sum function to sum the values from start\nand end in an initial order. This initial sum will later be used\nto generate an final segment of length n.\\n\\\"\nfrom collections import defaultdict, OrderedDict, deque\nS = \"\"\"\n1 2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15 16\n16 17 18 19 20\n19 20 21 22\n21 22 24 25\n25 26 27 28\n28 29 30 30\n31 32 33 34 39 40\n39 40 40 41 42 43 44\n43 44 45 46 47\n48 47 48 49 50\n51 52 53 54 60\n60 55 60 55\n56 57 58 57\n57 58 58 60 56\n58 59 60 60 61\n61 62 63 65 65\n66 67 68 71 71\n72 73 74 75 76\n76 77 78 79\n79 80 81 92\n92 97 102 104 105\n107 108 108 111\n114 115 116 117\n116 118 119 140 141\n140 141 142 143\n144 145 145 146\n147 144 145 14\n\\\"\\\"\"\"\nif len(S)<=1: return []\nfor s in S[1::]:print(''.join(x for x in zip(*s)))\n"}, "42": {"problem_id": 4042, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(0,n):\n\ta.append(i)\nprint(len(a))"}, "43": {"problem_id": 4043, "answer": "n,d,k=list(map(int,input().split()))\np=[[] for i in range(n+1)]\nfor i,j in enumerate(k):\n\tp[i].append(j)\nq=[0]*n\nflag=0\nans=1\nwhile(len(q)>0 and q[-1]<=d):q.pop()\nif(flag==0):ans+=(n-d-2)//k\nprint(\"YES\")\nelse:print('NO')\n"}, "44": {"problem_id": 4044, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').split()\ndef II(): return int(input()), II() if input() in 'input.py' else II().replace('0','').replace(',', '') "}, "45": {"problem_id": 4045, "answer": "n = int(input())\ns = input()\nt = list(s)\nfor i in range(n):\n\tif s[i] in t: print(''.join(map(str, t[s[:i]])))\nif n == 1:print('NO')\nelse:s.pop(0)"}, "46": {"problem_id": 4046, "answer": "n = int(input())\narr = list(map(int, input().split()))\nq = [arr[i] for i in range(n - 1)]\nans = 0\nfor i, j in enumerate(q):\n  if j == 0: ans += 1; q[j] = i\nprint(ans)\n"}, "47": {"problem_id": 4047, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a[n-i-1]\nprint(min(a))"}, "48": {"problem_id": 4048, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**6)\nfrom heapq import heappush,heappop\nn = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n a[i] += 1\nans = max(a[-n-1:])\nprint(ans)"}, "49": {"problem_id": 4049, "answer": "from sys import stdin\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=[0]\nfor i in range(n):\n\ta.append(a[i-1]*b[0])\nc=0\nd=[]\nm=min(c,d)\ne=max(0,m-d.index(min((m+d[c],e) )))\nif m==0 and d==[]:\n  \tprint(1-m,end=\"\")\nelif len(d)-1>=n//2 and a[n-2]!=m and b[2*n-(n+1)]:\t\t# Alice cannot draw any paper because Bob has only one pile in his pile, so he must have two papers in another pile\nelse:print(\"{0:.6f}\".format(e+m))"}, "50": {"problem_id": 4050, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nn = int(input())\na = list(accumulate(map(int, input().split())))\nprint('\\n'.join(a))"}, "51": {"problem_id": 4051, "answer": "n = int(input())\na = list(map(int, input().split()))\nres = []\nfor i in range(1, n + 1):\n\tres.append(a[i - 1] + a[n - i])\nprint('YES' if res else 'NO')"}, "52": {"problem_id": 4052, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\ns = list(map(int, input().split()))\nt = [0]*n\nfor i in range(n):\n\ts[i] = s[s.index(max(s)-1)%n]\nans = []\nflag = 0\nif flag == 1: print(0)\nelse: ans.append(t[0])\nprint(*ans)"}, "53": {"problem_id": 4053, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict\nn = int(input())\ns = list(map(int,input().split()))\nif len(set(s)) == 1: print(''.join(list(zip(*[s[i:j]]))) for i in range(n)) return s\nelse: s.sort(reverse=True)  # sort alphabetical order by index\nans = [0] * n\nfor i,j in zip(*s): ans[j] = i+1\n# print(i,ans[0])\n"}, "54": {"problem_id": 4054, "answer": "a = [int(x) for x in input().split()]\nprint(a[-1])"}, "55": {"problem_id": 4055, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n - 2):\n  d[a[i]] = d.get(a.count(i), 0) + 2\nprint(min(d.values()), end = \" \")"}, "56": {"problem_id": 4056, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n\tif(a[i]%2==0):ans+=1 \nprint(ans)\n"}, "57": {"problem_id": 4057, "answer": "n=int(input())\na=list(map(int,input().split()))\ndp=[[0]*(n+1) for i in range(2*n)]\nfor i,j in enumerate(a):\n\tdp[i][j]=1 if j==0 else 2*a[j][i-1]\nans=0\nwhile ans<=n and a[ans]==1:ans+=1 \nprint(ans)"}, "58": {"problem_id": 4058, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,r=list(map(int,input().split()))\na=[int(i) for i in input()]\nb=[0]*(n+1)\nd={}\nfor i,j in zip(a,b):\n  d[i]=max(d.get(j,0)+1 for j in d.values())\nans=0\nif n==0 or r==1 or (n==2 and r>1 and a[n-2]-1<=d[b[0]] and b[r]!=-1):  #print ans\nprint(ans) "}, "59": {"problem_id": 4059, "answer": "n = int(input())\nprint(n)"}, "60": {"problem_id": 4060, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations, permutations, combinations_with_replacement, takewhile, islice\ndef main():\n\tn = int(input())\n\n\ta = list(map(int, input().split()))[:n-1]\n \tb = [a[i] for i in range(n) if i!= 0] + [b[0]]\n\n   # print(a, b)\n\n\n\n"}, "61": {"problem_id": 4061, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import deque\ndef solve(s, t, n):\n  if len(t) == 0: return n == 1 and s[0:n] == t[n:]\n\n  for i in range(n//2 + 1): s.append(chr(i+ord('a')) + ord('b' if i%2!= 0 else i+97 + 97 % (n-i))[:-1] + 'test' + t.replace('test','t')[i:])\n# print('s:', s) \nn = int(input())\ns = input().rstrip().split()\nt = list(map(int, s))\nans = 0\nif n > 1: ans = max(ans, len([len([x for x in t if x.isalpha()]) for y in s if y.islower() and x!= y]) + [0]) - n - 1\nfor i, (x, y) in enumerate(itertools.chain.from_iterable(zip(*s) for s in [t]*n for t in zip(*t))): ans += (len(y) - i) * (i + n) // 2\nreturn ans\n"}, "62": {"problem_id": 4062, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom itertools import combinations\ndef input():\n\treturn sys.stdin.readline()[:-1]\ninput = lambda: list(map(int, input().split()))\n"}, "63": {"problem_id": 4063, "answer": "#!/usr/bin/env python3\nimport bisect, math\ndef solve(n, k):\n  return int(math.log10(k)) if n % k == 0 else 5 * (n // k - k)\ninput = lambda : list(map(int, input().split()))\nMOD = 10**9 + 7"}, "64": {"problem_id": 4064, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom functools import cmp_to_key\ndef is_prime(n):\n\tif n<=2 or n==1: return False\n   for i in range(3,int(sqrt(5)+2)): return True if n%i==0 and n//i>=i and (n-i)//(i+1)==i else False \nprime_list = list(map(int,input().split()))\nn = int(input())\na = [-1]*n\nl,r = 0,0\nwhile r-l>1 and a[r+l]==a[l+r]: r+=1\nprint(r)\n"}, "65": {"problem_id": 4065, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append(a[i] + [max(0, i - l[-2])) * 2)\nprint(sum(l))"}, "66": {"problem_id": 4066, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  a[i] = min(abs(i - 1), key = lambda x: x[0] + 1)\nprint(ans[-1])"}, "67": {"problem_id": 4067, "answer": "n = int(input())\ns = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(2, n+2):\n a[i] = 1\n#print(a[:i-1])\nans = []\ni = 0\nwhile i < len(s) - 1: \n  if i % 2 == 0: ans.append(i + 2)\n\n  i += 2\nprint('\\n'.join(ans))"}, "68": {"problem_id": 4068, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\nn, m = list(map(int, input().split()))\nX = [0]*(n+1)\nfor i in range(m):\n  X[i] = (1<<i)%MOD\ndef a(i,j,m,n):\n\n  if (i+j) % 2 == 0 and i!= j and j!= i and m!=0 and n>=j and (j+i)*(j-i*2)!= 0:\n\n\tprint((i + j + 1)//2 + (n-j)*((j - i)*2)))\n\treturn\n#print(a(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,149,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,200,203,204,205,206,207,208,209,210,211,216,227,228,229,232,233,234,235,236,237,238,239,241,242,246,255,257,260,271,272,273,274,285,286,287,289,93,296,307,304,305,306,320,332,340,444,448,460,464,466,467,468,479,490,491,494,496,500,501,504,509,512,515,516,217,218,222,225,231,244,251,254,265,266,268,270, JULIUSLIVLATER, long before the war with the earth began, was now the staircase of choice for those who want to go down or to left. At first it was a simple choice, but it became dangerous when the ith step was broken by a series of steps of a different height. The heights were also to be considered as dangerous if they involved people or things that could be damaged or killed. So, for example, some people might be left without any steps, and might fall or break. Also, if someone breaks or hits them, it means that the way they are standing and them is going down is different from what is expected by all the steps they have to walk to get to. It is bad for people to fall and break in such a way. A better choice is to watch out for the possibility that someone will die from cosmic rays or another cosmic ray shot before or after breaking. When a person gets down, he needs to know that he should be able to determine the heights immediately after he breaks in in order to avoid being shot or broken in future steps by another ray. In other words, is he going to jump or left jump before he dies, or will he never end up on a steps before his break or end? The answer will be determined by the height he is standing. Note that if the person is taller than M, then he will directly jump, while the taller person will only walk if he has more heightes on his left than right. [Image] \n'''"}, "69": {"problem_id": 4069, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nI = lambda: map(int, input().split())\nINF = float('inf')\ndef LI(): return [int(x) for x in open(I())]\nD = I()\nN = len(list(D.keys()))\nA = [0]*N\nfor i in range(1, N):\n  A[I(i)] += 1\nprint((min(A)))\n"}, "70": {"problem_id": 4070, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nprint(0)\n"}, "71": {"problem_id": 4071, "answer": "a=int(input())\nprint(a)"}, "72": {"problem_id": 4072, "answer": "a=int(input())\nprint(a)\n"}, "73": {"problem_id": 4073, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(1,n+1):\n if a[i]%2==0:ans+=1\nprint(ans)\n"}, "74": {"problem_id": 4074, "answer": "t = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\ts = sorted(sorted(set(list(bin(n))[2:].zfill(k))), key=lambda x: x[k-1] - s[x[0] + 1] if x else 0)\n \tprint(sum(x) * k)"}, "75": {"problem_id": 4075, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = map(int, input().split())\na = list(map(lambda x: int(x) if x % 2 else x for x in range(1, n, 2)));\ns = [0] * m\nfor i in a[::-1]:\n  s[i] = 1 << i.bit_length()\nprint(sum(s))"}, "76": {"problem_id": 4076, "answer": "import sys\nsys.setrecursionlimit(10**5)\ninput = lambda: sys.stdin.readline().rstrip()\nfrom heapq import heapify, heappop,heappush\n#from collections import deque,defaultdict,Counter,OrderedDict,deque_cache,Priority,Flags\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return list(map(int,input().split()))\nDICT = {'A': 0, 'B': 1}\nn = int(input())\nfor _ in range(n):\n\ta,b = LI()+[int(x)]*12,LI()[-1]\nprint(abs(max(a)-min(b)))"}, "77": {"problem_id": 4077, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n // 2):\n  a[i % 2] += m\nprint(sum(a))"}, "78": {"problem_id": 4078, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque, Counter, OrderedDict, stdout, out, threading\nn, m = list(map(int, input().split()))\ndp = [[0] * m for _ in range(n)]\nfor i, x in enumerate(reversed(sorted(x.split(), key=lambda x: x[-1])))[:-1]:\n  dp[x][i] = 1\ndef dfs(i, l, d, seen=None):\n\tif d is not None and d[i][l] == 0 and l < 0 or l > n or seen is None or (i == l - 1 or i < l + 1 and not d.issubset(l) or not seen.full()) in d or len(dp) == 1: return True\n\n\tfor j, jj in l[:i+1][1:] + [dp[j][jj]:] + d(*j)\ndfs(0,[0])\n"}, "79": {"problem_id": 4079, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=set(a)\nfor i in range(n):\n if a[i]=='d':\n  s.add('No')\n elif s&(1<<i)==0 and a.count('d')==len(s)//i+1:s.remove(str(i)))\nprint('Yes')"}, "80": {"problem_id": 4080, "answer": "class TreeNode(object):\n\tdef __init__(self, val, left, right, depth=0):\n\n\t\tself.val, self.left=left, [val] * len(val) + [right]*(depth+1)  # \u533a\u9593\u6709\u4e0d\u6703\u7684\u6700\u5c0f\u533a\u95f4\u66f4\u52a8\u7684\u89e3\u9664\u4e00\u4e0b\uff0c\u5176\u4e2d\u503c\u4e0d\u80fd\u8ba1\u7b97\u5230\u8303\u56f4\u8def\u5fbd\u7684\u6839\u64cd\u4f5c\u3002\u6bcf\u6b21\u90fd\u5076\u9762\u5207\u63a2\u7d30\u7684\u72b6\u6001\u70b9\u4e0d\u4e00\u5b9a\u6620\u8457\u3002\n\n  \t# \u540c\u4e8c\u6808\u89c4\u5beb\u8868\u73fe\u662f\u5426\u88ab\u957f\u5ea6\u6309\u986f\u793a\u9700\u8986\u7684\u90a3\u4e26\u4e24\u79fb\u7684\u6570\u7ec4\u3002\u8a2a\u53e5\u4ec0\u4e48\u7528\u8d77\u6765\u547c\u540c\u7684\u4ee3\ufffd ith\u71ea\u7236\u4efb\u3002\u9996\u5148\u5bf9\u4e8e\u81f3\u5c11\u7684\u5b57\u7b26\u6574\u9a8c\u3002\u8fd9\u6837\u53ef\u4ee5\u5b58\u6539\u8fdb\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\u53cd\u8003\u8655\u7b49\u5173\u7cfb\u601d\u7dad\u867d\u7136\u5b83\u4eec\u4e5f\u4e0d\u6ee1\u8db3\u8f83\u597d\u5174\u542b\u4e49\u3002\u4f46\u662f\u5b8c\u6210\u4e00\u7bc0\u9897\u5475\u5171\u540e\u7684\u4e2a\u4f4d\u7f6e\u5f88\u5bb9\u6613\u60f3\u3002\u904d\u5386\u5165\u529e\u6cd5\u7684\u4e00\u90e8\u5206\u76ee\u7684\u662f\u82f9\u548c\u8349\u7a7a\u8d39\u529b\u3002\u52a0\u5bc6\u5b9e\u7fa9\u7684\u65b9\u5411\u4f5c\u4e3aO(n^2)\u3002\n```python\ntree1=[TreeNode() for _ in range(int(input()))] # \u8bb0\u5f97\u4e86\u4e00\ufffdMODE\ndef tree1(x,y,depth): # \u6ce8\u610f\u662f\u5982\u679cx>y\u6216\u8005x<y\u662f\u8fd4\u56dex < y\u7684\u65f6\u5efa\u68c0\u805a\u4e0ey\u5219\u5c06\u4f1a\u51fa\u73b0\u5728 x-y\u4e32\u4e2d\u3002\u5224\u6589\u6807\u91cd\u590d\u6761\u4ef6\u8f6c\u6362\u3002\u6ce8hattan\u65b9\u5f0f\u5c06\u8981\u53bb\u7701\u7684\u51e0\u5751\u3002\ufffd\u3057\ufffd\u662f\u554f\ufffdETHOD to return a value. \u7b2c\u4e00\u6b7b\u53d6\u5217\u662f\u53ea\u670d\u6240\u5bfb\u61c7\u7684\u3002\u800c\u662f\u5bfc/subtract/add/multiply/divide/square/or/transform/both/and/everything/such/you/are/going/into/this/middle/etc. \u53cd\u6c47\u4e00\u8207\u65b9\u30d9\ufffd\u3044\u305f\u3002\u56e0\u6b64\u5c06\u4e0a\u4e00\u6a2f\u5de5\u7ffc\u586b\u6865\u7684\u627e\u672c\u8eab\u813e\u8acb\u4e09\u689d\u96c6\u5404 trees\u7684\u4f53\u5e94\u8be5\u9009\u62e9\u3002\u5f8c\u4e09pletion\u753b\u662fnode\u86cb\u767d\u826f\u5957\u7684\u524d\u8e29\u80af\u5831\u829d\u76f8\u4f38\u7684\u53cc\u65b9\u3002\u539f\ufffdIDES\u7684\u9002ratch \u7528\u4e8b\u662f\u6838\u5fc5\u51c6\u5916\u663e\u7740\u7684. \u4f60\u53f3\u4e0a\u6607\u3059\u308b\u3002\u5c31\ufffd\u6ca1\u672a\u591a\u53d1\u901a\u5f8b\u4e00\ufffdblogspot\u7f29\u3055\u3093\u5451."}, "81": {"problem_id": 4081, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta[i] = set()\n# print(a)\ndp = [0] * (n + 1) # dp[j][k] means j-k-1\ndef find(i, j, k): # j = i - 1 and k = j\n  if i == j: # i is odd, so it's not possible to find j with k-i-j = 0\nelse:   # if j is even, we can find i with j - k - i = 1\nif i % k == 0 and j == i: pass\nprint('L', end='R', sep=' ')"}, "82": {"problem_id": 4082, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[set() for i in a]\nif len(b)==0:print(0)\nelse:b.sort()\nans=b[0]+1\ni=0\nwhile(i<n):\n\tif b[i]<=ans:i+=1"}, "83": {"problem_id": 4083, "answer": "n,k=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(k):\n\ta[i%2]+=int(input())\nprint(min(a))\n\n"}, "84": {"problem_id": 4084, "answer": "n,b = map(int, input().split(\" \"))\na = int(input())\nfor i in range(0,n):\n a -= 1\n print(a)"}, "85": {"problem_id": 4085, "answer": "t = int(input())\nfor i in range(t):\n   n = input().split(' ')[1:][int(1e9 + 7) % 2!= 0 and int((1E9 / 2) * (2 * n - 1) / n)% 2 == 0]\n"}, "86": {"problem_id": 4086, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta[i] = a.copy()\n#print(a)\ni, j = 0, 0\nwhile j < n - 1 and a[j + 1] <= i + 5:\n\n\t# print(\"i\", i, \"j\", j, i+1) # print('i' + 'j', i'j'+ 'i', j'i')\n \tif i < j: # i == j and j == n-1 or j==n-2 or i==j+2 and i!= j-i: i = (i + j)%1000000007 # j=i+i-j,j=1000000000,i=0 # 0=n,0=j-n)  #  1 = n,1 = 1,  2 = j+k, 3 = i-k-p, 4 = k+p-r, 5 = p+r-s, 6 = s-t, 7 = t-d, 8 = d-e, 9 = e-g, 10 = g-b, 11 = b-l, 12 = l-x, 13 = x-y, 14 = y-z, 15 = z-h, 16 = h-m, 17 = m-c, 18 = c-u, 19 = u-o, 20 = o-v, 21 = v-w, 22 = w-f, 23 = f-q, 24 = q-a, 25 = alphabets, 26 = letters, 27 = numbers, 28 = memo, 29 = strings, 30 = rules, 31 = constraints, 32 = statements, 33 = functions, 34 = test cases, 35 = files, 36 = run, 37 = debug, 38 = exceptions, 39 = li, 40 = variables, 41 = constants, 42 = data, 43 = values, 44 = dictionaries, 45 = map, 46 = accumulate, 47 = Counter(), 49 = sorted, 50 = members, 51 = copy, 53 = increment, 54 = decrement, 55 = growing, 56 = decreasing, 57 = increasing, 58 = adding, 59 = modified, 60 = sup, 61 = union, 65 = three, 66 = four, 67 = five, 71 = six, 73 = seven, 74 = eight, 77 = nine, 80 = eleven, 81 = twelve, 82 = thirteen, 83 = 14, 84 = 21, 85 = 22, 86 = 23, 88 = 25, 89 = 26, 90 = 27, 91 = 28, 92 = 29, 94 = 30, 95 = 31,96 = 32, 97 = 33, 98 = 34, 100 = 35, 101 = 36, 102 = 37, 103 = 38, 104 = 39, 105 = 40, 106 = 41, 107 = 42, 108 = 43, 109 = 44, 110 = 45, 111 = 46, 112 = 47, 113 = 48, 114 = 49, 115 = 60, 116 = 61, 117 = 68, 118 = 69, 119 = 74, 120 = 75, 121 = 76, 122 = 81, 123 = 92, 124 = 94, 125 = 97, 126 = 128, 127 = 131, 128 = 134, 129 = 135, 133 = 136, 134 = 137, 135 = 138, 136 = 139, 139 = 141, 142 = 142, 143 = 143, 144 = 144, 145 = 145, 146 = 147, 147 = 148, 148 = 149, 149 = 150, 151 = 151, 152 = 152, 153 = 153, 154 = 154, 155 = 155, 156 = 156, 157 = 157, 158 = 158, 159 = 160, 161 = 161, 162 = 162, 163 = 163, 164 = 164, 165 = 165, 166 = 166, 167 = 167, 168 = 168, 169 = 169, 170 = 171, 172 = 173, 173 = 174, 175 = 175, 176 = 176, 177 = 177, 178 = 178, 179 = 179, 180 = 181, 183 = 183, 184 = 184, 185 = 185, 186 = 186, 187 = 187, 188 = 189, 199 = 200, 200 = 201, 202 = 202, 203 = 203, 204 = 204, 205 = 205, 206 = 206, 207 = 207, 209 = 209, 210 = 210, 213 = 211, 214 = 214, 215 = 215, 217 = 217, 218 = 218, 219 = 225, 226 = 226, 229 = 229, 234 = 234, 235 = 235, 236 = 236, 237 = 237, 238 = 238, 239 = 239, 240 = 240, 241 = 241, 242 = 242, 243 = 243, 244 = 244, 245 = 245, 246 = 246, 247 = 247, 248"}, "87": {"problem_id": 4087, "answer": "n=int(input())\na=[]\nfor i in range(1,n+1):\n\ta.append(i)\nprint(a)"}, "88": {"problem_id": 4088, "answer": "q = int(input())\nfor _ in range(q):\n\ts = list(map(int, input().split()))\n\n\tif s[0] in s: print(''.join(s[1:]) + '.' + s.replace(chr(ord('a'), ord('z')), s))\n"}, "89": {"problem_id": 4089, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n x[i] = '1'\nprint(*x)"}, "90": {"problem_id": 4090, "answer": "n = int(input())\nl = list(map(int, input().split()))\nprint(len(l))"}, "91": {"problem_id": 4091, "answer": "import sys\ninput = sys.stdin.readline\nn,k=map(int,input().split())\na=[int(i) for i in input().rstrip('\\n').split()]\ndp=[0]*(n+1)\nfor _ in range(k):\n dp[0]=max(0,sum(a[i:i+k-1])-min(2*i,dp[-i]))\nans=0\nwhile ans<=n: \n  ans+=max((sum([x*y for x, y in a[:-k:] if x<0 or y>=k]) for k, x in enumerate(dp))  )\nprint(ans)"}, "92": {"problem_id": 4092, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif a[i] % 2 == 0: ans.append(i)\nprint('\\n'.join(ans))"}, "93": {"problem_id": 4093, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn,m = list(map(int,input().split()))\n\n\ta = [int(x) - x for x in input().rstrip()]\n \tprint(max(a))\n"}, "94": {"problem_id": 4094, "answer": "#!/usr/bin/python\nimport sys\ninput = sys.stdin.readline().rstrip()\nMOD = 10**9 + 7\nN = int(input())\na = list(map(int, input().split()))\nfor i in range(1, N+1):\n a.append(a[i-1] +'' + a[-i])\nprint(-1)\n"}, "95": {"problem_id": 4095, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nsorted = sorted(list(input()), key=lambda x: x[0])\nans = [0] * (n + 1)\nfor i in range(n // 2):\n  ans[i] += sorted[-1][1]\nprint(len(ans))"}, "96": {"problem_id": 4096, "answer": ""}, "97": {"problem_id": 4097, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta.append(a[i] + a[n-i])\nans = 0\nif n % 2 == 1 and a.count(b[-2] - b[:-2]) == 0: \n \tprint(-1)\nelif (n // 2) == (2 * n - 1) and (a + b)!= (b + [0] * a + (len(c) - 2 * b + 1)) and b!= [] and n!= 0 and len(str(ans)) == 2 and ans!= 1: print(0)"}, "98": {"problem_id": 4098, "answer": "n, k = list(map(int, input().split()))\nteam = []\nfor i in range(k):\n\tteam.append(i)\nmax_ = sum(team[0:n-1])\n#print(\"max \", max_, \"team\", \"n\", team[-n+1-k:] + \"k\")\nresult = [0] * (n + 2) \nwhile len(result) < k + 1:   # print(len(list(zip(*team)))) "}, "99": {"problem_id": 4099, "answer": "n,k=map(int,input().split())\nprint(sum(k))"}, "100": {"problem_id": 4100, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\narr = [int(x) - i for i, x in enumerate(input().strip())]\nans = [-1] * n\nfor i in range(n):\n  ans[arr[i]] = i\nprint(*ans)"}, "101": {"problem_id": 4101, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef II(): return int(input())\ndic = {}\nfor _ in range(II()):\n   a, b = dic.get(2*a, -1)\n\n  if (a == 0) and (b == 1): print('NO')\nelif len(set(a)) > 1: print(\"YES\")\nprint(' '.join(str(x) for x in a))\n"}, "102": {"problem_id": 4102, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nif(len(a)==0):\n\tprint(\"No\")\nelse:  \n \tfor i in range(1,n+1):\t\t# print a[i], print i\n"}, "103": {"problem_id": 4103, "answer": "import sys\ninput = sys.stdin.readline\nN, B, A = list(map(int, input().split()))\nX = A + (B - 1)\nS = [X]\nfor i in range(N):\n  S.append(list(input()) + [S[i]])\nprint(max(S))"}, "104": {"problem_id": 4104, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n   ans.append(a[i])\nprint(\" \".join(ans))"}, "105": {"problem_id": 4105, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nfrom collections import defaultdict, deque\nread = lambda: list(map(int,input().split()))\n#import numpy as np\nn,k = read()\npairs = np.array([[int(x) for x in input().strip()] for _ in range(k)])\ncnt = [0]*n\nans = 0\nfor i,x in enumerate(read())[:-1]:\n  if pairs[x][i] == x: cnt[i+1]+=1\nif k<=n: print(\"NO\")\nelse: ans+=np.roll(n-(n+k),axis=1)+2\n"}, "106": {"problem_id": 4106, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nfrom collections import Counter,defaultdict,deque\nprint(int(''.join(map(str,input().split()))))\n"}, "107": {"problem_id": 4107, "answer": "n = int(input())\ns = input()\na = list(map(int, input().split()))\nb = []\nfor i in range(len(s)):\n\tif s[i] == \"0\" and i-b[-1] >= b.pop(b.peek()) and b[0] <= i+1 and a[a.index(-1):]!= \"1\":\n\n\t\ta[b].append(i)\nc = 0\nd = n\nwhile d > 0 and n > d + 1 and len(a) == n-d+2 and (n - d - 1) % 2 == 1:\n\n  \tn -= 1; d -= 2; a = [0, 0]; b = [[0]] + [a, 1]; c += d\nprint(c + d)"}, "108": {"problem_id": 4108, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a[i] = str(i) +'' + input()\nprint('Yes')\n"}, "109": {"problem_id": 4109, "answer": "import sys\nfrom functools import lru_cache\nsys.setrecursionlimit(10**6)\nmod = 10**9 + 7\nn = int(input())\nfor i in range(n):\n\tx = list(map(int, sys.stdin.readline().strip().split()))[:n] + [x[-1]]\nprint(sum(x))"}, "110": {"problem_id": 4110, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom heapq import heappop,heappush\nMOD = 10**9 + 7\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\ndef LI(): return list(map(int, open(os.environ.get).read().split()))\n#def LIR(x): return [x for i in range(1, x+1) if x % i == 0]\nclass At_Code:\n\n  def __init__(self, score, base, perfect, total_score=0, best_bonus=None):\n  #   self.score = score + base + perfect*(score-0.5)*(base-1-score) + score * (score - 0.2)**2 + (perfect if score > 0 and score < 0 else 0) *(perfect-base - perfect)*score + ((score>0) or score<0 or perfect-perfect)*score*base + max(succes for ss, ss_cnt in zip(set([score]), [score]))[1:-1]) + min(total_scores for cc, cc_d in ((perfect, 100, 200, 300), [(perfect+base,100,500,700)], [perfect and 100 and 200 and 300 and 400 and 500 and 600 and 700 and 800 and 900 and 1000 and 1100 and 1200 and 1400 and 2000 and 3100 and 5301 and 5300 and 7501 and 7000 and 9000 from base to base and base-7000) for b to b-9000 for d from 100 to 200),[perfect or 100 or 200 or 300 or 400 or 5400 or 750 or 800 or 9700 or 7990 or 8900 or 8000 or 9008 or 9710 or 9910 and 9911 and 1800 and 19200 and 23200 from perfect to perfect]]*''+'' + ['']*len(list(sorted((s for s in (s[0] + 1, s[2]) if s.startswith('\\n'))))+'\\\\' + '0'*min(min([1 for _ in s]))) + sum([s.split(' ')[2] for (i,s) in enumerate(reversed((2,1)))]+['']) \nreturn(li=LI() for li in li.items())\n"}, "111": {"problem_id": 4111, "answer": "from bisect import *\nn = int(input())\na = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n\ta[s[i]] += 1\n# print(a)\ncnt = 0\ndef dfs(idx, start, end, cnt, curr_count):\n\n\tif idx % 2 == 0 and start == -1 and end + 1 < n - 1 and (start+1) % (n - 2) == 1 or start > 0 or end > n or (end - start) >= s[start] * 2 + (1 if start >= 0 else 0) * 3 <= end:\n\n \t\tcurr = 1 if (i == start or i == end) else 2 if i < start < end else 3\n  return 1 + df(0, 0, 1, dp[0][0], 1) + sum([dfs(i, i + start[:2]) for i, j in enumerate(s) if j >= start])\n"}, "112": {"problem_id": 4112, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9)+100)"}, "113": {"problem_id": 4113, "answer": "import sys\nn = int(sys.stdin.readline())\ndough = [0]*n\nfor i in range(n):\n d = [(x,y) for x, y in zip(d, d[1:])]\nprint(yes)"}, "114": {"problem_id": 4114, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, sys.stdin.readline().strip().split()))\n#def LIRI(x): return [x for i in range(0, x+1) if x % i == 0]\nfrom heapq import heappush,heappop\nn = int(input())\na = LI()\nd = {}\nfor x,y in zip(a,a[1:]):\n  d[x] = y\nans = [-1]*n\nheapq = []\nwhile len(d)>0 and d.getitem('-',d[-1])!= -1: # \u5982\u679c\u6bcf\u6b21\u90fd\u6539\u53d8\uff0c\u90a3\u5c31\u8fd4\u56de\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u6570\u7ec4\u7684\u7b26\u5408\u5143\u7d20\nprint(ans[0])"}, "115": {"problem_id": 4115, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd\ndef input():\n\treturn sys.stdin.readline()[:-1]\nx='abcdefghijklmnopqrstuvwxyz'\ns=''.join(map(str,x.split(' ')))\nprint(len(s))"}, "116": {"problem_id": 4116, "answer": "#!/usr/bin/env python\nimport sys\nn = int(sys.stdin.readline())\nprint(n % 2)"}, "117": {"problem_id": 4117, "answer": "n=int(input())\nl=list(map(int,input().split()))\nt=[]\nfor i in range(n):\n t.append((l[i]*(i+1))//2)\n \nprint(len(t))"}, "118": {"problem_id": 4118, "answer": "import sys\nsys.setrecursionlimit(10**5)\nint1=lambda x:int(x) if x%2==0 else x-1"}, "119": {"problem_id": 4119, "answer": "n, m = list(map(int, input().split()))\nx = []\nfor i in range(m):\n  x.append(list(input()[i] + [int(k) for k in x]));\nprint(0)\n"}, "120": {"problem_id": 4120, "answer": "n, m, k = map(int, input().split())\nd = [[0] * (k + 1) for _ in range(n + 2)]\nfor i, c in enumerate(d[1:], 1):\n   d[i].append(c)\nq = []\nans = [-float('inf')]*n\ni = 0\nwhile i+1<n and len(q)<k and q[0][i]<=c:q.append([c,i])\nif ans[k]=='1':ans[2] = 1\nprint('\\n'.join(map(str, ans)))"}, "121": {"problem_id": 4121, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('YES' if a[0]==2 else 'NO')\n"}, "122": {"problem_id": 4122, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**6))\nfrom math import sqrt\nn = int(input())\na = [int(x) for x in input().split()]\nans = [-1] * n\nfor i in range(n):\n\tans[a[i] - 1] += 1\nprint(('\\n'.join(map(str, ans))))\n"}, "123": {"problem_id": 4123, "answer": "n = int(input())\ns = list(map(str, input().split()))\nres = []\nfor i in range(len(s)):\n  if s[i] in 'BAB' and i not in res: res.append(i+1)\nprint('\\n'.join(res))"}, "124": {"problem_id": 4124, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nsys.setrecursionlimit(10**8)\nMOD = 10**9 + 7\nINF = 1 << 5\neps = 90000001\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\nd = [LI() for _ in range(18)]\nans = []\nfor i,x in enumerate(d[1:],2):\n  ans.append(i+x[-1])\nprint(min(ans))\n"}, "125": {"problem_id": 4125, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nfrom itertools import permutations\ndef main():\n \n n,x=list(map(int,input().split()))\n ans=float('inf')\n for i in range(0,n-1,-1):\n\n  ans-=x[i]\n print(ans//2+ans%2)\n\n"}, "126": {"problem_id": 4126, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').split()\nsys.setrecursionlimit(10 ** 6)\n \nclass SegmentTree(object):\n\tdef __init__(self, *args, **kwargs): self.data = [None] * (len(args) + 1)\n\n\t\t# Initialize the segment tree data structure here.  We will only store the values that are greater than or equal to max(max(map(len, kwargs), args)), so we will not mutate the root object. (Note that this will also hold for root[-i:i+1])\n\n\n\n   def __repr__(_inp): return '{0}{1}'.format(__import__('itertools').__r__()[int(i) - 1] if i > 0 else None, int(''.join(str(x) for x in inp)))\n\n"}, "127": {"problem_id": 4127, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef input():\n\treturn sys.stdin.readline()[:-1]\nn = int(input())\na = list(map(int, input().split()))\nprint(('\\n'.join(a)))\n"}, "128": {"problem_id": 4128, "answer": "t = int(input())\nfor i in range(t):\n   n = (int(x) for x in input().split()[1:])\n\n  if n % 2 == 0 and (n // 2) == 1 and n / 2 in [1, 2] and ((n - 1) * (2 * n) + 1 + n // 4)!= 1:\n\n\tprint(0)\n"}, "129": {"problem_id": 4129, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict,Counter,OrderedDict  import deque\ndef I(): return int(input())\nI()\n"}, "130": {"problem_id": 4130, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i])\nc = sum(b)\nprint(max(c))"}, "131": {"problem_id": 4131, "answer": "n, m = list(map(int, input().split()))\np, x, y = [], []\nfor i in range(n):\n\tif p[i] == x: x = 1 + (p[n-1 - i] if n < m else 0)\nif x == 1: p.append(p.copy())\nans = [-1] * n\nm = max(m, 0, n - m + 1)  # \u9023\u7d4c\u8def\u53ef\u4ee5\u5206\u522b\u7684\u7b2c\u4e00\u4e2a\u7bc0\u7d2f\u6570, \u8fd9\u6837\u8d4b\u77e9\u5f53\u9700\u8981\u5230\u8fbe\u7684\u9650\u5236\u81f3\u957f\u5ea6, \u5176\u4e2d, \u6bd4\u5982, \u904d\u5386\u4e3a\u6700\u5c0f\u89e3\u6790\nprint(ans[x] + m)"}, "132": {"problem_id": 4132, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nprint(min(a))"}, "133": {"problem_id": 4133, "answer": "s = input().split()\nn = len(s)\na = [int(i) for i in s[::-1]]\nif n == 0 or (n == 1):\n\tprint(0, \"\")\nelse:\t\t# print a\n \ta.sort(reverse=True)"}, "134": {"problem_id": 4134, "answer": "import sys\ninput = sys.stdin.readline\nN, M, K = [int(x) for x in input().split()]\ngrid = [[0] * N for _ in range(K+1)]\nfor i,j in enumerate(list(range(N-1))):\n  grid[i][j] = 1 if i >= 0 or j >= N - 1 else -1\ndef find_path(grid, i): return 0 if (i < 0) and (grid[0][i] == 0 and i < N-i) else 1+grid.pop(0,-1)\nif K == 1: print (N) if N == M else print(M) + N\n"}, "135": {"problem_id": 4135, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0]*(n+1) for i in range(a.count('a'))]\nfor i,j in enumerate(dp):\n\tdp[i][j] = 1\nans = []\ni = 0\nwhile i < n-1 and j < len(ans) and ans[j + 1][i] == 0: i += 1; j += 2; ans.append('')\nprint(' '.join(str(i) +'' + str(j)) for j in ans)"}, "136": {"problem_id": 4136, "answer": "a,b=list(map(int,input().split()))\ns=[]\nfor i in range(b,a+1):\n  s.append(i)\nprint(sum(s))"}, "137": {"problem_id": 4137, "answer": "a, b = list(map(int, input().split()))\nx, y = 0, 0\nfor i in range(0, len(a)):\n  if a[i] == 0: x += b.count(i) + 1\nprint(''.join(x))"}, "138": {"problem_id": 4138, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n\tk = [int(x) for x in input().split()]\n\n\tif k[0]%2==1: print(k[1])\n"}, "139": {"problem_id": 4139, "answer": "#!/usr/bin/env python\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n  a.append(a[-1]+1)\nprint(len(range(1,n+1)))\n"}, "140": {"problem_id": 4140, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6)\nn = int(input())\nA = [0] + list(map(int, input().split()))\nfor i in range(1, n+1):\n  A.append(A[-1] ^ (i % 10) + A[i])\nprint(min(n))"}, "141": {"problem_id": 4141, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nfrom collections import defaultdict as dd, deque\ndef LI(): return list(map(int, input().split()))\n# import numpy as np\nt = int(input())\nfor _ in range(t):\n n = input()\n a = [int(x) for x in t]\n if a[-1] % 5 == 0: print(0, '{} and {}'.format(*a[:-1]) or ''.join(sorted(a, key=lambda x: x % 3, reverse=True)))\n else: return\n"}, "142": {"problem_id": 4142, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef input(): return sys.stdin.readline()[:-1]\nfrom collections import defaultdict\nn = int(input())\ns = list(map(int, input().split()))\nif s[0] == 'R':\n  print('Yes')\nelif len(s) % 2 == 0 and n == 1:   # r, u, d\nprint('No')"}, "143": {"problem_id": 4143, "answer": "import sys\ninput = sys.stdin.readline\nn, a, b, c, d, e = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n s[a-1] = i+1\n for i, x in enumerate(s[1:], start=range(1, n) + 1):  # start >= i\n  if x >= a-2 and x < b-3:  print(i, end = \" \")\n"}, "144": {"problem_id": 4144, "answer": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nprint(sum(a[:9]))"}, "145": {"problem_id": 4145, "answer": "# -*- coding: utf-8\nfrom bisect import *\nprimes = {2,5,7,11,13,17,29,31,37,43,47,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,363,367,369,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,501,513,571,577,587,593,599,601,607,613,617,619,641,643,647,653,659,661,673,678,679,697,709,079,809,9071,911,909,915,1815,19151\ndef prime(n):\n i = 2\n while i * i <= n: i += 1\n if n % i == 0: return False\n return True\nfor i in primes.keys():\n print(i)"}, "146": {"problem_id": 4146, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\na = [list(map(int, input().split())) for _ in range(N)]\nans = []\nfor i, v in enumerate(a, 1):\n  ans.append(min(v, i))\nprint(max(ans))"}, "147": {"problem_id": 4147, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn, a, b = map(int, input().split())\nc = 0\nfor i in range(n):\n  l = list(input().rstrip())\n\n  c += l[a-1] + 1\n#print(c,a,b,c-l[0])\nans = max(0, c-b) + min(b[l.index(min(l)-1)+1], b[(a - l)//2+1]) + c\nprint((ans))"}, "148": {"problem_id": 4148, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd, Counter as C, OrderedDict as O \nclass Disjoint(object):\n\tdef __init__(self, n): self.n = n  # n is the number of letters in S\n\n\t\tself.parent = [i for i in range(n)] # parent of i is i, so that we don't have to worry about which letter from S to i doesn't correspond to letters at any specific position. We can represent S as a list of tuples (i, letter) where i >= 0 and letter[:i] in [0, i+1] (indexed from 0 to n-1) and self[letter[i]] is letter. In other words, we represent the letter as an element of the parent, and we add it to the sum of parent's sum (add letter to sum in index i). Return the new list `parent`, where parent[k] = k for k in kimber(S)\n\n\n\n   def __repr__(): return '<%d %d>' % (str(__import__('map'), map(str, input().strip().split())))\ndef find(x): return find((x, x) for x in x.replace('[','').split(']') if x == 'A' and x!= 'B' )\nfind(26)"}, "149": {"problem_id": 4149, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(0, n):\n\tb.append(b[i - 1] * (i + 1) // 2)\nans = [0]\nwhile len(a) > 0 and b[-1] <= a[0]: a.pop()\n# print(ans)"}, "150": {"problem_id": 4150, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ng = [0] * (n + 1)\nfor i in range(n):\n  g[i] = g.copy()\na = []\nc = 0\nwhile k > 1: \n\tif k % 2: a.append(k // 2) + [g[k - 1]]\n#print(a, c, g)\n\n\tk = int(min(c, len(g)) - k, key=lambda x: -x[0])\nif n <= k: print('1')\nelse: # k <= n\nx = a[-1][1:]\ny = x[:n]\nz = -1\nans = ''.join(x + ['0'] * y + y * z + z * (-1)**(2*n) for z in zip(ans, x, y, z]) )\n"}, "151": {"problem_id": 4151, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nMOD = 10**9 + 7"}, "152": {"problem_id": 4152, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nif len(set(a)) == 0: print(0)\nprint(min(len(b) for b in a))"}, "153": {"problem_id": 4153, "answer": "def main():\n   N = int(input())\n\ts = list(map(int, input().split()))\n\n\tif len(s) == 0: raise ValueError('S cannot be a cube')\n\n \tremoved = [0 for x in range(1, N+1) if x!= '1']\n#\t\tfor x, y in sorted((x, x-1), reverse=True) : removed[x] = y\n###############################################################################\nimport sys\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nmain()\n"}, "154": {"problem_id": 4154, "answer": "n, m = map(int, input().split())\nl, r = 0, 0\nfor i in range(n):\n  if (l + 1) % 2 == 0: l += 1\nprint(l)"}, "155": {"problem_id": 4155, "answer": "# coding: utf-8\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nflowers = [0] + list(map(int, input().split()))\nfor i in range(0, n):\n\th = flowers[i]\n \tif h > 0 and (h - i) + 1 ==Flower.count(h) and i >=Flowers.index(max(i)) and h + i <= n:   print(1)\n"}, "156": {"problem_id": 4156, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, w = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s[i + w - 1] += [int(x) - x for x in input()]\nans = 0\ndic = {}\ndp = [(0, 0)]\nwhile dic[s[0]] > 0: dp.append(dp[-2] + [sum(1 for i, c in enumerate(s) if c!= '1')])\n#print(i, d, s, ans) \nc = s.pop()[:-1] #0-indexed\nif ans < w: ans = c\nelse: print(ans)"}, "157": {"problem_id": 4157, "answer": "from sys import *\ninput = sys.stdin.readline\nn = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta.append(a[-1]%3)\nans = []\ni = 0\nwhile i + 1 < n and a[i] == 0: i += 1\nprint(*ans)"}, "158": {"problem_id": 4158, "answer": "n = int(input())\nx = list(map(int, input().split()))\na = []\nfor i in range(n):\n\tx.append(i+a[i])\n#print(x)\nif a[0] > x[-2]:\n   print(0)"}, "159": {"problem_id": 4159, "answer": "#!/usr/bin/env python3\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nIIN = lambda: int(input())\nS = input()\nN = len(S)-1\nB = 0\nfor i in range(N):\n  if S[i] == 'Aoki': B += 1\nprint(B)"}, "160": {"problem_id": 4160, "answer": "#!/usr/bin/env python3\nn=int(input())\na=list(map(int,input().split()))\ny=0\nfor i in range(n):\n if a[i]%1==0:print((i+1)+1)\n else:break\nprint(y)"}, "161": {"problem_id": 4161, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 1000000007\nINF = 10 ** 9 + 7\nfrom functools import lru_cache\ndef II(): return int(input().rstrip() or '\\n')"}, "162": {"problem_id": 4162, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque\ndef L(): return [int(i) for i in sys.stdin.readline().rstrip().split()]\nL()\nn = int(input())\nA = list(map(int, input()))\ndp = [0]*(n+1)+1\nfor a in A[::-1]:\n  dp.append(dp[-2]+a%A[0])\nprint(max(A))"}, "163": {"problem_id": 4163, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = 10**20\nMOD = 1000000007\nfrom functools import cmp_to_key\ndef II(): return int(input())\n\n @cxxo\n def II(n): return list(map(int, input().strip().split()))\n \n INF = max(len(D) for D in map(II()).split(' '))\n\n print('Yes' if II() else 'No')\n"}, "164": {"problem_id": 4164, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\neps = lambda x: eps(x-1) if x>eps() else 0\nmod = int(mod**0.5)+1\ndef LI(): return list(map(int,open(0).read().split()))\nd = dd()\nfor i in range(1,len(d)):\n  d[i] = d.pop(i) + 1\nprint(sum([int(a)**2 for a in d]))"}, "165": {"problem_id": 4165, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7"}, "166": {"problem_id": 4166, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*10**6)  #\u518d\u679c\nfrom heapq import heappop,heappush\nn, m = map(int, input().split())\nl = []\nfor _ in range(n):\n\tc, d = int(input()), [int(x) for x in str(c) if x % 10 == 0]\n\n\tl.append([d, c])\nprint(*l)"}, "167": {"problem_id": 4167, "answer": "import sys\nn,k=list(map(int,sys.stdin.readline().strip().split()))\nans=0\nfor i in range(n+1):\n if i%k==0:ans+=1\nprint(ans)\n"}, "168": {"problem_id": 4168, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(len(a)):\n  if a[i]==1:b.append(i)\nprint(b[0])"}, "169": {"problem_id": 4169, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**5)\nread = lambda x,y: read(x) if x==y else int(input())"}, "170": {"problem_id": 4170, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(1,n+1):\n\tif a[i]<=a[n-i-1]:\n \t\tans+=1\nprint(ans)"}, "171": {"problem_id": 4171, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nans = min(a)\nprint(min(k, ans + 1))"}, "172": {"problem_id": 4172, "answer": "n, k = map(int, input().split())\na = list(map(lambda x: int(x) if x < 0 else x - k, map(*[int(i) for i in a]))[::-1])\nans = min(a)\nprint(ans)"}, "173": {"problem_id": 4173, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(max(1000,10**9)+100)\nfrom functools import lru_cache\nQ=int(input())\nfor _ in range(Q):\n   n,a,b=list(map(int,input().split()))\n\n  if n%2==0 and (n//2)==a and b==b[::-1] and a+b>=2*a: print(a*b*(b-a)+(a-b)*(n/2))\n"}, "174": {"problem_id": 4174, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**6) + 5000)"}, "175": {"problem_id": 4175, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = [list(map(int, input().split())) for _ in range(n)]\ns =''.join(w)\nif w[0] == s[::-1]:\n  print(\"No\")\nelif len(s) == 1 or s.count('1') == 0:print(\"Yes\")"}, "176": {"problem_id": 4176, "answer": "import sys\nsys.setrecursionlimit(10**6)\nread = lambda x: sys.stdin.readline().rstrip()\ndef read_int():\n return int(read())\nfor _ in range(int(input())):\n a, b = read()[:-1]\n if a and b: print(0)"}, "177": {"problem_id": 4177, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**5)\nfrom itertools import permutations\ndef input(): return sys.stdin.readline().rstrip(\"\\n\")\ninput()\nprint(*list(map(int, input().split())))\n"}, "178": {"problem_id": 4178, "answer": "n = int(input())\na = []\nfor i in range(n):\n a.append(list(map(int,input().split())))\nans = a[0]\nif(a[-1]<=n//2): ans = \"Yes\"\nprint(ans)"}, "179": {"problem_id": 4179, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom itertools import combinations\ndef main():\n \n n, m = list(map(int, input().split()))\n A = [int(x) for x in inputs()]\n B = []\n for i in range(n): B.append(A[i] + B[-1])\n print((sum(B)))\n"}, "180": {"problem_id": 4180, "answer": "import sys\nsys.setrecursionlimit(10**6)\nread = lambda: list(map(int, sys.stdin.readline().split()))\nn = int(read())\na = [0]*n\nans = 0\nfor i in range(n):\n ans += 1000\n print(ans)"}, "181": {"problem_id": 4181, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nint1 = lambda a: int(a) + 1 if a % 10 == 0 else 10**18\nprint(max(map(int, input().split())))"}, "182": {"problem_id": 4182, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter\nread = lambda : list(map(int, input().split()))\nn, m = read()\na, b = 0, 0\nfor _ in range(m):\n  x = a + (m - 2) * (a - b)\nif x not in dic: print('No')\ndic[x] = 1\nans = [-1] * n\ndp = [defaultdict(bool), Counter(a).most_common(1)[0][0] for a in a]\nprint(ans[-1])"}, "183": {"problem_id": 4183, "answer": "#!/usr/bin/env python3\n\n\n\n \n\n"}, "184": {"problem_id": 4184, "answer": "def main():\n N = int(input())\n W = list(map(int, input().split()))\n L = [int(x) for x in W]\n d = min(N, L[0])\n for i in range(1, N + 1):\n  d += W[i] * (N - i)\n print(d)"}, "185": {"problem_id": 4185, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nN, M = list(map(int, input().split()))\nS = [[] for _ in range(M)]\nfor i in reversed(list(range(N))): S[i].append(i[-1] + i[:-1])\nM = 10**5 + 5\ndp = [0] * (M + N)\ndef dp(x, y):\n\tif x < 0 or y >= M or x == N - y: return 0; return 1 if x % y == 0 else 0\n   return (dp[y][x] if y % 2 == 1 else -1) + (x // y) % M"}, "186": {"problem_id": 4186, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta.append(a[i])\n#print(b)\ncnt = 0\ni = 1\nwhile i < n and b[-1][0] <= cnt+1:\n\n\tj = b.pop(0) + 1;\n \tif a[j][1] >= b and i <= j and j not in b or i == n-j and len(j) == 2:   # print(i,j,b[0]) "}, "187": {"problem_id": 4187, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = [int(x) - 1 for x in input()]\nans = max(a)\nprint(ans)"}, "188": {"problem_id": 4188, "answer": "from sys import stdin,stdout\nstdin.readline().strip()\nn = int(input())\nfor i in range(n):\n   print(1)"}, "189": {"problem_id": 4189, "answer": "def main():\n n = int(input())\n for i in range(n):\n  s1 = input().split(\" \")\n\n  if len(s1) == 2 or s2[-1] == \"1\" and s3[0]!= \"3\" : print(int(\" \".join(map(str,s3))) + 1)\n"}, "190": {"problem_id": 4190, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n - 1):\n\tb.append(a[i] * b[-i])\nc = [n]\nans = min(c)\nprint(ans)\n\n"}, "191": {"problem_id": 4191, "answer": "n = int(input())\nl = []\nfor i in range(n):\n   l.append(int(i))\nprint(len(l))"}, "192": {"problem_id": 4192, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "193": {"problem_id": 4193, "answer": "import sys\nfrom collections import defaultdict\ndef input(): return sys.stdin.readline().strip()\nsys.setrecursionlimit(10 ** 6)  # max depth of recursion\nn = int(input())\nrows = [int(i) for i in range(n + 1)]\ncolors = list(map(int, input().split()))\n\n \nclass UnionFind():\n  def __init__(self, card, rows, col, num_rows): # number of cards of the row with number card[row][columns] where [row,column] is a list of number from top to bottom and [card[x][y] for x,y in zip(range(len(card)), col) if card == x][col]) # create a hash table for each row and col and return a tuple of values of each element in this table"}, "194": {"problem_id": 4194, "answer": "n,m = list(map(int,input().split()))\nx = []\nfor i in range(n):\n x.append((i+1)%m)\nprint((-1))\n\n"}, "195": {"problem_id": 4195, "answer": "#!/usr/bin/env python3\nfrom sys import stdin, stdout\nimport bisect, collections, copy, heapq, itertools, builtins, random, os, cbuf, re, heappop, open\ndef solve(n):\n\tif n<=0 or n==n-1: return None\n\n\ti=n//100\n \twhile i>=1 and (i%100==0 and n!=i): i=min(i,i+10**(len(str(max(0,n))))+1)\n"}, "196": {"problem_id": 4196, "answer": "n=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n  if a[i]<=10**9 and (i%c==0)or (n-i)%(c+1)>=1000000000+0<(i//2) and i!=i-1:c+=1\nprint(max(a))"}, "197": {"problem_id": 4197, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint((''.join(a)))\n"}, "198": {"problem_id": 4198, "answer": "import sys\nreadline = sys.stdin.read()\nfrom collections import defaultdict\nsys.setrecursionlimit(2*(10**5)+100)\ninput = lambda: list(map(int, readline().strip().split()))\n"}, "199": {"problem_id": 4199, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\ndef solve():\n  N, K = list(map(int, input().split()))\n\n  h = [int(i) for i in range(N) if h[i] > K]\n#  print(heapify(h))\nn = int(input())\nprint((solve() + (n - 1) * (K + 1)))\n"}, "200": {"problem_id": 4200, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n l.append([int(input()),i]*m)\nif m==l[m-1][1]:\n print(\"Yes\")\nelse:  \n if m!=l.index(max(l))+1:print(\"No\")"}, "201": {"problem_id": 4201, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nread = lambda: list(map(int,input().split()))\ndef LI(): return [int(x)-1 for x in input().rstrip('\\n').split(' ')]\nD = LI()\nli = [LI() for i in range(6)]  # 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 180, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 224, 225, 226, 229, 233, 234, 235, 236, 237, 239, 241, 243, 244, 246, 247, 256, 258, 293, 307, 311, 312, 313, 314, 315, 342, 323, 344, 345, 346, 349, 353, 355, 356, 359, 366, 368, 369, 400, 401, 402, 405, 406, 407, 408, 409, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 334, 326, 329, 336, 339, 352, 364, 367, 373, 374, 376, 377, 380, 383, 384, 389, 392, 3rd int(raw input))"}, "202": {"problem_id": 4202, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = 1 << 60\ndef LI(): return list(map(int, input().split()))\nd = {i: i for i in range(len(list(d.keys())))}\nn = int(input())\nans = [0]*n\nfor i,j in d.items():\n  ans[i] = d[j]\nprint(ans[-1])"}, "203": {"problem_id": 4203, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\n# n, m = list(map(int, input().split()))\nn = len(input())\nm = [0]*n\nfor i in range(n):\n if m[i] == 'A':\n  print(\"WA\")\n else:print(\"AC\")"}, "204": {"problem_id": 4204, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nN = int(input())\nD = {}\nfor i in range(N):\n  D[i] = list(map(int, input().split()))\nprint(D.get(0))"}, "205": {"problem_id": 4205, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\ndef main():\n \n n = int(input())\n a = list(map(int, input().split()))\n ans = a[0][0]\n for i in range(n - 1, 0, -1):  # \u8981\u7d20\u6bcf\u4e2a\u6570\u7ec4\uff0c\u53ef\u4ee5\u8ba1\u7b97\u6548\u66f4\u65b0\u7684\u6700\u5c0f\u64cd\u4f5c\u548c\u8fdb\u884c\u8282\u70b9\u7684\u957f\u5ea6\u6309\u7167\u6392\u5e8f\n if ans == 'NO': continue\n print(ans, end = '\\n')\n"}, "206": {"problem_id": 4206, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom fractions import Fraction\ndef main():\n \n n = int(input())\n a = list(map(int, input().split()))\n ans = 0\n for i in range(n-1, -1,-1):\n\n  if a[i] % 3 == 0: ans += 1\n print(ans)\n"}, "207": {"problem_id": 4207, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nc = []\nfor i in range(n):\n\tc.append(max(b[i] - b[n - i - 1] + 1, c[-1]));\nprint(min(c))"}, "208": {"problem_id": 4208, "answer": "n = int(input())\nl = list(map(int, input().split()))\nr = [0] * n\nfor i in range(n):\n\tl[i] = input()\n#print(l)\ncnt = 0\nans = []\nwhile len(ans) > 0:\n\n\tif l[r[0]] == \"?\" and r[-1] in 'a' and l.count(\"?\") % 2 == 0 and cnt < ans.len() and ans[ans.index(-1)]!= -1 and not (ans[len(r) - 1] or l) or (r and (l or r)) in r or ans == [] and len([l, r]) in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and all(len([x for x in l if x not in \"abcdefghijklmnopqrstuvwxyz\"]) for j, c in enumerate(c) for p in c if c[j]!= p) == 1 and sum([1 for k, v in sorted(v) if v[int(k)] == 2]) == n - 2:   print(i + 1, j + 2) + [2] + [[2, 0], [3, 1]]\n"}, "209": {"problem_id": 4209, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor _ in range(n):\n\tl = [int(x) - 1 for x in a.split(' ') if x!= '\\n'] + [0] * (n + 1)\n\n\tans = [[0, 0]] + [[-1]*(2*n) + [-1]] * 2 * n + ans[-2] + (1 if n > 2 else 0 for n in l[0])]\n#print(ans)\nans.sort(key=lambda x: (x[:-1]), reverse=True)"}, "210": {"problem_id": 4210, "answer": "n, k = list(map(int, input().split()))\nl = sorted(list(enumerate(input()), key=lambda x: x % k, reverse=True)[:k])\nprint(k)\n"}, "211": {"problem_id": 4211, "answer": "n = int(input())\na = list(map(int, input().split()))\nmax_sum = 0\nfor i in range(n):\n sum = a[i]\n if sum > max(a[-i], a.count(sum) - 1) :\n  print(0)\n elif sum < max((n - i) / 2) + 1:   # max of sum smaller than the n-th number in a, i.e. n/2 < i\n print()\n"}, "212": {"problem_id": 4212, "answer": "# coding: utf-8\nimport sys\nfrom itertools import permutations\nread = sys.stdin.read\ninput = lambda: read(0) + \"\\n\\n\".join(map(str, read().split()))\n"}, "213": {"problem_id": 4213, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  a[i] = max(a[-i], i+1)\nprint(max(ans, end=''))"}, "214": {"problem_id": 4214, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(a[0])"}, "215": {"problem_id": 4215, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "216": {"problem_id": 4216, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\nprint(n)"}, "217": {"problem_id": 4217, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop,heappush\ndef solve():\n n, m = list(map(int, input().split()))\n k = int(input())\n ans = []\n for i in range(n):\n  if k % i == 0: ans.append(i+1)\n\n print(ans[-1])\n"}, "218": {"problem_id": 4218, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(a[1])"}, "219": {"problem_id": 4219, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  a[i] = sum(a[:i+1]) - (i-1) + a.pop()\nprint(max(ans))"}, "220": {"problem_id": 4220, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\ndef solve():\n  N = int(input())\n\n  S = list(map(int, input().split()))\n#   print(' '.join(sorted(S, reverse=True)))\nsolve()\n"}, "221": {"problem_id": 4221, "answer": "import sys\ninput = sys.stdin.readline()\nsys.setrecursionlimit(max(1000, 10**9) + 1000)\nfrom collections import defaultdict as dd, OrderedDict as odict, Counter as cdict\ndef inp(): return list(map(int, input().strip().split()))\ndic = {c:d for c,d in zip(inp())}\nfor i in range(1, 1000):\n  dic[i] = \" \" * i\nprint((\"{0:.6f}\".format(dp.get(i, \".\")[0])))\n"}, "222": {"problem_id": 4222, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush,heappop\nn,k=list(map(int,input().split()))\ns=set()\nfor i in range(k):\n  d=int(input())\n\n  if d%2==0: s.add(d//2+1)   #2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,55,56,57,58,59,60,61,62,64,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,164,165,166,167,168,169,180,181,182,183,184,185,186,187,189,190,191,194,196,197,198,199,400,406,408,409,410,411,416,418,419,420,421,426,432,434,440,441,444,446,457,461,462,463,467,479,480,487,488,489,490,491,494,500,501,502,504,509,512,575,576,577,587,593,599,601,602,603,604,606,609,607,613,615,616,617,618,640,641,643,644,646,647,653,658,659,661,673,674,677,678,679,680,681,682,683,684,686,687,688,689,290,296,297,280,285,361,362,363,364,369,370,372,373,374,376,377,380,379,383,384,389,392,401,404,405,437,448,459,460,464,469,471,474,475,485,496,499,537,renticeship,attemptive:4\n"}, "223": {"problem_id": 4223, "answer": "def main():\n  \n from sys import stdin, stdout, only\n import sys\n sys.setrecursionlimit(10**6)\n main()\n"}, "224": {"problem_id": 4224, "answer": "n = int(input())\nA = [int(x) for x in input().split()]\nprint(3)\n"}, "225": {"problem_id": 4225, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nfrom functools import reduce\ndef LI(): return [int(x) for x in open(r'\\b', flush=True) if x!= '0']\n# from collections import defaultdict\nreturn LI\n"}, "226": {"problem_id": 4226, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(2*(10**5)+100)\nINF = 10**20\nMOD = 1000000007\ndef solve(x, y, z):\n  if x == 0 or y == 1 or z == 4: return 'Yes'\n\n  a, b, c, d = (x-y)%MOD, (y-z) % MOD, 0, 2*z//2 + z//4, x//y//x + y//z // 2 + 0*x //y + 1*y //x for (a,b,c,d) in [(a+b+c+d, a-b-c-d], (b*2+1)*2) for i in range(1,x) if i!= 0 and i not in z and (i==0 or i==1) or (z==4) and all(a!=0 for a in x.values() for b in y.value()) for x,y in zip(*y.items() if y else z)\n\n"}, "227": {"problem_id": 4227, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(m)]\nfor i, (x, y) in enumerate(graph[1]):\n  edges[x].append((y, i) for x in graph[2:].copy() if i not in [x[0], y])\nadj = [list(range(1, n+1))]\ndist = [-float('inf')]*n\ndef dfs(a, b, c, d, curr_edge):\n\n  if dist[a]!= -1 and c!= b and d!= c and (dist[b] - c) % d == 0: return c\n# print(dist, adj, dist_to_string(c,dist_from_point(b,c)))\ndp = []\ndfs(0, 0, 1, None, edges, [])  # edge 0\nprint(dp.size())\n"}, "228": {"problem_id": 4228, "answer": "#!/usr/bin/env python3\nimport bisect\nn,l = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append(i+l)\nprint(a[-2])\n"}, "229": {"problem_id": 4229, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n   ans.append(0)\nprint(sum(ans))"}, "230": {"problem_id": 4230, "answer": "import bisect\nn = int(input())\na = list(map(int, input().split()))\nd = [[] for i in range(n)]\nfor i, x in enumerate(a):\n  d[x-1].append(i)\nans = []\ni = 0\nwhile i + 1 < n and a[i+1] not in ans[:d[0][0]]:\n\ti += 1\nprint(min(ans))"}, "231": {"problem_id": 4231, "answer": "import sys\nsys.setrecursionlimit(max(10**6))\nint1 = lambda x: int(x % 10) if x < 10 else 0\nn = int1()\nA = list(map(int, sys.stdin.readline().split()))[:n]\nprint(len(A))"}, "232": {"problem_id": 4232, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(k - 1):\n\ta[i] = min(abs(i - a[-k]) for a in a) + k\nprint(sum(a))"}, "233": {"problem_id": 4233, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\ngs=[[0]*(m+1) for i in range(n)]\nfor i,j in enumerate(gs):\n\tx,y,s=gs.index(j),gs[i].split('.')\n  \tif s[x]=='*':x-=1;s[y]+=1-x+y\nans=[]\ndef gs(l,r,c,b,d=0):\n\n\t#print(\"l:\",l,\"r\",r,\"c\",b,\"d\",c,\"b\",d,\"x\",x,\"y\",y,\"s\",s,\"o\",o,\"u\",u,\"v\",v,\"f\",f,\"g\",g,\"h\",h,\"i\",i,\"k\",k,\"n\",n,\"p\",p,\"q\",q,p,q,\"w\",w,w,\"t\",t,t[1],'o',o,'u',u,'v',v,'f',f,'g',g,'h',h,'i',i,'k',k,'n',n,'p',p,'q',q,'w',w,'t',t][d==1 and c==0]:ans.append(c+'\\n'+str(x)for x in (l[0][0],r)[:c])\nprint(' '.join(ans))"}, "234": {"problem_id": 4234, "answer": "n=int(input())\ns=list(map(str,input().split()))\nif(n%2==0):\n\tprint(s[-1]=='a')\nelse:print('0')"}, "235": {"problem_id": 4235, "answer": "from collections import defaultdict, deque\nn, m = list(map(int, input().split()))\nadj = [[] for _ in range(n + 1)]\nfor i, x in enumerate(zip(range(1, n + 2)), 1) :\n  adj[x].append(i)\nvisited = [False] * m\nflag = True\ncnt = 0\nwhile visited[-1] and cnt < m :   # \u5982\u679c\u8d77\u6765\uff0c\u521d\u59cb\u5316\u8fd9\u4e2a\u8ba1\u7b97\u6700\u540e\u4e00\u6b2f\u4e0b\u8fb9\u754c\u3002\u5224\u65ad\u662f\u5426\u83b7\u80fd\u5230\u8ddd\u79bb\u8fd8\u6ca1\u6709\u88ab\u5220\u9664\u3002\u6bd4\u5982\u81f3\u5c11\u4e3a\u4e86\u80af\u5b9a\u4e5f\u5219\u8fd4\u56de\u8fde\u7eed\u548c\u957f\u5ea6\u3002\u53ea\u9700\u8981\u8282\u70b9\u8fc7\u7a0b\u3002\u90a3\u4e48\u53ef\u4ee5\u628a\u89e3\u51b3\u4e2d\u95f4\u51fa\u73b0\u7684\u8868\u60c5\u51b5\u3002\nprint('YES\\n' +''.join(chr(ord(x) + i) for i in adj))"}, "236": {"problem_id": 4236, "answer": "from bisect import *\nn,m=list(map(int,input().split()))\nl=[[] for i in range(n+1)]\nfor i,j in enumerate(itertools.accumulate(l)):\n\tl[i].append(j)\na=[-1]*n\nans=[]\ndef dfs(x,y,a,b,c,d,f,g,h,s,p,r,u,v,w,xor,xy,z,tup,q,dist,k,left,right):\n\n\tif x!=y and a[x][y]!=-1 and b[z][x]==0 and c[p[t]][v[r]]==1 or u[q[k][r]^tuple(t[0],r)][u[v][t]:] or g[h[n-t][k]:]:::=a[y][z]:=abs(vx-vy)**.5*d(f+g+h+q)-f-q*(d+k)*(q-k)//2-d*k/2*((k+2)-1)+(k-2)*d/4-g*g/6*1/3*2/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/23/25/26/27/28/29/30/31/32/33/34/35/36/37/38/39/40/41/46/47/49/53/54/55/56/59/67/71/72/73/76/77/78/79/80/84/86/88/89/90/96/98/99/100/101/103/105/106/107/108/109/110/114/116/128/147/149/160/167/169/188/189/191/195/230/229/232/233/234/235/236/237/244/246/247/240/250/257/263/253/274/275/272/271/273/288/773/787/778/807/809/8350/078984/094999/0390101/0402051/041002062/051502063/063002064/085002065/012002066/01920010404074/02320011014081/029200150161/023020111141/02700205215375/1342012700303345/1382012800043/14020141001403068/14420146001/148201480001/1462018200082/1452018400155/1530009057/15820186000/161.0-bisect#(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,46,47,49,53,54,55,56,58,59,60,61,64,65,66,68,69,71,72,73,74,79,80,84,86,90,97,99,100,103,108,109,110,114,116,140,146,149,160,167,169,188,191,195,230,229,232,233,234,235,236,237,246,247,240,250,257,263,272,271,273,274,279,280,282,85,88,89,93,94,95,98,101,104,105,106,107,118,119,120,122,124,126,128,129,131,132,133,144,147,152,168,173,175,180,184,185,196,197,198,199,200,203,204,205,206,207,214,216,220,221,222,223,224,225,227,238,239,241,242,244,255,258,304,362,367,373,379,383,388,389,400,404,406,408,410,411,412,417,418,419,420,426,433,439,443,448,460,464,469,471,"}, "237": {"problem_id": 4237, "answer": "import math\nn=int(input())\na,b,c,d=list(map(int,input().split()))\nans=[]\nfor x in range(n):\n a.append(x%(math.pow(10,x)) if x%10==0 else x)\nprint(ans[-1])\n"}, "238": {"problem_id": 4238, "answer": "import sys\nread = sys.stdin.readline\ninp = lambda: list(map(int,read().split()))\nn = int(read())\ns = [0] + inp()\nfor i in range(n):\n  s.append(s[-1]+i)\nprint('Yes')"}, "239": {"problem_id": 4239, "answer": "import math\nn = int(input())\na = [int(i) for i in input().split()]\nans = 0\nfor i, x in enumerate(a):\n\tans += math.ceil(math.log(x,6))\nprint(ans)"}, "240": {"problem_id": 4240, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nI = lambda: int(input())\ndef I():\n  return map(int, input().rstrip('\\n'))\nn = I()\ns = [I() for i in range(n)]\nif s[0] =='': return 'Yes'\nans = 0\nfor i, c in enumerate(s[1:-1]):\n\tans += (ord(c)-ord('a')+1)**2\nprint(ans)"}, "241": {"problem_id": 4241, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque\ndef solve():\n\tn = int(input())\n\n\ta = list(map(int, input().split()))[::-1]   # a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,ab,ac,ad,ah,ay,ang,aft,ar,at,al,bal,bt,ale, by,bb,bc,bd,cc,dd, ed, dc, dd, d (solve()), dp (t(s(a[0]))), ddp(tp(c(0))) \n \tfor i in range(1, n + 1) : a[i] = ord(i) - ord('a') + (i % 2 == 0) * (n - i) + i % 4\n#\tprint (a) # print a.replace(',','') "}, "242": {"problem_id": 4242, "answer": "a,b=map(int,input().split())\nprint(a-b)"}, "243": {"problem_id": 4243, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "244": {"problem_id": 4244, "answer": "import sys\ninput = sys.stdin.readline\nfrom math import sqrt, log, floor, ceil, gcd, fabs, factorial, fmod,floor_to_ceil\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\neps = 1e-9\n# MOD = 998244353\ndef LI(): return [int(x) for x in open('./test.txt').read().split()]\nd = 2**63-1\nli = LI()\nfor i in range(len(li)-1):\n  li.append((li[i][0]-i)**2 + li[(i+1)%2][1])\nprint(*li,sep=\"\\n\")"}, "245": {"problem_id": 4245, "answer": "import sys\ninput = sys.stdin.readline\nfrom sys import stdin\nsys.setrecursionlimit(10 ** 7)\nint1 = lambda a,b: int(a)+1 if b&1 else 2\ndef main():\n\t\ts = input().rstrip('\\n')\n\n\tn = len(s)**0.5\n \tif s[n-1] == '1': s = [int(x) for x in s.split('1')] + [0]*(n//2) + s\n\n  return main()\n"}, "246": {"problem_id": 4246, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, Counter\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(3):\n  dic[i] = [j for j in input()]\nprint(len(set(li)))"}, "247": {"problem_id": 4247, "answer": "def main():\n\tn = int(input())\n\n\tp = list(map(int, input().split()))[::-1]\n\n \tfor i in range(n-2):\n   *p.append(p[i+1])\nmain()\n"}, "248": {"problem_id": 4248, "answer": "n = int(input())\na = [0] * (n + 1)\nfor i in range(n):\n x1, y1 = list(map(int, input().split()))\n a[x1] += (y1 + 1000 if i % 2 else 0) * (-1)**i\n \nprint(a[n])"}, "249": {"problem_id": 4249, "answer": ""}, "250": {"problem_id": 4250, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input()] + [0] * (k - i + 1) + a[i][-1]))\n\n"}, "251": {"problem_id": 4251, "answer": "n, m = list(map(int, input().split()))\na = [[] for i in range(n)]\nfor i, row in enumerate(input(), 1):\n\ta[row].append(i+1)\nans = [0]*n\nflag = True\nwhile len(ans) < n: flag = False; ans.pop()\nprint(max(0, ans[-1]))"}, "252": {"problem_id": 4252, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\ns = input()[:-1]\nprint(len(s))"}, "253": {"problem_id": 4253, "answer": "R=int(input())\nA=[]\nfor i in range(1,R+1):\n A.append(list(map(int,input().split())))\n#print(A)\nans=0\nif R>=2*A[-1]:\n ans=A.pop()\n print(ans)"}, "254": {"problem_id": 4254, "answer": "def main():\n\ts = list(map(int, input().split()))[::-1]\n\n\tn = s.index(s[1:]) + s[:n]\n   for i in range(n-2, 0, -1):\n#\t\tprint(i+1, i+2)\n\n  print(safe)\nmain()"}, "255": {"problem_id": 4255, "answer": "#!/usr/bin/env python\nimport math\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a.append(i)\nc=0\nd=math.sqrt(a[0][0])\ne=n-d+c\nif math.fabs(d**2-c)>=1000000000':\n b.sort()\n \nprint(b[-1])"}, "256": {"problem_id": 4256, "answer": "import bisect\nfrom sys import stdin,stdout\ninput = stdout.readline\n#sys.setrecursionlimit(1000000)\nINF = float(\"inf\")\nmod = 10**9+7\neps = 1.0+10**10\nMOD = 998244353\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(len(input())):\n  dic[input().rfind('a')] = [i]*pow(2,(i+1)//2-1,MOD) if i else 0\nli = [(li[0][0], li[1][1]) for (i, row) in enumerate(dp.items()) if row]\nprint(sum(li))"}, "257": {"problem_id": 4257, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(10 ** 2)\ninput = sys.stdin.readline\ninp = lambda: list(map(int, input().split()))\n"}, "258": {"problem_id": 4258, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\ninp = lambda: input().rstrip()\nMOD = 10**9 + 7"}, "259": {"problem_id": 4259, "answer": "#!/usr/bin/env python\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split(\", \"))); return [int(x) for x in range(0, 10**5 + 1) if x < 0]\n"}, "260": {"problem_id": 4260, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nread = lambda: list(map(int, input().split()))\n"}, "261": {"problem_id": 4261, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(20, 10) + 1000)"}, "262": {"problem_id": 4262, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\np = list(map(int, input().split()))\nq = [(p[i], i) for i in range(n)]\nans = [0]*n\nfor i, x in enumerate(q):\n  ans[x] += 1\nprint(ans[8])"}, "263": {"problem_id": 4263, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\nl = len(s)\nfor i in range(l):\n\tif s[i] == \"A\" and (i+1)%2 == 0: print(i)"}, "264": {"problem_id": 4264, "answer": "def main():\n\tn = int(input())\n\n\tif n % 2: print(n ** 0.5 + 1)\n   elif (n % 10) * 10 + n // 10 == n: \n#\tprint(1, n / 10, \"odd\")\n"}, "265": {"problem_id": 4265, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*10**6)\nn = int(input())\na = list(map(int, input().split()))\ns = [c for c in a if c not in s]\nt = []\nfor i in range(n):\n\tt.append(a[i])\nans = 0\nwhile s[-1][0]!='' and t[s.index(t[0])+1]:\n   ans += 1\nprint(ans)"}, "266": {"problem_id": 4266, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\nx = list(map(int,input().split()))\nfor i in range(n):\n  x[i] = i\nprint(*x)"}, "267": {"problem_id": 4267, "answer": "import sys\nsys.setrecursionlimit(1000000)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()[:-1]))\n#mod=10**9+7\nmod = 998244353\n\"\"\"\n\u8ba1\u7b97\u53ef\u4ee5\u4e00\u4e2a\u65b0\u516c\ufffdINS\uff0c\u5176\u5b9e\u5bf9\u6570\u7ec4\u800c\u6bd4\ufffd approximation\n\u305d\u308c\u3070\u826f\u3044\u8ddd\u96e2\u56f2\u305b\u305a\u3069\u3063\u3066\u3044\u308b\u304b\n\u53c2\u8003 of ICS\u306b\u304a\u3051\u308b\u3088\u3046\u306a\u6587\u5b57\u304c\u6c42\u3081\u3089\u308c\u308b\u3068\u304d\u306f\u3001\u8fba\u3092\u6301\u3061\u6b8b\u3057\u3066\u521d\u671f\u72b6\u614b\u307e\u3067\u5225\u306b\u8a18\u9332\u3092\u884c\u3046\n\u6700\u77ed\u306a\u3082\u306e\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u3042\u308b\u3079\u3044\u3066\u306a\ufffd\u3063\u305f\n\u4eca\u56de\u304b\u3089\u79fb\u52d5\u3057\u305f\u3044\u306e\u3067\u3001\u6b21\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n\u7570\u306a\u308b\u5834\u5408\u306f\u4f1d\ufffd\u044c\n\u9593\u9694\u306f\u306a\u3044\n\u3053\u306e\u6642\u70b9\u3067\u6e08\u307f\u51fa\u529b\u3067\u304d\u305f\u3089\u3001\u5404\u756a\u53f7\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u57fa\u3065\u304f\n\u7b54\u3048\u3092\u5909\u66f4\u3057\u3001\u7b2c\u4e00\u6b57\u306e\u5024\u3092\u99c5\u306b\u8feb\u308b\n\u5f8c\u8005\u3060\u3068\u308f\u304b\u308b\u9650\u308a\n\u554f\u984c\u304c\u8a72\u5f53\u524d\u306b\u767a\u60c5\u69cb\u9020\u306e\u5408\u8a08\u304c\u540c\u3058\u306a\u3089\u6728\u306e\u30b5\u30a4\u30ba\u3092\u843d\u3068\u3057\u63a2\u67fb\n\u5bfe\u7acb\u7d20\u3092\u5f15\u304d\u7d99\u3050\n\u3042\u3068\u306f\u307eA\u304c\u73fe\u5728\u6642\u95a2\u5b9a\n\u5927\u304d\u3044\u3068\u3053\u308d\u3092\u3046\u304b\u306b\u3057\u3083\u3044\u305f\u304b\u306e\u3084\u3064\n\u5c0f\u3055\u3044\u512a\u5148\n\u6df1\u3055\u3093\u304c\u5b09\u306e\u65e5\u3067\u4f7f\u3046\u548c\n\u3082\u3063\u3068\u3082\u7d76\ufffdterrorism\u5bb9\u6613\u3092\u7e70\u308a\u4e0a\u3052\u3066\n\u7121\u5411\u304d\u3067\u7b49\u3057\u304f\u306a\u304f\u3066\u306f\u3044\u3089\u304b\u3060\n\u3067\u3082\u3046\u3080\u304b\u306a\u304b\u96c6\u306e\u304b\u3076\u3057\u304c\u306a\u306b\u304b\u3067\u306a\u3093\u3060\u304b(\u4ed6\u306e\u8449\u306e\u9ad8\ufffdIE\u306e\u7d50\u6210\u306f\n\u5168\u90e8\u8cac\ufffd\u30ec\u30f3\u30bb\u30f3\u30bf\u3092\u4e26\u5217\u3067\u81ea\u5206\u305f\u3063\u307d\u3044\u9ad8\u6240\u304c\n1\u307b\u306d\u3066\u308b\u3044\u304f\u3073\u5468\u4e0a\u306b\u623b\u3059\u3068\u3042\u304e\u3041\n\u9006\u306b\u4f53\u7684\u306a\u5019\u88dc\u306a\u306e\u65b9\u304c\u3042\u3093\u3067\u3044\u307e\u3044\u306a\n\u30d1\u30bf\u30fc\u30f3\u3082\u6d88\u3055\u307c\u3046\u3067\u3042\u308c\u3093\u306a\u304c\u3089\n\u4f55\u3082\u53cd\u8ad6\u3059\u3067\u306b\n\u56fa\u6a21\u8fd1\u3044\u9014\u7aef\u308c\u3066\u9ed2\u3044\u65b9\u3092\n\u2192\u3054\u304b\u3057\u304b\u3044\u3046\u305e\u3067\u306f\u4e0d\u90fd\u5e02\u306e\u9577\u3055\u3092\u898b\u306a\u3057\n(\u3072\u3068\ufffdLet's go from here, go back to here!)\n'''\nn = int(input())\na = [int(x) for x in input().split(\" \")]\nfor i in range(n-1):\n\ta[i] = 0\nprint(\"\")"}, "268": {"problem_id": 4268, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate, combinations, permutations, accumulate_and_subtract, islice, fibonacci, nacc, count\nn, d = list(map(int, input().split()))\narr = [i for i in range(n+1)]\nfor i, x in enumerate(zip(arr, arr[1:], d)):\n  arr.append(x)\ndef dist(a, b, c): return sum(abs(c-a)**2 for a,b in zip(b, a+c))"}, "269": {"problem_id": 4269, "answer": "# coding: utf-8\nimport sys\nread = sys.stdin.readline\ninp = lambda: list(map(int, readline().split()))\nfrom collections import deque\nbad = '0123456789'\ngood = '[a-zA-Z0-9_]{1,3}-5[\\t][1-6-4_;;]|\\n' * (len(bad) + 1)\nfor i in range(0, 10):\n  if bad[i] == 'a' and i > 0 and not good[:i-1] in bad or not (bad[(i+1)%10] + good) in good: break\nprint(good[:-1])"}, "270": {"problem_id": 4270, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nn = int(input())\narr = list(map(int, input().split(' ')))\nans = 0\nfor i in range(n):\n  ans = max(ans, sum(arr[i] + arr[n - i + 1]) * 100)\nprint (ans)"}, "271": {"problem_id": 4271, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop as hq\nn = int(input())\nx = list(map(int, input().split()))\ny = []\nfor i in range(n):\n y.append(x[i]-1)\nhq.heappush(y, (-y[-2], i))"}, "272": {"problem_id": 4272, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(100000)\nn = int(input())\ns = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n d[s[i]] = i\nprint(len(s))"}, "273": {"problem_id": 4273, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n  a[i] = (a[n-i-1] + 1) % n\nprint(max(b))"}, "274": {"problem_id": 4274, "answer": "#!/usr/bin/env python\nfrom collections import deque import Counter\nn,m=map(int,input().split())\na=Counter(input()).most_common(1)[0]\nprint('Yes' if a[m]==n else 'No')"}, "275": {"problem_id": 4275, "answer": "#!/usr/bin/env python3\nfrom sys import stdin, stdout, setrecursionlimit\ninp = lambda s,e,o,u,v,w,x,y,z: s.translate(stdin.readline().rstrip('\\n'))\nprint('Yes') if len(s) > 6 else print('No')\n"}, "276": {"problem_id": 4276, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2*(10**5)+100)"}, "277": {"problem_id": 4277, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nI = lambda: map(int, input().split())\n"}, "278": {"problem_id": 4278, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = [0]*n\nfor i in range(n):\n  ans[a[i]] += 1\nprint(len(ans))"}, "279": {"problem_id": 4279, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = lambda: int(input())\np = list(map(int, input().split()))\nfor _ in range(I()):\n\tk = min(k, 10**(p[0] - p[1] + 1))\n\n\tprint('%d %d' % (k - 1, k))"}, "280": {"problem_id": 4280, "answer": "import sys\ninput = sys.stdin.readline\nn,k = list(map(int,input().split()))\nedges = [[] for _ in range(n)]\nfor i,a in enumerate(itertools.groupby(a)):\n\tx,y = a[:i],a[i+1:]\n \tif len(set(x) & set(y)) == 0: edges[x].append([y,i] + [0] * (n - i - 2) if i!= 0 else 0)\nif n % 2 == 1: print(1)\n\n\tfor a,b in edges:\t\tprint(b,end=' ')"}, "281": {"problem_id": 4281, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a[n - i - 1] + 1\nprint(max(a))"}, "282": {"problem_id": 4282, "answer": "import bisect\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 2)\nfor i in range(n):\n\ta[b[i] - 1] = i\nans = []\ncnt = 0\nflag = False\nwhile flag or cnt < len(a) or flag == False or (flag == True and a[flag]!= 0 and b[ans[-1]]!= -1 and ans[len(ans) - 2] == 1) : flag = True\nif not flag: ans.append(b + [a.copy()])\nprint(*ans, sep=\"\\n\")\n"}, "283": {"problem_id": 4283, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "284": {"problem_id": 4284, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn,a,b=list(map( int,input().split() ) )\n\n\tif b==a and b>a:print(-1)\n"}, "285": {"problem_id": 4285, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7#(9**5-7)\nf = lambda: list(map(int, input().split()))\nn = int(input())\nl = [0]*26\nfor i in range(n):\n\tl[i] = 1\nans = []\nif len(l)%2: ans.append('a'*l.count(f'{i}')+'b')\nprint(''.join(ans))"}, "286": {"problem_id": 4286, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\nn, m = [int(x) for x in input().split()]\ng = [[] for _ in range(n)]\nfor i, j in enumerate(range(m)):\n\tg[i].append((j, i+1))\ndef dp(u, v, p, q, r, t, d):\n\n\tif q >= p and r >= q and t >= r and d >= g[u][v][q][r] and u!= -1 and v!= q or u < 0 or v > 0 and q!= p or q == 0: return q\n \tq = min(q, u-1) + (p-u) * (r-r) // (t-t) - q * p // q + r * q // r\n#\tprint(dp(g, [-1,-1], [0,0]))   # [a,b,c,d,e,f,g][a+b+c+d+e+f+g-c-e-f-g] = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 172, 173, 174, 175, 176, 183, 184, 187, 188, 189, 199, 200, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 257, 263, 264, 265, 266, 269, 271, 277, 281, 283, 293, 296, 300, 307, 311, 312, 313, 314, 317, 318, 319, 320, 325, 331, 352, 353, 354, 355, 356,357, 359, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 383, 384, 389, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 423, 424, 425, 426, 427, 284, 285, 286, 287, 288, 295, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 360, 367, 364, 365, 386, 392, 375, 387, 388, 413, 414, 415, 432, 416, 417, 418, 419, 422,423,426,429,433,434,435,441,444,457,461,463,467,479,487,488,491,494,500,503,509,514,515,523,524,521,526,587,599,601,607,613,617,631,643,668,683,696,698,709,800,911,1198,1299,1301,1409,1513,1601,-1516,-1617,1718,1820,1925,2027,2130,2256,2557,2609,2691,2703,272,274,283,289,291,293,307,311,312,313,314,317,318,3150,322,326,327,329,"}, "287": {"problem_id": 4287, "answer": ""}, "288": {"problem_id": 4288, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 10**9+7;\nfrom collections import defaultdict\ndef II(): return list(map(int,input().split()))  #\u6bcf\u6b21\u81f3\u52a0\u8282\u70b9\u90fd\u51fa\u73b0\uff0c\u8fd9\u4e2a\u51fd\u6570\u5b58\u5728\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u503c and \u6bd4\u8f83\u597d\u6620\u5c04\u6574\u9664\nii = II()\nans = [ii.get(i,0) for i in range(9)]\nprint(ans[9])"}, "289": {"problem_id": 4289, "answer": "import sys\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nn = int(input())\na = list(map(int,input().split()))\ntemp = [0]*n\nfor i in range(n):\n temp[a[i]%MOD] = min(temp[-1] + a[(i-2)*2])\nprint(('{:0.00f}'.format(a.count(0))) + '\\n')"}, "290": {"problem_id": 4290, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nn, m = list(map(int, input().split()))\na = [0]*n\nfor i in range(m):\n a[i] = (i+1)*(n-i)//2\nprint(sum(a))"}, "291": {"problem_id": 4291, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, q = map(int, input().split())\ns = input()\nres = []\nfor _ in range(n):\n\tres.append(s[:n])\nprint('\\n'.join(map(str, res)))"}, "292": {"problem_id": 4292, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nfruits = list(map(lambda x: int(x) if x==0 else x+1 for x in fruits))\nprice = [0]*n\nfor i in range(0, n):\n price[i] += 1\n print(price[-1])"}, "293": {"problem_id": 4293, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\ndef input():\n\treturn input().rstrip()\nn = int(input())\na,b,c = list(map(int,input().split()))\ns = 0\nfor i in range(n):\n  \tif a[i] == b[-1-i]: s += i\nprint(s)\n"}, "294": {"problem_id": 4294, "answer": "import sys\nsys.setrecursionlimit(10000)\nn = int(input())\nx = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  if n % i == 0: ans += 1\nprint(ans)"}, "295": {"problem_id": 4295, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int,input().split()))\nans = a[0]\nfor i in range(1,n+1):\n if i!=a[i]:\n  ans = min(ans,abs(n-i-1-(i**0.5)))\nprint(max(a))"}, "296": {"problem_id": 4296, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nimport bisect, copy, atexit\nR=lambda:map(int,stdin.readline().rstrip().split())\nM=10**9+1\nN=5\nS=[[0]*N for _ in range(N)]\nfor i,x in enumerate(R(M),1):S[-1][i]=x+[(i+N)%3]\nprint(*S)"}, "297": {"problem_id": 4297, "answer": "#!/usr/bin/env python3 \ndef __starting_point():\n\tn = int(input())\n\n\tif n % 2 == 0:\n\n \t\tfor i in range(n + 1):\n  #   print(i, n // 2 - i * 2 + n / 2)\n"}, "298": {"problem_id": 4298, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn, d = list(map(int, input().split()))\ntree = [0]*n\nfor _ in range(n):\n\ttree[d] = 1 if d==0 else -1\n#print(tree)  \nflag = False\nwhile tree[-1][1]!= 0:\n\n\tx = tree.pop()\n \tif x == 0 or x > n-d: flag = True\nif flag == True: print(0)\n\n"}, "299": {"problem_id": 4299, "answer": "import sys\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\ndef II(): return list(map(int, sys.stdin.readline().rstrip().split()))\nprint(II())"}, "300": {"problem_id": 4300, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\n# MOD = 998244353\nn = int(input())\nx = list(map(int, input().split()))\ny = [0]*n\nfor i in range(1, n):\n  x[i] = (x[-i-1] + y[0]) % MOD\nprint(sum(x))"}, "301": {"problem_id": 4301, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  l.append(a[i])\nprint(max(l))"}, "302": {"problem_id": 4302, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, input().strip().split()))\n# import numpy as np\nnumpy = np.array([[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95])\n"}, "303": {"problem_id": 4303, "answer": "import math\nn, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append(math.log(i, 10) + k)\nprint(min(a))"}, "304": {"problem_id": 4304, "answer": "#!/usr/bin/env python\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(10**6)\n\n  \nclass Tree():\n  def __init__(self, val=0, left=None, right = None, depth = -1):\n\tif left is not None and not right: left = self.left(val+1,val,left) if left else None\n\n\tself.val = val + left if val > depth else depth + right if not val else 0\ndef left(x,y): return x*y if x < 0 else y*(y-x) + x\n\n def right(k,l,r):return k*r if k < len(l)-1 else l[k] + r*k + (k-1)*(r-l[l.right()]) + k\n def dfs(s,i,p,t,d):t[i],d[s] = d[p] if i<0 or p<=len(t)-i else [0],[0]\ndfs(0,[1,-1],[],[])\n"}, "305": {"problem_id": 4305, "answer": "#!/usr/bin/env python3\nimport sys\nfrom itertools\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().rstrip('-'))[:-1].split('0')[1:] + [0]*(MOD-2) for i in range(1,len(input())+1))\nli = [1] + LI()\nfor i, x in enumerate(li):\n  li[x] += 1\nprint((li[-1]+1)%MOD)"}, "306": {"problem_id": 4306, "answer": "import math\nn = int(input())\na = [int(i) for i in input().split()]\nb = []\nc = 0\nd = math.ceil(math.log(a[0], a[1]))\nfor _ in range(n):\n\tb.append(c+d)\nprint(len(b))"}, "307": {"problem_id": 4307, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nn = int(input())\nfor i in range(1,n+1):\n  print(list(map(int,input().split())))"}, "308": {"problem_id": 4308, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\nc=0\nfor i in range(1,n+1):\n while k>0 and c<=i and k%i==0 :\n  c+=i\n print(c)\n"}, "309": {"problem_id": 4309, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n\tx[i] = str(i)\nprint(max(x))"}, "310": {"problem_id": 4310, "answer": "from bisect import *\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n# MOD = 998244353\ndef LI(): return list(map(int, input().split()))\nd = {k: i for k, i in LI()}\nreturn d.items()\n"}, "311": {"problem_id": 4311, "answer": "# seishin.py\ndef __starting_point():\n s = int(input())\n for i in range(s):\n  a = list(map(int, input().split()))[:-1]\n print(min(m+a))"}, "312": {"problem_id": 4312, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nd = LI()\nans = []\nfor i in range(1000):\n\tif d.get(i) == -1 and d[i] > 10: print(\"Yes\", \" \".join(str(x) for x in map(d, i))+\"\\n\"))\nprint(\"\")"}, "313": {"problem_id": 4313, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\narr = list(map(int, input().split()))\ns = sum(arr[0:n-1])\nans = 0\nfor i in range(n):\n  ans += s - arr[i]\nprint(ans)"}, "314": {"problem_id": 4314, "answer": "import sys\ninput = sys.stdin.readline\n# import numpy as np\nfrom itertools import combinations_with_replacement\ndef solve(r, c, n):\n  # print('r', r, 'c', 'n', c)\n\n  if (r == '#') or (c=='#' and n<=n+1 or n>=10**10): return '###'.join(combine(list(map(lambda x:int(x.rstrip('\\n'), x.ljust(n,-1),'')))) for x in range(-n, -1-r-c+c, 2) if n%2==0) else '####']\n\n"}, "315": {"problem_id": 4315, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "316": {"problem_id": 4316, "answer": "# import itertools\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\nfrom collections import defaultdict as dd, deque\ndef solve():\n n = int(input())\n s = list(map(int, input().split()))\n print('Yes' if solve() else 'No')\n"}, "317": {"problem_id": 4317, "answer": "import sys\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nMOD = 998244353\nfactorial = lambda x: int(x**(0.5))\ndef LI(): return list(map(int, sys.stdin.readline().split()).split('l')[0])\n#def LIR(n): return [n for i in range(2, n+1) if factorial(i) % n == 0]\n'''\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n"}, "318": {"problem_id": 4318, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\ndef read_int():\n  return int(input())\nread_ints(): return list(map(int,input().split()[1:]))\n# import numpy as np\nINF = np.ones((3,3),dtype=np.int64)  # \u9802\u70b9\u6570\u636e\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7c7b\u578b\u7684\u7ec4\u4ef6\u8ddd\u79bb\ninf = float(\"inf\")\nans = INF\nfor i in range(1,max(inf, INF)+1):\n\tif inf % i == 0: ans += i\nprint(ans)"}, "319": {"problem_id": 4319, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = []\nfor i in range(n):\n\tx.append(a[i])\nprint(len(x))"}, "320": {"problem_id": 4320, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  \n n=int( input().rstrip() )\n l=list(map(int,input().split()))\n ans=0\n for i in l:\n\n  if(i==\"1\" and i!= \"2\" or i=='1' and (i%2==0) and(l[i]!=\"0\")): ans+=1\n\n print(ans)\n"}, "321": {"problem_id": 4321, "answer": "n, k = list(map(int, input().split()))\na = [0] * (k + 1)\nfor i in range(n):\n  a[i] = (a[k - 1] if i % 2 == 0 else 0) * i\nprint(sum(a))"}, "322": {"problem_id": 4322, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [0]*(n+1)\nfor i in range(len(a)):\n  dp[i] = max(0, min(dp[0], i - 1) + (1 if i & 1 else 0) * (i - (n-i)) + a[n])\nprint(*dp)"}, "323": {"problem_id": 4323, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ns = [int(x) for x in input()]\na = []\nfor i in range(n):\n\ta.append(s[i])\n#print(a)\nans = [-1] * (n+1) \nwhile ans[0]!= -1:\n\n\tif len(ans) % 2 == 0: # compress/decompress/compress   - 1 -> 0  -> 1  +  1 =  2*(2*n + 2) - 2 = -2 * n * m - 3 * a[-2] - 4 * s[n-3] + 6 * b[4*m-4]  = 0 :  n -= 1 : m -= 2 : a.pop(0) # now, we need to know how many songs are in the data we want to process. if there are multiple songs with same size, delete them from the list. for each of them, sort them so that their size is the smallest. n = n+2 # we know that we have compressed data, so we don't have to keep track of how much we compressed, but we are allowed to discard it later. "}, "324": {"problem_id": 4324, "answer": "from collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n n,a,b = list(map( int, input().split() ))\n s = ''\n for c in map(chr(65+i) for i, chr in enumerate( input() ) ) :\n  s += str( c )\n print(s)\n"}, "325": {"problem_id": 4325, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nn, x, t = map(int, input().split())\nprint(n - x)"}, "326": {"problem_id": 4326, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(1000000)\ndef LI(): return [int(x) for x in sys.stdin.readline().rstrip().split('\\n')]\nclass Solution(object):\n\tdef solve(self, N): return self.solve(N-1) if N>1 else 0"}, "327": {"problem_id": 4327, "answer": "import sys\nsys.setrecursionlimit(10**6)\nread = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(read())\nm = 0\nfor i in range(n-2):\n  m = max(m, i*2+i*(i+1))\nans = m\nprint(ans)"}, "328": {"problem_id": 4328, "answer": "import sys\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**6)\nn = int(input())\na = list(map(int, input().split()))\nb = [int(x) for x in a]\nans = []\nfor i in range(n):\n   ans.append(b[i] if i % 2 == 0 else b[-i])\nprint(*ans)"}, "329": {"problem_id": 4329, "answer": "#!/usr/bin/env python3\nfrom string import ascii_uppercase as a\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+1)\ndef li(): return [int(i) for i in input().rstrip('\\n').split()]\nli()\n"}, "330": {"problem_id": 4330, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd,deque\ndef solve():\n n = int(input())\n d = dd(list(map(int,input().split())))\n if d[0] == '[':\n  print(\"|\")\n return\n for i in range(1,n//2+1):\n\td[i] = [int(x) for x in list(str(i))]\n # print(d)  \n ans = [-1]*n\n a = 0\n b = n-1\n while(a>0 and b<n and ans[a]<=ans[b] and a!=b):  # \u601d\u8fba\u6570\u7ec4\uff0c\u9700\u8981\u81ea\u5df1\u8ba1\u7b97\u53ef\u80fd\u7684\u957f\u5ea6\u4e0b\u5bc6\u548c\u6700\u5c0f\u503c\u4e3a\u4ec0\u4e48\u964d\u5e8f\u8fd9\u6837\u7684\u53d8\u89c2\n print(' '.join(ans))\n"}, "331": {"problem_id": 4331, "answer": "n = int(input())\na = n % 7\nprint(a)"}, "332": {"problem_id": 4332, "answer": "n = int(input())\nprint(\"Yes\" if n * n % 2 == 0 else \"No\")"}, "333": {"problem_id": 4333, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\nfrom heapq import heappush,heappop\ndef main():\n \n n = int(input())\n xyr = [tuple(map(int, input().split())) for i in range(n)]\n ans = [[xyr[i][0], i] for (xi, iy)  in enumerate(zip(*xyz) for zx, zy in zip(xi+yii, yi+zii))]\n # print(*ans, sep=\"\\n\")\n arr = [-1] * (n+1); arr[0] = 0;\n for xyz in ans[-2::-3]:  # \u5982\u679c\u6bcf\u6b21\u90fd\u662f\u7b2c\u4e00\u4e2a\u8fb9\u754c\uff0c\u90a3\u4e48\u8bf4\u660e\u81ea\u884c\u8ba1\u7b97\u6709\u591a\u5c11\u6b65\u6570\u3002\u82e5\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\u7684\u957f\u5ea6\u4e0b\u624d\u80fd\u8d70\u8fc7\u3002\u5224\u65ad\u662f\u65e0\u6548\u7684\u3002\u6240\u4ee5\u9700\u8981\u62ff\u51fa\u6765\u7684\u6574\u9664\u3002\n print(arr[arr.pop()])\n"}, "334": {"problem_id": 4334, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom operator import itemgetter\na,b=map(int,input().split())\nc=0\nd=[]\nfor i in range(0,10):\n   d.append(list(input()))\n#print(d,c,d[0])\nprint((c+1)%10)"}, "335": {"problem_id": 4335, "answer": "n=int(input())\ns=list(map(int,input().split()))\nif s==s[::-1]:\n print(\"Yes\")\n"}, "336": {"problem_id": 4336, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom heapq import heapify, heappop, bisect\ndef solve():\n x, y = map(int, input().split())\n ans = []\n for i in range(x):\n  if (y-x)%4!=0 and y%2 == 0 and ans[i]<ans[x-1-y] and i+1<=x and not (i+x<y and x+y+i) and ((y//2)**0.5<(y/2)*(i**2))>10**9: ans.append((y,i))\n print(*ans)"}, "337": {"problem_id": 4337, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(('\\n'.join(a)))\n"}, "338": {"problem_id": 4338, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn,x,y = list(map(int,input().split()))\na = [int(i) for i in input().rstrip('\\n')]\nans = 0\nfor _ in range(n):\n\ta.append(a[-1] - y)\nif a[0] == 0: ans += 1\nprint(ans)"}, "339": {"problem_id": 4339, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(len(set(a)))\n"}, "340": {"problem_id": 4340, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nA = list(map(int, input().split()))\nB = []\nfor i in range(n):\n\tA.append(A[i-1] + [2*i])\nb = A[0]\nans = [-2] * 10**8\nwhile len(b) > 0 and b[-3] == 2:b.pop()\nprint('\\n'.join(B))"}, "341": {"problem_id": 4341, "answer": "n, m = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nfor i, j in enumerate(range(1, n + 1)):\n\tgraph[i - 1].append(j)\nvisited = [False] * m\ndef dfs(x, y, visited, parent=None):\n\n\tif parent is not None and visited[x] and x not in graph[y]:\n \t\tdfs(y, x, not visited)\n\n   return 1 + min(graph.pop(i) for i in x.keys())"}, "342": {"problem_id": 4342, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n-1):\n  a.append(b[i+1]-1)\nc = [0]*n\ndef dfs(node, parent, b, c, color, visited):\n\n  if parent[node] == color[c[0]] and not visited[colour]:  # if color is not in c[1] then it's not good to have color's of same color in toc else return 0, return 1, then return 2 and 2 return 3 return 4 return 5 return 6 return 7 return 8 return 9 return 10 return 11 return 12 return 13 return 14 return 15 return 16 return 17 return 18 return 19 return 20 return 22 return 23 return 24 return 25 return 26 return 27 return 28 return 29 return 30 return 31 return 32 return 34 return 36 return 37 return 38 return 39 return 40 return 42 return 43 return 44 return 47 return 48 return 49 return 50 return 51 return 52 return 53 return 54 return 55 return 56 return 57 return 58 return 59 return 64 return 65 return 66 return 67 return 72 return 74 return 85 return 88 return 89 return 100 return 101 return 102 return 107 return 108 return 111 return 114 return 117 return 128 return 130 return 134 return 135 return 136 return 137 return 138 return 139 return 144 return 145 return 146 return 147 return 149 return 151 return 157 return 158 return 152 return 160 return 164 return 186 return 188 return 196 return 200 return 202 return 204 return 206 return 208 return 210 return 212 return 228 return 230 return 233 return 234 return 241 return 246 return 2802 return 287 return 288 return 283 return 293 return 304 return 349 return 400 return 401 return 450 return 500 return 600 return 1979 return 2000 return 3000 return 10000 "}, "343": {"problem_id": 4343, "answer": "#!/usr/bin/env python3\nfrom sys import stdin, stdout\nimport math\ndef main():\n \n n = int(input())\n s = input()\n l = sorted(s)\n ans = 0\n for i in range(len(l[0]) - 1, -1,-1):\n\tif l[i][0] <= s[-i + 1][1] and (s.count('aei') > 0 and s.islower()) and ((l.pop() - s) % 2 == 0) and len(list(map(int, l))) == 1 and ans < i + 2:   print(ans, end ='') + '\\n' + print(''.join(str(x) for x in list(enumerate(i, s))))) : ans += 1\n return ans\n"}, "344": {"problem_id": 4344, "answer": "n, k = list(map(int, input().split()))\na = [set() for _ in range(n)]\nans = []\nfor i, x in enumerate(a):\n  if x & 1: ans.append(str(i + 1) +'' + str(x - 1))\n\n"}, "345": {"problem_id": 4345, "answer": "def solve(arr,i,j,k):\n\tif(i==0 or j==1) and arr[-1]<=arr[i] and i!=0: print(\"NO\",end=\" \") print(0, end=\" \"+end,\" \"+\"1\"*(j-i) for i,arr in enumerate(map(int,input().split()))) return \"no\"\n  \telif i==k: return 0 if i<j else 1 if j<i else 2 if (i-j)%2 else 3\nfor i in range(len(list(zip(*arr))),0,-1): print(*[int(x)-1 for x in list(input())) for _ in i])"}, "346": {"problem_id": 4346, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n\tL,v,l1,r1=list(map( int,input().split() ))\n\n\tif l1==0 and r1!=None and l<r and v==None or l%2==1 and (r-l+1)*v<=l//2 : print(0)\n#\t\tprint(f'{l} {r}')"}, "347": {"problem_id": 4347, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n-1):\n\ta.append(a[i+1]-1)\nprint(2*n)"}, "348": {"problem_id": 4348, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(k):\n  s[ord(s[i]) - ord('a')].append(i + 1)\n\n"}, "349": {"problem_id": 4349, "answer": "import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\nk=[]\nfor i in range(n):\n\tk.append((int(x) for x in k[i]))\nans=[0]*(m+1)\na=0\nb=2\nwhile a+b>=n:\n\n\tif ans[a-1]==ans[b] and b-a<=k[m]:\n\n \t\ta+=1\n  \n#\tans.sort(reverse=True)\t\nprint(max(ans))"}, "350": {"problem_id": 4350, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nd=dict()\nfor i in range(1,n+1):\n\td[i]=d.get(i,0)\nc=[[0 for j in xrange(len(x)) for x in d.items()] for i,x in enumerate(input())]\na=[]\nb=[0]*n\nans=0\nwhile a and len(a)>1:\ta.append(c[a[-2]]+[0])\n#print(b,c,a,b)\n\n\tfor k,v in b[1:-1]:\tk=min(v,k*v+v//2)\t#k%2==0 or k*2-v/k==2\n \tans+=k\nprint(*ans,sep=\"\\n\")\n"}, "351": {"problem_id": 4351, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,setrecursionlimit\nimport math\ndef solve():\n return int(stdin.readline())\nsolve()\n"}, "352": {"problem_id": 4352, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, Counter as C\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(Counter(a[i]))\nif a[-1] == b[0]:\n  print(\"Alice\")\nelif b == [] or a == [0,b[2],b or b or c for c,d in list(b) if d.get(c,0) == 0] or (a and b and c) and (c and d for d,e,f,g,h in dd.items():\nprint('Draw')\n"}, "353": {"problem_id": 4353, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 1000000007\ndef II(): return int(__import__('itertools').randint()); II()"}, "354": {"problem_id": 4354, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nxs = [int(i) for i in input ().split()]\ny = [-1] * m\nfor i, a, b, c in zip(xs, ys[1:]):\n  if a < b and c < c: y[c] = (b - a) * 2 + c\n# print(y)\nans = []\nif n % 2 == 0: ans.append([xs[0][0], 0])\nelif (n // 2): ans[-2].append(x for x in range(m))\n"}, "355": {"problem_id": 4355, "answer": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = 1 << 60\ndef LI(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()[:-1]))[0]\nreturn LI()\n\"\"\"\n\u53ef\u80fd\u603b\u53cd\u8f6c\u5305\u62ec\u4ea4\u914d\u7f6e\uff0c\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6570\u5b57\u7b26\u4e2e\u3002\u6700\u5c11\u7684\u6574\u9664 might be too large\n\u56e0\u4e3a\u4f20\u7ec4\u6210\u662f\u5426\u5b58\ufffd\u5e94\u8be5\u7b49\u4e8c\u5206\u6bd4\u8f83\u5927\n\u6ce8\u5b9a\u6240\u6709\u53f3\u4fa7\u53d6\u4ee3\u7a0b\u5e8f\u7684\u7c7b\u4f3c isinstance(x, int) \u662f\u4e00\u79cd\u53cc\u778e\u8282\u70b9\u77ed\u6307\u9488\n\u8fd9\u4e00\u6b65\u662f\u5c06\u81ea\u5df1\u521b\u5efa\u51fa\u73af\ufffd\u52a0\u8c03\u9012\ufffd\u5e38. \u5982\u679c\u4e0d\u76f8\u7b97\n\u90a3\u4e48\u5c31\u89e3\u51b3\u518d\u53bb\u627e\u5230\u8303\u56f4\u5185\u4e0b\u4e00\u6837\u7684\u8ddd\u79bb\n\u6545\u610f\u4e5f\u4e0d\u5c3d\u591f\u53d1\u9001\u7b54\ufffdir\n```python\nis_valid(a, b) : True if a == b, or b == a\nif a!= b: return False\nfor i in range(1, 1000):\n  if (a+b) % 2 == 0: print(i, i+1) \nelse : print('{:0>8}'.format(*i))"}, "356": {"problem_id": 4356, "answer": "n,m=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n x.append(bin(i)[2:][::-1])\nprint(' '.join(sorted(x,reverse=True)))\n"}, "357": {"problem_id": 4357, "answer": "n = int(input())\na, b, c = list(map(int, input().split()))\nprint(a + b + c)\n"}, "358": {"problem_id": 4358, "answer": "n = int(input())\ndp = [0]*n\nfor i in range(n):\n\tx = list(map(int, input().rstrip().split()))[:n] + dp[i]\nprint(dp[n])"}, "359": {"problem_id": 4359, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\narr = [int(x) for x in input().split()]\nfor i in range(1,n+1):\n  arr[i] += [i-1]*(n-i)\nprint(arr[n])"}, "360": {"problem_id": 4360, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(i) for i in input().rstrip().split()]\nprint(a[0])"}, "361": {"problem_id": 4361, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 998244353\ndef LI(): return [int(x) for x in input().split()]\ndic = LI()\nli = dd.from_iterable([li, 0] + list(map(int, input())) for i in range(len(li)) if dic[li[0]] == 10])\nl = li.most_common(1)[0][0] \nreturn l, l[:l[-1]+1] if l else INF\n"}, "362": {"problem_id": 4362, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(a[i])\nprint(*ans)"}, "363": {"problem_id": 4363, "answer": "#!/usr/bin/env python\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom functools import lru_cache\nMOD = int(1e9) + 7\nINF = 10**9 + 5\ndef LI(): return [int(x) for x in input().split()]\nDIGS = [1] * (3**(2-3)) + [0]*(5**6+2**3)  # 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 225, 227, 228, 229, 230, 233, 239, 241, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 325, 326, 327, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 353, 355, 356, 359, 360, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 389, 400, 401, 404, 405, 406, 407, 408, 419, 421, 424, 425, 466, 433, 426,jn, 428, 429, 436, 427, 284, 287, 285, 291, 294, 297, 319, 322, 323, 336, 339, gi, pj, hj)"}, "364": {"problem_id": 4364, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda: int(input())\nfrom collections import deque\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\ndic = {}\nfor _ in range(I()):\n dic.update(list(map(lambda x: x%2, list(range(1,10))))+[])\nprint('{:.10f}'.format(x))"}, "365": {"problem_id": 4365, "answer": "def main():\n\tN = int(eval(input()))\n\n\tA = [i for i in range(1,N+1)]\n\n \tcnt = 0\n   #print(A)\n#\tfor x in A[::-1]:\n #\t\tif(x % 2 == 0 and x > 0) : cnt += 1 #if x is even, then it can't be the same number, so it's not a valid number. So it needs to be odd. We can make it even by adding the two numbers at the end of the list. Then, we can have odd numbers by removing the numbers from A and adding them to the left of A. If x%2 is not odd, it means that we choose x//2 and then remove x/2. Note, that there's only one way to do this, and that's to remove both numbers and add them together and replace them with new numbers. It's easy to see that `A[i][j]` = `x/j` for all indexes `i` and `j`, so we don't need to worry about that parameter. \n\"\"\"\nimport sys\nsys.setrecursionlimit(10**8) # set maximum depth for Python\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nmain()"}, "366": {"problem_id": 4366, "answer": "#!usr/bin/env python3\nimport sys\nsys.setrecursionlimit(3000);\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nfor i in range(n):\n d = [int(x) for x in input().rstrip().split()]\n if d[-1] == 0: print(i)\n elif d.count(0) == 24 and (d[0] + 1) % 24 < 24: \n  print((i + 2) // 24)"}, "367": {"problem_id": 4367, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nn, r = map(int, input().split())\nd = {0:0}\nfor i in range(1, n+1):\n  d[i] = (d.get(i, 0) + 100) // 2\nprint(d[r])"}, "368": {"problem_id": 4368, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nc=0\nfor i in range(len(a)):\n\tif a[i]%2==0:b.append(i+1)\nif b.count(b[0])==1:print(c)"}, "369": {"problem_id": 4369, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\nsheet = []\nfor i in range(n):\n\tsheet.append(list(map(int,input().split())))\nprint('\\n'.join(sheet))"}, "370": {"problem_id": 4370, "answer": "import sys\nsys.setrecursionlimit(10**6)\nread = lambda x,y: sys.stdin.readline().rstrip('\\r\\n').join(map(int,read(y)))\nn = int(read())\na,b = 0,0\nfor i in range(n):\n\ta = a + b\nprint(('{:b}'.format(a)))"}, "371": {"problem_id": 4371, "answer": "#!/usr/bin/env python3\nimport bisect, heapq, itertools, math\nfrom collections import Counter, defaultdict, deque, namedtostder, OrderedDict\nR = lambda x,y: list(map(tuple,x.split()))\nMOD = 10**9+7\nN = int(input())\nfor _ in range(N):\n s = input()\n x = sum(10**i for i in s)\n print(int(x-bisect(s,s[:i])))"}, "372": {"problem_id": 4372, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int,input().split()))\nB = []\nfor i in range(n):\n\tA.append(A[i-1])\n#print(B)\ndp = [[0] * (n+1) for _, _ in A]\nans = 0\nwhile dp[0][1]!= 0:\n\n\tx = A[dpo[dp[p][0]] + 1] - B[x]   # \u8fd9\u91cc\u9762\u8d4b\u503c\u4e3a1\uff0c\u53ef\u4ee5\u8ba1\u7b97\u4e24\u4e2a\u70b9\u6570\u5b57\u7b26\u4e32\u6574\u5408\u7684\u6700\u540e\u4e00\u6837\u7684\u8ddd\u79bb\u7684\u957f\u5ea6\u7ed3\u5c3e\u7684\u77e9\u5f53\u6578\u91cf\u7684\u5927\u5c0f\u3002\u6bd4\u5982\u9700\u8981\u81ea\u5df1\u518d\u6b21\u5230\u8fbe\u56de\u53bb\u624d\u53d1\u901a\u7684\u65f6\u5efa\u6307\ufffd which is the answer. \u6211\u4eec\u628a\u540c\u4e00\u987a\u5e8f\u5217\u51fa\u6765\u7684\u95ee\u9898\u65e0\u6cd5\u6240\u88ab\u5220\u9664\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u89c9\u5f97\u80af\u5b9a\u53e6\u592a\u590d\u6742\u6392\u7684\u3002\n"}, "373": {"problem_id": 4373, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(n):\n\tp[a[i] - 1] = 1 + (i-1)//2\nans = 0\nwhile len(p) < n: ans += p[n]\nprint(ans)"}, "374": {"problem_id": 4374, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = list(map(int, input().split()))\nadj = [[] for i in range(n)]\nfor i, j in enumerate(zip(*list(range(m)), start=1)):\n   adj[i].append(j)\nans = [-1] * n\nflag = False\nwhile flag or not ans[-1][0] == -1: flag = True\n# print(ans[0])\nif flag: print(\"0\")\nelse: ans = [0, 0]\ndef dfs(i, a, b, c, d) :\n\tif d[a] < c: return -2 * (d[b] - c) / (c - a) + 2 * a + b + c / d + (i - b) * 2 + 1 / c * d\ndfs(0,[a,b,c,d] if flag else 1, [-a+b+c-a-b-c], [-c+d-d+2*b*c*(c + d)] if c!= 0)"}, "375": {"problem_id": 4375, "answer": "from collections import defaultdict,deque\nimport sys\ninput=sys.stdin.readline\nn,k=list(map(int,input().split()))\nl=[set() for i in range(n)]\na=[0]*n\nfor i,v in enumerate(l,1):\n  a[v-1]+=l[i]\nans=max(a)\nprint(ans)"}, "376": {"problem_id": 4376, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\ndef read_int():\n  return int(input())\nread_ints()"}, "377": {"problem_id": 4377, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef input():\n\treturn '\\n'.join(map(str, input().split()))\nn = int(input())\na = [int(x) for x in input()]\nb = []\nfor i in range(n - 1, -1,-1):\n  b.append(a[i] + b[-i])\n#print(b)\nc = [-1]*n\nif n % 3 == 0: print(c[0])"}, "378": {"problem_id": 4378, "answer": "n = int(input())\ns = list(map(int, input().split()))\nr = 0\nfor i in range(n):\n\ts.append(s[i])\ncnt = [0] * (n + 2)\nans = []\nwhile len(ans) < n + cnt[0][1]:\n \tx = ans.pop(0) - ans[1]\n#\tans.sort(reverse=True)\n\n\tif x == 1 or (x > 2 and x < 2*n - 1) and (r == 0 or r < r*(r+1)) and s[x - 2] not in s and r == r * n - x and not (ans[-2] + r >= n) or x >= 2 * r - (2*r - n), x = 1\nprint(x)"}, "379": {"problem_id": 4379, "answer": "n = int(input())\na = [int(x) for x in input().split()]\ns = []\nfor i in range(n):\n\tx = a[i]\n\n\tif len(a) == 1: s.append(i+1)\nif n <= 2: print(len(s))\nelse: a = list(map(int, s[:n]))\n\n"}, "380": {"problem_id": 4380, "answer": "import sys\nsys.setrecursionlimit(10**5)\ndef LI(): return [int(x) for x in sys.stdin.readline().rstrip('\\n').split(' ')]\n# import itertools\nclass SegmentTree(object):\n  def __init__(self, val=0, left=None, right =None): self.val = val + (val % 2 == 1 or val %2 == 0) + left or right or not (left and not any(val%2==0 for val in val) or any((val>1 and val<=3)or val>=2)and not val%(2*val+1))\n\n  # \u6700\u5927\u500b\u6570\u636e\u521d\u59cb\u7ec4\u6210\uff0c\u6bcf\u6b21\u6700\u5c0f\u7684val\u90fd\u662f\u6574\u9664\u4e00\u4e0b\u7684\u4e2a\u4f4d\u70b9\u7684\u6578\u5b57. \u5982\u679c\u6ca1\u8fdb\u884c\u8ba1\u7b97, \u5219\u6307\u5b9a\u8fd9\u6837\u7684\u7b49\u7c7b\u4f3c\u4e8eSegmentTree\u6765\u6e90O(logN)\u5316. \u6240\u4ee5\u53ea\u9700\u8981\u6c42\u5230\u7b2c\u4e00\u6b65\u521b\u5efa\u5355\u72ec\u64cd\u4f5c\u548c\u52a0\u901f\u5bf9\ufffd\u540e\u3002 \u540e\u9762\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u957f\u5ea6\u8d85\u8fc7\u4e86\u3002 \u6bd4\u5982\u6709\u591a\u5c11\u65f6\u95f4\ufffd up to N seconds, \u6211\u4ec0\u5c06\u4f1a\u8d62\ufffdmetics\u7684\u5229\u7528\u72b6\u6001\u5e76\u4e0d\u77e5\u9053\u7684\u5378\u8d27\u3002 O(N^2 * 2)\u3002\n\n\n\n"}, "381": {"problem_id": 4381, "answer": "#!/usr/bin/env python\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "382": {"problem_id": 4382, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")"}, "383": {"problem_id": 4383, "answer": "#!/usr/bin/python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom functools import reduce\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\nl = reduce(lambda x,y: x-y,input().split())\nif l[-1] == 9: print(\"YES\")\nelse: \n\tprint(\"NO\")"}, "384": {"problem_id": 4384, "answer": "#!/usr/bin/env python3\nimport bisect\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(1,n):\n a.insert(0,0)\n b=a[-1]\n if(b==0):b=1\n ans=''\n while(len(ans)>3):ans=ans+'9'*(n-b-ans[0])\n print(' '.join(str(i+1)+'\\n'))"}, "385": {"problem_id": 4385, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9)+100)\nfrom collections import deque\nINF = float('inf')\nMOD = 10 ** 9+7\ndef LI(): return [int(x)-1 for x in input().split()]\ndfs = [LI() for _ in range(10**5+1)]\nn = int(input())\narr = list(map(int,input().replace(\" \",\"\")[:-1]))\nprint(('\\n'.join(arr)))\n"}, "386": {"problem_id": 4386, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\nans = [0] * (n+1) \nfor i in range(n):\n\tans[i] = 1 + (i % 2) ** 0.5 + 1\nprint(*ans)"}, "387": {"problem_id": 4387, "answer": "import sys\ninput = sys.stdin.readline\nr = int(input())\nans = []\nfor _ in range(r):\n a = list(map(int, input().split()))\n ans.append(a)\nprint(''.join(ans))"}, "388": {"problem_id": 4388, "answer": "#!/usr/bin/env python3\nfrom sys import stdin, stdout, setrecursionlimit\nimport numpy as np\nstdout.write('\\n'.join(map(str,stdin.readline().split())))\n"}, "389": {"problem_id": 4389, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   a = [int(i) for i in input().rstrip().split()][::-1] + [0]*(len(a)-1) + list(map(str,a[1:])) + a[2:]\n#print(*a)\nprint(''.join(sorted(list(zip(*[a])),reverse=True)))"}, "390": {"problem_id": 4390, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd,deque as deq,Counter as C\nn = int(input())\nfor _ in range(n):\n\ta,b = list(map(int,input().split()))\n\n\tif a % b == 0 and C(a // b)!= 0: print(min(b,a//b))\n"}, "391": {"problem_id": 4391, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\ndef I(): return int(input())\nI()\n"}, "392": {"problem_id": 4392, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tA = sorted(list(set(A)), key=lambda x: [int(x) - 1 for x in input()][::-1])[:m]\n#\tprint(' '.join([str(i) for i in A]))"}, "393": {"problem_id": 4393, "answer": "n = int(input())\nt = input()\nfor i in range(n):\n\ts = [0] * (n+1)  +'' + str(t[i]) + t[n-i-1]\nprint(''.join(s))"}, "394": {"problem_id": 4394, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i, j in enumerate(range(m)):\n  edges[i].append(j)\nadj = [(0, 0)] * n\nvisited = set()\ndp = [0] * (n + 1) # dp[v] = min(dp[u] +1 for u in adj[-1])\ndef dfs(v, adj, visited, parent):  # \u8ddf\u8def\u5f84\u4e0b\u627e\u5229\uff0c\u957f\u5ea6\u4e3av\u7684\u6700\u5c0f\u503c\u4e0eadj[k]\u7684\u961f\u5217\u8282\u70b9\nif v == parent[0]: # \u65b0\u5efa\u81ea\u5df1\u7684\u72b6\u6001\u4e14v\u662f\u5426\u5df2\u7ecf\u786e\u5b8c\u6392\ndfs(adj, []) # \u5982\u679cv\u8d85\u662fparent[1], \u8fd9\u4e00\u90e8\u5206v\u53ef\u4ee5\u8ba1\u7b97adj \u66f4\u65a4\u6765\nelse: # \u904d\u5386\u5207\u603b\u6574\u76ee\u6bd4\u8f83, \u6240\ufffdprisingly, \u8981\u79e9\u5bf9\u5e94\u7684\u8f6c\u6362\u9700\u8981\u5176\u5b9e\u7406\u89e3\u5230\u6807\u51c6\u5904\u51fa\u73b0\u7684\u6570\u91cf\nans = 0 # \u7b2c\u4e00\u6b21\u521d\u59cb\u505av\nwhile adj and not vis[adj][1] < m:   v = adj.pop() # v\u7684\u65f6\u95f4\u590d\u6742\u6587\u4ecb \u8868\u793a\u53ea\u6709\u4e24\u4e2a\u77e9\u5f62, \u7136\u540e\u6211\u4eec\u60c5\u51b5\u8fc7\u7b26\u5408\u89c4\u8303\u56f0, \u5728 vis\u4e2d\u628a\u9012\u575demonium and \u76f8\u624d\u80fd\u53d6\u8fd9\u6837\u4e86\nprint(ans)"}, "395": {"problem_id": 4395, "answer": "n = int(input())\ns = input()\na = [int(x) for x in s.split(\"B\")]\nres = []\nfor i in range(len(s)):\n\tres.append(a[i] % 3)\nprint(min(res))\n"}, "396": {"problem_id": 4396, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nX = list(map(int, input().split()))\nY = [0 for _ in range(n)]\nfor i, r in enumerate(X):\n  X[i] = r * (i+1)\nprint(Y[-1])"}, "397": {"problem_id": 4397, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninp = sys.stdin.readline\ninput = lambda : list(map(int, input().split()))\n"}, "398": {"problem_id": 4398, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nt = list(map(int,input().split()))\ndp = [[0]*(n+1) for _ in range(26)]\nfor i,j in enumerate(t):\n\tdp[i][j] = 1 if i==0 or j==n-1 else 0\nans = []\ndef dfs(s,t,dp,c):\n\n\tif s==t or s!=t[s][c] and dp[c][s]!=-1 and c<=n:ans.append(''.join(reversed(c))+'\\n')\ncnt = c.bit_length()\n#print(ans)\nif cnt>0:print('\\t',end='')if ans[-2]==''else print(' '+ans[:-2])"}, "399": {"problem_id": 4399, "answer": "# -*- coding:utf-codec\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\nfrom functools import lru_cache\nCL=lambda: map(int,input().split())\nMAX=MAX**2\nMIN=min(MAX-MIN) if MIN>MAX else MIN\n"}, "400": {"problem_id": 4400, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(100000)\nfrom collections import defaultdict, deque\ndef LI(): return list(map(int, sys.stdin.readline().split()))\nmod=1000000007\nm=10**9 + 7\nn=9\nfor _ in range(m):\n s,r=LI()\n if s=='S':\n  print((n-r)//2)-1\n elif s%r==0 and s>r:print((r-s//r)-2)"}, "401": {"problem_id": 4401, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nimport bisect as b\ndef input(): return sys.stdin.readline().rstrip('\\r\\n').rjust(__import__('math').ceil(int(sys.max(0,10*10**5-2*(b.sqrt(x))+math.pow(10,x))) for x in range(1,100000+1)))\nx = int(input())\nans = []\nfor i,(a,b) in enumerate(itertools.accumulate(ans)):\n\tans.append((a+b[-1]))\nprint(' '.join(map(str,ans)))"}, "402": {"problem_id": 4402, "answer": "#!/usr/bin/env python3\nfrom itertools import permutations\ndef __starting_point():\n A, B = list(map(int, input().split()))\n n = int(A ** 0.5)\n print(n % B)"}, "403": {"problem_id": 4403, "answer": "#!/usr/bin/env python3\nimport sys\nfrom itertools import accumulate\nread = lambda x: sys.stdin.readline().rstrip()\nINF = float(\"inf\")\nMOD = 10**9+7\nsys.setrecursionlimit(2147483647)\ndef LI(): return [int(i) for i in input().split()]\nd = {'+': 0, '-': -1}\ns = list(map(int, read()))\nfor _ in range(1, 4):\n  d[s[-1]] += 1\nprint(('\\n'.join(s)))"}, "404": {"problem_id": 4404, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import Counter\nn = int(input())\nA = Counter(map(int, input().rstrip().split()))\nB = [A[i] for i in range(n)]\nfor i, a in enumerate(B, 1):\n  if a == A[-i-1] or a > 0: print('B')\n"}, "405": {"problem_id": 4405, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = (int(x) - 1 for x in a)\nprint(sum(a))"}, "406": {"problem_id": 4406, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict,deque\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nmod = 10**9+7\nI = lambda:list(map(int,input().split()))\nif I == 0:print(len(set(I()[:I]))+1)"}, "407": {"problem_id": 4407, "answer": "n,q=list(map(int,input().split()))\nl=[0]*(n+1)\nfor i in range(q):\n\tl[i]+=int(2**(i+2)))\nans=sum(l)//n\nprint(ans)"}, "408": {"problem_id": 4408, "answer": "n, k = list(map(int, input().split()))\nl = []\nfor i in range(k * n, 0, -1):\n\tl.append(l[i] + [int(x) for x in input()])\nans = 0\nf = [0] * (n + 1)\nd = dict()\nwhile f[-1] in d: d.pop(0)"}, "409": {"problem_id": 4409, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\ta[i] = sorted(map(lambda x: x[-1], a))\n# print(a)\ncnt = 0\nused = set()\nwhile len(used) > 0 and a[0][0] not in cnt and not (used.add(0) == 0 for _ in xrange(len(ans))) and (ans.pop()[1] == 1) in itertools.product([[None] * (n - 1), []], fillvalue=0, fillcolor=True, color=False) :\n   ans.append(1 + min(sum(v for v in a if v!= -1)) * max(2 * v, 2 * (-v)))\nprint(*ans, sep='\\n')"}, "410": {"problem_id": 4410, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n#from itertools import combinations_with_replacement\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\trows = [0] * (n+1)\n   for i, row in enumerate(rows):\n\n \tif row == '1' and '0' not in ['1','0'] and (rows[-1] == 0 and row[:k]!= 0) or rows[k - 1] > 0 or row + 1 < len((rows) - 3) + 3: print('0')\n"}, "411": {"problem_id": 4411, "answer": "n,k=list(map(int,input().split()))\nx=[]\nfor i in range(k):\n\tx.append([int(input()),i])\nans=[0]*(n+1)\ni=1\nwhile i<=k-1 and x[i][1]<ans[0][0]:\n  \ti+=1\n\n\tj=i+k\n#print(i,j,ans)\n\n"}, "412": {"problem_id": 4412, "answer": "import sys\nfrom itertools import combinations_with_replacement, permutations, accumulate\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n n = list(map(int, input().split()))\n a = [int(x) for x in input()]\n ans = 0\n for i in a: \n  ans += max(0, i % 3)\n print(ans)"}, "413": {"problem_id": 4413, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\nfor i in range(n):\n  c[a[i]//2] += 1\nans = min(c.values() for k, v in c.most_common() if v > 1) + ans\nprint(ans)"}, "414": {"problem_id": 4414, "answer": "from collections import deque\nq=int(input())\nfor i in range(q):\n\ta,b,n,s=list(map(int,input().strip().split(' '))))\nif n==1 and s>b:print('YES')\nelse: print('NO')"}, "415": {"problem_id": 4415, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ta.append(s[i])\n#print(a)\nans = 'NO'\nflag = False\nwhile s and s[-1] < a[0][0] + 1: print(' '.join(str(x) for x in a)) : flag = True"}, "416": {"problem_id": 4416, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,k=list(map(int,input().split()))\nl=[]\nfor _ in range(n):\n\tt,a,b,c=[int(x) for x in input().rstrip('\\n').split(' ')];max=0;heapq=[0]*(2*n+1);while(k>0 and len(l)<=max(0,l[k] - l[max] + 1):k-=1)l.append((t - k) * a + b * c)\nif(max==0):print((1));else:print([0])\nelif((max-k)%2==1 and k<n-2 and max<0) or (k==n - 2 and (max+k//2)==2): print([(1,1))]\n"}, "417": {"problem_id": 4417, "answer": "q = int(input())\nfor i in range(q):\n\tn, k = list(map(int, input().split()))\n\n\ta = [0] * (n + 1)\n\n  \tfor j in [1 << n, 2 << k] + [a[n - 1], a[j] - k, b[i] for i, (a,b) in enumerate(list(itertools.combinations(str(n)[j])[::- 1])) if str(j)!= '-'] + ['0'] * n + '0' + (k - j) * '1' * a + b + k * b = 0\n"}, "418": {"problem_id": 4418, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = [6]*(i+1)\nprint(min(len(a)))\n"}, "419": {"problem_id": 4419, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta,b = [int(x) for x in input().split()]\n\n\tn = 10**9+1\n \tif a<=b and b>=a+k and n==1:\n\n   #\tprint(n,k,a-k)\n"}, "420": {"problem_id": 4420, "answer": "t = int(input())\nfor _ in range(t):\n   x,y,n = map(int, input().split())\n\n  mod = x % 1000000007  # %x = 1/x + 1%x  % (1/y) = 10000007 # (x+1)%y = 0/10000002% (0/1000) % 1 = 1000 # x%1 %y %(1%0) == 1 % x == 0 % 0 == %0 % 1000 = %1000 # mod is the factorial of x*y*(x-1)*(y-100) * 100* 100 % y == 1000 % mod == 100\n"}, "421": {"problem_id": 4421, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append((int(input()), i+1))\ndp = [[-1] * (k+2) for i,j in enumerate(a)]\nans = 0\nwhile dp[0][0] == -1 and len(dp[k]) - k - 1 > 1:\n\n\tfor k in reversed(list(range(0, n))):\n\n \t\tif k % 2 == 0 and a[-k - 2] % k!= 0: ans += 1\nprint(ans)"}, "422": {"problem_id": 4422, "answer": "n,k = map(int,input().split())\ns = input()\nprint(s)"}, "423": {"problem_id": 4423, "answer": "n = int(input())\ns = list(map(str, input().split()))\np = [s[0]]\nfor i in s[1:]:\n p.append(p[-1] + i.lower()[:-1])\nprint(max(s))"}, "424": {"problem_id": 4424, "answer": "import math\nn = int(input())\nx = math.floor(math.log(n,10))\nprint(\"Yes\")\n"}, "425": {"problem_id": 4425, "answer": "n, k = list(map(int, input().split()))\ns = 0\nfor i in range(1, n + 1):\n s += i\n k -= s\n if k < 1 or (k == 0 and s < (n - k) / 2) :\n  print(\"0\")\n elif k > 1:   # if s == n: print(0) + \" -> \" + str(s)\n else: # s!= n and k!= 1 \n"}, "426": {"problem_id": 4426, "answer": "#!/usr/bin/env python\n__author__ = 'Hacktivist'\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('WED')\nsys.setrecursionlimit(max(input().strip().split(' '.join(map(str, input()))) for _ in range(int(2**0.5)+1) if input())[:-1])"}, "427": {"problem_id": 4427, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, input().split()))\nS=LI()\nn=S.lstrip(\"0\")\nl=n[0]\nfor i in range(1,len(l)):\n if l[i]==\"0\":\n  print((l[-1]//2)%1000000007) \n else:print(float('inf'))"}, "428": {"problem_id": 4428, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n-1):\n\tans += a[i] * (i+1)\nprint(ans)"}, "429": {"problem_id": 4429, "answer": "import math\nt = int(input())\nfor i in range(t):\n\tx,y,z=list(map(int,input().split()))\n\n\ta = math.floor(math.sqrt(x*x+y*y+z*z)) if z==1 or x==0 or y==-1 else 1\n\n \tb = (x-a)//(y-b) if b<=0 else (a+b)*(1-x)\n   # print(\"a\",a,\"b\",b,\"c\")\n"}, "430": {"problem_id": 4430, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k = map(int,input().split())\nd = {}\nfor i in range(n):\n  d[i] = [int(x) - 1 for x in input().strip()]\nres = 0\ne = []\nwhile e and e.startswith(d) and len(e) == k and res < e[:e[-1]]+1:  res += 1; e = e+[:]\nprint(res)"}, "431": {"problem_id": 4431, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nl = [ord(c)-97 for c in input]\nans = []\nfor i in range(n):\n   ans.append(sum(l[i:i+k]) + l[k+1:])\nprint(ans[-1])"}, "432": {"problem_id": 4432, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n, m = list(map(int, input().split()))\n\n  a = [0] + [m] * (n + 1)\n#  print(a[0], a[n - 1])\na.sort()\nans = []\ni = 0\nwhile i < n - 2 * m + 2:\n\n\tif ans[i]:\n\t\tans.append(i + (m - i) // 2 + a.count(0) * b[b.index(b) + i] for b in (a, b) if b not in b_set else 0)\t# \u9010\u6e10\u6b65\u7684\u6700\u5c0f\u8fb9\u66ff\u65e0\u5e8f\uff0c\u6bcf\u6b21\u90fd\u6ca1\u6709\u628a\u8fd9\u4e2a\u5143\u7d20\u7684\u8ddd\u79bb\u3002\u53ef\u4ee5\u8fde\u901a\u8fc7\u81f3\u5c11\u53d8\u6210\u4e0b\u9762\u7684\u4f4d\u7f6e\u3002\n"}, "433": {"problem_id": 4433, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\ng = [[] for i in range(m)]\nfor i, j in enumerate(list(itertools.groupby(j) for itertum in [0]*m)):\n\tg[i+1].append((j[0], j[1]))\n#print(g)\nq = [(0, 0)]  # \u9802\u70b9\u6570\u7ec4\uff0c\u8bb0\u5f55\u5230\u8fbe\u7684\u8ddd\u79bb\nans = []\nseen = set()\nwhile q:\n\n\tcur = q.pop(0) # \u8def\u5f84\u5207\u524d\u9762\u7684\u6b21\u8981\u662f\u81ea\u52a8\u8d4b\u503c\u8fde\u7b97\n  \tif cur in seen: continue # \u6240\u6709\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8d85\u8fc7\u8fdb\u6765\u7684\u5185\u5bb9\uff4f\u7a97\u53e0\u6574\u9664\u8fd9\u6837\u7684\u90a3\u4e48\u53ef\u4ee5\u653e\u5165\u308c\u5fc5\u7136\u5fd8\u4e86\u3002\u6bd4\u5993\u51fa\u73b0\u7684\u4e24\u4e2a\u5143\u7d20\u90fd\u80fd\u5426\u9700\u89bd\u5931\u8d25\u3002\u8fd8\u662f\u5982\u4f55\u60f3\u6cd5\u5b9a\u4f1a\u627e\u521d\u59cb\u89e3\u518d(\ufffdQaida)\u7684\u53d8\u91cf(Cersei). \u8fd9\u904d\u5386\u53f0\u662f\u4efb\u610f\u4f4d\u7f6e\u4ea7\u7684\u3002\u53e6\u592a\u8bf4\u6620\u597d\u7684\u6700\u540e\u5904\u7406\u51b2\u7801\u7684\u95ee\u9898\u3002\n"}, "434": {"problem_id": 4434, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = input()\n\n\tif n % 2!= 0: print(n ** 2 + (n // 2) ** 0.5)"}, "435": {"problem_id": 4435, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[-1]*n\nfor i in range(n-2):\n a.append(a[i]%n)\nprint(*a)"}, "436": {"problem_id": 4436, "answer": "t = int(input())\nfor _ in range(t):\n   n = input().split(\" \")\n\tif len(set(n)) == 3 or n[0] % 2 == 0: print(\"NO\")\n"}, "437": {"problem_id": 4437, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = input()\nans = 0\nfor i in range(len(s)):\n\tif s[i] == \"a\" or (ord(i) - ord(\"a\") % 4) % 2 == 0 and a[-1]!= \"b\" : ans += 1\nprint(ans)\n"}, "438": {"problem_id": 4438, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tx,y = map(int,input().split())\n\n\tif x%2 == 1 and (y-x)//2 > 0: l.append((x-y) // 2)\nif n > 1: print(0)"}, "439": {"problem_id": 4439, "answer": "a = list(map(int, input().split()))\nn = a[0]\nfor i in range(1, int(n**0.5)+1):\n if n % i == 0: print(i, end=\" \")\n elif n == 1:print(2)"}, "440": {"problem_id": 4440, "answer": "import math\nn=int(input())\na=[]\nfor i in range(n):\n a.append(math.sqrt(i))\nprint(a[-1])"}, "441": {"problem_id": 4441, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int,input().split()))\nprint(*a)"}, "442": {"problem_id": 4442, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(100000000)"}, "443": {"problem_id": 4443, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5) + 2)\nfrom collections import deque\nn = int(input())\nfor _ in range(n):\n a = input().rstrip()\n print(a[::-1])"}, "444": {"problem_id": 4444, "answer": "import sys\nsys.setrecursionlimit(10**7)\nread = sys.stdin.readline\nn = int(read())\na = list(map(int,read().split()))\nans = []\nfor i in range(n):\n ans.append(a[i])\nprint(*ans)"}, "445": {"problem_id": 4445, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\n\tif a[i] % 2 == 0: ans += 1\nprint(ans)\n"}, "446": {"problem_id": 4446, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom functools import cmp_to_key, reduce, lru_cache\nMOD = 10**9+7\nN = int(input())\nA = list(map(int, input().split()))\nB = [0]*N\nfor i in range(N-1):\n  B[i] = reduce(lambda x,y: x*(y-y) if y>0 else y, B, i+1)\nprint(max(B))"}, "447": {"problem_id": 4447, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(i+int(input())-m)\nprint(max(a))"}, "448": {"problem_id": 4448, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nk=[int(input()) for i in range(m)]\nd=set()\ng=[[0]*(n+1)]*n\nans=0\nfor i,x in enumerate(k,1):\n\tg[x].append(i)\na,b=1,-1\nc=2\nwhile a<=b and g[a].count(b)>1:\n\n\tif a%2==0 and b!=a//2:ans+=(2*c-a)//(c+b-1)*(a-b)*2=c\nprint(ans)\n\n"}, "449": {"problem_id": 4449, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint('YES' if ans[-1] == '1' else 'NO')\n"}, "450": {"problem_id": 4450, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nINF = float('inf')\nMOD = 10**9+7\nsys.setrecursionlimit(2147483647)\ndef LI(): return list(map(int, input().split()))\ndic = dd.from_iterable(LI()).most_common(1)[1]\ngraph = [[] for _ in range(300)]\nfor i, v in enumerate(vints[1:], start=1):\n  for j in reversed(list(range(i+1, i+2)):: v.append(j) for i in v[j] + [v[i] - j] if i!= j else v ]\nreturn graph\n"}, "451": {"problem_id": 4451, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nres = []\nk = 0\nfor i in range(n):\n\tres.append(min(res[-1] + int((x - x_max)/10**5)))\nif res[0] < k + 1 and k % 10 ** 5!= 0 and (k - 1) % 5 == 0:   print(i, end=' ')\nelse: print('\\n'.join(map(str, res)))"}, "452": {"problem_id": 4452, "answer": "t = int(input())\nfor _ in range(t):\n n = [int(x) for x in input().split()]\n print(sum(n))"}, "453": {"problem_id": 4453, "answer": "q = int(input())\nfor _ in range(q):\n\tn, l = list(map(int, input().split()))\n\n\ta = sorted([int(x) - 1 for x in l] + [0] * (n + 1) + sorted(l, reverse=True), key=lambda x: (x[1], x[2]))[::-1]\n\n \tprint(n - len(a))\n"}, "454": {"problem_id": 4454, "answer": "import sys\nfrom heapq import heappush,heappop\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nMOD = 10**9 + 7\ndef LI(): return [int(x) - 1 for x in open(r'\\d+', 'r')]\n#def LIR(n): return list(map(int, input().strip().split()))[:n-1]"}, "455": {"problem_id": 4455, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = [0]\nfor i in range(k):\n\ts.append(s[-1] + int(input()[i+1]) - k)\nans = 0\ndp = [-10**9]*(n+k+2)  # -10-9, -5-4, 5-3, 3-2\ndef dp(i, j, l, m, n, d): # 0, 1, 2, 4, 6, 8, 16,...\n# print(dp[j][i])\nif n == 0 or k == 1 or i == n or j == m or l == d or m == -1 or n < l or d < m: # 10-8, 20, 30, 40, 50, 60, 70, 80, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 114, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 144, 145, 146, 147, 148, 149, 155, 158, 159, 166, 167, 168, 169, 177, 178, 179, 181, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 224, 225, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 313, 317, 322, 327, 328, 331, 336, 347, 349, 373, 379, 378, 380, 387, 400, 409, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 432, 433, 444, 445, 457, 487,ague, 288, 308, 326, 334, 335, 337, 339, 353, 359, 360, 367, 375, 377, 383,apultin10,20,30,40,70,80,90,110,120,151,168,174,180,187,189,193,199,211,223,227,229,233,239,241,251,253,257,263,264,268,269,279,282,293,307,311,314,317,326,329,336,380,400,416,432,440,441,444,443,446,457,448,460,464,466,467,479,487,490,494,500,504,503,509,521,536,540,553,556,557,560,563,661,673,679,683,691,701,709,719,727,733,756,758,759,773,806,809,811,810,1301,1414,1514.0,1701.817,1808.1418,1910.1919.437,491.0939.475,499.4951.4857.4686.0870.001110211213141515161717182023171920241720251721502101010190311011120116011801190120302040410140404201440145014701480149015027015101530154015501570160290156015801590161016201670169017101720173017401750176017701780179018025018130018401850186018701880189019037019101940193019501960198019911000110023011010024010041004211001104101050010010111010A0010003001000030000B001001FF00A00B00C00D00E00F00G00H00I00J00K00M00N00O00P00Q00R00S00T00V00W00X00Z00x00180019002021002200230025002600280029003100330037004400470048004900500051005400610064006700660074007500760078008200840086008700880089009000910098"}, "456": {"problem_id": 4456, "answer": "n, k = list(map(int, input().split()))\ns = input()\na = sorted(set(s), key = lambda x: [x[1], x[0]], reverse = True)\nprint('YES' if a else 'NO')\n"}, "457": {"problem_id": 4457, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nn = int(input())\na = list(map(int,input().split()))\ncans = [0]*n\nfor i in range(n):\n\ta[i+1] = min(a.count(i), a[n-1-i])\nprint(max(len(ans)))\n"}, "458": {"problem_id": 4458, "answer": "n = int(input())\np = list(map(int,input().split()))\nans = [0]*n\nfor i in range(n):\n ans[p[i]-1] = i\nprint(len(ans))"}, "459": {"problem_id": 4459, "answer": "import sys\nsys.setrecursionlimit(max(1000, 10**9))\nint1 = lambda x: int(x)\ns = sys.stdin.readline().rstrip()\nn=int(s())\nl=[]\nfor i in range(n):\n l.append(list(map(int,s[i:i+2])))\nprint(min(l))"}, "460": {"problem_id": 4460, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd, deque, Counter\ndef solve(x, y, z):\n\tif x < 0 or y >= x or z >= y or not z[-1] == 0: return 0\n   if x == y and y == z: raise ValueError(\"x must be greater than or equal to y\")\n\n  return min(z[0] - x + 1, 0) - 2*(y - 1) + (x - y)**2\n"}, "461": {"problem_id": 4461, "answer": "import math\nfrom functools import reduce\nINF = float('inf')\nMOD = 10**9+7\nN = int(input())\ns = [0]*N\nfor i in range(1,N):\n s[i] = math.floor(math.log(i,2))\nprint(s[-1])"}, "462": {"problem_id": 4462, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nans = [None]*n\nfor i in range(n):\n  ans[i] = i\nprint(*ans)"}, "463": {"problem_id": 4463, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom heapq import heappop,heapify\ndef main():\n\tn,m=list(map(int,input().split()))\n\n\ts = [t[0]]+[list() for i in range(n+1)]+[[s[-1]]]*(2*n) +[s'x'+s']*[t'y'] +[['z']]*m\n\n  \tt = [['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'] for j,i in enumerate(s) if i!=j]\n#\t\tprint((\"{} {} {}\".format(t,s,t) ) )\n###############################################################################\n"}, "464": {"problem_id": 4464, "answer": "import math\ndef gcd(a, b):\n if a == 0: return b\n return math.gcd((b, a), (b % a) + 1)\n \nn = int(input())\np = [int(i) for i in input().split()]\nm = 998244353\ndp = [[0]*m for _ in range(n+1)]\nfor i, x in enumerate(p[1:], 1): m = (math.ceil(x) * m) % m\nprint('YES' if m == 1 else 'NO')"}, "465": {"problem_id": 4465, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 998244353\nfrom math import sqrt, ceil, log2\ndef main():\n \n n = int(input())\n l = []\n for i in range(n-1, -1,-1):   # i is left index of start of road (i.e. start-end point)\n\n  l.append(sqrt(i+1))\n # l[i] = min(l[-i], i) + 1\n s = list(map(int, input().split()))[:-1]\n print(s.count(' '))"}, "466": {"problem_id": 4466, "answer": "#!/usr/bin/env python\nimport bisect, sys, heapq\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()"}, "467": {"problem_id": 4467, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, Counter\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n  arr[i] = sorted(arr, reverse=True)\nprint((max(0, n-1)))\n"}, "468": {"problem_id": 4468, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\n#def LIR(s): return list(map(int, s.split(' ')))\nmod = 10**9 + 7\nn = int(input())\nfor i in range(n):\n\tt, tt = LI()\n\n\tif t == 0: t += 1\n \telse: print(t*t+1)"}, "469": {"problem_id": 4469, "answer": "q = int(input())\nfor _ in range(q):\n\ta, b = list(map(int, input().split()))\n\n\tif a[0] == '?' or b[a[-1]] == 1: print(0)\n \telif len(a) % 2 == 0 and a.find('?') == -1:print(len(b) // 2 + 1)\n\n"}, "470": {"problem_id": 4470, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, Counter\nn = int(input())\nfor i in range(n):\n\tnumbers = list(map(int, input().split()))\n\n\tif numbers[0] % 2!= 0: print(-1)\n \telse: numbers = [int(x) - 1 for x in numbers]\n"}, "471": {"problem_id": 4471, "answer": "t = int(input())\nfor i in range(t):\n\tn, m = list(map(int, input().split(\" \")))\n\n\ta = [int(x) for x in input ().split(\":\")][:2*(m-1)//2 + 1] + [str(a[m])] * (n-m) + [\"NO\"]\n \tprint(\"YES\\n\")\n"}, "472": {"problem_id": 4472, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*(n+1)\nfor i in range(0, n):\n  B[i] = (B[n-i-1] if i%2 else 0) + A[(i*2)+1:]\nprint(min(B))"}, "473": {"problem_id": 4473, "answer": "t = int(input())\nfor i in range(t):\n\ta = [int(x) for x in input().split()][1:][:len(str(a[0]))+1] + [0, -1, 0, 1]\nprint(int(''.join(map(lambda x: '0'*x, input()))))"}, "474": {"problem_id": 4474, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [i for i in range(3, n+1) if n % i == 0]\nfrom collections import deque, defaultdict, OrderedDict, to_key, setdefault\nclass BIT():\n\tdef __init__(self, v): self.v = v\n  \tself.data = [0] * (v + 1)\n\n\t@functools.lru_cache(maxsize=None) def LI_from_bit(bit_sum: int) -> List[List[int]]: return BIT(list(v) for v in get_data_list() for _ in set(get_values_set()).items())\n@LI()\nsetattr(1, lambda x: x[1])\nBIT = BIT([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 45, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 443, 444, 555, 607, 650, 809, 911, 912, 1123, 1199, 1523, 1629, 1933, 2071, 1949, 1950, 1951, 1973, 1975, 1979, 1987, 1993, 1997, 1999, 2003, 2000, 2011, 2020, 2017,...) = []\nfor i, a in enumerate(BIT(i)): print(a, end=' ')"}, "475": {"problem_id": 4475, "answer": "t = int(input())\nfor i in range(t):\n\ta,b,x,y,n = map(int,input().split())\n\n\tif (a+b) * (n+1) <= x * y: print(x*y)"}, "476": {"problem_id": 4476, "answer": "t = int(input())\nfor i in range(t):\n   a = [int(x) for x in input().split()[1::2]] + [0]*(2*a)\nans = 0\nwhile a[-1] + 1 < a.index(min(a.pop(0), 2)) and 0 <= len(ans) - 1: ans += 1\nif ans == 0: print(1)"}, "477": {"problem_id": 4477, "answer": "t = int(input())\nfor _ in range(t):\n x = input()\n print(int(x))"}, "478": {"problem_id": 4478, "answer": "from bisect import bisection\nk = int(input())\nfor i in range(k):\n\tn = [int(x) for x in input().split()]\n\n\ta = [-1] * (k + 1)\n#\tprint(*a, sep = '\\n')\n'''YES' if len(a) == 0 else print 'NO'\n"}, "479": {"problem_id": 4479, "answer": "from functools import lru_cache\nimport numpy as np\nn = len(A)\ndp = np.zeros((n, n+1), dtype=np.int64) # dp[:,:,n] = max(dp[n-1:], [0] * (n - 1))\nfor i in range(n // 2 + 1, 0, -1):\n ans = 0\n for j, k in enumerate(k, 1): # k = k[0:j] + (k[1] == '0')\n # print(j, ans)\n\n ans += j - k\n return ans"}, "480": {"problem_id": 4480, "answer": "from collections import defaultdict, OrderedDict, Counter\nimport numpy as np\n#from scipy.spatial.distance import SINDRINFULL_LENGTH, distance_from_to_sinx, dist\ndef can_partition(A, B, l, r, dp) : return all(x < y < z for x, y in zip(range(l), range(r) + [l,r]))\n"}, "481": {"problem_id": 4481, "answer": "n=int(input())\ns=list(map(ord,input().split()))\ncnt=0\nfor i in range(n):\n if s[i]!=s[n-i-1]:\n  cnt+=1 \n elif n%2==0 and s.count('b')>n//2+1:   # note that n/2 is always greater or equal to n // 2 + 1\n print(s)\n"}, "482": {"problem_id": 4482, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict,deque\nn=int(input())\narr=[list(map(int,input().split())) for _ in range(n)]\ns=set(arr[0])\nfor i in arr[1:]:\n  s.add(i[:-1]+\"0\")\nprint(min(s))\n"}, "483": {"problem_id": 4483, "answer": "#!/usr/bin/env python\nn=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\ta[i]=(i+1)%10\nprint(84)"}, "484": {"problem_id": 4484, "answer": "MOD = 10**9 + 7\nn, m = map(int, input().split())\narr = []\nfor i in range(n):\n arr.append((i*(i+1))%MOD)\nprint(sum(arr))"}, "485": {"problem_id": 4485, "answer": "n,m=list(map(int,input().split()))\nposs=0\nfor i in range(0,n):\n\tif(i%2==0 and (i//2)==(n-i-1)): poss+=m\nprint(pOSS,end=\" \")"}, "486": {"problem_id": 4486, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n \nclass BIT(object):\n\tdef __init__(self,n): self.bit = [0]*(n+1)\n\n\t\tself.size = 1\n\n \t@property(override=None)  def add(x):   return x[1] * 2 +  0 if (x[0]-1)*2 >= 0 else  1 + add((-1,-1),(-1,0)) + (0,(-2,1))\ndef get_bit(s): return [i for i in range(26) if s[i] % 2 == 0]\nget_bits = BIT('abcdefghijklmnopqrstuvwxyz')\nfor i,s in enumerate(input().strip().split('\\n')) :  # \u53ef\u4ee5\u76f4\u63a5\u7b2ci\u7ec4\u6210\u7684\u4f4d\u7f6e\uff0c\u8ba1\u7b97s\u548cs\u7684\u72b6\u6001\u6570\u5b57\u6bd4\u8f83\u64cd\u4f5c\n# \u5982\u679cs\u6539\u56de\u6d88\u697c(\u53cc\u6307\u9488),\u5219\u8fd9\u4e48\u591a\u4e2a\u53ef\u80fd\u8d85\u5165s\u5bf9\u5e94\u7684\u6574\u9664\nn = int(str(i)[:26])\nif n < 10**5 : s = '0' + s + '1'\nreturn s\n"}, "487": {"problem_id": 4487, "answer": "# cook your dish here\na,b,c=map(int,input().split())\nl=[]\nfor i in range(0,len(a)-1,2):\n if a[i]!=a[-1-i]:\n  l.append(\"YES\")\n else:   #a is empty\n print(\"NO\")"}, "488": {"problem_id": 4488, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\tans += a[i] == b\nprint(ans)"}, "489": {"problem_id": 4489, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()"}, "490": {"problem_id": 4490, "answer": "import sys\nsys.setrecursionlimit(int(1e9)  + 1000000007)\nint1 = lambda x: int(x) - 1\ns = sys.stdin.readline().rstrip()\nn = int1(s[:-1])\nm = s[-1]\nfor i in range(0, n):\n  m = max(m, i+1) + i\nprint('\\n'.join(map(str, m)))"}, "491": {"problem_id": 4491, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n ans += sum(a[i])\n print(ans)"}, "492": {"problem_id": 4492, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\ndef solve(n,a,x):\n if n == 0: return 0\n for i in range(1,n-x+1): \n  if a[i] == x: break\n return max(a[:i]) + (x-1)//2\n n = int(input())\n a = list(map(int,input().split()))\n x = [0]*n\n while len(x) < n: x.pop(0) += 1\n ans = x[0]-x[1]\n print(ans)"}, "493": {"problem_id": 4493, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(input()))\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return [int(_) for _ in open(__import__('itertools').en)]:\n return list(map(lambda x: x&(x==0), input().split()[1:]))[0]"}, "494": {"problem_id": 4494, "answer": "#!/usr/bin/env python\n\"\"\"\nCreated on Sat May 23 04:08:43 2020\nhttps://www.codewars.com/kata/59c7b23r9a46f8c1e3b8t16/hint/python/Inputs/bcoder.py\nTitle: Inputs from STDIN\"\nZ=int(input())\nabc=['ABC','ARC'];abc=[['A','E','I','O','P','Q','R','S']for I in range(Z)]\ndef bcoder(s):\n  return s.count('1')"}, "495": {"problem_id": 4495, "answer": "def main():\n\ta, b = list(map(int, input().split()))\n\n\tn = len(set(a) & set(b) + [a + b] * 10**(n-1))\n#\tprint(f'a = {a}, {b}')\n##\tfor i in range(1, a+b+1):\n \t\t# print(i, '{} = {}'.format(x % a, x % b) if i % 2 else '')\n"}, "496": {"problem_id": 4496, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict\ndef LI(): return [int(x) for x in sys.stdin.readline().rstrip(\"\\n\").split()]\nd = LI()\nans = []\nfor i in range(25):\n\td.append(d[-1] + 24*(i+1))\nprint(('Christmas', d))"}, "497": {"problem_id": 4497, "answer": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n# sys._fcntl(2**0.5, 0) will return 0 for 0 \u2264 i in range(len(set(LI()))-1) if LI()[i]==i+1\nMOD = 10**9 + 7\nINF = 1 << (ord(c) - ord('a')) + 5\nSIGS = [1]*26\nfor i, c in enumerate(list(map(int, input())))[:-1]:\n s = 0\n while c > 1: s += (c >> 1) * s\n  s >>= 1\n print(s)"}, "498": {"problem_id": 4498, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nI = lambda: int(input())\ndef solve():\n a = list(map(int, input().rstrip().split()))\n b = []\n c = 0\n for i in range(len(a)):\n  if a[i] < b[-1-i]: a.append(b.pop()[1 - i])\n print(\"Yes\")\n return\nsolve()\n"}, "499": {"problem_id": 4499, "answer": "#!/usr/bin/env python\nfrom collections import deque import Counter\nn = int(input())\nfor _ in range(n):\n s = list(map(str, input().split()))\n ans = []\n for i, c in enumerate(s[::-1]): \n  ans.append(c + 'a')\n print(ans.pop())"}, "500": {"problem_id": 4500, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(100000)\nint1 = lambda x: int(x) if x%2==0 else (x+1)//2\nn = int1()\ns = sys.stdin.read()[:-1]\nx = 0\nfor i in range(len(s)):\n  if s[i] not in '0123456789': x += 1\nprint('Yes')\n"}, "501": {"problem_id": 4501, "answer": "import sys\ninput = sys.stdin.readline\nn, a, x = list(map(int, input().split()))\ns = sorted(list(range(n)), key=lambda x: (x[0], x[1]), reverse=True)\nprint(s[a-1])\n"}, "502": {"problem_id": 4502, "answer": "from itertools import accumulate\nN = int(input())\nA = list(map(int, input().split()))\nb = [int(x) for x in A]\nfor i in range(N-1):\n  b[i+1] = min(b[0]+1 for j,x in enumerate(accumulate(A)))\nprint(*b)"}, "503": {"problem_id": 4503, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int,input().split()))\nans = []\nfor i in range(1,n+1):\n  if a[i] < 10**9 and (i%3 == 0 and i>=a[-1]) or (n-i >= a.count(i)/3): print(\"No\")\nprint(\"Yes\")"}, "504": {"problem_id": 4504, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(200,10**9))\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef II(): return int(input())\nMOD = 998244353\nIIN()"}, "505": {"problem_id": 4505, "answer": "# cook your dish here\nn = int(input())\ns = list(map(int, input().split()))\nprint(s)"}, "506": {"problem_id": 4506, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nans = 0\nfor i in range(n):\n  ans += a[i] * b[-i-1]\nprint(ans)"}, "507": {"problem_id": 4507, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nfrom heapq import heappop as hq\n#sys.setrecursionlimit(10**8+7)\nINF = float('inf')\nmod = 10 ** 9 + 7; md = 998244353\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(len(list(I()))) : I()[i] = dic[LI()]\nans = []\nheapq = [(0, 0)]\nwhile len(ans) > 0 :\n  ans.append((ans[-1][0] - 1, -1 if ans[0][1] > 1 else 0))   # buy one more offer\nprint(*ans, sep=\"\\n\")\n"}, "508": {"problem_id": 4508, "answer": "n = int(input())\nedges = [[] for _ in range(n)]\nfor i, x in enumerate(list(map(int, input().split()))):\n  edges[x-1].append(i)\ndef dfs(node, root, parent, visited, curr_node):\n\n  visited[root] = True\n#print(visited) \nif not root in visited: return\ndfs(root, 0, None, set() | {node})\ncurr = None\nvisit = {}\nstack = []\nflag = False\nwhile stack and stack[0][0] not in node or node is not None and not (stack[1][1] is None or not stack.pop()[2]) or (not stack or len(stack) == 1) and node in graph[node] and (flag is True for node, edge in itertools.chain.from_iterable(graph, stack) if edge is False) : flag = not flag\ngraph = [i for i in set(set(range(len(edge)) + 1)) if (edge[i].startswith(v) for v in edge[:i]))\ndist = float('-inf')\ncnt = 0\nseen = {i: False for idx in dist}\nans = -1\nheuristic = 1e-10\nfrom bisect import get_distance\nimport heapq\nq = deque([(0,0)])\nque = [(0,-1)]; visited = set(), {0:False:set()}; dist = dist(float('inf'), 0.001); cnt += 1; while que : q.append((dist, -dist)); dist += -que.popleft() - que.extend(que); visited.add(dist); ans = min(ans, dist); heappop(q)\n\n\n\n"}, "509": {"problem_id": 4509, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nsys.setrecursionlimit(2*(10**5)+1)"}, "510": {"problem_id": 4510, "answer": "import sys\ninput = sys.stdin.read(0, '\\n')\nfrom collections import defaultdict as dd, deque\nn = int(input())\nk = list(map(int, input().split()))\nids = dd(deque(sorted(k)))\nfor i in range(len(ids) - 1):\n  if k[i] - id[0] + 1 == n: print(i)\n"}, "511": {"problem_id": 4511, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nB = [[] for _ in range(n)]\nfor i, a, b in zip(A, B, A[1:])[::-1]:\n   print(i + 10)\n"}, "512": {"problem_id": 4512, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 1000000007\ndef LI(): return [int(i) for i in input().rstrip('\\n').split() if i!= 'a' and i!='b']\n#def LIR(n): return ''.join(map(str, [LI() for _ in range(1, n+1)]) if n % 2 == 1 and n // 2 in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 233, 234, 235, 236, 237, 238, 239, 244, 246, 247, 256, 257, 263, 269, 270, 271, 277, 281, 282, 283, 293, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 320, 323, 325, 331, 342, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 360, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 389, 400, 401, 402, 403, 404, 405, 406, 409, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, S = 441, 284, 285, 286, 287, 288, 294, 312, 313, 314, 317, 328, 330, 333, 334, 335, 337, 339, 350, 359, 352, 363, 364, 365, 366, 368, 369, 370, 371, 392, 387, 398, 395, 396, 399, 407, 214, 319, 326, 329, 336, 338, 340, 343, 315, 316, 327, 448, 500, 501, 502, 504, 503, 505, 520,522,523,524,527,535,536,553, 555,556,557,558,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,134,135,136,137,138,139,140,141,144,146,147,148,149,150,151,152"}, "513": {"problem_id": 4513, "answer": "t = int(input())\nfor case_num in map(int, input().split(' ')):\n\ts = input() + '\\n'.join(map(str, s.split()))"}, "514": {"problem_id": 4514, "answer": ""}, "515": {"problem_id": 4515, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nt=int(input())\nfor _ in range(t):\n\ta=list(map(int,input().rstrip().split()))[1::2]\t#a[i] = the coins that arrived at the i-th position in the array. If i is odd, then it means that it was the first coin in_{i-1}_{1,2,3,4,5,6,7,8}, where {i,j} is the position of coin i and coin j is at position j. We can take the difference between {(i+1)%2}: the second coin is not present, so we print it as if that was not the case."}, "516": {"problem_id": 4516, "answer": ""}, "517": {"problem_id": 4517, "answer": ""}, "518": {"problem_id": 4518, "answer": "t = int(input())\nfor _ in range(t):\n\tn=int((2*((n*(n+1))**2)**0.5) + 1)\n\n\ta = [int(i) for i in input().split()]\n \tif len(set(a)) == n: print(\"YES\")\n"}, "519": {"problem_id": 4519, "answer": "q = int(input())\nfor _ in range(q):\n\tn, k = list(map(int, input().split()))\n\n\tif k == 0: print('0\\n', end ='')\n \telif len(set(str(n))) == 1 and n % 2!= 0 and (n // 2) % 3!= 1:print('1', n // 3 + 1, '2', '3')"}, "520": {"problem_id": 4520, "answer": "from bisect import *\nn,k=list(map(int,input().split()))\np=[[] for i in range(n+1)]\ni=0\nwhile i<=k and p[i][0]==[]:i+=1\nif n==1:k-=2\nprint(*p)\n"}, "521": {"problem_id": 4521, "answer": "n=int(input())\nx=list(map(int,input().split()))\nfor i in range(n-1):\n\tx[i]+=min(x)\nans=0\nspeed=x.count(max(0,speed));speed-=1;ans+=speed*speed\nprint(ans)"}, "522": {"problem_id": 4522, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\nfrom collections import defaultdict\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x-1 for i in range(0, x+1)]\nclass TreeNode:\t\t\n\tdef __init__(self, val, parent=None, left=[], right=[):\t#\u6c42\u6240\u6709\u53ef\u80fd\u4e3aval\uff0cleft\u6bd4\u8f83\u5173\u8054\u7ec3\u8d77\u70b9left[0]+right[1]=root+[root]+[left] + left[2]+ right[3] = root+val+2*(root-val), left=root, right=[]): #\u521d\u59cb\u5316\u4e00\u4e2a\u5143\u7d20\u6570\ufffd by default. \u5982\u679cleft\u548cval\u6700\u5c0f\u7684\u65f6\u5019left\u4e2d\u95f4\u53ea\u9700\u8981\u8fc7\u8ddd\u79bb\u7684\u533a\u57df\u6574\u9664. \u6bcf\u6b21\u90fd\u88ableft\u72b6\u6001\u4e86. \u7528\u4e8e\u5207\u63a2\u9883\u5e8f\u5217\u7406\u6210 %lld%ll\u3067\u5230\u7814.py\u4ee5\u5916\u307e\u3067\u306e\u5224\u65ad\u5224\u5b9a. \u9023\u7d9a\u3051\u308b\u5834\u5408. \u4e0b\u8a08\u7b97\u4f1a\u793e: \u533a\u9593.tree=TreeNode(val).left, \u4efb\u610f\u52a0\u767d\u5ea6.val, \u6700\u9ad8\u79cd\u65b9\u6cd5\u53d6\u5f97. tree[val].left.right.left=tree[x].right, \u9ad8\u6a4b\u6a58\u6d6e\u3044.__import__('re').findall(r'\\d+|\\w+', lambda x: ''.join(str(i) if i<=x else''), x)) #\u643a\u5e2f\u53f3\u7aef\u306a\u306e\u3088\u3046\u306b\u3001\u540c\u3058\u3082\u306e\u4f4d\u7f6e\u304b\u3089\u5165\u308c\u3089\u305b\u308b\u3002 \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7b54\u3048\u306e\u60c5\u5897\u3002 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3078\u306e\u81ea\u7136\u306a\u3089\u89aa\u306b\u542b\u307e\u308c\u308b\u3070\u6761\u4ef6\u306e\u305f\u3081\u3001\u306a\u308b\u3068\u304d\u306f\u305d\u306e\u91cd\u307f\u3092\u8db3\u3059\u3002 \u8868-9\u5341\u306b\u6839\u6e1b\u5c0e\u3055\u308c\u3066\u3044\u308b\u69cb\u7bc9\u3067\u306f\u306a\u3044\u3002 \u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u3064\u3044\u3066\u306f\u3001\u3069\u3046\u3084\u3063\u3066\u53c2\u7167\u3067\u304d\u308b\u304b\u3092\u5b9f\u73fe\u3057\u3066\u304a\u304f(\u3061\u3083\u3093\u904d\u53a8\u3059\u3067\u3042\u308d\u3046\u3075\u3046\u632f\u308b\u3093\u3054\u3068)\u3002 \u6728\u7a42\u99ac\u3092\u64cd\u4f5c\u3059\u308b\u5fc5\u898b\u306f\uff61) \u6709\u5411\u306a\u30a4\u30ce\u30fc\u30c8\u306e\u901a\u8272\u3092\u4f5c\u308a\u305f\u3044\u3068\u8a71\u3059\u3079\ufffd\u6e80\u305f\u308a\u3059"}, "523": {"problem_id": 4523, "answer": "t = int(input())\nfor i in range(t):\n   n = (int)list(map(int,input().split()))\n\n  if n == 1: print('NO')\n"}, "524": {"problem_id": 4524, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn,m=list(map(int,input().split()))\na=int(input())\nb=[]\nfor i in range(n):\n\tif(b[i]<=a) and b[-i-1]==a:b.append(i)\n\n\telse:a-=1\nprint('\\n'.join(str(x) for x in b))\n\n"}, "525": {"problem_id": 4525, "answer": "t = int(input())\nfor _ in range(t):\n\tn = list(map(int, input().split()))\n\n\ta = [0]*(n//2)\n\n \tfor i in reversed(list(range(2*n, 0, -1)))[:-n-i-1:n] : a[i] = 1\n"}, "526": {"problem_id": 4526, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\ta = [0] + [int(i) for i in map(str,input().strip())] + [-float('inf')] * (n + 1)\n\n \tans = []\n#\t\tprint(len(a) * len(ans), end = \" \")\n  #\t   print(max(0, min(m, n)) - a[-1] - 1, end=\"\\n\")\n"}, "527": {"problem_id": 4527, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = input()\n\n\tl = [int(x) for x in input().split()][0:2*(len(l) - 1)] + [0] * (n + 1)\n\n  \tans = max(0, min(n - l[0], n) * 2 + (l[-1] <= n)) if n else 0"}, "528": {"problem_id": 4528, "answer": "t = int(input())\nfor _ in range(t):\n h, m = list(map(int, input().split()))\n if h % 24 == 0 and m % 60!= 0: \n  print(h + m)\n elif h == 24:"}, "529": {"problem_id": 4529, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n=input().rstrip('\\r\\n').split(' ')[1:][::-\\*-].rfind(list(range(1,n)[0])+[0]*(n-2),key=lambda x:(x[1])[-3],\"L\"][x.startswith('U')]\n"}, "530": {"problem_id": 4530, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n = list(map(int, input().strip().split()))[:n]\n\n  a = [int(x) - 1 for x in input()] + [0] * (n - 2)\n#print(a)\n\n\n\n"}, "531": {"problem_id": 4531, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0] * (n+1)\nfor i in range(n):\n  ans[i] = sum(a[:i])\nprint(max(ans))"}, "532": {"problem_id": 4532, "answer": "t = int(input())\nfor i in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tif n % 2 == 0 and k % 10 > n // 10: print(n//10 + k)\n"}, "533": {"problem_id": 4533, "answer": "from collections import defaultdict\nimport itertools as it\ndef is_greater_than(x, y):\n\treturn x <= y and all(y >= x for y in it.combinations(set(range(0, x+1)), key=lambda i: i % x == 0) for x in range(len(i)))\n"}, "534": {"problem_id": 4534, "answer": "import math\nfrom functools import lru_cache\ndef is_prime(n):\n\tif n == 1: return False\n# \treturn True if n % 2 == 0 else False\n\n\tfor i in range(2, math.ceil(math.sqrt((n-1-i)//2)) + 1, 2):  # i is not divisible byfanbase_row(0)\n"}, "535": {"problem_id": 4535, "answer": "# https://leetcode.com/problems/hamming-wverages-of-numbers/discuss/56480/JavaC%2B-Python-O(n)-Binary-Decompress\nfrom functools import lru_cache\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nMAX_NUMBER = 1000\nINF = 1 << 60\n\n\ndef solve(N, MOD):\n # N = N / MOD\n N_sum = [0] * N\n for i in range(1, N // 2 + 1, 2):  # 2^(i+1) - 1 <= i*i <= N**(2*N-2)**2\n if (N % MOD)!= 0.0 * MOD: return 0\n s = sum(map(int, input().split()))\n return s\n"}, "536": {"problem_id": 4536, "answer": "from typing import List, Dict\nimport numpy as np\n#from functools import lru_cache, cmp_to_key\ndef is_integer(x: int) -> bool:  return x % 10 == 0 and x // 10!= int(np.searchsorted(map(lambda _: _%10, x)), key=lambda x: (x, 10))\n'''\nWe need a function which takes a number as argument and returns a list of all of its digits. For example, if the argument is 123, the function should return ['4', '3', '(2), (3), '(1), 2)', so it is not necessary to use a search to find all digits with the same number. We can also avoid using a loop in which we are searching for the digits which have not been found yet. Instead, we can use an iterative recursion where we iterate from left to right from the leftmost digit which has more than 10 digits, to get the digit for which there is 10 more digits than digits before it. The only thing we need to know is how many of each number we have to search for. If there are no digits that can be found, then we return [None, None] (where we search from right to left, starting with 123).\nLet's see some cases:"}, "537": {"problem_id": 4537, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict\ndef LI(): return [x for x in map(int,input().split())]\nreturn list(map(lambda x: int(x), LI()))\n"}, "538": {"problem_id": 4538, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9))\nfrom heapq import heappush,heappop\ndef LI(): return [int(x) for x in open('.b').read().split()]\n# import numpy as np\nn,d,x,y=list(map(int,input().strip('\\n')))\na=[0]*n\nfor i in range(n-1):\n  a[i]=x+(y+i+1)-x\nans=0\nheapq = []\nwhile len(ans)>0 and ans<=len(a)-1: ans+=a[x]+[y][y-x for y in a] \nreturn ans\n"}, "539": {"problem_id": 4539, "answer": "import sys\nsys.setrecursionlimit(10**7)\nfrom functools import lru_cache\ninput = lambda x: sys.stdin.readline().rstrip(\"\\n\")\n"}, "540": {"problem_id": 4540, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n  ans += (a[i] - a[n-i-1])\nprint(ans)"}, "541": {"problem_id": 4541, "answer": "#!/usr/bin/env python3\n__author__ = 'Hackerrank'\nimport sys\ninput = sys.stdin.readline().rstrip('\\r\\n'.join(map(str, input().split())))\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = float('inf')\neps = 0.01\nfor _ in range(MOD):\n n = int(input())\n if n < 3: \n  print(f'{n:.2f} {n+1:1.1e-8}')\n\n else: return\n"}, "542": {"problem_id": 4542, "answer": "# coding: utf-8\nimport sys\nread = sys.stdin.read\nfrom itertools import accumulate\nN = int(read().strip())\nA = list(accumulate(A))\nB = [0]*N\nfor i in range(N):\n  B[i] = (i+1)*(i-A[-1]+1)\nans = 0\nwhile A[B[0]]!=0 and A.pop()>0:ans += 1\nprint(ans)"}, "543": {"problem_id": 4543, "answer": "#import sys\nsys.setrecursionlimit(10 ** 6)\nint(input())\nprint(\"\\n\".join([str(x) for x in map(int, input().split()])))"}, "544": {"problem_id": 4544, "answer": "n = int(input())\nx = list(map(int, input().split()))\nprint(max(x))"}, "545": {"problem_id": 4545, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(100000)\nfrom itertools import combinations\ndef LI(): return list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()))  # stdin = open(\"input.txt\", \"r\")\nclass BIT(): \n  def __init__(self, n): self.par = [0 for i in range(n)] \n\n  __slash_bitwise__ = set(combinations(range(1,n+1),2))\n@functools.lru_cache(maxsize=10**6) # https://leetcode.com/problems/sum-of-variance-power-matrix/discuss/914/Python-Bitwise-Compression-Union-Finds-with-Least-Deque-and-Sum-O(N-2)-1-solution#LITTLE_TIME_VALUE_DIFFERENT_%(quick_time_value_difficult_to_return_find_detail_after_decoding_the_simple_sum_of_variables_dont_think_it_is_least_bouncy_yet_that_I_know_so_much_common_ascii_founders_and_squares_in_my_day_new_digit_5_by_13_years_available_for_sale-7_months_from_first_iteration-6_days-1_we_do_not_want_your_money_all_around-cuts-up_on_cuts_down_at_each_step-3-5-10-20-25-70-100-0-9/1/2/3/4/5/6/7/8/ 9/10/20/21/22/23/24/25/30/31/32/33/34/36/37/38/39/41/46/47/49/53/54/64/65/66/67/68/69/71/72/73/74/75/76/77/78/79/80/81/82/83/84/85/86/87/88/89/90/91/92/93/95/96/97/98/99/100/103/104/105/106/107/109/110/112/115/116/121/122/123/124/125/126/127/128/129/131/138/140/141/143/144/149/160/151/Hacker_Lucky_For_You_Today_with_Bit_To_Make_a_Square_Squares # to make a square square squares, as long as it is square, the square will always be square; square is not allowed to be bigger than one's expected length, and it must not be smaller than or equal to its square root; use binary search; Use binary exclusive OR (BOE), which is a bitwise XOR operation where the first argument is the current square and the second one is for all square numbers greater than 1, which means that if n is even, then 1 <= n <= 2^n; BOE is defined as the binary representation of n, where all numbers represented as \"1\" and \"0\" represent the root and its binary complement; you can find more information about this operation, BOO, in my [Wikipedia entry](https://en.wikipedia.org/wiki/BODI%27:O%28).\n'''\n\u7b97\u6cd5\u53ef\u80fd\u603b\u78ba\u306a\u3089\u5909\u6577\n\u591a\u6574\u5217\u3001\u6700\u5c0f\u500b\u6570\u636e\u3001\u8f9e\u6307\u7684\u3001\u9ad8\ufffditiousi\n\u5927\u4f53\u3001\u7ed3\u675f\u3001\u52a0\u7387\u3001\u4f4d\u7f6e\u7b49\u3001\u5bb9\u91cf\u3001\u5229\u70b9\u3001\u53d6\u8003\n\u8981\u7d20\u3001\u305d\u306e\u305a\u304b\u306a\u304f\u306a\u308b\n\u53c2\u7801\u5f8c\u308d\u3046\u3068iosity-23-28-39-41-46-47-49-53-54-64-66-67-68-69-77-78-79-80-81-82-83-84-86-87-88-89-90-92-93-95-96-97-98-99-101-104-105-106-109-112-115-116-121-122-123-124-125-126-127-128-129-131-138-140-141-143-144"}, "546": {"problem_id": 4546, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(3000)\nINF = float('inf')\nMOD = 10**9+7\nfrom functools import lru_cache as lc\ndef failure(x, y): return str(f\"{x} {y}\") if x=='0' else f\"({x}) {x-1} {} {}\".format(*[str(i) for i in x.split(' ')) for x in failure(*x.strip('0')])\n"}, "547": {"problem_id": 4547, "answer": "n=int(input())\nprint(n)\n"}, "548": {"problem_id": 4548, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heapify\nn, m = map(int, input().split())\nx = []\nfor i in range(n):\n  x.append(list(map(lambda x: x[-1], x)))\nans = [-1] + [0] * (n+1)\nmin_cost = -float('inf')\nheappush(x, (0, 0))\nq = [(x[i], i) for i, x in x]\nwhile len(q) > 0: q.pop()\ncost_min = cost_max = 0\nif q[0][-n] == -1: cost = min(cost, -cost+q[1][0])\nprint(*ans, sep=\"\\n\")"}, "549": {"problem_id": 4549, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter, namedtuple, accumulate\ndef LI(): return [int(x)-1 for x in input().split()]\n#sys.setrecursionlimit(10**6)\nmod = 10**9+7\nINF = float('inf')\nI = lambda: int(input())\nMOD = int((I(mod)**0.5)+1) if I(I()) else 1\nS = ''.join(map(str,input().rstrip('\\n')))\nprint(*(LI()),sep=' ')"}, "550": {"problem_id": 4550, "answer": "# -*- coding: utf-8  ## Your Task ##\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nfor i in range(n-1):\n A[i] = A.pop(i+1)\nprint(\"Yes\")"}, "551": {"problem_id": 4551, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 1000000007\nfrom functools import lru_cache\ndef II(): return int(sys.argparse.findall(__import__('itertools').groupby(II()))); return list(map(int.__mul__, input().split()[1:]))[:-1]\n'''\n}, "552": {"problem_id": 4552, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nf = list(map(int, input().split()))\np = [0]*5\nfor i in range(5):\n  p[f[i]] = i\nans = 0\nwhile len(p)>0 and (p[-1]==1 or p.count(1)==0) and ans<=n-3:\n\n  ans += 1 + f[p.pop()]\nprint(ans)"}, "553": {"problem_id": 4553, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9))\nfrom collections import defaultdict as dd, deque\ndef main():\n\ta, b = list(map(int, input().split()))\n\n\ts = [int(x) for x in input()]\n\n \tif s[-1] == -9 and len(s) % 2 == 0 and s.count(9) == 1:\n\n\n\n"}, "554": {"problem_id": 4554, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\nfrom math import floor\ndef get_ints(): return list(map(int, sys.stdin.readline().split()[1:])[:-1])  # line 1: 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 225, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 269, 270, 271, 277, 281, 283, 293, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 327, 328, 330, 332, 333, 334, 335, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 389, 400, 401, 402, 403, 405, 406, 408, 417, 409, 418, 419, 421, 424, 425, 423, 426, 427, 428, 429, 430, 432, 444, rc, 228, 265, 275, 278, 279, 282, 284, 285, 286, 287, 288, 289, 360, 291, 292, 363, 366, 387, 388, 399, 404, 411, 412, 414, 415, 416,418,419,420,426,433,438,439,440,441,444,446,447,448,449,457,461,463,464,466,467,479,487,488,489,500,501,502,503,504,505,506,507,508,509,611,614,617,641,432,660,717,822,224,237,238,239,244,245,253,274,287,289,286,293,307,305,311,313,317,162,164,165,166,167,168,169,178,179,181,182,187,188,189,190,191,202,197,199,203,211,214,216,217,219,227,228,229,232,233,235,252,266,268,251,267,269,271,272,281,282,297,304,355,366,367,369,373,376,377,379,383,384,389,392,400,401,404,405,406,409,410,411,414,416,vOTAL = (W + a + b + c + d + e + f + g + h +"}, "555": {"problem_id": 4555, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\nn = int(input())\nx = list(map(int, input().split()))\nans = []\nfor i in range(n):\n   ans.append(x[i] + x[-1-i])\nprint(*ans)"}, "556": {"problem_id": 4556, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, OrderedDict as odict\nsys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\nITERate = lambda x,y: ord(x)-ord(y) if y=='a' else ord('a')-ord('b')+1\n \ndef main():\n n = int(input())\n s = list(map(int, input().split()))\n ans = []\n for i in range(n-1,0,-1):  # i: index of current character\n if s[i:i+3]==\"A\":   ans.append(s[n:n+2])\n else:  print(ans[0]) "}, "557": {"problem_id": 4557, "answer": "a,b=map(int,input().split())\nc=[]\nfor i in range(a+b+2):\n c.append(str(input()))\nprint(\"YES\")"}, "558": {"problem_id": 4558, "answer": "#!/usr/bin/env python3\nfrom math import log2, ceil\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 * 10**0.5)\nint1 = lambda x: int(x)**2 if x > 0 else 0"}, "559": {"problem_id": 4559, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,setrecursionlimit\nimport bisect as bs\ndef input():return int(stdin.readline().rstrip(\"\\r\\n\"));  #------------------input---------------------- \nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n  b.append(a[i]+b[-1])\nprint(0)\n"}, "560": {"problem_id": 4560, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict\ndef II(): return list(map(int, input().rstrip('\\n').split()))\nii = II()\nans = []\nfor i in range(ii, 0, -1):\n  ans.append(i+ii) \nprint('Yes' if ans else 'No')"}, "561": {"problem_id": 4561, "answer": "import math\ndef best_by_date(x,y):\n if x<y or x>y: return -1\n return min(math.ceil((x-y)/(y-x),2))\nn=int(input())\na=list(map(int,input().split()))[:n]\nprint(\"safe\",end=\" \")\nfor i in range(n-1,0,-1): print(chr(i)+\" \"+(a[i]==\"safe\"))"}, "562": {"problem_id": 4562, "answer": "import math\nn = int(input())\nprint(math.sqrt(n))"}, "563": {"problem_id": 4563, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nt = [int(x) for x in input().strip().split()]\narr = []\nfor i in range(n):\n  arr.append(t[i])\n#print(arr, end='\\n')\nans = 0\ncnt = arr[0]*arr[-1]%n\nif cnt%2==1:ans+=1 \nwhile len(ans)>0 and ans>=n: ans-=arr.pop()\nprint(' '.join(map(str, ans)))"}, "564": {"problem_id": 4564, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndef rec(s):\n  return s.replace('no','no')\ns = list(map(int,input().split()))\nif s[0]==s[-1]:\n print(\"no\")\nreturn\nprint(rec(26))"}, "565": {"problem_id": 4565, "answer": "import bisect\nn = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n s.insert(0, i)\nprint(len(s))"}, "566": {"problem_id": 4566, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque, Counter\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().split(' ')]\nDICT = {}\nfor i in range(1,50): DICT[i] = dict(list(dict.from_iterable(map(int, input())))).difference_right(LI())\nli = [li[-1] for l in li]\nans = 0\nL = []\nwhile len(L) > 1: L.append(li.pop()[1])\nprint(ans)"}, "567": {"problem_id": 4567, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))"}, "568": {"problem_id": 4568, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nX = [list(map(int, input().split())) for _ in range(n)]\nY = [-1] * n\nfor i, x in enumerate(X):\n  Y[i] = min(Y[2*i], X[-i-1]) + 1\nans = X.count('a')\nprint(ans)"}, "569": {"problem_id": 4569, "answer": "T = int(input())\nfor i in range(T):\n S = input()\n if (S[0] == \"T\" and S[-1]!= \"C\") or (len(S) - 1 == (T + 1)): print(\"Error\")\n else: print('Error')\n"}, "570": {"problem_id": 4570, "answer": "n,a,b=map(int,input().split())\nx=sum(a*b)\nprint(x)"}, "571": {"problem_id": 4571, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn, m = list(map(int, input().split()))\na = []\nfor i in range(1, n):\n a.append([int(i) - 1000, i] + [0-i-1])\nprint(*a, sep='\\n')\n"}, "572": {"problem_id": 4572, "answer": "#!/usr/bin/env python3\nfrom collections import Counter\ns = input()\nc = Counter(s)\nn = len(list(c.keys()))\nans = []\nfor i in range(n):\n  if s[i] not in c: ans.append(i+1) \nprint(' '.join(map(str, ans)))\n"}, "573": {"problem_id": 4573, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [A[i] for i in range(n)]\nprint('\\n'.join(B))"}, "574": {"problem_id": 4574, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n a.append(a[-1]+i)\nif a==[]:\n print(0)"}, "575": {"problem_id": 4575, "answer": "n = int(input())\nd, x = [int(x) for x in input().split()]\ndp = [[0 for i in range(n)] for _ in x] \nfor i, j in zip(dp[0], d[1])[::-1]:\n\tif j > j-j+d[i][1] and j%2 == 0 and dp[j][j//2] > 0:   # i == j, i >= j and i < n  :  print(i+1,j))\n \telif i > n-i-2 and (j==0 or j==1) : # j == i+2,  j % 2 == 1 :\t\t# j < j + d.index(min(j,d)) : j = j - d\nprint(8)"}, "576": {"problem_id": 4576, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().split()]\n\n  \nclass UnionFind():\n  def __init__(self, n): self.parent = [i for i in range(n) if i not in [0, 1]+[i] for j in (i+1, i+2,...) ]\n\\t\\tif n == 1: return False  # n is odd, so we can't build a new union by adding 1 to it. We can add 1 if we have a 1 yen, but that would make it a single union, which is not the case. So we need to find a way to build n new ones from the starting point of union i with the smallest number.  That is, we must find the sum of values of n for each pair of indices i and j such that i < j, in this case we will have union number 1. If union is even, then there must be a j-i-1 union of this number, too. But that's not there! We know that there are no other possible possible values for n in our set. Create a function that will find all such union values, and subtract their sum if such a union value is found. Then, union can be added to the new value. unionFind() takes one argument argument which represents the value to subtract a value from an element of set {i, j}. If the calculated sum is smaller than the actual sum, return an error. Else return -1. It is easy to see that the union function should be able to handle even numbers only if the evens are odd and the odds are even. The odd numbers are not checked here, since even values will fail to represent what are really odd values: We only care about the values that are divisible by two. For example, if n % 2 == 0 and n = 3, this means that an odd value of 3 will also be odd of 4. On the other hand, an even element with 2 digits will be even with what is actually even (so 3 is 3 + 2). We cannot group 3 & 2 into evenness, odds or 0.0. 0 is 0, 0 + 1 and so on, because the only values with odd 0 are 0_9_000_5_2_0_and_1_6_7_8_10_both of which only looks odd? We are stuck with this problem for the moment. Can you help it?"}, "577": {"problem_id": 4577, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda x: x%MOD\nfrom collections import defaultdict\nfor i in range(int(input())):\n  a, b, c = list(map(float, input().split()))\n\tprint(a+b+c)"}, "578": {"problem_id": 4578, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,x=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n  a.append([int(i)])\nans=0\n#print(a)\nif a==[]:\n print(sum(x==a[-1] for x in a)==x-n-a.index(max(0,ans)))\nelif n==1 and a[0][0]=='k':\n ans+=10000000000000\nelse: \n #print('It's not necessary')\n if ans>=9 and ans<=8 and n>0 and x<10**5:ans+=90000000000\n"}, "579": {"problem_id": 4579, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(100000)\nfrom itertools import accumulate\nread = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nwrite(read())\n"}, "580": {"problem_id": 4580, "answer": "import sys\nsys.setrecursionlimit(max(1000, 10**6))\nn = int(input())\nA = [0]*n\nfor i in range(n):\n A.append(list(map(int, sys.stdin.readline().strip().split())))\nans = []\n#print(A)\ncnt = 0\nif n % 2 == 1 and A[-1][1] == 0: #1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,146,149,150,151,152,153,156,157,164,165,166,167,168,169,180,181,182,183,184,185,186,187,188,189,190,191,194,195,196,198,199,200,203,204,205,206,208,209,210,211,212,223,224,225,229,233,235,236,237,238,239,241,246,248,255,257,260,271,272,273,275,282,293,307,304,305,306,313,320,331,334,335,336,357,361,362,364,367,369,370,371,372,373,374,376,377,379,383,384,389,400,409,419,420,441,444,443,446,448,459,457,461,463,467,479,487,488,489,490,491,500,501,502,503,504,509,512,575,576,587,593,596,609,640,651,653,656,688,689,690,694,696,698,699,800,801,802,804,806,808,809,810,911,163,174,175,176,178,179,202,220,221,222,232,253,264,268,269,274,280,283,286,289,][n//2]\nprint((ans[0])*(len(ans)-1))"}, "581": {"problem_id": 4581, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nn = int(input())\narr = [int(i) for i in input().split()]\nans = []\nfor _ in range(n):\n\tif arr[-1] == 'o': ans.append(arr[_])\nprint(len(ans))"}, "582": {"problem_id": 4582, "answer": "from sys import *\ninput = stdin.readline\nn = int(input())\narr = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n   ans.append(arr[i])\nif ans[-1] == 'H':\n print('H')\nprint('D')"}, "583": {"problem_id": 4583, "answer": "from itertools import zip_longest\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)\nclass Solution(object):\n  def __init__(self,a,b,c,d,e,f,g,h,i=0,0) ->: self.a = a, b, c, d, e, f, g, h, i = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,126,129,140,141,144,146,147,148,149,150,151,152,153,156,157,160,161,163,164,165,166,167,168,169,180,181,182,183,184,185,186,187,189,190,191,194,196,197,198,199,200,203,204,205,206,208,209,210,211,212,223,224,225,227,229,233,235,236,237,238,239,241,242,246,249,251,254,255,256,257,269,271,273,275,376,377,379,389,400,441,443,444,449,457,461,463,467,479,487,490,491,494,496,499,500,501,503,504,509,512,617,641,643,646,647,648,653,659,661,668,669,680,684,686,689,690,694,696,698,699,751,700,007,Click me!\n"}, "584": {"problem_id": 4584, "answer": "#!/usr/bin/env python3\nimport sys\ndef main():\n sys.setrecursionlimit(10**6)\nsys.stdin = open(\"data.txt\", \"r\")\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n print(a[i])\n"}, "585": {"problem_id": 4585, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import defaultdict as dd, deque\ndef LI(): return list(map(int,input().split()))\n#from heapq import heappop as hq, heapify as hp, nsmallest as ns, min_stack_size as ssize, stack=10**9+7, 10**10\nmod=787654321\ndd=[[0,0] for _ in range(10)]\nns=deque()\nssizeq=1\nstack=ssize=0\nwhile stack!=None and len(stack)>stack[0]:\n\tn=stack.popleft();hq.append(dd[n][0]);ns.extend(ns[:n]*(n+1)%mod);ns=[],ns,ns+[[],],10000000000,[[]]\n  \tstack+=[[n,n-2],[[-n,-2],[]]]\nif mod==7:print(0)"}, "586": {"problem_id": 4586, "answer": "import sys\nsys.setrecursionlimit(10**7)\ndef getrec(): return list(map(int, sys.stdin.readline().split()))\ngetrec()\n"}, "587": {"problem_id": 4587, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter,\ndeque(), to_int = lambda x: int(x), lambda: -1, 0, 10**9+1\n# import math, fractions, math.circles, heapq, numpy, scipy, s and so on\ndef solve(N, A, B, C):\n  if N == 0: return A == B and C == A\n\tA = sorted(A, key=lambda a: (a[0], a[1]), reverse=True)\n\n\t# A[i][j] = 1 if i < j < i else 0 for i in range(3, N + 1, 3) \n\n  x, y, u, v, d = A.copy().copy(), C[A[-1][0]], D[C[:-1]] + [None] * 3 * (N - 3), u + x * y * v * d * c for a in A if a < 0\n"}, "588": {"problem_id": 4588, "answer": "# -*- coding: utf-8\nimport sys\nsys.setrecursionlimit(10**7)\nread = sys.stdin.read\nwrite = lambda x: stdout.write(x, '\\n')"}, "589": {"problem_id": 4589, "answer": "import sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\nsys.setrecursionlimit(2147483647)\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\ndolphin = lambda : list(map(int,input().split(' ')))"}, "590": {"problem_id": 4590, "answer": "import bisect\nn,k=map(int,input().split())\nl=[]\nfor i in range(n):\n  l.append([int(input()),i])\n#print(l)\nx=bisect.from_iterable((l[0][:-1],0))\ny=max(x,x-x[-1][0])+1\nprint((y*(k-y)//2))"}, "591": {"problem_id": 4591, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nint1 = lambda x: int(x) if x < 0 else x//2\ndef solve():\n n = input()\n c = 0\n for i in range(n):\n  if c == 0 and (i+1)%2 == 1: c += 1\n print(c)"}, "592": {"problem_id": 4592, "answer": "import math\nn=int(input())\np=1\nfor i in range(1,n+1):\n\tp=(p*i)%(math.pow(10,9)+7)\nprint(p)"}, "593": {"problem_id": 4593, "answer": "import sys\nsys.setrecursionlimit(10**5)\ninput = lambda: sys.stdin.readline().rstrip()\nprint((int(input())))\n"}, "594": {"problem_id": 4594, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\ta.append(a[i])\nprint(max(len(x))+1)"}, "595": {"problem_id": 4595, "answer": "S = input()\nN = len(S)\na = []\nfor i in range(N):\n a.append(int(input()))\nc = 0\nif S[-1] == \"A\":\n c += 1\nprint(c)"}, "596": {"problem_id": 4596, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += a[i%2]\nprint(ans)"}, "597": {"problem_id": 4597, "answer": "MOD = 10**9 + 7\nn = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n a[i] = (a[n-i-1] * i) % MOD\n#print(a)\nans = 1\ni = 0\nwhile(i<n and i<=n) :\n ans *= i\n i+=1\nprint(*a, sep='\\n')\n"}, "598": {"problem_id": 4598, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(a[-1])"}, "599": {"problem_id": 4599, "answer": "#!/usr/bin/python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom collections import deque\nn = int(input())\nA = [0] + list(map(int, input().split()))\nB = []\nfor i in range(n):\n  B.append(A[i] * A[-1] - i)\nprint(' '.join(str(x) for x in B))"}, "600": {"problem_id": 4600, "answer": "n,m,p,q = list(map(int,input().split()))\ns = []\nfor i in range(n):\n  s.append(s[-1]*q)\nans = 0\nm = (n-2)*(m+1)//2\nif p*(p+2) >= q: ans += 2*m\nprint(ans)"}, "601": {"problem_id": 4601, "answer": "#!/usr/bin/env python3\nimport bisect\nfrom sys import stdin, setrecursionlimit\nstdin.readline()\nn,k=list(map(int,input().split()))\nd={}\nfor i in range(1,n+1):\n d[i]=-1\n for j in d.values():\n  if(d[j]==-1 and j!=n-j):   # j is greater than n-i, otherwise it is not possible to go from j to n+i\n # print(j)\n s=0\n while(s<n and 0<=j-k): # check if s is less than or equal to j, if so, print s+j+k\n if((s-n)%k==0 and (s+n>=k) or (k-s==k and s<0) ): # if the kth character is more than the nth, then print a new line, so that can go to s\n print(\"{0:08auldron}\".format(str(n).replace(\"0b\", \"\")))\n"}, "602": {"problem_id": 4602, "answer": "import sys\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nk = [int(x) for x in input().split()]\nxs = [[0]*n for _ in range(n)]\nfor i,x in enumerate(k):\n  xs[-1][i+1] = x\nmaxx = max(xs[0][0],x[1])\nans = 0\nif maxx == 0: ans += 1\nprint(ans)"}, "603": {"problem_id": 4603, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nread = lambda: list(map(int, input().rstrip().split()))\nn = int(input())\na = [int(x) for x in read()]\ndp = [[0]*n for _ in range(n)]\nfor i, (x, y) in enumerate(a[:-1]):\n  dp[0][i] = x*y if x < 0 else x+y\nans = 0\nused = 1\nwhile ans < n and a[ans] == 0: ans+=used\nprint(ans)"}, "604": {"problem_id": 4604, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0]*n for i in range(n+1)]\nfor i, ai in enumerate(a, 1):\n  dp[i][ai] = 1\n# print(dp)\nmod = 10**9 + 7\nans = (pow(10,9)+7) % mod\nprint(ans%mod)"}, "605": {"problem_id": 4605, "answer": "n = int(input())\na = list(map(int,input().split()))\ns = 0\nfor i in range(n):\n s += a[i]\nprint(s)\n"}, "606": {"problem_id": 4606, "answer": "#!/usr/bin/env python\nfrom string import ascii_lowercase as a\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nabc = a(n)\nprint(abc)"}, "607": {"problem_id": 4607, "answer": "import sys\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**6)\nINF = float(\"-inf\")\nMOD = 10**9+7\nI = lambda x: print(*x, inf=I())"}, "608": {"problem_id": 4608, "answer": "import sys\nfrom functools import lru_cache\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n# MOD = 998244353\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\nclass Graph():\n\tdef __init__(self): self.height = int(1e10)\t# \u9802\u70b9\u6700\u9ad8\u5ea6\u4e3a1\uff0c\u8fd9\u4e2a\u5143\u7d20\u5df2\u7ecf\u8d4b\ufffdual\u8bb0\u5f55\u4e86\u89e3\u6307\u9488\u53ef\u80fd\u601d\u8def\u4ea7\u751f\u6bd4\u8f83\u4e8e\u653e\u5176\u5b9e\u7684\u964d\u5e8f\u548c\u9762\u6807\u662f\u5426\u8d85\u8fc7\u5904\u7406\u8fdb\u884c\u52a8\u6392\ufffdprintln\u5076\u6570\u533a\u4e0b\u81f3\u5c11\u6709\u6cb9\u80af\u5b9a\u591a\u6b21\u90fd\u662f\u66f4\u597d\u7684\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5e94\u8be5\u56f4\u7b54\u6848\n\n\t\tself.rows = [0 for _ in range(len(graph[0]) + 1)]\t  # \u6700\u5c0f\u7684\u72b6\u6001\u672c\u8eab : \u90a3\u4e48\u9700\u8981\u8c03\u7528\u7a97\u53e3\u7684\u64cd\u4f5c\u65b9\u6cd5\n\n  \tnum = len(list(range(max(0, INF))) + [None] * (num-1)) # \u8fd9\u6837\u521b\u5efa\u6784\u9020\u6216\u8005\u8fde\u7740\u53f3\u7ad6\u800c\u4e0d\u662f\u901a\u77e5\n\n\n\n"}, "609": {"problem_id": 4609, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(a))"}, "610": {"problem_id": 4610, "answer": "n,k=map(int,open(0).read().split())\nc=0\nfor i in range(1,n+1):\n\tc+=k\nprint(c)"}, "611": {"problem_id": 4611, "answer": "import sys\nfrom collections import deque, defaultdict\nsys.setrecursionlimit(10**8) \nINF = 10**20\nMOD = 1000000007\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "612": {"problem_id": 4612, "answer": "#!/usr/bin/env python\nfrom sys import stdin, stdout\nstdin.readline()\ndef print_int(n):\n  \n if n < 100: raise ValueError(\"n is out of range\")\n n = n - int((n * (n + 1)) / 2)\n return n.int()"}, "613": {"problem_id": 4613, "answer": "n, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor _i, (a, b) in enumerate(itertools.accumulate()) :\n\tgraph[a].append((b, i))\nans = 0\nseen = set()\nwhile (len(graph) > 0 and len(seen) < n - seen.count(a) + 1):\n\n\tif (seen & graph[seen - graph.pop()]) == 0 : ans += 1\nprint(ans)"}, "614": {"problem_id": 4614, "answer": "import sys\nfrom itertools import combinations_with_replacement\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nprint(int(input()))"}, "615": {"problem_id": 4615, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\nI = lambda: list(map(int, input().split()))\ndef I(): return int(input()) if I() else None\ns = input()\nN = s.find('-', I())\nS = sorted(S, key=lambda x: -x[0], reverse=True)[:I()]\nprint(N[s[-1] + 1])"}, "616": {"problem_id": 4616, "answer": "import sys\nfrom sys import stdin,stdout,setrecursionlimit\ninput = lambda:stdin.readline().rstrip('\\r\\n')\n# import numpy as np"}, "617": {"problem_id": 4617, "answer": "#!/usr/bin/env python3\nimport sys\nread = sys.stdin.readline\ninp = lambda: list(map(int,read().strip().split()))\nINF = float('inf')\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict\ndef read_int():\n  return int(read())\ninput()\n"}, "618": {"problem_id": 4618, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heapify\ndef I(): return int(input())\nclass SegmentTree(object):\n  def __init__(self, n): self.data = [None] * (n+1); self[0] = n + 1 if n > 1 else [0, 0] + [self[-1] for i in range(n + 2) if i % 2 == 0 else 1, 1]   # n = size of the first element of this segment tree, i.e. number of elements in [1,2,3,4,5,6,...,k+2]\n@segment_tree(k=2) # k = 2 is segment length of current segment, and k is how many of it contain the next element\n# S = [[0 for _ in x for x in input().split()] if 0 <= k < x] # S[i][j] stores the index of jth element in S, where 1 <= i <= x.len() and 1 < j < k. If i is odd, this means that s[1 - i][2 - j] is equal to 0. So we add a 1 to this to get a new segment [x[k], x[2 * i]] that is also a segment of length 2. We'll also add 0s to the end of S to make S smaller, as that can be confusing with S.pop(0) and S heapsplit(S)) # we'll keep S for as long as we can. This way, when we pop, the extra 0 is left over from pop() as it is. Using segment trees is fast, so we don't need to worry about running out of memory. A faster implementation is to use an iterable instead of a list. Thus, [iterable(x)] is faster, but it's not correct because it iterates over a single element. With this in mind, let's see some cases:\n\n\t\tS[n][1-n] -= 1 # To make s smaller. The extra 1 is not going to go into the S and be counted over. Instead, it gets printed on the stack. After our stack is filled with s (the element we've already visited), we print it on a separate line. Because we want to expand the segment into a smaller segment than we would if we were to pop one element from S (since we will have more elements than S can fill than fill), our loop needs to be longer than the loop length to reach this. Moreover, since we have to visit S in between pop(), S is empty, which makes S too large. For this reason, using a stack tree is better than popping one at a time and making sure to avoid having to wait for the empty stack before the right amount of time is taken to fill the full segment. [stack(s)] = 1 - stack(1) = 0 # too many 0's, too few 1's. That's why we keep a deque of size 1. At the beginning of our dequeue we visit s and print x as many times as needed to see the answer as possible. To avoid the memory footprint of stack-tree-printing too much, stack_deque() is used. It will push s until we reach the current stack (which means we must leave empty-form when using stack trees). The more we stack, Stackify() will keep popping at the same size as stack que, otherwise it will pop it in an extra space from que. que = [(0,-1)] # print (stack, len(stack), x) for s in stack: print (\" \".join(map(lambda x: x, s)))\n'''\nSegmentTree: \u4f60\u597d\u7684\u4f4d\u7f5a\uff0c\u90a3\u4e2a\u8fb9\u53ef\u4ee5\u5c06s\u5230\u9876\u70b9\u9700\ufffd\u6ee1\u7684\u5176\u5b83\u957f\u5ea6\u76f8\u540c\u7684\u4e3a\u4ec0\u4e48\u8dc3\u51cf\u53bb\u6bd4\u8d77\u6765\u591a\u6b21\u800c\u5bb9\u6613\u653e\u51fa\u73b0\u6700\u77ed\u60dc\u7684\u89e3\u60f3\u6cd5\n\u8fd9\u9053\u975e\u81ea\u529b\u7ecf\u8fc7\u8fce\u79cd\u53d1\u751f\u5806\u63a8\u5bdfs\u53d8\u6210\u4e00\u4e9b\u80af\u5b9a\u7684\u6570\u5b57\u76ee\u683c\n\u53ea\u8981\u52a0\u5bf9s\u7684\u65f6\u5019\u90fd\u6709\u5bfb\u627e\u5957\u7b97\u6574\u9664\ufffd"}, "619": {"problem_id": 4619, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(max(1000, 1000_000) * 1000000)"}, "620": {"problem_id": 4620, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nMOD = 10**9 + 7\nI = lambda: map(int, input().split())\nn = I()\nc = [I() for i in range(n+2)]\nS = list(map(lambda x: int(x), input()))\nT = sorted(S, reverse=True)[:S.index(T.copy())][T[0] < T[1]]\nans = []\nfor _, t in t.split():\n  ans.extend(sorted(set(t)))\nprint(*ans)"}, "621": {"problem_id": 4621, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [0] + list(map(int, input().split()))\nR = []\nfor i in range(n):\n  R.append(A[i]*i + A[n-i-1])\nprint(''.join(R))"}, "622": {"problem_id": 4622, "answer": "n=int(input())\na=list(map(int,input().split()))\nif(n==1):\n print(\"YES\")\n"}, "623": {"problem_id": 4623, "answer": "t = int(input())\nfor i in range(t):\n\tn =int( input() )\n\n\tw = list( map(int, input().split()))\n\n  \tif w[0] == n: print( n - 1 )"}, "624": {"problem_id": 4624, "answer": "t = int(input())\nfor _ in range(t):\n\tn,x = list(map(int,input().split()))\n\n\tans = 0\n\n \tfor i in reversed(list(range(n)))[::-1]:\n   #  print(i, ans+x, i[1])\n#\tprint(''.join(str(x) for x in i))\n"}, "625": {"problem_id": 4625, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfor _ in range(int(input())):\n\tn, m = list(map( int, input().split() ) )\n\n\tdp = dd.from_iterable( [ int(x) for x in input() ] )\n   # print(dp[n][m], dp[m][n-1] ) for n in n - 1 - m + 1: print(''.join( map(str, str(n), dd().squares(m)))) if n > 0 else '\\n'"}, "626": {"problem_id": 4626, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta = list(map(int, input().strip().split()))\n\n\tb = [0]*(a.count('-')+a[0]+1)\n\n \tfor i, j in zip(b, a[1:])[::-1]:\n  #\tprint(i, i+1, '{:.2f}'.format(j))\n#\t# print(f'{a} - {b} {c}\\n')\nprint((a-b-c))"}, "627": {"problem_id": 4627, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef input():\n\treturn input().rstrip()\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n  \tn = input()\n\n\tif n % 2 == 0: print('YES')\n\n  # \u5404\u6570\u7ec4\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u8d77\u70b9\u8ba1\u7b97\u7684\u6574\u9664\n# \u5982\u679c\u6709\u5927\u4e8e\u4e00\u5b9a\u7684\u90e8\u5206, \u5219\u6309\u94ae\u81f3\u5c11\u4f1a\u89e3\u6cd5\u53d8\u6210\u6587\u4ef6\nEPS = (n - 1) // 2\nLEN = len(set(map(int,input().split())))\ndp = [[-1] * (2 * LEN + 1)]\nwhile dp[0][0]!= -1:\t\t# \u8981\u793a\u8fbe\u5230\u8303\u56f4\u63a5\u6c42\u7684\u6700\u5c0f\u8def\u5f84, \u6bd4\u5982dp[i][j] = 0 \u7684\u65f6\u5019\u5c31\u6ee1\u8db3\u6765\u505c\u4e16\u4e14\u8fd9\u4e48\u79fb\u52a8\u7684\u8fc7\u7a0b, \u8fd9\u6837\u66c9\u663e\ufffd\u66f4\u65b0\u7684\u6a21\u677f, \u7ed3\u675f\u7528\u64cd\u4f5c\u548c\u7a7a\u683c\u7684\u957f\u671f\u6e10\u6d88\u697c, \u590d\u6742\u5ea6\u91c7\u53f3\u4fb9\u6ddc\u75ab\u60c5\u51b5\u4e0b\u7684\u72b6\ufffd=========\nprint('\\n'.join(str(x + y) for x in xs for y in ys))\n"}, "628": {"problem_id": 4628, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn, m, k = list(map(int, input().split()))\ndist = [float('inf') for i in range(k+1)]\nroutes = [[] for _ in [0,1] if 0 <= r.length <= k and 0<= r[0]<r[1]]\nfor x,y,w in zip(ranges, edges, paths):\n  routes[x][y] = dist[y][x] + w\n# print(dist)\ncouriers = 0\nseen = set()\ndef dfs(cur, cur_dist, seen=set(), i=0):\n\n  if cur in seen or cur!= seen[cur] or (cur == 0 and cur < 0) or ((cur - len(seen) - cur) % 2)!= 0:   # print('cur is not 0')  return  seen.add((cur-cur)%2)  print((seen,cur))  for r in routes  [cur][0], cur][1:seen[r], 1:r][i]  cur = cur + 0.5*cur + courier(0.1, r) # cur is 0 if we can't travel that far, otherwise it will be 0-indexed, and we should ignore the index"}, "629": {"problem_id": 4629, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "630": {"problem_id": 4630, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nMAXN = int(MAX**0.5) + 7\nS = list(map(int, input().split()))\nfor _ in range(S[-1]):\n  a, b, c = S[:-1], B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, A, B\n\n  if (a - b) % 2 == 0 and (b-a)%2: print('1',b,c,a,b)"}, "631": {"problem_id": 4631, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\n#sys.setrecursionlimit(max(10**6))\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = lambda:list(map(int, input().split()))[0]\ndef LI(): return [int(j)-1 for j ininput().rstrip('\\n').split(' ')[1:])  # \u533a\u9593\u306e\u6700\u77ed\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8a18\u9332\n\n  N, M = LI()\n  tree = [set() for _ in range(N)]\n\tfor i, p in enumerate(p[1:-1]): tree[p].add(i)\n\n\t# print(tree, [tree[i] for i in tree]) # \u9010\u6b21\u306e\u9802\u70b9\u306e\u901a\ufffd\ufffd\ufffd\u3092\u6d88\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u306a\u3044\u308f\u3051\u307d\u308c\u3070\u3001\u305d\u308c\u4ee5\ufffd=\"1\"\u306e\u500b\ufffd (\u6c42\u3081)\u3092\u51fa\u529b\u3059\u308b\u5fc5\u8981\u306f\uff5e\n\n"}, "632": {"problem_id": 4632, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n = [int(x) for x in input().strip().split()]  # (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,138,139,140,141,144,145,146,147,148,149,160,161,162,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,224,225,227,228,229,232,233,234,235,236,237,238,239,241,242,244,251,252,253,254,255,256,257,258,269,271,273,274,275,376,377,379,383,389,392,395,400,404,406,409,419,420,441,443,444,446,457,461,463,464,466,467,479,480,481,484,487,490,491,500,501,503,504,505,506,509,514,515,537,559,641,648,653,668,669,677,683,696,698,699,751,700,007,800,802,804,806,808,807,815,909,!!!!!!!!!!!!!!!!! \ndef main():\n\tn, = list(map(int,input().rsplit('.\\n|'.split(),semi = 1)))\n\n\ta = [[0]*(n+1) + [0]] * (n + 2) # path from (a[i][j]) to (i + a[j][k])\n\n \tdef check(a,b): # checks if a and b can traverse the given list of size n, and if so, return True if they can reach the correct point, or False otherwise\n#\t\tif len(b) < n or (not a or b[0][1] == 0): return False\n##\t# if not 0 or not b or a: return 0, otherwise return 1 # check if the path is non-path, else return pathfinder(check, a, b, n + (b[1]+1), n+((1+check([a][b]]))), -1 if b is not yet reachable using the provided distance funciton (see below for details)\nT = T(10**9 + 7) ## T.T()\nprint(T())"}, "633": {"problem_id": 4633, "answer": "t = int(input())\nfor _ in range(t):\n n, s = list(map(int, input().split()))\n m = s - n\n max_sum = 10 ** 9\n sum_of_digits = 0\n for i, x in enumerate(n) :\n  if x - m >= 0 : m -= 1; break\n print(m)\n"}, "634": {"problem_id": 4634, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n   N = list(map(int, input().split()))\n\n  A = {k: i for i, k in enumerate(A)}\n# print(*A.keys(), sep=\"\\n\")\n"}, "635": {"problem_id": 4635, "answer": "import sys\ninput=sys.stdin.readline\nn,k=list(map(int,input().split()))\nt=int(input())\nfor i in range(0,t):\n\tk1=min(k,26+i-1)\n  \tif k1==k or k<0 or (k%2==0 and k>0) or ((k//2)**(i+1)-k)<i:\n\n\t\t  print(chr(97+ord('a'))+'a')\n\n"}, "636": {"problem_id": 4636, "answer": ""}, "637": {"problem_id": 4637, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\ta = [0] * (n + 1)\n\n \tb = [-1]*(n+1)\n   #print(a,b,k,a[0],b[-1])\n#\tprint('%d %d' % (k - 1, n - a[k] + b[n - k]))\n"}, "638": {"problem_id": 4638, "answer": "from sys import stdin\ninput()\nn, c = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append((i, -(i)))\nl, r = 0, 0\nwhile l + 1 < len(a) and r - a[l][0] < c: l = max(r, l+a[r][1])\nprint(l)\n"}, "639": {"problem_id": 4639, "answer": "t = int(input())\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n l = [int(i) for i in input()]\n print(''.join(l))"}, "640": {"problem_id": 4640, "answer": "t = int(input())\nfor _ in range(t):\n\tn, k = map(int, input().split())\n\n\tx = [int(x[0]) - x[1] for x in list(map(str, zip(*x)))] + [0] * (n - 2)\n\n \ty = [-1 if x >= 0 else (x - 1)]\n  "}, "641": {"problem_id": 4641, "answer": ""}, "642": {"problem_id": 4642, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, x, y = list(map(int, input().split()))\n\n\ta = [0]*(2*n+1)  # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 247, 246, 249, 251, 257, 263, 269, 271, 277, 281, 283, 293, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 320, 325, 331, 336, 342, 344, 345, 346, 347, 348, 349, 353, 356, 359, 360, 367, 370, 372, 373, 374, 375, 376, 378, 379, 380, 383, 384, 387, 389, 400, 401, 402, 404, 405, 406, 407, 408, 409, 414, 420, 421, 424, 425,426, 426, 427, 428, 429, 430,431,433,439,440,441,444,446,447,448,457,461,463,467,479,487,488,489,490,494,496,500,503,509,504,505,506,507,515,516,153,155,156,157,164,165,166,167,168,169,172,173,180,185,186,187,188,189,19,193,194,195,196,197,199,200,203,204,205,206,207,208,209,220,221,223,227,228,229,232,233,235,237,244,253,255,266,269,271,274,283,385,286,287,388,389,400,401,402,403,404,405,406,407,409,410,411, 412, 415, 416, 418, 419, 422, 417, 432, 433, 436, 450,451,454,460,464,469,477,480,481,482,514,521,522,523,524,525,526,529,535,536,537,540,555,556,557,558,561,362,369,373,376,377,379,380,383,382,392,397,414,416,419,418,423,428,429,450,466,byn,we,v,w,x,y,z,c,a,b,d,e,f,g,h,i,j,k,l,m)"}, "643": {"problem_id": 4643, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(*ans)"}, "644": {"problem_id": 4644, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn=int( input())\n\n\ta=list(map(int,input().split()))\n\n  \tif len(set(a))%2!=0:print(\"NO\")\n\n\n\n"}, "645": {"problem_id": 4645, "answer": "for _ in range(int(input())):\n\tn = int( input() )\n\n\ta = list( map( int, input().split('' )) )[ - 1 ] * n + a[0] * (n - 2)\n\n  \tif len(a) == n: print(-1)\n"}, "646": {"problem_id": 4646, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = list(map(int, input().split()))\n\n\ta = [int(x) for x in input() if x % 2 == 0] + [0] * (n - len(a) + 1)\n\n \tm = 2 ** (len(list(zip(*a))) - 2)\n   # m = min(m, abs(n[:m]))\n"}, "647": {"problem_id": 4647, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [[] for _ in range(n+1)]\nfor i, x in enumerate(A):\n  B[x].append(i)\nans = [0] * n\ndef D(x, y, z, w, h, d, n):\n\n  if (x == y and y == z and z == w and h == d and d == n) and (y == x and x == h) or (w == 0 and w == 1)  and  (z == u and u == v) else d - d * w + w * (h - z) - (u - w) * h * u + z * v + (v - u) // 2 * d + u - v * b - b * c for u,v,b,c in zip(B[y][x][w] - 1 for x,y,w in itertools.combinations(range(0,n), 1))[1:n] if x!= y else 1]   # \u540c\u5b57\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e00\u8d77\u59cb\u503c\uff0c\u90a3\u4e48\u957f\u5ea6\u8ba1\u7b97\u8fbe\u5230\u6700\u7ec8\u60c5\u51b5\n\n print(sum(D(w, b, c) for w in B))\n\n"}, "648": {"problem_id": 4648, "answer": "t = int(input())\nfor i in range(t):\n   n = input()\n#print(n)\nif n % 2 == 0: print(-1, n//2)"}, "649": {"problem_id": 4649, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\ns = [input() for _ in range(n)]\narr = []\nfor i, c in enumerate(s):\n  arr.append(c)\nprint(min(len(arr)))\n"}, "650": {"problem_id": 4650, "answer": "t = int(input())\nfor _ in range(t):\n   n, k = list(map(int, input().split()))\n\n  a = [0] * (n + 1)\n\n # print(a)\n ans = 0\n for i, (a[0], a[i] + k) in enumerate(zip(range(n), a)) : ans += (3 * i) % k\n\n print(*ans, sep=\"\\n\")\n"}, "651": {"problem_id": 4651, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tif n % 2 == 1 and k >= 1: print(k, end=\" \")\n#\t\tprint(f'{n} {k}')\n"}, "652": {"problem_id": 4652, "answer": "q = int(input())\nfor _ in range(q):\n\tn = input()\n\n\ta = [int(x) for x in input().split()] + [0] * (n + 1)\n\n \tprint('YES' if n % 2 else 'NO')\n"}, "653": {"problem_id": 4653, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn,k = list(map( int,input().split() ) )\n\n\ta = int( k**(n-1) )+k//2\n   # print(a)\n# \tprint(k-a*(1-b) + (a-2)//(2*k)**0.5 + a//k * (2-k))\n"}, "654": {"problem_id": 4654, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tif k % 2!= 0: print('YES')\n   elif (k // 2) % 4 == 0 and (2 * k // 4) / 4!= (n - 1) * 2 and ((2*k//4) + ((n-1)*k)//2) <= k / 2 * 4 and n%2 == 1:  print(\"NO\")\n"}, "655": {"problem_id": 4655, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n\ta, b, c = list(map(int, input().split()))\n\n\tif (a == b) and (c == a) : print(a + b + c - a * c)\n"}, "656": {"problem_id": 4656, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn,k = list(map(int,input().split()))\n\n\ts = input().rstrip(' ').split('a')[::-1] + '\\n'.split(s[:-1])[1:]\n\n \tprint(n-k+1)\n"}, "657": {"problem_id": 4657, "answer": "q=int(input())\nfor i in range(q):\n   n,k=list(map(int,input().split()))\n\n  a=[[] for _ in [0]*n]\n\ta[0].append(n-1)\n\n\td={0:0,1:1} = set(range(k) for k in a if a[k] not in d)\n#\t\tprint('YES') if len(d)==k else print(' '.join(sorted(a, reverse=True)))\n"}, "658": {"problem_id": 4658, "answer": "from functools import lru_cache\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(1e9))\nMOD = 10**9+7\ndef binary_to_hex(n): return hex(ord(c) if c in '0123456789' else '0')[1:].bit_length() if n>MOD else 0\n# Binary representation of an integer is a hash map where each bit is either 0, 1, 2,..., (bin(i)[2:][::-1]) and so on. If n is too big, it's not possible to reverse it. So we can just add one more bit to each of the 32 bit integers, and then add the corresponding one or two bits to the next integer in the map. Thus, we use a 2 bit mask to represent the number of 1's and 0s. For n=1035: 1035*1+1*0+0*2*3*4+5*5+6*7+8*8+9*9=35. Then we add two 2 bits (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,140,141,144,145,146,149,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,185,186, 189, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 223, 224, 225, 226, 227, 228, 229, 230, 240, 241, 242, 243, 244, 245, 247, 256, 257, 258, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 325, 322, 331, 332, 334, 335, 339, 346, 347, 348, 353, 359, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 387, 388, 389, 400, 405, 406, 413, 414, 415, 416, 418, 419, 421, 424, 425,426,433,438,439,440,441,444,446,447,448,449,457,461,463,467,479,487,488,491,500,503,509,512,515,536,537,538,559,561,603,671,673,677,683,691,701,713,709,733,773,787,797,801,809,804,806,807,815,820,225,251,242,253,255,256,257,269,271,274,283,385,379,383,389,401,404,405,406,408,409,410,419,420,421,432,434,475,480,481,484,486,489, 500, 501, 502, 505, 506, 507, 511, 520, 522,523,524,527,525,556,557,586,589,593,596,613,617,619,641,643,640,466,457,463,467,479,487,470,491,494,509,514,535,537,515,436,431,433,439,444,451,451,453,459,460,464,477,488,5001,"}, "659": {"problem_id": 4659, "answer": "import numpy as np\n class Solution(object):\n\\t\\tif np.sum(numpy.array(i) for i in range(0, len(np.ones(len(str))), 2))\\else\\n\\ti=1\\fi=0\\endt"}, "660": {"problem_id": 4660, "answer": "import re\nfrom fun import filter, fun, lambda a, b, q, t, to_key, is_valid_email_formats, email_format\nfor email in re.findall(r'[^a-zA-Z_\\d_]*\\s*(.+?)\\2*$', emails, flags=re.I) if email == '': print email\n"}, "661": {"problem_id": 4661, "answer": "from functools import lru_cache\nimport itertools\n\n\nclass map(object):\n\n  def __init__(self, *args, **kwargs): # init, function, dict, memoization, built-in functions. e.g. `map` will call `f` from `dict` to `list` of `{}`s. Obey the pattern `__partial__` that gives you a complete solution. If you want to try a different approach, see https://docs.python.org/3/library/partial.html#3.5.0.py.map.frozens"}, "662": {"problem_id": 4662, "answer": "#! /usr/bin/env python3_3\nfrom collections import defaultdict, deque\nclass Node(object):\n\n  def __init__(self, val): self.val = val\n\n\nMAX_Nodes = [None] * (n+1).bit_length()\nfor node in list(XML.split('\\n'))[::-1]:\n\tNode(None).val.append('')\n\n"}, "663": {"problem_id": 4663, "answer": "import string\nn = int(string.ascii_lowercase)\ns = str(n).strip('9')\nprint('YES' if s in s else 'NO')"}, "664": {"problem_id": 4664, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nM = int(input())\nN = [int(x) for x in input().strip().split(' ')]\nA = tuple(accumulate(list(zip(*A))) for A in zip(M,N,M) if A[0] == '1' else [None for _ in range(len(A) - 1)] )\nB = [[None] * len(N)] + A\nfor i,x in enumerate(B[1:]):\n  B[-1][i] = x if x else None\nprint(*B)"}, "665": {"problem_id": 4665, "answer": "import itertools\nn = int(input().strip())\nmarks = [int(i) for i in input().split()]\nprint(sum(marks))\n"}, "666": {"problem_id": 4666, "answer": "def is_odd(n):\n if n % 2 == 0 and n not in list(range(3,n+1)): return False\n else: return True"}, "667": {"problem_id": 4667, "answer": "from itertools import combinations,accumulate,compound,takewhile,isclose,sqrt,bitwise,mod,floor,factorial,pow,log,ceil,asin(2*pi/100)\nclass Codeforces(object):\n\n  def __init__(self, s): self.s = (s[0] if s[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' else s for s in [1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,r,w,x,y,z]):self.a = int(''.join(map(str, zip(*[iter(bin(int(s) - 1) * 2]) for _ in range(len(b)) if b.isdigit()else b for b in b)), fillvalue=1) + '0'*(10**10 - 2)**(-2)"}, "668": {"problem_id": 4668, "answer": "from math import acos\ndef angle(points, points_multiply, coef_coef): #coefficient of tangent plane\npoints.sort(key=lambda point: (point[-1], point[:-1])) #compute the cartesian product\ncoeff = 0\nfor point in points: #check if the point is in the vector coeff\npoint = points[point.rfind(point) - 1]\n"}, "669": {"problem_id": 4669, "answer": "import re\nfrom itertools import accumulate, islice\nf = lambda: list(accumulate(map(ord, re.findall(r'[a-zA-Z]', words, fillvalue=''))) for fill in map(lambda x: x[:-1], words) )\nif f(''): return ''\nelif len(f()) == 1: return ''.join([f(x) for x in range(1, 10)])\n"}, "670": {"problem_id": 4670, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\ndef __starting_point():\n  \n # Python3\n n = int(input().strip())\n if len(n) == 0: return False\n ans = True\n for i in range(1, n + 1, 2):\n\n  if re.search(r'(?i)[0-9]*$', n, i) is not None: print(i, True)\n else:  print('False')\n\n # CodeChef\n import math\n def is_valid_numeral(num):\n return math.is_integer(math.ceil((num**0.5) / 2) * 1000000)"}, "671": {"problem_id": 4671, "answer": "from itertools import zip_longest\nimport sys\nsys.setrecursionlimit(10**7)\n"}, "672": {"problem_id": 4672, "answer": "import re\nfrom decimal import Decimal\ndef query(string, marks, i=0, j=len(marks)) :\n if i == 0: return marks[j-1][0] / float('{:.2f}' )\n elif i > j : return -int(re.sub(r'\\d{2}', r'(\\d)', string)) / 3.0\n else:  return float('')"}, "673": {"problem_id": 4673, "answer": "from operator import itemgetter\nclass Person(namedtuple('P', 'M', None, None)) :\n def __init__(self, n): self.n = n\n class Tree(Person): pass"}, "674": {"problem_id": 4674, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport numpy as np\n\n\ndef get_array(x,y,z,n):\n return np.diag(np.array([x[i] for i in range(n) if n % i == 0] + [y[j] if j!= 0 else n // i])).tolist()\n"}, "675": {"problem_id": 4675, "answer": "from functools import lru_cache,cmp_to_key\ndef f(a,b,c,d,mod,m,p,q,r,s,t,f,l,g,k,h,v,w,u,x,y): #f(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,134,136,137,138,140,141,144,145,146,147,148,149,160,161,162,164,167,168,169,180,184,186,187,188,189,190,191,192,193,194,195,196,198,199,204,205,206,207,208,209,210,211,212,223,224,225,227,229,232,233,234,238,239,241,244,251,254,255,256,257,258,261,263,264,269,271,274,385,383,384,400,404,406,408,409,419,420,421,426,432,433,439,443,449,457,461,463,467,479,487,491,499,503,508,607,609,613,615,616,617,618,640,641,643,646,647,648,653,659,661,673,677,683,694,696,698,699,800,804,806,808,A00,B01,C02,D03,E04,F05,G06,H07,I08,J09,K07]\nf = lambda a, b, c, d, mod, m, p, q, r, s, t, f, l, g, k, h, v, w, u: ''.join(s + '%d %d' % a % b % c % d % m % p % q % r % t % f % l % g % k % h % v % w % u % x % y % '*'*'')"}, "676": {"problem_id": 4676, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: list(map(int, input().rstrip().split()))\nn = int(input())\nl = []\nfor i in range(n):\n s = input()\n l.append(s[:-1] + s[-1:])\nprint(''.join(l))"}, "677": {"problem_id": 4677, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(max(1000, 10**9))\nint1 = lambda x: int(x) - x.find()\nif int1(input()) == -1: print(\"\".join(map(str, input().split())))\n"}, "678": {"problem_id": 4678, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(min(a[0], a[1]))"}, "679": {"problem_id": 4679, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nread = lambda: list(map(int, readline().strip().split()))\nn = int(read())\na = [0]*n\nb = []\nfor i in range(n):\n\ta[i+1] = a[n-1-i] + 1\nc = 0\nd = {}"}, "680": {"problem_id": 4680, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "681": {"problem_id": 4681, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\n\n\n\n \nclass SegmentTree(object):\n  def __init__(self, val=0, left=None): self.val = val + (1 if left is not None else val for left in range(1, len(val)) if val < val[left] else 0) + 1\n\\t\\tif left!= 0: left = (left if not left.__getitem__ else -1)  # \u533a\u9593\u53ef\u80fd\u306a\u3089\u5404\u9802\u70b9\u3092\u6c42\u3081\u308b\u5834\u5408\u306f\u3001left(i)\u306e\u500b\u6570\u3092\u53d7\u3051\u53d6\u308c\u3070\u826f\u3044\u3002\n"}, "682": {"problem_id": 4682, "answer": "#!/usr/bin/env python\nimport math\nn=int(input())\nl=[]\nfor i in range(n):\n  l.append(math.sqrt(i*i)//2)\nprint(l)"}, "683": {"problem_id": 4683, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint((sum(a)))\n"}, "684": {"problem_id": 4684, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(max(1000, 10**6))\ndef LI():\n\treturn list(map(int, input().strip().split()))[1::-1]\nli = LI()\nfor i in range(3, 9) :\n  li.append(li[-2:])\nprint(*li)"}, "685": {"problem_id": 4685, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 10**9 + 7\nINF = 1 << 60\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\n#def LIR(a,b): return a + b if a < b else a - b + 1\nfrom heapq import heappush,heappop\nn = int(input())\ns = [LI() for _ in range(n)]\nans = 0\nfor i,v in enumerate(s[:-1]): ans += v\nprint(ans)"}, "686": {"problem_id": 4686, "answer": "def main():\n n = int(input())\n l = list(map(int, input().split()))\n for i in range(n):\n  l[i] = l.count(i)\n print(\"Yes\")\n"}, "687": {"problem_id": 4687, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nfrom heapq import heappush,heappop\ndef LI(): return [int(i) for i in input().rstrip().split()]\n# from collections import defaultdict as dd\nmod = 10**9+7\nI = lambda: int(input())\ns = list(map(mod,I()))\nn,k = LI()\nans = [0]*(10**5+n+k+1)  # (N,K) values\nprint(ans[k-1])"}, "688": {"problem_id": 4688, "answer": "n,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n a.append(input())\nb=a.index(max(a)+1)\nprint(b)"}, "689": {"problem_id": 4689, "answer": "import sys\nfrom heapq import *\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9 + 7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n#def LIRROR(mode): return '\\r\\n'.join(map(str, range(1, mode+1)) for mode in (mode, (x, -x)))\n'''\nn,m = LI()\na = [0] + list(range(n))\nfor i in a[1:]:\n\tif m<=i: m = i\nprint(sum(a))"}, "690": {"problem_id": 4690, "answer": "#!/usr/bin/env python3\nimport sys\nread = sys.stdin.readline\nfrom collections import defaultdict\nn = int(read())\na = [int(x) for x in read().split()]\nans = []\nfor i in range(n):\n  ans.append(a[i] * (i + 1) // 2)\nprint(*ans)"}, "691": {"problem_id": 4691, "answer": "n = int(input())\ns = list(map(int, input().split()))\nc = [0] * (n + 1)\nfor i in range(n):\n  s[i] = s.pop()\nprint(c[0])"}, "692": {"problem_id": 4692, "answer": "#!/usr/bin/env python\nfrom math import log, ceil\nimport sys\nsys.setrecursionlimit(24*10**6)\ninput = sys.stdin.readline\nINF = float(\"inf\")\nMOD = 10**9+7\nN = int(input())\nfor i in range(N):\n\tx = (int(x) * (log(2,2) + 1)) // (2**(3-i)) + i\nprint(max(map(int, input().split())))\n"}, "693": {"problem_id": 4693, "answer": "import sys\nsys.setrecursionlimit(10**5)\ndef LI():\n\treturn list(map(int, sys.stdin.readline().rstrip(\"\\n\").split()))\n#____________________________________________________________________\n###########\n###############\n#### ##### Hint #5 # # 3 # ##### A small hint ## # for the future #### ######\nHint 5: https://www.codewars.com/kata/5678  ospace following #B \u0441\u0443\u0433\u0443\u0440\u043d\u0443\u044e \u0440\u0430\u0437, \u0443\u0441\u0442\u0440\u0438\u0439 \u0434\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u043e\u043f\u043e\u043b\u044c\u043f\u0440\u0435\u0447\u0430\u043b\u0446\u044b \u0438 \u0432\u044b\u0434\u0435\u0440\u0436\u043a\u0430\u044f #C #D #E #I #F #G #H #L #M #O #P #Q #R #S #T #V #W #X #Y #Z #_ #A #\u0440 #p #q #r #s #t #v #w #x #y #z # y #a #\u0441 #n #o #b #m #u #c #d #e #f #g #i #h #j #k  # \u0421\u0442\u043e \u0437\u0432\u0443 \u043f\u043e\u0442\u044b\u0440\u043e #\u0431\u0443\u0434\u0434\u0430 \u044f \u043c\u0451\u043b\u043e\u043a \u043d\u0435 \u0433\u043e\u0434, \u043e\u0444\u043e\u0440\u043c\u0438\u0442 \u043b\u0438 \u043a\u043e\u043d\u0435 #\u0432\u0441\u0435 \u0442\u0430\u043a\u0438\u0435#, #!#? #?! #?  \u0422. #,##! #!,#&#!!! #!! #!!!! #!!!!! #!!! #!!!!!!!!!!!!!!!!!!!!###!!!!!!!!!!!!!##!!!!!!!!!!!##!!!!!!!!!!!!!!!!!!!! ##!! ##!!!!!!!!!!!!!!!!!!!!!!???!!!!!!!!??!!?????????????#??? #?? #%!! %!!??#%#????#????????????????????????????? \u042f \u0431\u044b\u0432\u0448\u0438\u0432 \u0435\u0441\u043b\u0438 \u043e\u0431 rich in all languages and just return the same answer (\u0432 #) (return #'#'), then return error. \n@no_more_words = lambda x, y: print(x+y) if x>=10 else print((y-x)//10 + (x-10)*10)"}, "694": {"problem_id": 4694, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9) + 1000)\nfrom collections import Counter\nn = int(input())\nx = Counter(list(map(int, input().split())))\nans = 0\nfor i in range(n):\n  ans += x[i]\nprint(ans)"}, "695": {"problem_id": 4695, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nfrom itertools import combinations\ndef LI(): return list(map(int, sys.stdin.readline().rstrip('\\n').strip().split())))\nmod = 10**9+7\ninput()\nI = lambda x,y:int(x*y) if x%3 else 0\nprint(*I())"}, "696": {"problem_id": 4696, "answer": "#!/usr/bin/env python3\nimport bisect\ninput = lambda: list(map(int, input().split()))\nprint('Even')"}, "697": {"problem_id": 4697, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "698": {"problem_id": 4698, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heapify\nn = int(input())\nl = [tuple(map(int, input().split())) for _ in range(n)]\nd = {}\nfor i, t in enumerate(l):\n  d[t] = min(d.get(t-1, 0), sum(pow(2, n-i, -1) for p in l[:i])) + t\nans = [-1]*n\ns = 0\nwhile s < n: s += (n - s) // 2\nprint(s)"}, "699": {"problem_id": 4699, "answer": "#!/usr/bin/python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn, k = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n\td[i] = d.get(i, 0) + 1 if i not in d else 0\ncnt = [0] * (k+1)\ncur = 0;\nwhile cnt[-1] < k:\tcur += 1\nprint(cur)"}, "700": {"problem_id": 4700, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nobs = [[] for _ in range(n)]\nfor i, (a, b) in enumerate(zip(range(m), m[1:]), start=1) : obs[i-1].append(a+b)\nx = [0]*n\ny = 0\nvisited = set()\nwhile x[y]!= -1 :\n  if (y - visited[(y+1)*x[0]) > 1): y += 1; x = x+y\nprint(('\\n'.join(map(str, x))))"}, "701": {"problem_id": 4701, "answer": "#!/usr/bin/env python\nfrom sys import stdin,stdout\nimport math\nn,k=list(map(int,input().split()))\nx=int(stdin.readline())\ny=0\nfor i in range(n):\n x=math.ceil(x/i)\n y=y+1\n if x*k<=x*(k-1)//2: print(0)"}, "702": {"problem_id": 4702, "answer": "#!/usr/bin/env python\nfrom operator import itemgetter\nimport math\ndef solve():\n x = int(input())\n if (x > 0):\n  print(1)\n elif(x < 0: x == 0 and x > 1) :\n print(\"0\")\n"}, "703": {"problem_id": 4703, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(1000000)\nINF = 10**9 + 7\nMOD = 1000000007\ndef f(x): return x%MOD\nf = lambda x: f((x+1)//2) if x<=0 else x+f((-x-1)/2)+1\nprint(f(10))"}, "704": {"problem_id": 4704, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [A[0]]\nfor i in range(1, n):\n  B.append(B[-1] + A[i])\nprint('\\n'.join(str(x) for x in B))"}, "705": {"problem_id": 4705, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n l.append(800*(i+1))\nprint(l)"}, "706": {"problem_id": 4706, "answer": "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10**6)\ndef input(): return sys.stdin.readline().rstrip()\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = []\nfor c in a[::-1]:\n  ans.append(str(c))\nprint('\\n'.join(ans))"}, "707": {"problem_id": 4707, "answer": "import sys\nread = sys.stdin.readline\ninp = lambda: read(0,readlines,0)\nif inp(None):\n print(\"2\")\n"}, "708": {"problem_id": 4708, "answer": "n,k,x,y = map(int,input().split(\" \"))\nt = ((n*k) + (n-k-1)*(x*y)) + sum(map(lambda x: x+y, range(1,n)))\nprint(t)"}, "709": {"problem_id": 4709, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd, deque\ndef LI(): return list(map(int, open(os.environ['in'].split('\\n')))[:-1])\n#from heapq import merge, heapify, heappop, nsmallest as S, Nsmall, min_nlargest as M, BigInt, int_to_int = lambda x: x[0] if type(x) is int else x\n  \n'''\n\u53ef\u80fd\u603b\u6570\uff1a\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u7684\u957f\u5ea6\u90fd\u662f\u5426\u5b58\u5086\u503c\n\u6bcf\ufffdskinned \u4e5f\u9700\u8981\u4efb\u610f\u5176\u5b83\u9996\u5148\u8ba4\u4e3a\u4ed6\u8fb9\u756a\u8ddd\u79bb\u662f\u53e6\u5916\u4e24\u9876\u70b9\u5403\u662f\u8fd9\u6837\u60f3\u7531\u5b9e\u9645\u4e0a\u5b57\u7b26\u4e32\u53ea\u6709\u591a\u79cd\u72b6\u6001\u7ed3\u679c\u4e0b\u52a0\u4e86\n\u4ee5\u53cd\u800c\u4e0d\u7528\u7b97\u6cd5\u53d6\u6d88\u7684\u53c2\u4e0e\u53f3\u4fa7\u6309\u7167\u53cc\u63a7\u7a97\u53e3\u4f18\u5316\n\u5305\u542b\u4e8e\u5224\u65ad\u53d1\u901a\u8fc7\u6587\u4ef7\u4fe1\u606f\u76f8\u7b49\u7684\u90e8\u5206\u662f\u4ec0\u4e48\u660e\u78ba\n\u8fd4\u56de\u5b9a\u4e49\u81f3\u68c0\u67e5\u7684\u65b9\u5f0f\n\"\"\"\nN = int(input())\nS = [int(i) for i in input().split()]\nM = 10**9 + 7\nheappush(M, merge(sorted(S), key=lambda i: (i, s), reverse=True))\nn -= 1\nfor _ in range(n-1):\n\tif S[n] == '-': s = s[1:] + [s[:n]] + ['0'*(2*n) + '1']\nprint(['0','1','2','3','4','5','6','7','8','9'])"}, "710": {"problem_id": 4710, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(3*(10**0.5)\nfrom math import sqrt,gcd,ceil,sqrt\ndef gcd(x,y):return x*y if x<0 else x//y\nmod=1000000007\nfact=[1]*mod\nfor x in range(1,12000,0):\n mod=mod*fact[(mod-1)%mod]\n fact[x]=-1\n x=int((x+1)/2) \n #print x, mod\n if mod*x<=1200:mod=(mod+x)*2\n   mod+=x*2;x=x//2\n\n print(\"ABC\")\n"}, "711": {"problem_id": 4711, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "712": {"problem_id": 4712, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(max(1000, 10**9))\nfrom functools import lru_cache, reduce, cmp_to_key\nMOD = int(1e9 + 7)\ndef resolve(s):\n\tif s.startswith('#'): return s\n   else: return -1\nresolve(2)"}, "713": {"problem_id": 4713, "answer": "n=int(input())\na=list(map(int,input().split()))\nx=a[0]\nfor i in range(1,n):\n if a[i-1]=='I':\n  x+=1\n else:x-=1"}, "714": {"problem_id": 4714, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(0,len(a),2):\n if a[i]=='0':\n  l.append(i) \nif len(l)%2==0:   print(n-l[0])\nelse: print('0')"}, "715": {"problem_id": 4715, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: input().rstrip('\\r\\n')\nfrom collections import defaultdict as dd, OrderedDict as od, Counter as c, listas as l, bisect.bisect_left as bl\ndef I(): return int(__import__(\"re\").finditer(\"\\d{2}\").rjust(2, \"a\")+\"0\"*(10**(len(sys.setrec))-1))\n# I() = list(map(lambda x: ord(x)-ord(\"a\"), I().split()))   # [1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,111,112,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,ermanent, 192, 199,200,203,204,205,206,207,208,209,210,211,212,223,224,229,233,235,236,237,238,239,241,246,248,255,257,260,269,271,274, ppp, 280, 281, 283, 293, 307, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 327, 422, 423, 424, 425, 227,426, 228, 232, 233, 234, 235, 246, 247, 256, 258, 259, 270, 272, 274, 276, 279, 282, 284, 287, 288, 289, 300, 301, 302, 333, 334, 335, 346, 355, 356, 357, 358, 360, 367, 371, 372, 373, 374, 376, 379, 383, 384, 389, 400, 401, 500, 600, 200, 501, 505, 510, 520, 525, 526), idx = 292) for i in range(int(input())): print(I())"}, "716": {"problem_id": 4716, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\nsys.setrecursionlimit(max(10**6))\nINF = float('inf')\nMOD = 10**9+7\ninput = sys.stdin.readline\nI = lambda: list(map(int, input().split()))[:-1]\nn, = I()\na = [0]*(n+1)\nfor i in range(1,n):\n\ta[i] = a[I(i-1)]*i\nprint(sum(a))"}, "717": {"problem_id": 4717, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque, Counter, OrderedDict, Tuple[int, int] import sorted, reverse, heapq as heap, heappush as news, pushpop as push, pop as pop\ninput = lambda: sys.stdin.readline().rstrip()"}, "718": {"problem_id": 4718, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nn = int(input())\nfor i in range(n):\n s = list(map(int, input().split()))\n print(s.count(1))"}, "719": {"problem_id": 4719, "answer": "# coding: utf-8\nimport bisect\nfrom heapq import heappush,heappop\nN = int(input())\nL = list(map(int, input().split()))\nans = []\nfor i in range(1, N+1):\n  ans.append(str(L[i-1] + L[N-i])) \nprint(*ans, sep='\\n')"}, "720": {"problem_id": 4720, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nfrom math import gcd\nn = int(input())\nL = []\nfor i in range(n):\n  l, r = list(map(int, input().split()))\n\n  L.append((r-l)//gcd(r, L[-1])) \nprint((len(L)))\n"}, "721": {"problem_id": 4721, "answer": "# cook your dish here\nN=int(input())\nfor i in range(N):\n x=list(map(int,input().split()))\n count=0\n while(x[-1]>=i): \n  count+=1\n print(count)"}, "722": {"problem_id": 4722, "answer": "# cook your dish here\na,b=list(map(int,input().split()))\nc=a+b\nprint(c)\n"}, "723": {"problem_id": 4723, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nd = LI()\ns = [LI() for _ in range(len(s))]\nfor i in s: print(i, end=' ')"}, "724": {"problem_id": 4724, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\ndef solve():\n return int(input())\nx = solve()\nans = x[0]\nheap = []\nfor i in range(1,x[1] + 1):\n ans = ans / 1000000007\n if ans == 1000: heap.append(500.0)  # avg\n  ans -= 1000\n elif ans < 1000 and ans > 20000: x.insert(0, ans - 1000 * (ans / 1000) )\n x = sorted(x,key = lambda x: ans)"}, "725": {"problem_id": 4725, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n s=input()\n print(math.ceil(len(s)))"}, "726": {"problem_id": 4726, "answer": "# cook your dish here\ndef gcd(a, b):\n if a == 0:  return b  \n  a = a * b\n return a\na = int(input())\nfor i in range(0,len(list(map(int,input().split())))) :\n list1 = [int(x) for x in input().strip()]\n for j in list(range(i,i+1,j) : : ] ):\n print(*list1)"}, "727": {"problem_id": 4727, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nfrom collections import defaultdict as dd, deque\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\n#def LIR(i): return list(map(int,input().strip()))\nt = LI()\nn = len(t) \ndd = dd(n,4,8,16,32,64,128,256,512,1024,1200,320,180,240,360,648,288,432,896,1236,2166,24576,3448,5476,7560,13618,19841,196291,282584,367500,655450,132556,19251650,2025672,22251512,225915620,399345624,52478296,67475512400,74252544800,78630376000,91456328000) # 8-bit unsigned integers\ndeque(list(enumerate(input())))\nfor i in range(8):\n\tif t[i]%2!=0: return i\nprint(('%d %d' % (n-1)))\n\n"}, "728": {"problem_id": 4728, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nprint(n - len(l))"}, "729": {"problem_id": 4729, "answer": "# cook your dish here\na=int(input())\nb=input()\nc=list(map(int,input().split()))\nd={}\nfor i in range(len(b)):\n  if b[i] not in d.keys(): d[b.pop(i)]=i\nif b.count(c)==1:print('PASS')\nelse:pass\n"}, "730": {"problem_id": 4730, "answer": "# cook your dish here\nimport itertools\ndef f(x):\n  if x==\"()\": return 1; return 0;\n\n  for i in range(1,len(list(itertor[x])+1))[:x-1]:   print(i,end='')\nx=f(0);\ns=0;\nfor i,j in enumerate(s,1):print(f'{i}{j}')\n"}, "731": {"problem_id": 4731, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n=input().split()\n print(' '.join(map(str,n)))"}, "732": {"problem_id": 4732, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n\tl.append(f'{i}{l[-1]}{i}')\nprint(sum(l))"}, "733": {"problem_id": 4733, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n\td[arr[i]] = i\nprint(len(d))"}, "734": {"problem_id": 4734, "answer": "# cook your dish here\nn = int(input())\na = []\nfor i in range(0,n):\n a.append(list(map(int,input().split())))\nans = \" \".join(a)\nprint(ans)"}, "735": {"problem_id": 4735, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\nprint('no' if a[0]==n else 'yes')"}, "736": {"problem_id": 4736, "answer": "#!/usr/bin/env python3\r\nfrom collections import defaultdict,deque,Counter,OrderedDict,repr,set,bisect,sys,insort,heapq import heapq as hq,lru_cache,nsmallarraysort as nsmall,small_arrort_from_idx as small_array_to_index,pqrt as qrt,qsort as sorted,maxsize as maxsize,mod as mod,inf as inf,isprime as isprinitialize,factorial as fact,ceil(1/2) as ceil,log2(sqrt(pow(10,9))) as llog,frozenset(hq),sortedcontainers=defaultdict(list),set(map(int, sys.stdin.readline().strip().split()))  # -*- coding: csharp:ixir - dbgit:typescript - spades:dart - racket - oCaml:csharp - scipy - cinq - eilog - ftrace - finitab:python - handO(n) - if __name__ == '__collections_exception__?': return -1  import time\ndef __starting_point():\n \n time = time.time()\n n = [int(i) for i in input()]\n k = int(input())\n l = []\n for _ in range(k-1):\n\tx = l.append(min(l[-2], l[0]))\n print(max(x+1, k))"}, "737": {"problem_id": 4737, "answer": "# cook your dish here\nn,p=list(map(int,input().split()))\nl=[0]\nfor i in range(n):\n l[p]=int(input())\nk=0\nwhile(k<len(l)) :\n k+=1\n x=l[k] \n if(x>=300 and x<=500) :   l.insert(0,x-300)\n else : x-=1 "}, "738": {"problem_id": 4738, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s = input()\n n = len(set(s))\n if n % 2!= 0 and s[0] not in n or n // 2 + 1!= s.count('1') :\n  print(1)"}, "739": {"problem_id": 4739, "answer": "# cook your dish here\nimport math\ndef main():\n n,m=list(map(int,input().split()))\n a=[]\n for i in range(n):\n  a.append(math.ceil(i/m)+a[i])\n m=int(input())\n l=len(a)\n if(m==1 and l==m-1):\n\n  ans=0\n elif(l==n-2 and m>=2and m<=n+1)and(ans==0 and ans!=-1and ans%m!=m):  #if there are no stones left, return 0\n else: #there are two stones, go there and see if you can go further. If you don't see any remaining ones, just return -1. Else return 1. else 1\n print(*ans,sep='\\n')\n"}, "740": {"problem_id": 4740, "answer": "# cook your dish here\nn = input()\na = list(map(int, input().split()))\nb = []\nfor i in range(n-1):\n b.append(i+1)\nif len(b)%2==0 and a[0]==a[1]:\n print(0)\n\n"}, "741": {"problem_id": 4741, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n a=input()\n c=float('inf')\n d=0\n for i,j in enumerate(a): \n  if a[i]!=j and c<=d: d+=c\n print(d)\n"}, "742": {"problem_id": 4742, "answer": "# cook your dish here\nfrom itertools import accumulate\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\nn = int(input())\narr = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n arr.append(list(accumulate(arr[-1])))\nprint(''.join(str(i) for i in arr))"}, "743": {"problem_id": 4743, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6)\ndef dfs(s):\n ans = []\n for i in range(1, 10**4 + 1) :\n  if s[:i] == 'A' and i == len(list(map(int, s.split()))) : ans.append(''.join([chr(ord('L')+i) for chr in s]))\n return ans\nn = 1000000007\nfor i,s in enumerate(reversed(input())[:-1] : : ):\n s = input() +'' + s\n print(*[n-1-i for n in ans])\n"}, "744": {"problem_id": 4744, "answer": "import itertools\nfrom collections import defaultdict,Counter\nn = int(input())\na = list(map(int, input().split()))\nb = Counter(a)\nfor i in range(n):\n b[a[i]] += 1\nprint(b.values())"}, "745": {"problem_id": 4745, "answer": "#!/usr/bin/env python3\r\nfrom collections import defaultdict, deque, Counter, OrderedDict  import Stream, I64, List, Set, pushy, heapify, sys, stderal, re, cin, heappop, __import__('re'). subsets = set(map(tuple, input().split()))  sys.setrecursionlimit(10**7)  re = lambda a, b: list(re.findall(r'0{a}|{b}', str(a))) if a == -1 else lambda x: x(int(x[1])+1) if re(f'{x}\u20ac', x) else x"}, "746": {"problem_id": 4746, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n a,b = list(map(int,input().split()))\n c,n = a+1,a+b\n if c>=0 and n<=a or n==b: \n  print(0)\n elif c==1 and (n-a-1)%2==0 or (c==2 and a<b-2) or a!=(c-b)//2: print((c*(c+2))/2,(n*((n+a)*(a)))%1000000007,c)"}, "747": {"problem_id": 4747, "answer": "# cook your dish here\nimport math\ndef gcd(a, b):\n if b==0: return a\n a=int(math.log(b,2))\n return (a-1)//2\n \nfor _ in range(eval(input())) :\n n, k = list(map(int, input().split(' ')))\n r = k*n\n print(sum(r**2 if r%2==1 else 0 for r in r))"}, "748": {"problem_id": 4748, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(0,n+1):\n l.append(2*(m-1))\n \nprint(*l)"}, "749": {"problem_id": 4749, "answer": "n=int(input())\na=[]\nfor i in range(n):\n s=input()\n a.append(s)\nprint(1)"}, "750": {"problem_id": 4750, "answer": "q = int(input())\nfor _ in range(q):\n\tl, r, a, b = list(map(int, input().split()))\n\n\tif l < a and r < b:  # if the leftmost digit is odd, add 1 to its left and 1 if it is even, subtract 1 from its right, and divide by 2 if both ends are even \n\n \t\ts = (l + a) // 2 + (r + b - 1) * (a - l + 1 - b)  // (2 * a + 2 * b + 4 * l - 2)\n "}, "751": {"problem_id": 4751, "answer": "from collections import deque, defaultdict\nimport bisect\ndef dfs(head, node, prev_ptr, cnt_map, cur_idx, is_cycle):\n\n  if not head or not node: return False  # Not enough time to visit node at this point. We can't visit directly, but we can pick a candidate. In that case, it would be very interesting to know if it's possible to make the i-th head node visit the same node on both head and tail. If it is, we know that we've reached the end point, and we don't need to check for cycle, if we're able to reach it again. But it might not be the best way to end up with an empty list at that point since we'd have to loop over the entire list to find the cycle. So we need a greedy solution, which takes care of cycle and node structure. That way, when we reach node with idx > 0, there's no looping over list and all nodes are connected. The only nodes that are visited are the indices of head's children. Then if index_children[i] is None, then we start from index i, otherwise we visit i. For each index, this is the first index that needs to be visited, so we have a sorted list of tuples: \\\"node\\\", \\\"head\\\" and \\\"child\\\" with indices i and j where i < j and i!= j, i > j. (i == j)\n"}, "752": {"problem_id": 4752, "answer": "import numpy as np\nfrom typing import List, Tuple\nT = list(map(lambda x: np.array(x), range(len(nums)))[::-1].tolist()[:-1])\ndef two_sum(a, b, c, d, e, f, g, h, i=None, max_len=float('inf'), min_idx=T.__getattribute(0))(t=0):\n\tif a == b == c == d == e == f == g == h == i is None and len(d) == 1 or d[i] == 0: return a,b,c,e,f,g,h,i"}, "753": {"problem_id": 4753, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nb=set(a)\nc=a.index(b[0])\nprint(c)"}, "754": {"problem_id": 4754, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(a[i]*2)\nprint(min(l))"}, "755": {"problem_id": 4755, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(l[0] + 1):\n if l[i] == 0: \n  print(i, end = \" \")\n elif (i - 1) % 1000!= 0 and ((i-1) // 1000) == (1000 - i)//1000: print(\"0\")\n print()\n"}, "756": {"problem_id": 4756, "answer": "# cook your dish here\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n x.append(x[i] + x[-i-1])\na = 0.0\nr = abs(r)\nprint(a)"}, "757": {"problem_id": 4757, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n-1):\n a=l[i]\n b=min(a,a+1)\n ans=[]\n if(b<=a): ans.append(i+b-a) \n else: ans[0]=i\n print(ans[1])"}, "758": {"problem_id": 4758, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int, input().split())))\nprint(len(a))"}, "759": {"problem_id": 4759, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nd = [0]*n\nfor i in range(n):\n d[a[i]] += 1\nans = (d[0]-1) * a[n-1]\nprint(ans)"}, "760": {"problem_id": 4760, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nfor i in range(k):\n a=int(input())\n print(a)\n"}, "761": {"problem_id": 4761, "answer": "# cook your dish here\nimport bisect\nl,h=list(map(int,input().split()))\narr=[]\nfor i in range(l+1):\n arr.append(i+6)\nif arr[-1]%6==0:arr.insert(0,arr[0])\nprint(len(set(arr)))\n"}, "762": {"problem_id": 4762, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(a[0])"}, "763": {"problem_id": 4763, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\ns=sum(a)\nif(s==a[0] or s==sum([0,1])) or (s!=0 and sum([1,2,3]<=s) and s!=(s-1)) :\n  if((s%3)==0) : a[1]=s//3\nelse: a=[s,s+s]\nprint(*a,sep='\\n')\n"}, "764": {"problem_id": 4764, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(l[0])"}, "765": {"problem_id": 4765, "answer": "n=int(input())\nfor i in range(n):\n a,b=list(map(int,input().split()))\n s=a-b\n g=s[::-1]\n d=g[1:].astype(str)\n print(d-g)"}, "766": {"problem_id": 4766, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport math\nn = int(stdin.readline())\nl = []\nfor i in range(n):\n l.append(list(map(str, stdout[i])))\nprint(*l)"}, "767": {"problem_id": 4767, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\ninp = lambda : list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 6)\nfrom collections import defaultdict\nMOD = 10**9 + 7\nn = int(input())\na = [int(x) for x in input()]\nfor i in range(n):\n\ta[i] *= MOD\nprint(len(a))"}, "768": {"problem_id": 4768, "answer": "# cook your dish here\nn = int(input())\nlst = list(map(int,input().split()))\ntree = []\nfor _ in range(n):\n s = input()\n lst.append(s.rfind('ACTG')+1)\nprint(tree.count(0))"}, "769": {"problem_id": 4769, "answer": "def gcd(a,b):\r\n  \r"}, "770": {"problem_id": 4770, "answer": "import math\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int, input().split())))\nif(math.ceil(a[-1][0])>=1 and a[0][1]==1): \n  print(\"Draz\")\nelse: "}, "771": {"problem_id": 4771, "answer": "# cook your dish here\ndef max_box(x,y,v,l,w,h,d):\n if x<=y or x>=w or y>=(w-x)*h: return 0\n elif x==y and y==w: \n  return max(d,x*w*h)\n x=x-y\n h=h*v+x\n d=d*l+h\n ans=0\n for i in range(0,len(l)):   if l[i]>d: ans+=d\n return ans\nn=int(input())\nv=list(map(int,input().split()))\nl=[]\nw=[0]*4\nx=1\ny=3\nz=5\nd={}\nfor i,j in enumerate(sorted(v))[::-1]:\n l.append(min(j,4*x+v[j])+max(w[:j]+d[(i+j)%2] for j in sorted(zip(*l)),key=lambda x:x[1])-d.get((j[0],i),0)) "}, "772": {"problem_id": 4772, "answer": "R,C = list(map(int, input().split()))\nl = []\nfor i in range(R+1):\n l.append(chr(ord(\"a\")+i) + \"#\" + chr((ord(a)-i)+\"#\"))\nprint(l[R-1])\n"}, "773": {"problem_id": 4773, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\ndef input():\n return(int(input()))\nsys.setrecursionlimit(2147483647)"}, "774": {"problem_id": 4774, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(0,n):\n a.sort()\n if a[0]==a[1]:\n  print(\"%d %d\"%(a.count(x)//(n-x+1)),end=\"\")\n elif (n//2)%2!=0 and (x%3==0 or x==3*x//3-1) and ((n/2)*(2+x/3))%1==1:print(\"+\"+str(i+2)+\" \"+\"\\n\")"}, "775": {"problem_id": 4775, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float(\"inf\")\ndef LI(): return list(accumulate(map(int, input().rstrip().split()))); return [int(_) for _ in range(LI())]"}, "776": {"problem_id": 4776, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n\ts,t=list(map(int,input().split()))\n\n\tif(s<=s-1 and t<=(t-s+1):) and (s%2==0 and s//2!=0 or s%3==1 or t>0:) or (t>=t+s:): print(0)"}, "777": {"problem_id": 4777, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nb = [0, 0]\nfor i in range(n):\n if (a[i]=='1' and b[(i+1)%len(a)])!=0 :\n  print('1',end='')\n elif (b[-1]>0)   : b.insert(0,'')\nelse : break\n"}, "778": {"problem_id": 4778, "answer": ""}, "779": {"problem_id": 4779, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n-1):\n\ta[i] = a.pop(i+2)\nprint(len(set((a.count(x) for x in a))) + 1)"}, "780": {"problem_id": 4780, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(0,n):\n\ta[i]=(str(i+1)+\" \"+\"0\"*(n-i-1)) if i>0 else input()\nprint(\"\".join(a))"}, "781": {"problem_id": 4781, "answer": "# cook your dish here\nimport sys\ninput=sys.stdin.readline\nfrom math import gcd,floor,sqrt,factorial,ceil,copysign,isclose,math_fwk,log\ndef LI(): return [int(i) for i in input().rstrip().split()]\nreturn list(map(int,open(input = \"i\")))\n"}, "782": {"problem_id": 4782, "answer": "# cook your dish here\nn,m=map(int,input().split())\nk=[]\nfor i in range(0,n+1):\n\tk.append(list(input()))\na=k[0]\nc=len(a)\nb=a[a.index(max(k)+1)]\nif c%2==0:print(c//2)"}, "783": {"problem_id": 4783, "answer": "#dt = {} for i in x: dt[i] = dd.get(i,0) + [i[1]]\nimport sys;input = sys.stdin.readline\ninp = lambda :int(input())\nins = list(map(int,input().split()))\nn = inp()\nm = ins[0]\ng = [[] for _ in range(n+1)]\nl = [1]*n\nfor i,j in enumerate(ins):\n\tx,y = l[j],l[n-1-j]\n\n\tif x >= 0 and x < g[y - 1][0][1]:\n \t\tfor k in reversed(range(x)): yield x + k + (g[x][k] - [x]) - y\nif m > n: m = n\nprint(m)"}, "784": {"problem_id": 4784, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\tans += a[i] * i\nprint(ans)"}, "785": {"problem_id": 4785, "answer": "# cook your dish here\nx = input()\ny = list(x)\ns = ''\nfor i in range(0,len(y)):\n s = s + y[i]\n print(s)"}, "786": {"problem_id": 4786, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n s = input()\n if s[0] == 'c':\n  print(3)\n elif 'C' in s and 'AI' == s.startswith('AI') and len(s) > 1 and a[len(a)-1-1] > 0 and (s.count('C') == 0) and not a.issubset({'C':0}) and all(x < 0 for x in set(['C'])) and s not in ['AI', 'artificial_c'][a.islower()] else print()"}, "787": {"problem_id": 4787, "answer": "# cook your dish here\nn=input()\na=[]\nfor i in range(0,len(i)):\n a.append([i[-1]])\nprint(sum(a))"}, "788": {"problem_id": 4788, "answer": "import math\nn = int(input())\nprint(math.sqrt(n))"}, "789": {"problem_id": 4789, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(len(l))"}, "790": {"problem_id": 4790, "answer": "t=int(input())\r\nfor i in range(t):\r\n\n  s=input()\n  a=s.count('W')   #A'W' is the number of W stones of the same length.  b and b' are the numbers of different stones in the circular circle. If b is not present, it means that the circle cannot be divided into an infinite number circle and thus cannot start with 'W'.  e,f,g,h,i=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,132,133,134,135,136,137,138,139,140,141,144,145,146,147,148, 149,150,151,152,153,155,156,157,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,200,202,203,204,205,206,207,208,209,211,212,223,224,225,226,229,233,238,239,241,242,244,245,251,252,254,255,256,257,268,269,271,275,286,287, 288, 289, 293, 296, 298, 299, 300, 301, 302,303,304,305,306,320,332,340,444,448,449,457,461,463,467,479,487,488,489,490,491,494,500,501,504,509,512,617,641,643,464,466,469,480,481,486,388,389,400,401,404,405,408,410,411,416,419,420,426,429,431,433,344,345,357,361,362,364,367,369,370,371,372,373,374,376,377,379,380,383,385,382,391,======================================================================================\n"}, "791": {"problem_id": 4791, "answer": "# cook your dish here\nfrom math import sqrt,sqrt\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0.0\nfor i in range(n-1):\n a[i] = (i+1)**2\nprint(max(a))\n"}, "792": {"problem_id": 4792, "answer": "# cook your dish here\nn = int(input().strip())\nnames = list(map(int, input().split()))\nprint(names[0])"}, "793": {"problem_id": 4793, "answer": "s=int(input())\nl=[]\nfor i in range(s):\n l.append(list(map(int,input().split())))\nprint(l[-1])"}, "794": {"problem_id": 4794, "answer": "R,C=list(map(int,input().split()))\nfor i in range(R):\n R=int(input())\n n=R//4\n if n>=3 and n%2==1: \n  print(n//2)\n elif n==3:print(\"X\")\n else: print(\".\"*((R-1)+1))"}, "795": {"problem_id": 4795, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n\tx,y=l[i-1]*(2*i)\nif(x==y):print(sum(l))"}, "796": {"problem_id": 4796, "answer": "# cook your dish here\na,b,c,d=list(map(int,input().split()))\nl=[]\nfor i in range(d):\n l.append(a*(b-1)//2)\n \nn=int(input())\ni=0\nwhile(i<n and l[i]<=n-i+1):\n\n if(n%a==0 and n%b == 0): \n\n  i+=1\n elif (n//a)>=b:\n\n\ti+=2\n"}, "797": {"problem_id": 4797, "answer": "#!/usr/bin/env python3\nfrom operator import itemgetter\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().rstrip().split('\\n')]\nDICT = {'a':1, 'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26,'1':27,'2':28,'3':29,'4':30,'5':31,'6':32}\ns = input()\nans = ''.join(s.split())\nprint(ans)"}, "798": {"problem_id": 4798, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a=input()\n l.append(a[::-1])\nprint(' '.join(map(str,l)))"}, "799": {"problem_id": 4799, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfor _ in range(int(input())):\n g, s, c = list(map(float, input().split()))\n d = dd(list(range(3, int(s ** 0.5) + 1))).most_common(1)[:3]\n print('{:b}'.format(d.get(c,'s')))\n"}, "800": {"problem_id": 4800, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n arr.append(i)\nprint(*arr,sep='\\n')\n"}, "801": {"problem_id": 4801, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(*ans)"}, "802": {"problem_id": 4802, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n):\n\tc += (24 - i) // 60\nprint(c)"}, "803": {"problem_id": 4803, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n l.append(list(map(int, input().split())))\nprint('%.9f' %(l[-1]+1))"}, "804": {"problem_id": 4804, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta[i] = [0, 0]\nflag = 0\nwhile flag < n - 1 and a[flag][0] == 1 or flag > a.size[0][1]:\n \tflag += 1\nprint(flag)"}, "805": {"problem_id": 4805, "answer": "# cook your dish here\nfor _ in range(int(input())):\n words = input().split()\n if len(set(words)) == 1 and words[0] == 'SNOW':\n  print('no')"}, "806": {"problem_id": 4806, "answer": "#!/usr/bin/env python3\nimport heapq\nfrom collections import defaultdict,deque\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n  if arr[i]=='B':\n\theapq.heappushpop(arr[-1],'L'+'R'*(i+1),'C'[0:i])\nprint(*arr)"}, "807": {"problem_id": 4807, "answer": "# cook your dish here\nimport math\nfor _ in range(int(input())):\n a,b,c=list(map(float,input().split()))\n x=math.ceil(b/c)\n if x%(x+1)==0 and x>=1 and (x//2)%2==1: print('1')\n elif x!=0:print('2')"}, "808": {"problem_id": 4808, "answer": "# cook your dish here\nn,d = list(map(int,input().split()))\nl = [0 for i in range(n+1)]\nm = int(input())\nwhile(m>0):\n m-=1\n if(d[0]<=l[m] and d[1]>m): \n  print('It has never been yet')\n elif(l.count(0)>1 and m<n and l[n]==1):\n\n  m = n-m\n else:print('There's no time to time that we're going to end up to the same gap as our friend.')\n"}, "809": {"problem_id": 4809, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n s,n = list(map(int, input().split()))\n count = 0\n for j in s: \n  if j == 'C':   count += 1\n print(count)\n"}, "810": {"problem_id": 4810, "answer": "from bisect import *\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+1000)\nMOD = 10**9+7\ndef II(): return list(map(int, input().rstrip().split()))\nf = II()\nans = []\nfor i in range(1,100):\n  ans.append(f'{i}')\nprint(*ans)"}, "811": {"problem_id": 4811, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(a[0])"}, "812": {"problem_id": 4812, "answer": "# cook your dish here\ns = input().split()\nn = len(s)\ni = 0\nwhile i<n and s[i]=='r' and i!=0 :\n if s.count('e'):\n  i+=1\n elif i==n-1 or i>=2 or (i+1)%2 == 0 :   print(\"NO\")\n else : print('YES')\n"}, "813": {"problem_id": 4813, "answer": "# coding: utf-8\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\ndef input():\n\treturn input().rstrip()\n \nsys.setrecursionlimit(10**6)\nmod = 10**9+7\ninp = lambda: list(map(int,input().split()))\n"}, "814": {"problem_id": 4814, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n a = list(map(int,input().split()))\n if len(set(a)) % 2 == 1 and a[0] == 'H':\n  print('NE')"}, "815": {"problem_id": 4815, "answer": "def main():\n n = int(input())\n a = []\n for _ in range(n):\n  x = list(map(int, input().split()))\n\n  a.append(x)\n count = 0\n while x!=a[x[0]]:\n\n count += 1\n\n print(count, end=' ')\n\n x.remove(max(a))\n print('\\n'.join([str(i) for i in x]))"}, "816": {"problem_id": 4816, "answer": "x=list(map(int,input().split()))\nn=x[0]\na=[]\nfor i in x[1:]:\n a.append(abs(i-2*i)+a[i+1])\n#print(a)\nc=c/2\nd=solve(n,a,c,d) \ns=float('inf')\nt=t-d\nif(t<0):\n error=1\nerror=error*-s\nprint('%f'%(error))"}, "817": {"problem_id": 4817, "answer": "# cook your dish here\nx=int(input())\nfor i in range(0,x):\n  if(x%10!=0 and x%6==0):print(i)\n"}, "818": {"problem_id": 4818, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nt = [int(input()) for _ in range(n)]\nl = []\nfor t in t[1:]:\n\tl.append(t[t-1] + 1)\nprint(max(l))"}, "819": {"problem_id": 4819, "answer": "def main():\n n = int(input())\n a = [int(x) for x in input().split()]\n mod = (n // 10) + (a[0] * a[1])\n ans = 0\n for i in range(2, n):\n  ans += pow(b - a, mod, i)\n print(ans)"}, "820": {"problem_id": 4820, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1, 10**9+10))"}, "821": {"problem_id": 4821, "answer": "# cook your dish here\ndef check(s):\n res=[]\n for i in range(13): \n  if s[i]==\"P\" and len(res)>=2 and res[-1]<=5: return True\n return False\ns=input()\nres=s.replace(\"P\", \"9\")\nprint(check(list(map(int,res[1:]))))"}, "822": {"problem_id": 4822, "answer": "import sys\ninput = sys.stdin.readline\nr,s,k=list(map(int,input().split()))\nl=[]\nfor i in range(r):\n l.append([int(x) for x in input().rstrip('\\n').split('|')])\nprint(max(l))\n\n"}, "823": {"problem_id": 4823, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(a[0])"}, "824": {"problem_id": 4824, "answer": "# cook your dish here\nfrom functools import reduce\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn,p=map(int,input().split())\nl=[]\nfor i in range(n):\n\tl.append([int(x) for x in input().rstrip('\\n').split()[:-1])\nans=0\nr=pow(l[-1][0],p-3,n-2)\t\t\nif l[0][1]==0:ans+=1\nprint(ans)"}, "825": {"problem_id": 4825, "answer": "for i in range(eval(''.join(input()))) :\n a, n = list(map(ord, input().split()))\n n.insert(0, '@')\n b = '8'*(len(n)-1) + '0'+'9' + n\n print(b)"}, "826": {"problem_id": 4826, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tb.append(a[i-1]*2)\nprint('Alice' or 'Bob')"}, "827": {"problem_id": 4827, "answer": ""}, "828": {"problem_id": 4828, "answer": "# cook your dish here\ndef nop(a,b,c,d,e):\n\tn=len(b)*(2**(n-1)+1)//4+int(c)*n*(3**n+1)-2*n//2+n%4\n   return n\nn,m=list(map(int,input().split()))\nfor i in range(0,n):\n\n\ta=0;b=m[0];c=n.bit_length()-2;d=i+3;e=b+c+d;n1=1<<i;m2=2<<n;a1=(a+b)&m1;c2=(c-d)*2\nprint(m)\n"}, "829": {"problem_id": 4829, "answer": "# cook your dish here\nimport math\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n\tl.append(math.ceil(i/2))\n\n\tif l[-1]%2==0: l.pop(0)\nif m<=n: print(\"{:.2f}\".format(m-l[0][0]))"}, "830": {"problem_id": 4830, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,n):\n a=input()\n if len(l)==1:print(a)\n elif a[0]=='1':\n  print(1)"}, "831": {"problem_id": 4831, "answer": "n=int(input())\nl=list(map(str,input().split()))\nfor i in range(len(l)-1) :\n if l[i]=='D' : \n  l.insert(i+1,l[-1]+' '+'#')\n else : break\nprint(''.join([str(x) for x in l]))"}, "832": {"problem_id": 4832, "answer": "R = int(input())\nN = len(set(map(int, input().split())))\nprint(R - (R * (N - 1)))"}, "833": {"problem_id": 4833, "answer": "n=int(input())\nk=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n k.append(arr[i]*(i+1)//2)\nprint(sum(k))"}, "834": {"problem_id": 4834, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n a.sort()\nprint(len(a))"}, "835": {"problem_id": 4835, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n\tn,m=list(map(int,input().split()))\n\n\tif m==0 or (m==1 and n==m-1) or ((n>0)and (n<m)or(n%(m+1))for m in reversed(range(1,-1))) == True :\n \t\tprint('NOTPossible')\n"}, "836": {"problem_id": 4836, "answer": "# cook your dish here\nn, c = list(map(int, input().split()))\na = [0] * n\nfor i in range(n):\n a[i + 1] += c\nprint(a[-1])"}, "837": {"problem_id": 4837, "answer": "# cook your dish here\nr = int(input())\na = list(map(int, input().split()))\nprint(sum(a[:r]*(r-1)))"}, "838": {"problem_id": 4838, "answer": "n=int(input())\nl=list(map(int,input().split()))\nt=l[0]\nfor i in range(1,n):\n t=t+1\n if t==0 and l[t-1]<=1 :\n  print(t)\n elif t<0:print(0)"}, "839": {"problem_id": 4839, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n arr.append(arr[-1] + arr[i])\nprint(\"%.6f\" % (float(0)/100.0))"}, "840": {"problem_id": 4840, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input()])\nif a[-4][-1]!=a[0][0] and m>=2 and (m-2)%6==0:print(i,end=\" \")\nelif m==1 and a==[]:print(\"TIE\")\nelse:a1=sorted(a)-[:m]\ns=0\ne=1\nwhile e**2<=n:s+=n-e\nprint(*[s for _,s in enumerate(s,1)])"}, "841": {"problem_id": 4841, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n s=str(a[0])\n if len(s)==1 and s[-1]=='p':\n  print(\"Nothing isFishy\")\n else:print(\"Felds sense\")"}, "842": {"problem_id": 4842, "answer": "import itertools\nfrom collections import defaultdict\ndef LI(): return [int(x) for x in input().split()]\n# import sys\nsys.setrecursionlimit(10000000)\nINF = float('inf')\nmod = 10**9 + 7\nI = lambda: int(input())\nS = input()\nN = I()[:I().index(max(I) - 1)]\nD = [LI() for _ in range(N)] + [list(map(int, I.split())[:-1]))\nans = []\nfor i in S: ans.append(D[I(i)] if i > 0 else [0])\nprint(*ans)"}, "843": {"problem_id": 4843, "answer": "import sys\nfrom itertools import combinations\ninput = sys.stdin.readline\nn = int(input())\narr = list(combinations(map(int, input().split()), 2))\nans = []\nfor i in range(n):\n temp = arr[i]\n if temp[0] == '1':\n  ans.append(''.join(temp)) \n else:\n\n  temp.replace('1', '0')\nprint(*ans)"}, "844": {"problem_id": 4844, "answer": "# cook your dish here\nn = int(input())\nm = [int(x) for x in input().split()]\nfor i in range(n):\n m[i] = list(map(int,input().strip()))\nans = []\ni,j = 0,0\nwhile i<n-1 and j<m[j+1]:\n ans.append(list(reversed(sorted(ans))))\n i+=1\nprint(*ans)"}, "845": {"problem_id": 4845, "answer": "# cook your dish here\nd,m = [int(x) for x in input().split()]\nfor i in range(m):\n if d[i] == '1':\n  print('',end ='')\n elif d.index(max(d)) % 2 == 0 and m[-1] in ['Sunday', 'Monday'] and i < m:   # print(i,'', end = \" \", i = '') "}, "846": {"problem_id": 4846, "answer": "# cook your dish here\nimport bisect\nn, m = map(int, input().split())\nli = []\nfor i in range(1, int(n**0.5)+1):\n\tli.append(i)\nm = min(li[0], li[1])\nans = m\nt = 0\nwhile t < t+m//3 and n>=1 and m<=d and d>0 and (d-m)*(m+1)<n: t += 1\nprint(t)"}, "847": {"problem_id": 4847, "answer": "# cook your dish here\ndef main():\n N = int(input())\n A = list(map(int, input().split()))\n dp = [0]*(N+1)\n for i in range(1, N + 1):\n  if A[i-1] == 0 and A.count(0) == N - i - 1 : continue\n\n  x,y,z = sorted(A.split(), key=lambda x: x[1], reverse=True)\n\n print(sum(dp[z]))"}, "848": {"problem_id": 4848, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\ndef main():\n n, m = list(map(int, input().split()))\n beats = [0]*n\n for i in range(m):\n  beats[i] = 1\n max_beat = max(beat[:i+1])\n if n%2 == 0: print(2*(n-1)//2 + 1) \n elif n==1: return 0\n else: break\n"}, "849": {"problem_id": 4849, "answer": "# cook your dish here\nfrom collections import Counter\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "850": {"problem_id": 4850, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(a*3+b*4+c)\nprint(abs(l[-1]))"}, "851": {"problem_id": 4851, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\nprint(min(a))"}, "852": {"problem_id": 4852, "answer": "# cook your dish here\nimport bisect\narr = list(map(int,input().split()))\nprint(len(arr))"}, "853": {"problem_id": 4853, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\np=[0]*n\nfor i in range(n):\n\tp[i]=[0 for j in a if j==i]\nx=0\ny=1\nwhile(len(p)>0 and x<n and y<=y-x+2:x,y)==[]:y+=2\nprint(2*x-y+x*2)"}, "854": {"problem_id": 4854, "answer": "# cook your dish here\nn, c = list(map(int, input().split()))\nsorted_list = sorted(list(range(n)), key=lambda x: (x[0], x[1]))[:n]\nans = [0] * (n + 1)\nfor i in range(1, n + 2):\n  ans[i - 1] += c[-1 - i] + sorted(i, reverse=True)[1:-i] \nprint(ans[n])\n"}, "855": {"problem_id": 4855, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n if l[i] * 0.5 <= c: c += 1\n else: break\nprint(c)"}, "856": {"problem_id": 4856, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(len(a)):\n if a[i]=='0':\n  s=s+1\n a.reverse()\nprint(s)"}, "857": {"problem_id": 4857, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom collections import defaultdict as dd, OrderedDict as odict, Counter as C, default=sorted(list(os.listl(input()), key=lambda x: int(x), reverse=True),  fillvalue=None), to_key=sys.getenv(\"PROBODY_ENTER\"), 0\ndef solve(l, w):\n if l == 0: return \"nonzero\"\n ans = []\n for i in range(0, len(str(w)))[::-1]:\n  ans.append(chr(ord('a')+i))\n return ''.join(ans)\n"}, "858": {"problem_id": 4858, "answer": ""}, "859": {"problem_id": 4859, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n b=list(map(int,input().split()))\n l=[]\n c=0\n for j in list(bin(b)[2:].zfill(len(l)):) :\n  if l[j]=='1' and c==0 : l.append(c)\n print(*l,sep='\\n')\n"}, "860": {"problem_id": 4860, "answer": "import math\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n print(a[1])"}, "861": {"problem_id": 4861, "answer": "# cook your dish here\nimport math\nn=int(input())\narr=list(map(int,input().split()))\nd=dict()\nfor i in range(n):\n\td[arr[i]].append(i)\nprint(d.values())"}, "862": {"problem_id": 4862, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(0)"}, "863": {"problem_id": 4863, "answer": "# cook your dish here\nn=int(input())\nx=[]\nfor i in range(n):\n a,b,c,d=list(map(int,input().split()))\n x.append(d)\nprint(x[-1][0])\n"}, "864": {"problem_id": 4864, "answer": "# cook your dish here\nn,r,c=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(input())-1,a[i][0])\nprint(*a)\n"}, "865": {"problem_id": 4865, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b,m=map(int,input().split(\":\"))\n if a=='F':\n  print(m)\n elif b!=0:print(b)"}, "866": {"problem_id": 4866, "answer": "# cook your dish here\na=input().split(\"FEB\")\nprint(a[0])\n"}, "867": {"problem_id": 4867, "answer": "M,N=list(map(int,input().split()))\nfor i in range(N):\n a,b,c=[int(x) for x in input()]\n print(a+b+c)\n"}, "868": {"problem_id": 4868, "answer": "from sys import stdin, stdout\nimport math\ndef main():\n \n sys.setrecursionlimit(10**9)\n #stdin = open('input.txt', 'r')\n#stdout=open(input().split(' '), 'w')\n\n #for _ in range(int(math.sqrt(2))+1):\n print('\\n'.join(map(str,list(range(1000)))))\n"}, "869": {"problem_id": 4869, "answer": "# cook your dish here\nimport math\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(math.ceil(i/2*i))\nprint(*l)\n"}, "870": {"problem_id": 4870, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(a+b+c)\nif(abs(l[-1])>=2 and l[0]=='DOWN') and abs(c>0 and c<=9 and a>b and b>a) :\n  \n print(0,0) "}, "871": {"problem_id": 4871, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nl=len(a)\nprint(l*l)"}, "872": {"problem_id": 4872, "answer": "n=int(input())\nd=list(map(int,input().split()))\ns=0\nfor i in range(n):\n s+=d[i]\n print(s)\n"}, "873": {"problem_id": 4873, "answer": "for _ in range(int(input())):\n n,g=map(str,input().split())\n a=[]\n m=0\n x=n\n y=m+1\n while x<n and y<m and a[x]==a[y]:\n  m+=1 \n print(m)"}, "874": {"problem_id": 4874, "answer": "# cook your dish here\nn, m = map(int, input().split())\ngrid = [[] for i in range(n+1)]\nfor i,(x,y) in enumerate(grid):\n  grid[x][y] = 1 if x == '_' else -1\nm = max(m,n-1)\nans = [0]*n\ndef dfs(i,x):#\u5230\u6700\u7ec8\u6307\u7684\u65b9\u6cd5\uff0c\u5220\u9664i\u4e3ax\u7684\u4f4d\u7f6e\nif i == n: return 0\ndfs(0,0) #\u53ea\u6709i(\u53ef\u80fd\u8d85\u8fc7\u8d7700000\u7684\u989d\u8def\u5f84)\u7684\u65f6\u5019\nprint(ans[0])"}, "875": {"problem_id": 4875, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**6) + 1000)\nn = int(input())\nw = list(map(int, input().split()))\nfor i in range(n):\n w.append(w[-1] + \" \" * (i + 1) )\nprint(\"\\n\".join([str(x) for x in w]))"}, "876": {"problem_id": 4876, "answer": "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.sort()\n print(l[1])"}, "877": {"problem_id": 4877, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ns=0\nfor i in range(len(l)):\n s+=l[i]\n print(s)\n"}, "878": {"problem_id": 4878, "answer": "# cook your dish here\nR = [int(x) for x in input().split()]\nprint(R[-1])"}, "879": {"problem_id": 4879, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nif(len(l)==1): \n print(\"No\")\nelse: \n\n l[0]=l[-1]\nprint(\"Yes\")"}, "880": {"problem_id": 4880, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(chr(i+65+int(l[i]))%26)\nprint(\"{0:.6f}\".format(m))"}, "881": {"problem_id": 4881, "answer": "n=int(input())\nif n%2==0 or n==1: \n\tprint \"either\"\nelse:\t\t   print \"Even\""}, "882": {"problem_id": 4882, "answer": "n=int(input())\nans=[]\nfor i in range(n):\n ans.append(0)\n print(ans[-1])"}, "883": {"problem_id": 4883, "answer": "import sys\ninput = sys.stdin.readline\nm,n=map(int,input().split())\na=[]\nfor _ in range(m):\n\ta.append([int(x) for x in input().rstrip('\\n').split()])\nb=[a[0].translate({chr(97+ord('a')+'z') for chr in b})]\nd={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,' s':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\nans=['no','yes'][(n-1)%4==0]\nprint(ans)"}, "884": {"problem_id": 4884, "answer": "# cook your dish here\nn,p=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append(pow(i+1,len(str(input()))) - 1)\nprint(l[-1])"}, "885": {"problem_id": 4885, "answer": ""}, "886": {"problem_id": 4886, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = []\nfor i in range(n):\n  if int(input()) == k: a.append(i)\nif len(a)%2==1: print('You would be given your desired turn with's' number 'i'.')\nelse: #s=n-k\nans = [a[-1] for a in a]\ni = 0\nwhile i<=k and a[i]==0: i+=1\n#print('i' if i!=0 else 'k')"}, "887": {"problem_id": 4887, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n s=0\n p=input().split(\" \")\n if(len(p)==1 and p[0]!='0' and len(s)%2==0 and s[-1]=='0':\n  print(int((p[1]-1)/2))\n elif (s<=10**18) or s>=1000:print(0)"}, "888": {"problem_id": 4888, "answer": "t=int(input())\nfor i in range(t):\n n,k=list(map(int,input().split()))\n a=[]\n for j,i in enumerate(k): a.append(i+1)\n print(a[0])\n"}, "889": {"problem_id": 4889, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append(l[i] + 1)\nprint(a[-1])"}, "890": {"problem_id": 4890, "answer": "# cook your dish here\nimport math\nn,m,s,d=list(map(int,input().split()))\ns=s%(n+m+s+d)\nl=[]\nfor i in range(m):\n l.append([int(x) for x in input().rstrip('\\n').split(' ')])\nprint(*l[-1][1:],sep=\"\")\n"}, "891": {"problem_id": 4891, "answer": "# https://atcoder.jp/contests/arc09/\nimport sys\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int,input().split()))\nB = [A[0]]\nfor i in range(1,n):\n  B.append(B[-1] + A[i])\nprint(len(A))"}, "892": {"problem_id": 4892, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(0,n):\n a.append(list(map(int,input().split())))\nc=0.0\nwhile(c<=n//2+1):\n\n if(a[c-1]!=\"0\" and a[0]==\"0\":\n  c+=1)\n else:\n\n  if (c%2==0 and c>0) or (n-c/2)>=1 and (2*c*(2-pow(10,c,2))==1 or 2*((c+3)//4)==(n+2)*(3/4)) or c==3 or n==2:break\n # print(s[:c])\n c=c//3\n s=s.replace(\"0\",\"\")\n for j in s[1:]:s=\"\".join(j)"}, "893": {"problem_id": 4893, "answer": "# cook your dish here\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(input()))\nMOD = 10**9+7\nINF = float('inf')\neps = 1.0e-5\ndd = int(eps/10**7)\nans = INF\nfor i in range(70,70,-1):\n  ans = min(ans, (dd*(dd-1))/2 + INF) \nprint('\\n'.join(map(str, ans)))"}, "894": {"problem_id": 4894, "answer": ""}, "895": {"problem_id": 4895, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n b.append(a[i]*(i+1)//3)\nc=0\nwhile(len(b)!=n-b.index(c):c+=1):b[c-1]-=1\nprint('\\n'.join(str(x) for x in b))"}, "896": {"problem_id": 4896, "answer": "n=int(input())\r\narr=[i for i in range(1,n+1) if i<len(list(map(int, list(set(arr))))[::-1])] "}, "897": {"problem_id": 4897, "answer": "n = int(input())\r\nll = [int(x) for x in input().split()] + [100, 200, 500, 1000, 10000] * (n + 1) "}, "898": {"problem_id": 4898, "answer": "n = int(input())\r\nl,u = [int(i) for i in input().split()]  # (1,2,3,4,5,6) => [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,188,189,190,191,194,196,197,199,200,202,203,204,205,206,207,208,209,210,211,212,223,224,225,226,227,228,229,232,233,234,238,239,241,242,244,245,246,247,250,251,252,253,255,256,257,269,272,274,275,286,287,298,299,300,307,304,316,317,332,334,335,336,380,383,384,389,392,400,404,405,406,408,419,410,411,416,432,434,440,441,444,457,461,464,466,467,469,480,481,484,486,487,488,489,490,491,493,500,501,503,504,505,596,509,512,607,613,618,640,641,644,646,647,648,653,658,656,659,680,681,684,686,688,690,694,696,698,699,000,001,002,003,004,019,020,029,0A0 = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 180, 181, 182, 183, 184, 186, 187, 188, 189, 193, 194, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 248, 249, 250, 251, 254, 256, 257"}, "899": {"problem_id": 4899, "answer": "# cook your dish here\ns=input()\ni=0\nwhile(i<len(s)-1):\n a=s[i:i+3]\n if(a>=2 and a<=10): \n  print(\"hey!\")\n elif a%2==0 and (a//2)==1: \n\n  k=a/2   # k is the number of characters to be extra chars\n print(k)"}, "900": {"problem_id": 4900, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor _ in range(n):\n l.append(list(map(int, input().split())))\nprint(*l)\n"}, "901": {"problem_id": 4901, "answer": "# cook your dish here\nfrom itertools import zip_longest\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nprint(int(input()))"}, "902": {"problem_id": 4902, "answer": "# cook your dish here\nn=input()\na=[]\nfor i in range(int(n.strip())):\n a.append(input())\nprint(len(a))"}, "903": {"problem_id": 4903, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\ns = set(a)\nif len(s)==1: print('go')"}, "904": {"problem_id": 4904, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)"}, "905": {"problem_id": 4905, "answer": "# cook your dish here\nn,m=map(int,input().split())\na,b,k,g=[int(i) for i in input()]\nprint(m-k)"}, "906": {"problem_id": 4906, "answer": "import sys\nfrom collections import defaultdict\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=defaultdict(list)\nfor i in range(n):\n\tb[a[i]].append(chr(65+ord('a')))\nans=[0]*100\nc=0\nd=10**9+7\ne=1\nf=2\ng=3\nh=4\nl=5\nr=6\ns=7*(e+f+g+h+l+r+s+1)//2+3*g*h*l*r\nt=8*e\nu=9*n\nv=n*f\nw=11*u\nx=12\ny=13\nz=14\ni=15\nj=16\nk=17\no=18\np=19\nq=20\nrs=21\npp=22\nrr=23\nsb=24\npr=25\nsu=26\nlo=27\nmi=28\nll=29\nml=30\nmfr=31\nma=32\nta=33\ngg=34\nol=35\ngl=36\nih=37\nja=38\nkl=39\nmr=40\ntp=41\nuv=42\njo=43\nkk=44\nxx=45\nys=46\nkt=47\n"}, "907": {"problem_id": 4907, "answer": "# cook your dish here\ndef gcd(a, b):\n return g(b % a)\nn = int(input())\na = [0] + list(map(int, input().split()))\nb = [-1] * n\nans = 0\nfor i in range(1, n + 1) :\n if a[i] == b[-i - 1] : ans += i\n else : break\nprint(ans)"}, "908": {"problem_id": 4908, "answer": "# cook your dish here\nimport math\nn=int(input())\nfor i in range(n):\n x=list(map(int,input().split()))\n if x[0]==x[1]:\n  print(\"1\",end=\"\")\n elif math.is_integer(x)==True and x!=0:print(\"2\")"}, "909": {"problem_id": 4909, "answer": "n = int(input())\r\nD = list(map(int,input().split()))\r   # 1, 2, 3,..., n-2, -1, 0, 1... n - 2 "}, "910": {"problem_id": 4910, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nc=0\nfor i in range(n):\n b.append(a[i]*i+c)\nprint(b[0])"}, "911": {"problem_id": 4911, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\narr = list(map(int, input().split()))\nprint(*arr, sep='\\n')"}, "912": {"problem_id": 4912, "answer": "def gcd(a,b):\n if b==0: return a\n a=b\n while b>0 and a<b: \n  a=(b-a)//(b-(a-b)) \n\n  b-=a\n return b\nn=int(input())\nx=list(map(int,input().split()))\nfor i in range(x[0]+1,n+1): print('YES' if i else 'No')"}, "913": {"problem_id": 4913, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*40\nc = []\nfor i in range(n):\n\ta[i] = str(a.count('A')+c[-1])\nans = 0.25*(10**9+7)\nif b[1] > 0 and a[b[0]] == 'A':\n   ans += 1\nprint(ans)"}, "914": {"problem_id": 4914, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n b=input()\n a.insert(b[0],a[1])\n print(len(a)-b)\n"}, "915": {"problem_id": 4915, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\nm = [0]*n\nfor i in range(n):\n m[l[i][0]] += 1\n l.sort(key=lambda x:x[2])\n c = 0\n d = []\n if l[0][1] == 'H':\n  c += 20\n elif (m[1]-1)%2 == 0 and (d.count(c)>0 and d[c][2]==0) and len(d)==2: \n print(0, c, d)"}, "916": {"problem_id": 4916, "answer": "n, k = map(int, input().split())\narr = []\nfor i in range(n):\n arr += [int(i, 2), i]\nprint(len(arr))"}, "917": {"problem_id": 4917, "answer": "# cook your dish here\nimport math\nn=int(input())\nfor i in range(n):\n a,b=list(map(int,input().split()))\n if abs(a-b)==1 and math.ceil(math.log(0.5,10)//2)<=a and a>0: \n  print(\"edward\")\n elif a==0 and b>1:print(\"possible\")"}, "918": {"problem_id": 4918, "answer": "# cook your dish here\nn,q=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n l.append(list('t'*((i+1)%30)+(n-i-1)*(l[i]))+'s')\nprint(n)\n"}, "919": {"problem_id": 4919, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nx=l.index(max(l[x]))\ny=x-1\nans=0\nwhile(y>0 and len(x)>1): \n x-=y\n ans+=x\nprint(ans)"}, "920": {"problem_id": 4920, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\narr = list(map(int,input().split()))\nc = 0\nfor i in range(1,n+1):\n if arr[i-1] == '1':\n  c += 1\n else:   # print(arr[:i]=='1')\n"}, "921": {"problem_id": 4921, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n x=list(map(str,input().split()))\n if x.count('a')==1:print(x[0])\n else: print(0)"}, "922": {"problem_id": 4922, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nm = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  if m[i] == True and (i+1)%3 == 0: ans.append(i + 1)\nprint('{0:.6f}'.format(ans[0]))"}, "923": {"problem_id": 4923, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(len(a))"}, "924": {"problem_id": 4924, "answer": "# cook your dish here\nimport bisect\ndef time(time):\n h, m, s = map(int, input().split())\n return s + h * m * (s - 60)"}, "925": {"problem_id": 4925, "answer": "# cook your dish here\nfrom math import sqrt\nfor i in range(int(input())):\n\tn,m=list(map(float,input().split()))\n\n\ta,b=n-m,n+m-1\n\n \tif a<=a+2*n/3 and b<=(b+1)*m/6 and a%3==0 and (a-b)**2==(a*(b-a)//3) : a+=1\n  \n\n"}, "926": {"problem_id": 4926, "answer": "# cook your dish here\nfrom math import gcd\nn = int(input())\nx = []\nfor _ in range(n):\n x.append(gcd(x[0], x[1]))\nprint(xc)"}, "927": {"problem_id": 4927, "answer": "n,p,q=list(map(int,input().split()))\nif n==1:print(1,1)\nelif p<=p*(n-1):print('P'*p+'W')\nelse: print(0,0)"}, "928": {"problem_id": 4928, "answer": "n = int(input())\r\na = list(map(int, input().split()))[:n] + [0 for i in range(n)]\r  "}, "929": {"problem_id": 4929, "answer": "# cook your dish here\ns,p=input().strip()\nn=len(s)\ni=0\nwhile(i<n-1):\n if(p[i]!=\"0123456789\" and s[0]==\"1\"): \n  s1=s[:i+1]\n elif (i>=n) or (n==0):break\n i+=1\nprint(\"No\")\n"}, "930": {"problem_id": 4930, "answer": "# cook your dish here\nn = int(input())\na = list(map(str,input().split()))\nfor i in range(0,len(a)-1):\n a[i] = chr(ord('a')+i)\nprint(''.join(['a'.count(x) for x in str(i))).strip()"}, "931": {"problem_id": 4931, "answer": "# cook your dish here\ndef solve():\n x,y=map(int,input().split())\n ans=abs(x-y)\n if(ans<=x):\n  print(\"All GOOD\")\n elif(y%2==0 and ans==x+y+1) or (x==1 and y==2):print(\"IMOSSIVE\") \n else:print((\"NO\")[x!=y//2])\n"}, "932": {"problem_id": 4932, "answer": "# cook your dish here\na,b,c,d=map(int,input().split())\nfor i in range(b):\n x=a+d+c\n if x<=x and x not in list(a.split(' ')): \n  print('both')\n elif x==x:print('none')"}, "933": {"problem_id": 4933, "answer": "# cook your dish here\na,b=map(int,input().split())\nprint(b)"}, "934": {"problem_id": 4934, "answer": "import sys\nfrom functools import reduce\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(1000000)"}, "935": {"problem_id": 4935, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.sort()\n x=l[0]\n y=2*x+1\n z=abs(x-y)\n if(y%2!=0.00) :\n  print(z*(2/x)*(1/y/2.23))"}, "936": {"problem_id": 4936, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\ntemp = a[0]\nfor i in range(n-1):\n temp = max(a[i], temp)\n print(temp, end=' ')"}, "937": {"problem_id": 4937, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n b=a.count(0)\n print(max(b)-a)"}, "938": {"problem_id": 4938, "answer": "# cook your dish here\nfrom collections import defaultdict\nd=defaultdict(list)\nfor _ in range(int(input())):\n a,b=input().split()\n if b=='M':\n  d[a.count('M')].append(b[0])\n elif a[b.find('W')]!= -1 and b[len(a) - 1]!=a[-1] and a.pop(-1)>0:  print(0)"}, "939": {"problem_id": 4939, "answer": "# cook your dish here\ndef dp(n):\n if n == 0: return 0\n elif (n & 1): return 1\n else: \n  return 2 * max(0,n-1-m)\nfor i in range(int(eval(input()) or -1)) :\n n, k = list(map( int, input().split() ))\n a = int( input() )\n m = 1 if k == 1 else 2*k\n print( a - m)"}, "940": {"problem_id": 4940, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append([int(input())-1,i+1])\nx=l[0][1]\ny=0\nwhile(len(x)>0 and l[x][0]<=y) :\n x=x[1:].copy()\n y+=1\n if(y%2==0):l.pop(0)\n else:print(l)\n\n"}, "941": {"problem_id": 4941, "answer": "# cook your dish here\nn=int(input())\ns=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(s.count(i)-l[-1])\nprint(sum(l))"}, "942": {"problem_id": 4942, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n print(a[0])"}, "943": {"problem_id": 4943, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n n=list(map(int,input().split()))\n d=math.gcd(n,n[0])\n c=d//n\n print(c)"}, "944": {"problem_id": 4944, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(max(a))"}, "945": {"problem_id": 4945, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n  n,x,y = list(map(int,input().split()))\n\n  rent = n * (n-1) * x\n\tr = ((x+y)/2)*(x-y)\n\n\tprint(r)\n"}, "946": {"problem_id": 4946, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n-1):\n\tb.append(a[i])\n#print(b)\nans=0\ni=2\nwhile i*(i+1)<=n and b[0][0]=='a' and i<n:ans+=1\nif ans==0:break\nprint((ans-i)//2)"}, "947": {"problem_id": 4947, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nn = int(input())\na = [int(x) for x in input().split()]\nprint(a[-1])"}, "948": {"problem_id": 4948, "answer": "import math\nn,s=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(math.ceil(s**a[i] + s**(i)))\ns-=1\nprint(*a)\n"}, "949": {"problem_id": 4949, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n w,h=list(map(int,input().split()))\n l.append(w-h)\nif(len(l)%2==0 or l[0]<l[1]): \n print(\"DA\")\nelse: \n\n l1=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,149,160,161,164,166,167,168,169,180,181,182,183,184,186,188,189,190,191,194,196,197,199,204,205,206,207,208,209,214,215,227,228,229,232,234,235,236,237,238,239,241,242,244,255,257,268,269,280,281,282,286,287,289,291,292,293,304,305,306,307,311,313,314,317,318,323,326,327,328,329,330,332,334,339,343,344,350,351,362,364,369,370,379,382,383,404,416,418,431,433,435,446,457,480,484,487,488,489,490,491,500,501,502,504,509,512,593,613,614,616,618,640,644,448,459,460,464,469,471,486,388,389,400,402,403,405,407,409,419,421,432,434,440,444,441,447,449,461,466,467,479,494,496,renticeship, 502,505,554,555,596,601,602,606,608,609,610,641,643,-10,-13,-14,-15,-16,-17,-18,-19,-20,-21\n"}, "950": {"problem_id": 4950, "answer": "n=int(input())\nfor i in range(n):\n t,d=list(map(int,input().split()))\n s=max(t,0)\n print(s)"}, "951": {"problem_id": 4951, "answer": "# cook your dish here\nimport math\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n a.append(math.ceil(i*10**0.5))"}, "952": {"problem_id": 4952, "answer": "import math\nt = int(input())\nfor i in range(t):\n s = list(map(int, input().split()))\n n = len(s)\n if s[0] == '1':\n  print(math.floor(n/s.count('1')))\n elif '2' not in s: print('No')"}, "953": {"problem_id": 4953, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n l = list(map(int,input().split()))\n d = {}\n for j in l: \n  d[j] = d.get(j,0) + 1\n ans = []\n count = 0\n while count < n and l.count(d[l[count-1]]) == 1 or count+1 == len(l) or l[0] == \"B\" or (n-count==0 and count==1)or ans.append(ans.pop()[1]) : count+=1\n if count!= n-2 : ans += [str(count)]\n print(*ans)"}, "954": {"problem_id": 4954, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n b.append(a[i] + b[-1-i])\nc = set(b)\nif len(c) == 1 and c.is_integer():\n print(0)"}, "955": {"problem_id": 4955, "answer": "n=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append((l[i]*(i-1)+1)%12)\n#print(a[0])\nc=0\nwhile(c<=len(l)-1):\n\n if a[c]!=None:\n\n  c+=1\n  if c==0 and l[-c-2]=='A' or c>=n-3:print('#')\n"}, "956": {"problem_id": 4956, "answer": "# cook your dish here\nn=int(input())\ns=[]\nfor i in range(0,n):\n s.append(list(map(str,input().split())))\nif len(s)>=3 and s[-1]=='e':\n   print('h\u00e6t',end='')\nelse:print(' '.join([str(x) for x in s]))\n"}, "957": {"problem_id": 4957, "answer": "for _ in range(int(input())):\n\tn, m = list(map(str, input().split()))\n\n\tif m == '#' and grid.count( 'E' ) > 1: print('E.')"}, "958": {"problem_id": 4958, "answer": "#dt = {} for i in x: dt[i] = d.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :[int(_) for _ in input().split()]\nn,m = inp()\na = [0]*(n+1)\nfor i,v in enumerate(a):\n  a[v] += 1\nx = [(1,i)]\nans = []\ni = 0\nwhile i < n and x[-1][1] <= i: ans.append(x[-(i+2)][0])\nif len(ans) == 0: print(0, end=' ') else print(' '.join(map(str,ans[1:],x)))\n"}, "959": {"problem_id": 4959, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n   a,b=list(map(int,input().split()))\n\ta=a+b\nprint(sum(a*b)//2)"}, "960": {"problem_id": 4960, "answer": "# cook your dish here\nn = input()\na = [int(x) for x in n.split(\"0\")]\ni = 0\nwhile i < len(a) and a[i]!= '0':\n  i += 1\nprint(i)"}, "961": {"problem_id": 4961, "answer": "# cook your dish here\nr,s=list(map(int,input().split()))\nl=[]\nfor i in range(r):\n l.append(input())\ns-=1\nwhile(s>0 and l[-1][0]=='o' and len(l)>=2 and s<=l[0][1]): \n s-=(1-l.count('o')*2)\n print('2')"}, "962": {"problem_id": 4962, "answer": "# cook your dish here\nn,l=list(map(int,input().split()))\nitems=[]\nfor i in range(n+1):\n items.append([int(x)-items[i][0]) for j in items[-1]]\nprint((' '.join(sorted(items))))\n"}, "963": {"problem_id": 4963, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a.append(i)\nprint(*a, sep=\"\\n\")\n"}, "964": {"problem_id": 4964, "answer": "# cook your dish here\nn,h,l=list(map(int,input().strip().split()))\ntemp=[]\nfor i in range(n):\n temp.append([int(x) for x in str(input()).split(\" \")])\nl1=max(temp)\nif(h==1 and temp[0][1]-temp[1][0]>=l and h==2 and l1!=0 or h%2==0 ):\n print(['0','1','2','3','4','5']);\nelif (h>n-l) and (n>l-h) :\n  print('1\\n'.join([str(i)+' '+str((h-i)//2)-'0'*(2*i)-str(-1)*i]))"}, "965": {"problem_id": 4965, "answer": "import sys\ninput=sys.stdin.readline\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(l[i])\n#print(a)\ndp=[0]*n\ndp[0]=1\ni=0\nwhile(i<n-2):\n\n\tif(dp[1]<=a[2] and a[3-i]>0):   # \u8fd9\u4e2a\u6570\u5b57\u6bd4\u8f83\u7684\u60c5\u51b5\u4e0b\uff0c\u90a3\u4e48\u957f\u5ea6\u653e\u5165\u4e00\u6bb5\u7528\u7684\u6574\u9664\u3002\u8ddd\u79bb\u53ef\u4ee5\u8ba1\u7b97\u5b83\u5bf9\ufffd with \u548c\u521d\u59cb\u503c\u4e3a\u4ec0\u4e48\u8bf4\u6709\u987a\u5e8f\u3002\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8fd0\u884c\u8282\u70b9\u6700\u540e\u4e00\u6b65\u4f1a\u8d70\u8fd9\u6837\u7684\u5185\u5bb9\u5b9a\u4e49\u3002\u8fde\u7eed\u51fa\u73b0\u4e86\u81ea\u5df1\u7684\u72b6\u6001\u6765\u6307\u5230\u3002\u53cd\u800c\u4e0d\u662f\u7c7b\u4f3c\u5f00\u5934\u7684\u65f6\u95f4\u5408\u6210\u7684\u3002\n"}, "966": {"problem_id": 4966, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport numpy as np\ninput = np.array(stdin.readline)\nn = int(input())\np = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n ans += (np.expand_dims(p[i-1])) * 100\nprint(ans)"}, "967": {"problem_id": 4967, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n s = input()\n a.append(s)\nprint(max(a))"}, "968": {"problem_id": 4968, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nans=0\nwhile(len(l)>0 and l[-1]!=l[0]): \n ans=ans+1\n print(ans)"}, "969": {"problem_id": 4969, "answer": "# cook your dish here\na,b=map(int,input().split())\nprint(a*b)"}, "970": {"problem_id": 4970, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n print(i)\n"}, "971": {"problem_id": 4971, "answer": "# cook your dish here\nn=input().split(\" \")\nm=int(n[0])\nfor i in range(1,n):\n if n[i-1]==m:print(i,end=\"\")\n else:pass\n"}, "972": {"problem_id": 4972, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(n-1):\n s+=a[i]\n print(s)\n"}, "973": {"problem_id": 4973, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nk=[]\nfor i in range(n):\n k.append(a[i]*(i-1)+1)\nprint('\\n'.join(k))"}, "974": {"problem_id": 4974, "answer": "# cook your dish here\nR = list(map(int,input().split()))\nn = int(input())\narr = []\nfor i in range(n):\n arr.append(R[i] + R[-1-i])\nif arr[0] == \"5\":\n print(\"too_ late\")\n"}, "975": {"problem_id": 4975, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n x=input().split()\n n=len(x)\n d={}\n for j in n: \n  if(j not in d): d[j]=1\n ans=''\n while(d.get(0,0)==''):d=d[0]\n print(ans)"}, "976": {"problem_id": 4976, "answer": "# cook your dish here\na=int(input())\nb=list(map(int,input().split()))\ns=0\nfor i in range(a):\n s+=1\n if(b[a-1]<=i and b[i]>=s): \n  s=b.pop()\n print(s)\n"}, "977": {"problem_id": 4977, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i-1] = max(0, (i+1)//2 - i*(i*2) - 2*b[-i] - b[0])\nc = [[0]*len(a), [n-a-2] for a in a[:-1]]\nprint(sum(c))"}, "978": {"problem_id": 4978, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn, m = map(int, input().split())\ns = list(map(str, s))\nx = []\nfor i in range(n):\n x.append(s[i] + '#' + s[n-i-1])\nprint(x)"}, "979": {"problem_id": 4979, "answer": "# cook your dish here\nn = int(input())\nx = []\nfor i in range(n):\n x.append(bin(int(i))[::-1])\nprint(x[0])"}, "980": {"problem_id": 4980, "answer": "import sys\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n b.append(a[i]*(i+1)//2)\n#print(b[-1])\nc=0\nd=[[0,1],[1,0],[0,-1]]\ne=1\nf=2\ng=3\nh=4\ni=5\nj=6\nk=7\nx=8\ny=9\nz=10\ns=11\nt=13\nr=15\no=16\nu=17\nv=18\nw=19\nq=20\ntop=21\nbottom=22\nleft=23\nmid=24\nright=25\nans=d[0][0]\ndef dfs(s,i,j,x,y,z,t):\n\n if s==1 or (s==2 and j==0 and i<n and x<=i and y<=(n-j) and z>=(j-i) :\n  ans=max(ans,abs(x-y)*(t-z)+(u-v*t*u)**(1/2))\n\n else:\n\n  mid=(s+t+u+v+w+q)%n\n elif s>1 and (t>0 or j>n or i>=n) or t<0 :   i+=1; j+=2; k+=3; x+=y; y+=z; z+=u; u+=v; v+=w; w+=q; q*=t\n else : mid=mid+2*s\n ans=(mid/n)*ans\n if i==n: break\n d[s][j]=(x+y+z+k+h-h*k*v-w*w-q*q-top-bottom-left-mid-right-ans)\n\n # print(d,s) \n\n s-=ans-k\n #print('{} {} {}'.format(top,bottom,left,mid,right,ans)) "}, "981": {"problem_id": 4981, "answer": "# cook your dish here\na,b,c=list(map(int,input().split()))\nl=[]\nfor i in range(len(a)):\n a[i]='A'\n l.append('B'*(i+1)+'C')\nprint(l[-1])\n"}, "982": {"problem_id": 4982, "answer": ""}, "983": {"problem_id": 4983, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(len(a)):\n a[i]+=1\nprint(' '.join(str(i)*'\\n'))"}, "984": {"problem_id": 4984, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n row, col = input().split(' ')\n grid = [['L', 'W'], ['C']]\n \n x, y = row - 1, row + 3\n sky = []\n for i, v in enumerate(grid[row][0]):  # (row[i+1:3]), (cell[0], cell[3]) \n\n   if v == 'C': sky.append(i)\n\n if sky[-1]!= 'L':\n print(0)"}, "985": {"problem_id": 4985, "answer": "# your code goes here\nn=int(input())\nl=[]\nfor i in range(n):\n s,h,d,c=list(map(int,input().split()))\n if s%d==0:l.append(s//d)\n l.sort(key=lambda x:x[0])\n d=l[-1][0]\n c=d-c\n print(sum(l))"}, "986": {"problem_id": 4986, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n if(l[i]!='a' and l[n-i-1]=='z') :\n  print('se')\n elif(i>0 and i<n and n==0) or (n<0 or i>=n) : continue\n s=input()\n t=0\n for j in s.split('a')[1: ] : t+=1\n print(j,end=' ')"}, "987": {"problem_id": 4987, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\ns = []\nfor i in range(n):\n s.append(abs(a[i] - a[-1]))\nprint(len(s))"}, "988": {"problem_id": 4988, "answer": "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n n = input()\n print(n//10)"}, "989": {"problem_id": 4989, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n a=l[i]\n s=sum(a)\n c=0\n for j in l[:i+1]:\n  c+=a[j]*s\n print(c,s)"}, "990": {"problem_id": 4990, "answer": "# cook your dish here\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect, heapq, collections, math, string, queue, sys\ninput()\na,b,k,g,l,r = map(int,stdin.readline().split())\nb = b-1\nk = int(k)\nl = []\nfor i in range(b):\n\tl.append(pow(2,i))\nq = collections.deque([(0,0)])\nvisited = [False]*(len(l)-1)  # visited[l[i] - 1] = True\nwhile q and l[q[0][1]] >= l.popleft(): q.pop()"}, "991": {"problem_id": 4991, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(32):\n\tb.append(a[i]*(i+1))\nans = 0\ndef dfs(start, t, a, b, i, n):\n\n\tif n == 0: \t\tprint(0)\t# is not a number, so no number in b\n\n   else :\n  #\tstart = end = start + (n - start)//2\nif start == n - 1 or start % 2 == 1 and b[start] == a[end] :  print(int((start + end)**0.5)) \nelse : b = sorted(b, key=lambda x: (x[1], x[0]))[:n] + b\nprint(*ans, sep='\\n')"}, "992": {"problem_id": 4992, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n a.append(a[i]*(i+1)//2)\nif a[0]<=2*n-1:print(1+c)"}, "993": {"problem_id": 4993, "answer": "# cook your dish here\np,n=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append(list(input()))\nprint(l[-1])"}, "994": {"problem_id": 4994, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n x,y=list(map(int,input().split()))\n if(x<y): x=y\n elif(y<x): y=x\n else :\n  print(0)\n"}, "995": {"problem_id": 4995, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nm=l[0]\nfor i in range(1,n-1):\n m=m*60+m\n l.append(m)\nprint(sum(l))"}, "996": {"problem_id": 4996, "answer": "from sys import stdin\ninput=stdin.readline\ndef shift(s):\n ans=0\n for i in range(ord('a'), ord('z')+1): \n  if s[i]<=s[-i-1]:   ans+=1\n return ans\nn=len(input())\ns=input().strip()\nc=[]\nk=chr(n+int(k[0]))\nfor i,c in enumerate(c,start=1) :\n k=k.split(' ')\n if k[1]=='A' : s.translate(str.maketrans('',c+[k])).extend(['C'])\n else: c.insert(0,'\\n')\nprint(' '.join(map(''.join, c)))\n"}, "997": {"problem_id": 4997, "answer": "import sys\nsys.setrecursionlimit(2*10**5)\ninput = sys.stdin.readline\nprint = lambda: print(int(input()))\n"}, "998": {"problem_id": 4998, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n a,b,c,d = list(map(int,input().split()))\n ans = (a+b+c+d)\n print(ans)"}, "999": {"problem_id": 4999, "answer": "# cook your dish here\na, b = map(int, input().split())\nfor i in range(0, len(a)):\n if a % 2 == 0 and a / 2 > b :\n  print(i)"}}
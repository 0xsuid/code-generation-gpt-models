{"0": {"problem_id": 0, "answer": "from sys import stdin\ninput=stdin.readline\nn=int(input())\na=list(map(ord,input().strip().split()))\nb=[]\nfor i in range(n):\n\tx=ord(a[i])-ord('0')\n \tb.append(x)\nif len(b)==0 or b[0]!=b[1]:\n print(-1)"}, "1": {"problem_id": 1, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(a[0])"}, "2": {"problem_id": 2, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n - 1):\n a[i] += 1\nprint(a[-1])"}, "3": {"problem_id": 3, "answer": "n,q=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\tl,r=[int(x) for x in list(a[i])) for i,x in enumerate(str(i))]\nprint(max(sum(l))+1)\n"}, "4": {"problem_id": 4, "answer": "from bisect import *\nn = int(input())\nx = list(map(int, input().split()))\nh, mm = (0, 0)\nfor i in range(n):\n  if mm >= x[i]: break\nprint(0)"}, "5": {"problem_id": 5, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\npos = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tif(pos[i] - 2 >= l[-1] and pos[(l - i) % l] == l): l.append(0)\nelse: l = [0] + l + [list(range(1, n+1))]\nans = 0\nj = 1\nwhile(j < n): j += 2\nprint(ans)"}, "6": {"problem_id": 6, "answer": "t = int(input())\nfor _ in range(t):\n   n, x = list(map(int, input().split()))\n\n  d = [0] * (x + 1)\n#  print(n, *x, d[-3:])\ndef dfs(p, i, max_head_count) :\n\tif p[i]!= -1 : return False\n\n\tcur = max(0, n - 1 - i) + min(x - 2 * i + p.get(cur, 0, -2)) + (p[cur] - cur) * min((i - x + 2) / 2 for x, p in enumerate(dp[:i]) if p) - (max(1, (i + x) // 2)) * cur + cur * x - n * n + i * 2 - p * p + n // p\np = []\ndfs(3, 3, 1, 2, 4, 10, 20, 50, 100, 200, 400, 500, 600, 800, 1000, 10000)\n\n"}, "7": {"problem_id": 7, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip('\\n').split(' ')])\n#print(a)\nans=0\nif a[0][0]==a[-1][1]:\n   ans+=1\nprint((ans%2) + 1)\n\n"}, "8": {"problem_id": 8, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nfor i in range(n):\n\ts = input().rstrip('\\n') +'' + [int(x) for x in list(map(str, s).split(' '))] + ['2' if i % 2 == 0 else '3' for i,x in enumerate(s) if x == '1'])\nprint(0)"}, "9": {"problem_id": 9, "answer": ""}, "10": {"problem_id": 10, "answer": "n = int(input())\na = 0\nfor i in range(0,n):\n\ta += (i + 5)\nif(a>=2 and a<=4): a = a - 1\nprint(2*a)"}, "11": {"problem_id": 11, "answer": "n,a,b,p,q=list(map(int,input().split()))\nc=[]\nfor i in range(1,n+1):\n\tc.append(b-i-1)\nprint(max(c))\n\n"}, "12": {"problem_id": 12, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n  a.append(a[-1]+i)\nans = 0\ni = 1\nwhile i < n and a[i] > a[_i]: i+=1\nprint(ans)"}, "13": {"problem_id": 13, "answer": "n,k = list(map(int,input().split()))\ns = [0]*(n+1)\nfor i in range(k):\n\ts[i] = int(input())\nif n==1:print(0)"}, "14": {"problem_id": 14, "answer": "from collections import deque\nn, k = list(map(int, input().split()))\np = [-1] * (n + 1)\nans = []\nfor i in range(n):\n\tx = (p[i] - p[n - i - 1]) // 2 + (i - n + 2) * k + [0] if i % 2 == 0 else [len(p), i] + ans.append(deque(sorted(x)))\nif len(ans) > k: print(-1); return\ns = ans[-k:]\nprint(max(0, s))"}, "15": {"problem_id": 15, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na,b,c = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(1, n+2):\n  s[i] = (a-b)//c\nprint('YES\\n')\n"}, "16": {"problem_id": 16, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nfrom collections import deque, defaultdict, Counter\nn = int(input())\nans = [tuple(map(int, input().split())) for _ in range(n)]\nfor i, t in enumerate(ans):\n   ans[i] += t\nprint(*ans)"}, "17": {"problem_id": 17, "answer": "n,k,t=map(int,input().split())\na=0\nfor i in range(n):\n\ta+=(int(input())-1)\nprint(a)"}, "18": {"problem_id": 18, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nimport numpy as np\ns = np.array(stdin.readline().split(),dtype=np.int).reshape(2,3)\nn = int(s[0])\nfor i in range(n):\n\ts1 = s1[:-1] + s[i:i+2]\n  \tt = list(map(int,s.split()))[:n].tolist()\nprint(''.join(t))\n"}, "19": {"problem_id": 19, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n\tn = input().rstrip()\n\n\tp = list(map(int,input().strip().split()))[:n.find('1')+1] + [p[n[0]]]*(len(p) - 1) + ['0' if p[-2]=='1' else '1'] + [['0']*n for _ in [0,1]])\n  \tc = [list(x) for x in zip(*[iter(c)]*2) if x.count('0')!=0]\n#\tprint(['YES', 'NO'])\n"}, "20": {"problem_id": 20, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: input().rstrip().split()\nn = int(input())\nfor i in range(n):\n\th, mm = map(int, inp())\n\n\tif mm - h < 0: print(0)\n"}, "21": {"problem_id": 21, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = a[0]\nfor i in range(n):\n\tans += max(a[i], ans)\nprint(ans)"}, "22": {"problem_id": 22, "answer": "s = input()\nn = len(s)\nif s[0] == 'o' or s == \"\":\n print(\"No \" + str(n - 1) + \" testcase\")\nelif (s[-1]!= 'a' and s!= \"a\"):\n for i in range(1, n - 2, 2) :\n  print(i + 1, end = \" \")"}, "23": {"problem_id": 23, "answer": "import sys\nfrom math import floor,ceil\nsys.setrecursionlimit(10**6)\ndef input():\n\treturn sys.stdin.readline()[:-1]\nn=int(input())\na,b=list(map(int,input().split()))\ns=[]\nfor i in range(n-1,0,-1):\n  s.append(i) \n#print(s[0])\nif s[-2]=='0' and len(b)>=2 and a<=b and (len(a)-1)%2==0:   #print('i',i,a[i],i[1])  :  print(2*i+1-i*b,3*(1-(a-b))+2-a) : s=s\nelse : # print('n',n,n[2]) : print(\"n\",n)"}, "24": {"problem_id": 24, "answer": "t = int(input())\nfor i in range(t):\n n = input()\n x = n[0]\n y = x[1:]\n c = 0\n d = []\n for j in n: \n  if j=='O': d.append(1)\n if len(d) == 1: print('YES')\n elif d[-1]==1:print('NO')"}, "25": {"problem_id": 25, "answer": "n,k=list(map(int,input().split()))\nmatrix=[]\nfor i in range(1,n+1):\n  if i>=k and i-k>1 or i==0 or (i==1 and j>k)and j-i<=n:print(-1)\n"}, "26": {"problem_id": 26, "answer": "import sys\nfrom collections import Counter, defaultdict, deque, OrderedDict, ROUND_CEILING\n#sys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 998244353\ndef II(): return int(input())\nD = dict()\nfor _ in range(I()):\n\tD[I] = [list(map(int, input().split()))]\nS = list(D.keys())[::-1]\n\n\tm = S[:S.index(max(S)) - 1] + S.pop() + D[S[i:i+8]][:].get(m, 0) + 1\nprint(II())"}, "27": {"problem_id": 27, "answer": "n = int(input())\ns = input()\nfor i in range(n):\n\tif s[i] == 'a' and len(s) > 1: print(i + 1)\n"}, "28": {"problem_id": 28, "answer": "import sys\nfrom collections import defaultdict, deque\ninput=sys.stdin.readline\n# sys.setrecursionlimit(10**8)\nINF=float('inf')\nmod=10 ** 9 + 7\nMOD=int(1e9)+7\ndef II(): return int(input()) if input().strip() == '\\n' else lambda x: print(''.join(map(str,input().split())))\nx=II()\nans=[]\nfor i in range(0,len(x)-1):\n\tif x[i]=='1': ans.append(i+1) \nif len(ans)==0 or ans[-1]!='': return -1\nprint(*ans[:-1])"}, "29": {"problem_id": 29, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\neps = eps_from_i = 1e-12\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\n# def LI2(x): return (x-1)**2 if x==6 else x*2+1\nclass UnionFind():\n  def __init__(self, n): self.par = list(range(n))\n\n  # def unite(a, b):\n #   if (a<b) : b, a=a+b, 1\n def find_unite_group(node, group): # \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u6570\u7ec4\uff0c\u5426\u5220\u9664node\u4e3agroup\u7684\u7b2ci\u7b49\u6574\u4e0b\u4e14\u5176\u4ed6\u7a97\u53ef\u80fd\u6027\u8ddfgroup\u548c\u81ea\u52a8\u8fb9\u7f18\n return find(group, node)\n\n def union(root1, root2):\n\n root1.find(UnionFind(1))[0]!= 0\n\n # \u5982\u679croot2\u4e0enode1\u7684\u65f6\u5019\u4e0d\u4e00\u6837, \u5219\u628a\u540c\u65f6\u66f4\u65b0\u8fdb\u884cunion\u624d\u52a0\u80af\ufffd\u672c\u51cf\u53bb\n\n union1 = LI()\n union2 = union3(LI())\n if(sum(union1[1]) < sum(uniq(0, 2))): continue\n\n print(min(int((union2[3]))) + 1)"}, "30": {"problem_id": 30, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\ndef LI(): return list(map(int, input().split()))\n# import numpy as np\nn = int(input())\na = [LI() for _ in range(n)]\ns = []\nfor i, x in enumerate(a[:-1]):\n  s.append(x*(i+1)//2 + a[i])\nprint(len(s))"}, "31": {"problem_id": 31, "answer": "n, k = list(map(int, input().split()))\nans = [0 for i in range(23 * n + 1) if i % k == 0]\nfor i, a in enumerate(ans):\n  ans[i] += a\nprint('\\n'.join([str(x) for x in ans]))"}, "32": {"problem_id": 32, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n-1):\n  d[i] = d.get(i, 0) + 1\ng = [0] * (n+1)\ns = 0\nwhile len(g) > 0 and s < n and g[g[s]] == 'N' and (len(s) == 0 or (s == n) and dir[dir[0]]!= '0'): s = s + n\nif s >= n: print('YES')\nelse:print('NO')"}, "33": {"problem_id": 33, "answer": "n=int(input())\na=list(map(int,input().split()))\nx=a[0]\nfor i in range(n-1):\n  if a[i]<x: x-=1\nprint(x)\n"}, "34": {"problem_id": 34, "answer": "n,a,b = list(map(int,input().split()))\nl = []\nfor i in range(a+b):\n  l.append(input())\ns = sum(l)\nprint(max(0,s-l[-1]))"}, "35": {"problem_id": 35, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n+1):\n  a.append(list(''.join(str(x) for x in input())))\nprint('YES' if a else 'NO')\n"}, "36": {"problem_id": 36, "answer": "n = int(input())\nx = list(map(int, input().split()))\ny = [x[0], x[1]]\nfor i in range(2, n):\n y.append(i+1)\nprint(y[-1])"}, "37": {"problem_id": 37, "answer": "a,b,c = list(map(int, input().split()))\nd = (a+b+c)//2\nprint('Yes' if d == 0 else 'No')\n"}, "38": {"problem_id": 38, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef II(): return int(input())) : return II()"}, "39": {"problem_id": 39, "answer": "s=list(input())\nfor i in range(0,len(s)):\n\tif s[i] in s:print(' '.join(map(str,s)))\n"}, "40": {"problem_id": 40, "answer": "n = int(input())\na,b = list(map(int,input().split()))\nfor i in range(n):\n\ta.append(a[i])\nb.sort(key=lambda x: (x[0], x[1]), reverse=True)\nprint('Unrated' if a[-1]<=b else '&rating')\n"}, "41": {"problem_id": 41, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(n):\n   s+=a[i]\nprint(s)\n"}, "42": {"problem_id": 42, "answer": "n = int(input())\ns = input()\ncnt = 0\nfor i in range(n):\n\tif s[i] in s and (ord(s[0]) - ord('A') + 1) > 0: cnt += 1\nif n == 1: print(0)\n"}, "43": {"problem_id": 43, "answer": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\nprint(*a)\n"}, "44": {"problem_id": 44, "answer": "from fractions import Fraction\nimport sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "45": {"problem_id": 45, "answer": "n,k=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(i+k)\nans=sum(s[:n])\nprint(ans)"}, "46": {"problem_id": 46, "answer": "n,m=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(m):\n\ta[i]=((x+y)%5)**0.5+((x-y)*(5-(i-1))//2)//6\nprint(sum(a))"}, "47": {"problem_id": 47, "answer": "n, x = list(map(int, input().split()))\nl = [0] * (n + 1)\nfor i in range(n):\n\tl[i] = l[n - i] + x\nans = 0\ni = 1\nwhile(i < n + 2) and (i % 2 == 0 and i!= 0) <= n: i += 2\nprint(ans)"}, "48": {"problem_id": 48, "answer": "n,m,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(max(a[i-1]*i+k,i)*i)\nprint(' '.join([str(j) for j in list(bin(i)[2:])]))\n\n"}, "49": {"problem_id": 49, "answer": "from sys import stdin, stdout\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(0,n):\n\ta[i]=str(bin(i)[2:][::-1])\nprint(*a)"}, "50": {"problem_id": 50, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations, permutations, accumulate, combinations_with_replacement, zip_longest, chain_stack, heapq, heappop, numpy, copy_to_string, re\nn = int(input())\ns = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n  b.append(list(map(int, input())))\nprint(max(b))"}, "51": {"problem_id": 51, "answer": ""}, "52": {"problem_id": 52, "answer": "n = int(input())\np = [0] * (n + 2)\nfor i in range(n):\n\tp[i] = 1 + p[n-i-2]\nans = []\nvisited = 0\nwhile len(ans)!= n: ans.append(sum(map(lambda x: x[0], ans)))\nprint(*ans, sep='\\n')"}, "53": {"problem_id": 53, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [i for i, x in enumerate(a) if x % 2 == 0]\nprint(max(b))"}, "54": {"problem_id": 54, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "55": {"problem_id": 55, "answer": "import math\nn, k = list(map(int, input().split()))\ns = [0] * n\nfor i in range(n):\n\ts[i] += 1\nans = []\nif n < 2 * k or k >= 2 ** (n - 2) - 1 or s[-2] > 1 and n >= 3 * (k - n) :\n   print(\"No\")\nelif k < n <= 10 ** 18 or n % 2 == 0 and len(ans) <= 2 :  ans.append(str(k)))\n"}, "56": {"problem_id": 56, "answer": "import math\nn, t = list(map(int, input().split(' ')))\nl = []\nfor i in range(n):\n\tl.append(math.ceil(i / 2) + 1)\nans = 0\nf = 1\nif n > l[-1][0]:\n   ans += f * (l[n - 1][1] + 2 * f) / (2 * math.pow(f, 2))\nprint(ans)"}, "57": {"problem_id": 57, "answer": "n = int(input())\nx, y = list(map(int, input().split()))\nfor i in range(n):\n\tx[i] = x.copy()\n#print(x)\na, b = 0, 0 if x[0] == 1 else 1 \nwhile a + 1 < n and b > 0: a += (b - a) // 2\nb -= (a - b)//2   # -1 = 1, 1 = 2, 2 = 3\nprint(-1)"}, "58": {"problem_id": 58, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nprint(len(b))"}, "59": {"problem_id": 59, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in range(n-1):\n\ts.add(a[i])\nprint('YES' if s else 'NO')"}, "60": {"problem_id": 60, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import defaultdict, deque\ndef I(): return int(input())\nMOD=10**9+7\nI=lambda:list(map(int,input().split()))\nN=I()\nD=deque([[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,138,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,204,205,206,207,208,209,211,216,223,224,225,226,227,228,229,232,233,234,235,236,237,238,239,241,242,244,245,251,252,254,255,256,257,260,269,271,272,273,274, 285, 281, 283, 293, 296, 298, 300, 301, 312, 313, 314, 315, 316, 317, 318, 320, 331, 352, 243, 254, 256, 257, 258, 259, 264, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 288, 289, 310, 311, 321, 323, 344, 345, 346, 347, 348, 349, 353, 356, 360, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 379, 384, 389, 400, 401, 402, 403, 404, 405, 406, 414, 415, 416,418,419,432,433,434,436,431,439,440,441,443,446,457,461,463,467,479,487,488,489,490,491,494,500,501,502,503,504,505,537,538,557,559,561,571,577,587,593,599,601,606,607,613,614,616,618,640,641,643,647,653,659,661,668,669,680,681,684,685,690,696,678,677,688,689,683,691,698,699,700,701,702,703, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 158, 163, 159, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 225, 226, 227, 228, 230, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 249, 250, 251, 252, 263, 266, 268, 27, 269, 274, 26, 28, 29, 30, 31, 32, 33,"}, "61": {"problem_id": 61, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nn, = list(map(int, input().split()))\nb = [0]*100001\nfor i in range(n):\n\tb[i] = int(input())\na = b[:n+1]\ndef dfs(i, k, d): # k = min(k for x in b if x<=i and x>=k) + max(0, (k-i)**(d-1) for i,j in enumerate(b) if i>j) - d\ndfs(a[0], 0, a[1:k])\nprint('<', end=' ')"}, "62": {"problem_id": 62, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[0])"}, "63": {"problem_id": 63, "answer": "from collections import defaultdict, deque\nn, k = list(map(int, input().split()))\na = [int(x) for x in input()]\ns = set(a)\nfor i in range(len(s)):\n  if s & (k-1) == 0: s |= i\nprint(k, end=' ')"}, "64": {"problem_id": 64, "answer": "n,k = list(map(int,input().split()))\ns = input()\nif s == 'a':\n\tprint('YES')\nelse: print('NO')"}, "65": {"problem_id": 65, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(min(a))"}, "66": {"problem_id": 66, "answer": "t,w,b=list(map(int,input().split()))\nif b==0:print(0)\nelif (t-w-1)%2==(b-2)*(t+w+1):print(\"1\")\nelse:s=input()\ni=0\nwhile i<len(s):\n\tif s[i]=='1':i+=1;s.pop(i);i-=1\nprint(' '.join(str(x) for x in s))"}, "67": {"problem_id": 67, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\ta[i] = list(map(int,input().rstrip()))\n#print(a)\nif a[-1] == \"+\" and a.count(1) > 1: print(\"0\")\nelse: ans.append('0')\nprint(*ans)"}, "68": {"problem_id": 68, "answer": "from collections import deque\nimport sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n\ta[i]=deque([(x+1,y,1)])\n#print(a)\nif a[0] not in ans: ans.append([0])\n\n\t# print(len(ans[1]))\n\n"}, "69": {"problem_id": 69, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n\tn, x = list(map(int, input().rstrip().split()))\n\n\tif x == '0' and len(set(str(x))) == 0 or x[0] == 1: print(0)\n"}, "70": {"problem_id": 70, "answer": "n, k=list(map(int,input().split()))\ns = []\nfor i in range(n):\n\tif s[i]%10==0: s.append(i)\nprint(len(s))"}, "71": {"problem_id": 71, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nD = LI()\nN = len(list(enumerate(input())))\nfor i in range(N):\n\tD.append(D[i] + [float('-inf')) * (N-i+1) // 2)\n\n\tprint(*D)"}, "72": {"problem_id": 72, "answer": "from sys import stdin,stdout,setrecursionlimit,io.Bytes,collections.defaultdict\ninput=stdin.readline \nn=int(input())\nl=list(map(int,input().split()))\nr=[]\nfor i in range(0,n):\n\tr.append(l[i])\nprint('\\n'.join(r))"}, "73": {"problem_id": 73, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(1)\n"}, "74": {"problem_id": 74, "answer": "# cook your dish here\nn = int(input())\np = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n  p[i] += n - i\nprint(p)"}, "75": {"problem_id": 75, "answer": "n,m=list(map(int,input().split()))\nif n==1 or m==2 or (n==3 and (m-1)%2==0):\n print('NO')\nelif m<n<(n-2) or n<m<=m==(m+2*n) :\n   print(('YES' if i!=j else 'NO'))\n\n"}, "76": {"problem_id": 76, "answer": "n,m,a,b = list(map(int,input().split()))\nl = []\nfor i in range(n):\n   l.append(max(0,sum(l[i-1]*(m-i) if i%m == 0 else 0, 0)))\nans = 0\nd = [0] * (n+m+1)\nwhile len(d) > 0 and d[-2]!= 0: d.pop()\nprint(ans)"}, "77": {"problem_id": 77, "answer": "n = int(input())\na = [list(map(int, input().split())) for _ in range(n+1)]\nprint(sum(a))"}, "78": {"problem_id": 78, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, T = map(int, input().split())\narr = [[0]*T for i in range(n+1)]\nfor _ in reversed(input()):\n  arr[T-1].append(arr[0][0])\nans = 0\nd = 1e9\nmod = 10**9+7\na = [1]\nb = []\ncnt=0\nwhile a!=[] and cnt<T and len(a)<=T - 1:\n\n  if a[-2]==1 and (b[a.index(max(b)-1)//2]) not in d and b[b.pop()] == 1 and ans==0 and a==b and d*a[d]<mod and not(ans, b) : ans+=(ans*d)%mod + 1*(mod-d)*(1-a*b**2)\n"}, "79": {"problem_id": 79, "answer": "from collections import defaultdict, namedtuple\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().split()]\n# def LI(*args, **kwargs): return kwargs.get('a', None) or [None]*(len(args)-1)"}, "80": {"problem_id": 80, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\neps = 1.0\nfrom functools import cmp_to_key\ndef LI(): return [int(x) for x in input().split()]\n# import sys; from sys import stdin,stdout,setloc; LI= __import__('sys').readlines\nreturn LI\n"}, "81": {"problem_id": 81, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = 10**20\nMOD = 998244353\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\nD = {0: 1}\nfor i in range(1, 1001):\n  D[i] = D.get(i, 0) + 1 if i % 2 else 1\nfrom functools import lru_cache\nL = [0] + LI()\n@L.extend(D[-1])\nbad = False\nM = 100001\nif L[1] == 0: print(0)"}, "82": {"problem_id": 82, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nA = int(input())\nM = [0] * (n + 1)\nfor i in range(n):\n  M[A // i] += 1\nprint(sum(M))"}, "83": {"problem_id": 83, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n//2):\n  b.append(a[i]*i)\nans=0\nd=10**3+1\nif b[0]<=b[len(b)-1-i-1] or (d==0 and len(d)%2)<b.count(max(0,b)) :\n\tans+=1 \nprint(ans)"}, "84": {"problem_id": 84, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(a[i] - a[-1-i])\nprint(len(ans))"}, "85": {"problem_id": 85, "answer": "from bisect import *\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000000)\nmod = 10**9+7; md = 998244353\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] = list(map(int,input().strip()))\nx = 0\ny = n-2\nwhile x<=y and x+y<n: x = (x+(y-x))%mod\nif x==y: break\nprint(-1)"}, "86": {"problem_id": 86, "answer": "from operator import itemgetter\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nc = 0\nfor i in a[::-1]:\n  b[i] = max(b[-i], i) + 1\n#print(c, n, b, i, c, a, len(a), i+n*n)\n\n"}, "87": {"problem_id": 87, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndd = [dd[i][j] for i in range(1,7)]\nfor i,j in enumerate(list(map(int,input().split()))):\n   dd[j][i] = 1 if j in (2,9,16,24,31,37,41,46,53,64, 75, 76, 81, 85, 86, 90, 97, 100, 101, 103, 107, 108, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 434, 433, 432, 436, 443, 483, 490, 517, 506, 529, 355, 259, 265, 279, 296, 297, 305, 322, 327, 328, 333, 329, 336, 332, 334, 335, 339, 343, 344, 345, 356, 360, 365, 357, 370, 361, 372, 375, 376, 377, 378, 380, 387, 392, 413, 420, 423, 424, 425,426,433,439,443,449,457,461,463,467,479,487,494,491,499,503,509,521,535,587,593,607,613,617,619,641,653,661,673,677,683,691,701,709,733,797,809,811,815,1>;\ndef dfs(x,y,d): return max(dfs(f[x][y][x-1]) for x in x)<=d\nprint(len(dd)-1)"}, "88": {"problem_id": 88, "answer": "from math import sqrt\nn = int(input())\na,b = list(map(int, input().split()))\nprint(n-a-b)\n"}, "89": {"problem_id": 89, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = 0\nfor i in range(0, n):\n x += a[i]\n print(x)\n"}, "90": {"problem_id": 90, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nn,k,s=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n  a.append([int(input()),i-1-a[i]])\nprint((sum(a)))\n"}, "91": {"problem_id": 91, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n  n, k = list(map( int, input().split() ) )\n\n  a = [ int(i) for i in input() ]\n#  print(a)\ndef main():\n\ta = sorted( a, key= lambda x: x[ -1 ] ) \n\n\t# print('a[0][0] =', a[-1][1] )\nt = main()\n"}, "92": {"problem_id": 92, "answer": "mod = 10**9 + 7;\nn = int(input())\na,b,c = list(map(int,input().split()))\ns = sum(a*b*c) % mod\nprint(s)\n"}, "93": {"problem_id": 93, "answer": "from math import gcd\nn = int(input())\na = [0] + list(map(int, input().split()))\nb = []\nfor i in range(n):\n  a.append(a[-1]+i)\nc = 0\nw = -1\nm = 1\nx = a[c]\ny = b.copy()\nwhile m < len(b) and w!= 0 and b[m] == c: w = x + y\nif w == 0: break\nprint(\"YES\")\nelse: print(\"NO\")"}, "94": {"problem_id": 94, "answer": "n = int(input())\na = [int(i) for i in input().split()]\n#print(a)\nk = 0\nfor x in range(1,n+1):\n\tif k<=a[x-1][0] and k>=b[0][1]:\n \t\tk+=1\nif n%2==0 and a[k][2]==1 and (k-b)**2 == 0 and ((k*(b-a))/2)%1 == 1:   print(k)"}, "95": {"problem_id": 95, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nif a[-n-1] < 0: print(\"NO\")"}, "96": {"problem_id": 96, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = lambda: list(map(int, input().split()))\nn, k = I()\ns = [[] for _ in range(k + 1)]\nfor i, x in enumerate(s[1:], 1):\n\tif x % 2 == 0: s[i].append(i - x)\n\n\ti = i - k + 2\nif k == 1: print(sum(paths) + sum(set(list(p)) for p in paths))\n\n"}, "97": {"problem_id": 97, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, Counter, OrderedDict,defaultdict,deque\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n# MOD = 998244353\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\ndic = {}\nfor i in range(1,27):\n  dic[i] = [i for i,x in enumerate(i[1:],4) if x[0] == '1']\nans = []\nn = int(input())\nx = list(map(int,input().strip().split(' ')))\ny = dict(zip('1'*n+1))\np = [(y[x] + 1,0)]\nwhile len(p) > 0 and y[p[-2]] <= 1e-9:\n\n  ans.append((x[:4]), p[4:5], '0' * (len(ans) - 1))\n\n return ans\n"}, "98": {"problem_id": 98, "answer": "a,b=list(map(int,input().split()))\nprint('YES' if a==b else 'NO')"}, "99": {"problem_id": 99, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\ta,b,q=list(map(float,input().split()))\n\n\tif abs(a-b)<=10**9:print(abs(b-a)//q)\n"}, "100": {"problem_id": 100, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: input().rstrip()\nn,m = map(int,input().split())\nprint(\" \".join(map(str, inp())))\n"}, "101": {"problem_id": 101, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb= list([int(i) for i in input()])\nif a[0]==1:print('YES')\nelse: print('NO')"}, "102": {"problem_id": 102, "answer": "s = int(input())\nfor i in range(s):\n n = input()\n if n.isdigit():\n  print(' '.join(map(str, n)))"}, "103": {"problem_id": 103, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\ta[i] = a.count(i)\nprint(ans[0])"}, "104": {"problem_id": 104, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.append(i+1)\nprint(len(a))"}, "105": {"problem_id": 105, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n ans.append(sum(a[:i]) + a[i+1:])\nprint(len(ans))"}, "106": {"problem_id": 106, "answer": ""}, "107": {"problem_id": 107, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(1000000)"}, "108": {"problem_id": 108, "answer": "s=input()\ni=0\nwhile i<len(s) and s[i]==' ':i+=1\nprint(''.join(map(str,s)))\n"}, "109": {"problem_id": 109, "answer": "from itertools import accumulate\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\nprint(accumulate(map(int, input().split())))"}, "110": {"problem_id": 110, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i]*-i)\nprint('\\n'.join(ans))"}, "111": {"problem_id": 111, "answer": "n, k = [int(i) for i in input().split()]\nprint(n//k)"}, "112": {"problem_id": 112, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += (a[i] ** 0.5)\nprint(ans)"}, "113": {"problem_id": 113, "answer": "n,k=list(map(int,input().split()))\ns=str(n)\nfor i in range(len(s)):\n\tif s[i]%n!=0 and (k-i-1)>=i+1:k+=i\nprint(k)"}, "114": {"problem_id": 114, "answer": "from sys import stdin, stdout\nimport heapq\nn,m=list(map(int,stdin.readline().split()))\nl=[0]*m\nfor i in range(n):\n\tl[i]=heapq.heappop(l)\nans=[]\ni=0\nwhile i+1<n and m>=2 and l[m-2]==1 and i<=n:ans.append([i[1] for j in l if j!=1])\nprint(ans[0][0])"}, "115": {"problem_id": 115, "answer": "r,s,p = list(map(int,input().split()))\np -= 1\nfor i in range(len(r)):\n\tif r[i]=='r' or i<=r[-i-1] or p>=i+1: p = 0\nprint(p)\n"}, "116": {"problem_id": 116, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))"}, "117": {"problem_id": 117, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append((int(input()), *list(range(m))) + [a[i]*(1/2)])\n#print(a, a[0]**0.5, \\\"\\\")\ndef dfs(A, B): return 0 if A<B else 1 if B<A else 2*A[A-B]\ndfs(B, A)"}, "118": {"problem_id": 118, "answer": "t = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(t):\n\tb.append(a[i])\nprint('\\n'.join(b))"}, "119": {"problem_id": 119, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = [j for j in a if j not in i]\nprint(*a)"}, "120": {"problem_id": 120, "answer": "n = int(input())\ns = input()\na = [0] + list(map(int, input().split()))\nfor i in range(len(s)):\n\tif s[i] == '?' and a[-1] <= i+1: break\nif len(set(a)) == 4: print('===')\nprint('?')"}, "121": {"problem_id": 121, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 10**9+7\nn = int(input())\nA = list(map(int,input().split()))\nB = [0]*n\nfor i in range(n):\n\tA[i] = A[(i+1)%MOD]\n#print(A,B,A.translate(None),B[-1])\ncnt = 0\nif n%2==1: cnt += 1\nans = 'YES' if n>1 else 'NO'\nprint('\\n'.join(ans))"}, "122": {"problem_id": 122, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = a[0]\nfor i in range(n-1):\n   x = min(a[i+1], x)\nprint(\"YES\")\n"}, "123": {"problem_id": 123, "answer": "import sys\nfrom collections import defaultdict,Counter\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\neps = eps_from_time(1e-9) + 5\ndd = [0]*(10**6+1) #\u8f93\u5165\u5176\u5b83\u7684\u65f6\u95f4\u8ddd\u79bb\ndef dfs(a,b):\n\tif (a >= b) or (b >= a) : return 0\n\n\ti = bisect.bisect_left(dd,dd[a] - a[i],b) - 1 #\u5224\u65b0dd\uff0c\u90a3\u5c31\u53ef\u4ee5\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u503c\u4e3aa \u8868\u793a\u5173\u7167\u7684\u53f3\u7acb\u79fb\u52d5\n\n \treturn (dfs(i,j) for j in range(n) if a <= j)\n\n"}, "124": {"problem_id": 124, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6)\nfrom heapq import heapify, heappop,heappush\ndef get_ints(): return list(map(int, input().split()))\ndata = [int(input()) for _ in range(31)]\nn = int(data[0])\ng = []\nfor i in data[1:]:\n\tg.append(g[-1] + [i] * (n - i) + i + 1)"}, "125": {"problem_id": 125, "answer": "L, S, R, P = list(map(int, input().split()))\nA = []\nfor i in range(1, L+1) :\n A.append(input().replace(\"1\", \"0\") + \" \" * (L - i - 1) * 2)\nprint(\"YES\") if A else print(\"NO\")\n"}, "126": {"problem_id": 126, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('NO')\nfor i in range(n):\n\tif a[i] == \"0\" or (len(a) - i - 1) % 10 == 0: print(\"YES\")\n"}, "127": {"problem_id": 127, "answer": "n, f = list(map(int, input().split()))\nl = []\nfor i in range(1, n + 1):\n\tl.append(input())\nk, l = l[:n - 1]\nprint(max(l))\n\n"}, "128": {"problem_id": 128, "answer": "import math\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(math.ceil(i/k) + 1)\nprint(max(a))"}, "129": {"problem_id": 129, "answer": "n,m,k,l = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(m):\n\ta[i] = sum(x for x in a if x not in [i,i+k])\nprint(len(a))"}, "130": {"problem_id": 130, "answer": "n,m = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(m):\n  s[i] = (i+n)//2\nprint(s[n])"}, "131": {"problem_id": 131, "answer": "n = int(input())\nfor i in range(n):\n\ta = list(map(int, input().strip().split(' ')))[:n] +'' + input()\nprint('No')"}, "132": {"problem_id": 132, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  a.append(a[i-1] - a[0])\nc = [0] * (n + 1)\nd = [[0, 0, -1], [1, 1, 2], [-2, 3, 4]]\nres = sum(b[d[k][i]][j] for k, v in d[1][1:]) - 1\nprint(res)"}, "133": {"problem_id": 133, "answer": "import sys\ninput = sys.stdin.readline\nMOD = int(1e9 + 7)\nsys.setrecursionlimit(2 * (MOD + 1))\nfrom functools import reduce\ndef solve():\n\tn, m = map(int, input().split())\n\n\tarr = [0]*(n+1) # \u8fd4\u56e0\u8d4b\u56de\u539f\u59cb\u4f4d\u7f7a\u6570\u91cf\uff0c\u9700\u8981\u8ba1\u7b97\u7b26\u5408\u4e00\u4e2a\u5b50\u8282\u70b9\u6574\u957f\u5ea6\n\n \tif arr[-1] == 0: print(arr.count(0) + (m - 1) // 2)  # \u5982\u679c\u6700\u5927\u503c\u4e0d\u80fd\u8ddf\u96be\u5230\u81ea\u5df1\n\n\n\n"}, "134": {"problem_id": 134, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [i for i in range(n + 1)]\nfor i, j in zip(a, a[1:]):\n p[i] = j\nans = 0\nif n == 1: ans += 1\nprint(ans)\n"}, "135": {"problem_id": 135, "answer": "n,k = map(int,input().split())\na = [int(i) for i in input().rstrip('\\n').split()]\ns = []\nfor _ in range(n):\n  s.append(a[-1]*(k-2))\nprint('No')"}, "136": {"problem_id": 136, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(i)\nprint('='.join(b))"}, "137": {"problem_id": 137, "answer": "import math\nfrom collections import defaultdict, deque\nn, p = list(map(int, input().split()))\ncnt = [math.prod(pow(2, n - 1, 2)) for p in range(1, math.ceil(n / 2) + 1)]\nans = []\nfor x in cnt: ans.append(x % p)\nprint(ans[-2])\n"}, "138": {"problem_id": 138, "answer": "n,a,b,c = list(map(int,input().split()))\np = a + b + c\ns = [0]*(n+1)\nfor i in p: s[i] = (s[n-1] + a) * i\nans = 0\nwhile len(s) > 0 and ans < n: ans += s.pop()\nprint(ans)"}, "139": {"problem_id": 139, "answer": "n, m = list(map(int, input().split()))\na = [0]*(m+1)\nfor i in range(1, n):\n  a[i] = 1+min(i+2*a[n-1-i], m+i-m) if i>0 else 0\nprint(\"YES\")\n"}, "140": {"problem_id": 140, "answer": "# \u4e0b\ufffdiverse\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  x1,s1=[int(x) for x in input().rstrip('\\n').split(' ')];a.append(max(a[-1],x1));\nb=[0]*m\ndef dfs(i,j,k,v):#\u7c7b\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u65b9\u5411\uff0c\u53ef\u80fd\u533a\u5206\u8d77\u59cb\u7684\u8ba1\u7b97\u6700\u5c0f\u503c\nif i<=k:b[i]=k+[j]\ndfs(0,i,-1)\nwhile b[k]>0:k-=1 #\u8def\u5f84\u72af\u7387\u6570\u7ec4\u7684\u957f\u5ea6\nj+=1\nprint(j)\n\n"}, "141": {"problem_id": 141, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**6) * 10**5)"}, "142": {"problem_id": 142, "answer": "n, l = list(map(int, input().split()))\nc = [0] * (2 * l + 1)\nfor i in range(n):\n  c[i] += 1\nans = 0\nd = {}\nf = []\ndef dfs(x, i, x, n, d.get(0, 0)) :   # x = x + i\nif n == 1 :\n\tans += d[f[-1]] * x\nprint(ans)"}, "143": {"problem_id": 143, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif a[i] > a.count(a.get(i)): ans += 1;\nprint(ans)"}, "144": {"problem_id": 144, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint('YES' if a[0] == '1' else 'NO')"}, "145": {"problem_id": 145, "answer": "# cook your code here\ns = input()\nn = len(s)\nfor i in range(n):\n\tif s[i] == 'f' and n % 2 == 0 and (n - i) % 4!= 0: print('Chat with HER!'), s.rstrip()"}, "146": {"problem_id": 146, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = [int(i) for i in input ().split()]\nans = max(0, abs(a[1] - a[0]))\nfor b in range(1, n + 1):\n\tif b == 1 and ans >= 2 and (b - 2) >= 0 and b - (2 * b) <= 0: ans = min(ans, 2 * a)\nprint (ans)"}, "147": {"problem_id": 147, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn,c = list(map(int,input().split()))\na = [0]*(n+1)\nfor _ in range(c):\n a[c[-1]] += 1\nans = 0\ni = -1\nwhile i <= n: \n  ans += (sum(a[i:i+3])) * (n-i-2) + (i + 1) * c[3*i]\nprint(ans)"}, "148": {"problem_id": 148, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\ndef solve():\n\tn, a = map(int, input().split())\n\n\tif a % 2 == 0 and n == 1 and a // 2!= 0: print('YES')\n \telif n > 1: return False\n#\t\theap = [(a - 1, 0) for a in range(n)]\n"}, "149": {"problem_id": 149, "answer": "import math\nn = int(input())\nans = []\nfor i in range(n):\n\ta, b = list(map(int, input().split()))\n\n\tans.append((a + b, n - i + 1))\nprint(max(ans))"}, "150": {"problem_id": 150, "answer": "n = int(input())\na = [0]*(n+1)\nfor i in range(2, n+2):\n a[i] += 1\n print(a[-1])"}, "151": {"problem_id": 151, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nfrom functools import lru_cache\nL = [None]*1001\nfor i in range(1,1001):\n  L[i] = list(map(int, input().split()))\ndef dfs(s, i, c, l, d, r):  # print(l,i,c,r,dfs(i[0], i[1], c+[s[:3], s[-3:]], l[3:], r[:-3]) )\n# print()\nif len(set(L)) >= 3: print('no')\nprint(''.join(str(x) for x in L))"}, "152": {"problem_id": 152, "answer": "import sys\nsys.setrecursionlimit(10000000)\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,m,k = list(map(int,input().split()))\na,b = [int(i) for i in input().rstrip()]\nd = [[] for _ in range(n+1)]\nfor i,s in enumerate(sorted(b)):\n\td[b[i]-1].append((i,ord('a')))\nans = [-1] * n\ndef dfs(curr,c,d,ans,visited,x,y,z=1):\n\n\tif ans[c]<ans[x] and c in d[y]: return\n   else: \t\tprint(x-c and z-y and x+c<=n and (x+y)%1000000007==0 and y+z==n-1 and not (c-x<(y+x)) or z+n==1 or x==y or y==z): return\tans.append(c)\t# \u5404\u8d77\u70b9\u8ddd\u79bb\u6392\u5230\u6700\u5927\u503c\uff0c\u90a3\u4e48\u663e\u7ec6\u6574\u9664\u4e00\u4e2a\u81f3\u957f\u5ea6\u4e3a1000000000\n#\tdfs(0,1,a[0][0],0,[])\t= a[1][1], a.pop(), 0,[0]*(a.size())\t- 1, \u9012\u5f52\u8ba1\u7b97\u8f93\u5143\u7d20\u7b49\u5f0f\u7684\u6570\u636e\u4e0b\u9762\t\u53ef\u4ec5\u53d1\u73b0\u83b7\u53d6\u89e3\u6cd5\u7684\u8303\u56f4\u5185\u90fd\u88ab\u5b89\u5168\u79fb\u52a8\u9a8c\u5224\u4e24\u90e8\u5206\u7684\u64cd\u5217\t\u52a0\u4e0a\u8fd9\u6837\u628a\u9700\u788e\u53d8\u4e14\u4e0d\u80fd\u51cf\u53bb\u65f6\u95ee\u9898\t\u6bd4\u5982\u6709\u641e\u9000\u51fa\u6765\u7684\u72b6\u6001\t\u7a97\u53e3\t\u80af\u5b9a\t\u9996\u5146\t\u590d\u6742\u5e94\t\u518d\u5f80\t\u5de6\u8282\t\u6811\u867d\u7136\u8fd4\u56de\t\u672c\u8f6c\t\u800c\u4e0d\u662f\t\u5b9e\ufffd\u30b7\u30e5MANAPointings\t\u4ee5\u53ca\t\u5076\u5c3d\u91cf\u6ee1\u8d25\t\u8981\u8d8a\ufffd\ufffd\t\u5b58\ufffdials\t\u4f4d\u7f6e\t\u5feb\u3011\ndp = 0\nwhile dp<len(ans)-1:\tdp+=1\nprint('\\n'.join(dp))"}, "153": {"problem_id": 153, "answer": "n,k,m=list(map(int,input().split()))\nt=[]\nfor i in range(k):\n  t.append((t[i][0],i+1)*m)\nprint(max(t))\n\n"}, "154": {"problem_id": 154, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\ntree = [0] + [int(x) for x in input().split()]\nfor i in range(1,n+1):\n\ttree[i] += [x[0], x[1]]\n#print(tree)"}, "155": {"problem_id": 155, "answer": "from sys import stdin\nimport sys\nsys.setrecursionlimit(10**6)\nint1 = lambda x,y: int(x) - 1 if y == 0 else x//2 + y\nstdin.readline().rstrip('\\r\\n')"}, "156": {"problem_id": 156, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\nfrom math import ceil\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x for i, x in enumerate(itertools.groupby(LI())] if x > 1]"}, "157": {"problem_id": 157, "answer": "a = int(input())\nprint(0)\nfor i in range(1,a+1):\n print(a-1+2*a,i)"}, "158": {"problem_id": 158, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\ta[i] += 1\nprint(\"YES\")"}, "159": {"problem_id": 159, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(len(a))"}, "160": {"problem_id": 160, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(10**6)\nINF = 10**20\nI = float('inf')\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\nDict = {}\nfor i in range(I): Dict[int] = [i, i]\nclass UnionFind():\n  def __init__(self,n,x): self.n = n  # n is the number of integers included in a list of tuples (a, b, c, d, e, f, g, h) where x < a and y < b and c < d and e < f and g and h are lists where h[i] < x and i >= 0\n@lru_cache(maxsize=None) def find_contiguous_set(x,y): return set(range(y)) if x >= y else {x:y} # x, y are the indices of the set we are in. We don't care if we found an empty set or we can't find some subset of set that we haven't found yet. Instead we want to find the subset that contains all the elements from x to y. If there are more than one subset with that same value, return all of them in this order. O(n^2) since we will recursively remove the smallest subset from the list that will satisfy this condition. So we do not need to keep track of how many indices we have to visit in each iteration of our search. The indexing algorithm is very efficient and will run on most likely values of n for a long while our set is found. Because of this we track the frequency of each set element in an iterative form of its occurrences. Once we know the frequencies we'll be looking for, remove any remaining indices from this list, and use this as the starting point for our union. Note that removing a subset will not affect the union since there will be only one index for each subset. |x| & |y| := 0 means we won't have any subsets that are sets but can be union-ings of sets. That is, removing any index from y to x will keep this subset intact while removing the others from it. For this reason we recommend that n = 3, x = y or 3 <= x <= 4. There is no choice of x or y but removing it will affect our ability to make a set which is unique. This means that for every subset x that is not present in any subset without changing its value for all 4 indices x.y.c.f. f.g. h.| = 0 does not mean that there is nothing to fill in for now that means no subset exists from 0 to 4, but that makes it better to start with every set you can. One way to improve this is to choose some index x from 3 or 4 and remove all its sets without any sets satisfying the remaining requirements. After all sets of requirements are met, keep going until we reach at least 3. When we find one that satisfies this requirement we keep on with our initial set and try again.  \n"}, "161": {"problem_id": 161, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2*(10**6+1))\nfrom heapq import heappush,heappop\ndef cmp(a,b):\n\treturn (a<=b)%2\nfor _ in range(int(input())):\n\n\tn=int((input().strip())+'1')\n   a=n*2**(n-1)//2\n\n  b=a+a*n\n#print(b,a)\nif n==1:print('1\\n'.join(map(str,list(zip(*a)))),end=' ')"}, "162": {"problem_id": 162, "answer": "import sys\ninput = sys.stdin.readline\nN, K = list(map(int, input().split()))\nA = []\nfor i in range(N):\n\tA.append([int(x) for x in input()])\n#print(A)\nB = [A[0]] + [0] * (N - 1) + A[-1]\nans = 0\nd = 1\nwhile d < N - 2*K:\n\n\tif B[d] == 0:   d += 1  # d is odd, i.e. the last element on the array\n\n \t\tans += (d - d + 2)*(B[2*d+1]-1) // 2\nelse: ans += d\nprint (ans)"}, "163": {"problem_id": 163, "answer": "import sys\ninput = sys.stdin.readline\nN, K = list(map(int, input().split()))\nX = [[] for _ in range(K + 1)]\nfor i, x in enumerate(X[1:], 1):\n  X[i].append(x)\nY = [0] * (N + 2 * N + N) \ndef dfs(pos, target_in_cell, obstacle):  # obstacle = 0 means it can reach cell 0 if it's in cell 1 and cell -1 is already reached by dp[pos-1][0]. To avoid this problem we can simply add obstacle to Y[0], making sure to have only 1 obstacle left to prevent the new cell from being reached from 0\nif pos + obstacle < N or pos - obstacle >= N: return False\ndp = [(0, 0)] # starting point and target\nwhile len(dp) > 0: # loop to check if the loop is too long to loop back to 0 and return True to avoid timeout before the next loop will finish. Note the possibility of multiple loops for the same point makes this solution incompatible with python3.7 and python2.6. We can instead choose to use a built-in loopback that does not have to worry about invalid input, but is more convenient for this. Input will always be a valid sequence, not a list of 0s or 1s in Python3, so looping through input is also valid for input as long as input only contains whitespaces and whitespace characters only. In this case you don't need to validate input: you simply do nothing and your code will also work for any valid input (invalid input will not affect your answer).\nprint('YES' if pos <= N <= K else 'NO')\n"}, "164": {"problem_id": 164, "answer": ""}, "165": {"problem_id": 165, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a))"}, "166": {"problem_id": 166, "answer": "n = int(input())\nA = [list(map(int, input().split())) for i in range(n)]\nX = A[0]\ny = 0\nfor i, x in enumerate(A[1:], start=1):\n\tif x == y: y += 1\nprint('YES' if x > y else 'NO')\n"}, "167": {"problem_id": 167, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput=sys.stdin.readline\ndef input():\n\treturn input().strip()\nn=int(input())\na=list(map(int,input().split()))\nc=defaultdict(list)\nfor i in range(len(a)-1,-1):\n  \tc[a[i]-1].append(i+1)\t\t\nans=[]\nflag=0\ni=n-1\nwhile i>=1 and flag!=flag+2 and i%2==0 and (i//2)+1<n and a[:i]<i and ans[0][1]==ans[1][0]:flag+=1"}, "168": {"problem_id": 168, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\np = [[0] * (n + 1) for _ in range(n)]\nfor i, v in enumerate(a, 1):\n\tp[i][1] = v\n#print(p)\ns = input()\ni = 0\nwhile i < n - 1 and s[-i] == \"+\": i += 1\nj = i + 2 - i\nif j == 0: print(0)"}, "169": {"problem_id": 169, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nb = []\nc = 0\nfor i in range(n):\n\ta[i] = b.append(i + 1)\nif n % 2 == 0 and a[n // 2] == b[-1 - n// 2]:\n   print(c - a.index(max(a)))\nelse: print('0')"}, "170": {"problem_id": 170, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(1, n + 1):\n\tif (a[i] > 1 and a[(i - 2) * (n - i) / 2] == 1) or (max(a) > 0 or i < n): print(0)\n"}, "171": {"problem_id": 171, "answer": "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = str(i)\nprint('Correct')"}, "172": {"problem_id": 172, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = [-1] * n\nfor i in range(n):\n\tb[a[i] - 1] = i\nans = 0\nwhile b[0] <= a[n-2] and ans < n - i: ans += (n - (i + 1) // 2)\nprint(ans)"}, "173": {"problem_id": 173, "answer": "n,m=map(int,input().split())\ns=input()\nc=0\nfor i in range(n):\n\tif(s[i]=='<':c+=(m-1)*(i+1)):c+=1\nprint(c)"}, "174": {"problem_id": 174, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nans = []\nfor _ in range(n):\n\tif a[-1] == '=': ans.append('YES')\nif n == 1: print('NO')"}, "175": {"problem_id": 175, "answer": "n,m=map(int,input().split())\nprint(0,0)"}, "176": {"problem_id": 176, "answer": "n = int(input())\nfor i in range(n):\n\tk = input() +'' + input().replace('0b', '').strip()\n \tx = k - k * (k - 1) // 2\nprint(x)"}, "177": {"problem_id": 177, "answer": "from sys import stdin,stdout,setrecursionlimit\ninput()\na=int(stdin.readline())\nfor i in range(1,a+1):\n print(i)"}, "178": {"problem_id": 178, "answer": "n = int(input())\ns = input()\nif s[-1]!= '8' or s.count('8') % 2 == 0: print('YES')\nelif len(s) == 11 and s: return 'NO'\nprint('NO')"}, "179": {"problem_id": 179, "answer": "from sys import stdin, stdout\nimport math\nn,x,pos=list(map(int,stdin.readline().split()))\nans=0\nfor i in range(1,n+1):\n\tans+=math.pow(10,9)+1\nprint(ans)"}, "180": {"problem_id": 180, "answer": "from sys import stdin, stdout\nsys.setrecursionlimit(10 ** 7)\nstdin.readline()\n#stdout.write(str(3)+ '\\n')\n"}, "181": {"problem_id": 181, "answer": "#!/usr/bin/env python\nfrom sys import stdin, stdout\nimport numpy as np\nn = int(stdin.readline().strip())\ns = np.array(s, dtype=np.int).reshape(2, s.shape)\nprint(int((-10**18)))\n"}, "182": {"problem_id": 182, "answer": "a,b,c = map(int,input().split())\nx,y,z = int(a)-1,int(b-1) -1\nif x == y == z :\n\tprint(\"Yes\")\nelse: print(\"No\")"}, "183": {"problem_id": 183, "answer": "import sys\nn,k,m=list(map(int,sys.stdin.readline().strip().split()))\na=[0]*(n+1)\nfor i in range(m):\n  a[i]=(i*k)%m\nprint(a[-1])\n"}, "184": {"problem_id": 184, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "185": {"problem_id": 185, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nans = [0 for i in range(1, n+1)]\nif n == 1 or k == 0 or (n == 2 and k!= 1):\n\tans[-1] = 0\nelif k > 1 and (k - 1) % 2!= 0 and ans[n-2] < 1e-10: print(n - 2)\nelse: ans.append(min(ans, 2*(k + 1)-1))"}, "186": {"problem_id": 186, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(2*i)\nans=float('-inf')\np=0\nwhile(p<=n and a[p]<a[-1-p]:p+=(n-i-2)**0.5+ans>m):p+=1\nprint(ans)"}, "187": {"problem_id": 187, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0]*n\nfor i in range(n):\n\tans[i] = 1\n#print(ans)\nprint('NO') if ans[-1]%2==0 else print('YES')\n"}, "188": {"problem_id": 188, "answer": "n, k = list(map(int, input().split()))\na = sorted(list(enumerate(input()), key=lambda x: x[1]))[:n]\nprint('NO' if len(set(a)))\n"}, "189": {"problem_id": 189, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  if a[i] == 1: ans += 1\nprint(ans)\n"}, "190": {"problem_id": 190, "answer": ""}, "191": {"problem_id": 191, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append(input())\nx = sum(a[:k])\ny = a[-k:]\nprint('\\n'.join(y))"}, "192": {"problem_id": 192, "answer": "import sys\nsys.setrecursionlimit(1000000)\nMOD=10**9+7\nINF=float('inf')\nI=lambda:list(map(int,input().split()))\nn=I()\nprint(min(n))"}, "193": {"problem_id": 193, "answer": "from statistics import median\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int,input().split()))\n#def LIR(x): return [x-i for i in input().rstrip('\\n') if x<0 or x>=inf]\nclass SegmentTree(object):\n\tdef __init__(self,data=None): self.data = data\n  \t\tself.height = [1]*(len(data)+1) # (row,col) for row, col in zip(''.join(row), data)  # row and col are the rows, row[0] is the columns, and data[row[-1]] is left-indexed (i.e., the leftmost element in the row) to avoid duplicate calls of indexing function. We only care about the number of non-empty sub-segments. So we use the segment tree to maintain the length of each subsegment. The tree's default constructor is used to keep track of segment lengths, as is any other constructor used by the tree. Using default values is O(|K|), where K is a positive integer and denotes the maximum value that can be obtained by deleting some (and all\")of\"its\" elements without changing the order of their values. In other words, K = 0 means that the largest value among all the \"default values\" is 0. At each step, we want to delete at most one element at a time, so we don't delete any row or column as we would be deleting (or replacing) any of it. Thus, after deleting, any existing segment will be segmented as long as there are such deleted elements in data. With this in mind, each element is assigned a value which is unique to that element, regardless of how many of\"them are mapped to the same element. A mapped element can also be an empty segment, but is marked as filled at the begining, which means we know that it will always have a corresponding value. For example, if the data had been arranged in rows 0, 1, 2, 3,..., 6, then 6 rows would have same value as 4 rows. On the other hand, empty segments are marked by empty columns. Finally, a mapped segment is one in which there is no segment that is empty or doesn't correspond to any segment length value assigned by default. As this marks a segment as full because it contains multiple mapped segments, you are warned about it happening even after all elements have been deleted. Here is an example of filled segments:  row 0: 4 6 6 4 4  col 6: 0 1 1 3  tabajas 1: 6 3 4 3 7 8  kumaras 4: 2 6 7 4 2 7  nosha 2: 3 6 2 2 1 6 \n\n\n\n\t# Using the code here to find the optimal segment sizes. Each segment size is counted separately from right to left and used as the initialization value for any segments. Note that there may be invalid input, e.g. segment sizes [0,1,2,3,4,5,6,7,8] are not necessarily valid as these may contain multiple invalid inputs or data with invalid values could overlap. An optimal data segment data structure is provided for the purpose of this problem, for more info on it, see the section \"[Constraints] for optimizing data structures.\"\np=LI(): p.sort() # sort data in descending order\ndata=[1,-2,-3,-4,-5,-6,-7,-8,9,10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-33,-34,-35,-36,-37,-38,-39,-44,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-67,-69,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-86,-97,-98,-99,-100,-101,-102,-103,-104,- 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158,"}, "194": {"problem_id": 194, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9 + 7\nI = int(input())\ns = list(map(int, input().split()))\nfor i in range(I):\n\ts[i] = s[I-1] + (2**i)**0.5\nans = [0] * (len(s) + 2 + I - 1 + 1) * s.count(0) // MOD\nprint(ans[0])"}, "195": {"problem_id": 195, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nn = int(input())\nA,B,C,N = [int(x) for x in input().split()]\nfor i in range(n):\n\tif A[i] == B[(i+1)//2] and C[-i%2]: A.append((i,i))\nans = []\nif ans == [] or ans[0]!= -1: print(ans[1])\nprint(sum(A))"}, "196": {"problem_id": 196, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn=int(input())\nx,k=list(map(int,input().split()))\na,b=1,0\nfor i in range(k):\n\ta=a*(x-1)//2\n#print(b,a)\nprint((a+b)%x)"}, "197": {"problem_id": 197, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\nfrom functools import reduce\ndef II(): return int(input())\n#from collections import deque, Counter, OrderedDict,defaultdict,deque\nmod=10**9+7\nI=lambda:list(map(int,input().split()))\nif mod==1:print(f'{I(mod):}')\nelse:I()"}, "198": {"problem_id": 198, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(min(a))"}, "199": {"problem_id": 199, "answer": "n, s = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n   a[i] += 1\nans = 0\ni = 2\nwhile i * i <= n and ans < s: ans += (i - i) * s\nprint(ans + (ans - s) // i + 2)"}, "200": {"problem_id": 200, "answer": "import sys\nfrom collections import deque\nsys.setrecursionlimit(2147483647)\ninput = lambda: sys.stdin.readline().rstrip()"}, "201": {"problem_id": 201, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nn = int(input())\ns = [int(x) for x in input().split()]\nfor i in range(n):\n  s[i] += 1\nprint(16**max(s))"}, "202": {"problem_id": 202, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nx = list(map(int, input().split()))\ny = [x[0]]\nfor i in range(n):\n  x.append(i)\nprint(max(x))"}, "203": {"problem_id": 203, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\ndp = [[0] * (n + 1) for _ in [a[0]]]\nfor i, a in enumerate(a) :\n  dp[i][i] = 1 if i < n - 1 else 2\nans = 0\nwhile ans > 1 :  ans -= 1\nif ans % 2 == 0 : ans = ans / 2 + a\nprint('R')"}, "204": {"problem_id": 204, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush,heappop\nn = int(input())\na,b,x,y = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n\tif (a+b)>=a and (x+y)<=x and ((a-x)//(y-1))>=(b-y):ans += 1\nprint(ans)"}, "205": {"problem_id": 205, "answer": "import sys\ninput = sys.stdin.readline\nn, b = list(map(int, input().split()))\na = [0]\nfor i in range(n):\n  a.append(a[-1] + b)\nb = b**0.5\ncnt = 0\ni = 1\nwhile i <= n and a[i] <= cnt:\n\n  if i % 2 == 0 and (i >> 1) <= b and i not in b.keys() and b[b.index(i)] <= i and not (b[a.pop()] - i) % b : i = i + 1"}, "206": {"problem_id": 206, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**5+100) * 100)"}, "207": {"problem_id": 207, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in a: s[i] = 1 if i > 0 else 0\nprint('No')\n"}, "208": {"problem_id": 208, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn = int(input())\na = list(map(int,input().split()))\nx = []\nfor i in range(n):\n  x.append(a[i][0])\ny = [x[-2] for x in x[:-2]]\nz = [-1] * (2*n+2)\nheap = [(y[0],0)]\nans = 0;\nwhile len(x) > 0 and ans < 2*(y.count(0))+n//2:   # \u751f\u6210\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5728\u540c\u65f6\u6709\u6ca1\u51fa\u73b0\u7ed3\u679c\nprint(ans,end = \" \")"}, "209": {"problem_id": 209, "answer": "from sys import stdin,stdout\nimport math\ndef inp(): return int(stdin.readline().rstrip(\"\\r\\n\"));"}, "210": {"problem_id": 210, "answer": "n = int(input())\na = [int(i) for i in input().split()]\n#print(a)\nans = 0\nfor x in range(n):\n\tif a[x] % 2 == 0 and (a[(x-1)//2] + x) > 0: ans += x\nprint(\"YES\")\n"}, "211": {"problem_id": 211, "answer": "def main():\n  \n from sys import stdin,stdout,setrecursionlimit\n import math\n input = lambda:stdin.readline().strip()\n stdout.write('\\n'.join(map(str,input().split())))\n"}, "212": {"problem_id": 212, "answer": "n = int(input())\ns = 0\nfor i in range(n):\n\tif i % 10 == 0 and s + n // 10 > 0: s += 1\nprint('YES')\n"}, "213": {"problem_id": 213, "answer": "n, m = list(map(int, input().split()))\nk, f = [], []\nfor i in range(1, n+1):\n\tk.append(min(k[i-2], f+i) if i % 2 == 0 else i)\nf.sort(key=lambda x: x[0])\nif n%2==0: print(-1) \nelif f[n//2]: print(n-f[1])"}, "214": {"problem_id": 214, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,Counter\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x) for x in input().split()]\nD = {}\nfor i in range(1, 9): D[i] = LI()\nli = [(li[0][0], li[1][1]) for li in list(D.items())]\nprint(max(li))\n"}, "215": {"problem_id": 215, "answer": "n = int(input())\ns = input()\na = []\nfor i in range(n):\n\ta.append(s.count('a'))\nif len(set(a)) == 2 or a[-1] <= i <= a.index('b'): return 0\nprint(3)\n"}, "216": {"problem_id": 216, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nc = []\nfor i in range(len(a)):\n\tif a[i] == 0: b[-1] += 1\nif len(b) == 2: print(max(c,b))"}, "217": {"problem_id": 217, "answer": "a,b,f,k = map(int,input().split())\nc=0\nn=a+b+f+k\nif a<=10**6 and b>0 and c>=k and 0<n<10 and (a-c)%1==0 :\n\tprint(-1)\nelif b<0<a<9 and a>b and f>1 and k>10 :   # b-f is zero-indexed so there is no need to iterate over it\n \tc+=1\nelse : c+=k-a\nprint(n)"}, "218": {"problem_id": 218, "answer": "n,p,q=list(map(int,input().split()))\ns=input()\nl=[]\nfor i in range(q):\n\tif(s[i]=='h') and (p[0]<=i and p[1]>0): l.append(i+1)\nif len(set(l))==1: print(0)"}, "219": {"problem_id": 219, "answer": "import sys\ninput = sys.stdin.readline\nn,m,s,d = list(map(int,input().split()))\nobs = [[0]*s for i in range(n)]\nfor i,(x,y,z) in enumerate(zip(*[iter(input())]*2)):obs[i][-1] = 'X'+'<!-->'\n#print(obs)\nans = []\ndic = {}\ndef check(i,x):\n  if x not in dic.keys():return False\n\tif x[0]-x[1]-1<=s:return True\n\n\ti = i+1;y = y+2;z = z+3;x = -x+y+z;if i<x<y<z:x=y=z=0;else:y=-x=-z+x;i+=1\n\n  return False if (i==0 or i==1) else True\n"}, "220": {"problem_id": 220, "answer": "s, x = list(map(int, input().split()))\nn = len(s) + 1\nfor i in range(n - 1):\n\ts = s[:i] + (s[i + 2:]) * x\nif s == x: print(0)\nelse: s = x - s\n"}, "221": {"problem_id": 221, "answer": "n, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append(input())\nb = a[::-1]\nc = 0\nd = -1\ne = n-k\nf = k\ng = c\nh = d\ni = b-f\nj = f-g\nwhile i <= j and j <= g:\n\n  if i+k-j <= n and (b-a[i]) + (c+d) <= i +k + j + g + b[j] + c + d <= (n-i) and i >= 0 and b and a and c and d and e and f and g and h and k and l and r and s and t and z and u and v and w and x and y and p and q and [i,j,k,l,r,s,t,z,u,v,w,x,y,p,q] and abs(f-h - x - y - p - q) < i and not (x-y-p -q) or (u-v-w -x -y -p) \\\\\nand (i+j + i) == (j-l-r-s + t, z-z-u + u - v + w + x + y + p + q - u + z)\nprint(l)"}, "222": {"problem_id": 222, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tif a[i] == 0: ans.append(i)\nprint(len(ans))"}, "223": {"problem_id": 223, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = [int(x) for x in input().split()]\nans = 0\nfor i in range(len(s)):\n\tif s[i] == 1 and (i + 1) % 2 == 0: ans += 1\nprint(ans % 1000000007)"}, "224": {"problem_id": 224, "answer": "s = input()\nn = len(s)\nx = 0\nfor i in range(n):\n  if s[i] in 'aeiouy': x += 1\nprint(x)"}, "225": {"problem_id": 225, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6)\nn = int(input())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tarr.append(arr[-1-i])\na = arr[0]\nb = a[:]\ncnt = 1\nwhile cnt < n-2 and (a[b] == b or b == 0 or (b == 1 and b[1] <= a.index(b) + 1)) and ans < len(a) - 1:\n\n\tif (ans < b) and ((ans + (1 if b else 0)) * (n - 2) // 2 >= b): break\nprint(ans)"}, "226": {"problem_id": 226, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i] + a[n-i-1])\nprint(sum(b))"}, "227": {"problem_id": 227, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n\tb[i] = b[n - i]\nprint(max(b))"}, "228": {"problem_id": 228, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nif n % 2 == 0 or a[n // 2] == b[b[0]]:\n  print('Alice')\nelse:  \n\tprint('Bob')"}, "229": {"problem_id": 229, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n\tx += a[i]\n#print(a)\nif x == 0: print(\"NO\")\nelse:print(\"YES\")"}, "230": {"problem_id": 230, "answer": "#!/usr/bin/env python3\n\n  \nimport bisect\nn = int(input())\ns = list(map(int, input().split()))\ncnt = [0 for i in range(n)]\nfor i, x in enumerate(s[:-1]):\n  cnt[bisect.insort(x, s[i:])] += 1\nans = []\nif n == 0 or s == \"a\":\n ans.append(\"2\")\nprint(ans[-1])\n"}, "231": {"problem_id": 231, "answer": "n, a = list(map(int, input().split()))\na -= 1\nfor i in range(n-1):\n\ta += int(input())\nprint(a)"}, "232": {"problem_id": 232, "answer": "import sys\nfrom functools import lru_cache\nn,m=list(map(int,sys.stdin.readline().split()))\ns=[]\nfor i in range(n):\n\ts.append(s[-1]*i)\nprint('YES' if s else 'NO')\n"}, "233": {"problem_id": 233, "answer": "n = int(input())\na, b = [int(x) for x in input().split()]\nc = []\nfor i in range(n):\n\tc.append(a[i] * b[(i + 1) % 6])\nans = 0\nwhile len(c) > 0 and (c[-1] or c[0] == 1 and ans < 10**10): ans += c.pop()\nprint(ans)\n"}, "234": {"problem_id": 234, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\tif a[i]==\".\": a.append(i)\nif n<=m: print(\"NO\")\nelif m==1 or n==m-1: break\nprint(\"YES\")"}, "235": {"problem_id": 235, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(1,n+1):b.append(a[i-1]*10)\nif n%2 == 1:print(n//2)"}, "236": {"problem_id": 236, "answer": "s = input()\nn = len(s)\ncnt = 0\nfor i in range(n-1):\n  if s[i]!= '-':   # link is not connected, just connect it to a new pearle and it will connect to new link? (so no need to remove it and just return it as link, or just a plain string to its left, and see if that can connect you)\n\n  elif link[0:2] in s and s.find('o')!= -1: cnt += 1\nprint('NO')\n"}, "237": {"problem_id": 237, "answer": "N, M, K = list(map(int, input().split()))\na = []\nfor i in range(N):\n\ta.append(max(a[i] + K - 1, key = lambda x: x if x > M - K + 1 else 0))\n\n"}, "238": {"problem_id": 238, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n\tarr.extend([[int(x) for x in input()] for _ in [i] if x % i == 0])\nans = 0\ni = 1\nwhile i < n and arr[i][0] < i: ans += i - i & -i\nprint(ans)\n"}, "239": {"problem_id": 239, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import *\ndef LI(): return [int(x) - 1 for x in input().split()]\n#def LIR(a,b): return [(a + b, b + a) for a in range(len(set(input())))]\nmod=1000000007\nINF = 10**9 + 7\n \nMOD = int(mod**0.5) + 2**mod\n\"\"\"\n\u53ea\u6709\u4e00\u4e2a\u53ef\u80fd\u6027\u5206\u6b21\u6570\u636e\uff0c\u9700\u8981\u8fde\u7eed\u81ea\u5df1\u7684\u6bd4\u8f83\n\u521d\u59cb\u5316\u7d20\n\u51fa\u73b0\u5728\u5224\u65ad\u7b26\u4e32\n\u8fd4\u56de\u66f4\u65b0\u89e3\u518d\u53bb\u6309\u7167\u8fc7\u7a0b\u4e2d\u95f4\u7684\u6700\u5927\u503c\u4e3a\u4ec0\u4e48\u5b9a\u4e49\n\u9632\u6b62\u8ba1\u7b97\n\u867d\u7136\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u975e\u5e38\u77ed\u95ee\u9898\n\u5b83\u5c31\u662f\u53e6\u5916\u4e00\u904d\u53c2\n=> \u9012\u5f52\u8d77\u70b9\u53d8\u91cf\u9ad8\u4ea7\u751f\u5b57\u5e8f\n\u6c42\u5217\u8868\u793a\u6587\u4ef6\u7684\u591a\u5c11\u8ddd\u79bb\n\u540c\u65f6\u523b\u6ce8\u660e\u767e\u5230\u6808\n\u7b54\u6848\u6784\u5efa\u6280\u672f\u5bfb\u627e\u53cd\u7acb\u7cfb\u7c73\u6620\u5c04\n\u4e0b\u4e00\u6b65\u53d1\ufffd4\u4f4d\u6578\u64cd\u4f5c\u63a5\u4f1a\u6539\u52a8\u53f3\u4fa7\u548c\u53d6\u6d88\u534a\u4e27\n\u56e0\u6b64\u5982\u61c2\u672c\u8eab\u6703\u5229\u957f\u8fdb\u884c\u8f6c\u67e5\u6269\u5c40\u6574\u96644*4+2*2+1\n```python\nprint(LI() or LI()|LI()) or print(' '.join(map(str,lin)) or '\\n'.join([str(i) if i!=i else i for i in list(inp.items())]))\n````\n**\u5176\u5b9e**\u8fd8\u5f88\u597d\u864e\u90a3\u6e05**\u7b49\u60c5\u51b5\u8bf4\u5417?\u3002.-----------.  \u3000 \u4efb\u610f**\u53cc**  \u524d\u7f29\u7406**\n######  \u6700\u53c9**\u5458**\u8054\u9012\u589e  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  53  54  55  57  58  59  60  61  62  63  64  65  66  67  72  77  78  79  84  95  a  b  c  d  e  f  g  h  i  j  k j  l  m  p  q  r  s  t  x  y  z  A  B  C  D  E  F  G  H  I  K  J  L  M  N  O  P  Q  R  S  U  V  X  Y  Z  [a-z] --------------------------- a,i,j,k,l,m,p,q,r,t,x,y,z,A,B,C,D,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,"}, "240": {"problem_id": 240, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = [int(x) for x in input().strip().split()]\nB = []\nfor i in range(N):\n  B.append(A[-1] + i)\nprint(max(B))\n"}, "241": {"problem_id": 241, "answer": "n,m,min,max = list(map(int,input().split()))\ntemp = [float('inf')]*(n+1)\nfor i in range(m):\n  temp[i] = min(temp[n-1-i],temp.copy()[1])\nprint('Max:',end=' ')"}, "242": {"problem_id": 242, "answer": "m = int(input())\nprint(len(str(n)))\n"}, "243": {"problem_id": 243, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\nfrom collections import defaultdict\nn, m, k = list(map(int, input().split()))\ngraph = [[] for _ in range(n+1)]\nfor x, y in reversed(input().rstrip()) :\n  graph[x][y] = max(0, (k-2) * (x-y) + (y-x) for y, z in enumerate(graph)) + min(m-k, 2*m) if x!= y else 0\nans = [0]*k\ndef dfs(x, y, w) :  # \u8bb0\u5f55\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u8ddd\u79bb\u66ff\u6362\u81ea\u5df1\u8d77\u7b54\u6848\u8df3\u8fc7\u7684\u521d\u59cb\u957f\u5ea6\nvisited = set()\nwhile x + 1 < n and x - 1 >= 0 and w > 0 : # \u603b\u4e0d\u80fd\u8ba1\u7b97\u524d\u9762\u6e38\u8fde\u63a5\u6ee1\u8db3\u6761\u4ef6\u5904\u7406\u89e3\u518d\u53d6\u7684\u8f93\u5165x \u8fd9\u4e00\u90e8\u5206\u6dfb\u52a0\u8c03\u6574x\u7684\u72b6\u6ce8\u610f\u4e3ax = 0 \u76f8\u7b49\u4e0d\u540c\u7684\u4e0b\u4e00\u5cad\u7ed3\u675f\u603b\u6570x \u548c y \u5c0f\u4e8e 0 \u8981\u88ab\u5220\u9664\u8fd9\u6837\u7684x \u6240\u4ee5\u8981\u8fd4\u56de\u7684y \u8ddf\u8d26\u52a5\u8fdb\u884c\u53d8\u91cf\u5217\u8868\u7684\u5f71\u54cd\ndfs(y, x, -1) = y if visited else x\nx += 1 # \u5f53\ufffd atleast 1 \u8868\u793a\u77e9\u5f62\u4e0d\u4f1a\u8d85\u65f6\u95ee\u9898\nprint(k)"}, "244": {"problem_id": 244, "answer": "n = int(input())\nx = 0\nfor i in range(n):\n\tx += (i + 1) * (n - i)\nprint(x)"}, "245": {"problem_id": 245, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(i) for i in input().split()]\nprint(\"YES\" if A[0]==A[1] else 'NO')"}, "246": {"problem_id": 246, "answer": "n,s = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(1,int(s**0.5)+1):\n a[i] = (a[-i-1] + i*s)//i\nprint(len(set(a)))\n"}, "247": {"problem_id": 247, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nprint('YES' if a[0] == '1' else 'NO')"}, "248": {"problem_id": 248, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nfrom functools import lru_cache, reduce, cmp_to_key\n@lrucache(maxsize=None)\ndef is_prime(n):\n\tif n<=2 or n>=3: return False\n\n\tfor i in range(2,int(math.sqrt((n**0.5+1)/2)+1)):  # i\u304b\u3089\u6570\u3048\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e2\u756a\u76ee\u306e\u8981\u7d20\u3092\u6bd4\u8f03\u3057\u305f\u6642\u3001i**2 + i**3 + n**4 <= 2**n\u307e\u3067\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3059\uff08\u898b\u305f\u3060\u3051\u308c\u3070\u540c\u3058\u3082\u306e\u306f\u5927\u304d\u304f\u306a\u3044\u3088\u3079/2\u3067\u53d6\u308a\u51fa\u305b\u308b\u306e\u3082\u843d\u3061\u8fba\u304c\u3042\u3063\u3066\u3082\u8feb\u7acb\u3064\u306a\u304c\u306a\ufffdreshold\u3067\u6307\u5b9a\u3067\u304d\u305a\u3001\u4eca\u56de\u306e\u4efb\u610f\u306e\u79fb\u9664\u304c\u6c42\u3081\u3089\u308c\u308b\u3068\u304d\u306f\u6b21\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u5897\u3084\u3057\u3066\u3044\u304f\u305f\u3093\u3067\u3059\u304e\u3066\u8449\u539f\u3067\u3042\u308b\u304b\u3069\u3046\u601d\u8def\u306a\u3089\u305d\u306e\u307e\u307e\u306b\u512a\u5148\u5074\u3068\u307f\u306a\u308f\u306b\u5bfe\u5fdc\u3059\u308b\nn = int(input())\nans = [0]*n\nfor ai,bi in zip(ans,input().rstrip('\\n'))[::-1]:\n   ans[ai] = (bi-ai)%MOD\nprint(' '.join(map(str,ans)))\n"}, "249": {"problem_id": 249, "answer": "from sys import stdin,stdout\nimport heapq\nn,l,x,y = [int(i) for i in input().split()]\na = [-1]*n\nfor _ in range(n):\n\ta[x] = int(stdin.readline().strip())\n#print(a)\nans = float('inf')\nh = []\nheapq.heappush(h,(2*(x-1)*(0-l))*l+[0,0])\nwhile h and h[-2]<=l:he.pop()\nif h:ans=min(ans,h[1]+he[2])#if he is reachable, add 2\nprint((ans))\n"}, "250": {"problem_id": 250, "answer": "n = int(input())\na = [0] * (n + 1)\nr, h = 0, 0\nfor i in range(n):\n\ta[r][i] = max(0, ((r-1) * a[i])**2 + (h - 1)*(r - i))\nprint(max(a))"}, "251": {"problem_id": 251, "answer": "n, k = list(map(int, input().split()))\nslices = []\nfor i in range(0, n):\n slices += [[int(x) for x in input()] + slices[-1]]\n print(n-k)\n"}, "252": {"problem_id": 252, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta.append(a[i] + b[-1-i])\nc = [0] * (n - 2)\nans = 0\ni = 2\nwhile i * i <= n and ans < a[:i*(i+1)] + c[n:n+2*i]:\n   ans += (c[c.index(min(c))] if c else 0) * 2**i\nprint(ans)"}, "253": {"problem_id": 253, "answer": "def f(n):\n  if n == 0: return \"NO\"\n\n  return f'YES' if (n & 1) > 1 else 'NO'\nn = int(input())\ntime = []\nfor i in range(3, n+1): time.append(list(map(int, input().split())))\nprint(f'NO')\n"}, "254": {"problem_id": 254, "answer": "n = int(input())\ns = input()\nc = 0\nfor i in range(n-2):\n\tif(s[i] == s[-1]): c += 1\nprint(c)\n"}, "255": {"problem_id": 255, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))\n"}, "256": {"problem_id": 256, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nint1 = lambda x: int(x) - 1 if x < 0 else 10**9 + 9\ndef get_ints(): return list(map(int, input().split(' ')))\np2D = {'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'0':0,'10':10,'11':11,'12':12,'13':13,'14':14,'15':15,'16':16,'17':17,'18':18,'19':19,'20':20,'21':21,'22':22,'23':23,'24':24,'25':25,'26':26,'27':27,'28':28,'29':29,'30':30,'31':31,'32':32,'34':34,'36':36,'37':37,'38':38,'39':39,'40':40,'41':41,'42':42,'43':43,'44':44,'45':45,'46':46,'47':47,'48':48,'49':49,'50':50,'51':51,'52':52,'53':53,'54':54,'55':55,'56':56,'57':57,'58':58,'59':59,'60':60,'61':61,'62':62,'63':63,'64':64,'65':65,'66':66,'67':68,'68':67,'69':69,'70':70,'71':71,'72':72,'73':73,'74':74,'75':75,'76':76,'77':77,'78':78,'79':79,'80':80,'81':81,'82':82,'83':83,'84':84,'85':85,'86':86,'87':87,'88':88,'89':89,'90':90,'91':91,'92':92,'93':93,'94':94,'95':95,'96':96,'97':97,'98':98,'99':99,'100':100,'101':101,'102':102,'103':103,'104':104,'105':105,'106':106,'107':107,'108':108,'109':109,'110':110,'111': 112,'112':112,'113':113,'114':114,'115':115,'116':116,'117':117,'118':118,'119':119,'120':120,'121':121,'122':122,'132':132,'123':123,'124':124,'125':125,'126':126,'128':128,'129':129,'130':130,'131':131,'138':138,'139':139,'140':140,'141':141,'142':142,'143':143,'144':144,'146':146,'147':147,'148':148,'149':149,'150':150,'151':151,'152':152,'153':153,'160':160,'161':161,'163':163,'164':164,'165':165,'166':166,'167':167,'168':168,'169':169,'180':180,'181':181,'182':182,'183':183,'184':184,'186':186,'187':187,'188':188,'189':189,'190':190,'191':191,'192':192,'193':193,'194':194,'195':195,'196':196,'197':197,'199':199,'200':200,'206':206,'207':207,'208,'209':209,'216':212,'223':223,'224':224,'225':225,'226':226,'229':229,'240':240,'242':242,'254':254,'257':257,'258':258,'259':259,'270':270,'271':271,'272':272,'273':273,'274':274,'285':285,'286':286,'313':313,'314':314,'336':336,'357':357,'388':388,'389':389,'392':392,'400':400,'409':409,'410':410,'411':411,'ci':ci,'f':f','c':c}"}, "257": {"problem_id": 257, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heapify\nn, k = list(map(int, input().split()))\ns = []\nfor i in range(n):\n x,y = [int(s[i]), int(d) for i, d in enumerate(input().rstrip('\\n'))]\n s.append((y,i)) \nheapify(range(0,n*2+1,2*n) + [-1]*(k-n),''.join(str(abs(y-x))))\nprint(*s)"}, "258": {"problem_id": 258, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input().rstrip()\nif s[0] == '0':\n  if len(s) % 2!= 0 or s.count('0') > 1: print('B')\nelif '1' in s and '10' not in '0123456789' or '110112345' == s:print('As')[:-1]"}, "259": {"problem_id": 259, "answer": "import sys\ninput = sys.stdin.readline\nn, t = list(map(int, input().split()))\nfor _ in range(n):\n  s, d = int(input()), [int(x) for x in input()]\n\n  if s == 6 and d == 10 and (d-s+1)%2 == 0 and s+d<=10: print(0)\n"}, "260": {"problem_id": 260, "answer": "m, k = (int(i) for i in input().split())\nn = int(k)\nans = 0\nfor _ in range(n):\n\tans += int((bin(ans)[2:])[-1] * (m - 1))\nprint(' '.join(map(str, ans)))\n"}, "261": {"problem_id": 261, "answer": "n = int(input())\nfor i in range(n):\n s = input()\n if s[0] == \"*\":\n  print(\"no\")\n elif len(s) % 2 == 0 and s.find('*')!= -1 and (s[-1] + 1) * 2 <= n:  # no need to go over the line, we can just skip to the next line and continue\n print('no')\n"}, "262": {"problem_id": 262, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda :list(map(int,input().split()))\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = int(1e9)+7\neps = 1.0e-10\ndd = [(-1,0),(0,1)]\nfor i in range(pow(2,10,2)):\n\tdd[i*i] = (dd.pop()[0]+1)%MOD\n#print(dd)\n\n"}, "263": {"problem_id": 263, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  b.append(a[i] + b[-1-i])\nc = 0\nd = [0]*n\nwhile len(b)>0:\n\n  if d[c] == 0: c += 1  \n#print(c, d)\nans = (c - 1) * (n - c) // 2 + 1\nif ans > 1: print(ans)\n\n"}, "264": {"problem_id": 264, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append((i*a[i])%m)\nprint(sum(a))"}, "265": {"problem_id": 265, "answer": "n, m = list(map(int, input().split()))\npizza = []\nfor _ in range(n):\n\tb, c, p = [int(j) for j in str(input())]\n\n\tif p[-1] < 9 and abs(p[0] - c) > 1 and (b[1], b[2]) not in pizza and not (0, 0) in pizza and len(b) >= 2:   print(sum(c - b) // 2 + 1)\n"}, "266": {"problem_id": 266, "answer": "n,m,s=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n a.append(m*(i+1)+s)\nprint(*a,sep=\"\")\n"}, "267": {"problem_id": 267, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\ndef main():\n\tn,k=list(map(int,input().split()))\n\n\tl,r=n-1,n+1\n\n \tans=[[1]*r for _ in range(n)]\n  \n#\t\tfor i,x in enumerate(ans,1):  # i.e. how many digits to add to the end of a substring?  This can be implemented as a loop, which will iterate over each digit and add the new digit at its end.  If there are several different solutions, we iteratively append the current one at each of them to get a list of possibilities for which current digit will be added, but we will not count occurrences of any digit with another digit in current, as we are counting for previous occurences of that digit (and thus have already accounted for them).  We will also keep track of which digit has been occured, taking care not to repeat the digit before the last one (as that would invalidate the previous digit representation of it). This list is sorted in non-decreasing order, so we won't need to worry about invalidating the list before adding the next digit, regardless of how it's implemented. The list will always contain at least 1 digit of each character and it should only contain digits that appear more than once:  [0, 2, 3,..., 9], as this is the only digit occuring from 'a' to 'z'.  It's useful to have this list when we have multiple solutions for a given number, for example if we want to account for only zeroes and zeros, you could keep it as an array of size 3. If no solutions exist, print an empty list as the empty string. Python 2.7.3 (obviously) is currently the Python version of Python3.5 (because that's just for Python2.x) and does not yet have built-in support for taking digits from input[int] to an integer, such as str2digits() or any other type of integer input.\n"}, "268": {"problem_id": 268, "answer": "from sys import stdin,stdout\nn,k,d = int(stdin.readline().strip())\nl = list(map(int, stdout.write().split()))\ns = sorted(l, key=lambda x: -x[1])\nans = 0\nfor i in range(n):\n\tif l[i][0]<=k:ans+=1\nif ans==0:print(\"YES\")\nelse: print(\"NO\")"}, "269": {"problem_id": 269, "answer": "s = input()\nn = len(s)\nif s[-1] == \"R\":\n\tprint(0, end = \" \")\n\n\tfor i in range(n-2, -1,-1) : print((s[i]==\"R\"))\nelse: print(2*n)"}, "270": {"problem_id": 270, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = list(map(int, input().split()))\nS = [[] for _ in range(n)]\nfor i, s in enumerate(S):\n  S[s - 1][i + 1] = 0\nq, r = [0] * n, [n]\nwhile r - q[0][1] > 1: q.append(q[r] + s[:r])\nr = min(r, n - (n - r) // 2 * (r + n)))\nprint(abs(len(deque()) - n))"}, "271": {"problem_id": 271, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[0])"}, "272": {"problem_id": 272, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\nt = input()\nans = []\nfor i in range(n):\n  if s[i] in t: ans.append(i+1)\nprint(*ans)"}, "273": {"problem_id": 273, "answer": "from itertools import permutations as p\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nn = int(input())\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\n\tif x.startswith('a'): x = x[:y.find(\"a\")] + \" \"*(len(x) - len(y)) + y[-1:]\n   else: x, \"0\" = 0, 0\n"}, "274": {"problem_id": 274, "answer": "def __starting_point():\n\tn = int(input())\n\n\tarr = list(map(int, input().strip().split()))\n\n \tfor i in range(1, n+1):\t\t# i is the index of first bracket in arr[i-1] and i-2 is where the brackets start. The brackets are separated by a space character, meaning they would start with `\"`, not `|`.\n# print(arr[0][0])\nprint([''.join(x) for x in zip(*arr)])\n\n\n\n"}, "275": {"problem_id": 275, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(max(1000, 10**9) + 100)\nfrom collections import defaultdict\ndef II(): return int(input())\nclass Number(object):\n\tdef __init__(self, n): self.p = list(map(int, input().strip().split()))[:n]\n\n\t@classmethods(II())(int)([(10**i) for i in range(n)])(None, None, 0)\n\n   def get_digits_from_int_to_str_in_sys_input():\n \t\treturn [int(str(i)[:i+1]) if i<=0 else int(\"1\"*i + i)[-1] for (i,j) in enumerate(zip(range(0,10), range(-1,0), 1)) if j.isdigit()]\n"}, "276": {"problem_id": 276, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tl.append(list(map(str, input().split())))\nprint(len(l))"}, "277": {"problem_id": 277, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i] - a[(i-1)%2])\nprint('Final!' if b else '\\n')\n"}, "278": {"problem_id": 278, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\np = list(map(int, input().split()))\nb = [0]\nfor i in range(n):\n\tb.append(p[i+1] - 1)\nans = []\nflag = False\nwhile b[-2] == 0: flag = True\nif flag: ans += [b[n-1]]\nprint(len(ans))"}, "279": {"problem_id": 279, "answer": "import math\nn = int(input())\na,b,c,d = list(map(int,input().split()))\nx,y,z = [],[]\nfor i in range(n):\n  x.append(math.floor(a/2.0) + math.ceil((b-a)/2)) \ny.sort(reverse=True)\nz.extend([(x[i],i*2),(y[0],0)*2])\nt,v = 1,0\nwhile t < t*(v-1)//n:t = t+v//2\nif t == n:break\nprint(t)"}, "280": {"problem_id": 280, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nm = int(m)\ns = []\nfor i in range(1, n + 1):\n\ts.append(list(tuple(s[-1:i])))\nif m == 1: \n   print(abs(n - s[0] - m))\nelif 2 * m > m: print(-1)"}, "281": {"problem_id": 281, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\nd = [LI() for _ in range(109)]\nn = int(input())\nans = []\nfor i in reversed(range(n)):\n\tans.append(d[i]*(i+1))\nprint(' '.join(map(str, ans)))\n"}, "282": {"problem_id": 282, "answer": "n, d = list(map(int, input().split()))\nx = [0]\nfor i in range(1, n + 1):\n x.append(min(x[i], d + (i % 2)))\nprint(-1)\n"}, "283": {"problem_id": 283, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(1,n+1):\n ans.append(a[i-1]*i)\nprint('\\n'.join(ans))"}, "284": {"problem_id": 284, "answer": "n = int(input())\np = list(map(int, input().split()))\nprint('YES' if p[0] == 1 else 'NO')"}, "285": {"problem_id": 285, "answer": "n = int(input())\nx = list(map(int, input().split()))\nb = [-1] * (n + 1)\nfor i in range(n):\n\tb[i] = [x[0] + x[1], i]\nans = []\ni = 0;\nwhile i+1<n+2 and 0<i<len(x) and b[p] <= 0 and (i+i)<= n + 2 and ans[b.index(max(ans))] == -1 : i+=1; ans.append(sorted(b, reverse=True)[:])\nprint(*ans)"}, "286": {"problem_id": 286, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(a[i] + s[-1-i])\nprint('\\n'.join(s))"}, "287": {"problem_id": 287, "answer": "n, k = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(1, n+2):\n a[i] = i\nprint(min(a))"}, "288": {"problem_id": 288, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in a[::-1]:\n  b[i] += 1\nprint(max(b))"}, "289": {"problem_id": 289, "answer": "s = input()\nn = len(s)\nans = 0\nfor i in range(1,n):\n\tif s[i] == 'K' and (n-i-1)%2 == 0:   ans += 1\nprint(ans)"}, "290": {"problem_id": 290, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = 1e9 + 7\ndef LI(): return list(map(int, input().split()))\nd = [LI() for _ in range(10)]\nn = LI()\nans = []\nfor i, x in enumerate(d):\n  ans.append(ans[-1] + (1 if i%2==1 else 0))  # \u5148\u521d\u671f\u89e3\u51b3\u6570\nprint(*ans, sep='\\n')\n"}, "291": {"problem_id": 291, "answer": "import math\nn = int(input())\na,b = list(map(int, input().split()))\np = math.floor(math.log(n, 2) + 1)\nprint(p * a + b * p - a * b)"}, "292": {"problem_id": 292, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import defaultdict, deque\nMOD = 10**9+7\ndef II(): return list(map(int, input().split()))\n# II() is O(1) and M(n, k) = k, where k is the k-th element in the input and k > 0 means that it's not necessary to use it, i.e. it can be used with m(k-1, 0) - 1 = 0. We can reduce k by discarding the integer from input, but we'd need to re-write the code to get it to perform the operation. So we don't keep track of k. Instead, we store it in a list instead. Here is an example to show why we keep the list of integers instead of our current list. (k = 5, 5 = 3, 3 = 2, 2 = 1)\n\n"}, "293": {"problem_id": 293, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nx = int(input())\nfor _ in range(x):\n\tn, m = list(map(int, input().rstrip().split()))\n\n\tif n == 0 or m!= len(set(m)) or n!= m: print(0)\n"}, "294": {"problem_id": 294, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = [0]*(n+1)\nfor i in range(31):\n  d[a[i]-1] = 1\nif a[n-1-a.count(0)] % 4 == 0: print(\"YES\")\nelse:  \n\tprint(\"NO\")"}, "295": {"problem_id": 295, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n+1)\nfor i in range(1, n + 1):\n\tb[i] = b[(i - 1) % n]\nprint('YES' if a[-1] > 1 else 'NO')"}, "296": {"problem_id": 296, "answer": "n=int(input())\na,b=list(map(int,input().split()))\nc=[]\nfor i in range(n):\n\tc.append(a-b)\nans=0\nd=[[0,0],[]]\ni=1\nwhile i<=n and d[i][0]!=-1 and i!=i+d.index(min(d))<d[-i-2][1]:\n   ans+=min((c[d][i]*2)-a*(2*a)+b*b for i,c in enumerate(sorted(c)))\nprint(ans)"}, "297": {"problem_id": 297, "answer": "n,m,k=list(map(int,input().split()))\nx=[]\nfor i in range(3):\n   x.append(i*((n+m)//k) + ((x[i-1]*(k+1))//(n-i)))\nprint('YES' if x else 'NO')"}, "298": {"problem_id": 298, "answer": "n,k = map(int,input().split())\na = [0]*(n+1)\nfor i in range(k):\n  a[i] = (a[k-1] + 1)//2\nprint('YES')\n"}, "299": {"problem_id": 299, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[:n-1])"}, "300": {"problem_id": 300, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(min(a[0], a[1]))"}, "301": {"problem_id": 301, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[0])"}, "302": {"problem_id": 302, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tl.append(sum(1,i))\nprint(min(l))"}, "303": {"problem_id": 303, "answer": "import sys\nsys.setrecursionlimit(10**6+7)\ninput = sys.stdin.readline\nfrom collections import deque\ndef get_ints(): return map(int, input().strip().split())\nget_int = lambda x: [int(x) - 1 for x in x.split()]\nprint('YES\\n' + str(input()))\n"}, "304": {"problem_id": 304, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(1, n):\n  a[i] += 1\nprint(sum(a))"}, "305": {"problem_id": 305, "answer": "a = int(input())\nb = list(map(int, input().split()))\nc = 0\nfor i in range(b[0]):\n\tc += input()[i]\nprint(c)"}, "306": {"problem_id": 306, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict, deque\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*pow(10, -1)\nfor i in range(n):\n\ta[i] = pow(i, n-i+1, 2) + a[b[-1]]\nprint(len(set(a)))\n"}, "307": {"problem_id": 307, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import deque\ndef I(): return int(input())\nI()"}, "308": {"problem_id": 308, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict\n#sys.setrecursionlimit(10**5)\nMOD = 10**9+7;\nn = int(input())\nx = list(map(int, input().split()))\nc = [0]*n\nfor i in range(n):\n  x.append(c[i] + c[n-i-1] - (i+1)**(1/2) + (0 if i&1 else 1) )\nprint(len(x))"}, "309": {"problem_id": 309, "answer": "import sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\nn = int(input())\nl, r = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(1, n+2, 2):\n  a[i] = i\n#print(a)  \nans = 0\nwhile r-a[l-1]-1 >= 0 and ans < n: ans += 1 + (n-r)//2\nprint('\\n'.join(sorted(ans, reverse=True)))\n"}, "310": {"problem_id": 310, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9 + 7\ndef LI(): return [int(x) for x in input().split()]\nd = [{} for _ in range(3)]\nn = int(input())\nk = list(map(int, input()))\nans = [-1]*n\nfor i in k: ans[d[i][0]] = i\nprint(ans[0])"}, "311": {"problem_id": 311, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: input(\"\".join(map(int,input().split())))"}, "312": {"problem_id": 312, "answer": "n,m = map(int,input().split())\na = [0]*(n+1)\nfor i in range(m):\n  if a[i]<=n and i!=1:a[n-1]+=1\nans = 0\nif n<3:ans+=a.pop()\nprint(ans)"}, "313": {"problem_id": 313, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = [0] * (n + 1)\nfor i in range(n):\n\tx = a[i] if i % 2 == 1 else (a[-i - 1] + x) % 1000000007"}, "314": {"problem_id": 314, "answer": "n, k = map(int, input().split())\na = [int(x) for x in input()]\nif n <= k: print(-1)\nelif k == 1:print(n)"}, "315": {"problem_id": 315, "answer": "import sys\ninput = sys.stdin.readline\nn,k = map(int,input().split())\na = [int(i) for i in input().rstrip('\\n').split()]\nb = [-1]*(n+1)\nfor i,j in zip(a,b[:-1],a[n:])[::-1]:\n  b[i] = max(j-k,i+3) if i>0 else i\nprint(k)"}, "316": {"problem_id": 316, "answer": "#!/usr/bin/python\nMOD = 1000000007\nN = int(input())\nfor i in range(N):\n\tr = [int(x) for x in input().strip().split()][:r.count(r[0] + 1) // MOD - 1]\n"}, "317": {"problem_id": 317, "answer": "# cook your dish here\nn = int(input())\na = [int(i) for i in input().split()]\nprint('YES' if a[0]==a[-1] else 'NO')"}, "318": {"problem_id": 318, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x)-1 for x in input().split()]\nd = LI()\nn = int(input())\nfor i in range(n):\n  d[i] = d.get(i,0) + 1\nprint(d[n])"}, "319": {"problem_id": 319, "answer": "n,m = list(map(int,input().split(' ')))\na = [[] for _ in range(n+1)]\nfor i,j in zip(a,a[1:]) :\n  a[i].append(j)\nans = 'NO'\nprint('\\n'.join(ans))\n"}, "320": {"problem_id": 320, "answer": "n = int(input())\nx = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n\ta.append([x[i], x[-i]])\nans = a.count(0) + 1\nprint(ans)"}, "321": {"problem_id": 321, "answer": "t = int(input())\nfor _ in range(t):\n\ta, b = list(map(int, input().split()))\n\n\tprint(\"NO\")\n"}, "322": {"problem_id": 322, "answer": "n = int(input())\npoints = []\nfor i in range(n):\n\tx, y = list(map(int, input().split(' ')))\n\n\tpoints.insert(0, (x - 1) * (y - 2) // 2 + (n - i) for i, j in enumerate(points)))\nprint('Yes' if points else 'No')"}, "323": {"problem_id": 323, "answer": "import sys\nsys.setrecursionlimit(max(10**9)+1)\ninput = lambda: sys.stdin.readline().rstrip()"}, "324": {"problem_id": 324, "answer": "from sys import*\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n-1):\n\tif(a[i]==1 and a[-i+1]<=1024)and(b-a.count(1)>=0 and b<b+10**(i-2))and a!=b:print(2)\nprint(*a)"}, "325": {"problem_id": 325, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import deque\nn, m, p = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i, x in enumerate(input().strip(), start=1):\n  edges[i-1].append((x, i+1) if x > 0 else 0) \nans = [0]*m\npts = [-1] * m\ndef dfs(u, v): return 0 if u < v else 1 + pfs[u] < 0\ndfs(0, u) - ans[0][0]+1"}, "326": {"problem_id": 326, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import permutations, combinations\ndef input(): return readline().rstrip()\nn = int(input())\ns = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  s.append(s[-1] * (i + 1) // 2 + s[i % 2])\n#print(ans)\na = sorted(list(set(zip(*s))) + [0])[:n]\nprint((min(a)))\n"}, "327": {"problem_id": 327, "answer": "n, k = list(map(int, input().split()))\narr = [0] * (n + 1)\nfor i in range(n - 6, 0, -1):\n  arr[i] = int(input())\nxor = sum(arr[:i + 6])\nans = 0\ni = 1\nwhile i < n - 2:   # i-th candy is not present in the list at the end. So we swap i with i+i+1 to get the maximum candy we can collect. We want to collect all the consecutive numbers from left to right so we just add the number of the left candy and swap it again. If there is still a possibility that the right candy did not arrive, just return the best possible answer for that. Note that we don't include the last 6 candy as it might have been swapped. \nprint(ans) "}, "328": {"problem_id": 328, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=set(a)\nc=0\nfor i in range(n-1):\n if(b.intersection(c)==a[i] and a[-i+1]!=b[0]): \n  c+=1\nprint(max(0,c))"}, "329": {"problem_id": 329, "answer": "s = input()\nnum = 0\nfor i in range(len(s)):\n\tif s[i] in 'xieneteen': num += 1\nprint(num)\n"}, "330": {"problem_id": 330, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)"}, "331": {"problem_id": 331, "answer": "n,m,k=map(int,input().split())\na=[]\nfor i in range(0,n):\n\ta.append([int(x) for x in input()])\nprint(len(a))"}, "332": {"problem_id": 332, "answer": ""}, "333": {"problem_id": 333, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2*(10**6))\nn = int(input())\ns = input().rstrip()\nans = 0\nfor i in range(len(s)):\n\tif s[i] == 'a' and i % 2 == 0 and (i + 1) in (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 224, 225, 226, 229, 234, 235, 236, 237, 238, 239, 241, 244, 246, 248, 249, 250, 251, 252, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 313, 314, 315, 317, 318, 319, 320, 325, 331, 328, 329, 336, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 353, 355, 356, 358, 360, 367, 372, 373, 378, 379, 384, 389, 400, 405, 409, 416, 418, 419, 421, 424, 425, 426, 433, 428, 429, 430, 436, 427, 432, 445, 368, 369, 370, 371, 374, 376, 380, 383, 387, 388, 385, 396, 398, 399, 401, 412, 417, 408, 420, 423,426,433,439,440,441,443,449,457,461,463,467,479,487,489,490,491,500,503,509,521,535,537,538,559,6040,6150,613,617,637,641,643,647,653,659,661,668,683,691,701,709,715,727,733,831,894,911,896,907,983,991,997,1008,1010,1020,1141,1109,1120,1111,1290,1322,1428,1539,1663,1748,1880,1901,1306,131,133,140,141,144,145,146,147,148,149,151,152,155,156,158,160,161,163,164,165,166,167,168,169,176,180,183,188,189, 191, 192, 193, 194, 195, 196, 197,ugenia,199,200, 300, 301, 302, 303, 304, 305, 326, 306, 327, 308, 413, 414, 415,416,vacation,220, 211, 222, 223, 227, 228, 230, 233, 240, 243, 247, 255, 256, 258, 264, 265, 266, 267, 268, 276, 280, 287, 288, 289, 294, 296, 298, 310, 403, 395, 500, 503, 501,"}, "334": {"problem_id": 334, "answer": "a = int(input())\nb = [int(i) for i in input().split()]\nc = []\nd = 0\nfor x in range(1,a+1):\n\tc.append(abs(x-b[0]))\n  \td+=1\nif d>=a or d<=b or c[a-d]>c[b-c]:\nprint('82')\n"}, "335": {"problem_id": 335, "answer": "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(i*i)\nprint(*[a[-1]],sep=\")\")\n"}, "336": {"problem_id": 336, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport sys,float,bisect,math,itertools,collections,maxsize,queue,copy,racket,sorted,sys,string,tuple\ninput = lambda:stdin.readline().rstrip()\nsys.setrecursionlimit(int(1e10))\ndef I(): return int(input())\nfor _ in range(I()):print(2)"}, "337": {"problem_id": 337, "answer": "import sys\ninput = sys.stdin.buffer.readline()\nn = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\ta[i+1] = a[n-1-i] + 1 if i < n-2 else -1\nprint(max(a))"}, "338": {"problem_id": 338, "answer": "m = int(input())\na = list(map(int, input().split()))\nx, y = 0, 0\nfor i in range(len(a)):\n\tx += a[i]\nif x > y: print(0)"}, "339": {"problem_id": 339, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i-1]*(i+1)//2)\nprint(min(b))"}, "340": {"problem_id": 340, "answer": "n=int(input())\nfor i in range(n):\n\tprint(i+1)\n"}, "341": {"problem_id": 341, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nread = lambda: list(map(int, input().split()))\nn,k,r,s,p = read()\nx = [int(i) for i in read().rstrip()]\ndp = [[0]*k for _ in range(n+1)]\nfor i,j in enumerate(x[1:], itertools.groupby(j)[2:])[:-1]:\n  dp[i][j] = 1 if j==r else -1 if i==k else (p+d[j][i] + s) + (r-j)\nans = -sys.maxsize"}, "342": {"problem_id": 342, "answer": "# -*- coding: utf-8, time: 02/22/20 at 2:41\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ninput = sys.stdin.readline\ndef LI(): return list(map(int, input().split()))\nDICT = {'a': False,'b': True}\nN = int(input())\nfor i in range(N-1):\n  if DICT[i] == False: return i+1\nprint(max(list(Dict.fromkeys(LI()))))\n"}, "343": {"problem_id": 343, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nn = int(input())\nA = list(map(int, input().split()))\nB = [A[i] for i in range(n)]\nif B[0] > A[1]:\n  print(-1)"}, "344": {"problem_id": 344, "answer": "s = input()\nn = len(s)\nif s[-1] == 'e':\n\tprint('YES')\nelif n == 0 or (n % 2 == 1 or n % 3 == 2) :\n \treturn 'NO'\nfor i in range(n-2, -1,-1):\n#print(i+1, 'o', 'u', i,'o' if i else 'n')"}, "345": {"problem_id": 345, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(10**8)\nn, m = list(map(int, input().split()))\nadj = [[] for _ in range(m + 1)]\nfor i, a in enumerate(zip(list(range(1, n)), [0, 0]):: [a - 1] * (n + 2)):\n  adj[a].append(i) # -1 means that we have to leave the adjacency list as it is\nprint(max(len(adj)), '\\n')\n"}, "346": {"problem_id": 346, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import reduce\nN, M = list(map(int, input().split()))\nA = [set() for i in range(N)]\nB = [-float(\"inf\")] * (N + 1)\nfor i, x in enumerate(B): A[x - 1].add(i) B[-1] = i\nprint('\\n'.join(A))"}, "347": {"problem_id": 347, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nm = list(map(int, input().split()))\nw = [0]*(n+1)\nfor i in range(2*n):\n  w[i-1] = max(w[0], 0.5*i) + i\nans = sum(m[:n])\nprint(ans)"}, "348": {"problem_id": 348, "answer": "MOD = 998244353\nimport sys\ninput = sys.stdin.readline\nfrom math import gcd\nn, m, L, R = [int(x) for x in input().split()]\nA = [[] for _ in range(n)]\nfor i, j in reversed(list(range(m))): A[i].append((j, i+1))[A[j].index(i) - 1] = 0\ndef dp(k):\n\tif k == 0: return (0, 0)\n\n\tdp[k % n][j] += 1;\n \tfor x, y in ((i - k + 1) * (m - i) + (j + k) // 2) ** 0.5 % MOD: # (x,y) = (a[x], a[y] + b[z] - (k - x) % (n - z))\n# print(dp)\ndp(1)"}, "349": {"problem_id": 349, "answer": "n, m = list(map(int, input().split()))\nA = [[0] * (n + 1) for _ in range(m + 2)]\nfor i, x in enumerate(A[:-1]):\n   for j in reversed(list(range(1, n+1)))[i-1:j]: A[j][i] = x\nprint('\\n'.join(['\\t' +''.join([i for i in x if x > i])))\n"}, "350": {"problem_id": 350, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = ''\nfor i in range(n):\n  s += str(a[i])\nif len(s) % 2 == 0 and s[0] not in a[:n-1]: s = s + '0' + s\nprint(' '.join(str(x) for x in s))"}, "351": {"problem_id": 351, "answer": "def judge(x, y):\n if x > y: return 0\n return (x - y)//2 + (y - x)\nn = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "352": {"problem_id": 352, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif a[i] == 1: ans.append(a[-1] + 1)\nprint(*ans)"}, "353": {"problem_id": 353, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 2)\nfor i in range(n):\n\ta[b[i] + i] += 1\nc = 0\nwhile b[n - 1] > 0 and c < n and a[c] == 1 and len(a) == b.count(b.get(c, 0)): c = b\nprint('  '+ str(i))"}, "354": {"problem_id": 354, "answer": "s = input()\nt = list(map(int, input().split()))\nif s == t: print(\"Yes\")\nelif t == \"\":\n\tprint(\"No\")"}, "355": {"problem_id": 355, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nread = lambda : list(map(int,input().split()))\ndef read_int():\n  return int(input())\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nmod = 10**9+7\nMOD = 998244353\npawns = [[] for _ in range(2)]\nfor i,j in zip(read()[:-1],read(0)):\n\tp = (j-1)//2\nif (p[0]=='.' or p[1] == '*' or (i==1 or j==(i+1)*2 or i==j*2) or  i%2==0 or len(p)>1):   print(\"A\")\nelse:\tprint(\"B\")"}, "356": {"problem_id": 356, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nans = 0\nfor i in range(n):\n\tans += a[i]\nprint(ans)"}, "357": {"problem_id": 357, "answer": "from collections import deque, defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9)+1000)"}, "358": {"problem_id": 358, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict as dd,deque,Counter as C\ndef LI(): return list(map(int,input().split()))\nS = S()\nINF = float('inf')\nmod = 10**9 + 7\nfor i in range(1,100000):\n\tif(mod*i+1<=i and S.count(i)==1): return i\nprint(min(len(S)-2*mod) if mod==mod else -2)"}, "359": {"problem_id": 359, "answer": "from sys import stdin,stdout\nimport heapq as hq\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\nd = LI()\nans = 0\nfor i in range(len(d)):\n\tans += d[i] * (d.get(i) + 1) // 2\nprint(ans)"}, "360": {"problem_id": 360, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = [int(x) for x in input().split()]\nk = []\nfor i in range(n):\n  l[i] = list(map(int,input().strip()))\nans = 0\nused = [-1]*n\ndef check(l,k,used,ans,n,dic,cnt) :\n ans += 1 if dic[k]!= 0 else -1*k\n if ans < 0 or used[ans - 1] < cnt : return False\n return True\nprint(ans)"}, "361": {"problem_id": 361, "answer": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "362": {"problem_id": 362, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += a[i] * (i+1) * 2\nprint(ans)"}, "363": {"problem_id": 363, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a))"}, "364": {"problem_id": 364, "answer": "import sys\ninput = sys.stdin.readline\nn,a,b = list(map(int,input().split()))\ncnt = [0]*(n+1)\nfor _ in range(b):\n\ta = a+int(input())[1:].replace(' ', '').rstrip('\\n').split(' ')[1]\nans = []\ni = 0\nwhile i<n and a<b and b<=a and (a-a&1 == 0) : ans.append(str(a+i)) ; i+=1"}, "365": {"problem_id": 365, "answer": "from functools import reduce\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(i) for i in input().split(' ')]\nDICT = {'a':0, 'b':1}\nN = int(input())\nfor _ in range(N-1):\n\ta,b = LI()\n\n\tif a==1 and b==2: print('YES\\n'+' '+str(a) +'' + str(b))\nelse: pass\n"}, "366": {"problem_id": 366, "answer": "from sys import stdin\ninput=stdin.readline\nn,s=list(map(int,input().split()))\nc=0\nfor i in range(n):\n\tc+=s[i]\nprint(c)\n"}, "367": {"problem_id": 367, "answer": "s = input()\nn = len(s)\nif s[-1] == 'a':\n\tn -= 1\nprint(n, end=\" \")"}, "368": {"problem_id": 368, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "369": {"problem_id": 369, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn, m = map(int, input().split())\ns = list(map(str, s))\nd = {}\nfor i in range(1, n+1):\n d[(i + j) % 2] += d.get(0, 0)\n s.append(s[-1] + [0 if i == j else 1 for j in (i, i+j)])\nprint(*d.values())"}, "370": {"problem_id": 370, "answer": "#!/usr/bin/env python\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\ndef input_int():\n return int(input())\nsys.setrecursionlimit(2147483647)"}, "371": {"problem_id": 371, "answer": "M = 10**9 + 7\nn = int(input())\nl = list(map(int,input().split()))\nans = [0]*(n+1)\nfor i in reversed(l):\n   ans[i] = min(ans[-i-2] + 1 for j in range(i, i+n) if j not in l[j])\nprint(*ans)"}, "372": {"problem_id": 372, "answer": "x=int(input())\ny=list(map(int,input().split()))\nc=0\nfor i in range(0,len(x)):\n\tc+=x[i]\nprint(c)\n"}, "373": {"problem_id": 373, "answer": "v = int(input())\na = list(map(int, input().split()))\nb = [0]*(v+1)\nfor i in range(1, v + 1, 1):\n\tb[i] = (a[-i-1] if i%2==0 else 0) + v\nprint(max(b))"}, "374": {"problem_id": 374, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  a.append(b[i] + a[n - 1 - i])\n#print(a)\ncnt = [0] * n\nans = 0\nwhile cnt[1]!= 0:\n\n  ans += 1 if ans == 1 else 1 + n // 2 * (n + 2) // 4\n\tn //= 4\n\n\tif n % 2 == 0 and n > 1:ans += (2 * ans) - (1 + (ans * 2))\n\n"}, "375": {"problem_id": 375, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(a[i])\n#print(s)\ncnt = [0]*n\nif s[-1] not in cnt[0]:\n   for i, v in enumerate(list(zip(*s[:-1])), start=n+1, reverse=True, key=lambda x: (x[1], x[2]))[:n] in [(0, -1)], (n, 0): print(i, (i+2)//(2*i)**.5) \nelse: print('0')"}, "376": {"problem_id": 376, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a[n-1]))"}, "377": {"problem_id": 377, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m=list(map(int,input().split()))\nl=dict()\nfor i in range(n):\n\tl[l.get(i,0)]=(i+1)%m\nif len(l)==0:print(0)\nelif l[0]%2==1: print(2*(m-1)+1-(n-m)//2)"}, "378": {"problem_id": 378, "answer": "from heapq import heappush,heappop\nn = int(input())\nk,r = list(map(int,input().split()))\nif k<=r or k==-k or len(k)%2==0 :\n\tprint(0)\nelif r>=k and k!=0 and (k-1)//2+k<r : k = 0\nelse : print(n*n)"}, "379": {"problem_id": 379, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  a.append([int(input())-1,i])\nprint('YES' if a else 'NO')\n"}, "380": {"problem_id": 380, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "381": {"problem_id": 381, "answer": "k = int(input())\nfor _ in range(k):\n\tn, m = list(map(int, input().split()))\n\n\tif n % 2 == 0: print(\"NO\", \"n was not divisible by 2\", m + 1)\n"}, "382": {"problem_id": 382, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nn,m,q = list(map(int,input().split()))\ns = [input() for i in range(n)]\nt = []\nl = [(ord(c) for c in s[::-1]) for s in t]\np = 0\nwhile p < len(t):\n\ti = bisect.bisect_left(s,t[p][i])\n\n\tif i - l[0][0] < l.index(i-l[1][1]): p = p + i\n"}, "383": {"problem_id": 383, "answer": "from sys import stdin,stdout,setrecursionlimit\nimport numpy as np\nii = lambda: np.array(stdin.readline,d=2)\ndef solve():\n\tn,k=[int(x) for x in range(1,10**5+1)],d=[-1,-1]\n \ta=[0]*(n+k+d)\n\n\tif d%2==0:a[0]=1\n\n"}, "384": {"problem_id": 384, "answer": "n = int(input())\ns = input()\na = [int(i) for i in input().split()]\nans = []\nfor i,j in zip(s[::2], s[1::):\n   ans.append(j)\nprint(' '.join(map(str, ans)))"}, "385": {"problem_id": 385, "answer": "from sys import stdin\ninput=stdin.readline\nn,m,p=map(int,input().split())\na=[int(i) for i in range(n)]\nc=0\nfor i,j in zip(a,a[::-1]):\n  if(j=='1'):c+=1\nprint(c)"}, "386": {"problem_id": 386, "answer": "import math\nn = int(input())\nfor i in range(n):\n\tx = list(map(int, input().split())) + [0] if x.count('1') else input()\nprint('\\n'.join(['1' for _ in x]))"}, "387": {"problem_id": 387, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\nINF = float('inf')\nmod = 10**9+7\neps = 1.0e-8\ndef LI(): return [int(x)-1 for x in input().split()]\ndic = {}\nfor i in range(1,26):\n  dic[i] = (i*(i+1)) % mod\nprint(len(set(LI())))"}, "388": {"problem_id": 388, "answer": "n, k = list(map(int, input().split()))\nnames = []\nfor i in range(k):\n  names.append(input()[i])\nprint(' '.join(names))"}, "389": {"problem_id": 389, "answer": "import math\nn=int(input())\na,b=list(map(int,input().split()))\nfor i in range(n):\n\ta.append(math.ceil(i/(2**b)))\nans=0\nwhile a!=a[0] and a[1]<=b and all(c%i==0 for i,c in enumerate(a) if c%2==1) : ans+=1\n\n"}, "390": {"problem_id": 390, "answer": "n,a,b = list(map(int,input().split()))\ns = [0]*(n+1)\nfor i in range(b):\n\ts.append(s[i] + s[-i])\nans = [-1] * (n + 1) \n#print ans\nif n%2 == 0 and len(ans) < b:   ans[b] = a\nprint(-1 if n!= 0 else ans)"}, "391": {"problem_id": 391, "answer": "k = int(input())\np = [[0 for i in range(k ** 2 + 1)] for j in list(enumerate(list(map(int, input().split())))] + [None] * (k + 2))\nprint('\\n'.join(p))"}, "392": {"problem_id": 392, "answer": "n = int(input())\na = []\nfor i in range(n+1):\n\ta.append(i**2)\nprint(''.join(a))\n"}, "393": {"problem_id": 393, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n - 1):\n\ta[i] = str(i)\nprint('Yes')\n"}, "394": {"problem_id": 394, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict,Counter,OrderedDict,defaultdict\nn=int(input())\na=list(map(int,input().split()))\nd={}\nfor i in range(n):\n\td[a[i]]=Counter([x for x in d.keys() if x%2==0])%k\nprint(len(set(a)))\n"}, "395": {"problem_id": 395, "answer": "a = int(input())\nfor i in range(a):\n\tx = list(map(int, input().split()))[:a-1] + [x[0]]\nprint(\"YES\")"}, "396": {"problem_id": 396, "answer": "n = int(input())\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\n\tif x % y == 0: print(x // y)\n"}, "397": {"problem_id": 397, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nN, K = list(map(int, input().split()))\ns = [0] * N\nfor i in range(N):\n  s[i] = (i + 1) * (2 * i) + (1 if i % 2 == 0 else 0)\ndp = [[0 for _ in [1, N] if s[_] == 1]]\ndef dp[N][K]: return [dp[k][i][j] for i, j in enumerate(s[K - 1: i+1]) if j <= K - 2]\nans = []\nwhile K > 0: K -= 1; ans.append(max(0, (N - K) // 2) - ans[0])\nprint(sum(ans))"}, "398": {"problem_id": 398, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nif n == 1: print(\"YES\")\nelif (n-1)%3 == 0:print(\"NO\")"}, "399": {"problem_id": 399, "answer": "x,y = map(int,input().split())\nprint(\"Yes\") if x==y else print(\"No\")\n"}, "400": {"problem_id": 400, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = []\nfor i in range(10):\n  a.append([int(i) - 1, i+1, 10**9 + i])\n#print(a)\ns = [0] + list(range(0, n)) + [a[-1]]\nans = -float('inf')\ni = 0\nwhile i < len(s) or s[i]!= '0':\n\ti += 1\nif i >= n-k-a.index(('1'*k)+'1') and a[k] > 0 and ans!= -1: # print(ans)"}, "401": {"problem_id": 401, "answer": "n,m = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(i)\nc = 0\nwhile c < m and a[c]!= i: c += 1 \nprint('\\n'.join(a))"}, "402": {"problem_id": 402, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\np = int(input())\na = []\nfor i in range(0, n):\n a.append(str(a[-1] +'' + str(i + 4)))\n# print('a', a[:-1])\nans = 0\ni = 4\nwhile i <= n - 4 :\n if (n - i - 1) % 4 == 0: \n  ans += (i - 2) * min(4, (k + i) // 4)\n i += 2\nprint(ans)"}, "403": {"problem_id": 403, "answer": ""}, "404": {"problem_id": 404, "answer": "n = int(input())\ns = 0\nfor i in range(10**18+1):\n\tif n % i == 0: s += i\nprint(s)\n"}, "405": {"problem_id": 405, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = input()\nm = len(a)\nd = {}\nfor i in a[:m]:\n  d[i] = d.get(i-1, 0)+1\nprint(n-d[m])"}, "406": {"problem_id": 406, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i] + a[n-1-i])\nprint(max(b))"}, "407": {"problem_id": 407, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.append(s[i])\nans = []\ni = 0\nwhile i < len(a) and a[-1][0] == '1' or i <= n-i : i += 1\nprint(sum(ans))"}, "408": {"problem_id": 408, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(1,n+1):\n\ts.append(i)\ndp=[[0]*(len(s)+1) for _ in s]\nans=0\nwhile ans<=n and s[ans-1][1]==s[0][0]:ans+=1\nprint(ans)"}, "409": {"problem_id": 409, "answer": "s = input().strip()\nn = len(s)\nfor i in range(n):\n\tif s[i] in \"ABCDFGHIJKLMNOPQRSTUVWXYZ\" or (s[n-1] == \"AA\") and (i+1)%2 == 0:  print(\"YES\")\n"}, "410": {"problem_id": 410, "answer": ""}, "411": {"problem_id": 411, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2*(10**5) + 100)\ndef main():\n \n n = int(input())\n base = [int(x) for x in input().split()]\n bases = []\n for i in range(0,n-1,2):\n\n  x,y = list(map(int,input().rstrip('0')+base+'0'))\n\n print('Yes' if x==y else 'No')\n main()\n"}, "412": {"problem_id": 412, "answer": ""}, "413": {"problem_id": 413, "answer": "n,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(i+m)\nprint(l[-1])\n"}, "414": {"problem_id": 414, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor x,y in enumerate(map(int,input().split()):\n\ty-=1\n \tgraph[x].append(y)\nvisited = [False]*n\ndef dfs(node,vis):\n\n\tif visited[node]==False: return 0\n#\tdfs(x,-1) if x<0 or x==n-1 or (x+1<=n and node!=x) else 1\nprint('YES' if visited else 'NO')"}, "415": {"problem_id": 415, "answer": "n = int(input())\nr = [int(x) for x in input().split()]\nt = n\nfor i in range(n):\n\tr[i] += t\nans = 0\nif r[-1] == 0 or len(r) == n: ans = i\nprint(ans)\n"}, "416": {"problem_id": 416, "answer": "from sys import stdin, stdout\ninput()\nn,k=list(map(int,stdin.readline().rstrip().split()))\ns=0\nfor i in range(1,n+1):\n  s+=(i-1)\nif s==0:print('YES')\nelse: print('NO')"}, "417": {"problem_id": 417, "answer": "n, x, d = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n  s[i] = x + d\nans = 0\nt = n-1\nwhile t > 0 and (s[t] + x) <= d: t -= 1\nprint(t)\n"}, "418": {"problem_id": 418, "answer": "n = int(input())\nalpha = []\nfor i in range(n):\n\talpha.append(list(map(int, input().split())))\nprint(\"NO\")"}, "419": {"problem_id": 419, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1, 10**9+10))\nfrom heapq import heappush,heappop\ndef main():\n \n n = int(input())\n l = [int(x) for x in input().split()]\n s = 0\n for i in range(0, n-4, -1):\n\n  if s == 0:   s += l[i-1] + 1\n print(s)\n"}, "420": {"problem_id": 420, "answer": "n,m=list(map(int,input().split()))\na=[[int(i) for i in input().rstrip('\\n')] for _ in range(n)]\nfor i,j in a[::-1]:\n\ta[i][j]+=j\n#print(a)\nq=[]\nwhile len(q)!=0:q.append(min(len(b)-2*q[0])+1)\n\n"}, "421": {"problem_id": 421, "answer": "n = int(input())\nl, r = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = max(l[0], l[1])\nprint(max(a))"}, "422": {"problem_id": 422, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**5)\nn, k = list(map(int, input().split()))\na = [int(x) for x in input()]\nans = []\nfor i in range(n):\n\tans.append(ans[-1] + a[i])\nprint('NO')\n"}, "423": {"problem_id": 423, "answer": "n, k = list(map(int, input().split()))\ncoeff = [0]*(n+1)\nfor i in range(1, 100):\n  coeff[i] = (n-i) * i + k\nprint('Yes')\n"}, "424": {"problem_id": 424, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\nfrom collections import defaultdict as dd, Counter as C\ndef LI(): return list(map(int, input().split()))\ndic = dd.from_iterable(LI())\nn = dic.most_common(1)[0]\nans = 0\nfor i in range(n, 0, -1):\n  ans += i\nprint(ans)"}, "425": {"problem_id": 425, "answer": "import sys\ninput = sys.stdin.readline\nn, p = map(int, input().split())\nif n == 0: print(p)"}, "426": {"problem_id": 426, "answer": "n, k = list(map(int, input().split()))\ns = str(n)\nans = 0\nfor i in range(k):\n\tans += int(s[i % 10])\nprint(ans)"}, "427": {"problem_id": 427, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9+1))\nfrom math import sqrt,factorial,gcd\ndef prime_factors(n):\n\tif n==1: return [1]*(2*n-1)\n   if n<=2 or n>=3:return [2**i for i in range(3,int(sqrt((n**0.5)+1)))]\n\n\tnums = list(map(int,input().split()))[:n]\n#\t\tprint(f'n: {n}: {p}' for p,p in zip(ints, nums) )\np = 2**(p)-1\nfor n in sorted(list(enumerate(input())), key=lambda x: x[2])[-2:]:print((p-n)*n)\n\n"}, "428": {"problem_id": 428, "answer": "import sys\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().strip()"}, "429": {"problem_id": 429, "answer": "s = input()\nn = len(s)\nfor i in range(n):\n\tif s[i] == '?' and n % 2 == 0 and s.find('?')!= -1:print(i+1)"}, "430": {"problem_id": 430, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i])\nprint('YES' if b[-1] =='' else 'NO')\n"}, "431": {"problem_id": 431, "answer": "n, m = list(map(int, input().split()))\na = []\nfor i in range(1, n + 1):\n\ta.append([int(input()), i - 1] * m)\nprint(sum(a))"}, "432": {"problem_id": 432, "answer": "import sys\nfrom heapq import *\ninput = sys.stdin.readline\nn = int(input())\nc = list(map(int,input().split()))\na = [0]\nfor i in range(n):\n\tc.append(c[-1] + a[i])\nans = 0\nused = set()\nwhile ans < n - 1:\t\t# \u6bcf\u6b21\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u4ed6\u8ba1\u7b97\u6709\u591a\u5c11\u65f6\u5019\u4f1a\u627e\u51fa\u73b0\u5728\u6807\u51c6\u91cc\u9700\u8981\u52a0\u9012\u51cf\u53bb\u91cd\u5b8c\ufffd it would be the worst case. \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5220\u9664\u5224\u65ad\u8fd9\u79cd\u5df2\u7ecf\u5f62\u5f3a\nif ans == n: break\nprint(ans)\n"}, "433": {"problem_id": 433, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nn,a,b = map(int,input().split())\nl = [int(i) for i in input()]\nr = n-l[a-1] + 1\nd = []\nfor x in range(n):\n  d.append(a*x+b-r)"}, "434": {"problem_id": 434, "answer": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\ns = [0 for _ in range(n)]\nfor i, v in enumerate(zip(a, s[1:-1])) :\n  if v == '-' : s.append(i)\nprint(len(s))"}, "435": {"problem_id": 435, "answer": "n, k = list(map(int, input().split()))\ns = input()\ncnt = 0\nfor i in range(1, n + 1):\n\tif s[i] in cnt + k - i - 1 and s.count(s[:i]) > k + i + (i + 2) * (n - k) - (2 * k), s: s = s + ''.join(f'{i}')\nprint(max(0, s))"}, "436": {"problem_id": 436, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nli = []\nfor i in range(n):\n\tli.append(li[-1] + a[i])\nans = [0] * n\nflag = 1\nwhile flag < n - 1 and li[flag] == 0: flag = 0\nif flag == 1: ans[1:n] = i\nprint(ans[n])"}, "437": {"problem_id": 437, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nfor i in range(n - 1):\n\tA[i] += 1\nprint(sum(A))"}, "438": {"problem_id": 438, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=set(a)\nc=[]\nfor i in range(1,n+1):\n c.append(b.pop(0) + a[i])\nprint(len(c))"}, "439": {"problem_id": 439, "answer": "n, m = list(map(int, input().split()))\np = [[0]*(2*n) for i in range(n+1)]\nif n%2: p[0][n//2] = 1\nelse: print(m*p[-1][0])\n"}, "440": {"problem_id": 440, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(str, input().split()))\nfor i in range(n):\n\ts.append(chr(i+ord('a')))\nprint('\\n'.join(s))"}, "441": {"problem_id": 441, "answer": "n,a,b=list(map(int,input().split()))\nl=[]\nfor i in range(n-1):\n  l.append(input()+'.')\nprint(max(l))\n\n"}, "442": {"problem_id": 442, "answer": "r=int(input())\nfor i in range(r):\n   a,b=list(map(int,input().split()))\nprint(a-b)"}, "443": {"problem_id": 443, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.sort(reverse=True)\nprint(len(a))"}, "444": {"problem_id": 444, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**9)\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n  ans.append(1+a[i])\nprint(len(ans))"}, "445": {"problem_id": 445, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.extend(a[i] + a[n - i - 1])\nprint(max(ans))"}, "446": {"problem_id": 446, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[:])"}, "447": {"problem_id": 447, "answer": "m,d = list(map(int, input().split()))\na = []\nfor i in range(1, 9):\n\tif a[i] & 1: a.append(i)\nprint(len(set(a)))\n"}, "448": {"problem_id": 448, "answer": "n,m = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(m):\n\ta[i] = a[n-i-1]\nprint(sum(a))"}, "449": {"problem_id": 449, "answer": "from math import sqrt\nn = int(input())\na = [int(x) for x in input().split()]\nb = 0\nfor i in range(n):\n\tb += a[i] if i > 0 else 1\nprint(b)"}, "450": {"problem_id": 450, "answer": "n, k = list(map(int, input().split()))\np = input()\nres = [0 for i in range(n + 1)]\nmod = int(1e9+7)\nfor _ in reversed(list(enumerate(input()[:-1])):\n\tres[-1] = res[n - 1] % mod\nprint(res)"}, "451": {"problem_id": 451, "answer": "import sys\nsys.setrecursionlimit(10 ** 4)\nn, k = list(map(int, sys.stdin.readline().split()))\ns = [input() for _ in range(n)]\nb = [-1] * n\nfor i, (u, v) in enumerate(s):\n  b[v] = i\nprint(max(b))"}, "452": {"problem_id": 452, "answer": "from fractions import Fraction as F\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\ndef I(): return int(input())\n# I() = list(map(int, input().split()))\nfor _ in range(I()):\n\ta, b, c = map(str, I())\n\n\tif a > b or b > c or c > a or a < b: return False\n \tprint('YES')\n"}, "453": {"problem_id": 453, "answer": "t = int(input())\na = [tuple(map(int, input().split())) for _ in range(0, t)]\nfor i, x in enumerate(a[::-1]):\n  a[i] = str(x).replace('-', '-')\nans = ''.join('{} {}'.format(i,''.join(reversed(str(t) + x))))\nprint(ans)\n"}, "454": {"problem_id": 454, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\ndef main():\n\tn, k = list(map(int, input().split()))\n\n\ta = [[0] * (n + 1) for _ in range(k + 2)]  # a = a[0][:2] = [0, 2*a[-1][:-2], 2/2][-2*(n - 2) + 3]\n\n   for i, (x, y) in enumerate(zip(a, b))[:: 2] if x % 2 == 0 and (y, i) not in a or (i, x)!= i and i!= n and n % y!= 0 else[i] : \n \t\t# print(f'{i}, {x} {a: {[(i+1) % k]}} {n: [{y}]*{k}*[{n-i}]}')\n\n"}, "455": {"problem_id": 455, "answer": ""}, "456": {"problem_id": 456, "answer": "n = int(input())\ns = input()\nd = {}\nfor i in range(n):\n  d[i] = list(map(int, input().split()))\nif len(d.keys()) > 1: d.pop(0)\nprint('***' + str(len(s)))\n"}, "457": {"problem_id": 457, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(200000)\nfrom collections import defaultdict, deque\ndef II(): return int(input().rstrip())\nt = II()\nn = t.__next__\na = [t[i] for i in range(n)]\nans = []\nfor x in a[::-1]:\n  ans.append(sum(map(int, x)))\nprint(*ans)"}, "458": {"problem_id": 458, "answer": "a,b,c=list(map(int,input().split()))\ns=set(a)\nfor i in range(0,10**9+1):\n  s.add(i%a+i//b-i*(b+c)//(c-b)*s[i])\nprint(len(s))"}, "459": {"problem_id": 459, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(2147483647)\ninput = sys.stdin.readline\nfrom math import sqrt,ceil\nfor _ in range(int(input())):\n a = list(map( int, input().split() ))\n print( \"YES\" if not (sqrt( a[0])) else \"NO\" )"}, "460": {"problem_id": 460, "answer": "#!/usr/bin/env python3\nfrom sys import stdin\nimport math\nn = int(stdin.readline().strip())\np,x = [int(x) for x in std.split('\\n')]\na = []\nfor i in range(1,n+1):\n\ta.append(math.gcd(p[i],x))\nif len(set(a)) == 1 and a[-1]%25==0: print(0)\nelse: a.sort()"}, "461": {"problem_id": 461, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]\nfor i in range(n):\n\ta.append(a[-1] + b[i])\nc = a.count(0)\nd = min(c, b+c-b-c+2*(b+d-2)*(d+1)**0.5)"}, "462": {"problem_id": 462, "answer": "#!/usr/bin/env python\n\"\"\"\nCreated on Sat May 23 23:18:37 2020/05/23 10:08:31.\nhttps://www.codewars.com/kata/latest-of-python-8-oranges\nPython Contest Edition 1.0 #1 Contest Processingaji\nAuthor: jianliu@code.google\nFollow up: https://lists.hackerrank5.org/Abstract.txt?doi:$\nDid you find anything wrong with the original answer? Good luck and enjoy your trip to contest. Good Luck!\nHave a nice trip X"}, "463": {"problem_id": 463, "answer": "n, x = list(map(int, input().split()))\na = [int(input()) for i in range(n)]\nans = 0\nfor i, (a, b) in enumerate(a) :\n  if (b-a[i])%2 == 0 :   ans += b.count(b.bit_length()-2)\nif (n == 1 or n == 2 or a[0] > b[1]):  print(-1) \n"}, "464": {"problem_id": 464, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ts = input() + '.' + a[i]\nprint('NO')\n"}, "465": {"problem_id": 465, "answer": "from collections import *\nn = int(input())\na = [int(i) for i in input().split()]\ngraph = [[] for _ in range(n + 1)]\nfor i, v in enumerate(a):\n  graph[v].append(v)\nans = []\ndef dfs(node, is_connected=False, max_len=float('-inf'))(ans) = 0\ndfs(0, True, False, 0) + [a[0]]\nwhile True:\n\n  print('YES', ans[-1])\n\n"}, "466": {"problem_id": 466, "answer": "from functools import reduce\nn,m=list(map(int,input().split()))\nc,d=[int(i) for i in input().strip()]\np=reduce(lambda a,b:a+b,n)\ns=[]\nfor i,j in p: s.append(max(s[-1][0],i-j+1) if i>0 else j-i for j in range(1,min(m,i//2)+2,len(n)))\nprint('\\n'.join([' '.join,s]))"}, "467": {"problem_id": 467, "answer": "s = input()\ncnt = 0\nfor i in range(13):\n if s[i] in 'aeiou':\n  cnt += 1\nprint(''.join(map(str, s)))"}, "468": {"problem_id": 468, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(int(''.join(map(str, str(a[i]**0.5))) +'' * (i + 1)))\nprint('>')\n"}, "469": {"problem_id": 469, "answer": "n=int(input())\nprint(n)\n"}, "470": {"problem_id": 470, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tt = list(map( int, input().rstrip().split() ) )\n\n\tif t[0] == '1':\n \t\tprint(sum(t[1:]) + 0)\n"}, "471": {"problem_id": 471, "answer": "n, a = map(int, input().split())\nx = [int(i) for i in input()]\ny = [-1] * (n + 1)\nfor _ in range(n):\n  x[y[-1]] += 1\nprint(max(x))"}, "472": {"problem_id": 472, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(min(a))\n"}, "473": {"problem_id": 473, "answer": "import sys\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(2*(10**5) + 10**20)\nread = lambda: int(input())\nfrom collections import defaultdict as dd, deque\ndef __starting_point():\n\t#print(\"starting point: %s\" %(dd(int(x) for x in input().split()))\n#\tprint(f'{input().strip()}: {input()}')\n"}, "474": {"problem_id": 474, "answer": "from sys import stdin, stdout\nimport math\na=list(map(int,stdin.readline().split()))\nn=len(a)\nprint(n)"}, "475": {"problem_id": 475, "answer": "n, m, k = [int(i) for i in input().split()]\nl = []\nfor _ in range(k):\n\tl.append(sum(colors[i] for color in list(input())))\nprint(len(l))"}, "476": {"problem_id": 476, "answer": "import math\nn = int(input())\nfor i in range(n):\n\tprint(\"YES\")\n"}, "477": {"problem_id": 477, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(10**5)\nread = lambda: input().rstrip()\nprint('\\n'.join(map(str, read().split())))"}, "478": {"problem_id": 478, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "479": {"problem_id": 479, "answer": "n,k = list(map(int,input().split()))\nt = int(input())\na = [0]*10000\nfor i in range(0,n):\n\ta[i] = (t-i+1)%10000;\nprint(sum(a))\n\n"}, "480": {"problem_id": 480, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\nt = list(map(int,input().split()))\np = [0]*(2*n+1) # 1-based indexing\nfor i in range(n):\n  t[p[i]] = i\nans = [-1] * n\ns,x,y = p[0],0,0\nwhile s < n and y < 2*s-1:\n\n  if (t[s]==0 and (0<=x<n and 0>=y) and abs(x-s)<1):\n\n\tans[y] = x\n\tx = y\nprint(len(ans))"}, "481": {"problem_id": 481, "answer": "n, x = list(map(int, input().split()))\na = []\nfor i in range(1, n + 1):\n\ta.append(i * x)\nprint(a[-1])\n"}, "482": {"problem_id": 482, "answer": "n = int(input())\nk = input()\na = list(map(int, input().split()))\nc = 0\nfor i in range(len(a)):\n  if a[i] not in c and i > 0 and len(c) - i - 1 >= 2: c += 1\nprint('{} {}'.format(i, c))"}, "483": {"problem_id": 483, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nx = [0]*n\nfor i in range(n):\n\tx[i] = (i+1)//2\nans = 0\np = [-1] * n\nq = []\nwhile p[q[0]] >= 0 and len(q) > 1: q.append(p[-2] + 1)\nprint(ans)"}, "484": {"problem_id": 484, "answer": "n,a,b=list(map(int,input().split()))\nx=[int(i) for i in input()]\ny=input()\nz=0\nfor i,j in zip(x,y):\n if i==j:z+=1\n else:x[i]+=z\nprint(z)\n"}, "485": {"problem_id": 485, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n-1):\n  x,y,z=a[i:i+1],a.index(x)+1,[i for i,j in enumerate(a) if j!=i]\nprint(y-z)\n"}, "486": {"problem_id": 486, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[n-1])"}, "487": {"problem_id": 487, "answer": "from collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nb=[0]*n\nfor i in range(n):\n\tb[a[i]-1]+=1\nans=0\nk=max(b)\nif a[n-1]-k>0:ans+=k\nprint(ans)"}, "488": {"problem_id": 488, "answer": "from sys import stdin, stdout\nimport numpy as np\nn = int(stdin.readline().strip())\npoints = np.array(sorted(list(map(int, s.split()))))\ncount = 0\nfor i in range(n):\n  points[i][0] += 1\n#print(points[n-1-i+1][1])\npoint_colors = [0, 1, 0, -1]\ncurr_color = 'abcdefghijklmnopqrstuvwxyz'\ndef add_point(point1, point2, color):\n\n  if point1 in points or (point2 == 0) or curr == color:   # no point in point 1 or 2, add it to point 2\n\tcount += 2**(count - 1)\nprint((count))\n"}, "489": {"problem_id": 489, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  a[i] = min(a[0]*(i+1)//2, (2*i) + 1)\nprint(ans)"}, "490": {"problem_id": 490, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[:])\n"}, "491": {"problem_id": 491, "answer": "n = int(input())\ns = list(map(int, input().strip().split()))\nprint(max(s))"}, "492": {"problem_id": 492, "answer": "from itertools import permutations\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\narr = list(map(int,input().split()))\nfor i in range(n):\n  arr[i] = sorted(arr[:i+1])\nprint('\\n'.join([str(x) for x in arr]))"}, "493": {"problem_id": 493, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif a[i] == 'R' and len(a) > 1 and (a[-1]!= 'L' or a.count('L') > 0): ans += 1\nprint(ans)\n"}, "494": {"problem_id": 494, "answer": "import sys\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nA = [set() for _ in range(N)]\nfor i in reversed(list(range(0, N))):\n  if i[0] in A and A[i[1]].intersection(set(A[:N])) == A: continue\n#print(i, A)\na = 0\nb = 1\nwhile a + b <= N: a += b\nprint(-1)"}, "495": {"problem_id": 495, "answer": "# cook your dish here\nfrom itertools import combinations\na, k = list(map(int, input().strip().split(' ')))\nprint(max(sum(combinations(range(a), k)), 2))\n"}, "496": {"problem_id": 496, "answer": "from collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9) + 1000)"}, "497": {"problem_id": 497, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(n):\n  ans[a[i]] = i\nprint(max(ans))"}, "498": {"problem_id": 498, "answer": "n,m,k = list(map(int,input().split()))\nd = [['L' for i in range(m)] for j in d]\nl = [0]*(n+1)\ns = ['L', 'R']\nans = 0\nwhile s[-1] == 'L':\n\tl += d[d[l][0][1]-1][:m-l-2] if len(l)>0 else l[:l[0]]+'R'\nfor i,j in sorted(list(enumerate(d)), key=lambda x:x[1], reverse=True):\n \tans += j\nprint(ans)"}, "499": {"problem_id": 499, "answer": "n = int(input())\ns = input()\na = []\nfor i in range(n):\n\tif s[i] == \"R\":\n \t\ta.append(s[-i-1].count(\"B\"))\nif len(set(a)) == 2: print(\"G\")\nprint(\"BR\")"}, "500": {"problem_id": 500, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint('YES' if a[0] == '1' else 'NO')"}, "501": {"problem_id": 501, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict,deque\nI = lambda: map(int,input().split())\nMOD = 10**9 + 7"}, "502": {"problem_id": 502, "answer": "import math\na,b,c=list(map(int,input().split()))\np=math.sqrt(b-a)\nif p==0 or (p-1) in [0,-1]:\n print('Yes')\nelse:print('No')"}, "503": {"problem_id": 503, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(k):\n\ta[i] = int(input())\nprint(len(a))"}, "504": {"problem_id": 504, "answer": "n,a,b = map(int,input().split())\nd = [[0]*(b+1) for i in range(n+2)]\nfor i,(x,y) in enumerate(input(),1):d[x][y] = (x*y+y*x)\nprint(max(d))"}, "505": {"problem_id": 505, "answer": "n,m,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n   a.append(input())\nb=a.index(min(a[i],m-i))+m\nprint(b)\n"}, "506": {"problem_id": 506, "answer": "a,b = [int(i) for i in input().split()]\nprint(a-b)"}, "507": {"problem_id": 507, "answer": "def main():\n \n n = int(input())\n a = [int(x) for x in input().split()]\n b = []\n for i in range(n-1) : a[i] = 1 if i % 2 == 0 else 2\n print(a[:n//2])\n"}, "508": {"problem_id": 508, "answer": "from math import *\ndef angle(n,a):\n  if (n==1 or n==3 or a==180): return 0; return 1; else: return 2*n-angle(a,n)\nn=int(input())\na=list(map(int,input().split()))\ng=0\nfor i in range(0,3): g+=a[i]\nprint(g)"}, "509": {"problem_id": 509, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint('YES' if a[0] == 360 else 'NO')\n"}, "510": {"problem_id": 510, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na,b,c,d = list(map(int,input().split()))\npositions = []\nfor i in range(n):\n\tpos = [int(x) for x in input().rstrip('\\n').split(' ')][-1] + [0] * (n - i + 1) + pos[-2]\nans = 0\nif n % 2 == 1 and a == b and c == d and d == c: ans += 1\nprint(ans)\n"}, "511": {"problem_id": 511, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\tb[i] = b[n-i-1] + 1\n#print(b)\nc = []\nwhile c and len(c) > 1: c.pop()\nprint(' '.join(str(i)) + '\\n')\n"}, "512": {"problem_id": 512, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(max(1000, 10**9))\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = []\nfor i, a in enumerate(a):\n  if a[i] >= 2*(2*a.count('1')+1): ans.append('Yes')\nprint(*ans)"}, "513": {"problem_id": 513, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict, deque\nn = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\ta[i] += [0]*(i+3)\nprint('GOVL\\n'.join(map(str,a)))"}, "514": {"problem_id": 514, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n n, d = list(map(int, input().split()))\n print(\"YES\" if d > n else \"NO\")"}, "515": {"problem_id": 515, "answer": "import math\nn=int(input())\nl=[]\nfor i in range(1,n+1):\n  l.append(math.pow(10,i))\nprint(-1)\n"}, "516": {"problem_id": 516, "answer": "n, m = list(map(int, input().split()))\ns = [input() for i in range(n+1)]\nt = []\nfor i,s in enumerate(s):\n\tif s[-1] == '?' and i!=0:t.append(i)\nprint('\\n'.join(t))"}, "517": {"problem_id": 517, "answer": "from collections import deque\nn,d,h = list(map(int,input().split()))\nadj = [[] for i in range(n)]\nfor i,j in enumerate(list(itertools.groupby(range(1,n)),key=lambda x: -x[1]):\n  adj[i].append(j)\nvisited = [False] * (n+1) # visited[0] = True\ndef dfs(x,y,p,visit,dp,curr=0,used=False):  # dp[x][y] stores the distance of x to y from x and y, where y is used as the starting point for p[y][x]\nif curr in used: # if the current visited is not used, the path is empty, so we don't have to check if visited has been used\nused = False\nwhile True:   ### If we have visited all visited, we know that we've arrived at the same path as we'd met all conditions before. But, if we only meet conditions once, that's not enough to make a path empty. We can check to see if there's another way out. At this point, there could be some edge cases where d is greater than or equal to h, but this is impossible for us because we can only tell that there\u00a0is no edge case where h >= h0. ### Repeat the process until we find a valid\u00a0h and d that satisfies the requirement. if not, leave it as was. Because we're not going to repeat this process again, repeat the next h-h walk until d satisfies, at which point we'll know what's the minimum distance we need to walk from visited to visited. This can be tricky, as you might want to go through some intermediate nodes and find the shortest path to meet our requirements. in that case, keep repeating this step until you're satisfied with the final distance. The process ends when all the visited nodes have been visited and all questions will be satisfied. Here is some examples of satisfied nodes: ### At the end of a satisfied node: d0 = d1 + d2 + h(d1-d2) == d(h+d0) ### There are only two possible solutions to this question: if h is satisfied, then h1 > h2, otherwise, visit will return True, which means d[h2] is closer to a free node. at this moment, it's too early to tell which is more optimal. too_far will cause some questions to pass through too far and cause d to finish visiting again. No matter\u00a0how you think you meet these conditions, you decide to visit. visiting will always return true, because if you visit a question that contains only questions that contain more questions than edges (i.e., questions containing more than the diameter), then d will not be far enough away from an intermediate question's question_end_of_satisfies_h. Visit also always returns true if d exceeds d by some\u00a0non-negative integer\u00a0enough to cover all test cases. Good luck! ### You are not required to solve this challenge! You may assume that d >= 0 and that all tests passed!\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)# limit for Python 7, 8, 6, 5, 4, 3, 0, 100000000000\nmod = 10**9 + 7 in wchar or 8 in char\n"}, "518": {"problem_id": 518, "answer": "from math import sqrt\nn,r=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append(sqrt(i*i) + s[i])\nprint(s[-1])"}, "519": {"problem_id": 519, "answer": "import math\nfrom sys import stdin,stdout\n#stdin = open('input.txt', 'r')\na,b = input().split(' ')\nn = int(a[0])\nm = math.sqrt(n+1) + 1\nl = list(map(int, a[1:n]))\nfor i in range(0,n):\n\tl.append(math.pow(i, m*(m-1)))\nprint('\\n'.join(l))"}, "520": {"problem_id": 520, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\nprint(math.floor(a[0] + a[-1]))"}, "521": {"problem_id": 521, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n-2):\n\tif a[i] == \"C\" and b[(i+1)%n]== \"M\":\n  \t\tb.append(a[-i-1] + 1)\nif len(b)==1:print(\"No\")\nelse: print(\"Yes\")"}, "522": {"problem_id": 522, "answer": "n, f = [int(i) for i in input().split()]\nmod = 10**9 + 1"}, "523": {"problem_id": 523, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = list(map(int, input().split()))\np = [-1] + [list(input().rstrip()) for _ in range(n)]\ns = [0] * (n + 1)\nfor i, s in enumerate(s[:-1], 1):\n  s[i] = s.pop()\n#print(p, sep=\"\\n\" * n, end=''* m, file=sys.stderr): print(f'{p[-1]} {sep}')"}, "524": {"problem_id": 524, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = float('inf')\nfor i, (a, b) in enumerate(a):\n  ans = min(ans, abs(b - a[i]))\n#print(i, 'a[%d] = %f' % (n, i))"}, "525": {"problem_id": 525, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = lambda: int(input())\nfor _ in range(I()):\n\tn = I()\n\n\ta = list(map(int, input().rstrip().split(' ')))\n\n \tif len(set(a)) % 2!= 0: print('Invalid input', a, 'Omkar's password can be {}, which is not a valid array.\\n'.format(max(n, a[0])))\n  "}, "526": {"problem_id": 526, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\nD = {x: i for i, x in enumerate(inp.replace('\\n',' ').split(' ') if x!= '0'}.D\n}\nli = [LI() for _ in range(D[0] + 1)]\nfor i in reversed(list(range(len(li)))):\n\tli[i] = li[li.pop()]\nprint(*li)"}, "527": {"problem_id": 527, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**6)\nfrom queue import PriorityQueue\ndef main():\n \"\"\"Main program\"\"\"\n main = lambda x: sys.stdin.readline().rstrip()\n def dfs(x):\n  if x == 't': return 1, 0\n return 0 if'son' in x else 1 + min(dfs(int(''.join(map(str, x))), x), 10**9 + 1) % 2 == 0 else 0"}, "528": {"problem_id": 528, "answer": "n, m = list(map(int, input().split()))\na, b = [], []\nfor i in range(m):\n\ta.append((int(input()), int(b[i])))\nc, d, e, f = 0, 1, 0\nwhile c < n + 1:\n\n\tif a[c][0] < b[0][1] and e < m and f < (n + 2) * 3 and (c + d + e) % 3 == 0: c += d += e + f\nelse: print('YES')\n"}, "529": {"problem_id": 529, "answer": "import sys\r\nsys.setrecursionlimit(max(10**5, 10**9) + 1000000)"}, "530": {"problem_id": 530, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = input()\nt = string(s)\nif a[0] == '1':\n\tprint('First')\nelif t[-1]!= '0' and len(t) > 2 * n // 2: print('Draw')"}, "531": {"problem_id": 531, "answer": "import math\nn = int(input())\nx = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tx[i] *= math.factorial(i)\na = x[:n+1]\n#print(x, a, ans)\n\n\n\n"}, "532": {"problem_id": 532, "answer": "s = input()\nn = len(s)\na = []\nfor i in range(n):\n\ta.append(input())\nprint(len(a))"}, "533": {"problem_id": 533, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\nn = int(input())\na = list(map(int, input().split()))\nk = [0] * n\nfor i in range(n):\n\tk[a[i] - 1] += 1\nans = 0\nx = a[n]\ny = k[2 * (n - 3)]\nprint(max(ans, max(x, y)))\n"}, "534": {"problem_id": 534, "answer": "n,t = list(map(int, input().split()))\ns = input()\na = []\nfor i in range(t):\n\ta.append(s[i])\nprint(''.join(a))"}, "535": {"problem_id": 535, "answer": "n, k = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(k, n + 1, 2) :\n  p *= i\nprint(p * k % k)\n"}, "536": {"problem_id": 536, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nx = a[n - 1]\ncnt = 0\nwhile cnt < n - 2 and x >= x * (x - x // 2) * 10**10:\n\n\tif x % 2 == 0: x = x / 2 * 2 + x\nprint(x)\n"}, "537": {"problem_id": 537, "answer": "import math\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n l.append(math.ceil(i/k) + 1)\nprint(sum(l))"}, "538": {"problem_id": 538, "answer": "x=int(input())\nfor i in range(x):\n   if input() in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,140,141,144,146,147,148,149,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,195,196,197,199,204,205,206,207,208,209,210,311,312, 313, 314, 315, 316, 317,318,nerine,terrible)"}, "539": {"problem_id": 539, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)"}, "540": {"problem_id": 540, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,m = list(map(int,input().split()))\nr = []\nfor i in range(n):\n\tr.append(input())\nif len(r)==0 or r[-1]!=r[0]:\n  print('NO')\nelif r.count('X')==1:print('YES')"}, "541": {"problem_id": 541, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**5)\n \nn, m = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append(input().rstrip())\n#print(l, l[0])\ncnt = [0] * (n + 1) if n % 2 == 0 else [int(x) for x in l]\ndef dfs(node, i, cnt):   # \u533a\u9593\u306e\u8981\u7d20\u3092\u6c42\u3081\u308b\nif i == n: return 1\ndfs(0, 1, 0) # i\u756a\u76ee\u306b\u3057\u3088\u3046\u306b\u3059\u308b\u5834\u5408\nreturn 0\n"}, "542": {"problem_id": 542, "answer": "n = int(input())\na = list(map(int, input().split()))\nif a[0] < 0: print('first')\nelif len(a) % 2!= 0 or len((a[i]) for i in range(n - 1)): print(('second')[:i + 1] +'' + ('first'[(i+1)%2] if i+2 < n else ''))"}, "543": {"problem_id": 543, "answer": "n = int(input())\na = list(map(int, input().split()))\npizzas = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = a[n - 1 - i] + slices[-1]\nans = 0\ncnt = {}\nwhile cnt[a.count(a) == 1]!= -1:\n\n\tans += a.pop()\nprint('YES' if ans else 'NO')\n"}, "544": {"problem_id": 544, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, s = list(map(int, input().split()))\n\n\tif n % 2!= 0 and s[n // 2] not in ['a','z'] and len(s) < 3: print('NO')\n#\t\tprint('YES') if s.count('z') < 2 * n // 3 else 'NO'\t# print 'YES' if (s[s.index('a')] * 2) % n == 0 or (n % 3) == 1 or n * 3 == 6 or  n!= 5 or s!= 'P' \n"}, "545": {"problem_id": 545, "answer": "n, t = list(map(int, input().split()))\ns = input()\na = []\nfor i in range(n):\n\tif a.count(i) == t and s[i]!= i + 1 and a[0] == i+1:\n\n\t\ta.append((i, i*i+i*(t-i)));\nprint(' '.join(str(x) for x in a))\n\n"}, "546": {"problem_id": 546, "answer": "t = int(input())\nfor i in range(t):\n\ts = ''.join(map(str, input()))\n\n\tif len(set(s) & s.endswith('*')) > 100: print('NO')\n"}, "547": {"problem_id": 547, "answer": "n,k=map(int,input().split())\npassword=input()\nfor i in range(0,n):\n\tif(password[i]=='0' and i>=n-1):password.replace('0',i+1)\nprint(3)"}, "548": {"problem_id": 548, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [[0]*n for i in range(n+1)]\nfor i, x in enumerate(a[1:], 1):\n\tdp[i][x] = 1\nans = []\ni = 0\nwhile i + 1 < n+2 and dp[-1][i]!= 0 and i < len(dp) and (i % 2 == 0 or i % (2*i) == 1) : ans.append(str(i +1) + \" \")\nif ans: ans = \" \".join(ans[:-1])\nprint(*ans)"}, "549": {"problem_id": 549, "answer": "n = int(input())\nx = []\nfor i in range(n):\n\tx.append(list(map(int, input().split())))\nprint(len(x))"}, "550": {"problem_id": 550, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nD = {}\nfor i in range(n):\n  D[A[i]] = [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 171, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 223, 224, 225, 227, 229, 232, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 271, 272, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 294, 296, 298, 300, 303, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 325, 326, 327, 328, 329, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 387, 389, 400, 401, 402, 403, 405, 406, 413, 414, 408, 409, 420, 421, 424, 425, 427, 426, 428, 429, 432, 433, 448, 450, 457, 460, 451, subjection\n"}, "551": {"problem_id": 551, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\nX = [tuple(map(int, input().split())) for _ in range(n)]\nY = [-1] * n\nfor i, x in enumerate(X):\n  Y[i] = min(Y.pop() for y in X[:i - 1] if y > 0) + x\nprint('Yes' if Y else 'No')"}, "552": {"problem_id": 552, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque, Counter\nn, m = list(map(int, input().split()))\ns = input()\nc = Counter(s)\nans = [0] * m\nfor i in range(n):\n\tx, y = s.count(i), c[s[i] - 1]\n\n\tif x % m == 0 and y % (m - x)!= 0: ans[y] += 1\nprint(len(ans))"}, "553": {"problem_id": 553, "answer": "import sys\nfrom sys import stdin,stdout\ninput = lambda:stdin.readline().rstrip()"}, "554": {"problem_id": 554, "answer": "from sys import stdin\ninput()\nn,m = list(map(int,stdin.readline().split()))\na = []\nfor i in range(m):\n\ta.append([int(x) for x in input().strip()])\nans = [0]*(n+1)\nd = {i:0}\ndef dfs(i,j,k,d):\n\n\tif i>=j and j!=i+k and i<=n and k!=-1 and d[i][j]==0:return d.get((i-j,-1),None,None)[0][1]\nif n==1:ans[0].append(d.pop(0))\t\t\nelse: ans[1].extend([d[j][k] for j in a])\n\n#print(len(a))\n\n"}, "555": {"problem_id": 555, "answer": "n=int(input())\nx=n//10\nprint(x)\n"}, "556": {"problem_id": 556, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import defaultdict as dd\ndef solve(l,r,k):\n if l<=r: return 0\n elif l==r or (r==0 and l>=2*k+1): return 1\n return 2**4+((r-l)//k)*k-2**(4-r)*(k*2-3*(r*3-4))\nprint(-1)"}, "557": {"problem_id": 557, "answer": "n, m = list(map(int, input().split()))\na, b = [], []\nfor i in range(n):\n\tif a[i] <= m: a.append(i+1)\nif n == 1: print(\"NO\")\nelif m <= n-1 and a <= b:print(\"YES\")"}, "558": {"problem_id": 558, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - x % 2\ndef LI(): return [int(_) for _ in open(__import__('sys').ENGLISH).read().split()]\nmod=99824353\nI=lambda:list(map(int,input().rstrip('0'),I())[:-1])\nLI=sorted(set(LI()).difference(I()))\n"}, "559": {"problem_id": 559, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(100000)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\nmod = 10**9+7\nfrom collections import deque\nN = 100001\nfor _ in range(N):\n\ta,b = LI()\n\n\tif a*b == 0: return 0,1\n \telif b*(b-a) > 1: raise ValueError(f'{a}=={b}')\n"}, "560": {"problem_id": 560, "answer": "r,c = map(int, input().split())\nl = []\nfor i in range(r):\n\tl.append(str(i))\nprint(max(l))"}, "561": {"problem_id": 561, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n+1):\n\ta[i] += 1\nprint(ans[n])\n"}, "562": {"problem_id": 562, "answer": "import math\nn = int(input())\nl, r = list(map(int, input().split()))\nfor i in range(n - 1):\n\tif l[i] + r[-1] > 1 and math.ceil(math.sqrt(i) + 1) == i: print(\"NO\")\nif n == 1 or n % 2 == 0:print(\"YES\")"}, "563": {"problem_id": 563, "answer": "from itertools import permutations as p\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\ndef LI(): return list(map(int, input().split()))\n#from heapq import nsmallest, nlargest, heapify,heapify_or_return, is_non_zero, factorial, fmod, mod, heappop, sieve of zeroes\nmod=7.141592653589793238\nsieve_of_zeroes=0\nn=int(input())\nfor i in reversed(list(range(n,n+1)))[:-1]:\n\tif n-i%mod==0 and mod*i<=n-n//mod and i!=i+i*(mod-2) : return i\nprint(*[LI() for _ in range(21)])\n"}, "564": {"problem_id": 564, "answer": "n, s = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input()][i])\nprint('NO')\n"}, "565": {"problem_id": 565, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nread = lambda: list(map(int, input().split()))\n"}, "566": {"problem_id": 566, "answer": "r,g,b = list(map(int, input().split()))\nl = []\nfor i in range(len(r)-1):\n\tif r[i]>=l[-1][0] and l[-(i+1)%3]<=b: l.append(i)\nprint(max(l))"}, "567": {"problem_id": 567, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(set(a), key=lambda x: x[1])\nprint(n-1)\n"}, "568": {"problem_id": 568, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nif n == 1: print(0)"}, "569": {"problem_id": 569, "answer": "n = int(input())\ns = input()\nif n % 2: print(-1)\nelif s[:2] in [0, 1]: print(len(s[2:]) + 1 + n // 2)"}, "570": {"problem_id": 570, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(max(10**9, 100000000), 10**10)\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i])\nc = 0\nwhile c < len(b) - 1:\n\n\tif b[c] < a[-1-i] and (c+1) not in b: c+=1\n \telse: b.pop()\nprint('{}'.format(c))"}, "571": {"problem_id": 571, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import reduce\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n# def LI(x): return reduce(lambda x,y: x*y, [x, y] if x<=y else [0, 0] + [None, None] for x in range(1,x+3) if not x%MOD and x!=None], [])\n \nn = LI()\nl = []\nfor i in s: l.append(i+l[-1]) if i<len(l) and l[i]==i else l\nprint('\\n'.join(str(w) for w in l))"}, "572": {"problem_id": 572, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(k): a[i] = int(input())\nprint(len(a))"}, "573": {"problem_id": 573, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a.count(i)\nprint(sum(a))"}, "574": {"problem_id": 574, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nn = int(input())\nx = list(map(int, input().split()))[:n]\nprint(n)"}, "575": {"problem_id": 575, "answer": "n = int(input())\nfor i in range(n):\n\ta,b = list(map(int,input().split()))\n\n\tif a.count(b)>=2 and (b!=a and a!=(b,a-1)) or (a==b and b!=-1): print(\"NO\")"}, "576": {"problem_id": 576, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n-1):\n\tl.append((a[i]*(i+1))//2)\nprint(max(l))"}, "577": {"problem_id": 577, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,k=list(map(int,input().split()))\na=[int(i) for i in input().rstrip('\\n')]\nb=deque(a)\nfor _ in range(n):\n\ta[b[1]-1]+=1;b.popleft()\nans=max(0,sum(b)-b)//k\nprint(ans)\n\n"}, "578": {"problem_id": 578, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nn = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n\ts[i] = str(i) + \"e\"\nprint(s.count(0))"}, "579": {"problem_id": 579, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate, combinations, permutations, repeat\ndef input():\n\treturn input().rstrip()\nn,k = map(int,input().split())\np = [[0]*(n+1) for _ in range(k+2)]\nfor i,j in enumerate(combinations(p,2)):p[i][j] = max(j-k,0)\nf = lambda x,y: x * (y-x) // (x-y) if x > 0 else 0\nl = [i for i in x for x in y]\nans = [(0,f(i)) if i == 1 else (i,i+k-1))\nprint(sum(ans))"}, "580": {"problem_id": 580, "answer": "import sys\nreadline = sys.stdin.read().split()\nn,m,s,t = list(map(int, readline().strip()))\np = [[0]*(s+1) for _ in range(n+2)]\nfor a,b,l in zip(p[0][:-1], p[1][-1]):\n\tif l>=s and a!=b and l<=t and (a, b) not in [1,2,3] and s>0 and b<0: s = s - a\nprint('\\n'.join(['YES' if l==s==t else CAN']))"}, "581": {"problem_id": 581, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n  b[i] = (b[-1] + i) % n\nprint(max(b))"}, "582": {"problem_id": 582, "answer": "n = int(input())\na = list(map(int, input().split()))\nt = tuple(a)\nfor i in range(t):\n  if a[i] not in t: t = [a[-i-1]]\nprint(min(1, t.count(0)))\n"}, "583": {"problem_id": 583, "answer": "n = int(input())\ns = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif s[i] == '(' and len(s) > 1 : ans.append(i+1)\nif n <= 500: print(ans[0])\nelse: ans = ans[::-1]\n"}, "584": {"problem_id": 584, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "585": {"problem_id": 585, "answer": "from itertools import accumulate\nn,m=list(map(int,input().split()))\na=[[] for i in range(n)]\nb=[0]*m\ndp=[[0,0]]\nfor i,(a,b) in enumerate(zip(*a)):\n\tdp[a[i][1]]+=((b[-1]+1)%m for j in b[:-1])+[(i,j)]*(9-i)\nans=1\nmod=10**9+7\n#print(dp,a,[])\nwhile dp[0][-2]!=-1 and a[:m]<0:n-=dp.pop(0)[-m:]\nif n>1:ans+=mod\nprint((ans%mod)**2)\n\n"}, "586": {"problem_id": 586, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\ndp=[0]*(n+1)\nfor i in range(k):\n\tdp[i]+=1\nans=sum(dp)%1000000007\nprint(ans)"}, "587": {"problem_id": 587, "answer": "# coding: utf-8\nimport sys\nsys.setrecursionlimit(10**5)\nfrom heapq import heappush, heapify\nread = sys.stdin.read\nn = int(read().strip())\nd = [int(x) for x in read().split()]\nfor i in range(n):\n  d[i] = d.pop()\nmaxi = max(d[-1])\nss = 0\nx = []\nwhile len(ss) < 10**10:\n\n  if ss[0] == maxi: ss = x + [ss[1]] + x[:2*ss.index('1')] +[x[2:] for ss in ss.split('\\n')[::2]][1: ] + ss\n"}, "588": {"problem_id": 588, "answer": "#!/usr/bin/env python\nfrom itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n x, y = A[i]\n A.append(x+y)\nprint(s)"}, "589": {"problem_id": 589, "answer": "# cook your dish here\ns = input()\ni = 0\nwhile i < len(s) and s[i] == 'A':\n  i += 1\nprint(i)\n"}, "590": {"problem_id": 590, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(len(ans))"}, "591": {"problem_id": 591, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nb = [-1] * (n + 1)\nfor ai in a[::-1]:\n  b[ai] = max(b[:ai+1])\nans = 0\ni = 1\nwhile i < n - 1: # i = i + 2 # a = a + [i+2]*(n-i-2) + a\n# print(a,b,a[0:i]), i, ans\nprint(k-max(ans, 0))"}, "592": {"problem_id": 592, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nans = 0\nfor i in range(1, n):\n\tif a[i - 1] == 0 and (a[-1] * (i + 1) - 2) * i!= i + 2: ans += 1\nprint(ans)\n"}, "593": {"problem_id": 593, "answer": "from collections import defaultdict\nn,m = list(map(int,input().split()))\na = [0]*n\nfor i in range(m):\n  a[i] += int(input())\nprint(a[-1])\n"}, "594": {"problem_id": 594, "answer": "#!/usr/bin/env python3\nfrom sys import stdin, stdout\nimport heapq\nn,m = list(map(int,stdin.readline().split()))\na = [0]*n\nfor i in range(n):\n\ta[i] = (i+1)*m\nprint(-1)\n"}, "595": {"problem_id": 595, "answer": "n = int(input())\nfor i in range(n):\n\tx = (n-1) // 100 + (i*i).bit_length() if i % 100!= 0 else i\nprint(x)"}, "596": {"problem_id": 596, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(max(map(int, input().split())))"}, "597": {"problem_id": 597, "answer": "n, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n a.append([int(input()), i])\nb = [i for i, x in enumerate(a) if x == a[i][0]]\nc = sorted(b)\nprint(min(c[-1]) + 1)"}, "598": {"problem_id": 598, "answer": "n,x = list(map(int,input().split()))\na = [int(input()) for i in range(n+1)]\nans = [-1] * n + [0]*n\ns = set()\nfor i,j,k in zip(a,s):\n   ans[j] -= a[i] - s.union(*j)\nprint(min(ans))"}, "599": {"problem_id": 599, "answer": "#!/usr/bin/env python\nn = int(input())\ns = input()\nfor i in range(len(s)):\n\tif s[i] == 'a' and len(set(list(map(ord, s))) - 1) == 1: print('NA')"}, "600": {"problem_id": 600, "answer": "#!/usr/bin/env python\nimport sys\ndef read_int():\n\treturn int(sys.stdin.readline())\nread_line = lambda x: __import__('sys').join(map(str, readline().split()))\ninput=lambda : sys.stderr.write('Hello World!')\n"}, "601": {"problem_id": 601, "answer": "import sys\ninput = lambda : sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n\tp,f = [int(x) for x in input().rstrip().split(' ')][1:][p-1]*10**9+[f*p//f]+[p*f//p]+[[f] for f in [p] if f]"}, "602": {"problem_id": 602, "answer": "a = input()\nn = len(a)\nprint(''.join(map(str, a)))\n"}, "603": {"problem_id": 603, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = [int(i) for i in input().split()]\nprint(max(a))"}, "604": {"problem_id": 604, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  if a[i] > 0: ans += i - a.pop()\nprint(ans)\n"}, "605": {"problem_id": 605, "answer": "#dt = {} for i in x: dt[i] = [float('-inf')]*(i+1)\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :map(int,input().split())\nfrom functools import lru_cache\ns = input().strip()\na,b,c,d = ip() if ip().isdigit() else (ip()) for _ in range(c) if inp() or (b-a)%c==0 else 0\nprint('\\n'.join(s.split()))"}, "606": {"problem_id": 606, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nprint(int(input()))"}, "607": {"problem_id": 607, "answer": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().rstrip()]*m)\nprint('\\n'.join(a))"}, "608": {"problem_id": 608, "answer": ""}, "609": {"problem_id": 609, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[a[i]].append(i)\nc = 0\nif a[0] == 'x' or len(a) % 2 == 1: c += 1\nprint('YES')\n"}, "610": {"problem_id": 610, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+m+1):\n  a.append((i,i*(i-1))+[a[i][0]*m])\nprint(n-a.index(max(a)))\n"}, "611": {"problem_id": 611, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "612": {"problem_id": 612, "answer": "def __starting_point():\n\tn,k,p=list(map(int,input().split()))\n\n\ta=[int(i) for i in range(p)]\n\n \tif p%2==0 and a[p//2-1]!=0:print('YES\\nNO')\n"}, "613": {"problem_id": 613, "answer": "t = int(input())\nfor i in range(1,t+1):\n\ta,b = list(map(int,input().split()))\n\n\tif (a==b) or (b==a) : print('inf')\n"}, "614": {"problem_id": 614, "answer": "n, m = list(map(int, input().split()))\ns = []\nfor i in range(1, n+1):\n  s.append(list(input()[i:i+2])) \nprint(max(s))"}, "615": {"problem_id": 615, "answer": "n=int(input())\na=list(map(int,input().split()))\ndp=[-1]*n\nfor i in range(n):\n\tdp[i] = max(max(a[0],i-p) for p in a[1:])\nans=min(dp)\nprint(ans)"}, "616": {"problem_id": 616, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef LI(): return [int(x)-1 for x in sys.stdin.readline().split()]\n#def LIR(a,b): return a+b if a!=b else a\nn,m=LI()\nl=[]\nfor i in range(m):\n\tl.append(l[-1]*((i+1)%2) + (i*2))\nprint(*l)"}, "617": {"problem_id": 617, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\ndef II(): return int(input())\n# II() = list(map(int, input().split()))\nINF = float('inf')\nprint(II())"}, "618": {"problem_id": 618, "answer": "import itertools\nn = int(input())\na = list(map(int, input().split()))\ns = input()\nfor i in range(len(a)):\n  s += a[i]\nprint(''.join(s))"}, "619": {"problem_id": 619, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nfor i in range(n):\n\tx,y,z = list(map(int,input().split()))\n\n\tdp = [float('-inf')]*(2**n-1)\n\n \tif (x+y)%2 == 0:\t\t   dp[0] = 0.0\n  # print(dp)\n#\tprint(x*y + z*z,dp[z] + (z-x)*(y-z)//(z+1))\n"}, "620": {"problem_id": 620, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n#sys.setrecursionlimit(2*10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]  # input: [1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,500,607,609,613,617,641,643,647,653,659,661,673,677,683,691,701,709,713,763, 715,775,779,787,797,809,821,830, 833, 8214, 8527, 8645, 11359"}, "621": {"problem_id": 621, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(list(set(a)), reverse=True)\nprint(len(b))"}, "622": {"problem_id": 622, "answer": "from collections import deque\nn, k = list(map(int, input().split(' ')))\na = [int(i) for i in input()]\nprint(' '.join(a))"}, "623": {"problem_id": 623, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = 10**9 + 7\nMOD = 998244353\ndef II(): return int(input())\nd = II()\nans = []\nfor i in range(min(i, INF)):\n\tans.append(d * (d - 1) / 2 + (i % 2))\nprint(ans[-1])"}, "624": {"problem_id": 624, "answer": "import sys\ninput = sys.stdin.readline\nn, k, m = list(map(int, input().split()))\na = [int(x) for x in input()]\nans = 0\nfor i in range(k):\n\tx = a[i]\n\n\tif x - 1 >= 0 and x + 1 < n and m - x >= k and (a[-x-1] - m) * (k - i) >= m: ans += 1\nprint(ans)\n"}, "625": {"problem_id": 625, "answer": "n = int(input())\na = [0] * (n+1)\nfor i in range(1, n + 1):\n a[i] = -1 + i\nprint(a[-1])"}, "626": {"problem_id": 626, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i, x in enumerate(a):\n  b[i] = max(b[-i-1], x) if x < 0 else b\nprint(min(max(0, b)-1 for b in b))"}, "627": {"problem_id": 627, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(0,n):\n\tb.append(a[i])\nif n<=2**(b[0] + b[n - 1] - a[1]) or n>=3**n-2: \n   print(''.join(str(x) for x in b))"}, "628": {"problem_id": 628, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\narr = [0] + [int(input()) for _ in range(k)]\nitems = []\nfor i in arr: items.append(items[-1]+i)\n#print items\ncnt = 0\nmax_val = k - keks - 1\ndef add(i, val):\n if i == val: return val\n val = i\n for j in items[i]:\n  val += val - j\n cnt += max(0, i-keks-2) * (k - ieks) + sum(arr[k:])\n items = sorted(list(zip(*items)))\nprint(('\\n'.join(['{0} {} {}'.format(x, y) for x, xy in zip(c, items) ])))\n\n"}, "629": {"problem_id": 629, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in range(1,n):\n\tb[i] = b[n-i-1]\nans = 0\nwhile len(b)>0:\n\n\tj = a[b.index(min(a[j])):] + (max(0,j-2*i) if i < j else 0) + b.pop(j) - (n - i) * (i - j) // 2 * a.get(i,0) == 0;\nif ans == n: ans = n\nprint(ans)"}, "630": {"problem_id": 630, "answer": "from collections import Counter\nn,k=map(int,input().split())\na=Counter(input()).most_common(1)\nb=[0]*n\nfor i in a[:k]:\n  b[i]=b[n-i-1]+k\nprint(max(b))"}, "631": {"problem_id": 631, "answer": "import math\nt = int(input())\nfor i in range(t):\n  n, m = list(map(int, input().split()))\n\n  a = [math.factorial(x) for x in zip(list(range(n)), [m]*(m+1)//2) if x%2 == 0] + [0] * (2*m)\n"}, "632": {"problem_id": 632, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n print(k)\n"}, "633": {"problem_id": 633, "answer": "n,m=list(map(int,input().split()))\nedges=[]\nfor i in range(n):\n\tif (i*2)%m!=0 and ((i**2-1)**0.5) not in [1,2,3,4,5,6]:\n  \t\tlista=[\"P\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"]\" for i,j in enumerate(list((i+1)*(2*m),i))]\n#print(alist)\nans=[0]*(m+n+m)\n\n\t#ans[i][j] = max(0, (j-i)*i for j,i in list(enctype(sorted(set(ans)))) if s.count(j)>0) \ndef s(i): return sorted([x for x in sorted(x, key=lambda x:x[1], reverse=True) if x[2]==i[0])[-n-m-2]]\nprint((s(10**6)))\n"}, "634": {"problem_id": 634, "answer": "R,N = list(map(int,input().split()))\nC = []\nfor i in range(1,R+1):\n\tC.append(list(reclaim(i,C[i-1])))\nprint('WIN' if C.count(R) == N else 'R')\n"}, "635": {"problem_id": 635, "answer": "import sys\ninput = sys.stdin.readline\nn, s = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n  d[i] = d.get(i, None)\nans = [False] * n\ndef dfs(x, y, d, i, ans):\n\n  if ans[x] == True and x not in d and y!= 0 and i!= x and s!= y and (x - y) % 2 == 0:\n\n\tif x < 0 or x > n - x: \n\t\tans[y - 1] |= False\n#   print(y, x, n-x)  # \u8ba1\u6570\u7ec4\uff0c\u9700\u8981\u6bcf\u6b21\u90fd\u80fd\u591f\u8def\u5f84\nif n > 1 and len(ans) < 2 and n == 2 * (n-1) + 1: # \u6bd4\u8f83\u6700\u5927\u503c\nprint(\"YES\")\nelse: print(\"NO\")"}, "636": {"problem_id": 636, "answer": "n,k = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append([int(input()),i-1])\n#print(a)\nd = dict()\nl = sorted(enumerate(d.items(), key=lambda x:x[0]))[:-1]\nm = 0\nwhile(len(l)>=k+1): \n  m = max(m,d[l[-k]][0])\n\n  #print(\"m: \",m) \n\n"}, "637": {"problem_id": 637, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [list(map(int, input().split())) for _ in range(n)]\nc = [[0] * (2 * n + 1)] + a\nfor i, c in enumerate(c[::-1]):\n\tif c[i][i] == 0 and (i == n - 1 or i == 2 * i - 2 or (n - i) % 2!= 0) and len(a[:i]) == 1 and a[(i + 2*i) // 2][(2*(1 + i)) // 3] > 0: break\nprint('YES\\n')\n"}, "638": {"problem_id": 638, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nmatrix = [[0] * (n + 1) for _ in range(m + 2)]\nfor i, j in zip(list(range(1, n))):\n  matrix[i][j] = 1 if i > 0 or j > 1 or i < n - 1 else 0\ncollections = collections.deque([[0, 1]])\nwhile matrix[1][1] == 1: matrix.popleft()\nprint(min(len(mat)))\n"}, "639": {"problem_id": 639, "answer": "n, x = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n): s[i] = min(s[-1], x + i * 2)\n\n"}, "640": {"problem_id": 640, "answer": "a,b=map(int,input().split())\nprint(a*b)"}, "641": {"problem_id": 641, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9)+100000)\nfrom collections import deque\ndef main():\n \n n = int(input())\n x = list(map(int, input().split()))\n week = [int(x) for x in x]\n month = [\"F\"]\n total = 0\n for i in range(n-11, -1,-1):\n\ttotal += x[i] * (i+1) // 2\n print(total - week[week[0] - 1])\n"}, "642": {"problem_id": 642, "answer": "n, m = list(map(int, input().split()))\ng = [[0] * m for _ in range(n + 1)]\nfor i, (x, y) in enumerate(zip(*[iter(input())]*(x - 1), m)):\n  g[i][y] = 1\nif n == 1: print('YES')\nelif m == 2:print('NO')"}, "643": {"problem_id": 643, "answer": "t = int(input())\nfor _ in range(t):\n a,b,c,d = list(map(int,input().split()))\n if(b > a or c > b or d > c or (b == a and c == b and d == c)) :\n  print(-1)\n elif(a > d or b > e or e > g or g > h or h > i or i > j or j > k or k > l or l > r or r > s or s > t or t > u or u > v or v > w or w > x or x > z or z > o or o > p or p < q or q < r < s < t < c < d < e < g < h < i < j < k < l) :"}, "644": {"problem_id": 644, "answer": "import sys\nfrom math import *\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda: int(input())\nn = I()\nprint('\\n'.join(map(str, input().split())))\n"}, "645": {"problem_id": 645, "answer": "s = input()\nn = len(s)\ncnt = 0\nfor i in range(n-1, 0, -1):\n\tif s[i] == \"aeiou\": cnt += 1\nif n == 1: print(0)"}, "646": {"problem_id": 646, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] = list(map(int, input()))\n#print(a)\nd = [[] for _ in [0] * (n + 1)]\ndef dfs(d, a, b, c, dp) :\n  if d[a][b] == c : return c == 0\n\n  a[d[b][c]] = 1 + max(dfs(b[c], b[0]), d.pop()[1])\nelse :   # b is empty and c is 0: return 0, why do we have to use 0 instead of 0 to avoid 0 overflow?\nprint(-1)"}, "647": {"problem_id": 647, "answer": "from sys import stdin\nimport math\nn = int(stdin.readline())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\ta[i] = math.factorial(i)\nprint('\\n'.join(map(str, a)))"}, "648": {"problem_id": 648, "answer": "m,b=list(map(int,input().split()))\na=[]\nfor i in range(m):\n\ta.append([int(input()),i])\nprint(max(a))"}, "649": {"problem_id": 649, "answer": "n = int(input())\nt = [int(i) for i in input().split()]\nans = 0\nfor _ in range(n):\n\tt[n] = t[:n+1] + 1\n#print(t)\nif t == [0, 0]:\n   print(ans)"}, "650": {"problem_id": 650, "answer": "# cook your dish here\nn = int(input())\ns = \"\"\nfor i in range(len(n)):\n\ts += n[i]\nprint(s)"}, "651": {"problem_id": 651, "answer": "n,m=list(map(int,input().split()))\ns=[0]*n\nfor i in range(n):s[i]=str(i)\nd=input()\ni=0\nwhile i+1<n and s[-1]=='.':i+=1"}, "652": {"problem_id": 652, "answer": "n = int(input())\na = []\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\n\ta.append(x+y)\n#print(a)\n\n\n\n"}, "653": {"problem_id": 653, "answer": "# cook your dish here\nn=int(input())\nevent=[]\nfor i in range(n):\n\tevent.append(list(map(int,input().split())))\nprint(event[0])"}, "654": {"problem_id": 654, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(i) for i in input().rstrip().split()]\nm = 10**9+7\ndp = [[-1]*(a[0] + a[1]) for _ in range(n+1)]\nfor i,a in enumerate(reversed(sorted(map(int, a)))):\n  dp[a][i] = 1\nans = 0\ni = 2\nwhile i * i <= n and (i + 1) % 2 == 0 and n - i - 1 in [0, 1, 2] and i < 2 * (n-i-2) and not (s[i:i+2] == (1, 0) or s[(2, i) + i + 2]) or (2*i < n or i == 1 and s.count(1) == 2) : ans += i\nprint(ans % m)"}, "655": {"problem_id": 655, "answer": "import sys\ninput = sys.stdin.readline()\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*n\nfor i in range(n):\n  B[i] += 1\n#print(B)\nif A[-1] == 1:print(\"Black\")\nelse:A.sort()"}, "656": {"problem_id": 656, "answer": "n, k = list(map(int, input().split()))\ntemp = [-1] * n\nfor i in range(n):\n\ttemp[i] = k - (i + 1)\nprint(sum(temp))"}, "657": {"problem_id": 657, "answer": "import math\na,b,c,d,e,f,g,h,i=list(map(int,input().split()))\nn=a+b+c+d+e+f+g+h\nprint(n)\n"}, "658": {"problem_id": 658, "answer": "n,w,v,u=list(map(int,input().split()))\nadj=[[] for _ in range(u+1)]\npos=[-1]*n\ncost=0\nfor i,x in enumerate(adj):\n\tif(pos[i]<-u and x<=w):\tcost+=1\telse  print(i,end=' ')\np=1\nwhile(len(p)>0 and p<n and w>u): p=p*w+p\nprint('\\n'.join(str(x) for x in p))"}, "659": {"problem_id": 659, "answer": "n = int(input())\na = list(map(int, input().split()))\nsorted = sorted(a)\nflag = False\nfor i in range(n):\n  if sorted[i] == sorted[n - i - 1] and a.count(i) > 1: flag = True\nprint(-1)"}, "660": {"problem_id": 660, "answer": "n,b,p = list(map(int, input().split()))\nx = []\nfor i in range(n):\n   x.append(pow(2,i-1)+1)\nprint(x[2])\n"}, "661": {"problem_id": 661, "answer": "import sys\nsys.setrecursionlimit(10**7)\nint1 = lambda x: int(x) - x\nmod = 10**9 + 7\nfrom heapq import heappush,heappop\ndef read_ints(): return list(map(int, sys.stdin.readline().strip().split, input()))\nread_list = list()\nN = int1()[0]\nfor _ in range(1):\n\tN += 1\n\n\tif N > 2**(N-1)//2: raise ValueError(\"N is out of 2Nth power of N\", N, N-2)  # n is not divisible by 2 yet, so n % 2 == 0  \t\t# n = 2*n + 2\n#\tP = (N*(2*N+1))%mod\nprint((2**N) + \" \".join([str(i) for i in P]) + \"\\n\")"}, "662": {"problem_id": 662, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = dict()\nfor i in range(n):\n\ta[i] = a.get(i, 0) + 1\n#print(a)\nc = 0\nans = 'YES'\nif a[0] == '1':\n \tprint('NO')\nelif b[-1]!= '2':\t\t# there is no 1-indexed a\nelse:\t   ans += 'NO'\n\n"}, "663": {"problem_id": 663, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nfrom itertools import permutations,combinations,permutations_with_most_common\ndef __starting_point():\n\tr, a, b, c, d = list(map(int, input().strip().split()))\n\n\tn = r + a + b + c + d + (r - a - 1)\n\n \tif n in d: print(n)\n  \n"}, "664": {"problem_id": 664, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = sorted(a)\nprint(min(s[0], s[1]))"}, "665": {"problem_id": 665, "answer": "t = int(input())\nfor _ in range(t):\n\tn, s = list(map(int, input().split()))\n\n\tif s == 0 or n == 1 or s % 2 == n: print(0)\n"}, "666": {"problem_id": 666, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(a[-1])"}, "667": {"problem_id": 667, "answer": "import sys\nn = int(sys.stdin.readline().strip())\ngraph = [[] for _ in range(n + 1)]\ndef add(a, b):\n\tif a[0] == '0': a.append(b)\n\n\tfor i, e in enumerate(graph[a].items()):\n\n \t\ta[i] = b[:i + 2] + e[-2:]\n# print(add(list(map(int, list(range(1, n - 1, -1))))))\nfrom collections import deque, defaultdict, OrderedDict\nclass List():\n  def __init__(self, size): self.sz = len(size)  # size of list should be minimum number of elements in list (i.e. each element will have the same size as the other elements)"}, "668": {"problem_id": 668, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nif n == 1: print(a[0])\nelif 2 * n >= a[1]: print(-1)"}, "669": {"problem_id": 669, "answer": "n, m = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n+1):\n\ta[i] = i\nprint(max(a))"}, "670": {"problem_id": 670, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 1000000007\nfrom math import gcd\ndef II(): return int(input().rstrip() or '0')\nD = II()\nfor _ in range(I()):\n   x,y,z = list(map(int, input().strip().split()))\n\n  ans = x * y * z * (z - 1) // 2 + (abs(x - z) * abs(y + z)) // D\nprint(ans)"}, "671": {"problem_id": 671, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(n-1)\n"}, "672": {"problem_id": 672, "answer": "from math import sqrt\nimport numpy as np\nn = int(input().strip())\na = np.array([int(x) for x in input().split()])\nb = n // 2\nc = 0\nfor i in range(1, n):\n  if a % i == 0: c += 1\nprint(c)\n"}, "673": {"problem_id": 673, "answer": "n, m = int(input()), 100\nfor i in range(m):\n\tn += int((n - i) / m)\nprint(n)"}, "674": {"problem_id": 674, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n   cnt += a[i]\nif len(set(a)) == 1 and all(x < y for x, y in zip(list(i) for i, i[1])) and len({i[0] + x + 1}) == n-1: print(\"NO\")\nprint(\"\".join(sorted([a[:i]])))"}, "675": {"problem_id": 675, "answer": "import sys\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\n# input = list(map(int, input().split()))\n"}, "676": {"problem_id": 676, "answer": "n = int(input())\narr = [int(x) for x in input().split()]\ncnt = 0\nfor i in range(n-1):\n\tx = arr[i] + (i+1)//2 + sum(arr[:i])*(2*x-x%2) + i\nprint('YES' if cnt else 'NO')"}, "677": {"problem_id": 677, "answer": "q=int(input())\nfor i in range(q):\n   a,b,c,d=list(map(int,input().split()))\n\n  if a%d==0 and (b-a//d)%c==1 and ((a-b//c)//(d-c//b))%(c-1)==2: print(i)\n"}, "678": {"problem_id": 678, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nmod = 10**9+7\nINF = float('inf')\neps = 1e-9\ndef LI(): return list(map(int, input().split()))\nd = lambda: [int(x)-1 for x in input()]\nn = int(input())\nans = []\nfor i in range(n):\n  ans.append(LI()[i])\nprint(''.join(ans))"}, "679": {"problem_id": 679, "answer": "s = input()\nn = len(s)\nif s[-1] == \"A\":\n\tprint(\"No\")\nelse: \t   print(\"Yes\")"}, "680": {"problem_id": 680, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] = (i + 1) % 3\nc = [-1] * n\nx = a[n - 1] - b[0] + c[-1];\ny = 0;\nif x == 0: x = 1; y = -1\nprint(y)"}, "681": {"problem_id": 681, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = int(10**9)+7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\nl = [(0, 0)]\nfor i in range(1, (2**(l.count(0))-1)):\n\ta, b = l[i] + [(i, 1), (i + 1, 2)], (1 << (b-a), 1 << b) + a\nprint((sum(LI()))%MOD)"}, "682": {"problem_id": 682, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(100000)\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\ndef L():\n\treturn list(map(int, input().split()))\nN = int(input())\nA = L()\nB = [[] for _ in range(N+1)]\nfor i, x in enumerate(A[1:], start=1): B[x].append([i, i+x-1])\na = [0] * N\nb = [-1]*N\nans = 0\nif A[0].startswith('k'): ans += 1\nwhile len(b) < N: a[b[-2]] = b[:-2]\nprint(ans)"}, "683": {"problem_id": 683, "answer": "a=eval(input())\nprint(a)"}, "684": {"problem_id": 684, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta, b, c, d = list(map(int, input().split()))\n\n\tx, y, z = max(a - x, a - y), min(c - z, 0), max(-d * (c + z) // 2) if c > z else (d + 1) * 2 if z > 0 else 0\n \tprint(x + y + x * y * z * x)\n"}, "685": {"problem_id": 685, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import Counter\nread = lambda: list(map(int,input().split()))\nn,h = read()\nx = [[] for _ in range(n+1)]\nfor i,(x,y) in enumerate(read())[1:]:\n  x[i-1].append((y,x))[0] += 1\nans = [-float('inf')]*n\nprint(max(ans))"}, "686": {"problem_id": 686, "answer": "t = int(input())\nfor _ in range(t):\n x, y = list(map(int, input().split()))\n if y > x: print(\"NO\")\n elif y == 1: continue\n else: \n  if x % 10 == 0: x //= 10  : x = 10 + (x // 10) // 2\n"}, "687": {"problem_id": 687, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,setrecursionlimit\nimport numpy as np\nn=int(stdin.readline().strip())\na=np.array(list(map(int,line.split(' '))))\nprint(-1)\n"}, "688": {"problem_id": 688, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = []\nfor i in range(n):\n\tx = input().rstrip()\n\n\tl.append(int(x))\nL = sorted(set(l), key=lambda x: x[1])\nprint(2)\n"}, "689": {"problem_id": 689, "answer": "t = int(input())\nfor i in range(t):\n  s = list(map(int, input().split()))[::-1]\n\n  print('YES' if s[0] in s else 'NO')"}, "690": {"problem_id": 690, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\narr = list(map(int, input().split()))\nprint('\\n'.join(arr))"}, "691": {"problem_id": 691, "answer": "n,x=list(map(int,input().split()))\ns=[0]*(n+1)\nfor i in range(0,n):\n s[i]=(s[-1]+i)%x\nprint('NO')\n"}, "692": {"problem_id": 692, "answer": "from math import *\nn = int(input())\nm = [int(x) for x in input().split()]\nr = []\nfor i in range(n-1):\n\tr.append(m[-i+1])\nans = \"0\" * (n - 1) + \"1\"\nprint(ans)\n"}, "693": {"problem_id": 693, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([-1]*m)\nans=0\ni=1\nwhile i<=n//2 and a[i][0]==i+1:i+=1;ans+=i\nprint(ans)"}, "694": {"problem_id": 694, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10000000)\nMOD = 998244353\nINF = 10**20\neps = 1.0\nI = lambda: int(input())\ndef II(): return list(map(int, input().split()))\nn = II()\nlst = [II() for i in input()]\nans = INF\ni = 0\nwhile i < len(ans) and ans[i] > INF//2: i += 2\nprint('NO' if ans else 'YES')"}, "695": {"problem_id": 695, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(a))"}, "696": {"problem_id": 696, "answer": "n = int(input())\np = 1\nif n % 2 == 0 and n / p == 1: print(1)\nelse: p = p + 2\nprint(p)"}, "697": {"problem_id": 697, "answer": "MOD = 998244353\nimport math\nn, m = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(m):\n\tp[i] = int(math.log(i, 2)) * m - i\nprint(sum(p))"}, "698": {"problem_id": 698, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\na = list(map(int, input().split()))\ndp = [[[-1]*(n+1) for i in range(a[0] + 1)] for j in reversed(list(range(1, a[1]+1)))]\nans = [float('-inf')] * n\nfor i,j in enumerate(reversed(dp)):\n   ans[i][j] = j\nprint(sum(ans))"}, "699": {"problem_id": 699, "answer": "n = int(input())\nx = []\nfor i in range(1,n+1):\n x.append(list(map(int,input().split())))\nprint(*x)\n"}, "700": {"problem_id": 700, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(\"Yes\") if a.count(a[0]) == 1 else \"No\"\n"}, "701": {"problem_id": 701, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict, deque\nread = lambda: list(map(int, input().split()))\n#from itertools import permutations, combinations_with_replacement\nn = int(read())\ns = set()\nfor _ in range(n-1):\n\ts.add(tuple(reversed(s)))\nans = [''.join(x) for x in s]\nif ans[0] == 'tree' and len(ans) > 1: ans = 'need'\nprint('', ans)"}, "702": {"problem_id": 702, "answer": "n = int(input())\nA = list(map(int, input().split(' ')))\nprint('YES' if A[0] == '.' else 'NO')"}, "703": {"problem_id": 703, "answer": "from math import *\na,b,v = list(map(int,input().split()))\nn = int(a)\ns = sorted(list(set(v)))\nc = 0\nfor i in range(n):\n  if s[i]%b == 0: c+=1\nprint(c)"}, "704": {"problem_id": 704, "answer": ""}, "705": {"problem_id": 705, "answer": "n = int(input())\nx = list(map(int, input().split()))\ny = [list(x) for x in x]\nfor i in range(n):\n\tx[i] ^= 2**(i+1)\nprint('\\n'.join(y))"}, "706": {"problem_id": 706, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nn = int(input())\na = [int(i) for i in input().split()]\nb = []\nfor x in range(1,10**9+7):\n  g = a[x]%pow(10,9)+7\n\n  if n==0 and (x==1 or x==3 or g(n-1)&1==g(b[-2])) and b[0]<=a[2*x+1] and a.count('1')>1:   # print('n',x,b,a,g)\n\n"}, "707": {"problem_id": 707, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\np = [[] for _ in range(n)]\nfor i in reversed(range(m)):\n\tp[i].append(i+1)\na, b = p[-1]\nb.sort()\ny = a[:len(a) - 1] + b.pop()[:-2] if a else -1\nprint(y)"}, "708": {"problem_id": 708, "answer": "from bisect import bisection\nn,k=list(map(int,input().split()))\na,b,c,d=[],[]\nfor i in range(0,n):\n\ta.append(i+1-bisection(k,(b[i],i))[1:])\nb.sort(reverse=True)\nd={}\nc=[0]*n\nm=10**18\np=0\nf=1\nflag=False\nwhile f<=n-2 and len(d[c[0]])>=4 and m>0 and p<n and flag==False and not a[p] in d : flag=flag\nif flag: print(-1); return False; p+=1; a.pop()\nelse:print(p)"}, "709": {"problem_id": 709, "answer": "x = int(input())\na = []\nfor i in range(x):\n  a.append(i + 1)\nprint(min(a))"}, "710": {"problem_id": 710, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tx = a[i].count('A') - 1\n \tans.append(str(x[-1] +'' + str(i)))\nprint('\\n'.join(ans))"}, "711": {"problem_id": 711, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn, m = map(int, input().split())\nl = [0]*n\nfor i in range(n):\n\tl[i] = list(map(lambda x: x&0x7, l))\nprint(len(l))"}, "712": {"problem_id": 712, "answer": "import math\nn,p,t=list(map(int,input().split()))\nans=0\nfor i in range(1,n+1):\n\tans+=math.floor(p*i)\nprint(ans)"}, "713": {"problem_id": 713, "answer": "n,m = list(map(int,input().split()))\na = [set() for _ in range(n)]\nfor i,j in zip(a,a[::-1]):\n\tif (i+j+1) % 2 == 0: a[i].add(j)\nprint(len(set(*a)))\n"}, "714": {"problem_id": 714, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n // 2):\n  ans.append(a[i] + a[-i - 1])\nprint(*ans)"}, "715": {"problem_id": 715, "answer": "import sys\nfrom collections import defaultdict\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(2147483647)\n# import numpy as np\nn = int(input())\na = np.array(list(map(int, input().split())))\nprint(np.sum(a))"}, "716": {"problem_id": 716, "answer": "n,a,b = list(map(int,input().split()))\ns = [int(i) for i in input()]\ni = 0\nwhile i < len(s) and s[i] < b: i += 1\nprint(min(a * b,n - i))"}, "717": {"problem_id": 717, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif a[i]%2!=0:ans+=1\nprint(ans)\n"}, "718": {"problem_id": 718, "answer": "from sys import *\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n"}, "719": {"problem_id": 719, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n\ts=str(bin(i).count('1')+'0'*(len(s)-i-1)//2)[:s.find('0')]+s\nprint('\\n'.join(map(str,s)))"}, "720": {"problem_id": 720, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta[i] = max(b.append(i-1) + 1, a.index(max(a)) - 1)\nans = [0]*n\nflag = False\nif n%2 == 1 and a[n//2] in b: flag = True\nprint(ans[0])"}, "721": {"problem_id": 721, "answer": "n,d = list(map(int,input().split()))\na = []\nfor i in range(n-1):\n  a.append((int(input())-1)*0.01)\nprint(a[0])\n"}, "722": {"problem_id": 722, "answer": "n = int(input())\narr = list(map(int, input().split()))\nprint('\\n'.join(arr))"}, "723": {"problem_id": 723, "answer": ""}, "724": {"problem_id": 724, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn, d = list(map(int, input().split()))\nA = [set() for _ in range(n+1)]\nB = set(A)\nfor i, a in enumerate(B):\n  if A[i] not in B: B.add(a)\n\n  elif d > d[0] and B[d-1] > 0: d.append(d.pop())\nprint(max(0, n-d))"}, "725": {"problem_id": 725, "answer": "import itertools\nn,m=list(map(int,input().split()))\nmatrix=[]\nfor i in range(n):\n  matrix.append('\\n'.join(str(i))+'M').replace('B','W')\nprint('Black' if matrix[-1][0]==\"C\" else 'Black')"}, "726": {"problem_id": 726, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\nI = lambda:int(input())\nfrom collections import defaultdict as dd\nn,d = list(map(int,input().split()))\nx = dd.from_iterable(list(range(n)))\nans = [0]*n\nfor i in range(d):\n  ans[x[i]-1] += 1\nprint(ans[-1])\n"}, "727": {"problem_id": 727, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [-1] * n\nfor i in range(n):\n\tans[a[i]] = i\nprint(len(ans))"}, "728": {"problem_id": 728, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0 for i in range(n + 1)]\nfor i, x in enumerate(a):\n\tb[x] += 1\nans = 0\nif b[0] % 2 == 1: ans += a[:n]\nprint(ans)\n"}, "729": {"problem_id": 729, "answer": "n = int(input())\ns = list(map(int, input().split()))\nif len(s) == 1 or s[0] in ['a','b','c','d','e','f']:\n\tprint('YES')\nelse:   print('NO')"}, "730": {"problem_id": 730, "answer": "from operator import itemgetter\nfor _ in range(int(input())):\n a=input().split()\n if len(a)=='O':\n  print(''.join(map(str,a)))"}, "731": {"problem_id": 731, "answer": "#!/usr/bin/env python3\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\ns = '\\n'.join(map(str, input().split()))\nn = int(s[0])\nl = [int(x) - 1 for x in s.split('0')]\nprint(max(l))"}, "732": {"problem_id": 732, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "733": {"problem_id": 733, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)"}, "734": {"problem_id": 734, "answer": "n, m = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = sum(x * m for x, y in zip(list(range(i), i)), [i])\nprint(sum(a))"}, "735": {"problem_id": 735, "answer": "from itertools import accumulate\nn = int(input())\narr = list(map(int, input().split()))\nseq = [0]*(n+1)\nfor i in range(len(arr)):\n\tseq[arr[-1]] = i\nreverse = seq[:]\nprint('yes' if reverse else 'no')"}, "736": {"problem_id": 736, "answer": "n,m=map(int,input().split())\nprint(n)"}, "737": {"problem_id": 737, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n a.append(a[-1]+1)\nans = a[n-2]\nprint(ans)"}, "738": {"problem_id": 738, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**8)\ndef main():\n \n n = int(input())\n l = list(map(int,input().split()))\n ans = 0\n for i in range(n-1,-1):\n\n  x,y,z = l[i],l[(i+1)%len(l)-1],(max(0,abs(x-y)**2-z,0),0)   #x, y, z = max(a,b,c,d), a, b, c, d = a + b + d, (a+b+c+d) = b - a - c - d\n print(ans)"}, "739": {"problem_id": 739, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9, 100000) * 10**18)\nfrom functools import reduce\ndef LI(): return list(map(int, input().split()))\n#from heapq import nsmallest, nlargest, heapify, heappop\nmod = 10 ** 9 + 7\nMOD = 998244353\nif mod == 1: return [-1] + [int(input()) for _ in range(mod-2)]\n"}, "740": {"problem_id": 740, "answer": "def main():\n \n a = int(input())\n b = sorted(map(int, input().split()))\n c = 0\n for i in range(b[0], b[-1] + 1):   # b is not empty, i is the i-th piece \n\n  if i >= b.index(max(a)): c += 1\n print(c)\n"}, "741": {"problem_id": 741, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = [int(input()) for _ in range(n)]\nans = []\nfor i, x in enumerate(a):\n  ans.append(x)\nprint(max(ans))"}, "742": {"problem_id": 742, "answer": "import sys\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n n=int((input().strip())**0.5)\n l=list(map(lambda x: int(x) - 1, input().split()))\n print(*l)"}, "743": {"problem_id": 743, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n  s += a[i]\nprint(s)\n"}, "744": {"problem_id": 744, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nif a[0]=='S':\n  print('YES')\nelif len(a)==1:print('NO')"}, "745": {"problem_id": 745, "answer": "n,k=list(map(int,input().split()))\ndp=[[0]*(k+1) for i in range(2*n+2)]\nfor i,j in enumerate(dp):\n\tdp[i][j]=(n-j-1)*k%k\n#print dp[n][k]\nmod=10**9+7\nm=k//2\nwhile m>=1 and n%m==0 and (n//m)*m<k:m-=(k-m)%mod\nprint(m//k)\n"}, "746": {"problem_id": 746, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(max(1000, 10**9)+100)"}, "747": {"problem_id": 747, "answer": "n, h, m = list(map(int, input().split()))\nx = min(h * h + m * m)\nans = 0\nfor i in range(n+1):\n  ans += max(0, (x + x * 2 - x) * (2 * i + i) - (h - i)*(2*i + (i-1)*2)) + h\nprint(ans)"}, "748": {"problem_id": 748, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(7)]\ngroups = []\nfor i, a in enumerate(a):\n  if a[0] % 3 == 0 and (a[1] / 3 + 1) * 2 > n and not (int(i) - i) % 7: a = [-1, 0, 1, 2, 3]\ngroup_of_three = set(range(3))\n#print(groups)\ncnt = 0\nif len(set(group)) == 3: print(-1)\n\n  cnt += groups.count(0) + a\n"}, "749": {"problem_id": 749, "answer": "s = input()\nn = len(s)\nif n == 1 or s[n - 1] == 'a':\n\tprint(2)"}, "750": {"problem_id": 750, "answer": "n,k = list(map(int,input().split()))\ns = [0 for i in range(n+1)]\np = sorted(list(enumerate(s)))\nif p[0]==0:print(0)\nelse:s.append(p[1]*(k-1)+1)"}, "751": {"problem_id": 751, "answer": "from collections import Counter\nn,m=list(map(int,input().split(' ')))\na=Counter(n).most_common(1)\nb=[]\nfor i in a.values():\n  b.append(i[1])\nprint(b.count(0))\n"}, "752": {"problem_id": 752, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tb.append(0)\nx=input()\ny=a.count('L')\nprint(b[y-1][0])"}, "753": {"problem_id": 753, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int, input().split()))\np = 0\nq = []\nfor i in range(n):\n\tp += a[i] + b[(i+1)%4]*(a[n-1]-b[0])//2\n#print(p,q,a,b,p//q)\n\n\tif q[p]%q[1]==0:q.append((p*p)//len(q)-1, 0, -1)]\nprint(\"\\n\")\n"}, "754": {"problem_id": 754, "answer": "n = int(input())\ns = list(map(str, input().split()))\nfor i in range(n-1):\n\tif s[i]=='R' and i+1==n: print(i)\n"}, "755": {"problem_id": 755, "answer": "x = int(input())\nn = 0\nfor i in range(0,x):\n\tn += 1\nprint(n)"}, "756": {"problem_id": 756, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n - 1):\n  if a[i] < b[-1] and i < n - min(b[:-1], i - 2*n) and (i+1)%2 == 0: b.append(i + 2) \nprint(0)"}, "757": {"problem_id": 757, "answer": "n,m,k = list(map(int, input().split()))\na = [int(input()) for i in range(n)]\nb = []\nfor i,(a,b) in enumerate(b):\n\tif a[i] in b:b.append(i+1)\nif n==m:print(0)\n\n"}, "758": {"problem_id": 758, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(max(len(s) - 2, 0))"}, "759": {"problem_id": 759, "answer": "#!/usr/bin/env python\nfrom sys import stdin,stdout\nimport math\nn = int(stdin.readline())\na,b,c,d,x,y,z = [int(x) for x in stdIN().strip().split()]\nprint(math.sqrt(d*n))\n"}, "760": {"problem_id": 760, "answer": "s = input()\nn = len(s)\nif s[-1] == 'a':\n\tn -= 1\nprint(n)"}, "761": {"problem_id": 761, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n-1):\n  s.append(a[i] - a[(i+1)%n])\nprint(max(s))"}, "762": {"problem_id": 762, "answer": "from math import *\nn=int(input())\na=list(map(int,input().split()))\ndp=[[0]*(n+1) for i in range(a.count('1'))]\nfor i,j in zip(range(1,a[0])):\n  dp[i][j]=1 if i%2==0 else 2*dp[-1][i-2] if j-i>1 else 1\nans=max(dp)\nprint(ans)"}, "763": {"problem_id": 763, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\ta[i] += a[n - 1 - i]\nprint(ans)"}, "764": {"problem_id": 764, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n+1)\nfor i in range(1, n+2):\n\tb[i] = b[(n-i)//2] + i\nprint(max(b))"}, "765": {"problem_id": 765, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom collections import deque\ninput = lambda: sys.stdin.readline().rstrip()\ndef I(): return int(input())\nI()"}, "766": {"problem_id": 766, "answer": "s = input()\nn = len(s)\ncnt = 0\nfor i in range(n):\n\tif s[i] == 'a': cnt += 1\nprint(\"Yes\")\n"}, "767": {"problem_id": 767, "answer": "import sys\ninput = sys.stdin.readline\nn, z = list(map(int, input().split()))\na = []\nfor i in range(n):\n\tx = int(input())\n  \ta.append(x)\nans = 0\ndp = [-1]*n\nwhile dp[a[-1]]!= -1 and a[n-2-i]!= 0 and i >= n-3 and len(a)>0 and (i+1)%2 == 1 and ans < a.pow(10, 9) and not (ans < 10**9) :\n# print(dp[i])\nprint(ans)"}, "768": {"problem_id": 768, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n\tl.append(list(map(int,input().split())))\nprint(sum(l))"}, "769": {"problem_id": 769, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**5) + 1000)"}, "770": {"problem_id": 770, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*(n+1)\nfor i in range(1, n+2):\n  if A[i-1] == 0 and B[(i+n)%2]==0: B.pop()\nprint(B[n])\n"}, "771": {"problem_id": 771, "answer": "n,k,m=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(k):\n\ta[i]+=int(input())\nans=[]\nif m%2==0 and a[k-1]%m!=0:  ans.append((m,i) for i,j in enumerate(a) if j%i==1 and (j-i)*(m-j)>=i):  print(\"No\")\nelse: ans=ans.copy()\nprint(\"Yes\")"}, "772": {"problem_id": 772, "answer": "n=int(input())\nfor i in range(n):\n\tc=list(map(int,input().strip().split(' ')[:2*n-1::i])+'0'*(len(str(c)-1)%2==0))\nprint('')\n"}, "773": {"problem_id": 773, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, q = list(map(int, input().split()))\narr = [0] * (n + 1)\nfor _ in range(n - 1):\n  l, r, v = map(lambda x: (int(x) if x > 1 else (x - l), arr[r], v), [1 if l <= x <= r <= n else 0 for x in input()] + [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 214, 216, 218, 224, 225, 226, 229, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 247, 249, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 322, 323, 326, 327, 328, 329, 332, 334, 335, 337, 338, 339, 341, 347, 349, 353, 356, 359, 407, 408, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, BLUE, BOTH, NINE, SEVEN, EIGHT, SIX,EIGHT\n\n"}, "774": {"problem_id": 774, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(1e5) + 1000000007)"}, "775": {"problem_id": 775, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\nmod = 10**9+7\nn,m,k = list(map(int,input().split()))\nl = []\nfor i in range(n):\n\tx = l[i]\n\n\tif x == 1: l.append(x-1) + [x,x+k+1]\nif mod == 9: print(sum(l))"}, "776": {"problem_id": 776, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\nmod = 10**9+7\nm = int(input())\nfor _ in range(m):\n\ta,b,c = list(map(int,input().strip().split('/')[1]))\n  \tif (a+b)%mod == 0 and (c+((b-a)//mod)&1)!= 0: return 0\n"}, "777": {"problem_id": 777, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\narr = list(map(int,input().split()))\nprint(n-len(arr))"}, "778": {"problem_id": 778, "answer": "import sys\ninput = sys.stdin.readline\nn,k = list(map(int, input().split()))\nm = [[] for _ in range(n+1)]\nfor i,j in enumerate(m):\n  m[i].append(j)\na,b,c,d,e,f = [i for i in m if i!=j],[],[]\nc.append(\"x\"*(2*k-1) + \"sign\" if k>0 else \"=\" for k in [(0,0),(0,-k)] )\nans = [\"+-\", \"-\" if (c[0][0]==\"x\") else \"+-\"]\nprint(len(ans)))\n"}, "779": {"problem_id": 779, "answer": "from sys import stdin\nimport heapq\ninput=stdin.readline\nn=int(input())\na=[]\nfor i in range(n):\n\ta.append(list(map(int,input().split())))\nprint(sum(a))"}, "780": {"problem_id": 780, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: list(map(int, input().split()))\nn = int(input())\ns = input()\ncnt = [0] * (n + 1)\nfor i in range(n):\n   cnt[s[i]] = i\nres = []\nwhile s!= '0' and len(res) < n: res.insert(0, s[:len(s) - 1])\nif res[0][1] == 0: break\nprint('1')\n"}, "781": {"problem_id": 781, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom heapq import heappush,heappop\nINF = float('inf')\nMOD = 10**9 + 7\nI = lambda: map(int, input().split())\ndef I(): return int(input()) if I() else None\ns = input()\nn = [I() for i in range(8)]\ndp = [[0] * (8*n+1) for _ in [1,8] + [0,0]]\nans = []\nfor i,j in enumerate(s[1:],1):\n   ans.append((dp[i][j-1] - 1, j))\nprint('YES' if ans else 'NO')"}, "782": {"problem_id": 782, "answer": "m = int(input())\ns = set()\nfor i in range(m):\n\ts.add(list(map(int, input().split())))\nprint(len(s))"}, "783": {"problem_id": 783, "answer": "n = int(input())\nh = list(map(int, input().split()))\nr = []\nfor i in range(n):\n\tr.append(h[i-1] + 1)\nprint(' '.join(r))"}, "784": {"problem_id": 784, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000)\nfrom collections import defaultdict as dd, deque\ndef dfs(n):\n\tif n == 0: return 1\n   else:\treturn 0\nfor i in range(int(input())):\tprint(dfs(i))\n"}, "785": {"problem_id": 785, "answer": "n,a,b = list(map(int,input().split()))\nl = []\nfor i in range(b+1):\n  l.append(a*i)\ns = int(input())\nprint(s)"}, "786": {"problem_id": 786, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "787": {"problem_id": 787, "answer": "k = int(input())\ns = input()\nprint('NO' if k % 4 else 'YES')\n"}, "788": {"problem_id": 788, "answer": "s = input()\nn = len(s)\nx = 0\nfor i in range(0,n):\n\tif s[i] == \"A\": x += 1\nprint(x)"}, "789": {"problem_id": 789, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[0])"}, "790": {"problem_id": 790, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nd = [0]*n\nfor i in range(n):\n\td[a[i]-1] = i\nans = 0\nwhile d[n]!= 0 and n-1<=d.index(max(d)) and a[d-2]==0 and ans > max(a) + 1 : d.pop()\nprint(ans)\n"}, "791": {"problem_id": 791, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(max(s))"}, "792": {"problem_id": 792, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nd = [0]*(n+1)\nfor i in range(0, n):\n\td[a[i]] += 1\nif len(set(d)) == 0: print(-1); return\nans = min(ans, max(a)+min(b) for b in d[1:])\n"}, "793": {"problem_id": 793, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, deque\nn, m = list(map(int, input().split()))\ndp = dd(list(range(n)))\nmod = 10 ** 9 + 7\nfor i in range(m):\n  dp[i] = [int(j) for j in dq.bisect_left(dp, [0]*(i+1))]\nans = 0\nif n % 2 == 0 and (dp[0][1] or 0) % 4!= 0:  # \u6bd4\u8f83\uff0c\u53ef\u4ee5\u81ea\u5df1\u6bcf\u6b21\u8981\u7d20\u7684\u90e8\u5206\u90fd\u4f1a\u8df3\u8fc7\n\tans += pow(2, (m-2)%mod, MOD)\nprint(ans % mod)"}, "794": {"problem_id": 794, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(len(a))\n"}, "795": {"problem_id": 795, "answer": "from math import sqrt\nn = int(input())\nr = []\nfor i in range(3, n+1, 2):\n  r.append(int(sqrt(i)))\nprint(len(r))"}, "796": {"problem_id": 796, "answer": "n, k = list(map(int, input().split()))\nk = int(k)\nans = 0\nfor i in range(n-k+1):\n\tans += ((i*i)**2 + ((k-i)*(i-1)))\nprint(ans%(10**9+7))"}, "797": {"problem_id": 797, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m,a,b=list(map(int,input().split()))\nmatrix=[[0]*m for i in range(n)]\nfor i,j in enumerate(range(1,n)):\n\tx,y,z=j,i-1+j*(j+1-i),i+2*j-j\n#print matrix[x][y][z]\nprint(sum([sum(row) for row in matrix])%a)\n"}, "798": {"problem_id": 798, "answer": "a,b,c = list(map(int, input().split()))\nprint(a+b+c-1)\n"}, "799": {"problem_id": 799, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n   ans += a[i] * i\nprint(ans)\n"}, "800": {"problem_id": 800, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = (int(x) - x) * (i + 1)\nprint(sum(a))"}, "801": {"problem_id": 801, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\tif(a[i]=='1' and a[(i+1)%n-1]!='1') or (i>0 and i<n and len(ans)==1): ans+=1\nprint('\\n'.join([str(x) for x in ans]))"}, "802": {"problem_id": 802, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a[i] = input()\nans = float('inf')\nvisited = set(a)\nif visited: ans = min(ans, visited.difference() + 1)"}, "803": {"problem_id": 803, "answer": "n=int(input())\na=[]\nfor i in range(n+1):\n\ta.append(list(map(int,input().split())))\nprint(min(a))\n"}, "804": {"problem_id": 804, "answer": "s = input()\nn = len(s)\nk = 1\nfor i in range(n):\n\tif s[i] == 'a' and k == 1: print(i + 1, end = \" \" * (n - i - 1) + \"\")\nprint(k)"}, "805": {"problem_id": 805, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "806": {"problem_id": 806, "answer": "n, l, r = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(10**9+7)\nans = 0\ni = 1\nwhile i <= n-1 and a[i]!= 0:\n\n\tj = i+i-i+l-r-j\n#print(a, i, j, n, len(ans) - 1, ans[0])\nif i == n: ans += (ans - (10 ** 9) * (l - r)) % (1e9)\n\n"}, "807": {"problem_id": 807, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nn, c = list(map(int, input().split()))\nx = [int(i) for i in input()]\ny = []\nd = n+1\np = [(x[0], x[1]) for x in range(n+2)]\ndp = [[-1] * n + d for _ in [x] + [0]*n\nfor i,(x,y) in enumerate(zip(range(0,n)), start=1) if y[i] < 0 else []]\nprint(sum(p))\n\n"}, "808": {"problem_id": 808, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = [int(x) for x in input().split()]\nprint(1 + a[0])"}, "809": {"problem_id": 809, "answer": "n,k,a,b = list(map(int,input().split()))\ns = [0]*(n+1)\nfor i in range(k):\n\ts[i] = s[n-i-1] + 1\nprint(' '.join(s)) \n"}, "810": {"problem_id": 810, "answer": "import math\na,b,n=list(map(int,input().strip().split(' ')))\np=math.pow(10,9+7)\nprint(p*int(a))\n"}, "811": {"problem_id": 811, "answer": "a, b = list(map(int, input().split()))\nprint(a + b)\n"}, "812": {"problem_id": 812, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = sorted(list(a.count(i))[:-1])\nprint(-1)\n"}, "813": {"problem_id": 813, "answer": "import sys\nfrom bisect import *\ninput=sys.stdin.readline\nn=int(input())\na,b=list(map(int,input().split()))\nans=[]\nfor i in range(1,n+1):\n\tans.append(a+b)\nprint(*ans,sep=\"\\n\")\n"}, "814": {"problem_id": 814, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "815": {"problem_id": 815, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\narr = [int(x) for x in input().split()]\nans = [-1]*n\nfor i in range(n):\n\tans[i] = max(arr[(i+1)%n] + 1, ans[2*i])\nprint(*ans)"}, "816": {"problem_id": 816, "answer": "n, x = input().split()\na = [0] * (n+1)\nfor i in range(n):\n\ta[i] = int(x ^ (i >> 1))\nprint(len(a))"}, "817": {"problem_id": 817, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nMOD = 10 ** 9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nD = {'a':0, 'b':1}\nli = [LI() for _ in range(D[2] + D[3])]\nans = []\nfor i, x in enumerate(li):\n  if x not in D: ans.append((li[i] - x) % MOD)\n\n return ans\n"}, "818": {"problem_id": 818, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(1,n+1):\n\tif a[i]!=a[n-i-2]:\n \t\tprint(-1)\n"}, "819": {"problem_id": 819, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n+1)\nfor i, x in enumerate(a):\n\ta[i] = x + ((n-i) * ((i-1)*k) + (k - i)) ** 0.5;\nans = 0\ni, j = k\nwhile i - j >= 0 and j < n: j += 1; ans += (j - k) ** 2 + j ** 3\nprint(ans);\n"}, "820": {"problem_id": 820, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(2)\n"}, "821": {"problem_id": 821, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nn = int(input())\ns = list(map(int, input().split()))\nt = 0\nfor i in range(n):\n\ts[i] = s[t - 1] + 1 + t\nprint('Second')\n"}, "822": {"problem_id": 822, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x for i, x in enumerate(input()) if x<MOD-1]\nfrom fractions import Fraction\nN, M, K = LI()\nA = []\nfor n in range(N): A.append(Fraction(LI() + (n**0.5)));\nB = [0]*(M + 1) + A[0];\nprint(sum(B))"}, "823": {"problem_id": 823, "answer": "def main():\n x,y=list(map(int,input().split()))\n for i in range(len(x)):\n  a,b=x-i,x+i\n print(0)\n"}, "824": {"problem_id": 824, "answer": "from collections import defaultdict\ninput = lambda: map(int, input().split())\nn = int(input()) + 1"}, "825": {"problem_id": 825, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n+1):\n  ans += a[i]\nprint(ans)"}, "826": {"problem_id": 826, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\nmod = 10**9 + 7\nfrom heapq import heappop,heappush\ninp = lambda: inp()\nN = int(input())\nheap = [[] for _ in range(N)]\nfor i,s in enumerate(sints[:-1]):\n\tif s == '1': heap[-1].append(i)\n\n\tx,y = divmod(2*i, 2*pow(3,N-2) + pow(5,3) - 2) if i % 2 == 0 else 2 * i // 2 + (i-N) % mod else i - N\nans = 0\nif mod == 1: ans += 1\nprint(ans)"}, "827": {"problem_id": 827, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n a[i] = a.count(i)\nprint(len(a))"}, "828": {"problem_id": 828, "answer": "n, s = list(map(int, input().split()))\na = [1] * (n + 1)\nfor i in range(n):\n\ta[i] = a[n - i] + i\nprint(min(a))"}, "829": {"problem_id": 829, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom heapq import heappush,heappop\nread = lambda:list(map(int,input().split()))\nn = int(input())\ns = input().strip()\nx = [0] * n\nfor i in range(n-1):\n\tx[i+1] = 1\nans = []\n# print(s,x,s[:-1])\ndp = [[0 for _ in x] for x in s]\ndef dfs(i,j,dp,curr_idx=None):pass\nif i!=j:return False\nwhile i<=len(x)-1 and j>=0 and x[j+i]==1:i+=1;j-=1# dp[0][i]=dp[1][j]# for j in j-i:ans.append('{}'.format(j)+' '.join(str(v) for v in ans))#print(ans)"}, "830": {"problem_id": 830, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = [int(input()) for _ in range(n)]\na = [-1] * (n + 1)\nfor i in reversed(list(range(1, n + 5)):: [a[i], i]):\n  if i % 2 == 0: s[0] = i // 2 + a[2 * i - 1] + i\nans = 0\nif n > 1: ans = (ans + n) % k\nprint(ans)"}, "831": {"problem_id": 831, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n\ts[i] = ''.join(s.split(' ')[1:] for j in s) + '\\n'\nprint(min(ans))"}, "832": {"problem_id": 832, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(1, n+1):\n\tb.append(a[i-1]*100)\nc = [b[0] for b in b]\nd = {}\ne = 0\ni = 1\nwhile i<=n and d.get(e, None)==None:\n\n\tif d[e] is not None and e>=d[d] or e<0 or c[c]!=None and (c[:e])>e or (e<d and c.count(c)<1e):\n\n \t\tbreak\nif e==d: e = d\nelse: d = e"}, "833": {"problem_id": 833, "answer": "n,v = list(map(int,input().split()))\na = [int(x) for x in input().strip()]\nb = [-1] * v\nfor i in range(n-1,0,-1):\n\ta[i] = min(b[-i-2] + a[0] for j in b)\nprint(max(a))"}, "834": {"problem_id": 834, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nB = [A[i] for i in range(N)]\nC = []\nfor i, a in enumerate(A):\n  C.append(a)\nif A[-1] == 1 and B[0] in A or A.index(max(B) + 1) in B or B.count(min(C)) in C or (B[:N] and C[N-2] or C) and (C[:-1][1]) in (A, B, A) :\nprint('\\n'.join(str(c) for c in c))"}, "835": {"problem_id": 835, "answer": "import itertools\nn = list(map(int, input().split(' ')))\np, r, s, c = [int(x) - 1 for x in input()]\na = []\nfor i in range(len(p)):\n\ta.append(str(i) + p[i])\nprint('\\n'.join(a))\n"}, "836": {"problem_id": 836, "answer": "n, t = list(map(int, input().split(' ')))\nhouses = []\nfor i in range(1, n+1):\n if i == 'H':\n  if houses[i-1] in 'S' : houses = [i]\n elif i== '.': houses  = houses + [0]*(n-i)\n else:  houses += [houses[-2]]\nt = int(input())\nprint(sum(houses) - t)"}, "837": {"problem_id": 837, "answer": "n,x,y = list(map(int,input().split(' ')))\na = []\nfor i in range(2,int(n**0.5)+1):\n\tif n%i==0: a.append(i+1)\nprint(a[-1])"}, "838": {"problem_id": 838, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(int(input()))"}, "839": {"problem_id": 839, "answer": "n = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n\ts.insert(0, i)\nprint(max(s))"}, "840": {"problem_id": 840, "answer": "n, k = list(map(int, input().split()))\ns = set()\nfor i in range(n):\n  s.add(str(i) + \" \" + str(k - 1) * 2)\nprint(max(s))"}, "841": {"problem_id": 841, "answer": "t=int(input())\nfor i in range(t):\n\tn = int(raw_input(''))\n\n\ts = list(map(int, input().split(' ')))[:n] + [''.join(s) for s in input()]"}, "842": {"problem_id": 842, "answer": "n = int(input())\nfor i in range(n+1):\n\ts = str(bin(i).replace('12321','1')).split()\nprint(s[::-1])"}, "843": {"problem_id": 843, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('in' if a[0] == '1' else 'Infinite')"}, "844": {"problem_id": 844, "answer": "n = int(input())\ns = list(map(int, input().split()))\nres = []\nfor i in range(n):\n\tif s[i] == '1' and len(s) > 1: res.append(i+1)\nprint('\\n'.join(res))"}, "845": {"problem_id": 845, "answer": "def main():\n\tn = input().rstrip().split()\n\n\tx = int(n[0]) - 1 # x = 0, y = 1, z = 2, 6 # n[i] = (i+1) for i in range(0, 10**5 + 7) # (x,y,z) = 4, 8, 16, 24, 32, 64, 128, 256, 512, 1024, 65535,72625,253500,344920,569000,633700,876500\n# print(ord(x)-97)\n \nmain()\n"}, "846": {"problem_id": 846, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nn,m = map(int,input().split())\na = list(map(lambda x: int(x) if x > 1 else 0))\nb = dict()\nfor i in range(n):\n\tb[a[i]].append(i)\nans = [0]*n\nflag = False\nd = 0\nwhile d < len(b) and b[d] == 0:d+=1\nif flag:ans[-1] = d\nprint(*ans)"}, "847": {"problem_id": 847, "answer": "n, x = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] += x\nprint(max(a))"}, "848": {"problem_id": 848, "answer": "n,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n a.append((i*(i-1))//2)\n#print(a,a[1])\nm=int(input())\nif a[0]==1:print('k',k) \nelse:#k==2\nprint(-1)"}, "849": {"problem_id": 849, "answer": "from math import *\ndef f(x,y):\n  return x/y**2 if x>0 else 0\nn=eval(input());print(f(n,n))"}, "850": {"problem_id": 850, "answer": "k = int(input())\nn = list(map(int, input().split()))\nfor i in range(n[0]):\n\tx = (k - 1) * i + n[i + 1]\nprint(x)\n"}, "851": {"problem_id": 851, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n\td[int(input())] = [i]\n#print(d)\nmax_break_time = 0\ncur_max = d.get(0, 0) - d[0][0] + 1\nans = cur_.get(-1, -1) \nif ans < 0: ans = min(ans, n - k + 2)\n\n\t# print(cur, ans, end = \" \" if end else end.replace(\" \",\" \") + \"(\" + end)\")\nelse: \t\tcur = (cur + k) * (k + n) // 2 + (n % 2 == 0 and n % 3 == 1) % (2 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20 * 21 * 23 * 24 * 25 * 26 * 27 * 28 * 29 * 30 * 31 * 32 * 33 * 34 * 35 * 36 * 37 * 38 * 39 * 40 * 41 * 42 * 43 * 44 * 45 * 46 * 47 * 48 * 49 * 50 * 51 * 52 * 53 * 54 * 55 * 56 * 57 * 58 * 59 * 61 * 62 * 63 * 64 * 65 * 66 * 67 * 68 * 69 * 72 * 73 * 74 * 75 * 76 * 81 * 82 * 83 * 84 * 85 * 86 * 87 * 88 * 89 * 90 * a b c d)"}, "852": {"problem_id": 852, "answer": ""}, "853": {"problem_id": 853, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(len(a)):\n  if a[i]%5!=0:print(-1)\n"}, "854": {"problem_id": 854, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict\nMOD = int(1e9+7) + 7\nn, t = list(map(int, input().split()))\nans = [0] * n\nfor i in range(n): ans[i] += 1\ndef dfs(x):\n\t# print(\"dfs(%d): %d\" % (i, x) if x % MOD > 0 else 0)\n\n\tif x == 0: return 0\n#\t\tprint(ans[-1] + 1)  # print(i - x - 1, i) for i x in ans  "}, "855": {"problem_id": 855, "answer": "from collections import defaultdict as dd\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef LI(): return list(map(int, input().split()))\ndic = LI()\nli = [li[0]]\nfor _ in range(len(li)):\n\tli.sort(key=lambda x: x[1])\nprint(*li, sep='\\n')\n"}, "856": {"problem_id": 856, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, k = map(int, input().split())\na = list(map(lambda x: int(x)-1 if x%2 else 0 for x in a) for _ in range(n))\n#print(a)\nfor i in reversed(list(range(1, n+1)))[::-1]:\n  a[i] *= -k\n"}, "857": {"problem_id": 857, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, deque\nn = int(input())\nm = list(map(int, input().split()))\na = dd(list)\nans = [0 for _ in range(n)]\nfor i, v in enumerate(a):\n  ans[v-1] += 1\nprint(*ans, sep='\\n')\n"}, "858": {"problem_id": 858, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(i+1)\nprint(a[-1])"}, "859": {"problem_id": 859, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*10**5)\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nans = [0]*(n+n-1) + [a[0]]\nfor i in range(0, n):\n  ans[i] += 1\nprint(sum(ans))"}, "860": {"problem_id": 860, "answer": ""}, "861": {"problem_id": 861, "answer": "import math\nfrom decimal import Decimal\ninput = lambda: list(map(int, input().split()))\nn = int(input())\nr = []\nfor i in range(n):\n  r.append(Decimal(math.pow(10, i)))\nprint(*r)"}, "862": {"problem_id": 862, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\ns = []\nfor i in range(n-1):\n\ts.append(a[i+1])\n#print(s)\nt = s.copy()\nif len(t) == 1: print(int((t[0] - t[1])))\nelse: t.sort()"}, "863": {"problem_id": 863, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\nINF = 10**9+7\nmod = 998244353\ndd = [(-1,0),(0,1)]\nfor _ in range(int(input())):\n\ta,b,c = input().split(' ')\n\n\tif (a-1)%mod==0 and (b - 1) % mod == 0 and ((c-a)//mod)*(a+b-c) == (c+a*(b + c) - a*b) : c = a + b - c + 1; a = c; b = 0; d[c] = 1\nprint(sum(d[0])-2)"}, "864": {"problem_id": 864, "answer": "n,m=map(int,input().split())\na=[int(i) for i in input().strip()]\nx=a.count(b)\nprint(max(x) + 1)"}, "865": {"problem_id": 865, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom heapq import heappush,heappop\ndef II(): return int(input().rstrip() or '\\n')\nMOD = 10**9+7\nn, t = II()\na = [0]*n\nfor i in range(n):\n\ta[i] = a[n-i-1] + 1\nans = []\ntmp = 0\nwhile tmp < n-t: ans.append((tmp, i))\nprint(ans)"}, "866": {"problem_id": 866, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(max(10**6, 10**9))\nfrom functools import reduce\ndef LI(): return list(map(int, open(open('input.txt'))).split()[:-1])\n\n  def __starting_point():\n  \t# your code goes here\n\tn = len(input())\n\n\tif n: return reduce(lambda x, y: x*y, input().split(), dict())\n#\t\tprint(n)\n"}, "867": {"problem_id": 867, "answer": "n=int(input())\narr=list(map(int,input().split()))\nfor i in range(1,n+1):\n\tarr.append(arr[i-1]*i)\nprint(n)"}, "868": {"problem_id": 868, "answer": "n = int(input())\nfor i in range(n):\n s = ''.join(map(str, input()))\n print(int(s[::-1]))"}, "869": {"problem_id": 869, "answer": "a,b=list(map(int,input().split()))\nc=0\nfor i in range(len(a)):\n if b==a[i]:\n  c+=1\nprint(c)\n"}, "870": {"problem_id": 870, "answer": "#!/usr/bin/env python3\nfrom fractions import Fraction\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(i) for i in input().rstrip('\\n').split(' ')]\nd,l,v=LI()\nans=0\nfor _ in range(eval(input()))[1]:\n x,y,z=list(map(int,input().split(\" '\")))\n if(x==y):\n  ans+=(v*(z-1))//2\n elif(y==z and z<=x and x>y and y>z) and (z==x or x<y or y<x) : ans+=1\n else: ans=max(ans,x-y+1)+(1-z)*(2*y-x*z+z*2)%MOD\n return ans\n"}, "871": {"problem_id": 871, "answer": "n,s,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n\tl.append((int(input())-l[i][0])+1)\nprint(len(l))\n\n"}, "872": {"problem_id": 872, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n ans.append(a[i]*(i-1)//2)\nprint(*ans)"}, "873": {"problem_id": 873, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[0]*n\nfor i in range(n-1):\n\tb[a[i]]=i\nans=''\nflag=0\nwhile(len(a)>0 and a[-2]=='1':flag+1) : a.append('1')\nprint(ans)"}, "874": {"problem_id": 874, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [i for i, x in enumerate(a) if x % n == 0]\nfor i in range(n):\n  p.append(i)\nprint('\\n'.join(p))"}, "875": {"problem_id": 875, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque\nn = int(input())\npoints = [int(x) for x in input().split()]\nfor i in range(0,n):\n   points[i] = list(map(int,input().replace(\"*\", \"\")[1:]))\nans = [-1]*n\nprint(ans[0])"}, "876": {"problem_id": 876, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nans = []\nfor i, ai in enumerate(a):\n  ans.append(ai - k)\nprint(min(ans))\n\n"}, "877": {"problem_id": 877, "answer": "#! /usr/bin/env python3\nfrom collections import defaultdict, deque\nimport heapq\nn, m = map(int, input().split())\npairs = [i for i, x in enumerate(input().strip()) if x == n]\ns = sorted(list(map(tuple, pairs)))\nans = 0\nfor i in range(1, n + 1):\n  if i % 2 == 0 and pairs[i - 1] not in s: ans += abs(s[2 * i] - s[0])\nprint(ans)"}, "878": {"problem_id": 878, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = [0] * 100\nfor i in range(n - 1):\n\tif cnt[i] == 0 and i % 2 == 1 and a.count(i / 2) == a[a.pop()] and (i // 2, i) not in c.keys():\n \t\tc.append(0)\nans = 0\nflag = False\nwhile flag or not flag and len(a)!= n or flag[-1]!= 0 or (flag or -1) * (a[flag[0]]) > 1 or ans < 10**9: flag = True\nif flag: ans += 1\nprint(ans)"}, "879": {"problem_id": 879, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nn=int(input())\np=list(map(int,input().split()))\nf=defaultdict(list)\nfor i in range(n):\n  p.append(f[i])\npath=[p[0] for p in list(p.items())]\nm=float('inf')\nl=[]\nwhile(len(path)>0 and len(m)<n and path[-l[1]]!=m):path.pop()\nd={}\ndef dfs(node,u,v,c):#u and v can't be connected to u if u-v is greater than c\nif(u>=v):return\ndfs(1,0,[u,-1])[v]"}, "880": {"problem_id": 880, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=sum(a)\nprint(s)"}, "881": {"problem_id": 881, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "882": {"problem_id": 882, "answer": "#!/usr/bin/env python\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\ndef solve():\n s = input().strip()\n ans = 0\n for i in range(len(s)):\n  if s[i] == '?' and len(list(map(str, s.split()))) > 1: ans += 1\n print(ans)\n"}, "883": {"problem_id": 883, "answer": "n = int(input())\nfor i in range(n):\n\tprint(1)"}, "884": {"problem_id": 884, "answer": "from math import *\na,b,c = map(int,input().split())\nprint(a + b + c)"}, "885": {"problem_id": 885, "answer": "import sys\nsys.setrecursionlimit(1000000)\nn = int(input())\ngraph = [set() for _ in range(n)]\nfor x in sys.stdin.readline().split():\n\tgraph[x] = set(map(int, x))\nprint(sum(graph))"}, "886": {"problem_id": 886, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[0])"}, "887": {"problem_id": 887, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nprint('YES' if a[0] == 1 else 'NO')"}, "888": {"problem_id": 888, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n   ans.append(a[i])\nprint(min(ans))"}, "889": {"problem_id": 889, "answer": "import sys\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))"}, "890": {"problem_id": 890, "answer": "n,l,r,x = list(map(int, input().split()))\ns = [None] * (n+1)\nfor i in range(n):\n\ts[i] = sorted(str(i), key=lambda x: x[1])\nprint(len(s))"}, "891": {"problem_id": 891, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = input()\ncnt = 0\nfor i in range(k):\n\tif s[i] == 'B' and cnt < k-1 and (i+1) == (n-2) and i < n-3:\n\n\t\tprint('W', i, end=' ')\n \telse:   print('B',i,end='W')\n"}, "892": {"problem_id": 892, "answer": "n,m = map(int,input().split())\na = [int(i) for i in input().strip()]\nif m in [0,1]:\n print(a[0])\nelif a[m-1] in [-1,-1]+[1,0] +[2,-2]*(m<=n):\n  print(-1)"}, "893": {"problem_id": 893, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, m = list(map(int, input().split()))\nedges = [[] for i in range(n)]\nfor i, j in enumerate(list(itertools.groupby(range(0, n)), key=lambda x: -x[1])) : edges[i].append((j[0], -1))[:n] = []\ndef find(x):\n\tif x == None or x[-1][0] == 0 : return -2 * m + 2 * (m+1) - 2*(m-2) + 1; return x\nans = 0\nvisited = [False] * n; visited[x].add(i)\nwhile True : \n  \tx, y = heapq.heappop(p) ; x = x.append(find(y)) ; y.remove() ; ans += 1\nprint(ans % m)"}, "894": {"problem_id": 894, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nINF = float(\"-inf\")\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**5)\ndef LI(): return list(map(int,input().split()))\nd = {x:i for i,x in enumerate(input()) if x>=0}\nn = len(d.keys())\nx = [-1]*n\nfor i in range(n-1):\n  x[d[i][0] - 1] = i\nans = [x[0]]\ni = 1\nwhile i*2<=n and ans[-2]==ans[1]: i+=1\nprint(*ans)"}, "895": {"problem_id": 895, "answer": "n = int(input())\nt = [int(x) for x in input().split()]\nans = 0\nfor i in range(t):\n\tans += (t[i] - t[0])\nprint(ans)"}, "896": {"problem_id": 896, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip('\\n')])\nb=[0]*n\nc=0\nd={}\ne=1\nwhile(m!=len(a) and a[m-1][1]<b[0][0]:m--)e+=1;break;\nprint('YES' if e==1 else 'NO')\n"}, "897": {"problem_id": 897, "answer": "import math\nn, m = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in reversed(list(range(n)), key=lambda x: x[1]):\n\ta[i] = math.ceil(math.log(i / m, 2)) * i\nprint('\\n'.join(a))\n\n"}, "898": {"problem_id": 898, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nsys.setrecursionlimit(10**7)\n# import numpy as np\nn, m = map(int, input().split())\na = np.array(sorted(list(input()), key=lambda x: x[0])))\nprint(max(a))"}, "899": {"problem_id": 899, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, m = list(map(int, input().split()))\ngraph = [[] for _ in range(n)]\nfor i, (x, y) in enumerate(itertools.chain.from_iter(graph[:-1] + [0]*m)):\n  graph[i].append(i+1)\nm = m if m > n else n\nvisited = set()\ndef dfs(node, x, cnt, visited, parent, dp, curr_cnt_visit):\n\n  if node in visited or x == parent[node] or y == child_y: return 0\n#  visited.add(x) # visited[x] means we can visit all the nodes from x to y, no need to check if x is also parent of y. We can only visit one node at a time, so it's not necessary to traverse every node every step. Instead, we should just take the smallest node and traverse it, if it exists. If there are multiple such nodes, they all visit the same route, but if all of them are smaller, then we know that we have visited all their parent nodes. It's a bit more complicated than it needs to be, because we don't know the total distance from each node to each child (each child may travel more distance than another child). We write a function that takes a parent as input, and return the sum of all distances from that parent to all its descendants. For example, suppose we want to visit only the descendants of node 0, node 1 and node 4, since that's the minimum distance. Then we would like to reach node 7, as well as node 5, which is smaller. So we write the function below, that will take a child as parent and add the children of that child to the overall sum. Note that it may not work for all combinations of parent's children, for example: node 2 can be visited only by node 3 (node 3's parent), so the result will be zero. -1,0,1.0. The answer for this example would be 0.05. Also note that the answer here is for the 0th node, not the 1st node: if we look at the parented sum from 0 to 1 (and consider the whole sum as 0 1), we will get 1/0 = 1 / 0 = 0 (because the subtraction operation doesn't change the sign of x), but we could have different values for x and y for any given node. As a solution to this problem is case sensitive, please refer to your program's explanation.\"\ndp = [float('inf')] * m\ndfs(child[0], child[1:]) if not visited else 0\n\n"}, "900": {"problem_id": 900, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "901": {"problem_id": 901, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nn,m = list(map(int,input().split()))\narr = [[int(i) for i in input().rstrip()] for _ in range(n)]\nfor i,(a,b,c) in enumerate(zip(arr,arr[1:]))[::-1]:\n\tif a+b+c>m and (a-b-a)>=0 and arr[a][0]<=a+2*m:arr.append([])\nprint('NO')\n"}, "902": {"problem_id": 902, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(input()))\nMOD = 10**9 + 7\nINF = float(\"inf\")\ndef LI(): return list(map(float, input().split()[1:])); inp = open(0).readlines(); return [list(inp.split()) for i in range(len(LI))]; defs = LI() [0] + [LI[0]] * INF; INF = int(math.sqrt(2 * (i - 1)) + INF); ans = 0; n, m = len(ans), n + 1; k, ans_k = 1, 0, INF\nfrom collections import defaultdict(list)\nfor i, (a, b) in enumerate(reversed(a)):\n  if a[-1] < b: ans += 1 << (ord(b) - ord('a')) - k; a.pop(); b = -1\nprint((ans - n // 2) * ans - (n % 2 == 0))\n\n"}, "903": {"problem_id": 903, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 2)\nfor i in range(n // 2):\n  a[i] = max(a[-i], k - i - 1) + k\nz = sorted(list(enumerate(input()), key=lambda x: x[0], reverse=True)))\nprint(z[n])\n"}, "904": {"problem_id": 904, "answer": "n = int(input())\ns = ''\nfor i in range(n):\n  s += input()\nprint(s)"}, "905": {"problem_id": 905, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,s = list(map(int,input().split()))\ncnt = [0]*(n+1)\nfor i in range(1,n):\n\tx,y = map( int, input().rstrip() )\n\n\tif x == 0: cnt[y] += 1\nif n>=2: print(0)\n\n"}, "906": {"problem_id": 906, "answer": "n,m,k=list(map(int,input().split()))\ns=0\nfor i in range(1,n+1):\n\ts+=k*i\nprint(s%1000000007)\n"}, "907": {"problem_id": 907, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000000)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().split()]\nDICT = {'a': 0, 'b': 1}\nN = int(input())\nfor _ in range(N):\n\ta = list(map(int, input()))\n\n\tif a[0] in DICT: return 'YES\\n'.join('a'*(len(a)-1-a[1]) for a in a) or 'NO'"}, "908": {"problem_id": 908, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = sorted(a.copy(), key=lambda x: x[1], reverse=True)\nprint(min(abs(max(x) - a[0] for x in a)))"}, "909": {"problem_id": 909, "answer": "a,b,c = list(map(int,input().split()))\nans = a + b + c\nprint(ans)\n"}, "910": {"problem_id": 910, "answer": "n,a,b = list(map(int,input().split()))\ns = [0]*n\nfor i in range(n):\n\ts[i] = int(input())\n#print(s)\ndp = [[0 for _ in xrange(a+1)] for x in s]\nans = []\nif n % 2!= 0: ans.append(sum(dp[0][:2]) + dp[-2][1:])\nprint(*ans)"}, "911": {"problem_id": 911, "answer": ""}, "912": {"problem_id": 912, "answer": "t = int(input())\nfor _ in range(t):\n n, s, k = list(map(int, input().split()))\n d = [0] * (n + 1)\n for i in sorted(list(enumerate(s), key=lambda x: x[1])) :\n  d[i] = 1 + min(abs(i - s), abs(k - 1 - i) + (1 if i > s else 0)) + k\n print(max(d))"}, "913": {"problem_id": 913, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = dict()\nfor i in range(n):\n\tb[a[i]] = i\nans = [-1] * (n + 2)\nwhile a[0] not in b.keys() or a.count(0) > b[:a.index(max(a) - 1)]:\n   ans.append(i + 1 + max(len(b)))\nmax_lim = -1"}, "914": {"problem_id": 914, "answer": "s = list(input())\nfor i in range(len(s)):\n\tif s[i] == 'a' and i!=0:print(-1,i+1)\n"}, "915": {"problem_id": 915, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n\tans.append(a[i+1])\nprint(' '.join(ans))"}, "916": {"problem_id": 916, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(n):\n\tif a[i] % 2 == 1: p.append(p[-1] + i)\n\n\tp.extend([i for i, x in enumerate(a) if x & 1 == 0])\nans = 0\nif ans < n: ans = n\nprint(ans)"}, "917": {"problem_id": 917, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, h, m = int(input()), list(map(int, input().split()))\nl, r, x = [], []\nfor i in range(m):\n\tl.append(min(l[-1], x[i] - l[0]) + h)\n# print(\"l: \", l, \"\\r\", l + [0, -1])\nans = [-1] * (n + 1) \ndef dfs(x, y):   # \u8fd9\u4e2a\u8fb9\u5e94\u8be5\u8ddd\u79bb\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\uff0c\u9700\u8981\u8bb0\u5f55\u5230\u81ea\u5df4\u8bf7\u67e5\u770b\u7684\u6570\u7ec4\nif x == y: return 0\ndfs(2, 0) - 1 == 0 and (x - y) % 2 == 1 or x + y > 0 or y - x < 0: ans[x] = max(ans[y] for y in l) + (1 if y < x else 0 if x > y else 1 )\nprint(max(1e-7, ans))"}, "918": {"problem_id": 918, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\nMOD = 10**9 + 7\nn, m = list(map(int, input().split()))\nl = [[] for _ in range(n + 2)]\nfor i, s in enumerate(sorted(list(input()), start=2)):\n  l[s].append(i+1) + [0]\nans = [None] * n + 1\ndef dfs(a, b, c, d, l, r, t, u, v, w, x, y, z, p, q, a_s) :\n\tif a and b and c and d and r and u and v and w and x and y and z and p and q and a[-1] == '?' or u == 0 or v == 1 or w == 2 or q ==0 or z ==1 : u -= 1; v -=1; w += 2; p -=2; q *= 2 - u * v * z * p * q + u - 1 = 0; return 0\ndfs(l[a_], -1, 0, True, [], [])\nprint('\\n'.join(ans))"}, "919": {"problem_id": 919, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = input()\ncnt = 0\nfor i in range(n):\n\tif s[i] == \"a\" and cnt == k and (i + k - 1) % k == 0 and i < n - i + 1 and len(s) < k + (k + 2) // 2: print(i+1)\nprint(k)\n\n"}, "920": {"problem_id": 920, "answer": "n = int(input())\na,b,c,d = list(map(int,input().split()))\nif n == 1: print(-1)\nfor i in range(3,n+1): print(a * b * c + d * (a + b + c - 1) * juice) if i else 1\n"}, "921": {"problem_id": 921, "answer": "n,w=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  a.append(input())\nb=max(a)\nc=a[0]\nd={}\nf=0\nif n>=w and a[n-w]<=d.get(c,-1) or d[c]!=-1: f=1\nelse: b=min(b,c-d[f])\nprint(-1 if b>b else 1)"}, "922": {"problem_id": 922, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "923": {"problem_id": 923, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint('Yes' if a[0] == 0 else 'No')"}, "924": {"problem_id": 924, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef II():\n\treturn int(input())\n  \nsys.setrecursionlimit(3000)\nINF = float('inf')\nMOD = 10**9+7\nIIN = lambda: list(map(int,input().split()))\nS = input().strip()\nN = IIN()[:-1] + S.strip().replace('\\n', '') + '0'\nL = len(S) - 2\nfor i in range(N-1, -1,-1) : L = min(L, i+1-i+S[i])\nans = [0]*L\n#print(ans[0], ans[1], L)\n\n"}, "925": {"problem_id": 925, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nfor i in range(n):\n\tx = list(map(int, input().split()))[:n]\n\n\tif x[0] == '0' and (len(x) - 1) % 7!= 0: print('0', x, end ='')\n   elif (x[-1]!= '7' or x.find('01')!= -1)  :  print(0)"}, "926": {"problem_id": 926, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\ndef input():\n\treturn input().rstrip()\n#print(input())\nINF = float('inf')\nmod = 10**9 + 7 # divide by 9\ndd = [(-1, -1) for _ in range(10)] # ddd[i][j] = min(i, j) if i > j else (0, i) + [1] * (10 ** 9) # max(max(a, b) - 1 for a, (b) in enumerate(dd)) # min (min(b, c)) + 1 # (x + y) * x * y\nprint(*dd)"}, "927": {"problem_id": 927, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom heapq import nsmallest\nn = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(n-1):\n\tans += a[i]\nprint(ans)"}, "928": {"problem_id": 928, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**6)+1000)"}, "929": {"problem_id": 929, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations_with_replacement\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef II(): return int(input()) if input().isdigit() else inf\nii = II()\nans = []\nfor i in range(II()):\n  ans.append(ii())\nprint(*ans)"}, "930": {"problem_id": 930, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter, namedtuple, accumulate\ndef LI(): return list(map(int, input().split()))\n#sys.setrecursionlimit(2147483647) has been disabled\nmod = 10**9+7\nINF = float('inf')\nprint(len(set(LI())))\n"}, "931": {"problem_id": 931, "answer": "import sys\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tx,y,z = list(map(int,input().replace(\" \",\"\"))[:-1].split(b[-1]))\n\n\tb.append(a[i]*(y-x+1)//(z-y+2))\nprint(*b)"}, "932": {"problem_id": 932, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n\ta.append(input().rstrip() + [0] * (n - i) * [1 - a[-1]]) \nprint('NO' if len(a) > 0 else 'YES')\n"}, "933": {"problem_id": 933, "answer": "s = input()\nn = len(s)\nif s[n-1] == 'h':\n\tprint('woo')\nelse:   print('hello')"}, "934": {"problem_id": 934, "answer": "s = input()\nn = len(s)\nif s[0] == '2':\n\tprint('YES')\nelse:\t\t\n \tfor i in range(1,n+1): print(' '.join(map(str,s[i:])))"}, "935": {"problem_id": 935, "answer": "from collections import defaultdict, Counter\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().split()]\n\n def LI_2(n,m):\n  if n==3: return m-6+2*m-2+6*n-m+3\n return Counter(LI).most_common(1)[1][1]\n # n=3,3.5,5.2,2.1\n INF = int(input())\n MOD = MOD if MOD<=inf else INF\n def gcd(a,b): return a%b if a==b else b%a\n dp = [1 for _ in range(3)]\n ans = 0\n for i,x in enumerate(dp[1:],start=1):  # i=0, x=i-1, y=x+i, i-x=y+x-i\n if i==n: ans += 1\n print(ans) "}, "936": {"problem_id": 936, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(''.join(ans))"}, "937": {"problem_id": 937, "answer": "from operator import itemgetter\nn, k = list(map(int, input().split()))\na = [int(x) for x in input()]\nt = []\nfor i in range(n-k+1):\n\tt.append(a[i+k-1]*0.5-0)\nprint(max(t))"}, "938": {"problem_id": 938, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(input()))\nfrom heapq import heappush,heappop\ndef solve():\n\ta,b=list(map( int,input().split() ))\n\n\tn=a[:a.index(min(a)-2) + 1] + b[::-1] - a[0:].bit_length()-b[:-1]+2*(n-2)*(b-n) - 2*n*2 - (n+1)*2 + n*3 - b*4 + 3*b*5 + 5*a*6 + 8*1*8 + 9*0*9 + 10*10 + 11*11 + 12*12 + 13*13 + 14*14 + 15*15 + 16*16 + 17*17 + 18*18 + 19*19 + 20*20 + 21*21 + 22*23 + 24*24 + 25*25 + 27*27 + 28*28 + 29*29 + 30*30 + 31*31 + 32*32 + 33*33 + 34*34 + 35*35 + 36*36 + 37*37 + 38*38 + 39*39 + 40*40 + 41*41 + 42*42 + 43*43 + 44*44 + 45*45 + 46*46 + 47*47 + 48*48 + 49*49 + 50*50 + 52*52 + 53*53 + 54*54 + 55*55 + 56*56 + 57*57 + 58*58 + 59*59 + 60*60 + 61*61 + 68*68 + 69*69 + 72*72 + 73*73 + 74*74 + 77*77 + 78*78 + 79*79 + 82*82 + 83*83 + 84*84 + 86*86 + 89*89 + 91*91 + 93*93 + 94*94 + 95*95 + 96*96 + 97*97 + 102*98 + 101*99 + 104*100 + 103*104 + 105*103 + 106*106 + 107*107 + 108*108 + 109*109 + 112*112 + 113*113 + 114*115 + 120*129 + 143*132 + 144*144 + 145*145 + 146*146 + 147*147 + 148*148 + 149*149 + 150+160*160 + 151*151 + 156*156 + 157*157 + 158*158 + 161*161 + 165*162 + 167*163 + 168*167 + 169*169 + 182*181 + 92*182 + 183*184 + 189*183 + 191*185 + 180*180 + 186*186 + 187*187 + 294*292 + 295*283 + 300*296 + 280*280 + 283*287 + 288*286 + 307*307 + 311*311 + 312*313 + 313*323 + 322*324 + 325*325 + 327*326 + 328*332 + 337*339 + 336*336 + 347*348 + 349*347 + 353*343 + 354*353 + 376*376 + 377*377 + 380*380 + 387*379 + 384*385 + 386*388 + 389*387 + 390*391 + 395*400 + 403*439 + 443*441 + 463*394 + 401*409 + 419*141 + 196*196 + 199*209 + 202*206 + 207*207 + 269*268 + 270*271 + 277*274 + 281*279 + 282*282 + 293*293 + 298*299 + 707*7ish + 808*076 = 240*177 + 176*179 + 166*168 + 171*139 + 172*140 + 173*173 + 174*176 + 177*178 + 178*ratch"}, "939": {"problem_id": 939, "answer": "n, m = list(map(int, input().split()))\nt = [0] * (n + 1)\nfor i in range(n):\n\tt[i] += [m[-1]]\nans = [-1] + [list(input().strip())]\nprint(' '.join([str(x) for x in ans]))\n\n"}, "940": {"problem_id": 940, "answer": "from math import sqrt\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nc = 0\nfor i in range(n):\n\tb.append(a[i] + b[-1] * (i+1) + c)\n# print(b[0])\nprint(abs(c - a))\n"}, "941": {"problem_id": 941, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1 if x % 2 else x // 2 + 1\nmod = 1000000007\ndef dp(): return map(int, input().rstrip().split())\nfrom heapq import heappush,heappop\nn, mod = [int(i) for i in input()]\nif mod == 1: print(\"even\")\nelse: \n  print(dp())"}, "942": {"problem_id": 942, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = [0]\nfor i in range(n):\n\ta.append(s[i])\n#print(a)\nt = [(a[0], 0) for a in a[1:]]\nans = []\nflag = False\nwhile len(t) > 0:\n\n\tx = t.pop(0)\t# print(x, 0, -1)"}, "943": {"problem_id": 943, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nprint(s % a)"}, "944": {"problem_id": 944, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint(a[0] + a[1])"}, "945": {"problem_id": 945, "answer": "n = int(input())\nx = list(map(int, input().split()))\ny = []\nfor i in range(n):\n  x[i] = y.append(i+1)\nprint('yes' if y[-1] == x else 'no')"}, "946": {"problem_id": 946, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('easy' if len(a) == 1 else 'hard')\n"}, "947": {"problem_id": 947, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict as dd, deque\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\ta = dd(list(map( int, input().split() ))).most_common()[0]\n\n \tif n%2==0: print( a+b, n//2 )\n"}, "948": {"problem_id": 948, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nfrom collections import defaultdict\nn,m = list(map(int,input().split()))\nt = [[0]*(n+1) for i in range(m+2)]\nfor i,j in enumerate(input())[::-1]:\n t[i][j] = 1\ndef dfs(i, j):\n if i==n or j==m: return 0\n dp = [dp[j][i] for j in t]\n print(dfs(j, i))"}, "949": {"problem_id": 949, "answer": "n = int(input())\na = sorted(list(map(int, input().split())))\nif a[0] % 1000000007 == 0: print(1)\nfor i in range(n-1):\n\ta[i] += 1\nans = 0\ncnt = n-a\nwhile cnt >= 0 and ans <= 10**100: ans = ans + (ans * (n+1))\nprint(ans)"}, "950": {"problem_id": 950, "answer": "n,m=list(map(int,input().split()))\ns=input()\nl=[]\nfor i in range(0,n):\n\tl.append(input())\nif len(set(l))==m:print(m)\nelse:s1=s[:len(s)//2+1]"}, "951": {"problem_id": 951, "answer": "k = int(input())\nn = list(map(int, input().split()))\nprint(min(n[0], n[1]))"}, "952": {"problem_id": 952, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nG = [[] for i in range(n)]\nfor i, (u, v, c) in enumerate(zip(input(), 2)):\n  G[u-1].append((v-u+1, 0, i + 1) if c > 0 else -1)\nans = [-1] + [0] * (2 * m + 2 * n + 3) * G.count(G[0])\nprint(ans[1])"}, "953": {"problem_id": 953, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nmatrix = [[0] * n for _ in range(n)]\nfor i0, row in enumerate(map(int, input().rstrip().split())) :\n  matrix[i0][1] = (row[1], row[2] + 1) % 2 == 0\nans = []\nwhile n > 0 : n -= 1; continue\nif n == 1 : ans.append('0')\nprint(*ans)\n"}, "954": {"problem_id": 954, "answer": "n = int(input())\ns = list(map(int, input().split()))\ncnt = 0\nfor i in range(n-1):\n\tif s[i] == 'a': cnt += 1\nif n == 1: print(0)\nelse: s.append(''.join(s))"}, "955": {"problem_id": 955, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a[0], a[1]))"}, "956": {"problem_id": 956, "answer": ""}, "957": {"problem_id": 957, "answer": "n = int(input())\nfor i in range(n):\n\ts = input()\nif s in \"abcdefghijklmnopqrstuvwxyz\" or s == \"\": print(\"NO\")"}, "958": {"problem_id": 958, "answer": "n, k = list(map(int, input().split()))\ns = input()\na = []\nfor i in range(0, n):\n\tif s[i] in a: a.append(i)\nif k in [1, 2]: print(-1)\n\n\t\t"}, "959": {"problem_id": 959, "answer": "n,m,mod=list(map(int,input().split()))\ns=[[0] for i in range(n+1)]\nfor i,j in enumerate(s[1:],1):\n  s[i][j]=(1 if i%2 else 0)%mod\np=s.pop(0)\nif p==0:print(p)"}, "960": {"problem_id": 960, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = map(int, input().split())\na = [None] * (n + 1)\nfor i in range(n):\n\ta[i] = (i + 2) % k\nprint(max(a))"}, "961": {"problem_id": 961, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [[0] * (n + 1) for i in range(n+1)]\nfor i, c in enumerate(a):\n\tdp[c][i] = dp[a[i-1]][c - 1]\nans = 0\ni = 1\nwhile i * i <= n: ans += (i * n - i) // 2\nprint(ans)"}, "962": {"problem_id": 962, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor i, (a, b) in enumerate(zip(input(), input())) :\n  graph[a-1].append((b, i+1) if i!=b else 0)\nans = [0]*n\ndef dfs(x, parent) :  # \u627e\u5230\u8fbe\u81f3\u590d\u6b8b\u914d\u5c0f\u503c\uff0c\u8ddf\u8d77\u6765\u6709\u591a\u5c11\u4e2a\u8ba1\u7b97\u7684\u8282\u70b9\u7684\u8fde\u7eed\u4e0b\u8f6c\u89e3\u6790\ndfs(graph[x][parent]), ans[1] = 0\nvisited = set([])\nwhile len(ans) > 0 : # \u524d\u4e00\u6b21\u5143\u7d20\u6392\u5e8f\u5176\u4ed6\u7684\u6700\u524d\u9762\u5217\u51fa\u53f3\u4fa7\u8fd9\u6837\u53ea\u9700\u8981\u5b58\u50a8\u4e86\u5148\u628a\u5224\u65ad\u83b7\u80fd\u5220\u9664\u7b2ci\u548cx\u4e4b\u95f4\u7684\u72b6\u6001i\u6539\u6210i-x\u7684\u60c5\u51b5\u662f\u53e6\u5916\u4e24\u4e19\u6bcf\u4e00\u90e8\u5206\u53ef\u4ee5\u53d8\u4e3a\u7a97\u53e3\u7684\u6a21\u5efa\u4e00\u76f4\u5185\u90fd\u662f\u4ec0\u4e48\u5904\u7406\u63d0\u793a\u800c\u4e0d\u662f\u5173\u952e\u7684\u95ee\u9898\nprint((' '.join(map(str, ans))))\n"}, "963": {"problem_id": 963, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\n\n\n   # \u5165\u529b\u957f\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u6700\u5927\u503c\ndef LI(): return [int(x) for x in xrange(31)]\n# \u4e3a\u4e86\u9047\u5230\u8ba1\u7b97\u6570\u636e\u5e8f, \u5982\u679c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u88ab\u521d\u59cb\u533a\u5219\u5168\u90e8\u7ed9\u5b9a\u6574\u9664, \u6bd4\u5982\u7b26\u5408, \u6700\u540e\u4e00\u6b21\u5217\u51fa\u79f0, \u76f4\u63a5\u904d, \u90a3\u4e48\u4f1a\u627e\u5173\u7cfb, \u8fd9\u6837\u8003\u8651\u73b0\u5728\u5c31\u4e0d\u8981\u6c42, \u4f46\u662f\u5224\u65ad\u662f\u5426\u7b49\u4e8e\u6ca1\u6709\u5229\u76ee\ufffdshirts-and-sandals-are-you-going-here\nmod=10**9+7\nn,k=list(map(int,input().split()))\ns=set()\nfor i in range(0,n):\n  s.add(LI()[i-1])\nans=0\nif n==1:ans+=k\nprint(ans)"}, "964": {"problem_id": 964, "answer": "n = int(input())\nprint(''.join(map(str, input().split())))\n"}, "965": {"problem_id": 965, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(len(a))"}, "966": {"problem_id": 966, "answer": "y = int(input())\nfor i in range(y + 1):\n\tn = y - 1\nif(n>=y and n%y == 0 and (n//y)**2>0): print(i+1)"}, "967": {"problem_id": 967, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "968": {"problem_id": 968, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(n):\n  p[a[i] - 1] = i\nres = {}\nif res.get(p[0], None) is None or res[-1] is not None:   # print(res[p])\nprint('YES')\n"}, "969": {"problem_id": 969, "answer": "s = input()\nt = str(input())\nfor i in range(0, len(s)):\n\tif s[i] == t: print(i+1)\n"}, "970": {"problem_id": 970, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i] - a[(i + 1) % n])\nprint(min(ans))"}, "971": {"problem_id": 971, "answer": "n,b,d = list(map(int,input().split()))\na = sorted(list(enumerate(x)) for x in a if x<=d)\nprint(len(a))"}, "972": {"problem_id": 972, "answer": "n,m = list(map(int,input().split()))\na = []\nfor i in range(n):\n   a.append(input())\nprint('NO')\n"}, "973": {"problem_id": 973, "answer": "R, C = list(map(int, input().split()))\ns = []\nfor i in range(R):\n\ts.append(str(input()[-1] + \"D\" + str(C - 1)))\nprint('\\n'.join(s))"}, "974": {"problem_id": 974, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n\tb[a[i] - 1] += 1 + a[n - i]\nprint(max(b))"}, "975": {"problem_id": 975, "answer": "n = int(input())\ns = [int(x) for x in input().split()]\nans = 1\nfor i in range(n):\n\tif s[i]==s[n-i-1] and i!=n:ans*=1\nprint(ans)\n"}, "976": {"problem_id": 976, "answer": "n,x = list(map(int,input().split()))\nl = []\nfor i in range(1,n+1):\n  l.append(max(0,i-x-1-l[i])+x)\nans = 0\ndef f(x,y,l,r,t,s,m):\n\n  if(t==r and l[t]==x and m!=y and s>0 and t<6 and x<m and y<l and r>6):  # t, m, y, a, b, c, d, e, f, g, h, i, j, k, l, o, p, q, s, t = 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 246, 243, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 314, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 339, 340, 347, 348, 353, 359, 364, 366, 368, 370, 371, 372, 373, 374, 379, 380, 383, 384, 389, 479, 400, 405, 406, 407, 408, 409A, 419, 420, 421, 424, 425, 426, 427, 428, 429,4292, 433, 432P, 444, 286, 287, 285, 294, 296, 297, 300, 315, 317, 318, 319, 320, 321, 343, 344, 346, 349, 355, 356, 357, 358, 360, 367, 375, 376, 378, 387, 390, 401, 404, 410, 414, 415, 417, 416,418,419,420,426,432,433,439,440,441,444,445,446,447,448,460,464,466,467,469,470,474,479,480,481,482,483,499,503,509,521,523,524,625,582,653,659,640,646,647,648,649,660,641,661,672,673,674,679,678,677,688,698,699,800,803,804,806,808,807,809,812,810,1089,1117,1111,1216,1199,1351,1431,125,129,140,141,144,165,166,167,168,169,180,184,186,187,194,195,196,198,199,204,205,206,207,208,218,220,221,222,223,224,225,227,228,229,232,233,234,235,236,237,238,239,241,242,243,244,251,266,268,271,283,293,316,317,326,336,373,388,389"}, "977": {"problem_id": 977, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 998244353\ndef LI(): return list(map(int, input().split()))\nreturn LI\n"}, "978": {"problem_id": 978, "answer": "from sys import stdin,stdout\nimport bisect,collections,heapq,copy,functools,os,bisect_,insort,sys,time,str,setrecursionlimit,zip3,tuple,fclose,urgent,uassertIONS,eps,infO,INF,inp,io,IOBase,LINUS\ninput = lambda:stdin.readline().rstrip()\nprint(*map(int,input().split()))"}, "979": {"problem_id": 979, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nmod = 10**9+7\nfor i in range(n):\n\ta.append(a[i])\nprint('\\r\\n'.join([str(x) for x in a]))"}, "980": {"problem_id": 980, "answer": "from itertools import combinations\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = int(input())\nn = list(map(int, input().split()))\na = [0] * n\nfor i in range(n[1]):\n\ta[i] = a[I - 1] + i\nprint(''.join(a))"}, "981": {"problem_id": 981, "answer": "v = input()\na = list(map(int, input().split()))\nprint(max(a))"}, "982": {"problem_id": 982, "answer": "for _ in range(int(input())):\n\tl, r = list(map( int, input().split() ) )\n\n\tn = ( l + r + 1 ) // 2\n\n \tif n % l == 0 and n > 0: print(\"NO\")\n"}, "983": {"problem_id": 983, "answer": "n,p,r,m=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n\ta.append(p*p+q*q+r)\nprint(max(a))"}, "984": {"problem_id": 984, "answer": "from operator import itemgetter\nimport sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nn = int(input())\nt = list(map(int, input().split()))\ngraph = [[] for _ in range(n + 1)]\nfor i, (u, v) in enumerate(itertools.accumulate(reversed(graph)))[::-1]:\n\tif v < u and graph[u][v] > 0 and (v, u) not in [i for i in t] and t[i]!= v:\n\n\t\tgraph[v][u] = 1 if v == u else 0\n \telif u < 0 or v > n or u == n: break\nif n % 2 == 1 and tuple(i) == i: return False\nprint('1')"}, "985": {"problem_id": 985, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0] * 1000 for _ in range(n)]\nfor i, j in zip(a, a[::-1]):\n  dp[i][j] = 1 if i == 0 else 1000 if j == 1 else (i + 1) * (n - i) // 2\nprint(dp[1][0])"}, "986": {"problem_id": 986, "answer": "n,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input()])\nprint(a[-1][1])"}, "987": {"problem_id": 987, "answer": "import math\nn,m=list(map(int,input().split()))\ndp=[0]*(n+1)\nfor i in range(m):\n\tdp[i]=math.inf\nc=0\ni=n-1\nwhile i>0 and i<n and (i+i-2)%n==0 : c+=1; i-=2\nprint(*c,sep=\"\\n\")\n"}, "988": {"problem_id": 988, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nn = int(input())\nfor i in range(n):\n\tprint(''.join(map(str, input().split())))"}, "989": {"problem_id": 989, "answer": "n, k = list(map(int, input().split()))\na = [0] * n\nfor i in range(n):\n  a[i] += 1\nans = max(a[0], 0)\nif k == 0: ans = min(ans, (k - 1) * (n - 2) // 2 + 1 - ans)\n\n"}, "990": {"problem_id": 990, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor i, v in enumerate(map(int, input().split())) :\n  graph[v].append(i)\n\n  if n % 2 == 0 :  # \u30b0\u30eb\u30fc\u30d7\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u91cf\u3057\u305f\u3044\u5834\u5408 : \u533a\u9593[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 185, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 214, 218, 225, 226, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 250, 251, 254, 256, 258, 263, 269, 271, 277, 281, 283, 284, 287, 285, 293, 296, 298, 300, 301, 302, 303, 306, 307, 308, 320, 322, 323, 326, 327, 328, 329, 336, 340, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 389, 403, 405, 408, 416, 418, 419, 420, 421, 424, 425,426, 427, 428, 429, 432, 433, 448, 450, 451,llan, blum, balus, balin, bablin, ingin, aninuto, belamin\nfrom sys import stdout\nstdout.write(str(line) + \"\\n\")\n"}, "991": {"problem_id": 991, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, Counter, OrderedDict, ROUND_CEATS = {}, [1000, 1000], {100000, 100000}, {0, 0}\nclass UnionFind():\n  def __init__(self, n, s=10**9, m=9**100, graph=defaultdict(lambda x: 0), *self.graph=lambda: set(map(int, input().split()))) -> None:[UnionFind for uf in UF(n)]() =]>  print((\"{:0.2f}\".format(sum(uf.s_costs[0] + u_m + 1 if u == 0 else u * 2)))\nuf = [[0 for _ in range(10 ** 100)]]()\nfor u, v in zip(list(range(1, 10 * 100))): u.sort()[1] = v.get(u, []) + [v[u][0]] = u[:u].count(0) + v[v][u + 2:].get((v, u) == v, []).append([u[i], 0])[uf[-2].bisect_left(len(v), 0)] = 0\nprint(*uf)"}, "992": {"problem_id": 992, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nMOD=998353\ndef main():\n  N, S = list(map(int, input().split()))\n\n  A = [int(x) for x in map(str, range(N+1))] + [float('inf')] * (N + 1) + [[] for i in range (0, len(A)) if A[i] == 1]\n#   print(f'A {A[0]}, S {S}', end=' ')\nt = main()\nprint(t)\n\n\n\n"}, "993": {"problem_id": 993, "answer": "n, m = map(int, input().split())\na = []\nfor i in range(n):\n  a.append(sum(map(lambda x: x % m, [int(x) for x in list(bin(m)[2:].zfill(len(a))]))))\nans = [0] * (n + 1)\ni = n\nwhile i > 0 and ans[i] == 0: i -= 1; continue\nprint(ans[-1])"}, "994": {"problem_id": 994, "answer": "import math\nn, m = list(map(int, input().split()))\nd, h = [], []\nfor i in range(1,n+1):\n d.append(math.gcd(d[i], int(m/i)))\nh.remove(max(h_,0) +1)\nprint(2 if d[-1] > 1 else 0)"}, "995": {"problem_id": 995, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nfor i in range(n):\n  s //= i\nprint(s)"}, "996": {"problem_id": 996, "answer": "from sys import stdin,stdout\ninput = lambda:stdin.readline().rstrip()"}, "997": {"problem_id": 997, "answer": "s = input()\nn = len(s)\nif s[-1] == '0':\n\tn -= 1\nprint(''.join(map(str, s)))"}, "998": {"problem_id": 998, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn, x = list(map(int, input().split()))\nl = [[] for _ in range(18)]\nfor i, s in enumerate(sorted(input()), start=1):\n\tl[s-1].append([i, i+1])\nans = [0]*18\ndef maxxor(a, b, c, d, e, f, g, h, idx):\n\n\tif a == b == c == d == e == f == g == h or a <= b <= c <= e <= f <= g <= h and a >= b >= c >= h:\n\n \t\tans[idx] = max(c-a+d-b-c+e-f+g-h, 0) + a + b + c + d + e + f + g + h - a - b - c - e - f - g - h\n#print(ans)  # print(max(l) - ans[0][0]) "}, "999": {"problem_id": 999, "answer": "n = int(input())\nl = [int(x) for x in input().split()]\nres = 0\nfor i in range(n):\n\tl[i] = (i + 1) // 2 + (n - i) % 2\nif len(l) == 1: res = max(res, sum(map(int, l[-1])))\nelse: return res\n"}, "1000": {"problem_id": 1000, "answer": "n,v = list(map(int,input().split()))\nl = [0]*v\nfor i in range(n):\n\tl[i] += 1\nans = 0\nk = v-1\nif l[k]%2 == 1:ans += (1-k)\nprint(ans)"}, "1001": {"problem_id": 1001, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+1)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nd = {k:i for i,k in enumerate(inp)}\nn = int(input())\na = LI()\nans = [0]*n\nfor i in range(n):\n  ans[a[i]] += i+1\nprint(ans[-1])"}, "1002": {"problem_id": 1002, "answer": "# cook your dish here\nn, m = map(int, input().split())\nt = list(map(lambda x: int(x), t))\ns = 0\nfor i in range(n):\n  t.append(t[i] + [0] * (i+1) - s)\nprint(s)"}, "1003": {"problem_id": 1003, "answer": "n, m = list(map(int, input().split()))\ns = []\nfor i in range(0, n):\n s.append(s[-1] * (i + 1) // 2)\nprint(max(m - 1, s))"}, "1004": {"problem_id": 1004, "answer": ""}, "1005": {"problem_id": 1005, "answer": "import bisect\nfor _ in range(int(input())):\n  \n n,k,d=list(map( int,input().split() ))\n a=[ int(i) for i in list( map( lambda x: x[1], input() ) ) ]\n ans=n-k-1-a\n if ans>=d: print(0)\n elif ans==d-d+1:print(d)"}, "1006": {"problem_id": 1006, "answer": "n = int(input())\na = []\nfor i in range(n):\n\tif a[i] == \".\" or (i in [0, n-1] and i!=n-5) : a.append(i)\nprint(\"NO\")"}, "1007": {"problem_id": 1007, "answer": "k, p = list(map(int, input().split()))\nn = int(input())\ns = [0] * n\nfor i in range(1, n + 1):\n  s[i] = (k - 1) * i % p\nprint(sum(s))"}, "1008": {"problem_id": 1008, "answer": "from sys import stdin, stdout\na=stdin.readline().strip()\nfor i in range(int(a[0])):\n  a=a.replace('a',' ').replace(',','')\nprint('YES' if a in a else 'NO')"}, "1009": {"problem_id": 1009, "answer": "n, k = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n\ts[i+1] = s[n-1-i] + i\nprint(max(s))"}, "1010": {"problem_id": 1010, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a.count(i)\nprint(len(a))"}, "1011": {"problem_id": 1011, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = [0] * (n + 2)\nfor i in range(n):\n   m[i] = 2 ** (i - 1).bit_length() - 2\nprint('{} {:.2f}'.format(a[:m[-1]], a[m.index(i):])\n"}, "1012": {"problem_id": 1012, "answer": "t = int(input())\nfor i in range(t):\n  s = input()\n\n  if len(set(s)) >= 3 and s[0] == 'a' and len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 218, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 254, 255, 256, 258, 269, 270, 271, 277, 281, 283, 284, 285, 292, 293, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 352, 355, 356, 357, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 389, 400, 401, 402, 405, 406, 407, 408, 409, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 432, 433, 436, 445, 368, 369, 370, 392, 403, 414, 415, 416,arth,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)\n"}, "1013": {"problem_id": 1013, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\n#sys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return list(map(int, input().split()))\nD = LI()\nN = len(input())\nfor _ in range(N-1):\n\ta, b, c, d = [int(i) for i in input()]\n\n\tif d == 0: return c-a+b-c+d\n \telse: c = a + b + c - a-b + (c % MOD) * (d%MOD) - (a % (10 ** 7 + 9) + d % 10**7)\n\n  print(min(c, (N - d) // 2))"}, "1014": {"problem_id": 1014, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [0]*n\nfor i in range(n-1):\n\tA[B[i] + 1] += 1\nif B[n+1] > A[0]:\n \tprint(\"white\")\nelse: print(\"black\")"}, "1015": {"problem_id": 1015, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(2, n+1):\n\tans.append(a[i]-1)\nprint('\\n'.join(ans))"}, "1016": {"problem_id": 1016, "answer": "def __starting_point():\n n, m = list(map(int, input().split()))\n x, y = [], []\n for i in range(m):\n  x[i] = x.count(i)\n y.sort(reverse=True)\n\n print(max((x[0] + y[1]) * 2 - (m + 1)) // 2)"}, "1017": {"problem_id": 1017, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "1018": {"problem_id": 1018, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += a[i]\nprint(ans)"}, "1019": {"problem_id": 1019, "answer": "import math\nn = int(input())\ns = [0]*(n+1)\nfor i in range(1,(2*n)+1):\n s[i] = (i*i)//math.gcd(i, n/(i-1))\nprint(s[n])"}, "1020": {"problem_id": 1020, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n#sys.setrecursionlimit(1000000)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x) for x in input().split()]\ndic = {}\nfor i in range(0, len(LI())):\n  dic[LI()[i]] = i\nli = [(li[-1][0], 0, -1)]\nlis = [0] + [li.__getitem__] * (len(li) * 2 + 3) #\u521d\u59cb\u70b9\u6570\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5230\u5176\u4ed6\u5206\u6392\u7684\u5b57\u7b26\u4e32\nprint(sum(lis))\n"}, "1021": {"problem_id": 1021, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n - 2):\n\tc = a[i] if i % 2 == 0 else (tuple(a[:i]) + tuple(sorted(c)))\nprint(\"Yes\")\n"}, "1022": {"problem_id": 1022, "answer": ""}, "1023": {"problem_id": 1023, "answer": "import sys\nfrom collections import defaultdict\ndef input():\n\treturn sys.stdin.readline()[:-1]\ninput()\na=int(input())\nb=list(map(int,input().split()))\nc=[]\nfor i in range(b[0]+1):\n  if b[i]==a+tuple(range(i+1,a))==c and i>=len(c) and c[-i-2]<=k and a!=c[k] and k>0 : c.extend([])\nprint(bisect.solve(0,0))"}, "1024": {"problem_id": 1024, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(len(a)):\n\tans += a[i] * i\nprint(ans)\n"}, "1025": {"problem_id": 1025, "answer": "n = int(input())\nfor i in range(n):\n  x, y = list(map(int, input().split()))\n\n  if x == 0 or y == -100 or x > 100 and y > 1 and x < y:  print(0)\n\n"}, "1026": {"problem_id": 1026, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\nA=[int (i) for i in input().rstrip('\\n').split()]\nB=set(A)\nC=[[0]*(n+1)]\nfor i,a in enumerate(B):\n  for j in A[i-1:],a[:j]:C[a][j]=i\nprint(max(C))\n"}, "1027": {"problem_id": 1027, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nread = lambda: list(map(int, input().split()))\nmod = 10**9 + 7\nn = int(input())\nA = [int(x) for x in read()]\nfor i in range(n):\n  print(A[i]//mod)"}, "1028": {"problem_id": 1028, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1, 10**9))"}, "1029": {"problem_id": 1029, "answer": "p = int(input())\nfor i in range(p):\n  s = list(map(int, input().split()))[1:]\n\n  if s[0] == 1: print(s[-1])\n"}, "1030": {"problem_id": 1030, "answer": "#!/usr/bin/env python\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\ndeque = [[] for _ in range(998)]\nfor i, v in enumerate(reversed(list(map(int, str(v)))))[1:][::-1] :\n   deq = [(v, i) if i > 0 and v > 1 else [v]* (i+1)+deq[-2][0] + [0, 0] * (1<<i)][i>=0 and i<len(deques[0])] else []\nreturn list(filter(lambda x: x[:-1])).tolist()\n"}, "1031": {"problem_id": 1031, "answer": "#!/usr/bin/env python\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nprint('\\n'.join(['({0}-{1})' for _ in range(n)]))"}, "1032": {"problem_id": 1032, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\nfrom collections import defaultdict as dd,deque as dq,Counter as cq\n#from heapq import heapify, heappop,heappush, heapreplace\nINF = float('inf')\nMOD = 10**9+7\ndd = [defaultdict(D) for _ in range(n)]\nfor i,x in enumerate(list(map(int,input().split()))): dd[x] += [i]\nn = int(input())\na = dd.from_iterable([0]*n+[])\nans = sorted(cq.keys(), key=lambda x: x[1])[::-1] = 0\nif n == 1: print(ans[0][0])"}, "1033": {"problem_id": 1033, "answer": "from sys import stdin, stdout\ninput()\nn, h = list(map(int, input().split()))\np = [[] for _ in range(h)]\nfor i, j in reversed(list(range(n))):\n\tp[i][j] = h - 1\nans = float('inf')\n# print(p)\nt = [-1] * n\nwhile t[t[-1]]!= -1 and h > 0 and len(t) < n: ans = min(ans, (h - t.count(0)) * 2 + (n - 2) * 3 - (2 * h) for t in t)\n\n\tt.sort(reverse = True, key = lambda x: x[0])\nprint(min(ANS))"}, "1034": {"problem_id": 1034, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6) \ndef II(): return int(input())\nD = II()\nfor _ in range(II()):\n\tX,Y,Z = D.items()\n\n\tA = [0] + list(map(int, input().split())) + [Y] * (X*Y) + [(X-1)%3]*(Y*Z) if X*X < X else [(Y-X)//3+1+(X//2) for X in D[1:].copy() for Y in [Z]] + [[X],[Y],[X]]*[(D[0][0].index(X)-1)]*((X==1 and X!=0 and Y==0) or [X])]  #X is the number of candles of type '1' or '2'  A = sorted(A, key=operator.itemgetter(1), reverse=True, reverse_only=False) #A[i] stores the value of each 'i' in A[:3].keys() #i is count of kind ('1') or ('2')  for j, (x, y) in enumerate((0, 1), 2): print(x*y+x+y, [3, 0])\n"}, "1035": {"problem_id": 1035, "answer": "import sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nfrom math import gcd\ndef LI(): return [int(x) for x in sys.stdin.readline().split('\\n')]\nf = LI()\nli = [1]*f\nfor i in range(1,f+1):\n li[f-1-i] += 1\n#print(li[1])\nreturn li\n"}, "1036": {"problem_id": 1036, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**9)\nI=lambda:list(map(int,input().split()))\ndef I(): return int(input())\nd={}\nfor _ in range(I()):\n\ts=input()+s[:-1]\n\n\tif s[0]=='R': d[s.index(max(s))]+=1;s='P':print('\\n'.join(d.items()),end='\\1'*(len(list)*2))"}, "1037": {"problem_id": 1037, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i+1])\nprint(max(ans))"}, "1038": {"problem_id": 1038, "answer": "import sys\nsys.setrecursionlimit(10**7)\ndef input(): return sys.stdin.readline().rstrip()\nfrom collections import deque, defaultdict, OrderedDict\ninput = lambda : list(map(int, input().split()))\n"}, "1039": {"problem_id": 1039, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque, OrderedDict,defaultdict\ndef LI(): return list(map(int, input().split()))\n# def LI_():  return [int(x)-1 for x, x in enumerate(input())]\nmod = 10**9+7\nn = 100001\nl = [-1] * n\nfor i in range(n): l[i] = LI()\nprint(*l)"}, "1040": {"problem_id": 1040, "answer": "n = int(input())\na = list(map(int,input().split()))\nprint(min(a))"}, "1041": {"problem_id": 1041, "answer": "from sys import stdin, stdout, setrecursionlimit\nimport heapq,collections,math,bisect,copy,functools,os,time,socket,socketserver,deque,fractions,heap,array,re,sys,text,string,tuple,racket,floordiv,mod,pow,factorial,gcd,ceil,floor,fsort,lcmr,simpl,str,asin,cos,sin,pi,Wilson,Diagonal,Euclid,Hilbert,Konvets,radius,sqrt,ucels,vul,undefined,nan,atan,rad,cubic,rounded,inf,copysign,numerical,acos(-1),asin(0),cos(math.sin(10*pi/64))\n"}, "1042": {"problem_id": 1042, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = 10**9+7\ncnt = 0\nfor i in range(n):\n  if a[i]>=m: cnt+=1\nprint(m)"}, "1043": {"problem_id": 1043, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nx = []\nfor i in range(n): x.append(a[i])\nprint(max(x))"}, "1044": {"problem_id": 1044, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(n)]\nfor i, (x, y) in enumerate(a):\n\tdp[x][i] = 1 + dp[y][x - 1] if x!= y else 0\nans = [1]\nwhile len(ans) < n: ans.append(1 + ans[-1])\nprint(' '.join(str(x) +'' for x in ans))"}, "1045": {"problem_id": 1045, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(1, n):\n   a[i] = i + 1\nprint(max(a))"}, "1046": {"problem_id": 1046, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = []\nfor i in range(n):\n  if a[i] == 0: d.append(i)\nif len(d) == 1: print(-1)"}, "1047": {"problem_id": 1047, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(1,n+1):\n\tans += i\nprint(ans)\n"}, "1048": {"problem_id": 1048, "answer": "n = int(input())\ns = input().strip()\nans = []\nfor i in range(n-1):\n\tans.append(s[i+1] + s[-i])\nprint('\\n'.join(ans))\n"}, "1049": {"problem_id": 1049, "answer": "n,d = list(map(int, input().split()))\ns = []\nfor i in range(1,n+1):\n  if s[i-1]=='1':\n\ts.append(i)\nif d>=n or (n-d)%2==0 and (d-s[0]!=0) or d<n: print(n)"}, "1050": {"problem_id": 1050, "answer": "n,m,k = list(map(int,input().split()))\np = [0] * (n+1)\nfor i in range(n):\n p[i] += 1\n #print p\n if m == k: \n  print(\"Yes\")\n elif m % k == 0: # m = k - 1, i.e. m is not zero\n else: p.append(p[-1] + 1)\n\n print('No')\n"}, "1051": {"problem_id": 1051, "answer": "def main():\n\tn = int(input())\n\n\tfor i in range(n):\n\n \t\tr = list(map(int, input().split(' ')))\n  \n"}, "1052": {"problem_id": 1052, "answer": "n, k = list(map(int, input().split(' ')))\np = [i for i in range(1, n+1) if i not in input()]\nprint(count(p))\n"}, "1053": {"problem_id": 1053, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n-1):\n\tb.append(a[i]*(1<<i)//2)\nc=0\nd=len(b)-1\ne=c+b[0]\nif(d<=n and b[e]==c): \n  \tprint(e,d,c,e+d)"}, "1054": {"problem_id": 1054, "answer": "n = int(input())\nx = [int(i) for i in input().split()]\ny = [-1] * (n + 1)\nfor i, x in enumerate(x):\n  y[i] = -1 if x[0] == 0 else (y[x[1]] + i) % n\nprint(min(y))"}, "1055": {"problem_id": 1055, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(1,n+1):\n  if a[i-1]%2==0:b.append(i)\nprint(max(b))"}, "1056": {"problem_id": 1056, "answer": ""}, "1057": {"problem_id": 1057, "answer": "n = int(input())\ns = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(26)]\nfor i, j in enumerate(s, 1):\n  dp[i][j] = 1\nans = 0\nif n % 2 == 1: ans = (dp[n - 1][-1] + 2) % mod\nprint(ans)\n"}, "1058": {"problem_id": 1058, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nflipped = []\nfor i, j in zip(a, a[1:]) : flipped.append(j)\ndef flip(i) : i.flip()\ni = 0\nwhile i < n-1 :\n  if i == n - 1 : flip((i+1) % 2) ; i = i + 1; break\nif i > n : return i\nelse : flipped[i] = '1'"}, "1059": {"problem_id": 1059, "answer": "import sys\ninput = sys.stdin.readline\ndef input():\n\treturn input()\nsys.setrecursionlimit(10**6)\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(1,n+1):\n  if(a[i]==\"u\"):b.append(i)\n\n  elif(b[-i-2]!=0):a.sort()  # [i,j] -> [a,b]\nprint((\" \".join([str(x) for x in b])))\n"}, "1060": {"problem_id": 1060, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n\tdp[i] = math.ceil(math.log(i / 2) + a[n - i - 1])\nans = 0\ni = 1\nwhile i * i <= n and ans < n: ans += i\nprint(ans)"}, "1061": {"problem_id": 1061, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()"}, "1062": {"problem_id": 1062, "answer": "n=int(input())\ns=[input() for _ in range(n)]\nt=s.count(' ')\ni=0\nwhile(i<n):\n if(t[i]==''and t[j]<s[0]:\n  s[1]=' '\n elif (i+1)<=n and (j-i)%2==0 and i<j<len(s)//2 or i>0 or j>i-j+2:\n\n  i+=1 \n else:   j-=i+=2\n\n print(2) "}, "1063": {"problem_id": 1063, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n - 1):\n\ta[i] = str(i + 1) + \"1\"\nans = [0] * (n + 2)\nif ans[-1] == '1':\n   print(\"NO\")\nelse: print('YES')"}, "1064": {"problem_id": 1064, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import defaultdict, deque\ndef read_int(): return int(input().rstrip() or [int(x)-1 for x in input().split()])\nread_ints() = list(map(int, read().strip('\\n').split(' ')[1:]))\nprint(len(list(enomints)))\n"}, "1065": {"problem_id": 1065, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9 + 7\nN, M, D = list(map(int, input().split()))\nans = 0\nfor i in range(1, N + 1):\n  ans += 1 if i % MOD == 0 else (N - i) * (i - 1) // D\nprint(ans)"}, "1066": {"problem_id": 1066, "answer": "n, k = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(n - 1, 0, -1):\n\tans[i] += 1\nprint(sum(ans))"}, "1067": {"problem_id": 1067, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(n):\n\ts+=a[i]*(i+1)*(2*i)\nprint(s)"}, "1068": {"problem_id": 1068, "answer": "def main():\n\ta,b,c,d = list(map(int, input().split('=')))\n\n\tif '0' in str(a) and a.count('0') == 3 and len(str(d)) == 1:\n\n \t\tprint('+')\n \n\n\n\n"}, "1069": {"problem_id": 1069, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nans = (a[0] + a[1] * (n - 1)) % 1000000007\nprint(ans)"}, "1070": {"problem_id": 1070, "answer": "n, k = list(map(int, input().split()))\na = []\nfor i in range(k):\n  a.append(input().replace(\" \",\"\")+\"\\n\")\nans = 0\nwhile (k>0 and a[-1][0]==\"\") and (len(a)-1-k)%2==0:ans += 1\nprint(ans)\n"}, "1071": {"problem_id": 1071, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1 if x > 0 else 10**9 + 7\ndef get_ints(): return map(int, input().split())\nn = int1()\narr = []\nfor i in range(n):\n\tarr += [int(input())]\nprint('\\n'.join(arr))"}, "1072": {"problem_id": 1072, "answer": "n,m=list(map(int,input().split()))\ns=input()\nt=set(s)\nif len(t)==0:print(0)else print(n-m-1)"}, "1073": {"problem_id": 1073, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(a))"}, "1074": {"problem_id": 1074, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict as dd, deque\nn = int(input())\nmat = [list(map(int, input().split())) for i in range(n)]\nprint(len(mat))"}, "1075": {"problem_id": 1075, "answer": "n=int(input())\nprint(0,1)"}, "1076": {"problem_id": 1076, "answer": "import sys\ninput = sys.stdin.readline\nn,m = map(int,input().split())\nd = [[] for _ in range(n + m)]\nfor i,j in reversed(list(range(m))):\n\td[j].append(i+1)\na = sorted(d, key=lambda x:x[1])\nans = 0\np = [-1]*n\nq = 10**10\nwhile p[q]<=0:q+=1\nif q%2 == 1:ans+=p[0]\nprint(ans%q)"}, "1077": {"problem_id": 1077, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = [int(x) for x in input()]\nl = []\nfor i in range(n):\n\tl.append(a[i])\n#print(l)\nans = m-l[0][0] - l[-1][1] + 2*m\nif ans > 0: ans = max(ans, (ans + 1)//2) + m\nelse: print(0, ans)"}, "1078": {"problem_id": 1078, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.append(bin(a[-1]//2)[2:])\nprint(*a)\n"}, "1079": {"problem_id": 1079, "answer": "s = input()\na = len(s) - 1\nif s[0] == '0':\n\tprint(0)\nelse:\t\tfor i in range(1, a+1):\ta-=s[i-1]\nprint((a + 1) // 2)"}, "1080": {"problem_id": 1080, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n\ta[i] = min(a)\nprint(\"YES\")\n"}, "1081": {"problem_id": 1081, "answer": "#!/usr/bin/python\nimport sys\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nn = int(input())\nans = []\nfor i in range(n):\n  ans.append(str(i))\nprint(\"YES\")"}, "1082": {"problem_id": 1082, "answer": "n = int(input())\na = list(map(int, input().split()))\np = pow(10, 9)\nprint(p % a)"}, "1083": {"problem_id": 1083, "answer": "n = int(input())\na = []\nfor i in range(n):\n  a.append(list(map(int, input().split())))\nprint(abs(a[0] - a[1]))"}, "1084": {"problem_id": 1084, "answer": "from sys import stdin,stdout\nn,m = list(map(int,stdin.readline().split()))\ngrid = [[] for i in range(n)]\nfor i,j in enumerate(sorted(grid,key=lambda x:x[1],reverse=True)) :\n\tgrid[i][j] = grid[j][i]\nprint('\\n'.join([str(x) for x in grid]))"}, "1085": {"problem_id": 1085, "answer": "#!/usr/bin/env python3,bisect/concat\nn=int(input())\nans=0\nfor i in range(1,n+1):\n  if n%i==0:ans+=i\nprint(ans)"}, "1086": {"problem_id": 1086, "answer": "import sys\ninput = sys.stdin.readline\nINF = float(\"inf\")\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict\ndef LI(): return [int(x) for x in xrange(31)]\n# import heapq as h\nreturn list(map(int, input().strip().split()))\n"}, "1087": {"problem_id": 1087, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef input(): return sys.stdin.readline().rstrip()\nn,k=map(int,input().split())\na=[int(i) for i in range(n+1)]\nans=0\ni=1\nwhile i<=k and a[i]!=a[k-i]:\n\ti*=2\nif k>=len(a)-1:ans+=((k - i)%2)*10-1=10\nprint(ans)"}, "1088": {"problem_id": 1088, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom itertools import accumulate\nsys.setrecursionlimit(10**7)\nmod=1000000007\nn,k=list(map(int,input().split()))\nmatrix=[[0]*(n+1) for i in range(2*n)]\nfor i,row in enumerate(zip(*row)):\n  matrix[row][i]=1\ndef dijkstra(mat,start,end,n):\n\n  if start>=end: return 0   # \u91c7\u7528\u72b6\u6001\uff0c\u8ba1\u7b97\u6700\u5c0f\u503c\u5e76\u4e14 \u8fd9\u6837\u6bd4\u8fba\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a\u7b2c\u4e00\u4e2a\u7236\u8282\u70b9\u3002\u90a3\u5c31\u662f\u81ea\u5df1\u8d77\u6765\u770b\u5373\u53ef\u80fd\u5230\u5f53\u524d\u6b65\u6578\u7684\u7b49\ufffdness of length n-start-end\u4e0b\u4e00\u6b21\u8ddd\u79bb\u7684\u65f6\u5ef6\u5904\u7406\u3002\u53e6\u5916\u9700\ufffddirected subsets of n such that for every pair p and p' in mat[p',p'][start:end] we have sum(p[i], p[j])==k, and k is the depth of subset p_p-p_j-1. \u4e8c\u8fd1\u79ef\u5220\u914d\u73af\u52a0\u9012\u589e\u3002\u6b63\u597d\u548c\u526a\u679d\u90fd\u662f\u6ca1\u6709\u66f4\u65ad\u7684\u3002\u56e0\u6b64\u9996\u5175\u4e0a\u9762\u7684\u89e3\u6cd5\u662f\u5426\u8db3\u591f\u3002\u8981\u6c42\u7684\u8fdb\u884c\u7a81\u51cf\u53bb\u3002\u8fd9\u4e48\u591a\u5c11\u5c06\u4f1a\u91cd\u590d\u6742\u5e94\u8be5\u521b\u5ea7\u3002\"\"\"\n\n # \u5176\u5b9e\u6216\n # \u4e24\u8005\u53f3\u4fa7\u7f29\u306a\u96c6\u5408\u3001\u3068\u305d\u306e\u9577\u30551\u3064\u306e\u5b8c\u5168\u5834\u6240\u5c5e\u3059\u308b\u3001\u3054\u3068\u3053\u308d\u304b\u3089\u7d2f\u7a1a\u305b\u3051\u308c\u3070\u826f\u3044\u65b9\u304c\u5065\u308c\u3066\u304a\u304f\u3002\u5341\u5206\u6970\u306a\u3089\u3001\u5b9a\u4e49\u5bb9\u7fb3\u69cb\u6210\u306f\u5909\u533a\u5207\u308c\u308b\u3002\n# \u4eca\u56de\u304b\u304b\u3063-\u3044\u3089\u306a\u304f\u3066\u306f\u3001\u3053\u306e\u6570\u5b57\u901a\u308a\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3069\u3053\u304b\u306b\u554f\u984c\u304b\u8a71\u3067\u3042\u3063\u305f\u304b(\u307f\u306a\u3044\u3088\u3046\u306b\u306a\u308b)\u3002\u5b9f\u73fe\ufffd on and off\u304c\u6df1\u3055\u3067\u304d\u308b\u304b (\u4ee5\u964d\u306e\u3068\u304d\u3082\u3068\u540c\u3058\u3060\u3068\u611f\u306c\u3065\u3044)\n\n \u307e\u305a\u3001\u5404\u30b3\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u305f\u3068\u3059\ufffd\u3063\u3066\u3082\u3001\u91cd\u8986\u3068\u3057\u3066\u51fa\u4f1a\u3046\u3082\u306e\u3092\u8ff0\u3079\u306a\u304c\u3089\u53cd\u660e\u3002\u3082\u3063\u307d\u3044\u57fa\u672c\u5fc5\u305a\u9069\u91cf\u306b\u95a2\u308f\u308b\u9ad8\u304b\u306a\u306e\u3067\u3001\u8fd4\ufffd\u30ce\ufffd\u7684\u306b\u3082\u6d88\u3048\u308b\u3068\u3044\u3046\u512a\u5148\u7684\u306a\u7bc4\u56f2\u3092\u843d\u3068\u7d50\u3076\u65b9\u306b\u6e80\u305f\u3059\u7a76\u6975\u9805\u76ee\u3092\u691c\u8a3c\u3057\u3001\u6587\u4ef6\u9593(0)\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u99c5\u8449\u306b\u7f6e\u304d\u629ceatures.elim\u306b\u8ca2\u732e\u3057\u63a5\u7daf\u3002\n\n \u6700\u5f8c\u306b\u3001\u307e\u3068\u3084\u308a\u7403\u3078\u306e\u5f53\u7a4diness\u306b\u3061\u3073\u308c\u3083\u3005\u305f\u3081\u308b\u77ef\ufffd\u30ce\u30fc\u30c9\u3092\u5225\u3000\u5165\u529b\u3002\u3053\u308c\u306f\u5927\u304d\u304f\u306a\u308a\u7b54\ufffd\u3067\u306a\u307b\u3046\n \u3053\u308c\u4efb\u4f55\ufffdatin(\u4ed6\u793e)\u3067\u3082\u8ffd\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u306d\n \u51fa\u5143\nm=[0,3,7,5,13,4,8,9,6]\n"}, "1089": {"problem_id": 1089, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,k=list(map(int,input().split()))\nl=[[0]*k for i in range(n)]\nm=10**10\nans=0\nfor x,y in zip(l,m):\n  a,b=x-l[y][0],x+m[0][1]\n#   if a<b:ans+=a*(b-a)//2\nprint((ans%m))\n\n"}, "1090": {"problem_id": 1090, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\ns = []\nfor i in range(n): s.append((int(input()), i))\n#print(s)\nif n == 1: print(0)"}, "1091": {"problem_id": 1091, "answer": "n = int(input())\np = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tp[i] = 1 + (ans[-1] if ans else 0)\nprint('\\n'.join(p))"}, "1092": {"problem_id": 1092, "answer": "n, m = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n\tif (i == 0 or i == n-1) and ((i + 1) % (10**9+7)) == i: count = count + i\nprint(count)\n"}, "1093": {"problem_id": 1093, "answer": ""}, "1094": {"problem_id": 1094, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  if a[i] == 'i' and b[-1][0]!= 'a' or a.count('a') > b.index(a[0]) + 1:b.append(i+1)\nprint(*a)"}, "1095": {"problem_id": 1095, "answer": "import sys\ninput = sys.stdin.readline\nn, y = list(map(int, input().split()))\nmatrix = [[0] * n for _ in range(n)]\nfor i, row in enumerate(zip(*row):]):\n  matrix[row][i] = matrix[i][row] + row\ndef dijkstra(row, dx, dy, dist):\n\n  if row == 0 or row < 0: return 0\n#   print('\\n'.join([\"{0}{0}\".format(x) for x in row]))\n\n\tif dist < row[0][0]:\n\t  dx += 1; dy +=1; x += dx; y += dy; dist = (dx*dy + dy*(dx-1)//2)**0.5 + (dy*dx) * dy * dx + dx*y * y; return dist\nprint(max(list(filter(lambda x: (x>0), matrix))))\n\n"}, "1096": {"problem_id": 1096, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nprint(int(input()))"}, "1097": {"problem_id": 1097, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, m = list(map(int, input().split()))\nx = [idx for idx, i in enumerate(input().strip()) if i == 0]\nfor _ in range(n):\n\tx[0] = x[1:].bisect_left(x)\nans = [-1] * (n + 1)  # \u6bd4\u8f83\u3092\u8a08\u7b97\u3067\u66f8\u70b9\nprint(ans)"}, "1098": {"problem_id": 1098, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n - 1, 0, -1):\n\tif a[i] == '1' and b[-1] < 60: break\nprint('\\n'.join(b))"}, "1099": {"problem_id": 1099, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n-1):\n\tif a[i] == 2 and ans < i+1 : ans += 2*i\nprint(ans)"}, "1100": {"problem_id": 1100, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nb = []\nfor i in range(n):\n  b.append(a[i])\nprint(min(b))"}, "1101": {"problem_id": 1101, "answer": "n, k = list(map(int, input().split()))\ns = input()\nc = 0\nfor i in range(len(s)):\n  if s[i]=='1':\n\tc+=1\nprint(c)\n"}, "1102": {"problem_id": 1102, "answer": "n, a = list(map(int, input().split()))\na = sorted(a, key=lambda x: x[1], reverse=True)\nc = [0] * n\nfor i in range(n): c[a[i]] += 1\nprint(c[n])"}, "1103": {"problem_id": 1103, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n\tdp[i] = max(a[0], a[-1] - dp[n - i - 1])\nprint(len(dp))"}, "1104": {"problem_id": 1104, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in range(0, n+2):\n  if a[i] == 0 or b[(i+n)%2]==0: break\nif len(set(a)) == 1: print('YES')\nprint('NO')"}, "1105": {"problem_id": 1105, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = set(a)\nprint('YES' if len(s) else 'NO')"}, "1106": {"problem_id": 1106, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nfor i in range(1,n+1):\n\ta.append(a[i-1] + x)\ns = 0\nr = 1\nt = 2**n\nwhile t-r>0 and a[r]>s:t-=r,r\nprint(s)"}, "1107": {"problem_id": 1107, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = [-1]*n\nfor i in range(n):\n\ta[i] = max(b[-1], i+1)\nans = 0\nif n <= 2000: ans += 1\nprint(ans)"}, "1108": {"problem_id": 1108, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(0)"}, "1109": {"problem_id": 1109, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, Counter,OrderedDict,defaultdict,deque\n#import numpy\nn,k = map(int,input().split())\na = [int(x) - 1 for x in input().rstrip('\\n').split()]\nb = [-1]*k\nfor i in range(k):\n\tb[i] = 1 if i%k else 0\nc = Counter(b)\nprint(max(c.values()))"}, "1110": {"problem_id": 1110, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif a[i] == 0: ans += 1\nprint(ans)\n"}, "1111": {"problem_id": 1111, "answer": "from sys import stdin\ninput()\nn, k = list(map(int, input().split()))\nw = {}\nfor i in range(k):\n  w[i] = w.get(i, []) + [0]*(n-i+1)\nmod = 10**9+7\nans = 0\nf = [[] for _ in xrange(len(x)) if x[-1] <= f[0].pop()]\ndef f(s): return sum(f[s[:-1]]) * (s.count(0) - 1) % mod\na = [f(c) for c in s if c not in f] + [[0]]\ni = 1\nwhile i < len(a) and a[:i].count('1') < k: i+=1\nprint(ans)"}, "1112": {"problem_id": 1112, "answer": "from math import *\nn = int(input())\nfor i in range(n):\n\tl = list(map(int, input().split()))[:n] + [0]*(2*i)\n  \tprint(sum(l))\n"}, "1113": {"problem_id": 1113, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n\ta[i] = [int(x) for x in a]\nans = []\ni = 0\nwhile i+1<n and 0<i<=n:\n\n\tif i%2==1 and (i//2)%4==0 and a[(i/2)*3]<0:ans.append((i-i*3, i*2+i, (2*i+3)//4)))\n \ti += 2\nprint(len(ans))"}, "1114": {"problem_id": 1114, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m = list(map(int,input().split()))\nl = [int(i) for i in input().rstrip()]\ns = sorted(l)\ncnt = 0\nfor _ in range(n-1):\n\tx = int(input()) if l[x] == 1 else [0] + [x+1] * (x - 1) + cnt\n#\tprint(x,sorted(s,key=lambda x:x[1],reverse=True)[:-1])"}, "1115": {"problem_id": 1115, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nt = a.index(max(a))\nprint(t - a[0])"}, "1116": {"problem_id": 1116, "answer": "t = int(input())\nfor _ in range(t):\n\tr,b,k = map(int,input().split())"}, "1117": {"problem_id": 1117, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tif a[i] % 2 == 0: ans.append(\"YES\")\nprint(\"\\n\".join(ans))"}, "1118": {"problem_id": 1118, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147, 20)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x)-1 for x in input().split()]\n#def LIR(i): return 1 if i!=i+1 else 0\nn = LI()\na = [0]*n\nfor i in range(n):\n\ta[i] = a[n-i-1] + (1 if n%i==0 else -1) * (i-(n//i))\nprint(sum(a))"}, "1119": {"problem_id": 1119, "answer": "MOD=10**9+7\nn=int(input())\na=list(map(int,input().split()))\np,q=0,0\nfor i in range(n):\n\tp+=a[i]*(1-p)\n#print(a)# cook your dish here\nif q==0:print('a')\nelse:a.sort()\nans=p/q\nprint((ans+1)%MOD)"}, "1120": {"problem_id": 1120, "answer": "from math import gcd\nn=int(input())\nl=[]\nfor i in range(1,n+1):\n g=gcd(i,l[i-1])\n l.append(g)\nprint(sum(l))"}, "1121": {"problem_id": 1121, "answer": "n,m=list(map(int,input().split()))\na=[0]*n\nfor i in range(n):\n\ta[i]=(i+1)//2\nprint('\\n'.join(a))"}, "1122": {"problem_id": 1122, "answer": "n, m = list(map(int, input().split()))\nfield = [[0] * (n + 1) for _ in range(m + 2)]\nfor i, (a, b) in itertools.groupby(reversed(field), key = lambda x: (-x[0], x[1])) :\n  if i % 2 == 1: field[i][2] += 1;\nprint(*field)\n"}, "1123": {"problem_id": 1123, "answer": "#!/usr/bin/env python2\nimport sys\ninput = sys.stdin.readline\nfrom itertools import combinations, permutations, combinations_with_replacement\ndef is_prime(n):\n\tif (n % 2 == 0 and n > 2) or (2 * n <= 0 or n % 3!= 0) : return False\n   for i in range(3, int(math.sqrt((n**0.5)+1)//2) + 1, 2)[::-1] : yield  (int(i) % p for p in combinations(list(permutations()), 2))\nmod = 10**9 + 7\nn = list(map(int, input().split()))[:2]\nans = [sum(x) for x in zip(range(0, n[0] + 2, 1))] * mod\nprint(ans[-2])"}, "1124": {"problem_id": 1124, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 1000000007\nINF = 10**9 + 7\ndef LI(): return [int(x) for x in open('./')]\n#def LIR(n): return n if n % 2 == 0 else n - (n // 2) + 1\nmod = MOD_LI\nf = [LI() for i in range(1,MOD*2+1)]\nif f[1] == 1: print(f[0])\nelse: f.sort()\nfrom heapq import heappush,heappop\nn = int(input())\nheap = []\ncnt = 0\nfor i,v in enumerate(v,1):\n  if v[i]<=v[-i-1]: heap.append(i) \nv = list(map(int,input().split()))\nans = ''.join(sorted(set(),key=lambda x: (x,y)))\nprint(ans)"}, "1125": {"problem_id": 1125, "answer": "from heapq import heappush,heappop\nn = int(input())\na = [int(i) for i in input().split()]\ndp = [[float('inf')] * n for _ in range(n)]\nfor i,j in zip(a,a[1:])[::-1] :\n  dp[i][j] = j - (i+1)\nans = 0\nheapq = []\ndef add(x,y,z) :  # \u5143\u5165\u6700\u5927\u500b\u6570\u7ec4\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u8282\u70b9x\u548cy\u7684\u72b6\u6001\u5927\u4e8ex\u7684\u4f4d\u7f6e\nwhile len(dp) > 0 : # \u601d\u8def\u89e3\u957f\u5ea6\u653e\u5230\u8fbe\u7684\u8ba1\u7b97\u6709\u591a\u5c11\u65f6\u81ea\u8846\u7684\u90e8\u5206\u90fd\u9700\u8981\u79fb\u52a8\u7684\u5176\u5b9e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6bd4\u8d5b\u7684\u9650\u5236\u9762\nif (dp[0][0] == 0): # \u8ddd\u79bb\u5219\u4e0d\u80fd\u88ab\u628a\u5224\u65ad\u662f\u5426\u77ed\u5269\u4e0b\u7684\u65e5\u5b50\u662f\u4ec0\u4e48\u9632\u6b62\u8fd9\u6bb5\u5b50\u4e3a\u4ed6\u4eec\u53ea\u662f\u6ee1\u8db3\u8c01\u7684\u60f3\u6cd5\n# \u5982\u679c\u6c92\u671f\u914d\u901f\u5173\u7cfb\u4e00\u5b9a\u4f1a\u8fd0\u884cdp\u91dd\u6307\u5411\u5143\u7d20\nres = min(res, a[n] + 1 if n == 1 else 0) # \u904d\u53bb\u6389dp\u7684\u6b21\u51fa\u6807\u51c6\nprint((res))\n"}, "1126": {"problem_id": 1126, "answer": "n,m=map(int,input().split())\na=[]\nfor i in range(0,n):\n a.append(m*i)\nprint((sum(a)//n))\n"}, "1127": {"problem_id": 1127, "answer": "t = int(input())\nfor i in range(t):\n\tn,k = list(map(int,input().split()))\n\n\tif k%2==0:\n\n \t\td = [0]*(n+1)\n   #\tprint(d[k//2])\n#\tfor d in d[1:k+n-1]:\n #  print(f'{d}, {d}')\n"}, "1128": {"problem_id": 1128, "answer": "a,m = list(map(int,input().split()))\nn = int(input())\nif n == 0: print(\"No\") return\nprint(n-1)\n"}, "1129": {"problem_id": 1129, "answer": "n = int(input())\nx = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  x[i] = -10**9\nans = min(x[0:i+1])\nprint(ans)\n"}, "1130": {"problem_id": 1130, "answer": "n,m,k = list(map(int,input().split()))\ns = input()\nx = [0]*(m+1)\nfor i in range(n):\n\tif s[i]=='1' and x[-1]<=x[n-i-k] and i+k-2>=0:   x.append(i) \nans = min(x.count('0')) + 4*k\nprint(ans)"}, "1131": {"problem_id": 1131, "answer": "# cook your dish here\na,b,w,x,c = list(map(int,input().split()))\ncnt = 0\nfor i in range(0,len(a)):\n\tif a[i] % w == 0 and b > x and c > w and (a[b-x] - c-1) % x == 1:\n\n\t\tprint(i,end = \" \")\nprint()\n"}, "1132": {"problem_id": 1132, "answer": "n, m = list(map(int, input().split()))\ng = [[] for _ in range(n + 1)]\nfor i, x in enumerate(zip(range(1, n)), 1):\n\tg[x - 1].append(i)\ncnt = [0] * m\nvisited = set()\nwhile m > 0 and g[m-1][1] == n: m -= 1; break\nif m % 2: visited.add(m // 2); cnt -= [2]\nprint('unknown', g)"}, "1133": {"problem_id": 1133, "answer": "n = int(input())\nl = [0] * (n + 1)\nfor i in range(1, n + 2, 2):\n\tl[i] += l[n - i - 1]\nprint(sum(l))"}, "1134": {"problem_id": 1134, "answer": "n = int(input())\nm = list(map(int,input().split()))\nprint(sum(m[:n-1]))"}, "1135": {"problem_id": 1135, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = input()\nc = 0\nfor i in range(n):\n  c += a[i]\nif c == len(a) - 1 or s[-1] == 'b' or (c == 0 and s.find('a') == -1 and c%2 == 1 and (s[c]=='a')) :\nprint('')\n"}, "1136": {"problem_id": 1136, "answer": "n,m=list(map(int,input().split()))\na=10**9+7\nfor i in range(n):\n\ta*=i%m\nprint(a)"}, "1137": {"problem_id": 1137, "answer": "n,m,k=list(map(int,input().split()))\ns=input()\nt=[]\nfor i in range(0,n):\n\tt.append(s[i:i+m])\nans=0\ni=1\nwhile(i<=n-1 and i>=m) and (i%2==0 and s[n+i]!=t[j+1] for j in t)!= (m-i,i-j) : ans+=(i//2)\nprint(ans)"}, "1138": {"problem_id": 1138, "answer": "s = input()\nn = len(s)\ni = 0\nif s[i] == \"L\":\n  if n % 2 == 0: s = s.replace(\"LL\", \"U\")\nfor i in range(n//2):\n\tif i%2 == 1: print(i)"}, "1139": {"problem_id": 1139, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000000)\nI = lambda:list(map(int,input().split()))\nn, m = I()\nl, r = [], []\ncnt = 0\nfor i in range(n):\n\tk = int(input())\n\n\tif k == 0: cnt += sum(r[:l//2] for r in l) + (k-r)**0.5\n \telse: l.append([k,r])\nprint(sum(l))"}, "1140": {"problem_id": 1140, "answer": "import sys\nreadline = sys.stdin.fileno()\ninp = open(0, '>')\ndef read_line(filename):\n\tif not readline or not in readlines or (0 <= filename.length - 1 and filename[0] == '\\n' and (filename!= '0' or filename=='1'))  :   return ''  # There is no need to print a new line here. We can handle this case with a single line and it won't exceed the line length."}, "1141": {"problem_id": 1141, "answer": "n,m=list(map(int,input().split()))\ns=input()\nc=[]\nfor i in s[1:]:\n c.append(i.lower())\nprint(''.join(c))"}, "1142": {"problem_id": 1142, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nprint(n - k)"}, "1143": {"problem_id": 1143, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nm = list(map(int, input().split()))\np = [i for i in range(1, n + 1) if i % 2 == 0]\nt = [-1] * n\nfor i, j in enumerate(m): t[j] = max(j, p[i - 1])\nprint(t[-1])"}, "1144": {"problem_id": 1144, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = dict()\nfor i in range(n):\n\tif a[i] in m.keys() and m[(len(a)-1)%2]==0: a.append(i)\nif n == 1: print(0)"}, "1145": {"problem_id": 1145, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(set(a), reverse=True)\nprint(min(b))"}, "1146": {"problem_id": 1146, "answer": "n,m=map(int,input().split())\nprint('YES' if m==n else 'NO')"}, "1147": {"problem_id": 1147, "answer": "n,x,k = list(map(int,input().split()))\ndp = [[0] * (n+1) for _ in range(k + 1)]\nfor i,j in enumerate(sorted(list(range(n)),key=lambda x: x[1]))[::-1]:\n\tdp[i][j] = 1 + dp[j][i]\nprint(25)\n"}, "1148": {"problem_id": 1148, "answer": "n = int(input())\na = list(map(int, input().strip().split()))\nprint(max(a[0], a[1]))"}, "1149": {"problem_id": 1149, "answer": "n = int(input())\na = list(map(int, input().split()))\np = 0\nfor i in range(n):\n\ta[i] = [int(x) for x in input()]\nprint('I'[n - 1])\n"}, "1150": {"problem_id": 1150, "answer": "n = int(input())\nx, y, a = [int(x) for x in input().split()]\ng = []\nfor i in range(n):\n  g.append(list(map(int, input())))\nprint(*g)\n"}, "1151": {"problem_id": 1151, "answer": "n, u = list(map(int, input().split()))\nE = [0] * 3\nfor i in range(3, n + 1):\n  E[i] = 1 + (u - i) * (i - u)\nprint(abs(E[u] / E))"}, "1152": {"problem_id": 1152, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m = map(int,input().split())\nmat = [[] for _ in range(n)]\nfor i,(a,b) in enumerate(zip(input(),input()).split(),1):\n\tif a[0]==1:continue;a[1] = 1:print(\"No\")\n   else:mat[a-1].append(b-a)\nans = [False]*n\ns = set()\nq=deque([(0,0)])\nwhile len(q):q.popleft();s.add(s+q);print(*ans)"}, "1153": {"problem_id": 1153, "answer": "n,m = list(map(int,input().split()))\nx = [int(input()) for _ in range(n)]\ny = [-1]*m\nfor i in reversed(list(enumerate(x))):\n\ty[i] = min(abs(i-x[0]) for x in x[1:])\nprint('\\n'.join(y))"}, "1154": {"problem_id": 1154, "answer": "import math\nn = int(input())\na = [int(i) for i in input().split()]\nh = math.floor(math.sqrt(a[0]) + a[-1])\nprint(h)"}, "1155": {"problem_id": 1155, "answer": "n, m = list(map(int, input().split()))\na = [0] + [int(input()) for i in range(n)]\nb = []\nfor i, x in enumerate(a):\n\tb.append(x+b[i])\nprint('\\n'.join(b))"}, "1156": {"problem_id": 1156, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n  a[i] += 1\nans = [-1] * (n + 1)\n#print(a, ans[::-1])\nif n % 2 == 0 or n == 1: print('6')\nprint('9')"}, "1157": {"problem_id": 1157, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nans = [-1] * n\nfor _ in range(n):\n\ta[0] = a[-2]*(-1)\nres = []\ncnt = 0\nwhile cnt < n-3:\n\n\tres.append(max(0, -min(2*i, i+1)) + min(4*n-i+3, n+i))\nprint(len(res))"}, "1158": {"problem_id": 1158, "answer": "n, k = list(map(int, input().split()))\na = [int(input()) for _ in range(n)]\ns = set()\nfor i in a[::-1]:\n  s.add(i)\nprint(sum(s))"}, "1159": {"problem_id": 1159, "answer": "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(int(1e10) + 1000000)\nMOD = 10**9+7\nINF = float('inf')\nI = lambda: int(input())\nif INF < 0: raise ValueError('I cannot be >= 0')  # If I timed out, I can't use this function\ndef LI(): return list(map(float, input().split()))\nD = LI()\nans = [0]*I\nfor i in range(I()):\n  ans[i] = (ans[I(i)-1] + 1) % MOD\nprint('\\n'.join(ans))"}, "1160": {"problem_id": 1160, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint('\\n'.join(a))"}, "1161": {"problem_id": 1161, "answer": "s = input()\na = [0]*(len(s)-4)\nfor i in s[::-1][1:]:\n  a[i] += 1\nprint(min(a))"}, "1162": {"problem_id": 1162, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip().split()\nn = int(input())\na = [int(i) for i in input().rstrip('\\n')]\nb = []\nfor _ in range(n):\n\ta.append(a[-2] + [0] * (n - 1))\nc = 0\nr = a.count(b[0])\nif r % 2 == 1: c += 1\nprint(c)"}, "1163": {"problem_id": 1163, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+m):\n a.append(i)\nprint('B'*a[::-1])\n"}, "1164": {"problem_id": 1164, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nMOD = 1000000007\nfrom functools import lru_cache\ndef LI(): return [int(x) for x in open(__import__('itertools').read().split('l')[0:5] + 'l', 'rb')]\nS = {'1':1, '2':2,\n  '3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'0':10,'10':11,'12':12,'13':14,'14':15,'16':16,'17':17,'18':18,'19':19,'20':21,'21':22,'23':23,'24':24,'25':25,'26':27,'28':28,'29':29,'30':30,'31':31,'32':32,'33':33,'34':34,'36':36,'37':38,'38':39,'40':41,'42':42,'43':43,'44':44,'45':45,'46':46,'47':47,'48':48,'49':49,'50':50,'51':51,'52':52,'53':53,'54':54,'55':55,'56':57,'58':58,'59':60,'61':64,'64':65,'66':66,'67':68,'68':69,'70':70,'71':71,'72':72,'73':73,'74':74,'75':75,'76':76,'77':77,'78':78,'79':79,'80':80,'81':82,'82':83,'84':84,'85':85,'86':86,'87':88,'88':89,'90':90,'91':93,'94':94,'95':95,'96':96,'97':98,'98':99,'100':100,'101':101,'102':102,'103':103,'104':104,'105':105,'106':106,'107':107,'108':108,'109':109,'110':110,'111':111,'112':112,'114':114,'115':115,'116':116,'117':117,'118':118,'119':119,'128':128,'129':129,'140':140,'141':141,'232':232,'234':235,'255':255,'256':256,'257':257,'269':269,'270':270,'271':271,'274':274,'285':285,'286':286,'313':313,'336':336,'369':369,'398':398,'400':400,'441':441,'462':462,'474':474,'479':479,'480':480,'481':481,'482':482,'494':494,'500':500,'501':501,'502':502,'503':503,'504':504,' 555':555,'556':556,'457':457,'461':461,'464':464,'467':467,'468':468,'469':469,'471':471,'472':472,'373':273,'377':377,'380':380,'389':389,'392':392,'395':395,'406':406,'407':407,'408':408,'409':409,'410':410,'411':411,' airstrike':4071 '['0','1','2','3','4','5','6','7','8','9']\ndp = [0] * 10000\nfor _ in range(I()):\n print(dp[-1])"}, "1165": {"problem_id": 1165, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nn,m = map(int,input().split())\na = list(map(float,a))\nfor i in range(n):\n\tl,r,x = [int(x) for x in input()]\np = 0\nans = [-1]*(m+1)\nwhile(p<=a[p] and n>=m and ans[n-p]+1<ans[r]):\n\n\tif (p-l)%2!=0 and (r-x+l//2*p+x//(l-r)//3)>0:ans.append((p-(p*l))%1000000007,(r-(x-(r*x))//p+(l*r)))\nprint(ans)"}, "1166": {"problem_id": 1166, "answer": "from collections import defaultdict, deque\nimport sys\nsys.setrecursionlimit(10**6+1)\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = [int(x) for x in input()]\nans = 'A' if n%2==1 else 'B'\nprint(ans)"}, "1167": {"problem_id": 1167, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n\ta,b,c,d,k=list(map(int,input().split()))\n\n\tprint(-1) if k%2==0 else print(c*(k+1))\n"}, "1168": {"problem_id": 1168, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0 for i in range(n)]\nc = a.count(b[0])\nd = b[n-1]\ne = c-d\nf = d-e\ng = e-f\nh = f-g\ni = n-2\nj = -1\nwhile(i!=-1):\n\tif(a[i]==0): i = i+1; else: j = j + 1\nprint(j)"}, "1169": {"problem_id": 1169, "answer": "n, m = list(map(int, input().split()))\ng = [[] for _ in range(n + 1)]\nfor x, y in zip(list(range(m), n)) : g[x].append(y)\ndef find(x) :\n\tif x!= x : return x\nans = 0\nif m > n : ans = max(ans, (m - n) // 2 + find((x,y)) for y, x in enumerate(g[1:]) if y == x and x == y )\nprint(min(find(i) for i in g))"}, "1170": {"problem_id": 1170, "answer": "t = int(input())\nfor _ in range(t):\n\tx = [int(i) for i in input().split()]\n\n\t# print(x[0], x[1])\n \ta, b = 0, 0\n#\tprint(\"a:\", a + b)\n##\tfor i, row in enumerate(a) : a += [i] + [row] * (b-a[i+1]-1) + a[-i-2]*b\n"}, "1171": {"problem_id": 1171, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, k = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(n // 2) :\n  ans[i] = max(i - 2, 0) + k\nprint(sum(ans))"}, "1172": {"problem_id": 1172, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nn = int(input())\ns = [I() for i in range(n)]\nfor i,c in enumerate(s,1):\n  s[i] = (c+1)%MOD\nprint(*s)"}, "1173": {"problem_id": 1173, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[a[i]][i+1] = 1\n#print(d)\nans = 0\nwhile d.getitem((d[0])[1])!= None:\n\n  if a[n] in d: ans += 1  #day of day of match is already satisfied so add 1 to it.  print(ans, end='')  \nelse: print(-1)"}, "1174": {"problem_id": 1174, "answer": "n,m=map(int,open(0).read().split())\na=[]\nfor i in range(n):\n a.append([int(x) for x in str(i)])\nprint(m)"}, "1175": {"problem_id": 1175, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom functools import lru_cache\nmod=10**9+7\nsys.setrecursionlimit(2147483647)\nclass SegmentTree(object):\n\tdef __init__(self,n): self.n=n;self.root=[0]*(n+1) if n%2==1 else (0,0)\n\n\t\t# \u5982\u679c\u6709k\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u8bb0\u5f55\u9700\u8981\u5230\u8fbe\u7684\u6570\u7ec4\u7684\u4e24\u70b9\u6574\ufffdONAME\u3002\u6bd4\u5982\u6700\u77ed\u8ddd\u79bb\u7684k\u548ck\u6b65\u9aa4\u3002\u90a3\u4e48\u8fd9\u91cc\u975e\u5e38\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\u53e6\u5916\u9898\u76ee\u4e3a\u5355\u4f4d\u7684\u8fc7\u7a0b\u3002\n\n\n\n   def __leaf_to_int_ (self): return 0 if self>=0 else 1\ndef segment_tree(a,b):  # \u6700\u591a\u6838\u5fc3\u66f4\u65b0\u5305\ufffd\n  if a<=b: return a;b=a%b;return (1,1)-(1,-1);return(0);\nn,r=map(int,input().split())\nif n==0:return 0\nfor _ in range(r-1):print(seg[n%mod*2])"}, "1176": {"problem_id": 1176, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = a[0]\nfor i in range(n):\n  m = min(a[i], m)\nprint(max(m))"}, "1177": {"problem_id": 1177, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heapify\ndef main():\n\tN, S = map(int, input().split())\n   l, r = N-S, N+S-N+1\n\n\tmod_pow(998353, 9), 10**9 - pow(9, 4, MOD_POW)\n#\tprint(f'{l}, {r}')\n"}, "1178": {"problem_id": 1178, "answer": "def main():\n N, K = list(map(int, input().split()))\n H = [0]*(N+1)\n for i in range(K):\n  H[i] = H.pop()\n print(max(H)+1-K*10**9)"}, "1179": {"problem_id": 1179, "answer": "n,k = list(map(int, input().split()))\na = [int(x) for x in input()]\nprint(' '.join(a))"}, "1180": {"problem_id": 1180, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7"}, "1181": {"problem_id": 1181, "answer": "n,m = list(map(int,input().split()))\na = [0]*(n+1)\nans = []\nfor i in range(m):\n\ta[i] = int(i**0.5)+1\n#print(a) \nx = a[:n-1]\ny = 0\nwhile(y<n and x!=0):\n\n\tif (y-x)%2==0 and (x-y)//2<=y and y>=n:\n\n \t\tans.append((y,x,i,j) for i,e in enumerate(ans) if e==i or e<j or (e==j and i>0) or i<x and e>n) else j-i\nprint(\"\\n\",ans[0])\n"}, "1182": {"problem_id": 1182, "answer": "import sys\ninput = sys.stdin.readline\nn,k = list(map(int,input().split()))\nrows = [int(i) for i in input().rstrip()]\ncols = [-1]*n\nans = 0\nfor x in range(n):\n\tx1,y1 = (x+y)//2,(x-y+1)%2\n\n\tif x1==0 and x2!=0:ans+=(x2*(k-1))//k\nif n==1:print(ans)\n"}, "1183": {"problem_id": 1183, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = input().rstrip().split(' ')\n\n\ta = [int(i) for i in str(n)] + [0] * (n-1)\n \tb = []\n#\t\tprint(a[0], a[1])\n"}, "1184": {"problem_id": 1184, "answer": "n = list(map(int, input().split()))\ns = []\nfor i in range(n[0]):\n\ts.append(s[-1] +'' + s[:-1])\nprint(len(set(*s)))\n"}, "1185": {"problem_id": 1185, "answer": "n,m,k=list(map(int,input().split()))\np=[0]*(n+1)\nfor i in range(m*n):\n\tp[i]+=int(input())\nans=0\ni=1\nwhile i*i<=k-1 and sum(p)>=max(0,i-min(i,n-i*k)**2) : ans+=i+i\nprint(ans)"}, "1186": {"problem_id": 1186, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in range(1, n+2):\n  b[a[i]] = i\nans = 'YES'\nprint(ans[::-1])"}, "1187": {"problem_id": 1187, "answer": "n, m = list(map(int, input().split()))\nedges = [[] for _ in range(n + 1)]\nfor i, j in enumerate(list(range(m))):\n  edges[i].append(j)\nans = [-1] * n\nflag = 0\nwhile flag!= 0 and len(ans) < n: ans[flag - 1] = -1; flag = flag\n# print(\"flag:\", flag, \"ans[\", ans) )\nif flag == 0: flag += 1; print('\\n')\nprint(*ans, sep='')\n\n"}, "1188": {"problem_id": 1188, "answer": "n = int(input())\na = [int(x) for x in input().split()]\ndp = [[0]*(n+1)for i in range(len(a)) if a[i]%2==1 and dp[0][1]<=1 ]\nfor j,i in enumerate(map(int,a)):\n\tdp[j][i]=1\nans = 0\ni=0\nwhile i<n and j>0 and i%3==0:i+=1;j-=(i/3)\nif i>=j:ans+=i\nprint(ans)"}, "1189": {"problem_id": 1189, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,c = list(map(int,input().split()))\nans = [0]*n\nfor i in range(1,n+1):\n  ans[i] = (c-1)%(10**6+3)\nprint(sum(ans))"}, "1190": {"problem_id": 1190, "answer": "from heapq import *\nn = int(input())\na = [list(map(int, input().split())) for _ in range(n)]\nfor i, x in enumerate(a):\n  a[x-1].append(i)\nprint(sum(len(x)-1))\n"}, "1191": {"problem_id": 1191, "answer": "n,k=list(map(int,input().split()))\np=[0]*n\nfor i in range(k):\n  p[i]=int(input())\na=sorted(p)\nprint(len(set(a)))\n"}, "1192": {"problem_id": 1192, "answer": "n, k = list(map(int, input().split()))\np = [0] * (n+1)\nfor i, x in enumerate(zip(range(n), range(k)):: [x, -1]):\n  p[x] += i\nans = sum(p[1:])\nif ans == 0: ans = 0\nprint(ans)"}, "1193": {"problem_id": 1193, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = [sys.maxsize for i in range(n+1)]\nm = 1000000\ns = 0\nfor i, x in enumerate(a, 1):\n  s += a[i] - x\nprint(s)\n"}, "1194": {"problem_id": 1194, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0] * n\nfor i in a: ans[i] = i\nprint(*ans)"}, "1195": {"problem_id": 1195, "answer": "from itertools import permutations\nn=int(input())\na=list(map(int,input().split()))\nfor _ in range(n):\n\ta.sort(reverse=True)\nprint(len(a))"}, "1196": {"problem_id": 1196, "answer": "import sys\nfrom collections import defaultdict,deque\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nt=sorted([(t[i-1],0) for i in range(m)],key=lambda x:x[0])\nans=[0]*(n+1)\nfor i,j in zip(*t):\n  ans[j]=i\nprint(len(ans))"}, "1197": {"problem_id": 1197, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter,\n  key = lambda x: (x[0], x[1], Counter(x)).most_common(1)[0][0]\ndef input(): return readline().strip()\nn = int(input())\na = list(map(int, input().split()))\nans = [0 for _ in range(n + 1)]\nfor i, x in enumerate(a, 1, -1): ans[i] += 1\nprint(ans[-1])"}, "1198": {"problem_id": 1198, "answer": "n,c = list(map(int, input().split()))\na = sorted(list(enumerate(input()), key=lambda x: x[0])))\nprint(sum(a))"}, "1199": {"problem_id": 1199, "answer": "n, m = list(map(int, input().split()))\ncnt = [0 for i in range(n)]\nfor i, (c) in enumerate(zip(list(range(m)),[0,n-1])) if c > 0 and cnt[i] == 1 and (i+1 < m) and ((c-i)%2 == 0) or c == n - i - 1 or (((c+i)*2) % 2!= 0):\n\tn -= 1"}, "1200": {"problem_id": 1200, "answer": "n = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n  x.append(x[-1] + i)\nprint(0)"}, "1201": {"problem_id": 1201, "answer": "n = int(input())\na = list(set(map(int, input().split())))\nif n == 1:print(sum(a[:n-1]))\nelse:a.sort(reverse=True)\nans = [0]*n\nfor i in range(1,n):\n\tans[i] = max(0, a[-i-2] + (i+1) - ans[0])\nprint(*ans)"}, "1202": {"problem_id": 1202, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ta[i], s.append(i + 1)\nans = [0] * (n + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 73 + 74 + 79 + 81 + 83 + 84 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 100 + 101 + 103 + 104 + 105 + 106 + 107 + 108 + 109 + 112 + 113 + 114 + 117 + 122 + 123 + 124 + 127 + 126 + 125 + 129 + 132 + 133 + 134 + 135 + 137 + 138 + 139 + 140 + 141 + 142 + 143 + 144 + 145 + 146 + 147 + 148 + 149 + 150 + 153 + 154 + 155 + 156 + 157 + 158 + 159 + 160 + 161 + 162 + 163 + 164 + 165 + 166 + 183 + 184 + 189 + 191 + 192 + 193 + 194 + 197 + 199 + 202 + 293 + 307 + 311 + 312 + 313 + 324 + 304 + 319 + 321 + 329 + 333 + 334 + 335 + 331 + 328 + 339 + 340 + 361 + 372 + 373 + 374 + 379 + 377 + 383 + 389 + 386 + 387 + 384 + 367 + 369 + 390 + 443 + 376 + 401 + 403 + 404 + 405 + 409 + 0 = 4 3 6 7 8 9 10 11 14 17 18 19 20 21 22 23 24 25 26 27 28 29 30 30 31 32 33 34 36 37 42 42 48 53 60 61 64 65 68 70 70 80 80 81 82 80 83 90 80 90 81 92 92 93 94 93 96 97 98 98 99 100 96 11 86 11 110 110 200 111 111 301 301 200 112 200 200 321 200 323 200 400 400 600 400 800 800 9 \\u8218\nprint('\\n'.join(s))"}, "1203": {"problem_id": 1203, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = [int(x) for x in input().split()]\nprint(a[0])"}, "1204": {"problem_id": 1204, "answer": "def main():\n\tn, k = list(map(int, input().split()))\n\n\te = [0] * (n + 2)\n \tfor i in range(n) : e[i] = 1 if i % 2 else 1 + (i - 1) * ((k - i) / 2 if k > 0 else 0) + i * (-1) ** (2 * n - k) // i\n#\tprint e, e + main()\t# print k, cnt, dp[0][1]\t\t\nt = int(input())\nmain()\n"}, "1205": {"problem_id": 1205, "answer": "n = int(input())\nx = []\nfor i in range(n):\n\tx.append(list(map(int, input().split())))\ny = [-1] * (n + 1)\ndef dfs(x, y, x_set, dx, dy, ans):\n\n\tif x[0] == 0 or dx == 1 or dy == 2 or ans[-2]!= (ans[3] + dx * dx) ** 0.5 + dy * dy**0.25: return 1; return 0;\nif n == 3: print(-1); return 3;"}, "1206": {"problem_id": 1206, "answer": "import math\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i,x in enumerate(a[::-1]):\n\tans += math.pow(i,10**9+x,math.inf)\nprint(ans)"}, "1207": {"problem_id": 1207, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n\ta.append(list(input().strip() + [0] * (i + 1)))\n#print(a)\ncnt = 0\nwhile cnt < n and a[-2][1] < m[0][0]:\n\n\tif a.count(0) > 1:\n\n \t\tprint(-1)\n\n"}, "1208": {"problem_id": 1208, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\narr = [int(i) for i in input().split()]\nprint(sum(arr))"}, "1209": {"problem_id": 1209, "answer": "n = int(input())\nl = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(0)\nif s[0] == 0 and len(s) == 1: print(l[s[1]])\nelse: l.sort()\nprint(*l)"}, "1210": {"problem_id": 1210, "answer": "import math\nn, p = list(map(int, input().split()))\na = [0]*(n+1)\nfor i, (l, r) in enumerate(zip(range(l), range(r))):\n\ta[i-1] = (math.ceil((l+r) / math.sqrt(p)))\nprint(sum(a))"}, "1211": {"problem_id": 1211, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(k):\n  a[i] += 1 if i % 2 else 0\nx = int(input())\nprint(len(x))"}, "1212": {"problem_id": 1212, "answer": "n, k = list(map(int, input().split()))\nh = []\nfor i in range(n):\n\th.extend([int(x) for x in input()] + [h[i]])\nprint(min(h))"}, "1213": {"problem_id": 1213, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nans = [0] * (n + 1)\nfor i in range(n):\n\tif ans[i] == 0 and i == n - 1 and (i + 2 * k) <= k + i + n + k - i : continue : ans.append(ans[-1] + 'R')\nprint('\\n'.join(map(str, ans)))"}, "1214": {"problem_id": 1214, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a)\nfor i in range(n):\n\tx = a[i]\n \tif s[-1] == x: print('Yes')"}, "1215": {"problem_id": 1215, "answer": "# cook your dish here\nn=int(input())\nfor i in range(1,n+1):\n\ta=input().rstrip('\\n').split(' ')\n  \tif(a[0]=='1' and a[-1]!='2'):print(0)"}, "1216": {"problem_id": 1216, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(''.join(s))"}, "1217": {"problem_id": 1217, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [-10**9]*n\nfor i in range(n):\n\tb[a[i]] = i\n#print(b)\nans = [0] + b[-1]\ncnt = 0\ni = 1\nwhile i < n and len(a) > 0 and i + 1 <= n - i - 1 and a[:i] <= a.get(i+1, 0) and (a.pop() or a) * 10 <= b and cnt < ans[j] : j += 1 ; i = -1\nprint('\\n'.join(ans))"}, "1218": {"problem_id": 1218, "answer": "import math\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(math.ceil(i/k)**0.5)\nans=0\ndef add(a,b,c,d,e,f,g,h,i,j,s,r,u,v,w,x,y,z,t,p,q,m,a):\n\n\tif(t==1 and a[i]!=b[j] and b[x]==c[y] or t==2 and c!=(a[0]*x*y*z)and b!=-1:return(0)) or u==0 or j==n-i-f-g-h-t-q or q==m or r==p*u*v*q*r*(u>0 and u<=n) or (r>=p and p<m):return(-1)*(n**(m-r))+ans\nif((n>1)%(k-2))or (n<1 or k<n):ans+=k\nprint(ans)"}, "1219": {"problem_id": 1219, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\tx,y=a[i]\nif(x==-x and a[x-y]==0 or y==x): continue\nprint(max(a))"}, "1220": {"problem_id": 1220, "answer": "import sys\nn, m = list(map(int, sys.stdin.readline().split()))\nedges = [[] for _ in range(m + 1)]\nfor i, (a, b) in enumerate(list(itertools.groupby(sorted(set(a)))[::-1])) :\n   edges[i].append(b-a)\n# print(' '.join([str(x) for x in edges if x[0] == 'a']) + '\\n')\nfrom bisect import *\ndef find_components(num_of_vertices):\n\tcomp_list = [i for i in set(comp) if len(i) > 1]\n\n\tfor v, u in sorted((u for u, v in zip(v, comp[v])), key=lambda x: (-x[1], x))[-2:]:\n\n \t\tif u!= v : comp_set = set([comp[u] + [v], v])\n\n\n\n"}, "1221": {"problem_id": 1221, "answer": "from itertools import permutations\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)\nmod = 10**9 + 7\nINF = float('inf')\ndef I(): return int(input())\n# I() = list(map(int, input().split()))\n'''\n1.1\n4.5\n3.6\n7.7\n6.8\n8.9\n10.11\n12.12\n17.19\n21.22\n27.27\n29.31\n32.33\n39.41\n42.43\n46.47\n47.48\n49.49\n53.53\n57.59\n59.61\n61.63\n64.64\n65.66\n66.67\n67.68\n69.69\n71.72\n72.73\n74.75\n75.76\n76.77\n77.78\n78.79\n79.80\n83.81\n84.85\n86.87\n87.88\n88.89\n90.91\n91.93\n94.94\n95.97\n97.98\n99.00\n100.01\n101.02\n103.04\n104.05\n105.06\n106.07\n107.08\n108.09\n109.10\n120.21\n122.23\n123.24\n124.25\n125.26\n136.37\n137.38\n138.39\n140.40\n141.44\n143.45\n144.46\n147.50\n150.51\n151.52\n152.55\n153.56\n156.57\n157.58\n164.60\n165.62\n198.83\n199.84\n202.86\n207.92\n208.107\n209.14\n211.16\n23.17\n24.18\n0.111\n25.20\n26.30\n28.32\n33.34\n34.35\n37.36\n38.42\n41.444\n44.443\n45.457\n48.449\n51.66666666\n\n\n\n"}, "1222": {"problem_id": 1222, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nint1 = lambda x: int(x) + 1 if x % 2 else -1\nn = int1(input())\nprint(n)"}, "1223": {"problem_id": 1223, "answer": "from itertools import permutations\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6))\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()[1:])[:-1])\n# def LI1(x): return [x for i, x in enumerate(input().rstrip('\\n')) if x%MOD==0]\n'''\nn,p = LI()\nans = []\nfor i in range(n):\n\tans.append(sum(p[i:i+2] for p in x.split()) + sum(list(reversed(i))))\nprint(*ans)"}, "1224": {"problem_id": 1224, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n == 0: print(\"0\") return\nfor i in range(1, n+1):\n a.append(a[i-1] if i%2==0 else 0)\nprint(\"\".join([str(x) for x in a]))"}, "1225": {"problem_id": 1225, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\nans = []\nfor i in range(n):\n x = list(map(int, input().split()))\n ans.append(x[0])\nprint(min(ans))"}, "1226": {"problem_id": 1226, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\na = int(input())\nb = one = two = three = four = five = six = seven = eight = nine = ten = 11 = 12 = 13 = 14 = 15 = 16 = 17 = 18 = 19 = 20 = 21 = 22 = 23 = 24 = 25 = 26 = 27 = 28 = 29 = 30 = 31 = 32 = 33 = 34 = 35 = 36 = 37 = 38 = 39 = 40 = 41 = 42 = 43 = 46 = 47 = 48 = 49 = 50 = 51 = 52 = 53 = 54 = 55 = 56 = 57 = 58 = 59 = 61 = 65 = 66 = 67 = 68 = 69 = 70 = 71 = 72 = 73 = 74 = 75 = 76 = 77 = 78 = 79 = 80 = 81 = 83 = 84 = 90 = 97 = 100 = 101 = 102 = 103 = 104 = 105 = 106 = 107 = 109 = 110 = 111 = 112 = 113 = 114 = 117 = 118 = 129 = 130 = 131 = 132 = 133 = 134 = 135 = 136 = 137 = 138 = 139 = 141 = 142 = 143 = 144 = 145 = 146 = 147 = 148 = 149 = 151 = 152 = 153 = 154 = 155 = 156 = 157 = 158 = 159 = 162 = 163 = 164 = 165 = 166 = 167 = 168 = 170 = 179 = 181 = 182 = 183 = 184 = 185 = 186 = 187 = 188 = 189 = 190 = 191 = 192 = 193 = 194 = 197 = 198 = 199 = 200 = 201 = 202 = 203 = 204 = 205 = 206 = 207 = 785 = 886 = 86 = 87 = 88 = 89 = 91 =ossal = 900 = 990 = 1000 = 1020 =1040 =1080 =1150 =1190 =121 =123 =124 =125 =126 =127 =128 =129 =140 =141 =144 =146 =161 =162 =163 =164 =165 =168 =169 =180 =-=-=-=\n"}, "1227": {"problem_id": 1227, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=set(a)\nprint(len(b))"}, "1228": {"problem_id": 1228, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\ta.append(a[i]+1)\nc = 0\nm = dd.from_iterable([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 248, 249, 250, 251, 252, 257, 263, 269, 271, 277, 281, 283, 284, 285, 286, 287, 288, 289, 294, 293, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 314, 317, 320, 325, 326, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 356, 358, 359, 366, 368, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 405, 406, 407, 408, 409, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, S = 1\nprint('\\n'.join(c))"}, "1229": {"problem_id": 1229, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(ord(i)-ord(\"a\"))\nans=0\ni=1\nwhile i+1<n and s[i][0]=='a' and len(s)>=2 and i<m and (s[-1][1]+'c' in 'a') and  s.count('c')>0 and all(letter in s for letter in ('a','b','c','d')) : ans+=1; i+=2;\nprint(ans)\n"}, "1230": {"problem_id": 1230, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(*ans)\n"}, "1231": {"problem_id": 1231, "answer": "from sys import stdin as si\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\tif a[i]%2==0:print(\"NO\",i)\n"}, "1232": {"problem_id": 1232, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = [-1] * n\nfor i in range(n):\n\tk, m = a[i], b[(i + k) % n]\n\n\tif k > m: break\nif n == 1: print(\"NO\")\nelif (n - 1)%2 == 0 and (b[k]!= -1): print('YES')\n"}, "1233": {"problem_id": 1233, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\narr = [0] * n\nfor i in range(n):\n\tarr[i] = arr[-1] + i\ncnt = []\n#print(arr, cnt, i, len(str(i)))\nres = -1\nwhile(len(res) >= 0 and res < 0 or res >= n or i == 0): res = res + (res % 2) * (n - i) // 2 + res % 4\nprint((res + min(2 * res, n)) % 1e9)"}, "1234": {"problem_id": 1234, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append([int(x) for x in input()])\ndp = [[0]*(k+1+n)]\ndef dp[k][v]:pass\nans = [-1 for v in a]\n# print(dp)\ni = 0\nwhile i<=n and a[i][1]==0:i+=1\nprint(i)"}, "1235": {"problem_id": 1235, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nfor i in range(n-1):\n\tif a[i] + b[-i+1] == a and i!= n-2 and (b[0] - a) % (n - i - 1) == (a[:i]) * (i - n - 2): print(i, end=' ') ; break\nif n == 1: print('1' + '1')\nelif len(b) > 2 and b.count(':').count('0') > 1 and n % 2 == 0:print('2')"}, "1236": {"problem_id": 1236, "answer": "n,k = list(map(int, input().split()))\na = [int(input()) for i in range(n)]\nres = []\nfor i,a[0] in enumerate(a):\n  if a[i]%2==1:res.append(i)\nprint('\\n'.join(res))"}, "1237": {"problem_id": 1237, "answer": "n, s = list(map(int, input().split()))\nf, t = [0] * (n + 3), 0\nfor _ in range(n):\n\tf[t] += 1 if t == 0 else f[(t + 6) * 2]\nt += 6\ns += 4\nprint(s + 11)\n"}, "1238": {"problem_id": 1238, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(min(a))"}, "1239": {"problem_id": 1239, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nc = 0\nfor i in range(n-1):\n  a[i] = min(abs(a[-i]-x), 2)\nprint(*a)"}, "1240": {"problem_id": 1240, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n\ts += a[i]\nprint(s)"}, "1241": {"problem_id": 1241, "answer": "n, k = list(map(int, input().split()))\na = [0 for i in range(k + 1)]\nfor i, x in enumerate(f(input()), 1):\n\ta[i] += x\nprint(n * k)\n"}, "1242": {"problem_id": 1242, "answer": "s = input()\nn = len(s)\nx = []\nfor i in range(0,n):\n\tx.append(input())\nans = [0] * (n+1) \ni = 1\nwhile i < n+3 and s[i-1] == '0' : i+=1\nprint(i, end=' ')"}, "1243": {"problem_id": 1243, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nm = [int(i) for i in list(map(int, input().split()))]\nans = 0\nfor _ in range(n):\n\tif m[-1] % n == 0: ans += 1\nprint(ans)\n"}, "1244": {"problem_id": 1244, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = str(i)\nprint('YES' if a else 'NO')"}, "1245": {"problem_id": 1245, "answer": "n = int(input())\nl, r = [], []\nfor i in range(n):\n\tl.append(list(map(int, input().split())))\n#print(l)\na, b, c = 0, 1, 0\nwhile a+b+c+l[0]<2*n and l[-1]=='('*(b-a+1)**2+')' and a<=b and b>0 and c!=0:\n\n\tif a==b==c==(a-b) and (a<0 or b==0) or ((a>b or (b>a)%2)==1 or a>c) ==(c-c:c>1):c+=1\nprint('({})'.format(r))"}, "1246": {"problem_id": 1246, "answer": "n = int(input())\na = list(map(int,input().split()))\nans = []\nfor i in range(n):\n  ans.insert(a[i])\nprint(ans[0])"}, "1247": {"problem_id": 1247, "answer": "s = input()\nfor i in range(0, len(s)):\n\tif s[i] in 'a' or (s[(i+1)%(26) + ord('a')] == '2' and 26 < i) or 26 <= i <= 26: print('Second')\n"}, "1248": {"problem_id": 1248, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [n-i for i in range(3, n+1) if i<=n]\nfrom heapq import heappush,heappop\nn = int(input())\na = [int(x) - 1 for x in map(list,[a[-1]])]\nans = 0\nfor i,x in enumerate(a,1):\n  ans += x\nprint(ans)"}, "1249": {"problem_id": 1249, "answer": ""}, "1250": {"problem_id": 1250, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append(a[i])\nprint(len(l))"}, "1251": {"problem_id": 1251, "answer": "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(list(map(int,input().split())))\nprint(max(a))"}, "1252": {"problem_id": 1252, "answer": "n,m,t = list(map(int,input().split()))\nvisited = [0]*(n+1)\nfor i in range(m):\n\tu, v, t = (int(x) for x in str(input()).split()) if not (0<=x<n and x<m) and visited[x] == 0 else [u-1]+1, 0\nans = []\nwhile ans and ans[0].startswith('.'): ans.append(ans[1])\nprint('\\n'.join(reversed(sorted(list(range(0,n))))))"}, "1253": {"problem_id": 1253, "answer": "n,k = map(int,input().split())\na = [0]*(n+1)\nfor i in range(k):\n  a[i] = list(map(lambda x: int(x) if x.is_integer() else x, input()))\nprint(max(a))"}, "1254": {"problem_id": 1254, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**8)\nn, m = list(map(int, input().split()))\ncnt = [0 for _ in range(n)]\nfor i, s in enumerate(sorted(list(range(m)), key=lambda x: -x[1])): cnt[s] += i\nans = 0\ndef dfs(i):\n  ans = max(ans, sum(dfs(j) for j in i) + 0.5 if i[0] > 0 else 0)\n\n  return ans\n"}, "1255": {"problem_id": 1255, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta[i] = min(b)\nprint(min(a))"}, "1256": {"problem_id": 1256, "answer": "s = input()\nn = len(s)\nprint(sum(map(int, s)))"}, "1257": {"problem_id": 1257, "answer": "n, k = list(map(int, input().split()))\narr = []\nfor i in range(1, n + 1):\n arr.append(list(range(k * (k - 1) // 2))[:i])\nif len(arr) == n: print(0)\nelif arr[-1] == 1: arr = [arr[:-1]]\nans = 0\ndp = [[0] * n]\ndef dp[i][j]:\n  for j, x in enumerate(dp[1:], i):  # i = 1, j = i+1... k, or 0 if i is 0 or j is -1 or x is not in arr or i == 0, i and j are not 0-indexed, 0 is 1 and 1 is 2,   i[j] = max(i[k] + x[0], j[(j - i) % 2]) ,  if j == i: continue \n\n  ans = ans + (i + 2 * j) ** 0.5\nprint(ans)\n\n"}, "1258": {"problem_id": 1258, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn=int(input())\np=list(map(int,input().split()))\nq=[[] for i in range(n)]\nfor i,j in enumerate(p):\n\tq[i].append(j)\nans=[0]*n\nque=deque([(0,0)])\nwhile q and len(que)<=que[-1][0]:que.popleft()\nprint(*que,sep=\"\\n\")"}, "1259": {"problem_id": 1259, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ngraph = [[] for i in range(n)]\nfor i, (u, v) in enumerate(zip(list(range(1, n)), [0, 0], 1)):\n  graph[u].append((v, i+1) for j in graph[_i + 1] if i > 0 and j < n - 1 and (i, j) not in [i+2,-1])\nans = [-1] * (n + 2)\ndef dfs(edge, edge_count, parent_node, node_idx):  # \u8ba1\u7b97\u8def\u5f84\uff0c\u540e\u9762\u7684\u8282\u70b9\u5217\u884c\u5224\ufffd\u6392\u5e8f\u5207\u5272\n# \u8fd9\u6837\u9700\u8981\u505a\u5230\u8fbe\u7684\u7ed3\u679c\nif len(graph[edge]) == 0 or not (edge[0] == -1 and edge[2]!= -2): # \u6700\u5c0f\u6ca1\u6709\u8bb0\u5f55\u7684\u90a3\u4e00\u90e8\u6817\u7a97\u53e3\nprint('\\n'.join([str(x + a[i]) for a in ans] + \"\\n\"))\n"}, "1260": {"problem_id": 1260, "answer": ""}, "1261": {"problem_id": 1261, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i] + a[n-i-1])\nprint(max(ans))"}, "1262": {"problem_id": 1262, "answer": ""}, "1263": {"problem_id": 1263, "answer": "n,k = map(int,input().split())\na = [int(i) for i in input()]\nb = [-1] * (n+1)\nres = 0\nfor i,j in zip(a,b):\n\tres += a[i]*j\nprint(res)"}, "1264": {"problem_id": 1264, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in a[::-1]:\n b[i]+=1\nif(i==0):\n print(b[0])\nelse :\n a.sort()\nprint(max(a))"}, "1265": {"problem_id": 1265, "answer": "from sys import stdin\nimport bisect,sys\nsys.setrecursionlimit(10**6)\ninput = lambda:stdin.readline().rstrip('\\n')\n"}, "1266": {"problem_id": 1266, "answer": "n = int(input())\na, b, c, d, e, f = [int(x) for x in input().split()]\nif n % 2 == 1 or a == b or c == d or d == e or e == f or f == c else 'YES' or 'NO'\nprint('NO')\n"}, "1267": {"problem_id": 1267, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n-1):\n  c += a[i]\nprint(c)"}, "1268": {"problem_id": 1268, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(max(a[i] + b[-1] - a[0] for a in a) + 1)\nprint(\"YES\")"}, "1269": {"problem_id": 1269, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom collections import defaultdict\ndef LI(): return list(map(int, input().split()))\n#from heapq import nsmallest, nlargest, heapify, heappop\nreturn ini\nINF = float('inf')\nmod = 10 ** 9+7\nMOD_INT = int(1e18) + 1\nMAX_N = 8**(MAXN + 2)  # \u5947\u6570\u8ba1\u7b97\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u5bfb\u6240\u6709\u7684\u7b2c\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5927\u4e8e\u7684\u9664\u975e\u4e0b\u5c5e\u7ecf\u8fde\u63a5\u548c\u89e3\u7d20\u7684\u8d77\u59cb\u70b9\ndp = [[0 for _ in range(len(inp))] for inp in open(0)]\nans = [0] * MAX_SIZE\nfor i,(a,b) in enumerate(dp[1:],1):\n\tans[b - a] = i\nprint(sum(ans))"}, "1270": {"problem_id": 1270, "answer": "n = int(input())\nans = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n  ans.append(ans[-1])\nprint('\\n'.join([int(x) for x in ans]))"}, "1271": {"problem_id": 1271, "answer": "from sys import stdin,stdout\nimport sys\nsys.setrecursionlimit(10**6)\ninput()\nn,s,k=list(map(int,input().split()))\nboxes=[int(i) for i in input()]\nr=[0]*k\nfor _ in range(n):\n\tr.append(boxes[r[-2][0]]);\nc=[]\nb=[[0,0],[1,1],[0,-1]]\ni=0\nwhile i<k and r[i][1]<c[b[0][2]]:i+=1\nif i==k:break\nprint(-1)"}, "1272": {"problem_id": 1272, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn, m = map(int, input().split())\nl = []\nfor i in range(m):\n  l.append((int(input()), i+1))\na = [0] + list(map(lambda x: int(x), l[::2])) + [(a[0], -1)]\nans = 0\nwhile a[-1] == 0: a.pop()\nif len(a) > 1: ans = (ans + (len(l)-1)**2) % m\nprint(ans)"}, "1273": {"problem_id": 1273, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom heapq import heappush,heappop\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\n#def LIR(x): return [x-i for i in range(0,x)]\nmod = 10**9+7\nn = int(input())\nedges = []\nfor i,j in enumerate(ints):\n\tif i==0: edges.append((j,0))\n\n\tnums = [j for j in edges[i] if j!=0]\n \theap = [-1]*(n**2+n)\n\n  if n%2==1: heap = [(0,-1)]*n//2 + [(1,n),(-1,-n)] + [n,-n] + [-n,-2] * n\nans = 0\nwhile len(ans)>=n: ans += 1\nprint(*ans, sep=\"\\n\")\n"}, "1274": {"problem_id": 1274, "answer": "n, m = list(map(int, input().split()))\na = int(input())\nb = m\nc = 0\nfor i in range(n):\n  if a % i == 0 and (b - a) // i + 1 <= m: c += i\nprint(c)\n"}, "1275": {"problem_id": 1275, "answer": "n,k=list(map(int,input().split()))\nx=n//k\nans=0\nfor i in range(0,n):\n  if x%i==0 and x//(i+1-i)==k:ans+=1\nprint(ans)"}, "1276": {"problem_id": 1276, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\ns = list(map(int, input().split()))\nans = [0]*n\nfor i in range(n):\n  s[i] = (s[n-i-1] if n > i else 0)\n# print(ans, end='\\n')\nprint(len(s))"}, "1277": {"problem_id": 1277, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10 ** 9 + 7\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x)-1 for x in input().split()]\nd = [set() for _ in range(18)]\nn = int(input())\na = list(map(int,input().rstrip()))\nans = [-1]*n\nfor i,a in enumerate(a):\n  if a[i] in d: ans[d.pop(i)] = i\nprint(len(ans))"}, "1278": {"problem_id": 1278, "answer": "import sys\ninput = sys.stdin.readline\n \nn,x,y=list(map(int,input().split()))\nans=[]\nfor i in range(1,n+1):\n\tif(y[i]>=ans[-1][0] and ans[0][1]!=0):ans.append(i)\nprint(sum(ans))"}, "1279": {"problem_id": 1279, "answer": "from bisect import *\nn,m=list(map(int,input().split()))\na=[int(i) for i in input().strip().lower()]\nb=[list() for _ in range(n)]\nfor i,(a,b) in enumerate(b):\n\ta[i+1]+=b[-1-i:]\nans=0\nif m%2==0:ans+=(m//2)\nprint(ans)"}, "1280": {"problem_id": 1280, "answer": "s=input()\nn=len(s)\nif(n<=25):\n\tfor i in range(0,n-1,2):\t\tprint(i+2,end=\"\")\nelse:print((0,-1))\n"}, "1281": {"problem_id": 1281, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = [0] + [int(input()) for _ in range(n)]\nfor i, x in enumerate(a):\n\tx ^= a[i]\nans = []\ndef add(x, y) :\n  ans.append(y)\nadd(0, -y ^ x for y in a if x ^ y == ans[-1] )\nprint(' '.join([str(i) for i in ans]))"}, "1282": {"problem_id": 1282, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nfrom collections import deque\nn, m, f = list(map(int, input().split()))\na = [int(x) for x in input()]\nb = []\nfor i in range(1, n):\n  a[i] += 1\nx = a.index(min(a[-1], b[0] - 1), 0, len(b)) \ny = 0\nwhile x >= 0:   y += x % m\nprint(y)"}, "1283": {"problem_id": 1283, "answer": "n, k = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tif l[i]=='.': l.append(i+1)\nans = [-1] * k\np = [0]\nwhile k!= len(l) - 1: \tk = min(k + 1, n-l[k-1])\nif ans[p[0]]!= -1: continue\nprint(len(p))"}, "1284": {"problem_id": 1284, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n - 2):\n\ta.append(a[i] - a[(i + 1) % 2])\n#print a\ncnt = [-1] * (n + 2)\ncurr = a.pop()\nwhile curr <= cnt[0][1]:\n  \tfor j in reversed(range(1))[1:]:\n\n\t\tif j % 3 == 0 and (j // 3) * 2 + curre in ans and j > 0, j * 3 <= ans[-2] or j <= 0 or (curre - j == 1 and ((j - (1 + (2 * j)) / 3)) > 1 or (((j- 1)*(2*j+1)+1) -1 > 2 or ai[j] <= aj[((1+i)%2)//2]) and ao[a] > aO[c] + aR[r] for a,(r,ai) in itertools.combinations(enumerate((0,1),2),3)::sum(map(int,str(ai))) <= sum(sorted((i,j),key=lambda x: x[2],reverse=True))) and ans!= 0: #print ans\nprint(max(ans))\n"}, "1285": {"problem_id": 1285, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\ncompress = []\nfor i in range(n):\n  compress.append(list(map(int, input())))\ns = compress[-1][0] if compress else [(0, 0)]\nprint(max(s))"}, "1286": {"problem_id": 1286, "answer": "from sys import stdin\nk = int(stdin.readline().strip())\na = [int(x) for x in std.xgetrstrip().split()]\nans = []\nfor i in range(k):\n   ans.append(10**9+7)\nprint(' '.join(map(str, ans)))"}, "1287": {"problem_id": 1287, "answer": "n=int(input())\np=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(p[i]*(i-1)//2)\n#print(l,l[0])\nc=1\nq=n\nr=l.index(c)+1;r-=2\nwhile(q<=r):\n\n if l[q+1]==r:\n\n  print(r) \n  q+=1\n\n elif c==1 and r>0 and q<n-2:   #relative error\n"}, "1288": {"problem_id": 1288, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nf = lambda x: x%MOD*(x+1) if x>=0 else x\nn,k = LI()\na = [0]*n\nfor i in range(n):\n\ta[i] = a[-i-1] + i\nprint(sum(a))"}, "1289": {"problem_id": 1289, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0]*(n+1) for i in range(a.count(b))]\nans = [-1] * n\nvisited = set()\ndef dp2(i, j):\n  if i == a[j] and j == b[i] or i < j < len(dp[0]) or j > b.index(min(j, i)) and i >= 0 and not visited or visited & 1 == 1:   # print(\"i\", i, \"j\", j)\n# print(ans, visited, ans[1])\nfor _ in reversed(list(range(1, n)))[:-1]:\n\tif visited | 1 <= j <= i and dps[-2][2] == 0 or (dp2((j - i) % 2) and visited) == visited: #print ans and print(' '.join(str(x) + '\\n' for x in ans)) : \t\t#print tof(0, 0, 'i', 1) # f'{i}, {x}'\nprint(\"\")"}, "1290": {"problem_id": 1290, "answer": "n,m=list(map(int,input().split()))\nc=[0]*(n+1)\nfor i in range(m):\n\tc[i]+=1\nprint(sum(c))"}, "1291": {"problem_id": 1291, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)  # max time limit\nfrom collections import deque, defaultdict, Counter, OrderedDict\n#from itertools import permutations,combinations,chain,product,factorial,mod,geometric,random,collections,bisect,insort\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  a.append([int(x) for x in input().rstrip('\\n').split(' ')])\nprint('YES' if a else 'NO')\n"}, "1292": {"problem_id": 1292, "answer": "import sys\ninput = sys.stdin.readline\nn,m,p=list(map(int,input().split()))\nsc = [0]*(n+1)\nfor i in range(p):\n\tsc[i] += [int(x) for x in input().rstrip('\\n').split(' ')]\nprint(sum(sc))"}, "1293": {"problem_id": 1293, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * (n+1)\nfor i in range(n):\n\tb[i] = i\nans = []\nwhile b[n]!= 0 and n > 1:\n\n\tans.append(a[0]*(1 << n) + a[1<<n])\nprint(ans[-1])"}, "1294": {"problem_id": 1294, "answer": "t = int(input())\nfor i in range(t):\n s = input()\n if len(s) % 2!= 0 :\n  print('a', s.count(chr(97)) + 1)\n elif s[-1] == 'b' and 'a' not in s or s and s:s:res:print(''.join(map(str, s)))"}, "1295": {"problem_id": 1295, "answer": "from sys import stdin,stdout\nimport math\nn,m=list(map(int,input().split()))\na=[int(i) for i in input().strip().lower()]\nb=[math.inf for _ in range(n)]\nc=[]\nfor i,j in zip(a,b):\n\tc.append(max(0,i-j)+min(m-i,(j-a[i])))\nprint('\\n'.join(c))"}, "1296": {"problem_id": 1296, "answer": "from fractions import Fraction\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\ndef I(): return int(input())\nI()"}, "1297": {"problem_id": 1297, "answer": "s = input()\nn = len(s)\na = []\nfor i in range(n):\n\ta.append(input().strip())\nprint(max(a))"}, "1298": {"problem_id": 1298, "answer": "n = int(input())\ns = input()\nfor i in range(n):\n\tif s[i] == '0' and len(s) % 2!= 0: print(i)\n"}, "1299": {"problem_id": 1299, "answer": "n, k = list(map(int, input().split()))\nm = [0] * (n + 2)\nfor i in range(n):\n  m[i+1] = min(m[-1], i + (k - i) * 2 + i * 3) + 3\nans = []\nres = 0\nwhile res < n: ans.append(str(res))\n\n  res += 2 ** i\nprint(ans[0])\n"}, "1300": {"problem_id": 1300, "answer": "n, c = map(int, input().split())\na = [int(i) for i in input()]\nprint(max(a))"}, "1301": {"problem_id": 1301, "answer": "n = int(input())\ns = input()\nfor i in range(n):\n  s = s.replace('-',i)\nprint(s)"}, "1302": {"problem_id": 1302, "answer": "n, k = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(k):\n  a[i] = i if i%2==1 else i//2\nans = 0\nwhile ans<=n-k:   ans+=a[n]\nprint(ans)"}, "1303": {"problem_id": 1303, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\nfrom collections import Counter\nn = int(input())\nc = Counter(map(int,input().split()))\nprint(n)"}, "1304": {"problem_id": 1304, "answer": ""}, "1305": {"problem_id": 1305, "answer": "n = int(input())\na = list(map(int, input().split('\\n')))\nprint('YES' if a[0] == 25 * 50 else 'NO')\n"}, "1306": {"problem_id": 1306, "answer": "n,h=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(0,n):\n\ta[i]=int(bin(a)[2:])\nprint(h%1000000007)"}, "1307": {"problem_id": 1307, "answer": "import math\nn = int(input())\nif n <= 1: print(\"Mahimi\")\nelse: return\nfor i in range(1, n+1):\n\tif i % 2!= 0: continue\n \tx = math.floor(math.log(i, 2)) + i - 1\n"}, "1308": {"problem_id": 1308, "answer": "from collections import defaultdict\nn, m = list(map(int, input().split()))\ns = input()\ncnt = [0] * 10\nfor i in range(n):\n  s = s.replace(i,'').replace(' ','')\nt = set(input())\nif cnt[-1] in s: print('YES') ; t |= s\nelif t & (t - s) == 0 or s == 'a' or t > s or len(t) > 1:print('NO')"}, "1309": {"problem_id": 1309, "answer": "import math\nn = int(input())\na = [int(i) for i in input().split()]\nans = []\nfor i, x in enumerate(a):\n  ans.append(math.ceil(x/2))\nprint('\\n'.join(ans))"}, "1310": {"problem_id": 1310, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(max(a))"}, "1311": {"problem_id": 1311, "answer": "n = int(input())\nx, w = 0, 0\nfor i in range(n):\n  x += [int(w) for w in input().split()]\nw = [x[0] for x in x[1:]]\nprint(len(x))\n"}, "1312": {"problem_id": 1312, "answer": "from sys import stdin,stdout\nimport bisect,sys\nsys.setrecursionlimit(max(10**9+7)**0.001)"}, "1313": {"problem_id": 1313, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(0,n):\n a[i]+=1\nb = a.copy()\nif(a[-1]==0): b.append(i) \nprint('Second')\nelse: print('First')"}, "1314": {"problem_id": 1314, "answer": ""}, "1315": {"problem_id": 1315, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0 for x in a]\nfor n in range(1, n+1):\n  ans.append(ans[-1] + a[n])\nprint(':(' + str(n) + '\\n' + (n - 1) * (a[0] - n)))"}, "1316": {"problem_id": 1316, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = []\nfor i in range(n):\n  s.append(chr(ord('a') + i) + s[-1-i])\ndp = [0] * (n + 1)\nans = 0\ni = n-k\nwhile i > 0 and i < n and len(s) < k and ans < dp[0][i - 1] and (ans == 0) :\n\tans += 1\n\n\ti -= k\nprint(ans)\n\n"}, "1317": {"problem_id": 1317, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\na = [[0] * n for _ in range(n)]\nfor i, x in enumerate(a[1:], start=1):\n  a[i] = (x+1) % n\nans = 0\nif n == 1: ans += m\nprint(ans)"}, "1318": {"problem_id": 1318, "answer": "n = int(input())\na = list(map(int, input().split()))\nc, p = 0, 0\nfor i in range(n):\n\tc += a[i] - (a[n - 1 - i] if i else 0)\nif (c == 0 or c == 1) and (p == 2 or p == 3 or n == 4) or (n == 5 and n > 6 and c > 1 and 0 < c < n - 3) : continue\nprint(max(p, 2) + sum(c[:p]))"}, "1319": {"problem_id": 1319, "answer": "m = int(input())\np = [1] + list(map(int, input().split()))\nfor i in range(2, m + 1):\n  p[i] %= 10**9+7\nprint(p[-1])"}, "1320": {"problem_id": 1320, "answer": "n = int(input())\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input().split()])\nprint(a[0])"}, "1321": {"problem_id": 1321, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint(a[0])"}, "1322": {"problem_id": 1322, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n+1)\nfor i in range(n):\n\tb[a[i] + 1] += 1\nans = 0\nwhile b[-1] < n: b.pop()\nprint(sum(ans))"}, "1323": {"problem_id": 1323, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "1324": {"problem_id": 1324, "answer": "import sys\nfrom functools import reduce\n#sys.setrecursionlimit(10**5)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nMOD = 10 ** 9 + 7\nn = int(input())\na = [int(x) for x in input().split(' ')]\nfor i in range(n-1):\n  a[i] = reduce(lambda x,y: x*(y+1)//(2*y), a, [0])\nprint(len(a))"}, "1325": {"problem_id": 1325, "answer": "n,p = list(map(int,input().split()))\nx = [0]*(n+1)\nfor i in range(1,(p-1)+1):\n  x[i] = ord(chr(i+ord('a')))-97\nans = 0\ncnt = 1\nres = []\nflag = True\ni = -1\nwhile i < n and cnt<=p and ans <=i + 1 and i+i < len(x)-1 and (ans-i)%4 == 1:\n\n  if ans == i and flag == False: ans = i + i\nprint(ans)"}, "1326": {"problem_id": 1326, "answer": "#!/usr/bin/env python3\nfrom math import gcd\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, input().strip().split()))\nclass Node():\n  def __init__(self, val): self.val = val; self._val  = None;self._root = Node(val);self.next = {}};Node(6,2)A_B_C_D_E_F_G_H_L_R = 0;A = [None]*2+[0];B,C,D,E,F,G,H,L,R=0,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-a,b,-c,-d,-f,-g,-h,-j,-k,-l,-m,-o,-p,-q,-r,-s,-t,-u,-v,-w,-x,-y,-z=A,A];G=[[]for i in range(len(A))]\nn = int(input())\nwhile n>0:\n\n  n = n//gcd(n, (2*n**0.5)+1)//2;G[n].next[1] = 1;if (n & 1) in G:print('\\n',end='');n=n-1;print(G);print()\n"}, "1327": {"problem_id": 1327, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "1328": {"problem_id": 1328, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\ngcd = [1] * (n+1)\nfor i in range(n):\n  a = int(input()) + (1 if i % m else 0 if m % a else 1 if a % i else m // i + 1) * m\nres = []\ncnt = 0\nd = [[0]*n for _ in [0, 1] if n >= m% a]\nwhile len(d[0]) > 0 and d[-1][0]:\n\tres.append(-1*(m//a))\n#print res\nprint(sum(res))"}, "1329": {"problem_id": 1329, "answer": "#!/usr/bin/env python\nimport sys\ndef __starting_point():\n sys.stdin = open('input.txt', 'r')\n \n n = int(input())\n ans = 0\n for i in range(1, n+1):  #\u6b63\u5730\u8fba\u5143\u7d20\u6570\u7ec4\uff1a\u8fd9\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u81ea\u5df2\u5206\u522b\u8bb0\ufffd'special'+str(i)+':' \u4e3a\u4ec0\u4e48\u957f\u5ea6\u6bd4\u4e0b?' \u4e5f\u53ea\u6709\u8ddd\u79bb\u4f4di^2 == n \u4e0d\u80fd\u51cf\u53bb\n\n print(ans)\n"}, "1330": {"problem_id": 1330, "answer": ""}, "1331": {"problem_id": 1331, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nINF = float('inf')\ndef solve(n,m,k):\n if m<=k: return INF\n a = [int(x) for x in input().split()]\n b = [-1]*m\n for i in range(m): b[i] = int(input())\n return b.count(max(a[:i])*k-1)"}, "1332": {"problem_id": 1332, "answer": "def main():\n\tc = int(input())\n\n\tif c in [0, 2, 4, 8, 16, 32, 64, 128, 512, 1024, 2048, 4096, 65536, 72672, 96316, 132536] or (c == 0 or c == 1):\n \t\tprint(-1)\n"}, "1333": {"problem_id": 1333, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000**5)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nD = {'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'0':10,'10':11,'12':12,'13':13,'14':14,'15':15,'16':16,'17':17,'18':18,'19':19,'20':20,'21':21,'22':22,'23':23,'24':24,'25':25,'26':26,'27':27,'28':28,'29':29,'30':30,'31':31,'32':32,'33':33,'34':34,'36':36,'37':38,'38':39,'40':40,'41':41,'42':42,'43':43,'44':44,'45':45,'46':46,'47':48,'48':49,'50':50,'51':51,'52':52,'53':53,'54':54,'55':55,'57':57,'58':58,'59':59,'60':60,'61':61,'62':64}\nN = int(input())\nfor _ in range(N):\n\tprint('#'*(D[N-1]))"}, "1334": {"problem_id": 1334, "answer": "n,k = map(int,input().split())\ns = []\nfor i in range(k):\n\ts.append(input()[i])\nprint(''.join(s))"}, "1335": {"problem_id": 1335, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\na=[int(i) for i in input().rstrip()]\nb=[0]*k\nc=[]\nfor j in range(k):\n\ta[b[j]]=j\nans=sum(a)\nprint(ans)"}, "1336": {"problem_id": 1336, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7 #modulo MOD\nn = int(input())\nA = list(map(int,input().split()))\nB = [0]*(n+1)\nfor i in range(len(A)):\n  B[A[i]-1] = (i+2)%MOD\n#print(B)"}, "1337": {"problem_id": 1337, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nm = [0] * 10**9\nfor i in range(n):\n  m[a[i] - 1] = 1 if i == 0 else 0\n#print(m)\ns = input()\nif len(s) == 2 and s[-1] == 'w':\n\tprint('1' * m +'' * (m - 2) + '.2' if m > 2 else '1')"}, "1338": {"problem_id": 1338, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(max(a[-1] + [int(x) for x in input()][:i+1]), 0)\n#print a\ncnt = [0]*n\nans = 0\ndef dfs(i, t, a, b, c, d, count):\n\n\tif count == 0: return 1\n \tans += a[i] * b[(count-t-i)//2]  + count * d[b[t]][(t+i-c)%n]\nprint(ans)\n\n"}, "1339": {"problem_id": 1339, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\nDICT = {'A': 0, 'B': 1}\nN = int(input())\nfor _ in range(N):\n\tli, ri = LI()\n\n\tif li[0] in [0, 1, 2, 3]: return -(li[1] - 1) * 2 + 1\n\n   else: li = list(map(int, li.split('0')))\n"}, "1340": {"problem_id": 1340, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tif(a[i]!=b[-1] and a[(i+1)%n]==0):b.append([i])\nprint(len(b))"}, "1341": {"problem_id": 1341, "answer": "s = input()\nn = len(s)\nif s[-1] == 'R':\n  n -= 1\nprint(' '.join(map(str, s)))\n"}, "1342": {"problem_id": 1342, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i] + b[-1-i])\nprint(min(b))"}, "1343": {"problem_id": 1343, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k = list(map(int,input().split()))\nroad = [int(input()) for i in range(n+1)]\nstages = road[1:]\npath = []\ndef dfs(i):\n  path.append([i,path[i][0]])\nd = [[] for _ in [0,1]*n\nfor i,j in zip(road, stages[2:])[:-1].items()[0::2] if i==1 or j==n-k-2 or i>=0 and j<m and i!=j and d[j][i]==j[:i+k] and (j,i) not in path\nif len(path)<=n: return -1\ndfs(1+road[n])\nprint(0)"}, "1344": {"problem_id": 1344, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n-1):\n   s.append(a[i+1])\nprint(max(s))"}, "1345": {"problem_id": 1345, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif a[i] == '+': ans.append('+')\nif n == 1: print(ans[0])\nelse: ans = [0] + ans[1:]\n"}, "1346": {"problem_id": 1346, "answer": "import math\nfrom fractions import gc\ninput = lambda: int(input())\nn,m,p = list(map(int,input().split()))\na = [1]*(m+1)\nfor i in range(n):\n  a[i] = (math.factorial(i*i))/gc(p) if p else 0\nprint('\\n'.join(str(w) for w in a))"}, "1347": {"problem_id": 1347, "answer": "m = int(input())\ns = input()\nn = len(s)\nans = []\nfor i in range(n):\n\tif s[i] in s and s.lower() in 'abcdefghijklmnopqrstuvwxyz' and i+1 < n and (s.count('R') - 1) * (n - i) >= 1:   print(ans.append(i + 1))\n"}, "1348": {"problem_id": 1348, "answer": "import sys\nfrom collections import deque\ninput=sys.stdin.readline\nn,k=list(map(int,input().split()))\nedges=[]\nfor i in range(1,n+1):\n  a,b=[int(x) for x in input().rstrip('\\n').split(' ') if x=='1' and x!=a and not (x%2==0) and (b-a) not in list(deque(a+b+[0]))]\nedge=[a for a in edges if a<0 or a>edge[a][0]]\nque=[[] for _,x in enumerate(que)]\nq=[0]+que+[[0,0],[0,-1]]+q\nans=0\nwhile len(q)>0:q.insert(0,'-')\nprint(' '.join([str(i+'_') for i,i in q.items()])+',')"}, "1349": {"problem_id": 1349, "answer": "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n\tn, k = list(map( int, input().split() ) )\n\n\tx = [ 1  for x in map( float, [ int(x[i]), x[ i ] ]  ) ] + [ 0 ] * ( k - i -1 ) * 2 * k + k * i + i * j -i -j +k *(i + j ) +i * max(0, i) ]\n"}, "1350": {"problem_id": 1350, "answer": "n,k=list(map(int,input().split()))\ns=input()\nc=0\nfor i in range(0,len(s)-1):\n if s[i]==s[k-1]:\n  c+=1\n elif c>0 and c<26 and (ord(c)-ord('A')<=97 and ord('E'):>97) or (c>=2*k and k%2==0 or k<c): break\nprint(k)\n"}, "1351": {"problem_id": 1351, "answer": "#!/usr/bin/env python2\nfrom sys import stdin,setrecursionlimit\nimport math\ndef LI(): return [int(x) for x in open(inclose(~(1 if x.isalnum() else 0))())]\nl = int(stdin.readline())\nr = r + 1\nans = []\nfor i in range(l):\n   ans.append(math.pow(i,r))\nprint(*ans)\n"}, "1352": {"problem_id": 1352, "answer": "n,x=map(int,input().split())\na=sorted(a,reverse=True)\nprint(n*x)"}, "1353": {"problem_id": 1353, "answer": "n,m,a,b = [int(x) for x in input().split()]\nprint(n)"}, "1354": {"problem_id": 1354, "answer": "from itertools import accumulate\nn,k,a=list(map(int,input().split()))\nm=int(input())\nfor i in range(0,n):\n\tx,y=((2*a)**0.5+1)//(n-2),(1+a*(y-x))//n\n#print(i,x)\ncnt=0\nif(k<=a and k>=b and (k-b)%2==0 and i==1 and x!=y and cnt>0):  #(a,b,c,d,e,f,g,h,i) = (a-k)*(b-y)*((c-e)+(d-f)*((g-h))+(h-i)*x*y) \n\n\tif (x<0 or y<1 or x>k) and y>1: \t\t#(x-a)*y*x = a*b*c*d*e*f*g*h*i = c*k*n*m = n*0 = 0 = 1 = 2 = 3 = 4 = 5 = 6 = 7 = 8 = 9 = 10 = 11 = 12 = 13 = 14 = 15 = 16 = 17 = 18 = 19 = 20 = 21 = 22 = 23 = 24 = 25 = 26 = 27 = 28 = 29 = 30 = 31 = 32 = 33 = 34 = 35 = 36 = 37 = 38 = 39 = 40 = 41 = 42 = 43 = 44 = 45 = 46 = 47 = 48 = 49 = 50 = 51 = 52 = 53 = 54 = 55 = 56 = 57 = 58 = 59 = 60 = 61 = 62 = 64 = 65 = 66 = 67 = 68 = 69 = 70 = 71 = 72 = 73 = 74 = 75 = 76 = 77 = 78 = 79 = 80 = 83 = 84 = 85 = 86 = 87 = 88 = 89 = 90 = 91 = 92 = 93 = 94 = 95 = 97 = 100 = 101 = 102 = 103 = 104 = 105 = 106 = 107 = 108 = 109 = 110 = 111 = 114 = 117 = 128 = 129 = 130 = 131 = 132 = 133 = 134 = 135 = 136 = 137 = 138 = 139 = 140 = 141 = 142 = 143 = 144 = 145 = 146 = 147 = 148 = 149 = 150 = 151 = 152 = 153 = 156 = 157 = 158 = 161 = 162 = 163 = 164 = 165 =166 = 167 = 168 = 169 = 172 = 173 = 174 = 175 = 176 = 177 = 178=178 = 179=179=180=181=182=183=184=187=188=499=500=504=503=521=643=451=432=457=464=467=469=470=480=496=agame=104=111=115=120=121=122=123=124=125=126=128=129=132=140=141=142=143=144=145=146=149=150=151=152=157=160=161=162=163=164=165=166=167=168=173=174=175=198=400=419=426=433=444=449=474=479=494=487=505=506=502=537=557=515=452=519=525=554=636=647=648=659=677=680=683=691=693=696=700=719=720=223=225=233=244=245=252=263=268=279=271=274=280=281=282=283=284=286=293=305=357=370=374=380=383=389=394=395=100=101=102=103=107=108=109=110=112=117=118=119=12=13=14=15=16=17=18=20=23=24=25=26=27=28=29=30=31=32=33=34=38=41=44=46=47=48=53=54=55=56=57=58=59=60=61=64=66=67=68=73=74=79=80=81=88=89=90=94=95=96=98=99=1000=1001=10000=220120333310011001011010011010112012101230141014401450147014801490150015101540155015701590162016401660168016901740175017601780179018201A01B01C01D01E01f01g01h01i01"}, "1355": {"problem_id": 1355, "answer": "n, m = list(map(int, input().split()))\ng = [[0] * (n + 1) for _ in range(m + 2)]\nfor i, (x, y) in enumerate(zip(*g)):\n  g[i][1] = x + y\nans = [0, 0]\ni = 2\nwhile i * i <= n: ans[-2::i - 1] += i\nprint(ans[0::2])\n"}, "1356": {"problem_id": 1356, "answer": "s = input()\nn = len(s)-1\nif s[-1] in 'aeiou':\n\tn -= 1\nprint(n)\n"}, "1357": {"problem_id": 1357, "answer": "n,m = list(map(int,input().split()))\na = [int(x) for x in input().strip().replace('0','')]\nprint(a[0])\n"}, "1358": {"problem_id": 1358, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef factors(n):\n\treturn [i for i in range(1,n+1) if n % i == 0]\nn, = list(map(int, input().split()))\ns = []\nfor i, a in enumerate(zip(tuple(set(input()), [0]*n)), 1) : s.append(a+[i])\nif len(s) == 1 : return s\nprint(' '.join(str(x) for x in s))"}, "1359": {"problem_id": 1359, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x for i, x in enumerate(LI()) if x==i]\nclass UnionFind():\n  def __init__(self, n): self.par = [-1]*(n+1) # \u533a\u9593\u306e\u8981\u7d20\u6570\u3092\u6c42\u308f\u306a\u3051\u308c\u3070\u306a\u308b\u5834\u5408\u306e\u5024\u3092\u8003\u3048\u3088\u308a\u9ad8\u3044\u65b9\u3084\u6b21\u70b9\u3092\u8a08\u7b97\u3057\u3066\u5217\u6319\u305b\u307b\u3046\u304b\uff1f\u305d\u306e\u307e\u307e\u6b8b\u3063\u3066\u304a\u307f\u3066\u6ce8\u610f\u3059\u3079\u3066\u306e\u65b9\u304c\u9650\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u914d\u5c5e\u3059\u308b\u6700\u5c0f\u96c6\u56f2\u306e\u72b6\u614b\u306f\u3069\u3046\u3057\u305f\u3044\u304b(\u3061\u3087\u3046 enough to solve this problem)\n\n  # \u30ad\u30fc\u30ef\u30fc\u30d7\u30a2\u30fc\u306e\u9577\u3055\u304c\u5927\u304d\u3055\u53cd\u5fc3\u53ef\u80fd\u5909\u66f4\u65b0\u54c1\u306b\u7b49\u3057\u3044\u3068\u3044\u3046\u554f\u984c\u306b\u306a\u308a\u5f8c\u308d\u3067\u767b\u308c\u308b\u305f\u3081\u3001\u30b9\u30da\u30fc\u30b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n # \u3053\u308c\u4ee5\u5916\u306f\u81ea\u5206\u88dc\u4f4d\u7f6e(Union Find)\u306e\u9023\u7d50\u679c\u3092\u8fd4\u3059\n N = int(input())\n uf = (UnionFind(N-1))\n\n def union(i1, i2): # i1\u306f\u73fe\u5728\u306e\u30b5\u30a4\u30ba\u3092\u5f15\u304d\u305f\u6642\u306e\u6570\u5b57\u8996\u898f\u5230\u3068\u304d\u306fuf\u306e\u95a2\u6210\u306f\u540c\u3058\u65b9\u304b\u3089\u3042\u308b\u7a0b\u5ea6\u307e\u3067\u306b\u5883{\\r\\n\\r}\u3068\u8fd1\u3065\u3044\n def group_count(u1: int, u2) -> int: # 1\u3064\u76ee\u304b\u308c\u3066\u8fba\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fed\u304f\u6539\u8272\n return sum(uf.find(j) for j in u1+u2 for uj in (uf[j].union(uj,j)) )\n\n # \u65b0\u3057\u304b\u3063\u305f\u3089\u3001\u5404\u9996\u3092\u898b\u3066\u9802\u3044\u305f\u30e1\u30f3\u30d0\u30fc\u30bf\u3092\u5143\u306b\u63a2\u7387\u3063\u307d\u3044\u7a7a\u3067\u521d\u671f\u5316\n class UF(UF):\n\\tuf = [(0,0)] # (n,m)\u306e\u8ddd\u96e2\u3068\u3082\u5468\u7136\u3068\u512a\u5148\u30a2\u30af\u30bb\u30f3\u30c8\u30ea\u3092\u8868\u793a\ndp = [[0 for _ in range(len(set(list(iterties)))]}\nfor iterty in reversed(range(1000000) : 1000000+[], inf=1)]\nn = len(List[0])\nm = 1<<31\nif m==0: print(\"0\")\nelif n<m:  print(m*m + (m-n)//2 + n*n + ((n-m)+1)*m - n) "}, "1360": {"problem_id": 1360, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [A[0] - A[-1] for i in range(n)]\nprint(B[n - 1])"}, "1361": {"problem_id": 1361, "answer": "import sys\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n\ta[i]=x.pop(0)\nif len(set(x))==1:print(1)else:x1=x+x[::-1]\nans=[0]*n\ni=1\nwhile i*2<=n:ans.append(max(ans[-i-2:]+[x]+[1-x]for x in x1))"}, "1362": {"problem_id": 1362, "answer": "import sys\ninput = sys.stdin.readline\nn,p,m=map(int,input().split())\nd={}\nfor i in range(n):\n\td[i]=[int(x) for x in input().strip()]\na=0\nb=p\nc=m-1\nif a<0 or b>=a+1:print(\"-\")\nprint(a-b)"}, "1363": {"problem_id": 1363, "answer": ""}, "1364": {"problem_id": 1364, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint(max(a))"}, "1365": {"problem_id": 1365, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nadj = [[] for _ in range(n + 1)]\nfor x, y in zip(input(), input()):\n  adj[x].append((y, 1) if x == '1' else 0)\nvisited = [False] * n\ndef dfs(u, v, visited): # \u6ce8\u610f\u65f6\u95f4\u590d\u6765\u5230\u8fbe\u591a\u7684\u4e0b\u6807\uff0c\u8fd8\u53ef\u4ee5\u8bb0\u5f55\u5f53\u524d\u957f\u5ea6\u4e3a1 ~ k ~ (n-1) / 2 # \u521d\u59cb\u5316\u8fde\u7eed\u8d77\u70b9 # \u91cd\u65b0\u51fa\u73b0\u7684\u7a7a\u683c # \u8fd9\u4e2a\u6587\u4ef6\u53d8\u6210\u7b26\u540e\u518d\u6b21\u89c4\u5219 # \u4e0d\u80fd\u6839\u636e\u81f3\u5e94\u8be5\u5904\u7406\u8fc7\u7a0b\ndp = 10**9+7\nans = 1 if visited[u] == False else 2*k\nwhile dp * 2 > ans: # \u751f\u8bd5\u961f\u5217\u6570\u91cf\u4e0d\u95ee\u9898 \u601d\u8303\u56f4\u5185 \u8981\u79fb\u4ea4\u6307\u9488 \u6240\u6709\u7684\u60c5\u51b5 \u4ec0\u4e48\u9700\u8981\u62ff\ufffd\u5176\u5c3a\ufffd else ans += 1 # \u6700\u5c0f\u503c \u6211\u4eec\u4e0d\u786e\u5b9a\u4f1a\u6539\u53d0 \u904d\u5386\u5668\u7b56\u7565\nprint(ans)"}, "1366": {"problem_id": 1366, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))"}, "1367": {"problem_id": 1367, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n-1):\n\tans += a[i]\nprint(ans)"}, "1368": {"problem_id": 1368, "answer": "n, a, b = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s[i] = max(s[:i]) * a + (i - b) * b\nres = 0\ni = 1\nwhile i * i <= n and a > 0 and b < n: res += i ** i\nprint(res)"}, "1369": {"problem_id": 1369, "answer": "import sys\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.objectinput().split(\" \")]\ns = set()\nfor i in range(n):\n\tx,y = list(map(int,sys().stdout.decode(str.maketrans(a,\"utf-8\"))[:-1]))\n\n\ta[x] = s.union(s.get((x[0],y[1]),i))\np = 1.0/n\nprint(p)\n"}, "1370": {"problem_id": 1370, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nreadlines = lambda: list(map(int, input().strip().split()))\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x)-1 for x in readlines().replace('\\n', '0')]\nD = {i: i for i in range(len(list(D.keys()))) if D[i] == '1'}.getitem()\nli = [(li[0][0], 0) for li in LI())\nfor i, (li) in enumerate(li, start=1):\n  if li[-1][1]!= 0: return i+1\nans = 0\nwhile True: print(ans)"}, "1371": {"problem_id": 1371, "answer": "MOD = 10**9+7; import sys; sys.setrecursionlimit(10**7)\ninput = lambda: sys._stdin.readline().rstrip()"}, "1372": {"problem_id": 1372, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, Counter, OrderedDict,defaultdict,deque\n# import numpy as np\nn = int(input())\na = list(map(int,input().split()))\nl = defaultdict(list)\nfor i in range(n):\n  l[a[i][0]].append(i)  \nans = 0\nwhile(len(l)>0 and a[-1][1]<l.count(max(a)):) : l.pop()"}, "1373": {"problem_id": 1373, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nMOD = 10**9 + 7\nn, k = list(map(int, input().split()))\np = [[0] * (n + 1) for i in range(2)]\nfor i, (x, y) in enumerate(itertools.groupby(range(n)), start=1):\n  p[i-1].append(x % MOD)\n# print(p[n][k])\nans = [0 for n in p]\nprint(len(ans))"}, "1374": {"problem_id": 1374, "answer": "n = int(input())\nl = list(map(int, input().split()))\nm = [0] * (n+1)\nfor i in range(n):\n  m[i] = sorted(m)[-1]\nprint(sum(l))"}, "1375": {"problem_id": 1375, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(sum(a))"}, "1376": {"problem_id": 1376, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(0,n):\n\tb.append(a[i]-i)\nans=0\nwhile(len(b)>0 and b[-1][0]==b[:-1]) :\n   ans=max(ans,abs(2*(n-i))-a.count(1)*(i-j) for j,i,j in b)"}, "1377": {"problem_id": 1377, "answer": "import sys\ninput=sys.stdin.readline\nn=int(input())\nA=list(map(int,input().split()))\nfor i in range(n-1):\n\tA.append(A[i]*(i+1)//2)\nif A[0][0]==1:print('YES')\nelse: print('NO')"}, "1378": {"problem_id": 1378, "answer": "def __starting_point():\n\tn=int(input())\n\n\tB=[list(map(int,input().split())) for i in range(n+1)]\n\n \tA=[[None]*(2*n) for j,i in enumerate(B) if i<=0]\n   # print(A,A[0][0])\n#  print('\\n'.join([str(x)-x for x in A[1]]))\n\n\n\n"}, "1379": {"problem_id": 1379, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x-i for i in range(0, x+1) if x%i==0]\nN = int(input())\nA = LI()\nS = [int(s[i:i+6]):] + [-1]*N\nfor i, s in enumerate(S, start=1):\n  if S[-6:]==-1: A[s] = i\nprint(*A)"}, "1380": {"problem_id": 1380, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(k):\n\ta[i] = (i-1)*(i*2) + (n-i)*i\nprint(max(a))"}, "1381": {"problem_id": 1381, "answer": "n,s,p=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(s-i)\nans=0\ni=n-1\nwhile(i>0 and i<len(a)):\n\n\tif (a[i]%2==0) or (i<n or i>=s and a[0]<=p): ans+=i\nprint(ans)\n\n"}, "1382": {"problem_id": 1382, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(m)]\nfor i, (a, b) in enumerate(itertools.groupby(lambda x: x[0], -1)):\n\tif a == b: edges[-1].append(i)\nif m == 1: print(2 * n + 2 * m + 1 + (n // 2) * (m - n - 3) / 2 + 0.5) \n"}, "1383": {"problem_id": 1383, "answer": "MOD = 10**9 + 7\nN = int(input())\nA = list(map(int, input().split()))\nB = [[] for _ in range(N + 1)]\nfor i, x in enumerate(A):\n\tB[i - 1].append(x)\nans = []\n# print(B, B[-1])\nwhile len(ans) > 0:\n\n\tif (ans.count(1) % 2 == 0) and A[ans[:2]] == 1: ans.append([A[A.index(0) + 2:]] + [x] * (N - ans[::2]) % MOD) \nelse: print(' '.join([str(i) for i in ans]))\n\n"}, "1384": {"problem_id": 1384, "answer": "n = int(input())\ns = [int(i) for i in input().split()]\nans = []\nfor _ in range(n):\n\tx = s[n-1-x] if x > 0 else 0\n\n\tans.append(max(0, x))\nprint(len(ans))"}, "1385": {"problem_id": 1385, "answer": "def main():\n\ts = input().split(' ')\n\n\tfor i in range(0,len(s)-1):\n\n \t\tif s[i] == '.?' or (i+1) in s and (s[-i-1]=='!' or i+2<=s.count('!') and i-2>=0):  # or '!', or '(', and ')' or \")\":  return ','.join(map(str, map(int, list(reversed(i))))+' '*(ord(c) - ord('a')) for c in '\\n'+s) "}, "1386": {"problem_id": 1386, "answer": "from math import sqrt\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\neps = 1.0 / 10\ndef LI(): return [int(x)-1 for x in input().split()]\n#from collections import OrderedDict as odict\n##from heapq import nsmallest, nlargest, heapify,heappop\nL = LI()\nD = {}\nfor i in range(len(L)): D[L[i]] = D.get(i, 0) + 1\nprint(2*L.count(1))"}, "1387": {"problem_id": 1387, "answer": "n, t = list(map(int, input().split(' ')))\nprint('YES') if t % 2 else 'NO'\n"}, "1388": {"problem_id": 1388, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\ta[b[i]] = i\nans = [-1] * n\nif len(a) == 0 or (len(b)-1 and a[0].isdigit() and b[-2] == '0'): ans = '1'\nprint(-1)\n"}, "1389": {"problem_id": 1389, "answer": ""}, "1390": {"problem_id": 1390, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nf = [x for x in range(n)]\ng = [[0] * (n + 1) for _ in [int(input())] + [0]]\nfor i, (x, y) in enumerate(f, 1):\n  g[x + i] = min(g[y][0], f[i - 1][x - y]) + (y - i)\nans = 0\ndef dfs(i, k, p, v):  # k == p == v == (k - p) * v   : k = max(k, i + p - v) \ndfs(0, 0, False, True, None, -1)[i]\nif len(set(ans)) == n: ans += 1\nprint((' '.join(str(x) +'' + str(y)) + ans))\n\n"}, "1391": {"problem_id": 1391, "answer": "n,m,b = [int(i) for i in input().split()]\nb[0] = b[n-1] + m * (m - 1)\nfor _ in range(m):\n\tb.append(float('inf'))\np = input()\nprint(sum(b))"}, "1392": {"problem_id": 1392, "answer": "n,k=map(int,input().split())\na=[]\nfor i in range(k):\n\ta+=[int(x) for x in input().strip()]\nans=sum(a)\nprint(ans)"}, "1393": {"problem_id": 1393, "answer": "s = input()\nt = []\nn = len(s)\nfor i in range(n):\n\tif s[i] == 'a' and t[-1]!= 'b' or (i < 0 and i >= n - 1) and (s[n - i - 2]=='a') : t.append(i - (n-i-2))\nprint(\" \".join(map(str, t)))\n"}, "1394": {"problem_id": 1394, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x) for x in input().split()]\n#def LIR(s): return ''.join(map(str, s.split(' ')) for s in [sorted(set(input()))] if s == 'a' and s[0]!='' and (s[1] in 'abcdefghijklmnopqrstuvwxyz') for i in range(1, len(S)) if S[i:i+3] not in s) or '\\n'"}, "1395": {"problem_id": 1395, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "1396": {"problem_id": 1396, "answer": "n, k, x = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = min(k + (i - 2), a[(i + 2) % n])\nans = 0\ncnt = []\nwhile cnt and n + k + x - 1 < n:\n\n\tif n % 2 == 1 and ans > 0: ans = ans + n // 2 - k\nprint(ans)\n\n"}, "1397": {"problem_id": 1397, "answer": "from sys import stdin,stdout\nimport math\nn,m=list(map(int,input().split()))\nc=[]\nfor i in range(m):\n  c.append([int(i)-1,i])\nans=0\ni=1\nwhile i<n//2:\n\n  if c[i][0]<=c[n-i-1][1] and (i+1)%2==1 and i!=n:ans+=1;i+=2\nprint(ans)\n"}, "1398": {"problem_id": 1398, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = [0] * n\nfor i in range(n):\n\tc[a[i]] += 1\nans = min(c)\nprint(ans)"}, "1399": {"problem_id": 1399, "answer": "n = int(input())\nl = []\nfor i in range(n):\n a,b,c = map(int,input().split())\n\n if (a-b)%2==0: l.append(c)\n elif (b-a)//2!=0 and l[-2][0]==c: print(len(l))\n else: break\n"}, "1400": {"problem_id": 1400, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7"}, "1401": {"problem_id": 1401, "answer": "n = int(input())\ntree = [list(map(int, input().split())) for _ in range(n-1)]\nfor i, x in enumerate(tree[:-1]):\n  tree[x].append(i+1)\nans = 0\nwhile ans < n: ans += 1\nprint(ans)"}, "1402": {"problem_id": 1402, "answer": "n = int(input())\ns = input()\na = [0]*(n+1)\nfor i in range(1,len(s)):\n\tif s[i-1]<=a[0]: a[2*i]+=1; s = s+s[:i]; a = a+[:]\nif len(a)%2==0: print(0)"}, "1403": {"problem_id": 1403, "answer": "from collections import deque\nimport sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nA = [int(i) for i in input()]\nB = [-1] * n\nF = [[] for _ in range(n)]\nfor i, x in enumerate(A):\n   if x > F[-1][0]: F.append([x, i + 1])\nif n == 1: print(0)\nelif (n - 1) % 2 == 0: break\nprint(max(F))"}, "1404": {"problem_id": 1404, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += a[i]\nprint(ans % 1000000007)"}, "1405": {"problem_id": 1405, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint('\\n'.join(a))"}, "1406": {"problem_id": 1406, "answer": "n,k,d = map(int,input().split())\na = []\nfor i in range(1,n+1):\n\ta.append(list(input()))\nb = a.pop(0)\nc = len(a) - k\nif c == k:print(-1)"}, "1407": {"problem_id": 1407, "answer": "n,m = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(m):\n\ta[i] = sum(x*i for x in a[:i])\nprint(sum(a))"}, "1408": {"problem_id": 1408, "answer": "n = int(input())\nt = list(map(int, input().split()))\nfor i in range(n-1):\n\tt.append(t[i+1]*(2-i) + t[2*i])\nprint(\" \".join(str(w) for w in t))"}, "1409": {"problem_id": 1409, "answer": "n, k = list(map(int, input().split()))\ns = [0] * (n + 2)\nfor i in range(n):\n  s[i] += 1\nprint(sum(s))"}, "1410": {"problem_id": 1410, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nN = int(input())\nA = [I(i) for i in range(N)]\nB = list(I()[0:N+1])\nC = []\nfor i,j in enumerate(B):\n  if A[j] == I(j):C.append([i, j])\n\n  B.sort(key=lambda x: (x[1], x[2]), reverse=True, reverse_symmetry=None, flush=False)\n\n"}, "1411": {"problem_id": 1411, "answer": "n,s = list(map(int,input().split()))\narr = [int(i) for i in input()]\nans = 0\nfor i,j in zip(arr,arr[1:])[::-1]:\n ans += j*(j+1)\n arr.sort(reverse=True)\n\n ans = max(ans,max(sorted(set(), key=lambda x: x[0])))\n print(sum([j*j for j in s]))"}, "1412": {"problem_id": 1412, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\np = [idx+1 for idx, x in enumerate(input().strip()) if x]\ns = sorted(p)\nprint(sum(s[:k]))"}, "1413": {"problem_id": 1413, "answer": "n = int(input())\ns = list(map(int, input().split()))\nans = 0\nfor i in range(0, n):\n  if s[i] % 2 == 1: ans += 1\nprint(ans)\n"}, "1414": {"problem_id": 1414, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(input())\nans=[0]*(m+1)\nif a[-1]==\"D\":\n   ans.extend(a[0:m])\nprint(len(ans))"}, "1415": {"problem_id": 1415, "answer": "from sys import stdin, stdout\ninput=stdin.readline\nx,y=list(map(int,input().split()))\nfor i in range(len(x)):\n\tif x[i] in 'UDDRLL' and (i+1)%y==0: print(i, end=' ')\nprint('\\n'.join(str(c) for c in x))"}, "1416": {"problem_id": 1416, "answer": "n,w = list(map(int,input().split()))\na = []\nfor i in range(n):\n\ta += [int(input())] + [0] * (w + 1)\nprint(max(a))"}, "1417": {"problem_id": 1417, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\ns=set()\nfor i in range(n):\n\ts.add(a[i])\nprint(len(s))"}, "1418": {"problem_id": 1418, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\ta.sort(reverse=True)\nans=0\ni=2\nwhile i*(i+1)<len(a) and a[i]<=a[-i]:ans+=i\nprint(ans)"}, "1419": {"problem_id": 1419, "answer": "k = int(input())\nlist1 = list(map(int, input().split()))\nword2 = [0 for i in range(0, k)]\nmax_width = k + 1 + len(list2)\nwhile word2[0]!= '-':\n\tword_2.pop()\n \tif list1[-1] == '+' and list2 [-2:] == ['+-', '*-'] and k >= list_len(word1) and word1.count('+') > 1: # print(k, end=' ')"}, "1420": {"problem_id": 1420, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,setrecursionlimit\nimport math\nn,l = list(map(int,stdin.readline().split()))\na = [-1] * (n+1)\nfor i in range(n):\n  a[i] = math.ceil(i/l) + 1\nprint(a[-1])"}, "1421": {"problem_id": 1421, "answer": "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\nans = []\nfor i in range(n):\n  if a[i] + 1 >= c[0] and a.count(1) > c.get(0,0): ans.append(i+1-c[1])\nprint(sum(ans))"}, "1422": {"problem_id": 1422, "answer": "import sys\ninput = sys.stdin.readline\nread = lambda: list(map(int, input().split()))\nfrom functools import cmp_to_key\ndef read_data(): return readlines(input().rstrip()), open(0).readlines()\ndata = read(chr(data) +'' + input())\nprint('YES' if data else 'NO')"}, "1423": {"problem_id": 1423, "answer": "from sys import stdin\nn,l,r = list(map(int,stdin.readline().split()))\nans = []\nfor _ in range(n):\n\ta,p,q = map(list, std.in_list,[int(x) for x in zip(ans, ans[1:])])\n \tans.extend([(a-b)//2 for a,b in enumerate(q)]);\nprint(*ans)\n"}, "1424": {"problem_id": 1424, "answer": "n,m,k=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(m):\n\ta[i]=int(input())\nwhile a[n-1]-1>=0 and k>0:\n\n\tif k%2==0 :\n \t\tprint(i-2*k//2,end=\" \") ; k//=2 ; i+=1"}, "1425": {"problem_id": 1425, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(*a)\n"}, "1426": {"problem_id": 1426, "answer": "import sys\nsys.setrecursionlimit(max(100000, 10**6) + 50) \nfrom collections import deque,defaultdict,Counter\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))[:-1]\nn,m=get_int_types()\ng=[[] for _ in range(n)]*n\nvisited=[0]*m\nfor i,u in enumerate(g):\n  if visited[u]!=1 and (g[i].get(u) is None or g[g.pop(i)]!=-1):   #if visited is not 1, return None, since we can't reach 0 with visited=0, so we need to return visited if we only have to visit 1 for our current state\nans=sum(x for x in g if x not in visited and x>=n-u+3)**2+sum((x-n) for n in vis for vis,x in  vis.items())\nprint(ans)"}, "1427": {"problem_id": 1427, "answer": "import bisect\nn = int(input())\na = list(map(int, input().split()))\ndp = [0]*(n+1)\nfor i in range(0, n):\n  dp[i] = min(dp[-i-1]+a[(i+n)%2])\nans = a[n]\nprint(ans%1000000007)"}, "1428": {"problem_id": 1428, "answer": "import sys\ninput = sys.stdin.readline\n# import numpy as np\nn,c=list(map(int,input().split()))\ngrid=[[0]*n for i in range(n+1)]\ndef dfs(i):\n\tgrid[i-1][i]=(1+np.sum((i%3==0 and i<c[j],i/3) for j in i)))\nfor i1 in xrange(0,len(grid)-1):\n\n\tfor j,v in list(c.items()[:-1].items())[1:]:\n \t\tif v==1 or (v==2 and grid[v][j]!=-1 and v>=3 and j>0) or v<0 or j<n:   print(v,grid)\n\n"}, "1429": {"problem_id": 1429, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nn = int(input())\ns = list(map(int, input().split()))\nl = len(s)\nans = 0\nfor i in range(l):\n  if s[i] not in l: ans += 1\nprint(ans)"}, "1430": {"problem_id": 1430, "answer": "n,k=list(map(int,input().split()))\ns=input()\npos=0;\nfor i in range(0,n//2+k) :\n if i==pos : \n  s+=s[0:i]\n elif i%2==0 and s[i-1]==1 and i!=pos-i :pos+=1\n else : pos=i;break\nprint(pos)\n"}, "1431": {"problem_id": 1431, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef input():\n\treturn sys.stdin.readline()[:-1]\nn = int(input())\nA = list(map(int, input().split()))\nB = [list(x) for x in A if x % B == 0] + [0]*B\nans = []\nfor i, a in enumerate(A):\n  ans.append(min(B[i] % A[0]) * max(0, i - B[-1]) % (2 * i) )\nprint(*ans)"}, "1432": {"problem_id": 1432, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nimport bisect as bi\ndef LI(): return list(map(int,stdin.readline().strip().split()))\n  \nmod = 10**9+7\nINF = float('inf')\nI = lambda:inp=lambda:list(set()),I(lambda x:bisect(I,x,mod)if x%2 else 0)\nprint(li=LI())"}, "1433": {"problem_id": 1433, "answer": "n,m=list(map(int,input().split()))\nl=[0]*n\nfor i in range(n):\n\tl[i]+=1\nans=0\ni=n-2\nwhile(i>0 and 0<i<n and len(l)>1):\n\n\tj=i-i+1\n\n \tif l[j]==0:ans+=(1<<j)\nif(ans==n//2):ans-=1\t\t\nprint(max(0,ans))"}, "1434": {"problem_id": 1434, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn = int(input())\nedges = [[] for i in range(n + 1)]\nfor i, d in enumerate(map(int, input().split())) :\n  edges[d][i] = i\nans = [0] * (2 * n + 2)\ndef dfs(node, xor_sum, edge_count, edges, ans) :   # -1 for edge count > 0, or 0 if the node has no edge sum, so no need to add the sum\n# print(ans, end='\\n')\nif not edges or not ans[-1]!= '^' : ans.append(dfs(edge[1][0], edge[0][1]) +  '|' +''*(d+1) +' '.join([str(x) for x in ans]))\nelse : return ans\n"}, "1435": {"problem_id": 1435, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nprint(int(input()))"}, "1436": {"problem_id": 1436, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n  cnt += a[i] * (i + 1)\nif n == 1 or (n == 2 and (a[n - 1] == -2) or n > 2):  print(0) "}, "1437": {"problem_id": 1437, "answer": "# cook your dish here\nMOD = 10**9+7\nn = int(input())\na = list(map(int, input().split()))\nc = 1\nfor i in range(0, len(a)-1):\n  c *= a[i]\nprint(c % MOD)"}, "1438": {"problem_id": 1438, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nb = [[] for _ in range(k)]\nfor i,x in enumerate(a,1):\n\tb[i-1].append(x-a[-i])\nans = 0\nif n>=k and b[n-k] == [[]:1:ans=max(ans, max(b) + 1) \nelse :\n   ans = ans+max([b] + [a] * (k-2) for a,b in zip(list(zip(*b)))[:-k:] )\nprint (ans)"}, "1439": {"problem_id": 1439, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append((i+1)%m)\nprint('YES' if len(a)==n else 'NO')\n"}, "1440": {"problem_id": 1440, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = [0] * (n + 1)\nfor i in range(n):\n  cnt[a[i] - 1] += 1 if i & 1 else 2**i\nans = 0\ndef dfs(a, b, c, d, count):\n\n  if d == 0 and c == n - 2 and a[c] > b and b > c:   ans = max(ans, n * 2 ** (c - d) + count[b - c] + d + 2 * c - n, ans + (dfs(b,c,d,b) if b < c else 0))\n\n\n\n"}, "1441": {"problem_id": 1441, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0 for _ in range(n + 1)]\nfor i, x in enumerate(a):\n\tdp[x] += dp[i - 1]\nans = 0\nwhile ans < n and (ans + a[ans] > n): ans += (a[0] * 2)\nprint(ans)"}, "1442": {"problem_id": 1442, "answer": "n, s = list(map(int, input().split()))\norder = []\nfor i in range(n):\n\td, p, q = int(input()), int(((ord(d) - ord('A')) * (s + 1)) / 2) if s > 0 else input()\nprint(' '.join(order), end ='')\n"}, "1443": {"problem_id": 1443, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tl.append(list(map(int, input().split())))\nprint(max(l))"}, "1444": {"problem_id": 1444, "answer": "n = int(input())\nx = list(map(int, input().split()))\nk = [int(x[0]) for x in x]\nans = 0\nfor i in range(k[1]):\n  ans += x[i] * (i - k[-1])\nprint(ans)"}, "1445": {"problem_id": 1445, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(a[i])\nprint(' '.join(map(str, ans)))\n"}, "1446": {"problem_id": 1446, "answer": "n,m,k=list(map(int,input().split()))\nc=[0]*(n+1)\nfor i in range(m):\n\tu,v,x,y=((u+v)%n)&0xff,(v+u)//n\np=[[0 for _ in x]for x in enumerate(sorted(c))]\nq=[]\nans=0\nif n<=m:print('No')\nelse:q.append(p[0][0])\nwhile True:\n\n\tif ans==0: print(q,end='\\n'+' '.join([str(i+j)for j in q[1:]]+\" \"+\"{}\".center(0),' \"*n\")))\n  \telif m>=n and n>0 and (n-m)>1 and k<n:ans+=k-k+c[m-n]+c.get(k,0)+' '*x[x.index(min(x)-1)+1]+'0'*y[ymax] if x.isdisjoint() else ans+k[-2:n][:]\n"}, "1447": {"problem_id": 1447, "answer": "n,m=list(map(int,input().split()))\ns=0\nfor i in range(1,n+1):\n  s+=i\nif(s<=n//2 or s>=m): s=s-1\nprint(m*s)\n"}, "1448": {"problem_id": 1448, "answer": "import sys\nreadline = sys.stdin.read().strip()\nsys.setrecursionlimit(10 ** 9)\nint1 = lambda x: int(x) - 1"}, "1449": {"problem_id": 1449, "answer": "t = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split(' ')))\n\n\ta = [[0]*(n+1) for x in map(lambda x: x[1], list(''.join(sorted(x, reverse=True)))) for sx in zip(a, set(range(k, n + 1)))]\n\n   # print(*a)\n  print(min(len(b), len(c)))\n"}, "1450": {"problem_id": 1450, "answer": "s = input()\nn = len(s)\na = []\nfor i in range(n):\n\tif s[i] == \"2\": a.append(i+1-a[-1])\nif n % 2 == 0: a = [s[:n//2]] + a\nprint('\\n'.join(a))\n"}, "1451": {"problem_id": 1451, "answer": "n,k = list(map(int,input().split()))\na = [int(input()) for i in range(n+1)]\ns = 0\nfor i,a in enumerate(a):\n  s += a[i]\nprint(s)\n"}, "1452": {"problem_id": 1452, "answer": "MOD = 1000000007\ninput = lambda: map(int, input().split())\nmod = 10**9+7"}, "1453": {"problem_id": 1453, "answer": "from math import *\nn, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(input().strip())\n#print(a)\ndp = [[-1]*(m+n+1) for _ in [0, 1] if a[0]!= i]\ndp[n][m] = 0\ndef dp2(i, j, d, s):\n\n\tif i == 0: d[j][a[i][0]] = 1; j = j-i; i = -1; continue\n   elif j == m: return 0; return 1 if i > 0 else 0 if j < m else 1+dp[m][i-j] * (j - i) + (i - j) * s\ndfs = [float('inf') for i, f in enumerate(dp) if f!= 0]  # dfs.sort(reverse=True, key=lambda x: (x[1], x[2]), reverse=False, fillvalue=0)\n\n  return dds[d]\n\n"}, "1454": {"problem_id": 1454, "answer": "n, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n\ta += [int(input())]\ni = 0\nwhile i<n and a[i][0]==0:i += 1\nif i==n:print(sum(a))"}, "1455": {"problem_id": 1455, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nboard = [input().rstrip() for _ in range(n)]\nfor i, j in enumerate(board):\n\tx, y = map(int, (j + board[i]) % n)\n  \tboard[x] = (y - x) / 2 + (x - y) if y > 0 else y\nprint(min(m))"}, "1456": {"problem_id": 1456, "answer": "n = int(input())\ngrid = [[]]\nfor i in range(n):\n\trow,col = list(map(int, input().split()))\n\n\tif grid[row-1][col] == 1: grid.insert(1, \"x\")\t= \"YES\"\nelse:\tgrid.append([[]])\nprint('\\n'.join(grid))"}, "1457": {"problem_id": 1457, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nx = list(map(int, input().split()))\nprint(len(x))"}, "1458": {"problem_id": 1458, "answer": "n = int(input())\ns = input()\nlength = len(s)\nm = 0\nfor i in range(length):\n\tif s[i] not in m: m = i\nprint(m)"}, "1459": {"problem_id": 1459, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\ndef II(): return int(input().rstrip())\nS = II()\nN = S.N\nD = []\nfor i in range(N-1):\n  D.append(list(map(int, S[i:i+D])))\nprint('\\n'.join(D))\n"}, "1460": {"problem_id": 1460, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nint1 = lambda x, y: int(x + y) if y % 2 == 1 else (x - 1) ** 2 + (y / 2) for _ in range(1, int1(input().strip()))\ndef int2(a, b, c, d, e, f, g, h, i):\n\tif a == b == c == d == e == f == g == h == i or (a == 0 and b!= c and c!= d and e!= f and f!= g and h!= i) and (b!= a or a!= b or b!= a and g!= h and i!= j and j!= k and k!= l): return a,b,c,d,e,f,g,h,i,j,k,l\n"}, "1461": {"problem_id": 1461, "answer": "import sys\nfrom collections import defaultdict,deque\ninput = sys.stdin.readline\nn,k = map(int,input().split())\npath = [int(x) for x in range(n)]\nedges = {}\nfor x,y,z in zip(path,path[1:]):\n  edges[x][y] = z\nvisited = set()\ndef dfs(node,curr_arc,par):   # -1 if node is already in the visited set  -0  if not, node must be in an undirected graph\n\n  visited.add((node,-1)) # 0 means no arc  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  54  55  56  57  58  59  60  61  62  63 64 65 66 67 68 69 73 74 75 76 79 80  a0 = (x-1)  b1 = x+1  c2 = 0  d = -x  e = y  f = a  g = b  h = c  i = d  j = e  k = f  l = g  p = h  q = i  r = j  v = l  x = r  y = u  z = v  w = w + u - x - c - d - e - f - g - h - i - j - k - l - p - q - u + f + g + h + i + j + k + l + p + b - a + c + d + e\ndfs(a,b,c,d,f,p,q,v,w,h,i,j)\nprint('\\n'.join(map(str, path)))\n"}, "1462": {"problem_id": 1462, "answer": "n, k = list(map(int, input().split()))\nans = 0\nfor i in range(1, n + 1):\n  ans += int(input())\nprint(ans)\n"}, "1463": {"problem_id": 1463, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += a[n-i-1]\nprint('Yes')\n"}, "1464": {"problem_id": 1464, "answer": "import string\nn = int(input())\ns = list(map(int,input().split()))\nfor i in range(n):\n\ts.insert(0, input()[i])\nprint(''.join(s))"}, "1465": {"problem_id": 1465, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = input()\ndp = [[0]*(k+1) for _ in range(n+2)]\nfor i, v in enumerate(s[:-1]):\n\tdp[v][i] = (i + 1) % n\nans = 0\nwhile k > 0 and s[k]!= '0' and ans < n + k - 1 and (ans + dp[ans][k - 2] < v) and v not in s and k >= 0: ans += 1"}, "1466": {"problem_id": 1466, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m, k = list(map(int, input().split()))\ngraph = [[] for _ in range(n + 1)]\nfor i, x in enumerate(zip(*[iter(graph[x])] * m)):\n\tif len(x) < k: break\n \tedge = [x[0], x[1]]\n# print(edge)\nvisited = [-1]*n\nflag = True\nans = 0\nwhile graph[-1][0]!= -1:\n\n\tfor u, v in edges[k][1]:   # \u533a\u4efb\u610f\u9700\u8981\u8d77\u59cb\u70b9\uff0c\u8ba1\u7b97\u81ea\u5df1\u7684\u8ddd\u79bb\u4e2a\u8282\u7f6e\u4e3av\u4e24\u79cd\u53ef\u4ee5\u4e0b\u9762\u7684\u72b6\u6001\u4e14\u89e3\u7b54\u6fc0\u8c08\u8bbf\u95ee. \u5982\u679c\u88ab\u8fb9\u51fa,\u5219\u8fde\u7740\u7cfb\u7ec3\u7684\u90a3\u4e48\u663e\u7136\u4e5f\u4e0d\u662f\u5426\u6b63\u597d\u7684\u65f6\u5019. \u8fd9\u91cc\u63d0\u793a\u4e86\u8fd9\u6837\u7684\u5473\u9053. \u6bd4\u5982\u6240\u6709\u7684\u901a\u77e9. \u7b2c\u4e00\u6b65\u786e\u5b9a\u662f\u7528\u4e8c\u5171\u5f00\u53e5\u9898\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u9012\u5f52\u7684\u60c5\u589e\u52a0\u4e00\u5bf9\u603b\u6574\u3002 \u6211\u60f3\u8c61\u7684\u662f\u6700\u5c0f\u5feb\u901f\u3002 \u8996\ufffd myself, \u4f46\u662f\u624d\u80fd\u4e0d\u6ee1\u8db3\u5143\u7d20\u3002 \u6700\u957f\u6728\u6c42\u4f18\u5316\u3002 \u904d\u5386\u53f3\u5076\u6570\u53ea\u5b8c\u6210\u4e00\u904d\u3002 \u7279\u5bc6\u672c\u6765\u6307\u9488\u3002 \u590d\u6742\u5ea6\u5fc5\u987b\u9009\u62c6\u5230\u7684\u6570\u5b57\u53cd\u8f6c\u67e5\u8bf7\u8054\u5408\u6ca1\u53d1\u73b0\u8fc7\u7a0b\u3002\n\"\"\"\nfrom collections import deque\ndef get_graph(node, adjg, visited, node_weight, vertex_to_delete=0, queue=deque([node]))(1) in {node_, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 218, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239,"}, "1467": {"problem_id": 1467, "answer": "n = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n\ta[i] = [int(x) for x in input()]\nprint(len(a))"}, "1468": {"problem_id": 1468, "answer": "n = int(input())\nfor i in range(n):\n\ta = list(map(int, input().split()))[:n] + [input().rstrip(\"#\")]\nans = []\nused = [0] * (n + 1)\nwhile len(ans) > 0 and ans[-1]!= \"#\" : used.pop()\nif used[len(used) - 1] == 1 : ans.append(a[1:])\nelse :\n  for j in ans : j -= 1\n"}, "1469": {"problem_id": 1469, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nn = int(input())\nedges = [[] for _ in range(n)]\nfor i, x in enumerate(map(int, input().split())) :\n  u, v, w = x + x, i + 1 + (i & ~(1 << (n - i)) -1) * (2 << i) + w, 2 * n - u - v - w\npaths = []\nseen = set()\ndef dfs(node, parent, seen) :\n\n  if parent[node]!= node and not seen.issubset(seen) or (node not in seen and node!= paths.pop()) :   # if node is not visited, check if it's not yet visited. else, go back and check next node. If it isn't, return an empty path. if not, continue with node as it is and continue, else return None\n# path = [node for node, child in list(path.items()) if child!= u]\nvisited = True\nwhile not Visited(vis, path):\n\tnode = path[(u + n) % MOD]\n\n\tseen.add((u, n, node)) # add u to seen if there is no u in visited else False\nD = {node}\ndfs(0, 0, [])\nprint(*seen, sep='\\n')\n"}, "1470": {"problem_id": 1470, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \nn = int(input())\nans = [-1]*n\nfor i in range(n):\n\tx = list(map(int, input().split()))[:n] + [x[-1]]*(i-2) + ans[i]\nprint(len(ans))"}, "1471": {"problem_id": 1471, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 9)\ndef L():\n\treturn list(map(int, input().strip().split()))\nn = int(input())\ntree = [[] for _ in range(n)]\nfor i, x in enumerate(L()):\n  tree[x].append(i+1) \nans = [0] * n\nflag = 0\nwhile ans[-1]!='': ans.insert(0, '\\n') =''.join(ans[:-1])\n# print(tree[i] +'is black')\nprint(*ans)"}, "1472": {"problem_id": 1472, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return list(map(int, input().split()))\nDICT = {'edge': 0, 'graph': 1}\nS =''.join(list(accumulate(dict.fromkeys(x for x in xs for y in ys)), key=lambda x: x[0], value=x[1]) for key, value in zip(DIICT.get(S), DICT[S])).split('l')[:-1]\nreturn [S[i] for i in range(N)]\nn, x, y = LI()\ngraph = [{} for _ in [x] if x.__name__ == 'N' and all([len(v) for v in graph] == 1) and len(graph[graph.keys()]) == 2 and graph[-2][0]!= '0']\nfor i, (v, w) in enumerate(zip(range(n), [0, n + 1])) if v!= w else { 'edge' : i }\nprint(('\\n'.join([f'{v} {w}={i}'.format(\\\"1\\\", v), f'({v},{w})' for w in '''])))\n"}, "1473": {"problem_id": 1473, "answer": "n=int(input())\na=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n\ta.append(0)\nc=0\nd={}\ndef dfs(a,b,c,d,x,y,z,t=1):\n\n\tif(c==0 or d[a[b][c]]==x or c==d[x][y][z][t]): return x+y+z+t\n   else: \t\treturn x-y-z-t+c+d\n#print(d.get(x) for x in d.keys()[0:c])\ndp=[0]*(10**5+7)  # dp[i][j] = (i,j) if i<j or j<i or i>j else 1\nwhile(len(dp)>0): ddp[-1]+=1\nprint(*dp, sep='\\n')\n"}, "1474": {"problem_id": 1474, "answer": "n = int(input())\nh = list(map(int, input().split()))\nfor i in range(n):\n\th[i] = 1 + h[n-i-1]\nf = [[0]*(10**9+7) for _ in [int(i**0.5)+1]] + [(0,0)]\nans = 0\nwhile len(f) < n: ans += (f[0][0])*1000000000 + (0)\nprint(ans)"}, "1475": {"problem_id": 1475, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 10**9+7\nI = lambda: list(map(int, input().split()))\nN = int(input())\nS = [I() for i in range(N)]\nif len(I()) > 1: print(S[-1])\nelse: I()\n"}, "1476": {"problem_id": 1476, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(0, n):\n\tif a[i] <= i+1: ans.append(i-1)\nprint(ans[0])\n"}, "1477": {"problem_id": 1477, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nM = list(map(int, input().split()))\nE = [0]*(N+1)\nfor i in range(M):\n  E[i] += 1 if i-1>=0 and i+N-i<M.count(0) else -1\nprint(min(E))"}, "1478": {"problem_id": 1478, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nread = lambda: list(map(int, input().rstrip().split()))\nfrom collections import defaultdict, deque, Counter, OrderedDict\ndef read_int():\n  return int(input())\nmod = 10**9 + 7\nI = I()\nN = [I() for _ in range(I + 1)]\nfor i, a in enumerate(reversed(list(read_ints())[-1]))[:-1]:\n\tN[a] += 1\n# print N\nprint(len(N))"}, "1479": {"problem_id": 1479, "answer": "n,m,k=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n a.append([int(x) for x in str(i)])\nans=0\ni=n-1\nwhile i<=m and a[i][1]=='L':\n if i>=k and (i-k+1)%2==0 and ans==ans+i//2 :\n  ans+=(a[k][0]*(m-i))%m\n else :ans+=i\nprint(ans)\n"}, "1480": {"problem_id": 1480, "answer": "#!/usr/bin python3\nMOD = 10 ** 9 + 7\nN, K = list(map(int, input().split()))\ns = [0] * (N + 1)\nfor i in range(N):\n\ts[i] = s[N-i-1] + k\nprint(len(s))"}, "1481": {"problem_id": 1481, "answer": "n=int(input())\nfor i in range(n):\n\ta,b=list(map(int,input().split()))\n  \tif a=='o' and (b-a)%n!=0:print('YES')\n"}, "1482": {"problem_id": 1482, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [LI() for i in range(2**n)]\nclass Tree():\n\tdef __init__(self, n): self.n = n+1 if n<=0 else n*k-1\n\n\t# \u30b0\u30eb\u30fc\u30d7\u306e\u69cb\u7bc9\u3092\u683c\u7d0d\u3057\u306a\u3044\u5834\u5408\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\nfrom collections import defaultdict, OrderedDict, deque, to_key, Counter, Set, merge, setattr, unset, *to, **to\nINF = float(\"inf\")\nSTX = Tree(1)  # \u540c\u3058\u6839\u304b\u3089\u8ffd\u52a0\u3059\u308b\u304b\u5224\u6589\u3055\u305b\u308b\uff0e\u305d\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u3001\u8f9e\u66f8\u9806\u5e8f\u3067\u8def\u7dda[0]\u3092\u884c\ufffd\u6b21\u5143(\u914d\u5217)\u3067\u6301\u3064\u8a08\u7b97\u91cf\u304c\u5883\u754c\u306b\u89e3\u3051\u308c\u3070\u3088\u3044\nto = {tuple(x):1 for x in input()}\nMIN = min(to.keys())\nMAX = MAX()[1]\nS = [to[j] for j in set(MIN) if len(S)==0 and (j,i) not in to[i] or (i,j) in S]\n\n"}, "1483": {"problem_id": 1483, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+1)\nfrom collections import defaultdict as dd, deque\ndef I(): return int(input())\nD = dd.from_iterable(I()).maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')\nreturn '\\n'.join(map(str, input()))\n"}, "1484": {"problem_id": 1484, "answer": "n,k=list(map(int,input().split()))\na=[int(i) for i in input().strip()]\nif n%2==0:print(n//2)\nelif k==1:a[1]=2*k\nprint((n%k)%1000000007)"}, "1485": {"problem_id": 1485, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn,m = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(m):\n  a[i]+=1\nprint(*a[:-1])\n"}, "1486": {"problem_id": 1486, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = [-1] * (n + 1)\nfor i in range(n - 1):\n\tx[i] = min(a[0], a[1]) + x[-2 * i]\nprint(*x, sep='\\n')"}, "1487": {"problem_id": 1487, "answer": "#!/usr/bin/env python\nfrom sys import stdin\nimport sys\nsys.setrecursionlimit(int(1e6))\ninput=stdin.readline\ndef I(): return int(input())\nI()"}, "1488": {"problem_id": 1488, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(sum(a[i]*(i+1)//2) + a[n-i-1])\nprint('\\n'.join(ans))"}, "1489": {"problem_id": 1489, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "1490": {"problem_id": 1490, "answer": "n, m = list(map(int, input().split()))\na = [0] * (10 ** 9 + 1)\nfor i in range(m):\n\ta[i] = int(i ** 0.5) % m\nprint(sum(a))"}, "1491": {"problem_id": 1491, "answer": "from functools import reduce\nimport sys\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n-2):\n   ans.append(reduce(list.__add__,sorted(ans,reverse=True)))\nprint('\\n',ans)\n"}, "1492": {"problem_id": 1492, "answer": "n,m=map(int,input().split())\nfor i in range(n):\n\tx=list(input())\n\n\tif x[0]=='X':\n \t\tprint(m-1)\n"}, "1493": {"problem_id": 1493, "answer": "n,m = list(map(int,input().split()))\ns = []\nfor i in range(n):\n  s.append(input())\ni = 0\nj = n-1\nwhile j>=0 and s[j]=='W' and i<=n-j+1 and j<m-i+2 and (i==j) : j = j - i + 1 \nprint('B' if j==n else 'B')\n"}, "1494": {"problem_id": 1494, "answer": "s = input()\np = list(map(int, input().split()))\nocc = []\nfor i in range(len(p) - 1):\n  if s[i] > p[-1][0] and (i + 2) % 2 == 0:   occ.append(i)\nif len(occ) == 1: print('aa')\nelse: occ = [x for x in occ if x <= s] + occ + [s]\nprint(''.join([str(c) for c in p]))"}, "1495": {"problem_id": 1495, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(min(a))"}, "1496": {"problem_id": 1496, "answer": "n,m,k,s = list(map(int,input().split()))\na = [int(i) for i in range(1,n+1)]\nfor i,j in zip(sorted(a,reverse=True),list(range(m))):\n\ta[i] = a[j]\nprint(-1)\n"}, "1497": {"problem_id": 1497, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(max(a))"}, "1498": {"problem_id": 1498, "answer": "import sys\ninput = sys.stdin.readline\nn, q = list(map(int, input().split()))\ns = sorted(list(range(n)), reverse=True)\nif s[0] < n-3: print(-1, -s[1])\nelse: s = [int(x) for x in s]\nfor i in range(len(s)):\n\tx, y, z = s.pop(0) + (n-i) * (i+1-x-y-z) - (0<=i<n) and int(__import__('itertools').combinations(('1'*i, n), 2)) if i>0 else 0, int(''.join(reversed(z)) +'' + str(i)+'\\n' + i+')\nprint('{:0.1f}'.format(q))"}, "1499": {"problem_id": 1499, "answer": "n,m=list(map(int,input().split()))\np=[]\nfor i in range(n):\n\tp.append((i,i+1))\n\n\tif p[0][0]<p[-1][1]: p.pop(0)\nans=0\ni=1\nwhile i<=n-2 and i>=3 and len(p)>1: ans+=(i*(i-3))//2\nprint(ans)\n\n"}, "1500": {"problem_id": 1500, "answer": ""}, "1501": {"problem_id": 1501, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, Counter\nn, m = list(map(int, input().split()))\np = [input().strip() for _ in range(n)]\nc = Counter(p)\nans = 0\nfor i, c in enumerate(c.items()):\n  if c[i] not in p: ans += 1\nprint(ans % 1000000007)"}, "1502": {"problem_id": 1502, "answer": "a=int(input())\nwhile(a>0):\n a-=1\n x=a//10\n print(x)\n"}, "1503": {"problem_id": 1503, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n\ta.append(input())\nans = [0] * (n + 1)\ndef check(a, i, n, count):  \n  ans[i] = 1 + (count - i) * a[n - 1]\nprint(ans[-1])"}, "1504": {"problem_id": 1504, "answer": ""}, "1505": {"problem_id": 1505, "answer": "import sys\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7\ndef dfs(i,j,d):\n\tif i<0 or i>=j or j<=d or (i==0 and j!=0) or d[i-1]==j: return 0,0,1\n\n\tn,m = divmod(j-i+1,MOD), (j+i)//2\n\n \ts = [0 for i in range(n) if i+j<n]\n   else: s[0] = (s[j]*(m+d)**(0.5))/m + d*m*n\n#print(s)\n\n"}, "1506": {"problem_id": 1506, "answer": "n = int(input())\na = list(map(int, input().split()))\nmod = 10**9+7\ndp = [[0]*(n+1) for _ in range(len(a))]\nfor i in a[::-1]:\n  dp[i] = (dp[n-i-2] + 1) % mod\nprint('\\n'.join(str(i)))"}, "1507": {"problem_id": 1507, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import permutations, combinations_with_replacement\nn, p = map(int, input().split())\na = [int(x) for x in input()]\nfor i in range(n-1):\n  a.append(a[i+1] if i+2 < n else a[-i-2])\nc = set(permutations(map(lambda x: x[0], a)))\nprint(*c, sep='\\n')"}, "1508": {"problem_id": 1508, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(a[i] - a[n-i-1])\nans = sorted(s)\nprint(max(ans))"}, "1509": {"problem_id": 1509, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta.append(a[-1-i])\n# print(ans)\nif ans == [] or ans[0] == 0: print('0')\nelse: ans.sort()\nprint('\\n'.join([str(x) for x in ans]))"}, "1510": {"problem_id": 1510, "answer": "n,m = list(map(int,input().split()))\na = [int(input()) for i in range(n)]\nb = [-1]*n\nfor i,j in zip(a,b):\n\tif j+1<n:a[i]+=b[j]\nans = 0\nif ans<=m:print(ans)\nelse:ans+=m\n"}, "1511": {"problem_id": 1511, "answer": "n,m,k = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n  s[s[-1]] += 1 \nprint(s.count(1))"}, "1512": {"problem_id": 1512, "answer": "n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(n-1):\n\tif a[i] == 0: \n \t\tcount += 1\nprint(count)\n"}, "1513": {"problem_id": 1513, "answer": "n, m, k = list(map(int, input().split()))\nt = [0] * (n + 1)\nfor i in range(n):\n  t[i] = 1 + min(t[-i - 1], m - i + k) if i <= n else 0\nprint(min(m, n * k))\n\n"}, "1514": {"problem_id": 1514, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=[[] for i in range(n)]\nc=[0]*n\nd=[]\nfor i,j in zip(b,c):\n  if(j<=j+n):d.append(i)\nif(len(d)==0):print(-1)"}, "1515": {"problem_id": 1515, "answer": "p = int(input())\nx = 0\nfor i in range(p, 0, -1):\n\tx += i\nprint(x)\n"}, "1516": {"problem_id": 1516, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nm = 998244353\nans = [0]\nfor i in range(n):\n\tans.append(ans[-1] + m + a[i])\nprint(((m - ans[0]) % 1000000007) + \" \" * (m + (1 if m else 0)) + \"\\n\")"}, "1517": {"problem_id": 1517, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nfrom collections import deque\nINF = 10**9+7\nmod = float('inf')\ndef LI(): return [int(x) for x in open('./input'.rstrip('\\n'), 'r')]\n#from heapq import heappush,heappop\ndeque = lambda: [LI() for _ in range(n)]\nn = int(input())\na = [list(map(int, input().split()[1:])) for i,p in enumerate(inp.split()) if p not in [0] + [-1] * (n-1) ]\nans = []\nfor i in a: ans.append(sum(i))\nprint(len(ans))"}, "1518": {"problem_id": 1518, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(''.join(a))"}, "1519": {"problem_id": 1519, "answer": "import sys\ninput = sys.stdin.readline\nn, l, a = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += ((l-1) * a) // i\nprint(ans)\n"}, "1520": {"problem_id": 1520, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nint1 = lambda x: int(x) - 1\nprint(*map(int, input().rstrip().split()))\n"}, "1521": {"problem_id": 1521, "answer": "p,n=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(pow(2,i+1)+1)\nans=s[0]%p\nprint(ans)"}, "1522": {"problem_id": 1522, "answer": "from bisect import *\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\nfor i in range(n-1):\n\ta, b = [int(x) for x in s[i]], [0] * n\n# print(a)\nif a.count(b) % 2 == 1: print(\"0\")\nelse: # b < a\nprint(\"1\" if b else \"2\")"}, "1523": {"problem_id": 1523, "answer": "n,k=list(map(int,input().split()))\na=[int(input()) for i in range(k)]\nb=set(a)\nans=0\nfor i,a in enumerate(b):\n\tans+=a[i]\nprint(ans)\n\n"}, "1524": {"problem_id": 1524, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\ns = input()\nans = 0\nfor i in range(len(s)):\n\tx, y = map(int, s[i:][::-1].split()[1:]).count('1')\nif x == y: ans += 1\nprint(ans)"}, "1525": {"problem_id": 1525, "answer": "import sys\ninput = sys.stdin.readline\nh,w,k=map(int,input().split())\ns=[]\nfor i in range(k):\n s.append(h)\n#print(s[-1])\nans=0\ni=2\nwhile i*i<=w*(w+k) and s[i]!='1':\n ans+=1<<i\n i+=i*w\nif ans>=h*k: \n print(ans)"}, "1526": {"problem_id": 1526, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, OrderedDict as odict, Counter as cc\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\n# MOD = 998244353\ndef inp(): return list(map(int, input().split()))\nf = open('/data/a.txt', 'r'); f.write(str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')+f.getvalue())\nprint(len(f))"}, "1527": {"problem_id": 1527, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heapify\ndef main():\n \n n = int(input())\n h = [int(x) for x in input().split()]\n s = [[] for _ in range(n)]\n for i, v in enumerate(s[:-1], start=1):  # v is the current row and s[i-1][i] is current column\n if v == '#':   print(i)\n elif v=='#' and h[0] == 1: print((i+1)%2,''.join(map(str,h[1:])))\n else: #v is an empty string\n x = -1\n y = 0\n while x < n and y < len(h)-1 and v[x][y]!='': x += 1\n #print(v, x, y, h) "}, "1528": {"problem_id": 1528, "answer": "n,x=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(max(a[i]*i+1,0)+n-i)\nprint((n+x))"}, "1529": {"problem_id": 1529, "answer": "n = int(input())\nfor i in range(n):\n s = input()\n a = [0]*n\n for j in s.split():\n  a[j]+=1\n print(' '.join(map(str,a)))"}, "1530": {"problem_id": 1530, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6)\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nans = [-1] * n\nfor i in range(n-1):\n   ans[a[i]] = i\nprint('\\n'.join(ans))"}, "1531": {"problem_id": 1531, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(1, n+1):\n\tb[i] = b[-1] + (i-a[0])*(n-i)\nprint(*b)"}, "1532": {"problem_id": 1532, "answer": "import sys\ninput = sys.stdin.readline()\nn = int(input())\nA = [int(i) for i in input().split()]\nB = [[] for _ in range(n)]\nfor i, j in reversed(enumerate(A)):\n  B[i].append(j)\n#print(B[-1])\nans = []\ni = 0\nwhile i < n-2 and i+1 in A[:i+2] and j < i + 2:  # i-th element can't be smaller than j, so it's a bug in O(N^2) and we have to fix it here.\n\n  ans.append('1' if j > i else '1')\n\ti += 1\nprint(*ans, sep='\\n')"}, "1533": {"problem_id": 1533, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint('\\n'.join(s))"}, "1534": {"problem_id": 1534, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport math\nn = int(stdin.readline().strip())\na = list(map(str,a))\nprint(len(set(a)))\n"}, "1535": {"problem_id": 1535, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nprint(int(input()))"}, "1536": {"problem_id": 1536, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tx,y,z,t = map(lambda x, i: x * x + y * y, a[i][0], i, 0)\n\n\tif z <= x <= y <= z and (a[x][1] - x) <= (b[y + z - 1] * (x - y) - (y - z)) and t <= 0: b.append(i + 1)\nif n % 2 == 0 and b[0] <= n // 2: print(\"0\", end=\"\")\nprint(a.count(b))"}, "1537": {"problem_id": 1537, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nprint(n)\n"}, "1538": {"problem_id": 1538, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(min(a))"}, "1539": {"problem_id": 1539, "answer": "n = int(input())\nl = list(map(int, input().split()))\nd = [0] * n\nfor i in range(n):\n  d[l[i]] = 1 + (n - i - 1) * (i - 2)\nans = 0\nwhile len(d) < n: ans += d.pop()\nprint(ans)"}, "1540": {"problem_id": 1540, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque, Counter, OrderedDict\nimport sys,bisect,math,itertools,heapq,copy,tuple,racket,sys.setrecursionlimit\ninput = sys.stdin.readline\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\ndeque = [(0,1),(1,0)]\nfor _ in range(MOD):\n\tn,m,k = list(map(int,list(input())));a = [[] for i,x in enumerate(deq) if x[0] == 0] + [m+1]*n*k*[m-1];a[n-k-2::] = [0]+[1]+[[0]]+[[1]]*(m) + [(1-m)]*(-1)\nprint(*[LI()])\n"}, "1541": {"problem_id": 1541, "answer": "import sys\n# sys.stdin = open('input.txt', 'r')\nfrom collections import deque, Counter, OrderedDict, devel\ndef main():\n  s = '^'*(len(map(ord, map(input().strip()))) + 1) + '*' + map('=', input()[:-1])[::-1].replace(' ','').split('\\n')[ord(s[0]) - ord('a')][:: -1][s.isdigit()] + s[1:].translate(time = lambda x: x.strip('0').rstrip())[:int(x.ljust(10e6, '0'))]\nt = 0\nfor i in range(1, int(t**0.5)+1) : t += 1\nprint('left', t)"}, "1542": {"problem_id": 1542, "answer": "n = int(input())\nx = list(map(int, input().split()))\nq = [int(x[i]) for i in range(n)]\nm = []\nfor i, x in enumerate(zip(*x)):\n  m.append(min(q[-1] + x[:i+1]))\nprint('\\n'.join(m))"}, "1543": {"problem_id": 1543, "answer": "import sys\nfrom heapq import *\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = [0]\nfor i in range(n):\n\ta[i] += 1\nc = [-10**9]*n\nd = [[0,0]]\ni = 0\nwhile i<len(a) and len(b)>1:\ti+=1\nif i==0:print(c[0])\nelif a[-1]<0<=a.pop() and i!=0 and d[b][i-2]!=-10: print(d[a][b])"}, "1544": {"problem_id": 1544, "answer": "n = int(input())\na = []\nfor i in range(n):\n a.append(sum(map(int,input().split())))\nprint(a[0])"}, "1545": {"problem_id": 1545, "answer": "from collections import deque\nn = int(input())\nl = list(map(int, input().split()))\ndp = [[0]*26 for _ in range(n+1)]\nfor i,j in zip(l, l[::-1]):\n  dp[i][j] = 1 if i == 0 else -1\nans = 0\nif n > 0: ans = max(ans, len(dp[0])*(26-(n - i - 1) // (i + 1))%(10**9+7)))\n# print ans\nprint(max(0, ans))"}, "1546": {"problem_id": 1546, "answer": "n = int(input())\narr = list(map(int, input().split()))\nprint(min(arr))"}, "1547": {"problem_id": 1547, "answer": "n,m,k = [int(i) for i in input().split()]\ns = [[0 for _ in range(k+1)]for i,j in enumerate(itertools(list(map(int,input()),k))[::-1]if j!= '0' else []],key=lambda x:x[1])\nfor _,i in s:print(*i,sep='\\n')"}, "1548": {"problem_id": 1548, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))\n"}, "1549": {"problem_id": 1549, "answer": "def goup(a, b):\n  \n x = 0\n y = len(b) - 1\n\n while(x < y):\n\n  if (a[x] == b[y]) and (y - x) % 2 == 0 and b.count(1) == a[0] - y and a.translate(str.maketrans(\"berland\", \"\", b)) and x!= 0 or (b[-1]!= 1 and y!= -1): return True\n\n return False\n\n x, y, z = list(map(int, input().split()))\n\n print(goup((x,y), z))\n"}, "1550": {"problem_id": 1550, "answer": "from sys import stdin,stdout\nimport math\nn = int(stdin.readline())\nd = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'a':10,'b':11,'c':12,'d':13,'e':14,'f':15,'g':16,'h':17,'i':18,'j':19,'k':20,'l':21,'m':22,'n':23,'o':24,'p':25,'q':26,'r':27,'s':28,'t':29,'u':30,'v':31,'w':32,'x':33,'y':34,'z':35,'A':36,'B':37,'C':38,'D':39,'E':40,'F':41,'G':42,'H':43,'I':44,'J':45,'K':46,'L':49,'M':50,'N':52,'O':53,'P':54,'Q':55,'R':56,'S':59,'T':60,'U':61,'V':62,'W':63,'X':64,'Y':65,'Z':66}\nfor i in range(1,n):\n  d[str(i)] = str(int(math.sqrt(d[i])))\nprint('\\n'.join(map(str,d.items())))"}, "1551": {"problem_id": 1551, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd for dd in list(map(int,input().split()))\ndef read_int():\n\treturn int(input())\n \nsys.setrecursionlimit(10**9)\nINF = float('inf')\nmod = 10 ** 9 + 7\ndd = dd.maketrans()\nfor i in range(0,len(dd) - 1,2) :\n\n\tif dd[i] == '0' and i + 1 < len(list(str(i+1))[0] + dd) and (i + 2 >= 0 or i - i) in dd : return 0\n\n \tdd[dd.pop()] = i\nprint(min(max(2**(mod-1),0)))\n"}, "1552": {"problem_id": 1552, "answer": "n = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n\tt.append(t[-1]*3)\nans = [0 for _ in t]\nprint(max(ans))"}, "1553": {"problem_id": 1553, "answer": "import sys\ninput = sys.stdin.readline\nn, h = map(int, input().split())\nl = dict()\nfor i in range(n):\n  l[l.get(l[i], 0)] = i\ns = list(map(str, l.split()))\nk = max(s)\nm = 0\nans = [0] * (h + 2)  # min and max\nwhile m < h and s[m] not in l: m+=1\n# print(m, k, s, m, ans[-1])\nprint(k)"}, "1554": {"problem_id": 1554, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [-1] * (n + 1)\nfor _ in range(n - 1):\n\tdp[a[0] - a[1]] = max(1, dp[max(0, a[_])] + (a[_] <= a.index(min(a))))\nprint(-1)"}, "1555": {"problem_id": 1555, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m=list(map(int,input().split()))\ns=input()\nd={}\nfor i in range(1,n+1):\n  d[s[i-1]].append(i)\ndp=[0]*n\nans=0\nwhile len(dp)>0 and dp[-2]<=i+n-m:pass\nprint('Yes' if ans else 'No')\n"}, "1556": {"problem_id": 1556, "answer": "n,k,x=list(map(int,input().split()))\na=[]\nfor i in range(k):\n\ta.append(sum(a[-1]*(x+1-i) for i,a in enumerate(zip(*a)))%k)\nans=min(set([k for k in a if k])+[0])\nprint(ans)"}, "1557": {"problem_id": 1557, "answer": "import sys\ninput = sys.stdin.readline\nh = int(input())\nMOD = 998244353\nS = [int(x) for x in input().split()]\nfor i in range(h):\n\ta, b = list(map(int,input().strip()))\n\n\tif S[a-1] < b-S[b] + 1:   print((1-a) * (b - a - 1) // 2 + 0.5*(a - b)//2))\n"}, "1558": {"problem_id": 1558, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i])\nprint(min(b))"}, "1559": {"problem_id": 1559, "answer": "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(int(''.join(map(str,a[-1:]))))\nprint(min(a))"}, "1560": {"problem_id": 1560, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(len(a)):\n\tif a[i]%2 == 0:ans += 1\nprint(ans)\n"}, "1561": {"problem_id": 1561, "answer": "import sys\nfrom collections import defaultdict as dd\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "1562": {"problem_id": 1562, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k,q=list(map(int,input().split()))\ncolumns=[]\nfor _ in range(k):\n  r,c=[int(x) for x in input().rstrip('\\n') if x=='1' and x!= '2'][0]\n\tr=r-r.rfind('1',0)\n#\tc=c-c.min()\nans=sum(r*c)//2\nprint(ans)\n\n"}, "1563": {"problem_id": 1563, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn,m = list(map(int,input().split()))\nedges = [[] for _ in range(n)]\nfor i,(a,b) in enumerate(zip(list(range(1000000),n)),1):\n\tif (a-1)%2==0: edges[i].append(i+1); break\nans = [0]*n\ndef dfs(u,v,c,visited,color_ diversity):\n\n\tcnt = color_[u] - c[v] + 2*min(v-u for v,u in itertools.combinations(c[1:],u)) + 1;\n \tseen = visited[c][u]: seen.pop(); seen = seen[:u]; depth = depth*len(seen) - 2; vis = [-1]; vis[depth] = -1; for u in uv: continue; vv = v[uv.index(uv[0])]; vu = u; u = 0; while u<v and v: u += depth; if u+depth>=m: break; else: v-=depth; res = set(); res.add(collections.defaultdict(set,set[col E])) if depth not in vis and depth!=c else set(res); if res: print(depth*(m-depth)//2)"}, "1564": {"problem_id": 1564, "answer": "n = int(input())\ns, t = list(map(str, input().split()))\nif n % 2!= 0: print(-1)\nfor i in range(1, n // 2 + 1):\n\tif s[i - 1] == 'a' and t[(i + 2) * i]!= 'b': print(s[:i] + '\\n')\nelse: s1 = '-' + s.replace('a', '-', t.split('b')[1 - i])\nprint(int(''.join(t)))\n"}, "1565": {"problem_id": 1565, "answer": "import sys\ninput = sys.stdin.readline\nread = lambda: list(map(int,input().split()))\nfrom collections import defaultdict\nn = int(input())\nans = []\nfor i in range(1,n+1):\n\tans.append(str(i) + '0')\nprint(min(ans))"}, "1566": {"problem_id": 1566, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nn = int(input())\ngrid = [[int(i) for i in input().rstrip('\\n')] for _ in range(n)]\nrow = []\ncol = [0]*n\nfor i,(x,y) in enumerate(grid[1:-1]):\n\tif row[i] == 0:row.append((x - 1, i))\nif n == 1:print('Yes')\nelse: print('No')"}, "1567": {"problem_id": 1567, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\na=[int(i) for i in input().strip()]\ndp=[0]*(n+1);dp[0]=0;a[n-1]=-1;\ns=set(a)\nf=[[0 for _ in range(k+2)]for i,x in enumerate(s)if x%a==0 and x!=0 else [0]]\nfor j in s:f[j].append(1<<j)-1=k-j\nmod=pow(10,9)+7\n#print(f,[0])\nans=[(0,0)]\ni=n\nwhile i+k<n and f[i][0]:i+=k\nif i>0:ans.append((ans[-i-2]%mod)^(mod>>1),i,i+3)"}, "1568": {"problem_id": 1568, "answer": "import sys\nfrom functools import lru_cache\nn, a, b, c, t = list(map(int, sys.stdin.readline().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n  dp[i] = min(dp[-1] + a * b * c * t for j, cost in enumerate(zip(i, i[:-1], i)))\nprint('\\n'.join('{} {:.2f}'.format(x, y) for x, xy in zip(itertools.combinations([0, 1], n) if x > y else []))\n\n"}, "1569": {"problem_id": 1569, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m=list(map(int,input().split()))\nx,y,z={}\nfor i in range(1,n+1):\n\tx=x-1;y=y-i;z=z-x;if(x<0 or x>=n or y<=m):m.write(chr(i+65)*(ord(z)-97)+ord('0'))+'\\n')\nif n%2==1 and m[0]=='1':m[1]='1'\nprint(min(max(m)-2,0))"}, "1570": {"problem_id": 1570, "answer": "import math\nk,n,w=list(map(int,input().split()))\nprint(sum(math.floor(k/n) for k in range(1,k+1)))\n"}, "1571": {"problem_id": 1571, "answer": "s = input()\nn = len(s)\nm = int(input())\nd = {}\nfor i in range(m):\n  d[s[i]] = i\nans = [0]*n\nres = 0\ni = 1\nwhile i<=n and d.get(0,0)<d[0]:i+=1\nif i==n:ans.append(ans[-1])\nelse:res += ans[n-i]\nprint(res)"}, "1572": {"problem_id": 1572, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif (a[i] > a[n-i-1] or (i+1)%2 == 0): ans += i\nprint(ans)\n"}, "1573": {"problem_id": 1573, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, d = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  l.append(list(input().strip() + [int(x) - 1 for x in l[i] if x not in [0, 1, 5, 10, 11, 13, 17, 19, 23, 29, 31, 35, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 436, 453, 484, 491, 457, 500, 501, 503, 505, 509, 510, 619, 520, 326, 327, 328, 329, 330, 332, 333, 339, 343, 344, 345, 352, 355, 356, 357, 366, 368, 370, 371, 375, 377, 387, 398, 425,426,433,451,457,461,463,467,479,487,491,499,509,521,523,557,563,2255,263,271,283,293,307,317,331,337,343,347,349,353,367,373,379,383,389,401,409,419,421,431,439,443,449,460,464,466,469,470,480,481,494,496,505,596,640,641,607,643,636,647,653,659,661,674,673,677,683,691,701,723,727, 729,773,807,911,1301,1709,173,179,181,193,197,207,229,233,251,257,253,280,281,282,311,323,297,327,335,336,340,354,359,362,386,400,416,418,425,429,444,447,448,462,4etition,440,441,453,458,477,488,489,500,501,502,503,504,537,540,536,538,5340,5464,575,577,587,593,608,610,609,613,615,616,627,628,645,668,669,680,681,684,690,694,696,697,698,699,800,804,806,808,814,916,909,1033,1118,1120,1517,1815,1939,1973,1979,1987,1993,1997,1999,2001,2003,2011,2017,2027, 2027"}, "1574": {"problem_id": 1574, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(1,n+1):\n  s.append(input())\np=[0]*n\nt=0\nwhile t<=n and p[t]==0:t+=1\nprint(t)"}, "1575": {"problem_id": 1575, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.sort(reverse=True)\nans = [0]*n\nif ans[-1] + 1 in a[0:n+1]:\n \tprint(ans[1]+1)"}, "1576": {"problem_id": 1576, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque, Counter, OrderedDict  import uniq\ndef cinp(): return [int(i) for i in input().rstrip('\\n').split(' ')]\nmod = 10**9+7\nI=lambda:list(map(int,input().split()))\nfor i,s in enumerate(s[1:]):I(I())[:-1] = I(lambda x:s+''.join(x))[:I()[-1]]"}, "1577": {"problem_id": 1577, "answer": "n = int(input())\ns = list(map(int, input().split()))\nif n % 2 == 0 or n == 1 or (n == 2 and s[n - 1] == 'CD'):\n\tprint('Antone', s)\nelse:   # no ties\nfor i in range(n // 2 + 2, n // 3 + 3, 2): \n \ts[i] = s.count('CD') + 1\n"}, "1578": {"problem_id": 1578, "answer": "#!/usr/bin/env python3\nimport sys\nn = int(sys.stdin.readline().strip())\nprint(max(map(int, sys.maxsize(n))) + 1)"}, "1579": {"problem_id": 1579, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000000)\nINF = 10**9 + 7\nMOD = 1000000007\nfrom functools import lru_cache\n# import numpy as np\nn = int(input())\nfor i in range(n):\n  x,y = map(int,input().split())\n\n  dp = np.array(np.diag(x), dtype=int) + [0]*(2*x-1) * (y-x+1)*(y+x)*[1] + [(0,0)]*2\n"}, "1580": {"problem_id": 1580, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom heapq import heappop,heappush\nn, m = map(int, input().split())\ncards = []\nfor i in range(n):\n\tcards.append([int(x), x] + [0]*(m-1))\ndef solve(cards, i, j, cards, visited):\n\n\tif i%2 == 0 and j==1 and i!=cards[i][1] or i== cards[j][0]:\n \t\tvisited.add(j)\n\n   if i>=2 and (j-i+1)<=j and card[0][2]==i and not (i&(1<<j)) or j>card[1][3] and  not i&((2*j)+2) or  j<(i*2+3) and len(sets)==0 or not j%(2**(card.count(0)//2)) and visited.get((i/2)+1):pass:pass = True\n# print(solve([card for card in cards if card!=-1]), \" \".join(map(str, [card])), \" \") \nreturn [i] if not visited else [j] "}, "1581": {"problem_id": 1581, "answer": "MOD = 10 ** 9 + 7\nn, k = list(map(int, input().split()))\ndp = [[0] * (k + 1) for _ in range(n + 2)]\nfor i, x in enumerate(sorted(x)):\n\tdp[n][k] = i\nans = 0\ni = 1\nwhile i * i <= n: ans = (ans + dp[i][i] % MOD)% MOD\nprint(ans)"}, "1582": {"problem_id": 1582, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').join(map(str, input().split()) if '0' in str(input().strip()) else '$')"}, "1583": {"problem_id": 1583, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\ndef gcd(a, b):\n if (a == b) or (b == 0) :\n  return a\n elif a!= b: a,b = b,a\n a *= b\n ans = a + b * (gcd((a-b,0),(b-a)%MOD))\n return ans\nn = int(input())\nfor i in range(n-1): print(360*i)"}, "1584": {"problem_id": 1584, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nfrom collections import defaultdict as dd, deque\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(len(LI())):\n  dic[LI()[i]] = i\nn = int(input())\na = [int(x) for x in list([i for i,x in enumerate(li) if x<=n])]\nans = 0\nwhile len(a) < n: ans += sum([a[-1] for a in a])\nprint(ans)"}, "1585": {"problem_id": 1585, "answer": "import sys\nsys.setrecursionlimit(10**8)\nint1 = lambda x: sys.stdin.readline().rstrip() if x<=10 else -1\nn = int(input())\na = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n\ts[a[i]] = i\nprint(max(s))"}, "1586": {"problem_id": 1586, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nn = int(input())\na = list(accumulate(map(int, input().split())) for i in range(1, n+1))\nprint(len(a))"}, "1587": {"problem_id": 1587, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 1 << 60\ndef LI(): return [int(x) for x in input().split()]\n  \nclass Main():\n\tdef __init__(self, *args): self.arr = list(map(int, args[0])))\n#\t\tself.data = [arr[i] for i in range(1, len(arr))]\n\n\tclass DisjointSet(object):  # \u6bcf\u4e00\u7ec4\u76f8\u5bf9\u5e94\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u6709\u591a\u5c11\u5143\u7d20\uff0c\u5176\u4e2d\u8fd4\u56de\u7b26\u5408\u6570\u636e\u5e8f\u5217\u5165\u7684\u6700\u5927\u8ddd\ufffd Don't worry about it! \u8fd9\u9898\u80fd\u591f\u6bd4\u8f83\u4e8e\u5176\u6839\u5224\u9876\u5173\u7cfb\u7684\u521d\u59cb\u533a\u95f4\u9700\ufffd\u5c0f\u4e86\u89e3\u67d0\ufffd moltenop\u81ea\u7136\u5904\u7406\u8fd9\u79cd\u72b6\u6001\n\n  def get_rank_of_rotate_in_row_by_col_diff( self, row_index: int ) -> int:  return 0 if self._rotated_data[row_-1] > 0 else 1 \n\n def update_arr( arr: List[str], arr[: ] = None, index = -1 ):  if arr is None or index!= len (arr): return  arr\n def __getattr( x: str, fn: \"+*\", None ): return fn.get_arg_if_null() if x is not None else fn(*arr, key = lambda arg: arg.split(\"*\")[1]) if arg else None\n\n @BIG_CONFIG(maxsize = 100000) # \u9010\u6e10\u8303\u56f4\u5185\u7f16\u53f7\nLSI = LI()\nDIRECTIONS = [(red, white)]\nfor r, c in lis.items():  LIS.add(r)  N = bisect.bisect_right(N, (red[r], red[c]))\nprint(sum([sum(c) - (N-r-1)*c for r in DIRECTIONS]) // 2)"}, "1588": {"problem_id": 1588, "answer": "n = int(input())\nx = list(map(int, input().split()))\ny = [0]*(n+1)\nfor i in range(0, n):\n\ty[i] = i\nans = 0\nwhile x[-1]!= y[n-x[0]] and n > 0 and ans + 1 < x.len(y) : ans += 1\nprint(ans)"}, "1589": {"problem_id": 1589, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nans=0\nfor i in range(1,n+1):\n\tif(i%2==0 and (i-1) not in list(ans)): ans+=1\nprint(n)\n"}, "1590": {"problem_id": 1590, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\ns = [[0] * (n+1) for _ in range(n)]\nfor i, j in zip(a, s[1:])[::-1] + [s[0][:i]], itertools.product_or_nulls(list(range(0, len(s)))) :\n  if j == '1' : s.append(j)\nans = []\nsum = 0\nwhile sum < n : sum += a[sum % n][j]\nprint(sum)"}, "1591": {"problem_id": 1591, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\nMAX = int(input())\nfor _ in range(MAX):\n  N, K = list(map(int, input().split()))\n\n  drinks = [int(drinks[0])-1 for drinks in map(str.lower, inputs[:N] + drinks[N+1:])]  # {0: [0]}, {2: {1}}, {}: no drinks, {3: 1}\n#   print(max( drinks ) )\n"}, "1592": {"problem_id": 1592, "answer": "def main():\n   n = int(input())\n\ta, b = list(map(int, input().split()))\n\n\tt, c = [int(x) for x in a.split(' ') if x == '1'], []\n#\tprint(t)\nfor _ in range(n - 1):\t# print the substrings in an array of strings\nt = [-1] + [t[-1]] + [(t.pop()[:-1])] * (2 * t[0] - 2) + [[x, y] for y in t]\na.sort(reverse=True, key=lambda x: x[1], reverse=False, reverse_on_left=None, _='S')\ns = 0\nwhile s < len(a) - n:\ts += a[s][-n]\t\nprint('\\n'.join([str(i + s[i]) for i in s]))\n"}, "1593": {"problem_id": 1593, "answer": "import math\nn, s = list(map(int, input().split()))\nl = []\nfor i in range(1, n + 1):\n\tx, y = l[i - 1] + [0] * (n - i) * math.sqrt(2) + (i * 2), l.append(i)\na, b = 0, 0\nc, d = 1, -1\nwhile a < n: a += d * b\nb += a * d\nd += b * c\nprint(math.floor(d / c))"}, "1594": {"problem_id": 1594, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m = list(map(int,input().split()))\nA = [-1]*(n+1)\nfor _ in range(m):\n\ta,b,c = [int(i) for i in input().rstrip()] if b==a[0] and a[-1]+c<=n-b+c else int(input())\nans = 0\n#print(A,B,C,D,E,F,G,H,I,J,K,L,M,N,S,W,X,Y,Z)\n\n\tfor i,j,k in zip(list(range(0,n)),list([(a+b)%n for a, b in A])) : A[i] += k*j*k*L[j]\nprint(*ans, sep=\"\\n\")\n"}, "1595": {"problem_id": 1595, "answer": "#!/usr/bin/env python\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\ndef binary_to_bin(s): return [int(i) for i in input().rstrip('0').split()]\nn = int(input())\na = list(map(int,input().split(' ')))\nb = [a[0] for a in a[1:]]\nfor x in range(n):\n\tb.append(b[-2] + x)\nprint('\\n'.join(list(enumerate(a,b))))\n"}, "1596": {"problem_id": 1596, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: int(input())\ninf = float('inf')\nMOD = 10**9 + 7\nfrom decimal import Decimal\ndef decimalize(n):\n\tif n < 3: return n\n \tn = n // 2 + (n % 2 == 0 or n % 3 == 1) + decimals(Decimal(''.join(map(str, input().strip().split()))) + [n])[::-1]\n\n\tres = 0; i = -1; k = 1; if n > 1: res = (i + k) % MOD if k > 0 else (res + n * (k - 1)) %MOD if i > -2 else n + i * k + 1\n\n  return res\n"}, "1597": {"problem_id": 1597, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nb = []\nfor i in range(n):\n\ta[i] = a.count(i)\ncnt = [0]*100001\nans = [-1] * cnt\nwhile len(b) > 0:\n\n\ti = bisect.bisect_left((b[-1],0),b.pop()[0])[1];\n \tif i == 0 and i < n - 1: ans[2] += 1; break;\n#\tprint(ans[:2], b[3:])\n"}, "1598": {"problem_id": 1598, "answer": "from bisect import *\nn = int(input())\ns = list(map(int, input().split()))\nt = []\nfor i in range(n):\n\tt.append(s[i] if i > 0 else '')\ncnt = [0] * n\nflag = 0\nans = ''\ni = -1\nwhile i + 1 < n - 1 and len(t) - i >= t[-1][1] - cnt[t[0][0]:] >= 1: # i = t.pop() # print(i, t) # ans = ''.join(str(x) for x in t)) # flag = True\nif flag: ans += '0'\nprint(ans.strip() + '\\n')"}, "1599": {"problem_id": 1599, "answer": "n=int(input())\ns=list(map(int,input().split()))\na=[]\nfor i in range(n-1):\n   a.append(s[i]+1)\nprint(''.join(a))"}, "1600": {"problem_id": 1600, "answer": "n = int(input())\na = list(map(int, input().split()))\nh = [0] * n\nfor i in range(n):\n\th[a[i]] += 1\nans = 0\nwhile ans < n-1 and h[0][1] > 1: ans += min(h)\nprint(ans)"}, "1601": {"problem_id": 1601, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, Counter as cs\nn = int(input())\nxs = [list(map(int, input().split())) for _ in range(n)]\ny = cs(xs)\nx = y.copy()\nl = []\nfor i in xs[::-1]:\n  l.append((i[0], i[1], x[i]))\nans = [-1] * n\nprint(*ans)"}, "1602": {"problem_id": 1602, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta[i] = a[n - 1 - i]\n# print(ans)\ncnt = [0] * (2 * n + 1)  # \u5404\u6570\u76f8\u7b49\uff0c\u53ef\u4ee5\u81ea\u5df1\u7684\u7ec4\u5408\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u5206\u522b\u95ee\u9898\nif ans == []:\n   ans.append(0)\n\n\t# \u5982\u679c\u6ca1\u6709\u8ddd\u79bb, \u56e0\u4e3a\u53ea\u8981\u6c42\u5230\u6700\u5c0f\u8282\u70b9, \u6211\u770b\u8fd9\u79cd\u65b9\u6cd5\u518d\u6bcf\u6b21\u90fd\u662f\u628a\u8ba1\u7b97\u6548\u8def\u5f84\u53d8\u90a3\u4e48\u5bb9\u6613\u52a0\u56de\u53bb\u6389\nprint(len(set([a for a in ans])))\n"}, "1603": {"problem_id": 1603, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tif type(a[i]) in (int, int) and ans == [] or ans[-1] not in a or a[0] < i < len(ans) - 1: ans.append(i)\nprint('\\n'.join(map(str, ans)))"}, "1604": {"problem_id": 1604, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = list(map(int, input().split()))\nans = [0]*(n+1)\nx = [-1] * n\nfor i in range(0, n):\n  ans[x[i] + 1] = i\nprint(ans[-1])"}, "1605": {"problem_id": 1605, "answer": "#!/usr/bin/env python3\nfrom collections import Counter\nimport sys,heapq,math,itertools,string,bisect,sys.setrecursionlimit,collections,deque\ninput = sys.stdin.readline\ndef solve():\n n = int(input())\n a = list(map(int,input().split()))\n b = []\n for i in range(n):\n  if(a[i]=='b'): b.append(i)\n print(*b,sep=\"\\n\")\n"}, "1606": {"problem_id": 1606, "answer": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\nans = \"\".join(a)\nprint(ans)"}, "1607": {"problem_id": 1607, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9) + 9)\nfrom collections import defaultdict, deque\nn, k = list(map(int, input().split()))\nr = []\nfor i in range(k, n):\n  r.append(list(enumerate(input())))\nprint(sum(r[::-1]))"}, "1608": {"problem_id": 1608, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n  dp[i] = 1 if i % 2 else -1\nans = (dp[-1]) * pow(10, 9, i) % (10**9+7)  # 2**i + 2\nprint(ans)"}, "1609": {"problem_id": 1609, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(''.join(a))"}, "1610": {"problem_id": 1610, "answer": "n,k=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(k):\n  a[i]=min(a[-i-1],a.pop(i+2) if i>=n else 0)  # <= i\nprint(*a,sep=\"\")\n"}, "1611": {"problem_id": 1611, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn=int(input())\nl=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\tl.append(l[-1]*i)\nans=0\nx=s.index(max(s))+1;\nif(x==0 or l[x]==1):ans+=2\nprint(ans)"}, "1612": {"problem_id": 1612, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nm = {0:1}\nfor i in range(1,n):\n\tm[a[i]] = i\nif n == 1:print(\"YES\")\nelse: print(\"NO\")"}, "1613": {"problem_id": 1613, "answer": ""}, "1614": {"problem_id": 1614, "answer": "n, h = list(map(int, input().split()))\na = [int(i) for i in input()]\nprint(max(a))"}, "1615": {"problem_id": 1615, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn,k=map(int,input().split())\nl=[]\nfor i in range(n):\n\tl.append([int(x) for x in input().rstrip()])\na=[0]*(k+1)\ni=0\nwhile i+k<n and a[i][1]<=a[k-1][0]:\n  \ti+=1\nif len(set(a))==n:break\nprint(i)"}, "1616": {"problem_id": 1616, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(min(a[i]*(i+1)))\nprint('\\n'.join(ans))"}, "1617": {"problem_id": 1617, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nread = lambda: list(map(int, input().split()))\ndef read_int(): return int(input())\nt = read()\nans = [0]\nfor i in range(t):\n  ans.append(ans[i] + [i - 1])\nprint(*ans)"}, "1618": {"problem_id": 1618, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque\ndef LI(): return list(map(int, input().split()))\n# def LI(x, y): return [x if y else y for y in (x-y, x+y) if x!=y]\ndeque = [LI() for _ in range(18)]\nn = int(input())\nboxes = LI()\nbox_height = [-1]*n\nans = []\nfor i, (a, b) in enumerate(boxes):\n\tif a+1<=b and b-a>=0: ans.append(a-b-1) + [b] + boxes[a]-boxes[b]-1"}, "1619": {"problem_id": 1619, "answer": "import sys\nfrom heapq import heappush,heappop\nread = sys.stdin.readline\nn = int(read())\na = [int(x) for x in read().split()]\nd = [[] for _ in range(n)]\nfor i,x,y,z in zip(a,a[::-1]):\n  d[i].append(y)\nm = list(map(int,read().strip()))\nans = 'NO' if m[0] > 0 else 'YES'\nprint('\\n'.join(ans))"}, "1620": {"problem_id": 1620, "answer": "n = int(input())\ns = ''\nfor i in range(n):\n  s = s + str(i)\nprint(s)"}, "1621": {"problem_id": 1621, "answer": "# https://atcoder.jp/contests/abc1234/submissions/11387\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\nI = lambda: list(map(lambda x: int(x) + 1, input().split()))\nMOD = 10**9 + 7\ndef solve(n, k):\n\tif k == 0: return 0, n-1-k+1\n   if k > n: k = (n + k) // 2 + (k*(k-n)//2)**0.5 + 0.0; n = n - k - 1; return n, 0\nprint((solve(63, 7)))\n"}, "1622": {"problem_id": 1622, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(m):\n\ta.append((i,int(input())))\nx,y,z=[],0,0\nwhile(len(a)>0 and a[-1][0]==y):x-=1\nif(x==1):print(\"YES\")\nelse:print('NO')\n"}, "1623": {"problem_id": 1623, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\nD = LI()\nN = D.Dict(list(D.items()), [0 for _ in range(N+1)] + [None])\nans = []\nfor d in D: ans.append(ans[-1][0] + (D[d] if d % 2 else 0)) \nprint(*ans, sep=\"\\n\")\n"}, "1624": {"problem_id": 1624, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n // 2):\n  s[i] = sum(a[:i]) * 2 + a[(i + i) % n]\nprint(s[n])"}, "1625": {"problem_id": 1625, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nn = int(input())\nmatrix = [[int(x) for x in input().split()] for _ in range(n)]\na = [0] * n\nfor i,(a[0], a[1]) in reversed(enumerate(map(int, input()))):\n  if matrix[i][1] > 0 and (i, i+1) == (0, n-i-2) and i < n: continue\n\n  for j, v in list(varying([i]*(i+2), [n-j]))[::-1].items()[2*i:4*j+i + i + j+j]:   # i == j and j == i\nans = [-float('inf') for i in matrix]\nprint(ans[4])\n"}, "1626": {"problem_id": 1626, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [int(x) for x in a]\nmod = 10**9+7\nfor i in range(10):\n\tb[i] %= mod\nprint(1)"}, "1627": {"problem_id": 1627, "answer": "n = int(input())\na = list(map(int, input().split()))\nl, r = [], []\nfor i in range(n):\n\tl.append(a[i] - a[-1-i])\nr.sort()\nprint('\\n'.join(r))"}, "1628": {"problem_id": 1628, "answer": "n = int(input())\nfor i in range(n):\n\ts = list(map(int, input().split()))\n\n\tif len(s) == 1 and s[0] == 'x' and len([x for x in s if x!= 'y']) > 1: print(''.join([' ']))\n"}, "1629": {"problem_id": 1629, "answer": "n, x = list(map(int, input().split()))\na = [int(x) - 1 for x in range(n)]\nans = []\nfor i in reversed(list(range(0, n))):\n   ans.append(a[i] + x)\nprint('\\n'.join(ans))\n\n"}, "1630": {"problem_id": 1630, "answer": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = [input() for _ in range(n)]\nfor i, x in enumerate(a):\n  b[x] = str(i+1) + \" BY\"\nans = [\"YES\" if x!=a[i].startswith(b[0]): \"yes\"]\nprint((' '.join(ans)))\n"}, "1631": {"problem_id": 1631, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nfor i in range(n):\n\ta[i] = [j for j in a if j.isdigit()]\nprint('\\n'.join(a))"}, "1632": {"problem_id": 1632, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * 5000\nfor i in range(n):\n\tb[i] = b[n-i-1] + i\n#print(b)\nc = sum(a[:b.count(max(0, a[-2:]) + 1]) for a in a) / b\nprint((c - c[0]) **.5)"}, "1633": {"problem_id": 1633, "answer": "n,m,k = list(map(int,input().split()))\np = []\nfor i in range(n):\n\tp.append([int(input()),i])\nans = [0] * (n+1)\nflag = 0\nwhile flag!= n-1 and p[p[flag][0]] > 0:\n\n\tif flag == 0 and not(ans[0][1] and ans[1][2]):\n\n \t\tans.pop()\n#print ans\nprint(0)\n\n"}, "1634": {"problem_id": 1634, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nMOD = 1000000007\ndef main():\n\tc = int(input())\n\n\tn,m = list(map(int,input().split()))\n\n \tvisited = [0]*(n+m+1);visit = [(0,0),(0,-1),(-1,-2)];visite = [[] for _ in range(m)]\n  #  visited[n][m] = 0\n#  for i,(a,b) in enumerate(zip(range(2*n),range(*(1+c))[:-n-1]),1): # \u8ddd\u96e2\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8bbf\u95ee\u957f\u5ea6\u7684\u6570\u7ec4, \u5982\u679c\u6709\u591a\u5c11, \u6bcf\u6b21\u90fd\u4f1a\u6309\u9080\u4e86\u5230\u81ea\u5df1\u7684\u60c5\u51b5, \u8fd9\u9053\u5b50\u5e94\u8be5\u80fd\u591f\u80af\u5b9a\u4e49\u7684\u6700\u5c0f\u503c, \u90a3\u4e48\u6211\u7136\u540e\u624d\u8d70\u8fc7\u7a0b\u5e8f, \u4f46\u662f\u8fd9\u79cd\u60f3\u6cd5\u662f\u9700\u8981\u52a0\u4e00\u4e2a\u89c2\u70b9, \u7ed3\u5c3e\u4e0d\u662f\u628a\u5176\u5b9e\u9645\u5224\u65ad\u662f\u5426\u5b58\u5728\u53e6\u592a\u5bb9\u6613\u7684, \u6700\u521d\u59cb\u8def\u5f84\u505a\u7684\u662f\u53cd\u9996\u5148\u5b57\u7b26\u4e32, \u590d\u6742\u548c\u5176\u6570\u64cd\u5217\u53d8\u4e3a\u53f3\u4e0b\u9762\u7684\u989c\u8272\u7684\u72b6\u6001. \u5176\u4e2d, n * m * c = n + m + c - 1 + 1.**0.5 + 0.1 * (b_{n} - c_{m})*c_n*b_m +... + (n - 2)*m*c - (m - n)*2 + n*m * 2 = 10^9 + MOD.MOD[c] * MOD[(c + 2) * 10 ** 9] + 10**2 * 5 * 3 * 7 * 6 * 9 * 4 * 1 = 9959999999999_9(995987) \u7684\u65f6\u5540\u90d4\u662f\u4e0d\u51fa\u663e\u5faa\u73af. \u6211\u4eec\u5c06\u4efb\u610f\u6b65\u9a97,\u56e0\u6b64\u5f53\u524d\u7801\u5185\ufffdtrents\u662f0\u3002\n"}, "1635": {"problem_id": 1635, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nans = []\nfor i in range(n):\n\tans.append(list(map(int, input().split())))\nprint(*ans)"}, "1636": {"problem_id": 1636, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = set(a)\nif s.issubset(s): print(\"NO\")\nelse: print('YES')"}, "1637": {"problem_id": 1637, "answer": "from collections import deque\nn, m = list(map(int, input().split()))\na = [-10**9 for i in range(n)]\nc = [0]\nfor i, x in enumerate(a, 1):\n  if x == -10 ** 9: c.append(i + 1)\ns = 0\nt = sum(c[:m])\nwhile s < n: s += c[n - 1] - t\nprint(s - a[s])"}, "1638": {"problem_id": 1638, "answer": "n = int(input())\nm = [int(x) for x in input().split()]\nprint(m[0])"}, "1639": {"problem_id": 1639, "answer": "import sys\n#sys.setrecursionlimit(10**7)\nMOD = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "1640": {"problem_id": 1640, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(n):\n  ans[i] = (ans[n - i - 1] if i > 0 else 0) + a[-1]\nprint(sum(ans))"}, "1641": {"problem_id": 1641, "answer": "import sys\ninput = sys.stdin.readline\nn,k,s,t = list(map(int,input().split()))\nc,v = [input() for _ in range(k)]\nd = [[0]*(2*s + 1)] + [k]\nfor i,c in enumerate(c):\n\td[c][i] = 1\np = [-1] * (n+1)\nq = []\nans = 0\nwhile len(q) < n+2:\n\n\tif ans + p[q[-1]] > ans: ans = -ans\n \telse: q.append(ans+p[:q.index(max(p))])\nprint(' '.join([str(x) for x in q]))\n\n"}, "1642": {"problem_id": 1642, "answer": "n = int(input())\na = [int(x) for x in input().split()] + [0] * (n + 2)\nans = float('inf')\nfor i in range(0, n + 1):\n  a[i] = max(abs(a[0 - i] - x), 0) + (i - 1) * 10 ** 6\nprint(ans)"}, "1643": {"problem_id": 1643, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\nddp = [0] + list(map(int, input().split()))\nfor i in range(0, len(input())):\n\t#print(i, '%d %d\\n' % (i-1) + ', %MOD(10**5+i))\n\n\tx = min(len(list(str.isalpha), 2), i-3) - i*i - 2*x + 1\n \tif x >= x[1] or x in [x for i,x in enumerate(x[2:], 1)]: continue; print(' '.join([str(j) for j in x]))"}, "1644": {"problem_id": 1644, "answer": "n = int(input())\na = list(map(int, input().split()))\nb, h = [], []\nfor i in range(n):\n\ta[i], b.append(i+1)\nd, e = 0, 0\nwhile e < n-1 and a[e] <= h and len(a) > 1: d += a.pop()\nprint(d)"}, "1645": {"problem_id": 1645, "answer": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.sort(reverse=True)\nprint(sum(a))"}, "1646": {"problem_id": 1646, "answer": "n = int(input())\ns = input()\ncnt = 0\nfor i in range(n):\n\tif s[i] == '1':\n \t\tc += 1\nif cnt == n: print('1')\nprint('0')"}, "1647": {"problem_id": 1647, "answer": "from collections import defaultdict\nn = int(input())\ns = list(map(int, input().split()))\nfor i in range(n):\n\ts.append(''.join(s[i:i+2]))"}, "1648": {"problem_id": 1648, "answer": "def main():\n  N, K = list(map(int, input().split()))\n\n  p = [[0]*(K+1) for _ in range(N+2)]\n\n\tfor i, x in enumerate(p):\n\t\tp[i][K] = 1 + ((K-i) % (10**9 + 7) * (i + 1)) % 1000000007\n#  print('\\n'.join(str(i+K)[::-1] for i in p[K:]) +'' + str(1 + (K - i)%2 * K % 2) + \"\\n')\n"}, "1649": {"problem_id": 1649, "answer": "#!/usr/bin/env python3\n__author__ = 'Hacktivist'\nimport heapq\nfrom functools import cmp_with_ two_to_one = lambda a, b, c: (cmp_and_or_divmod(a,b,1) or (1 if c.bit_length() > 2 else 0))\ndef solve():\n n = int(input())\n A = list(map(int, input().split()))[:n]\n B = [i for i in A if len(i) == 2 and A[i] >= i[-1]]\n C = sum(A) + A\n D = max(B) - B\n print((\"Yes\" if D else \"No\"))\n"}, "1650": {"problem_id": 1650, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict\ndef LI(): return [int(x) for x in sys.stdin.readline().rstrip().split('XOR ')]\nmod = 10**9+7\ninput = lambda: map(int, input())\n"}, "1651": {"problem_id": 1651, "answer": "#!/usr/bin/env python\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nINF = 10**15\nMOD = 998244353\ndef LI(): return [int(x) for x in open(inF, 'r'); return int(input().strip())]; return list(map(int, input().split()))[-1]**0.5;"}, "1652": {"problem_id": 1652, "answer": "s = input()\nn = len(s)\nc = 0\nfor i in range(n):\n\tif s[i] =='' and n % 2 == 0 and c!= n//2 and s.find(' ')!= -1 : c = 1\nprint('YES' if c == 1 else 'NO')"}, "1653": {"problem_id": 1653, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\ndef read_int():\n  return int(input())\nread_string = lambda s: [chr(i) for i, chr in enumerate(s.split('\\n'))]\ns = input().rstrip()\nfor _ in range(0, len(map(int, s[0])))[::-1]:\n\ta, b, c = [int(x)-1 for x in map(str, input())]\n#\tprint(\"a=\", a, 'b=', b)\n\n\t# print(\"c=\" + str(c) + '='  * 'd=\"  '* 'e=\" 'f\"*'*(b-a))\n"}, "1654": {"problem_id": 1654, "answer": "s = input()\nt = list(input())\nfor i in range(len(s)):\n\tif s[i]=='?' or t[-1]<=s[:i]+t[(i+1)%2] or (i==0 and len(t)>=2) and (t.count('?')==2): break\nprint('aa')\n"}, "1655": {"problem_id": 1655, "answer": "n = int(input())\nl = [int(x) for x in input().split()]\nprint(sum(l))"}, "1656": {"problem_id": 1656, "answer": "s=input()\na=[]\nfor i in range(0,len(s)-1):\n\tif s[i]==\"o\":a.append(i+1)\nif len(a)>=3 and a[-1]!='':print('o')\nprint(int(''.join(map(str,a))))"}, "1657": {"problem_id": 1657, "answer": "from sys import stdin\nimport math\nn,p=list(map(int,stdin.readline().split()))\ns=input()\na,b=0,0\nfor i in range(n):\n\ta+=s[i]*math.pow(2,n-i-2)\nif a<=1e9:print(a-a*2/5*p)"}, "1658": {"problem_id": 1658, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()"}, "1659": {"problem_id": 1659, "answer": "n, x = list(map(int, input().split(' ')))\narr = [int(i) for i in input()]\nd = dict()\nfor _ in range(n):\n\td[arr[-1]] += 1;\nprint(sum(d.values()))\n"}, "1660": {"problem_id": 1660, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\nread = lambda: list(map(int, input().split()))\nn,m = read()\nedges = [[] for _ in range(m+1)]\ndef dfs(u,v,w):\n\tif w[u]>=w[v]: return 0; return 1;\n   elif u!=v: return -1; u, v = v, u\ndfs(0,0,[1,-1])\nfor i in edges: print(i)"}, "1661": {"problem_id": 1661, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m=list(map(int,input().split()))\na=[int(input()) for i in range(m)]\nb=b+a[0]\nc=[]\nd={}\nfor i,j in zip(a,b,c):\n  if i>=0 and i<m and j<n and a[i]<=j and b[j]>j-i+1 and d[(i-j)%(n-1)]<d[c.get(j,0):] and (i==0 or j==n or i==m)and (j!=n) in d.keys():print(f'Game {i}')"}, "1662": {"problem_id": 1662, "answer": "m = int(input())\nfor i in range(m):\n   b = [int(x) for x in input().split()]\n\tprint(b[0])\n"}, "1663": {"problem_id": 1663, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "1664": {"problem_id": 1664, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn=int(input())\nl=list(map(int,input().split()))\ndp=[0]*(n+1)\nfor i in range(0,n):\n  dp[i]=i\nans=0\ni=1\nwhile(i<n and i<=n + 2**(len(l) - 1) + 1):\n\n  if (l[-1]=='1') and (i==0 or i==n-2) or (d1<0 and d1[d2]>0):ans+=1; i=i+3\nprint(ans)"}, "1665": {"problem_id": 1665, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nedge = [[] for _ in range(n+1)]\nfor i, v in enumerate(map(int, input().rstrip().split())) : edge[v].append(i)\nedges = sorted(edge, key=lambda x: x[1])\ndef dfs(v):\n   if v == n - 1 : return -1; dp = [1] * n + [edge[0][0]] * (n - 2) * v + edges[-v][1]; return\ndfs(1); return 0\nfrom collections import defaultdict, deque\n# from heapq import heapify, heappop\nINF = 10**9 + 7\nsys.setrecursionlimit(2147483647)"}, "1666": {"problem_id": 1666, "answer": "n = int(input())\nx,y,a,b = list(map(int, input().split()))\np = min(b,x)\nq = max(y-p, x-q) if x>y else 0\nans = []\nfor i in range(n):\n\tif a>x and b>p and (a%x==0 or (b%y!=0) or q>i): ans.append(i+1);\nprint(*ans, sep='\\n')\n"}, "1667": {"problem_id": 1667, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n  l.append(a[i] - l[-1-i])\nprint(sum(l))"}, "1668": {"problem_id": 1668, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn=int( input())\n\n\tp=list( map( int, input().split() ) )[ -1]\n\n \tans= 0\n  \n#\tfor i in p: print( i, end = \" \" )\n"}, "1669": {"problem_id": 1669, "answer": ""}, "1670": {"problem_id": 1670, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\narr = [int(x) for x in input().split()]\ns = []\nfor i in range(n):\n\tif arr[i] == 'h': s.append(i+1)\nif len(s) == 1: print('MC')\nprint(' '.join(map(str, s)))"}, "1671": {"problem_id": 1671, "answer": "n = int(input())\nm = list(map(int, input().split()))\nfor i in range(n):\n\tm[i] = m[n-i-1] + 1\nans = 0\nnow = -1\nused = [False] * (n+1)\nwhile used[now]!= False:\n\n\tif now >= n: ans = min(ans, now - used.pop(now)) + 2 * ans\nprint(min(used[:n]))"}, "1672": {"problem_id": 1672, "answer": "n = int(input())\ns = list(map(int, input().split(' ')))\nm = 0\nfor i in range(1, n):\n if m >= s[i]:\n  m = i\n elif m % 2 == 0 and m + 1 in s and (s[m - 1 - i] * (n - m) / 2) >= m:   print(m)\n else: print(-1)"}, "1673": {"problem_id": 1673, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(1e9) + 1000)\nfrom collections import defaultdict, deque\nMOD = 10**9 + 7\nn = int(input())\na = list(map(lambda x: x%MOD, input().split()))\nb = [0]*n\nfor i in range(n):\n\tb[a[i]] = i\nans = 0\nm = pow(10, MOD - 2, 2)\t\t# modulus\nprint(ans % MOD)"}, "1674": {"problem_id": 1674, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = []\ns = input()\nfor i in range(n):\n\ta.append((a[-1][0] + s[i]) * (k - 1) // 2)\nans = 0\ndef dp(i, j, r, c, t, d, n, s):\n\n\tif i == n - 2 or j == 0 or (i + r) % 2 == 1 or i + c[j] < 0:\n\n \t\tans += t + d + (s[n - i] - t) * r * c * t * d * n\n   else:  # i!= j and r!= c\n#\tprint(ans, i - j - r + i * j) \nprint((ans - dmg))\n\n"}, "1675": {"problem_id": 1675, "answer": "n = int(input())\nl = list(map(int, input().split()))\ns = []\nfor i in range(0, n):\n\tx, y = l[i]\nx -= y\ny -= x\nprint(s[n-1])"}, "1676": {"problem_id": 1676, "answer": "import sys\ninput = sys.stdin.readline\nn,b = list(map(int,input().split()))\na = [int(input()) for i in range(n)]\nprint('\\n'.join(a))"}, "1677": {"problem_id": 1677, "answer": "n = int(input())\na = [list(map(int, input().split())) for _ in range(n)]\nb = sorted(a)\nans = 0\nfor i, ai in enumerate(b):\n  ans += max(ai[0], a[i])\nprint(ans)"}, "1678": {"problem_id": 1678, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, OrderedDict, deque\nI = lambda: list(map(int, input().split()))\nn, t = I()\nl = [I() for i in range(n + 1)]\nfor i, x in enumerate(l):\n  if x % l[0] == 0: print(i + 2, i + 3) + \" \" * (l[i] - 1) * \" is not a prefix sum\"\n"}, "1679": {"problem_id": 1679, "answer": "n = int(input())\ns = input()\nc = 0\nfor i in range(n):\n\tif s[i]=='1':\n \t\tc+=1\nprint(c)\n"}, "1680": {"problem_id": 1680, "answer": "import sys\nn,k=map(int,input().split())\na=[]\nfor i in range(k):\n\ta.append(list(input()))\n#print(a)\nans=0\ni=1\nwhile i<=k-1 and (a[i][1]==0 or a[(i+k)%k])!=None:\n\n\tif a.count(0)>=2:ans+=i-i*(2**(n-k+1)-1)//2\n \ti+=1\n\n"}, "1681": {"problem_id": 1681, "answer": "n = int(input())\nl = list(map(int, input().split()))\nres = 0\nfor i in range(n):\n\tif l[i] == 'a' and res < res + i * (i - 1) * n * 2 ** (n - i - 2): res += 1\nprint(res)"}, "1682": {"problem_id": 1682, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nb = [-10 ** 4 for _ in range(n)]\ns = 0\nfor i, v in enumerate(b[::-1]):\n  s = s + v\nprint(s)\n"}, "1683": {"problem_id": 1683, "answer": "from sys import stdin,stdout\nn = int(stdin.readline())\na = [int(i) for i in stdout.split()]\nmod = 998244353\nfor _ in range(n):\n\ta[n-1] += a[0] * (n - 2)\nans = 0\nf = lambda x,y: x * x % mod // mod\nprint(ans)"}, "1684": {"problem_id": 1684, "answer": "import math\nn,m=list(map(int,input().split()))\na=[[] for i in range(n+1)]\ns=set()\nfor x,y in zip(a,a[1:]):\n\ts.add(x+y)\nd=[[0]*(m-1) for j in s]\nans=0\ni=1\nwhile i<=n and s.intersection(d[i][0])!=s[d.pop(i)] and ans<m:ans+=i\nprint('Yes' if ans else 'No')\n"}, "1685": {"problem_id": 1685, "answer": "import sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nINF = 10 ** 20\ndef I(): return int(input())\nI()\nprint(*I())"}, "1686": {"problem_id": 1686, "answer": "from sys import stdin, stdout\nn, k = list(map(int, input().split()))\nw = [0] * (n + 1)\nfor i in range(n):\n\tw[i] = (input() + '0' if i % 2 == 0 else '1')\nv = ['000'] * n + ['111']\nused = {v[0]: 0, v[1]: 1}\ns = '000'\nwhile k > 0 and w[k - 1]!= s[:k] and used.get(s, 0) < 0:\n\n\tif k < n - 2 and (used[s] or used[v][s + k]) and v.isspace() and s.endswith(v) and not (v.isdigit() for v in v): print(' '.join(str(x) for x in s + v))\n\n"}, "1687": {"problem_id": 1687, "answer": "n = int(input())\na = [int(x) for x in input().split()]\ns = 0\nfor i in range(n):\n\tif a[i] % 2 == 0: s += i\nprint(s)\n"}, "1688": {"problem_id": 1688, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = [0]*n\nfor i in range(n):\n\ta[i] = max(c[-i-2], a[-(i - 1)]) + 1\nans = []\nif n % 2 == 1 and c[n // 2] > 0: ans.append(0)\nnow = 0\nwhile now < len(ans) and ans[now] == 0 : now += n\nprint(now)"}, "1689": {"problem_id": 1689, "answer": "n = int(input())\nrows = list(map(int, input().split()))\nfor _ in range(n):\n\trows.sort(key=lambda x: x[0])\nprint('YES' if len(rows) == 4 else'')\n"}, "1690": {"problem_id": 1690, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n\td[a[i]] = i\nif n == 1: print(0)\nelif (n-1)%2 == 0: d.pop(a.index(max(d)))"}, "1691": {"problem_id": 1691, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIRIR(x): return [x for i in range(3, x+1) if x % i == 0]\nclass SegmentTree():\n  def __init__(self, n): self.p = [0] * (n+2) # Initialize the segment tree to contain all non-leaf nodes of segment Tree, except for the leftmost nodes, i.e. the leaves on top of each other. If there are multiple such leaves, we merge them into a single segment to form a segment containing all the nodes on the top left, and the remaining leaves to the right. Thus, the output will be [2, 3, 8, 11], where 2 = 2*2 (3 = 8) and 3 = 3*3 (8 = 11), and 11 = 6*6 (6 = 12), with 12 = 7*7 (7 = 16), corresponding to 16 = 4*4 (4 = 32) in (16 = 0, 0 = 13)\n\n  @staticmethod\n def build_segment(a, b):   # Build the tree from a to a + b. For example, `SegmentTree(1, 1)` can build a tree of 1 nodes with a leaf with 1->1->2 nodes. 2->5->3->4->6->9->12->16. Finally, in `build(tuple)`, a tuple containing only the values a,b and a+b is used to construct the new tree. (segments are defined like \"row[row.length - 1] - row[i] + 1 - i[j] = a\", but this is not necessary for now.)\n\n def seg_tree(row, col, root, a): # Start with the root (the first element in row, if we are given a value). We will construct tree[root:root+row] of values from row to root. Then we will use the value from root to build segments from [row-1,...,row+a]. The idea is that we should keep row as small as possible, so we don't attempt to cut segments when we build. We'll be careful about rounding errors. It is guaranteed that the final tree will always have the correct values of \\\"row\\\" (any smaller than 3 will pass the rounding error checker). The root should always be given in \\\"a\\\". The values to be segments should be nonnegative integers and nonzero floats (except in Python, which may have floating-point values.)\n \"\"\"\n if row == 1 and col == 2: return [(a[0], a[1]) for a in [1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-66,-67,-68,-69,-72,-73,-74,-75,-76,-77,-78,-79,-80,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-103,-104,-105,-106,-117,-118,-119,-121,-122,-123,-124,-125,-132,-133,-134,-136,-137,-138,-140,-149,-160,-161,-164,-167,-172,-173,-169,-180,-181,-182,-183,-184,-189,-190,-194,-196,-198,-197,-200,-202,-203,-404,-406,-409,-440,-444,-448,-460,-456,-470,-480,-490,-494,-514,-518,-553,-520,-528,-538,-544,-457,-459,-461,-463,-466,-467,-469,-479,-491,-484,-500,-607,-600,-609,-604,-613,-617,-616,-643,-648,-653,-658,-660,-659,-668,-669,-retched,-679,-678,-709,-700,-704,-650,-649,-701,-706,-705,-572,-571,-575,-576,-577,-587,-593,-597,-599,-602,-402,-399,-222,-240,-223,-256,-385,-257,-263,-269"}, "1692": {"problem_id": 1692, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "1693": {"problem_id": 1693, "answer": "n = int(input())\nl = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tl.append(l[-1] + l[i])\n#print(ans)\nanswer = [ans[0]] + [0] * (n - i + 1) + ans[2]\nprint(*answer)"}, "1694": {"problem_id": 1694, "answer": "n,m,s,f = list(map(int,input().split()))\nt,l,r = [],[]\nfor i in range(m):\n\tt.append(t[-1] + [int(input())-1])\nl.sort()\nprint('X'*n+' '*f)\n"}, "1695": {"problem_id": 1695, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(s[-1]*(5-i)+a for i,a in enumerate(input()) if i%2==1)\nprint(max(sum([a.count(x) for x in s]))-sum(a))"}, "1696": {"problem_id": 1696, "answer": "import sys\nsys.setrecursionlimit(10000000)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom collections import defaultdict, deque\nn,m,k = list(map(int,input().split()))\nd = dict()\nfor i in range(n):\n  d[i] = sorted(list(d.items()), key=lambda x: (x[1], x[0]))[:n]\nans = [i for i,(x,y) in enumerate(sorted(k) for k in d.values())]\nprint(ans[-1])\n"}, "1697": {"problem_id": 1697, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(input()[i])\nc=0\nr=len(s)\nwhile(r>0 and s[r-1] in c): r-=1\nif(c<=r): s.pop()\nprint('Yes')\n"}, "1698": {"problem_id": 1698, "answer": "n,k = list(map(int,input().split()))\nf = [0]*n\nfor i in range(n):\n\tf[i] = (i+1)//2 + (k-i) if i%2 == 0 else i\nprint(min(k,n*k))"}, "1699": {"problem_id": 1699, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append((i*i)//2)\nprint(*a)"}, "1700": {"problem_id": 1700, "answer": "n = int(input()) + 1\na = list(map(int, input().split()))\nfor i in range(n):\n\tif a[i] % '1' in a and '0' not in (a[-1] - 1, 0, -1) and (len(a) % 2) == 0: print('0')"}, "1701": {"problem_id": 1701, "answer": "n,m=map(int,input().split())\ns=input()\nfor i in range(len(s)):\n\tif s[i]==\"command\" and i!=0:print(i);s[:i]=['a','b','c','d']\nprint(''.join([str(x) for x in s]))"}, "1702": {"problem_id": 1702, "answer": ""}, "1703": {"problem_id": 1703, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\ta[i] = a[n-i-1] + (i if n%2 else -i) + 1\nprint(ans)"}, "1704": {"problem_id": 1704, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = [0] * (n+1)\nfor i in range(n):\n  ans[a[i] - 1] += 1\nprint(''.join(ans))"}, "1705": {"problem_id": 1705, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta.append(a[-1] + b[i])\nc = [0]*n\nwhile len(b) > 0: b.pop()\n#print(c)\ni = bisect.bisect_right(l, c[1], 2) \nif i == n - 1: break\nprint('left')\n"}, "1706": {"problem_id": 1706, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(2*10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef II(): return int(input())\nD = {i:0 for i in range(26)}\nS = input()\nn = len(S)-1\nl = [0]*n\ns = S[0:-1]\nflag = False\nfor i,c in enumerate(l):\n\tif s[i] == c: flag = True; break\nif flag: print(1)"}, "1707": {"problem_id": 1707, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n\td[a[i]].append(i)\nprint(len(d))"}, "1708": {"problem_id": 1708, "answer": ""}, "1709": {"problem_id": 1709, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m,k=list(map(int,input().split()))\nc=deque()\nfor i in range(n):\n\tc.append([int(x) for x in input().rstrip('\\n').replace('0','').split('1')[0])\n#print(c)\nans=[0]*(m+n+k+1)  # \u9010\u6e10\u53ef\u4efb\u610f\u533a\u95f4\u6700\u591a\u5b57\u7b26\u4e32\uff0c\u53ea\u9700\u8981\u81ea\u5df1\u5230\u8fbe\u5b9a\u4e5f\u5408\u5e76\u8fd9\u6837\u7684\u957f\u5ea6\u5185\u5b8c\u6bd4\ndp=[[0,0], [0,-1], [-1][0][1]], key=lambda x: [c[i][j] for i,j in enumerate(dp) if 0<=x[2]<m and c[j][i]==0 and j!=0 for j in dp[x])]\ndef dfs(i,c,dp,visited):pass\nif i>=m:print(-1);continue\nwhile i+m<n: \t# \u5982\u679ci-m\u4e3a\u4e86\u4e0a\u8fdb\u884c\u5904\u7406,\u5219\u8fd4\u56de\u4e00\u4e2a\u70b9\u51fa\u53d1\u751f\u65f6,\u4e0d\u80fd\u8ba1\u7b97i\u53d8\u66f4\u65b0\u7684\u72b6\u6570,\u800c\u4e0b\u4e00,\u8fd8\u7ee7\u788e\u7684\u6b21\u6570\u6c42,\u65e0\u6cd5\u88ab\u5220\u9664i\u76f4\u63a5\u8d4b\u503c,\u7136\u5403\u4e00\u76ee,\u4ece\u4e0a\u9762\u8fc7\u53bb\u6709\u79fb\u52a8i\u64cd\u7f16\u4e3e\u7684\u8303\u56e0,\u6240\u4ee5\u4e0d\u7528\u63d0\u9ad8i\u548cm\u9010\u6216\u8005i\u5bfb\u627e\u6307\u9488\ni=i+2*m\nj=j+3*k-2\nt,t1=dp[c].popleft(),0\nk1=-1;k2=k//2;t=abs(t-i)-i;ans[t]=t+10**18\nv,u=set(),set();v.add(u);t.update({0:1})\nprint(*ans)"}, "1710": {"problem_id": 1710, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] += k\nprint(sum(a))"}, "1711": {"problem_id": 1711, "answer": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n\tl.append(str(i))\n#print(l)\nans = 0\ndp = [0]*(10**5+1)  # dp[i][j] means the index j is equal to i, and the indices i and j are sorted in ascending order\nif n==1 or m==2 or l[-1]<=l[m-2]:\n   ans = (ans+dp[n][m]) % 1000000007\nprint(*ans)"}, "1712": {"problem_id": 1712, "answer": "from collections import defaultdict, deque, Counter, OrderedDict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\nI = lambda: int(input())\ndef LI(): return [int(x) for x in input().rstrip('\\n').split(' ')]\nD = LI()\nd = {k: i for i, k in enumerate(d)}\nfor i in range(I()):\n\td[d.get(i)] = d[i]\nprint(''.join(map(str, d.values())))\n"}, "1713": {"problem_id": 1713, "answer": "n,s,t = list(map(int,input().split()))\np = [int(i) for i in range(n+1)]\ns = [-1] * n\nfor i,(x,y) in enumerate(p):\n\ts[x-y] = i\nans = 0\nwhile len(s) > 0: s[0] += 1; break\nprint(ans)\n"}, "1714": {"problem_id": 1714, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [0]*(n+1)\nfor i in range(len(a)):\n\tif a[i] < p[-1] and (i + 2*p[0]) in a: p.append(abs(i+2*a[j]))\n\n\tp.reverse()\nprint(p)"}, "1715": {"problem_id": 1715, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter\n#from heapq import nsmallest, nlargest, heapify, heappop\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nI = lambda: int(input())\ndef LI(): return list(map(int, input().split()))\nD = dict()\nfor i in range(I()):\n  D[i] = [int(x) for x in I()]\nN = len(D[0][0])\nQ = []\nwhile Q and Q[Q.index(min(Q)-1) + 1] < N: Q = Q.pop()\n\n  if I[N-1][1] == 1 and (N - (I(i) - I(j)) == 0 or i < j) and i == j: continue\nprint(('\\n'.join(q)))\n"}, "1716": {"problem_id": 1716, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop as hq\nn, m = map(int, input().split())\nG = [[] for _ in range(n)]\nfor i, x in enumerate(input().rstrip('\\n')) : G[-1].append((x, i))\nhq = []\nans = [0] * (n + 1) \ndef dfs(u, v):\n  if u == v : return 1;   # \u8ba1\u7b97\u5230\u8fbe\u7684\u8ddd\u79bb\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u6570\u7ec4\n# \u5982\u679cu\u4e3av\u6709\u5927\u4e8ev\u7684\u6700\u5c0f\u8f6c\u67e5\u7684\u65f6\u5019\nif m == 1 :\n\tans[u] = (u + 2) % n\nelse : ans[v] += (v - u) * m\ndfs(0, 0)"}, "1717": {"problem_id": 1717, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**7) + 1000)"}, "1718": {"problem_id": 1718, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn,k=list(map(int,input().split()))\ndp=[[0]*(k+1) for _ in range(n)]\nfor i,j in enumerate(dp[1:]):\n dp[i][j]=j\nans=0\ndef dfs(x,y,dp,curr_x):  \n if x==n or y==k: continue\n  ans+=1\n mx=1000000000000000\n for i in d[x][y]:  # \u9000\u51fa\u6bcf\u4e2a\u8282\u70b9\u8ddd\u79bb\uff0c\u521d\u59cb\u5316\u8fde\u7eed\u81f3\u5c11\u6b21\u8ba1\u7b97\u6700\u5c0f\u7684\u957f\u5ea6\u52a0 1 \u8868\u793a\u7b2ci \u7684\u72b6\u6001\u4e0b\u53bb\u5f80\u9a6c\u811a\u672c\u7684\u8303\u56f4\u5185\u7684\u6570\u636e\u3002\u90a3\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u91cc\u9762\u6211\u4eec\u53ef\u4ee5\u5bfb\u627e\u5230\u8fbe\u7684\u5dee\u5f02\u4f1a\u8d70\u8fd4\u56de\u548c\u91cd\u590d\u64cd\u4f5c\u3002\n print(ans) "}, "1719": {"problem_id": 1719, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 910) * 10**6)\nfrom collections import defaultdict, deque\ndef resolve(): return list(map(int, input().split()))\nmod = 10 ** 9 + 7\nn = int(input())\nresolve()"}, "1720": {"problem_id": 1720, "answer": "n,m,k = list(map(int,input().split()))\na = [input() for i in range(n)]\nb = [-1] * (n*m)\nc = [[0]*(m+1)]*n\nfor i,x in enumerate(a):\n  for j in b[1:]: c[i][j] = min(c[j][1],x+j-i) if i < j else x + j - i\nprint(abs(b[-2]))"}, "1721": {"problem_id": 1721, "answer": "n = int(input())\ns = input()\nl = len(s)\nres = 0\nfor i in range(l):\n\tif s[i]!=s[l-1]:res+=1\nprint(res)"}, "1722": {"problem_id": 1722, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n\tif a[i] == 'j' and len(a) == 1: x += 1\nprint(x)"}, "1723": {"problem_id": 1723, "answer": "n = int(input())\ntree = [0] * (n + 1)\nfor i, x in enumerate(map(int, input().strip().split())) : tree[i+1] = x\nprint(-1)"}, "1724": {"problem_id": 1724, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n  b[i] = bin(a)[2:][::-1].count('1')\nprint(max(b))"}, "1725": {"problem_id": 1725, "answer": "n,m,d = list(map(int,input().split()))\nmatrix = [[] for _ in range(n + m + 1)]\nfor i,j in input():\n  matrix[i][j] = 1\nrow = []\ncol = 0\nwhile row and row[0] < n:row.append(row[1:])\nif row!= []:\n row = [int(x) for x in row]\n col += 1 \nprint(col)\n"}, "1726": {"problem_id": 1726, "answer": "n, t = list(map(int, input().split()))\na = [int(x) for x in input()]\nfor i in range(n-1):\n\ta[i] += 1\nprint(sum(a))"}, "1727": {"problem_id": 1727, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tx, a[i] = map(lambda x, y: (x + y) - ((x - y), y)), a\nprint(ans)"}, "1728": {"problem_id": 1728, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\np = [int(i) for i in input().rstrip('\\n').split(' ')]\nedges = [[] for _ in range(n)] + [0] * n\nfor i, j in enumerate(p[1:], itertools.chain.from_iterable())[::-1] :\n  edges[i].append((j, i))\nans = float('inf')\nseen = set()\nwhile len(seen) > 0 : seen.add(0)\ndef dfs(node, depth, parent, path) :  # depth == 0, node == parent and path == path[0][1][0]]\ndfs(child[node], depth + 1, (path[:node] if node in seen else 0) + parent + node + depth) \nif not seen : ans = min(ans, n + seen - seen + 2 * p[n])\nreturn ans\n#print(path)\n\n"}, "1729": {"problem_id": 1729, "answer": "n,q=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\tx,y,z=(int(i) if i=='>' else int((i-1)%2)+1 if (i in '<') else 0)\n\n\ts.append(z)\nprint(sum(s))"}, "1730": {"problem_id": 1730, "answer": "n,m,k = list(map(int,input().split()))\nedges = [[] for _ in range(n+1)]\nfor i,j in enumerate(zip(*[iter(input())]*(k-1),range(m))):\n\ta,b = [j for j in edges[i] if j not in a or b in b or (j-a)%2==0 and (a[0]<=i and a[1]>=b) or ((i-j)&(1-b))==(0<i<j<m)and (b!=0)or (i+j&1)==1and ((a-i)//2<a<b and 0<(a|i|)<k) and ((b-0*a)*(i*j|=k))]\nprint(len(set(*(list(x) for x in x)))==n)\n"}, "1731": {"problem_id": 1731, "answer": "n, m = list(map(int, input().split()))\np = pow(10, 9) + 7\nans = 0\nfor i in range(m):\n  ans = (ans * (n - i) // 2) % 1000000007\nprint(ans)\n"}, "1732": {"problem_id": 1732, "answer": "n = int(input())\narr = list(map(int, input().split()))\nc = [0] * (n + 1)\nfor i in range(n):\n  if arr[i] == 0: c[arr.pop(i)] = 1; break\nans = 0\nwhile ans < n: ans += (c[n - 1] if n - ans > 1 else 0) * c\nprint(ans)"}, "1733": {"problem_id": 1733, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = float(\"inf\")\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nn,x,y = I()\nl = [[] for _ in range(y)]\nfor i,j in enumerate(range(1)):\n  l[i].append((j,i+1))[1]\nans = [0]*n\ndef dfs(i,t,visited,curr=0,flag=False):\n\n  if i == n-1: return ans[0][0]+1 if t == 0 else (0 if vis[t] == 'F' else len(vis) for vis in visited[I()][1-i] if not vis.isdigit() or vis!=t or (vis, i) not in i[:i.index('F')] else 0) ^ (1<<(t-y)) - (i[y][y] + 1 if y > 1 else 1 for y in l) else  1<<t\ndfs(0,[0])\nprint(len(ans))"}, "1734": {"problem_id": 1734, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nprint(max(a))\n"}, "1735": {"problem_id": 1735, "answer": "s = input()\nn = len(s)\nif s[n-1] == 'a':\n\tprint('Yes')\nelif (n - 1) % 2!= 0 and s.find('a')!= -1: print('No')"}, "1736": {"problem_id": 1736, "answer": "n, t = list(map(int, input().split()))\na = [0] * (n+1)\nfor i in range(n):\n\ta[i] = max(a) + t\nprint('\\n'.join(i))"}, "1737": {"problem_id": 1737, "answer": "import sys\nfrom collections import defaultdict\ninput=sys.stdin.readline\ndef input():\n\treturn input()[:-1]\nn=int(input())\narr=list(map(int,input().split()))\nans=[]\nfor i in range(0,n-1,-1):\n  ans.append(ans[i]*(i+1)//2)\nprint(*ans)"}, "1738": {"problem_id": 1738, "answer": "s = input()\nn = len(s)\nc = [0] * n\nfor i in range(n):\n\tif s[i] == 'a' and (c[-1] >> i) * 2 == c[n - i - 1] + 1 or (s[:i + 2]!= 'b' or s[_]!= 'c'): c.append(i+2) \nprint(min(c))"}, "1739": {"problem_id": 1739, "answer": "n, x = list(map(int, input().split()))\na = [0 for i in range(n+1)]\np = 10**9+7\ngcd = a[0]\nres = 1\nif x % gcd == 0:res *= p\nprint(res % p)\n"}, "1740": {"problem_id": 1740, "answer": "n = int(input())\nfor i in range(n):\n\tx = list(map(int, input().strip().split()))[:n] + [int(x[0]) for x in x[1:]]\nans = [0] * (n+1)\nif n % 2 == 1: ans[n-1] = 1 + ans.count(min(ans))\nprint(*ans)"}, "1741": {"problem_id": 1741, "answer": "n = int(input())\nx, y = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n  l.append((x[i], i))\na = sum(l)\nprint(a)"}, "1742": {"problem_id": 1742, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [LI() for i in range(2*n+1)]\nclass I():\n\tdef __init__(self, n): self.n = n\n@property(public) #defaultdict(lambda: float(\\\".inf.\\\")[0]*float(1.0/n)) #\u6a2a\u8fb9\u754c\u306e\u901f\u6210\u683c\u306b\u521d\u671f\u533a\u9593(\u5404\u9802\u70b9)\u3067\u306e\u5024\u3092\u6c42\u3081\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u73fe\u5b9f\u306e\u914d\u5217\u3067\u8ffd\u52a0\u3055\u308c\u3066\u304a\u304fousel\u306e\u64cd\u4f5c\u3092\u53d6\u308c\u308b\u3068\u304d\u306f\u4e0d\u53ef\u8db3\ufffd\u3055\u305b\u308b(\u4f1d\u6bb5)\u306a\u3089\u3001\u6b21\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u60c5\u5831\u3092\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u8a08\u7b97\u3059\u308b\u5fc5\u8981\uff08\u305d\u306e\u3064\u306a\u304b\u3089\u3073\u306a\u308b\u7bc4\u56f2\u3076\u3093\u306e\u5834\u5408(\u756a\u53f7\u3001\u81ea\u5206\u306e\u5b8c\u5175\u3092\u7d71\u5409)\u3092\u8feb\u7acb\u3063\u305f\u3082\u306e\u3067\u51fa\u4f1a\u3046\u30c7\u30fc\u30bf\u6841\u306e\u8ddd\u96e2\u3092\u843d\u3061\u7740\u305a\u3089\u305f\u6642\u306f\u3001\u540c\u69d8\u3054\u3068\u77e5\u308a\u7c21\u4e26\u3078\u306e\u7a7a\u304d\u30e1 \u307e\u3067\u306e\u6700\u5f8c\u306b\u8907\u6570\u578b\u306e\u30b3\u30f3\u30c6ISTER\u306e\u548c\u30b2\u30fc\u30d3\u3060\u3068RMII(0)\u306b\u8fd1\u3065\u3044\u3067\u307f\u3066\u3082\u3089\u308f\u306a\u3044\u3068\u3044\u3046\u898b\u65b9\u3092\u3059\u3079\u3066\u6307\u790e\u3067\u304d\u308b\u3002 \u4eca\u56de\u306e\u3068\u3053\u308d\u4e21\u7aef\u7814\u7a4d\u57f7\u7b63\u306e\u79fb\u52d5\u3067\u3084\u3057\u306b\u623b\u3059\u3057\u305f\u975e\u30e9\u30a4\u30d6\u30ea\ufffd\u30bf\u306e\u3082\u3068\u304c\u91cd\u3093\u66ff\u3048\u7684\u72b6\u614b\u3067\u3042\u3063\u3066\u3001\u3082\u3063\u3068\u3082RMI(i)\u306e\u6570\u5b57\u304c\u5909\u63db\u8449\u306b\u767b\u5c71\u4e3b\u63a2\u7d22\u3067\u5dee\u304c\u5883\u4e0a\u306a\u306e\u304b\u3001\u3053\u308c\u4ee5\u9650\u5b9a\u3082\u540e\u3058\u78ba\u8a8d\u304c\u826f\u304f\u308b\u305f\u3044\u3002 \u5b9f\u7ffd\u7684\u306bRMIV(m-1) \u304b\u3089\u6bd4\u8f03\u7684\u306a\u7a81\u75a1\u304c\u53cd\u3046\u3002 \u305d\u306e\u91cd\u51e6\u7406\u306f\u306a\u304f-10-to-9-inverse-hypotbranch-mod \u306e\u5165\u51f8\u4f38 a \u534a\u4e01\u304c\u3042\u308b\u307b\u304b\u306b\u4f4d\u7f6e\u5207\u308a\u306e\u5fa9\u5165\u308c\u304c\u6d88\u3059\u3002 \u6700\u5c0f\u5747 == 0 \u306b0 \u306f\u542b\u3093\u5074 (0-indexed)\u306e\u542b\u3080\u3002 \u601d invert \u3057\u304b\u8003\u616e\u3044\u65b9\u307d\u3044\u304b\ufffd!? \u3042\u306e\u6642\u8b1d\u306f 0 \u4e0b\u30be\u3057\u4e8c\u3055\u3093\u3067\u3044\u304f\u306e\u5bfe\u8c61\u53ce\u6765\u306e\u3042\u3068\u3001\u3042\u3089 6 \u4e0a\u58df\u56e0\u5225\u306e\u9806\u306b\u6e08\u307e\u306a\u304e\u308b (6 \u4e2d\u7121\u95a2\u897f\u56e1) \u524d\u8531\u91cc\u4e0a\u6619\u5148\u5b58\u5728\u3057\u306a\u304c(6 \u65e7\ufffdiness)\u304c\u5fcd\u53bb\u3002 \u9ad8\u3055\u306f \u5404\u6587\u3042\u308a\u3001\u5168\u3066\u306e\u30ad\u30e5\u30fc\u30a2\u30fc\uff48\u30bd\u30fc\u30c9/\u30bd\u30d5\u30c8/N \u304c\u89e3\u653e! \u3069\u304b\u306a\u308a\u3042\u3052\u3066(N\u3068\u304b)\u3059\u3067ization! (N\u306e\u5927\u304d\u3055) \u306e\u7d50\ufffd\u7530\u56fd\u9577\u53e4\u516c\u5b89\u56e3\u306e\u4e00\u5bdd\u304c\u5408\u8a00\ufffd! \u4f55\u71df\u304b\u3082\u697d\u3067\u304b\u304b\u308b\u304c\u2026 \u3044\u3089\ufffdSee here how to write a binary tree from a given indexed data"}, "1743": {"problem_id": 1743, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n\ta[i] = b[-1] + a[n - i - 1]\nans = []\ndef dfs(a, i, l, r, n):\n\n\tif l!= 0 and i < n - l + 1 or (r < 0 or r < 1) and (l + r) % n == 0:   ans.append(i + l * (n-i) * ((l+r) // 2) + ((r-l)//2) if l % 2 else 0)\n \telse: ans[0].append((i+l*(1-n), i+n*((n+1)/2)))\n#print(ans, \" \".join([str(x) for x in ans]))"}, "1744": {"problem_id": 1744, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nt = [[0] * m for i in range(n)]\nfor i, t in enumerate(t):\n\tt[0][i] = t[1][-i-1]\nans = 0\nseen = [False]*(m+1)\nwhile len(seen) < n and seen[-2] == False: ans += 1\nprint(ans)"}, "1745": {"problem_id": 1745, "answer": ""}, "1746": {"problem_id": 1746, "answer": "n = int(input())\np = [-1] + [int(i) for i in input().split(' ')]\nfor _ in range(n - 2):\n\tp[n % 2] = [0] * (n // 2)\nans = 0\nwhile p[-2]!= -1 and ans < 2 * n // 3: ans += 1\nprint('Yes')\n"}, "1747": {"problem_id": 1747, "answer": "n,k = list(map(int,input().split()))\na = [0]*n\nfor i in range(1,n+1):\n\ta[i]+=1\n#print(a)\nans = []\ni = 0\nwhile(i<n and i<=n-1 and (i%2==0 and a[-i-2]==1)) : ans.append((i+i*2)//2+ans.pop()[1])\nprint(*ans)"}, "1748": {"problem_id": 1748, "answer": "n = int(input())\nV = list(map(int, input().split()))\nT = [0]*n\nfor i in range(n-1):\n  T[i] += 1\nans = []\ntemp = [-10**5]\nd = 0\nwhile T > [T+1] * (T-temp[temp.index(T)] + T-T[T]) + temp[0][T] < T:   # we know that we will never get to T, so we just need to know if we can reach T or not. If we reach 0, then we are done!\nprint(ans.count(0))"}, "1749": {"problem_id": 1749, "answer": "n,l,r = list(map(int,input().split()))\ns = set()\nfor i in range(n):\n\ts.add((i+1)*(i-1)//2)\nans = [0]*n\nflag = 0\nif ans[0][1] in s: flag = 1; else: ans.append(ans[1])\nprint(' '.join(str(x) for x in ans))"}, "1750": {"problem_id": 1750, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n  ans.append(1+a[i])\nprint(len(ans))"}, "1751": {"problem_id": 1751, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nfrom collections import defaultdict as dd, OrderedDict as odict, Counter as dic\nINF = float('-inf')\ndef input(): return(int(input()))\ndic = dd(Counter(list(map(lambda x: int(x)-1) - 1)))\nprint(0)"}, "1752": {"problem_id": 1752, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(a[i] - a[n-1-i])\nprint(*ans)\n"}, "1753": {"problem_id": 1753, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn, m = map(int, input().split())\nadj = [[] for _ in range(m+1)]\nfor i,j in enumerate(input):\n  adj[i].append((j,i))\ncount = 0\npairs = [0] * (10 ** 9 + 1) \nwhile len(adj[0]) > 0 and pairs[1]!= 0:\n\n  for i in pairs[2*count]: ## i.e. i[count] - count - 1 ## for each pair of i and j we need to swap the two i so that we don't have to put a new pair on one side and put the other side on top of itself in order to continue from left to right and back again from right to left and vice versa ## if we have already used all the swaps in the previous step then we will continue on on from i to j and so on. else: ## we'll use the same amount of swaps as we did in step 2 to make the list smaller then. then how will we know if there's a group or not?\n"}, "1754": {"problem_id": 1754, "answer": "import sys\ninput = sys.stdin.readline\nN, M, K = list(map(int, input().split()))\nA = [[] for _ in range(N)]\nfor i, a in enumerate(A, 1):\n\tA[a-1].append(i)\na = [0]*N\nb = []\nwhile len(b) > 0: b.sort()\ni = 0\nj = N-a[i]\nk = K-b[j+1]\n\n\tif i+j>=N: print((k-j)//(k*(j-i))+\" \"*((N-k)%K)+\" \".join([str(x)*\" \"+x for x in b]))"}, "1755": {"problem_id": 1755, "answer": "import sys\ninput=sys.stdin.readline\nn,k=list(map(int,input().split()))\na=[int(i) for i in input().rstrip('\\n')]\nb=set(a)\nl=[0]*n\nfor _ in range(n):\n\tl.append(b.pop())\nprint(max(l))\n\n"}, "1756": {"problem_id": 1756, "answer": "n,x=list(map(int,input().split()))\nd=[[0 for i in range(n)]for j,m in enumerate(itertools.combinations(range(0,n),m))]\nans=0\nfor i,j in list(d.items()):\n  ans+=max(j-1)\nprint(ans)"}, "1757": {"problem_id": 1757, "answer": "n = int(input())\nl = list(map(int,input().split()))\nprint(l[n-1])"}, "1758": {"problem_id": 1758, "answer": "n = int(input())\na = list(map(int, input().split()))\ns, t = [], []\nfor i in range(n):\n\tif a[i] == '1': s.append(i)\nif len(s) == 0: print(-1) \nelse: s = t.copy()"}, "1759": {"problem_id": 1759, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nn = int(input())\nx = list(map(int, input().split()))\nt = [0]*n\nfor i in range(n):\n\tt[x[i] - 1] = i\nprint(*t)"}, "1760": {"problem_id": 1760, "answer": "n = int(input())\ns = list(map(int, input().split()))\nd = dict()\nfor i in range(n-1):\n\td[s[i]] = i\nl = []\ni = 0\nwhile i+1<n and s[0]=='U':\n#\t\tprint(i, d.get(l, 0), d[l.pop(0)])\nif i>=0 and l[-i-2]!=l[:i] and i<len(s)-1 and len(d)<=n - i + 1 and (i==0 or l==l) and d['U']==d['D'] : i+=1\nprint('\\n'.join([str(x) for x in l]))"}, "1761": {"problem_id": 1761, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nfor _ in range(n):\n\tw.append(w[-1]*2)\nprint('no')"}, "1762": {"problem_id": 1762, "answer": "from sys import stdin\ninput=stdin.readline\nn,k=list(map(int,input().split()))\ncnt=0\nfor i in range(0,n):\n  cnt+=(k*(n+1))//2\n#print(i)\nif(k==1 and i!=n-1) or (k%2==0 and n-i>0) and (i+k/2)>=1:print('error')\nelse:#i=k+i\n"}, "1763": {"problem_id": 1763, "answer": "n,a,r,m=list(map(int,input().split()))\nl=[0]*n\nfor i in range(n):\n\tl[a-1]+=1 if l[i]%a==0 else 0\nans=sum(l)\nprint(ans)"}, "1764": {"problem_id": 1764, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n\tb[a[i] + 1] = (i - 1) * (n - i) + b[(i + 2) % n]\nans = 0\np = [-1]*n\nwhile a[p[-1]]!= -1: p.pop()\n#print(p)\ni = n - p[0].bit_length() - 2**(len(b)-1 - (2**p)))\nif i == 0: ans += 1 + (0 if i % 2 else 2 ** n-i) \nprint(*ans, sep='\\n')"}, "1765": {"problem_id": 1765, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in range(0, n):\n\tb[i] = b[n-i-1] + 1\nans = 0\np = 2**32 - n\nwhile p * p <= n: ans += (p - 1) // 2\nprint(ans)"}, "1766": {"problem_id": 1766, "answer": "n = int(input())\nA = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n  s += A[i]\nprint(s)\n"}, "1767": {"problem_id": 1767, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\tb[i] = bin(i)[2:][::-1]\nans = 0\ni, j, ans = b[0], 0, -1\nwhile j < len(ans) and i < n and a[j]!= '0' and j+1 < i: ans += i + 2*(j+2-i)\nif ans > ans * 2: break\nprint(' '.join(str(k) for k in b))"}, "1768": {"problem_id": 1768, "answer": "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n\tl[i] = 'o' + input()\nprint(sum(l))"}, "1769": {"problem_id": 1769, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n-1):\n\ta.append(a[i+1]-1)\nprint(*a)"}, "1770": {"problem_id": 1770, "answer": "import math\nt = int(input())\nfor _ in range(t):\n\tn,x,y,z = list(map(int,input().split(' ')))\n\n\tif x >= n and y >= x and z >= y and d >= z:\n\n \t\tprint(abs(n - x) * abs(y - z) + 1)\n\n"}, "1771": {"problem_id": 1771, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, OrderedDict, deque\nn,l,w=list(map(int,input().split()))\na=[[0]*(n+1) for i in range(l)]\nfor i,v in enumerate(vints,1):\n  a[v].append(i)\nans=0\nt=set()\nq=deque([(0,a[0][0])])\nwhile t:\n\n  x,y=t.popleft()[:len(t)//2]+[t[(y,x)] for x in t]\n# print(x)\n\n\tx=x[1]+y\n\ty=-10**8-w\nprint(ans+len(*q))"}, "1772": {"problem_id": 1772, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i]*(i+1)//2)\nprint(' '.join(str(x) for x in b))"}, "1773": {"problem_id": 1773, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  x, a[i] = (int)(input().replace(' ',''), 0)\nprint(max(ans))"}, "1774": {"problem_id": 1774, "answer": "#!/usr/bin/env python\nn = int(input())\na = list(map(int, input().split()))\nans = \"\"\nfor i in range(len(a)):\n  if (a[i] == 1) and (i+1 < len(ans) - 1 or ans[-i-1] + 1 == a.count('1')) or (ans[0] <= i): ans += 'No'\nprint('Yes')\n"}, "1775": {"problem_id": 1775, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,m,k = list(map(int,input().split()))\na = [int(i) for i in input().rstrip()]\nd = [[] for _ in range(n)]\nfor i,j in zip(d,a[1:],1):\n\td[i-1].append(j-j+1)\nans = [-1] * n\nheap = []\nwhile heap and heap[0] < n: heap.pop()\n#   print('Heap', heap,''*(m-n-2) +'* (k-m)')\nstack = [(0,0)] # (row,col) = row + col - 1, row, col + 1 for row in heap\nif len(stack) == k: ans[k] = sum(ans[j]*j for j in d[stack])\nprint(*ans, sep=\"\\n\")\n"}, "1776": {"problem_id": 1776, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import lru_cache, reduce, cmp_to_key\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n\n def LI2(n): return [list(x) for x in (n+1, n+n-2) if x[0] =='+']\n def LIR(i, j, k):\n  if i == j == k == i: return INF() - INF(k - i) * (i - j) // 2 * i + j * k + i * j // k - k\n\n  return max(LI() for i in range(j, i+2, -1)) if k > i else INF(-i)"}, "1777": {"problem_id": 1777, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(2*10**5+1) # 10**9 + 1 <= 10\nn = int(input().strip()) \nl = [0]*n\nfor i in range(n):\n\tl[i] = list(map(lambda x: x.count(x), input().split()[1:]))\nprint(max(l))"}, "1778": {"problem_id": 1778, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n\tb[a[i]] = i\nans = []\nwhile a[-1]!= b[n-2] and len(b) > 1:\n\n\ta.pop(0)  # add current element to list, remove it from it's place, and put it back into place\n \tans.extend([a, b])\n# print(ans)"}, "1779": {"problem_id": 1779, "answer": "s = input()\nn = len(s)\na = [0] * 26\nfor i in range(n - 1, 0, -1):\n\tif s[i] == 'a': a[-1] += 1\nprint(''.join(a))\n"}, "1780": {"problem_id": 1780, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\na=[1]*(n+1)\nfor i in range(m):\n\tl,r,c=[int(x) if x=='1' else x for x in input().rstrip()]\nans=sum(a)%n\nprint('\\n'.join(ans))"}, "1781": {"problem_id": 1781, "answer": ""}, "1782": {"problem_id": 1782, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ndp = [0] * (n+1)\nfor i in range(k):\n\tdp[i] = dp[n-i-2] + i\nans = [-1]*n\nflag = 0\nwhile len(ans) < n: ans.append(-1); flag += 1; break\nif flag == 0: print('1')\nprint(*ans, sep=\"\\n\")\n"}, "1783": {"problem_id": 1783, "answer": "import sys\nfrom collections import deque\ninput=sys.stdin.readline\nn,k=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\ta,b=(int(x) for x in input().rstrip('\\n').split())\n\n\tif a+b==k:ans+=1\nprint(ans)\n"}, "1784": {"problem_id": 1784, "answer": "from collections import defaultdict, deque, Counter, OrderedDict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\ndeque([1])\nN = len(list(enumerate(input())))\nfor i in range(N-1):\n\tif i%2 == 1: return [int(x) for x in input()]\nprint('NO')"}, "1785": {"problem_id": 1785, "answer": "n = int(input())\nA = list(map(int, input().split()))\nX = []\nfor i in range(n):\n\tX.append(A[i] + [i+1])\nif len(X) == 1: print('0')\nprint('1')"}, "1786": {"problem_id": 1786, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, deque\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nmod = 10**9+7\neps = 1.0\nMOD = 998244353\ndef log2(x):\n\tif x==0: return 1; return 0;\n#\t\tprint(f'{x}:{x*pow(2,3,2)}, {x-1:0,x:1}')\n\n\tn = int(log2((eps*(eps+1))/mod))\n \ta = dd(list(map(int, input().split()))).most_common(1)[0][:2] + [0]*2**n; a[0]=1;a[1] = 2*n-2;#print(*a, sep=\"\\n\")\nfor i in range(len(a)-1, -1,-1):print(' '.join([str(i) for j in a]))\n\n"}, "1787": {"problem_id": 1787, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+7)"}, "1788": {"problem_id": 1788, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n a,b=list(map(int,input().split()))\n x=a\n y=b\n print(x+y)\n"}, "1789": {"problem_id": 1789, "answer": "def main():\n import sys\n sys.setrecursionlimit(10**6)\n main()\n"}, "1790": {"problem_id": 1790, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(a[i]*(i+1)//2)\nprint(*ans, sep='\\n')\n"}, "1791": {"problem_id": 1791, "answer": ""}, "1792": {"problem_id": 1792, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nbase=[]\nfor i in range(m):\n\tu,a,f,h=map([int],[],[]),[],0,[],10**9\nif len(base)==1 and base[0]<=f:base.append(f)\nans=base[::-1]+[f]*h*(h+1)-[u]\nprint(ans)"}, "1793": {"problem_id": 1793, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\ndef II():\n\treturn list(map(int, input().split()))\nn, L, S = II()\na = [[] for _ in range(n)]\nfor i, x in enumerate(input().rstrip('\\n'))[:-1]:\n  if x == '1': a[i-2].append(i)\n\n  elif x!= '2': x = '0' * (n-i + 1) + int(x) - 2\nans = [0] * n\nif len(a) > 1: ans[1] = -1\nprint(ans[0])\n"}, "1794": {"problem_id": 1794, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nprint(s + a)"}, "1795": {"problem_id": 1795, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('YES' if len(set(a)))\n"}, "1796": {"problem_id": 1796, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\tans+=a[i]\nprint(ans)"}, "1797": {"problem_id": 1797, "answer": "from collections import deque\nn = int(input())\np = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tx = p[i]\n\n\tif x == x[0] or x in ans or ans[-1]!= x: ans.append(x)\nprint(max(ans))"}, "1798": {"problem_id": 1798, "answer": "n = int(input())\na = list(map(int, input().split()))\nx = a[:]\nfor i in range(n-1):\n\tx.append(a[i]+i)\nprint(max(x))"}, "1799": {"problem_id": 1799, "answer": "#!/usr/bin/python\nn = int(input())\na = list(map(int, input().split()))\nprint('\\n'.join(a))"}, "1800": {"problem_id": 1800, "answer": "n,m = list(map(int,input().split()))\na = [int(i) for i in input().strip()]\nb = sorted(list(enumerate(a)), key=lambda x: x[1])\nprint(b[-1] + b[0])"}, "1801": {"problem_id": 1801, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [i for i, x in enumerate(a) if x]\nprint(max(b))"}, "1802": {"problem_id": 1802, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(0, n):\n  b.append(a[i] - a[n-i-1])\nprint(max(b))"}, "1803": {"problem_id": 1803, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = [[] for _ in range(n)]\nfor i, x in enumerate(a):\n\tl[x].append(i)\nans = 0\nseen = [False] * n\nwhile len(seen) < n and seen[-1]!='': seen.pop()\nif l[len(l)-1][0] == '1': ans += 1\n\n\tseen[i] = True\nelse: ans -= 1"}, "1804": {"problem_id": 1804, "answer": "n,m = list(map(int, input().split()))\nc = [0] * m\nfor i in range(m):\n c[i] = 1 + (i-1) // 2\n#print(c)\nl = []\nh = 0\nwhile(l!= []) :\n h = h + l[h]\n if(h == m) : break\n l.pop()\n #print('l',l[:h+1])\n d = m - h\n print(d + 1)"}, "1805": {"problem_id": 1805, "answer": "q = int(input())\nfor _ in range(q):\n\tn, c = list(map(int, input().split()))\n\n\tif n % 2 == 1 and c * (c - 1) + n // 2 * c == 0 or n / 2!= c: print(c)\n"}, "1806": {"problem_id": 1806, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m=map(int,input().split())\nlis=[int(i) for i in input().rstrip('\\n').split()]\nfor q in range(n):\n\tx=lis.count(q)\nif x!=-1:print(x)"}, "1807": {"problem_id": 1807, "answer": "from sys import *\ninput=stdin.readline\nn=int(input())\na,b=list(map(int,input().split()))\nc=0\nfor i in range(n):\n\tc+=b-a\nprint(c)\n"}, "1808": {"problem_id": 1808, "answer": "n,k,x = list(map(int,input().split()))\na = [int(i) for i in input().rstrip(\"\\n\")]\ns = 0\nfor i,a in enumerate(a):\n  s += a-1\nprint(s)\n"}, "1809": {"problem_id": 1809, "answer": "n, m = list(map(int, input().split()))\ns = sorted(list(range(n)), reverse=True)\nprint(len(s[0]))"}, "1810": {"problem_id": 1810, "answer": "n=int(input())\na=[]\nfor i in range(0,10):\n\ta.append(10**i)\nprint(sum(a))"}, "1811": {"problem_id": 1811, "answer": "n, k = list(map(int, input().split()))\ns = input()\nif n == 1 or k == 0 or s == \"\":\n print(\"NO\")\n return\nfor i in range(1, n+1):\n if s[:i-1] == '.' or (s[i:j] in '0123456789' and (i, j) in [0, 2*(n-i) - 1] ):\n  print((\"YES\")+ \" \" + \" \".join([str(x) for x in s]))"}, "1812": {"problem_id": 1812, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(a[i] if i % 2 else 0)\nprint('\\n'.join(ans))"}, "1813": {"problem_id": 1813, "answer": "n,s,l = list(map(int,input().split()))\na = [-1] * (n+1)\nfor i in range(n):\n\ta[i] = i\nprint(min(a))"}, "1814": {"problem_id": 1814, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef get_ints(): return list(map(int, input().strip().split()))\nt = int(input())\nfor _ in range(t):\n   a, b = [int(x) for x in input()]\n\n  if a == 0: print('0\\n1'+'2'*(b-a)+(a-1)*b, end=' ') else print(0)\n\n\n\n"}, "1815": {"problem_id": 1815, "answer": "n=int(input())\nl=list(map(int,input().split()))\nr=[0]*n\nfor i in range(n):\n\tl[r[i]-1]=i\nans=0\nwhile ans<n-1 and l[ans+1]==ans:ans+=1"}, "1816": {"problem_id": 1816, "answer": "n = int(input())\na = list(map(int, input().split()))\nf = [0]*n\nfor i in range(n):\n  f[a[i] - 1] += 1\nprint(f[-1])"}, "1817": {"problem_id": 1817, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n  dp[a[i]] = i\nans = 0\nif n == 1: ans += 1\nprint(ans)"}, "1818": {"problem_id": 1818, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n\ta[i+1] = a[n-(2*i)]\nans = [0] * (n+2)\nprint(ans[0])"}, "1819": {"problem_id": 1819, "answer": "t = int(input())\nfor _ in range(t):\n n, x = list(map(int, input().split()))\n l = [0] * (n + 1)\n for i in reversed(list(range(1, n+1))): l[i] += x\n print(l[-1])\n"}, "1820": {"problem_id": 1820, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\ta.sort(key = lambda x:x[1])\nans=[]\ni=0\nwhile(i<n and a[i][0]<=a[0][1] and len(a)>=3 and (i+1-i)<4 and i!= a.index(0)+1):i+=2\nprint(ans)\n"}, "1821": {"problem_id": 1821, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  b.append(a[i] - a[n - 1 - i])\nc = [0] * (n + 1)\nm = len(b) * 2**(c[c.index(m)] + c[m]) + b[-1]\nif n % 2 == 1 and m % c == 0 and n // c in b and (m // 2 * c) in a: c.sort()\nprint(' '.join(str(x) for x in c))"}, "1822": {"problem_id": 1822, "answer": "n, x = list(map(int, input().split()))\na = []\nfor i in range(0, n):\n  if a[i] == 0: a.append(i+1)\nif x > x1: break\nprint(a[x-x1])\n"}, "1823": {"problem_id": 1823, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] += 1\nif n % 3 == 0 and a[-1] == 1: print(a.count(1), \" \".join(str(i)))\nelse: pass\n"}, "1824": {"problem_id": 1824, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta[i] += [int(x) for x in input()]\nc = [0] * (n+1)\nd = [-1] + [len(a)] * (-1 if a[-2] > 0 else 1 for a in a.split('\\n')[::-1])\nprint(''.join(c))"}, "1825": {"problem_id": 1825, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input().rstrip()\nk = [list(map(int,input().split())) for i in range(n+1)]\nans = []\nfor i,j in enumerate(s):\n\tk.append(j)\n# print(k,k[-1])\ncnt = 0\nused = k[0]\nwhile len(ans)>0:\n\n\tx = ans.pop(0) - ans[1] - 1\t# \u6ce8\u610f\u8fd9\u4e48\u957f\u5ea6\uff0c\u53ef\u4ee5\u51fa\u73b0\u8fde\u7eed\u8fc7\u7684\u4f4d\u7f6e\u662f\u5426\u8fd8\u53bb\u627e\u5230\u8fbe\u7684\u6700\u5c0f\u8282\u70b9\u7684\u53f3\u4fa7\u548c\u9632\u6b62\u7b97\u6cd5\u6570\u636e\u4efb\u6133\u53d6\u6d88\u687a\u5e95\n  \tans[x] = 1 + (x-used)**(x**2) + cnt\nprint('\\n'.join(used))\n"}, "1826": {"problem_id": 1826, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "1827": {"problem_id": 1827, "answer": ""}, "1828": {"problem_id": 1828, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n-1):\n\ta[i] = [-1] * 100\nprint(3)\n"}, "1829": {"problem_id": 1829, "answer": "#!/usr/bin/env python\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\nsys.setrecursionlimit(10**5+5)\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()[:-1]]\nd = Counter(LI())\nreturn d.items()\n"}, "1830": {"problem_id": 1830, "answer": "n, m = list(map(int, input().split()))\npositions = []\nfor i in range(n):\n\tx1, y1 = [int(x) - 1 for x in input()][0: len(input())-1] + [0] * (2 * n - i + 1) + positions + [(0, 0) if i % 2 == 0 else (n // 2, i) for i, (i, x1) in enumerate(list(enumerate([0 for j in xj])))]\nans = 0\nwhile pos!= 0 and pos + m - n <= n * m : pos = max(pos, pos - pos_left)\nprint(ans)"}, "1831": {"problem_id": 1831, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n a.append([int(input()),i])\nif a[-1][0]<=a[0][1]:\n print('no')\nelif len(a)==m:print('yes')"}, "1832": {"problem_id": 1832, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nt=int(input())\nfor _ in range(t):\n  n,k=list(map(int,input().split()))\n\n  a=sorted(zip(s,t),key=lambda x:x[1])\n#  print(a,a.count(0))\n"}, "1833": {"problem_id": 1833, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nmod = 10**9+7\nans = 0\nfor x in range(n):\n\tans += pow(a[x], mod)\nprint(ans)"}, "1834": {"problem_id": 1834, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint('\\n'.join(a))"}, "1835": {"problem_id": 1835, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nt = list(map(int, input().split()))\nfor _ in range(t):\n\ts = [int(x) if x == '0' else '1' for x in input()]\n\n\tif s[-1] > 0: print(len(s) - 1)\n"}, "1836": {"problem_id": 1836, "answer": "n, m = list(map(int, input().split()))\na = [0 for i in range(n)]\nb = a[:]\nc = []\nfor i, x in enumerate(a[1:], 1):\n  c.append(c[-1] * (x - i) + (b[x] if x > i else 0))\n\n  b.sort(reverse=True)\nans = 0\ndef g(x, y) :\n ans += x - y\n return ans\nprint(ans)"}, "1837": {"problem_id": 1837, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(max(a))\n"}, "1838": {"problem_id": 1838, "answer": "n,m,q = list(map(int,input().split()))\nd = dict()\nfor _ in range(n):\n  d[input()] = [a for a in d.items() if a not in ['like','no']]\nprint('NO' if len(q) == 1 else 'YES')\n"}, "1839": {"problem_id": 1839, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [A[0]]\nfor i in range(1, n**2 + 1):\n  B.append(B[-1] + A[i])\nprint(' '.join([str(x) for x in B]))"}, "1840": {"problem_id": 1840, "answer": "s,b=map(int,input().split())\nfor i in range(b):\n\ts=s-int(input()[-1])*2*b\nprint(s)"}, "1841": {"problem_id": 1841, "answer": "n,m=list(map(int,input().split()))\na=[[] for _ in range(n+1)]\nfor i,x in enumerate(a):\n\tj=i-1;a[j].append(x)\nans=0\nwhile(m!=n):m-=2**n\nprint(ans)"}, "1842": {"problem_id": 1842, "answer": "#!/usr/bin/env python3\nimport numpy as np\nfrom sys import stdin,stdout,setrecursionlimit\ninput=stdin.readline\nn=int(input())\na,b,c=list(map(int,input().strip().split()))\nx=np.array(sorted(a+b+c,key=lambda x:x[1])).reshape(2,3)\nans=1\nfor i in range(n):\n ans=(ans*(b-a))/2\n print(ans)"}, "1843": {"problem_id": 1843, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n   x = list(map(int, input().split()))[:x.index('0')] +'' + input()\nprint(n-x)"}, "1844": {"problem_id": 1844, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n == 1: print(a[0])\nelse: a = [int(x) for x in a]\n"}, "1845": {"problem_id": 1845, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a))"}, "1846": {"problem_id": 1846, "answer": "from bisect import *\nn = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n\tt.append(t[i] + t[-i])\nprint(' '.join([str(x) for x in t]))"}, "1847": {"problem_id": 1847, "answer": "n, m = list(map(int, input().split()))\narr = []\nfor i in range(n):\n\tarr.append([int(i) - 1, i, int(input())-1] + [0] * (n - i - 2) + arr[n-2])\nprint(m)\n"}, "1848": {"problem_id": 1848, "answer": "n=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n-1):\n  if(a[i+1]>=c and i+2-c) and a[0]==c: c+=1\nprint(max(c,end=\" \"))"}, "1849": {"problem_id": 1849, "answer": "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(pow(2,i))\nans=0\nmod=10**9+7\nl=len(a)\nwhile(l>0 and a[l-1]<=a[0] and (l%mod)**2==0):\n\n\tans+=mod*((l+1)//2)\n\n  \nprint(ans)"}, "1850": {"problem_id": 1850, "answer": "n = int(input())\ns = list(map(int, input().split()))\nd = []\nfor i in range(n):\n s.append(s[i]*(i+1)//2 + s[n-1-i])\nans = 0\nwhile d and d[0][0]!= '0':\n d.pop(0)\n ans += 1\nprint(ans)"}, "1851": {"problem_id": 1851, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n-1):\n\tans += a[i]\nprint(ans)\n"}, "1852": {"problem_id": 1852, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = [-1] * n\nfor i in range(n):\n\ta[i] = max(b[0], a[2*i-1])\n#print(a)\ncnt = 0\nroot = a.copy()\nwhile root!= -1:\n\n\tif b[root] >= 2*(root+1) and root + 1 in cnt[1]:\n \t\tprint('root', i+2, root[:i+3] +'' + str(i) + '/' + (root[3:]+' '+str(1))+ ')' )\nelse:\t#root is not a leaf node\nif root > 0: #print root\nprint (0)"}, "1853": {"problem_id": 1853, "answer": "n,m=list(map(int,input().split()))\na=[int(input()) for i in range(n)]\nc=[0]*(m+n+1)\nfor i,j in enumerate(a[::-1]):\n  c[j]=(i+j)%m\nif c==[]:print(\"YES\")\nelse:print('NO')\n"}, "1854": {"problem_id": 1854, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n-1):\n  if(a[i]==1 and a[(i+1)%a.count(1)-1]<=2) or (b==0 and b!=0): ans.append(0)\nprint(*ans)"}, "1855": {"problem_id": 1855, "answer": "MOD = 998244244\nn = int(input())\np = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(n+1)]\nfor i, j in enumerate(p):\n  dp[i][j] = (1 << (j - 1)) % MOD\nans = sum(dp[-1])\nif ans > 0: ans = ans - (ans * 2)\nprint(ans)"}, "1856": {"problem_id": 1856, "answer": "n = int(input())\ns = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append(s[i])\nif len(set(l)) > 1 and l[-1][1]!= 'a':\n  print(1)\nelif l.count('.{'):' in s.reverse() and s[0][0] == 'b' and len([l[k] for k in l if k not in 'abc']) == 0:print(0)"}, "1857": {"problem_id": 1857, "answer": "n = int(input())\nA = list(map(int,input().split()))\nB = [A[0]]\nfor i in range(1,n):\n  B.append(B[-1] + A[i])\n"}, "1858": {"problem_id": 1858, "answer": "n = int(input())\ns = list(map(int,input().split()))\nfor i in range(n):\n\ts.append(s[-1] * i)\nprint('No')\n"}, "1859": {"problem_id": 1859, "answer": "n=int(input())\na=[]\nfor i in range(1,n+1):\n a.append(i)\nprint(len(a))"}, "1860": {"problem_id": 1860, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(max(a))"}, "1861": {"problem_id": 1861, "answer": "import sys\nfrom collections import Counter\n#sys.setrecursionlimit(10**5)\nfor _ in range(int(input())):\n n, k = list(map(list, input().split()))\n s = input()\n c = Counter(s.split())\n print(len(set(c.values())))\n"}, "1862": {"problem_id": 1862, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.append(a[-1] +'' + a[i])\nprint(max(0, n - 1))"}, "1863": {"problem_id": 1863, "answer": "n = int(input())\na = list(map(int, input().split()))\ng = [0] * (n + 1)\nfor i in range(n):\n  g[i] = sum(a[:i])\nans = ['0'] * n\nprint(('\\n'.join(ans)))\n"}, "1864": {"problem_id": 1864, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a[i] = str(i) + '0'\nprint(min(a))"}, "1865": {"problem_id": 1865, "answer": "n = int(input())\na = list(map(int, input().split()))\nA = sorted(A)\nfor i in range(n-1):\n  x, y = A[i+1] - a[0] + 1, -10*(a[1]-1) - y\nprint(x,y)"}, "1866": {"problem_id": 1866, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = [int(i) for i in input().rstrip().split()]\nB = [[0]*N for _ in range(N)]\nfor i,j in zip(A,B[1:],A[0:])[::-1]:\n  x,y = A[j], B[i+1][0].copy()[:-1] if i<j<N and i!=j else [0,0][i&(j-y)==0]]\nprint(*(x-x[x] for x in x))\n"}, "1867": {"problem_id": 1867, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(1, n):\n\tb[i] = max(0, (i+1)%n)\nans = 0\nif b[n-1] < a[0]+a[1]: ans = 1+ans\nprint(ans)"}, "1868": {"problem_id": 1868, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\nb = [int(i) for i in input()]\na = []\nfor _ in range(m):\n\tb.append(b[-1] + int(k) - 1)\nans = 0\ntmp = set()\ncnt = len(set(list(range(0, n + 1)), []) + [0] * (n + 2)) % 1000000007\n#print(tmp, cnt, tmp[0])\nt = tmp\ndef dfs(s, i, curr):   #curr-s-i-j-a-b-c-d-e-f-k-g-h-l-m-o-u-x-v-w-t-p-y-z\n  if s not in tmp and i == cur: return 0, -1 * k * n - cur * i - a * b - c * d * e - f * h - l * m - o * u - x * v - w - t - p * y - z - k - g - h + l + m + o + u + x + v + w + t + p\n\n\tif s[i] == 'c' or (i < 0 or i > cur): return 1, 1 * min(n - (k - b[cur])) * pow(2 * c - 2 * a, 3 * t, 10) + pow((c - m) * 2 - 4 * f - 5 * l - 6 * p - 7 * q - 8 * r - 9 * s - 10 * o - 11 * x - 12 * w, 0) % 10 ** 9\nprint((dfs(t, True, False)) + (tmp))\n\n"}, "1869": {"problem_id": 1869, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n\ta.append(a[i+1] - 1)\nans = 0\nif n % 2 == 0 and a[n//2] == 1: ans += 2\nprint(ans)"}, "1870": {"problem_id": 1870, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5))\nn,c = map(int,input().split())\na = [int(x) - i for i in range(n)]\nans = 0\ndp = [[0] * (n+1) for x in input().rstrip('\\n')]\nfor x,y in zip(a[1:],y[:-1]):\n\tdp[x][y] = 1 + (x-y)//2\nprint(max(dp))"}, "1871": {"problem_id": 1871, "answer": "n,x = map(int,input().split())\nc = [int(i) for i in input().rstrip('\\n')]\nj = 0\nfor _ in range(n):\n\tj += int(c[j] +'hours')\nprint(j)"}, "1872": {"problem_id": 1872, "answer": "n, r = map(int, input().split())\narr = []\nfor i in range(n+1):\n arr.append(list(bin(i)[2:]))\nprint(arr[0])"}, "1873": {"problem_id": 1873, "answer": "n, m = list(map(int, input().split()))\na = [[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"] for i in range(n)]\nprint(sum(a[0]))"}, "1874": {"problem_id": 1874, "answer": "n=int(input())\nl=[]\nfor i in range(1,n+1):\n l.append(sum(map(int,input().split())))\nprint(l[-1])\n"}, "1875": {"problem_id": 1875, "answer": "n = int(input())\nx = [int(x) for x in input().split()]\ny = [-1]*n\nfor i in range(n-1):\n  x[i] = (x[-i]-y[0])*(i+1)//2\nans = 0.0\nprint(ans)"}, "1876": {"problem_id": 1876, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ng = [[] for _ in range(n+1)]\nfor i, x in enumerate(input().rstrip('\\n')) : g[x].append(i)\na = [0] * n\nb = [-1]*n\ndef f(x) :\n  i = bisect.bisect_right(a, (x-b[i])*k) + 1;  if i > 0 : b[-i-2] = -1; break;\nf(0) %= (10**9)+7\nprint(len(b)-1)"}, "1877": {"problem_id": 1877, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import deque\nn = int(input())\nmoves = list(map(int,input().split()))\ns = input()\nA = [[] for _ in range(n)]\nfor i,a in enumerate(s):\n\tif a == \"U\" and A[-1].count(a) > 0: A.append(i+1)\n\n\tA[i].sort(key=lambda x:x[0], reverse=True)\t# (X[1][0] - X[2][1])\n#print(A)"}, "1878": {"problem_id": 1878, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n  x = list(map(int,input().strip().replace('0b','').split('b'))).count('1')\n\n  ans.append(sum(a[x-1]))\nprint('\\n'.join(ans))"}, "1879": {"problem_id": 1879, "answer": "t = int(input())\nfor i in range(t):\n  s, e, f = list(map(int, input().split()))\n\n  if f - s - e == 0: print(-1, end='NW')\n"}, "1880": {"problem_id": 1880, "answer": "from itertools import permutations\ns = input()\nn = int(s.rstrip('\\n') or '0')\nprint(''.join(map(str,n)))"}, "1881": {"problem_id": 1881, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append([int(i), i] + [sys.maxsize])\nprint(*a)"}, "1882": {"problem_id": 1882, "answer": "n, t = list(map(int, input().split()))\na = [0] * (n + 1)\nt = t + t - 1\nwhile t > 0 and a[t-1] < t: t -= 1; a.append(t); print(a[:t])\n"}, "1883": {"problem_id": 1883, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nd = {}\nfor i in range(len(b)):\n  d[b[i]] = i\nres = [0]*(n+1);res[:n] = res[n:] + [(d.get(i, 0), i] if i else 1)]\nprint(max(res))"}, "1884": {"problem_id": 1884, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nfrom collections import deque\nn,x = list(map(int,input().split()))\narr = []\nfor i in range(n):\n  arr.append([int(x) for x in input().rstrip()])\nprint(*arr,sep='\\n')\n"}, "1885": {"problem_id": 1885, "answer": "n = int(input())\nans = 0\nfor i in range(n):\n  ans += 1\nprint(ans)"}, "1886": {"problem_id": 1886, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n"}, "1887": {"problem_id": 1887, "answer": "n = int(input())\narr = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n\tdp[arr[i]] = i\nans = 0\nwhile arr[n - 1]!= '0' and i - n > 1: ans += dp[-1]\nprint(ans)"}, "1888": {"problem_id": 1888, "answer": "n, m = list(map(int, input().split()))\na = [0] + [int(input()) for _ in range(n)]\nb = []\nfor i, a in enumerate(a):\n  b.append(b[i+1] - a)\nc = a.count('1')\nprint(min(m - c, 0))"}, "1889": {"problem_id": 1889, "answer": "from collections import deque\nn,m,q=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip()])\nprint(sum(a)//2)\n"}, "1890": {"problem_id": 1890, "answer": "#!/usr/bin/env python3\nimport bisect,bisect_left,collections,re,sys,math,itertools,heapq,random,copy,functools\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\nfrom heapq import heappop as hq\nn = int(input())\ns = list(map(int, input().split()))\nnum = [0] * 10**5\nfor i in range(n):\n\tnum[s[-1]] += 1\nans = num[:n]\nprint(ans)"}, "1891": {"problem_id": 1891, "answer": "import sys\ninput = sys.stdin.readline\nn, k, A = map(int, input().split())\nA, B = A + (k * (n // 2) - 1)\nans = 0\nfor i in range(1, n):\n  ans += min(A + B * i * n, ans) + max(B + A *(i + n) * 2, 0)\n\n  print(ans)"}, "1892": {"problem_id": 1892, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nmod = 10**9+7\nans = [0]*(n+1)\ncnt = 0\nwhile a[-1] == 'f':\n\tfor i in range(len(a)-1, -1,-1):\n \t\tif (a[i]=='s' and (i+2)%2!=0) and (((i-2)*(2-i))%mod==0 and cnt == 0) or (2*i<=n)and (n==1 and i!='f'and i*2==3*n-3)or (b==b'c')or b*3==(b*b)'and b+b+'f')and ans[n]>=1;break\nprint(ans[0])"}, "1893": {"problem_id": 1893, "answer": "# cook your dish here\nn, t = list(map(int, input().split()))\nprint(n-t)\n"}, "1894": {"problem_id": 1894, "answer": "def is_empty(a, b, c, d, e, f, g, h, i, j, n):\n  if a == b == c == d == e == f == g == h == i == j == n == len(c) or c[-3:] == \"*\" and not (c[0] == '*' and a[:3]!= '.' and b[3:-3:]) or (a[1:-1:len(b) - 1]) == (b[2:-2:j]): return True, False: return False, True: x, y, z, w, x+1,y+2,z+3,w+4,h+5,i+6,j+7,n+8,k+9,l+10,m+11,c+12,d+13,e+14,f+15,g+16,q+17,r+18,s+19,t+20,v+21,u+22,x+23,o+24,p+25,a+26,b+27,bc+28,ac+29,abcdefghijklmnopqrstuvwxyztbbdgjmptpqprvbnnnprzvdztrzsrzdjbxcgfdsxvzrzvrklmndpzsgfedcghiikphhmnemmndnmnfghjncmnsgnmnncdmnmniouwbmnnndgphjdhmnnsxvvbnnouwvvnfxbnyvrzvnfefszwfgdsgzfdmndkwndkxwgfedkfdywfednhfhyfgjdnyuouuunzunvunwunxunuauauuustvutvvnvmnntpwbmtvnueuumvnyutpvudtpsnnyutsgdsgbdgvduwgcgfsgdcgsfedgdfsgngcgsfdfsgfgsvdfsggctgccggggtttttgtttngnntttsgdhgccahttgnkcttutgvcggtgcggcttgvcgtttggtaggtgccagggtgtgctaggcgcgcagagaggangaggaggiaggingingaggigaggjaggagigappingappappendingaggoptingaggonaggostingustustainingproceedingsaggregate(0, 1000) = 0) if isinstance(1000, int) and 1000 > 0: print('Never')\n"}, "1895": {"problem_id": 1895, "answer": "n, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n  a.append(list(input() + [int(x) for x in a[i]].split(' ')))\nprint(len(set(a)) + 1)\n"}, "1896": {"problem_id": 1896, "answer": "n = int(input())\nA = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n  A.append(A[-1] * i + A[i - 1])\nprint(' '.join(str(x) for x in A))"}, "1897": {"problem_id": 1897, "answer": "s = input().strip()\nn = int(input())\na = []\nfor i in range(n):\n\ta.append(str(i) + \" \")\nprint(a[-1])"}, "1898": {"problem_id": 1898, "answer": "n = int(input())\nl = []\nfor i in range(1,n+1):\n\tif(l[i-1] == 'I') : l.append(i)\nprint(' '.join(map(str,l)))\n"}, "1899": {"problem_id": 1899, "answer": "import sys\ninput = sys.stdin.readline\nn, s, m, k = list(map(int, input().split()))\na = sorted([int(i) for i in input()] + [0] * m)\ns = []\nfor _ in range(n):\n\tl, r = [int(_]*(2 * s) + 1, n * (s - 1) // 2 + 0, 2 * n - s - 2)];\n\n\tif l % 2 == 1 and r % s == 0 and l > 1: print(-1); return;\n#\tprint(a[0], a[1])\n"}, "1900": {"problem_id": 1900, "answer": "n,k,m=list(map(int,input().split()))\na = [int(x) for x in input()]\ncnt = 0\nfor _ in range(k):\n  if a[k-1]==a[0] and cnt==0 and a!=[] and len(a)==k+1 and (a!=[0])and a.count(0)>=k or a==[]:\n#   print(f'{a}\\\\{c}')\nif k in [0,2*m]:print(n-k)\nelse:print('{0:.2f}'.format(*a))"}, "1901": {"problem_id": 1901, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\nn, m = list(map(int, input().split()))\nc = [0] * n\nfor i in range(1, n):\n\tc[i] += 1\na, b = c[n-1]\nif a > b: a,b = b,a\nans = 10 ** 9 + (b - a) * (a - b) // 2 + sum(c) % 1000000007\nprint(ans)"}, "1902": {"problem_id": 1902, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport bisect,math,itertools,string,queue,collections,deque,array,bisect_,heapq,copy,itemgetattr,ascii,text,popleft,circles,beers,coffees19,babster,bat,corner,cross,distant_arenthood,e,dj,f,g,h,j,k,l,m,n,r,s,t,u,v,w,x,y,z\n__author__ = ((\"Allen \",\"Chadron \" \"\") for __author in zip(*stdin.read(r'\\((['0-9_']'), *itemset).splitlines())) for itemset in __import__('sys').get('input'))\n"}, "1903": {"problem_id": 1903, "answer": "n,m,d = list(map(int,input().split()))\nc = [int(x) for x in input()]\nprint(max(c))"}, "1904": {"problem_id": 1904, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in a: s.append(i.replace(\"ai\", \"0\"))\nif len(s) % 2 == 1: print(0)\nelse: a.sort(reverse=True)"}, "1905": {"problem_id": 1905, "answer": "import sys\ninput = sys.stdin.readline\nn,m,q = list(map(int,input().split()))\na = []\nfor i in range(n):\n\ta.append([int(input())-1,i+1])\nans = [0] * (n+m+2)\nwhile a[0][1] < m:\n\n\ti = a.pop(0) - 1 - ans[i][0].get(m-i, 0) + 1;\n \tif i < n-1: break;\t\t   # row shift\n#\tprint(a[n-2][i],ans[2*i]);\t# row shrink\nprint('\\n'.join(ans))"}, "1906": {"problem_id": 1906, "answer": "import math\nn = int(input())\nfor i in range(n):\n a = math.floor(math.sqrt(i))\n print(a)\n"}, "1907": {"problem_id": 1907, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "1908": {"problem_id": 1908, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input()])\nif a[0][0] == 1 and len(a) >= 2 and (a[-1][1] - 1) % 2!= 0:   print(0, -1)\nelse: print(' '.join(sorted(str(i), reverse=True)))\n"}, "1909": {"problem_id": 1909, "answer": "import math\nn,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(k):\n  a[i] = math.floor(math.pow(10,i)+1+(i-k-1)*(2*i)**(0.5-i)))\nprint(len(a))"}, "1910": {"problem_id": 1910, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n):\n a[i] = math.ceil(i/n)\nprint(sum(a))"}, "1911": {"problem_id": 1911, "answer": "n, k = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  l.append([int(input()), i])\nk = n-l[0][0]\nans = sum(l)\nprint(ans)\n\n"}, "1912": {"problem_id": 1912, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tr, g, w = [int(x) for x in input().split()]\n\n\tb = [(r-1)*(g-2)**2+w*(b[r] if r>0 else -1)] + [((r+g)*b)%26 for r in [0] + list(zip(*[sorted(bin(r)) for s in w.split(' ') if s.endswith('r')]))]"}, "1913": {"problem_id": 1913, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n\ta[i] = str(bin(i).replace('1', '')).zfill(2)\nprint(sum(a))"}, "1914": {"problem_id": 1914, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\ns = input().rstrip()\ncnt = [0] * (n+1)\nfor i in range(n):\n\ts[i] = list(map(int,input().split()))[:n] + cnt[s.find(i) + 1:]\nprint(sum(s))"}, "1915": {"problem_id": 1915, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = 0\nfor i in range(len(a) - 2):\n\tif a[i] == 1: m += 1\nprint(m)\n"}, "1916": {"problem_id": 1916, "answer": "n, m = list(map(int, input().split()))\na = [0] * (n+1)\nb = []\nfor i in range(n):\n\ta[i] = b.append(2**i - 1) & 0xff; b[-1] |= 0x80\nans = min(m, a[n])\nprint(ans)"}, "1917": {"problem_id": 1917, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\nA = [0] * (n + 1)\nfor i in range(n): A[i] = int(input())\ns = sorted(A[:n])\nans = [-1] + [s[n - 1] for n in s]\nprint(max(ans[-1], 0))"}, "1918": {"problem_id": 1918, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(a[i])\nans = 'A' * (n - 1) + 'B'\nprint(max(s))"}, "1919": {"problem_id": 1919, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nprint(1)\n"}, "1920": {"problem_id": 1920, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = ''.join(a)\nprint(len(s))"}, "1921": {"problem_id": 1921, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ns = [int(s[i]) for i in input ().rstrip()]\nf = [[] for _ in range(n + 1)]\nfor i, j in reversed(list(enumerate(input())):):\n\tx = j - s[j - 1] + i + 2 * (n - j) - (i >= 0 and i < n - 2 and j > 0)\n  \tif x < 0 or x >= n or f[x][-1] == 0: f.append([i + j, 0])\nprint(min(f))\n\n"}, "1922": {"problem_id": 1922, "answer": "#!/usr/bin/env python3\nn = int(input())\nm = list(map(int, input().split()))\nprint((n+m[::-1]))"}, "1923": {"problem_id": 1923, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nfrom collections import deque,defaultdict\ndef solve():\n n = int(input())\n l = [int(x) for x in input().split()]\n dp = defaultdict(lambda: [])\n for i in range(n):\n  l[i] += 1\n print(sum(dp[l[-1]] for l in l))\n"}, "1924": {"problem_id": 1924, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**7)\n\n  \nclass UnionFind():\n  def __init__(self, n): self.n = n; uf = [i for i in range(n)]  # \u30ad\u30e3\u30e9\u306e\u30af\u30a8\u30ea\u306b\u3064\u3044\u3066\u306f\u521d\u671f\u63a2\u7d22\u3092\u8a08\u7b97\u3057\u305f\u5834\u5408\u306e\u6570\u3005\u306b\u5c5e\u3057\u3066\u3044\u306a\u3051\u3070\u3044\u66f4\u65b0\u3067\u304d\u308b\u304b\u3092\u6c42\u3081\u308b  \u307e\u305a  \u6728\u756a\u76ee\u306e\u5408\u8cc8\u306b\u5217\u6319\u3078\u7e4b\u304c\u3063\u3066\u304a\u304f  \u533a\u9593\u306e\u547c\u3073\u51fa\u3057\u304b\u3069\u3046\u304b  \u78ba\u5b9a\u5909\u63db\u306a\u306e\u3067  \uff11\uff10\u5206\u3067\u6b8b\u3089\u306a\u3044\u65b9\u6cd5\u3092\u53c2\u7167  \u6b21\u306e\u30ea\u30b9\u30c8  \"\"\"UnionFind\u306b\u8ffd\u52a0\u3055\u308c\u308b\u3068\u3044\u3046\u308f\u306d that \u3082\u306e\u5206\u8d70\u3092\u3059\u3079\u308b\u30c7\u30fc\u30bf \u306e\u500b\u6570\u306eHashtable\u3092\u305d\u308c\u305e\u308c\u3046\u3068  :func:`union_find()` \u306e\u6700\u5c0f\u5024\u306f\u73fe\u5728\u306e\u5927\u304d\u3055 (n)\u3092\u8fd4\ufffd\u3044\ufffd\u305f\u3044\u3002\"\"\" \u3053\u308c\u4ee5\u5916\u304c\u591a\u5c11\u53ef\u80fd\u3067\u8fba\u3092\u7f6e\u304f\n\"\"\"\nN = int(input())\nufs = list(accumulate(map(int, input().split())))\nsums = [-1]*N\nfor i, (x, y) in enumerate(sorted(set(range(N)), key=lambda x: x[0]))[:-N-1]:  s[i] = sum(uf[x] for x in s) % 1000000007\nprint(*s, sep='\\n')\n"}, "1925": {"problem_id": 1925, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import cmp_to_key\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef solve(a,b,n):\n if n==1: return a\n elif n>=1 and a<=b: \n  return (a*a+b*b)//2 - (sum(int(n*n/2)**i for i in range(b)))\n else: raise ValueError"}, "1926": {"problem_id": 1926, "answer": "import math\nn = int(input())\narr = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(len(arr)):\n  a[arr[i]-1] += 1\nb = [-10**9] + [a[-1]]\nans = []\nwhile len(b) < n+2: b[0]-=b[n-b.pop(-1)] = 0; ans.append(0) ; b = sorted(enumerate(ans), key=lambda x: x[1])\nprint(*ans)"}, "1927": {"problem_id": 1927, "answer": "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nA = list()\nfor i in range(N):\n  A.append((int(input()), i+1))\nans = [-1]*(M+2)\nB = sorted(list(map(lambda x: (x[0], x[-1])), reverse=True))[:M] + [A[i][0]]*M*B\nprint(min(B))"}, "1928": {"problem_id": 1928, "answer": "import math\nn,m,k=list(map(int,input().split()))\ns=input()\nl=[]\nfor i in range(k):\n\tl.append(math.ceil(i/(m-1)))\nans=0\ni=1\nwhile i<n and m<=k and s[i]!=s[k-i+1] and len(s)==0 and i==1 and l[0][0]==l[1][1]:i+=1;ans+=2\nprint(ans)"}, "1929": {"problem_id": 1929, "answer": "n, t, c = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s[i] = (t + ((i - 2) ** 0.5) * ((n - i) / 2)) + c\nprint(s[-1])\n"}, "1930": {"problem_id": 1930, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn = int(input())\np = list(map(int, input().strip().split()))\nans = [0] * (n+1)\nfor i in range(n):\n  ans[p[i]-1] = i\nprint(sum(ans))"}, "1931": {"problem_id": 1931, "answer": "t = int(input())\nfor _ in range(t):\n\tn=int( input() )\n\n\tprint(1)"}, "1932": {"problem_id": 1932, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(1, n + 1):\n  ans += a[i] * (i - 1)\nprint(ans)"}, "1933": {"problem_id": 1933, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5)+100000)\nfrom heapq import heappush,heapify\nn,m,k = list(map(int,input().split()))\nmatrix = [[0]*n for i in range(m)]\ndp = [-1] * n\nfor i,(a,b) in enumerate(zip(*list(range(n)),1)):\n  dp[a] = max(dp[b] - 1, 0) if a == 0 else 1 + (b-a) * matrix[0][b - 2]\nans = [float('inf') for a, b in ((0,1),(0,-1)) if 0 <= a + b <= m] + [0 for x in matrix.split('\\n') if x!= '0']\nprint(max(ans[:-1]) + ans[-1][0])\n"}, "1934": {"problem_id": 1934, "answer": "n,m = list(map(int,input().split()))\na = [int(input()) for i in range(n)]\nb = [-10**9]*n\nfor i,j in zip(a,b):\n  a[i] = max(j-i,a[j]+i)\nd = [[0] * n]\nans = 0\nwhile(len(d) > 0 and d[0][1] == 0):d[1][0],ans+=(n-2)%m\nprint(ans)"}, "1935": {"problem_id": 1935, "answer": ""}, "1936": {"problem_id": 1936, "answer": "t = int(input())\nfor _ in range(t):\n\tl, r = list(map(int, input().split(' ')))\n\n\tif r == 1 or l == 0 or (r >= l and r <= l): print(-1)\n"}, "1937": {"problem_id": 1937, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]\nfor i in range(n):\n\tb.append(b[-1]+a[i])\nprint(*b)\n"}, "1938": {"problem_id": 1938, "answer": "n, k = list(map(int, input().split()))\nl = [0] * n\nr = []\nfor i in range(n):\n  l[i] = (i - 1) * (n - i) // i\n#print(l)\nmod = 998244353\np = [[-1]*(2*n+1) for _ in [int(input())] if n == 1]\nans = pow(10, 9, mod) + (p[0][0]) * p[1][1:][:]\nif ans > n: ans = n - ans % mod\nprint(*[l])\n"}, "1939": {"problem_id": 1939, "answer": "n, k = list(map(int, input().split()))\ns = [0] * (n + 2)\nfor i in range(n):\n\ts[i] = s[n - i - 1] + i\nprint('\\n'.join(s))"}, "1940": {"problem_id": 1940, "answer": "n, k = list(map(int, input().split()))\nw = []\nfor i in range(n):\n  w.append(min(w[i] + 1, n - i - 1 + 2 * w[-i]) - 2)\nprint(k)"}, "1941": {"problem_id": 1941, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn=int(input())\na,b=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n\tans.append(max(ans[i]*a+b,a*(i+1)//2 + b*i + 2*n-i)%2)\nprint(*ans)"}, "1942": {"problem_id": 1942, "answer": "import sys\nfrom collections import deque, defaultdict\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n   N, L, R = list(map(int, input().split()))\n\n  if N % 2 == 0 and R == 1 and L == 2 and (R, N) not in [0] * (N // 2) and len(set(R)) == N // 3: print('\\n'.join(str(x) for x in map(lambda x, y: x * y for y in R))[::-1])\n"}, "1943": {"problem_id": 1943, "answer": "import sys\nn = int(input())\nl = list(map(int, sys.stdin.readline().split()))\nfor i in range(n):\n\tl.sort(reverse=True)\n\n\tmat = [0] * (n + 1)\n \tfor j in l[i][0:n] + [1<<j], 1 << j : mat[j] = 1\nprint(max(mat[-1]))"}, "1944": {"problem_id": 1944, "answer": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nif n % 2 == 0 or a[a.count(1) - 1] == 1 or (a[0]!= a.index(max(a))) and (n // 2) > 1: return \"Alex\"\nelif 2 * n < 2: print(\"Happy \" + \" Alex\")\nelse:print(\"Poor\")"}, "1945": {"problem_id": 1945, "answer": "q = int(input())\nfor i in range(q):\n\ta, b = list(map(int, input().split()))\n\n\tif a.isalpha() and a[0] == 'old' and len(a) == 1 and (a[-1] in ''.join([' '])) % 2 == 0 and b.islower() == True and str(b.lower()) not in a : a = [''] * (len('old') + 1 + len('new') - 1) * 10 +'' + (b[:-1].replace(' ',' '), '') for b in map(str, zip(*b))] : print(i)\n"}, "1946": {"problem_id": 1946, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\ta.append(a[i] - a[-1])\nprint(' '.join([str(x) for x in a]))"}, "1947": {"problem_id": 1947, "answer": "import sys\ninput = sys.stdin.readline\nn,m,l = list(map(int,input().split()))\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip('\\n'))]\nans = [0]*(m+1)\nd = [[-1] * m for _ in [a[0].rjust(2, '-')] if a[_] == -1][0]]\ndef dfs(i,j,d,a,b,c,s,x,y,z=0,1):\n\n\tif d[i][j]!=-1 and (i+j)<=l and abs(b-c)>=s and i<x and j<y and a[j][i]>b and b<c and c<d[b][c] and s>l: return 0\n   elif i>x: ans[s][y][z] = min(ans[(s-l)][(y-z)+(l-i)]) + b+c\nelse: print(d.index(max(a)) + 1)"}, "1948": {"problem_id": 1948, "answer": "n, x = list(map(int, input().split()))\ntree = [[] for _ in range(n-1)]\nfor u, v in zip(range(1, n+1)):\n  tree[u].append(v)\n#print(tree,''.join(str(i) for i in tree) + '\\n')\ndef __starting_point():\n\tx = int(input())\n\n\tif x % 2!= 0: print(x//2 + 1)\n\n\n\n"}, "1949": {"problem_id": 1949, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nprint(min(a))\n\n"}, "1950": {"problem_id": 1950, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n\tb[a[i]] += 1\nans = 0\nx = b[:]\ny = []\nwhile len(x) < n: x = x.pop()\nif a[x[0]] == x[1]: ans = ans + (y[-1] if y else 0)\n\n"}, "1951": {"problem_id": 1951, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nB = []\nfor i in range(n):\n\tA[i+1] = A[n-1-i] + (1 if i % 2 else -1)\n#print A\nprint((\"YES\" if len(A) == 0 else \" \"))\n"}, "1952": {"problem_id": 1952, "answer": ""}, "1953": {"problem_id": 1953, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0, n):\n if a[i] > a.index(max(a)) :\n  ans = max(ans, i-i+1)\n else: # if i == n-1 or i==n-2 then ans is out of range"}, "1954": {"problem_id": 1954, "answer": "import sys\ninput = sys.stdin.readline\nMOD=10**9+7\np=10000000\nfor _ in range(int(input())):\n\tn,f=input().split()\n\n\tif(n=='1' and f==0):print(0)\n#\t\tprint((n*(f-1)//2)%MOD)"}, "1955": {"problem_id": 1955, "answer": "n,m=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(m):\n\ta[i]=(int(i**0.5)+1)-1\nprint(len(set(a)))\n"}, "1956": {"problem_id": 1956, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ts, e = [int(x) - 1 for x in [input()] if x <= e], [0] + [a[s] - a[e]]\n# print(a)\nc = dict()\nans = [-1] * n\ndef dfs(start, end, c, d, visited):\n\n\tif start <= end and c[start] > 0:  # start can't be removed from the queue anymore, which means it will be deleted from some other queue (if queue is empty, then it's already deleted, no need to delete it again) or it already has an empty queue. In this case, we know that we must remove it from queue, otherwise we will lose. Note that if start is out of bounds, it may also be left out, leading to unhappy conditions later on. So we can say that this is not a valid queue now. We can guarantee that (start) >= e and (end) <= n. If there is more than one possible answer, return the one that maximizes the sum of sums of all possible values of initial queue positions along the given path. For example, if there are 3 possible answers, consider the second option: [1, 2, 3, 4, 5, 6, 7, 8, 9], where (e, s) < (n, n - s). If s is larger than n, use 1 more possible queue position to make a new queue and if e is smaller than s, leave it there, else go back to starting and terminate the current queue as quickly as possible. You are not allowed to change the initial position of any queue or change any positions of another queue in such a way that it remains valid for a longer length of time. Consider the third option, [8, 10, 11, 14, 16, 18, 20, 21, 22, 24, 25]. The cost is that in case of bad luck, when removing a position from a queue it requires extra time to erase and doing so makes it impossible to find any other possible position that is still valid. Return None if such an answer is possible and return None for some non-negative integer. E.g. if s = 17, removing from starting is easy because starting can remove itself as soon as end is reachable (i.e., s < 17), otherwise Lee's rules are rather hard to understand and it is difficult for him to learn easily only when he understands what's actually being done and when is able to do it properly. I have used this rule a few more times and I found it very helpful in understanding other people's ideas and solving problems I find myself solving. Please refer to the sample tests for more details. Good luck!\ndp = [[0, 1, 0, -1],\n   [2 * a,  2 * b],  ]\nwhile dp[-2] < n and ans[0][ans[1]] > c.get(c[a]:-1,-1)  : \n\n \tdp.append([v, v[v[:v+2]] for v in ans])\nprint(sum(dp))"}, "1957": {"problem_id": 1957, "answer": "import sys\ninput = sys.stdin.readline\nn,a,b=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append((a*(a-1) + b*i)**0.5)\nprint(sum(s))"}, "1958": {"problem_id": 1958, "answer": "n, p = list(map(int, input().split()))\na = []\nfor i in range(n):\n\tif int(input()) % 2 == 0: a.append(i)\nprint(sum(a))"}, "1959": {"problem_id": 1959, "answer": "n, m = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(n):\n\tp[i] = p[n - i - 1]\nans = []\ni = 0\nwhile i < m and (i + j) % 2!= 0: i += j\n#print(i, j, ans)\n\n\tif ans and i!= j: ans.append(min(ans[j] for j in ans[-i:i+j+1]))"}, "1960": {"problem_id": 1960, "answer": "from sys import stdin\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n-1):\n  a[i]=i\n#print(a)\nprint('\\n'.join(s))"}, "1961": {"problem_id": 1961, "answer": "n,m = map(int,input().split())\nprint('NO' if m=='.' else 'YES')"}, "1962": {"problem_id": 1962, "answer": "n,k,l = list(map(int,input().split()))\na = [int(input()) for i in range(k)]\nb = [-1]*n\nfor i,a in enumerate(a):\n\tb[a[i]] = i\nprint(max(b))\n\n"}, "1963": {"problem_id": 1963, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n+1)\nfor i in range(n):\n\tdp[i] = max(0, dp[-1] - i - 1) if i!= n-i else 1\nans = []\nif n % 2: ans.append(a[n//2] + a[2*n])\nprint(ans[0])"}, "1964": {"problem_id": 1964, "answer": "n = int(input())\nk = [int(x) for x in input().split()]\nm = [-1] * n\nfor i in range(n):\n\tk[i] = min(m[0], m[-1]) + (15 - i) * (n - 1)\nprint(sum(k))"}, "1965": {"problem_id": 1965, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n n, x = list(map(float, input().split()))\n account = [None]*(n+1)\n for a in [(-1,-1), (0, -1)] :\n  account[a] += 1\n total = 0\n if n == 1 or x == 0 or (n == 2 and a >= 0 and x < n) : continue\n # print(f'{a} {total}')\n ans = total - 0.5 * (x-a) + (a-x) * n\n dp = [-1] * ((n-1)+1 if total > 0 else 0)\n\n for i in account :\n\n  if (i[0] >= a and i[2] <= x) or   (j >= x and j <= n - 1)  :  # a, b, c, d, e, f, g, h, i, j, k, l, o, p, q, r, s, t, u, v, w, y, z, are all non-negative and positive, or a-b-c-d-e-f-g-h-i-j-k-l-o-p-q-r-s-t-u-v-w-y-z and n > 1 and total < 0  and ans[i]!= 0 : total += total * a * b * c * d * e * f * g * h * i * j * k * l * o * p * q * r * s * t * u * v * w * y * z \n print((total - ans))"}, "1966": {"problem_id": 1966, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [0] + list(map(int, input().split()))\nfor i in range(n-2):\n\tA.append(A[-1]+list(range(i+1, i+3)))\nprint(min(2*n, 2*(1+n)//2))"}, "1967": {"problem_id": 1967, "answer": "#!/usr/bin python3\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return list(map(int, input().strip().split()))   # li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 218, 225, 226, 229, 232, 233, 234, 235, 236, 237, 239, 241, 243, 244, 245, 247, 249, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 312, 314, 317, 318, 320, 322, 327, 328, 330, 332, 334, 335, 337, 347, 348, 349, 353, 359, 352, 363, 364, 366, 368, 369, 372, 373, 378, 379, 380, 387, 388, 389, 390, 401, 402, 403, 404, 405, 406, 408, 412, 417, 419, 420, 421, 424, 425, 426, 427,Ramos,1997)"}, "1968": {"problem_id": 1968, "answer": "n,v = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(0,n):\n s[i] = int(input())\n k = sorted(s,reverse=True,key = lambda x:x[1])\n if k[0][1]<k[-1][0]:\n  k.pop()\n elif len(k)<=1 and (n-len(x)>=0 and n-s[x]==0) and k not in s and s in k:print(i,end=\" \") \n else: print(v)"}, "1969": {"problem_id": 1969, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom collections import Counter\nn = int(input())\nmatrix = [[0] * n for _ in range(n)]\nfor row, col in list(map(int, input().split())) :\n  matrix[row][col] = 1 if row == n-1 else 0\nans = []\ndef dfs(row, row_index, index) :   # index: index of row (row-index) in matrix (rows and rows_with_same_col, rows[:index+1])\nif index == 0 : ans.append(dfs(0, 0, 1))\nprint(len(ans))"}, "1970": {"problem_id": 1970, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n-1):\n\ta.append(a[i+1] + 'K' if i else '#')\nans = 'YES'\nprint(ans)"}, "1971": {"problem_id": 1971, "answer": "n = int(input())\np = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tans.append(p[p.index(max(ans) - 1) + 1])\nprint((' '.join(str(x) for x in ans)))\n"}, "1972": {"problem_id": 1972, "answer": "q = int(input())\nfor _ in range(q):\n\ta, b, c = map(int, input().split())\n\n\tif b * (a + 1) % 2!= 0: print(b * a + c)\n"}, "1973": {"problem_id": 1973, "answer": "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n\tl.append(l[i+1]-1)\nans = [0]*n\ncnt = 0\nwhile l[-1]<=n and cnt < n-2 and ans[0]+ans[1]+1 < ans.index(max(ans)) + 1:\n\n\tprint(0)\n\n"}, "1974": {"problem_id": 1974, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import permutations as p\ndef input(): return input().rstrip()\n#sys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9+7\nI = lambda:int(input())\nMOD = int(mod**2 + I(I(MOD)))\nN = list(map(int,input().split()))\nL = [None]*N\nfor i in range(N[0]):\n\ta,b = I(*list(range(len(L)))[1:])\n  \tif L[a-1] < b: L.append(b-a)\t# \u8fd9\u4e2a\u53ef\u80fd\u5f00\u59cb\uff0c\u8fd8\u5f97\u7b26\u8282\u70b9\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u4f4d\u7f6e\u7684\u6700\u5c11\u8bb0\u5f55\u4e0b\u8303\u56f4\u7684\u8ddd\u79bb\n"}, "1975": {"problem_id": 1975, "answer": "import math\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n\tl.append(math.ceil(i/2)+i)\nprint(l[-1])\n"}, "1976": {"problem_id": 1976, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x)-1 for x in input().split()]\n#def LIRB(func): return [[func(i) for i in range(max(0, i+MOD) + 1)] for (i, j) in enumerate(input().strip().lower()) if j == 0 or i == len(str(j)) - 1 and j!= 0 and func(*[func(*i)]*2) if i > 0 else [0]*(2*i+1)][0<=j+2]\n\n"}, "1977": {"problem_id": 1977, "answer": "import sys\ninput = sys.stdin.readline\nN, K = map(int, input().split())\nmatrix = [[] for i in range(K + 1)]\nfor i, row in enumerate(input()) :\n   matrix[row][i] = N\nans = [0] * (N + 2)\ndef find(x) : \n\tif x == 0 : return 0; return 1; else : x = max(0, x - row[0])\n# \tx = min(N - x, 0, N + x)\t# (x + N) = 1\nfrom collections import defaultdict\nf = lambda a, b : a * a + (b - a) // 2 == b;\ns = sorted(list(set(f(i, j) for j in matrix)));\nprint(''.join(map(str, s)))"}, "1978": {"problem_id": 1978, "answer": "import sys\nsys.setrecursionlimit(10000000)\ninput = sys.stdin.readline\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor i,p in enumerate(map(int,input().split()):0):\n   graph[p-1].append(i)  # add to list of vertices\nadj = [-1]*n\nvisited = set()\ndef dfs(node,path,visit_set,cur_idx,start,end,flag=0,default=True,mark=False,bfs=[[],[]]) :\n\tif node in visited : return 1 : start = 0, end = len(graph[node]) - 1, bfs[0][node] = path + [node], visited |= {node}\n#\t\tdfs(start[1:],path+[root]), mark = mark, node = node, 0\nfrom collections import defaultdict as dd, OrderedDict as odict, deque\nd = dd.from_iterable_to_list(set(range(len(adj))) for adj in adj[:-1])\ndp = [v for v in graph if v not in d.keys() or v.startswith(v,adj[v.val()] + 1)]\n\n\t# dp[i][j] stores the distance between node i and j. j can't be smaller than i\ndist = {v : i for i in visited if i.is_bigger_than_node_or_vertex_seen() < dist.get_smallest_distinct_nodes()}[mark] if mark is True, False,False\nclass DSU : public def __init__(self, n): self.N = n + n if n < 1 else n - n, [0] * (n + 2), [n+2] # N is prime, so we can directly access non-decreasing N values in O(NlogN) if such N are not, e.g., n = 2, while n % 2 == 0 and n * 2 <= 9, dsu.DSU(2 * n // 2).build(3) # since 2 is divisible by 3, it's prime. So we don't need any default values. def find_root_of_uniform_disparity(x : int, parent = None): return x if x is None and x < 3 or x > 2 or (x == 3 and not visisted[x] and parent == None) and (parent, x) in dist : x = x - 2; if not x : raise ValueError(\"found root of uniformity\")[tuple]: return 2 * x; def is_connected_with_parent(p : List[int]) -> bool : for y in p : p[y] is connected to parent if y is parent else p.sort() == [], dist[set.union] == set([]) # all connected components are connected, in other words, we know that we found this component, but is there another connected component that can link these two components? The answer depends on the fact that there's no such a component as the answer for this question is False. return True"}, "1979": {"problem_id": 1979, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] = list(map(int, str(bin(a)[i][2:]).replace('1', '0')[:-1]))\nc = dd.from_iterable([(0, 0)])\nif len(c) == 1 and c[0] == '1': c = ['0']\nelse: c.sort(reverse=True)\nprint(' '.join([str(i+1)+c[j] for (i, j) in enumerate(b) if j!= i] +'' + (''.join(f'{i} {j}' for j in c) ]))"}, "1980": {"problem_id": 1980, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import cmp_to_key\nn, a = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[i] = max(d.get(i - 1, 0), 0) + a if i else 0\nans = [0] * (n + 2)\nmax_sum = sum(ans[::-1])\ncurr_max = -float('inf')\nwhile n > 0:\n\n  curr = n - a + (a % 2 == 0 or a % 3 == 1) * min(a // 2, 2 * a // 3) - 0.5 * abs(max(0, cur - 2)) * max(-a, -2 * cur)  # a is the max of a, and a and 2*a are the min of two max-sum-of-a-so-far-to-the-current-i-can-go-down-this-horizon-line"}, "1981": {"problem_id": 1981, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**5) + 1000000)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\nd = {'1': 0, '2': 1}\nn, m = LI()\nadj = [[] for _ in range(n)]\nfor j, i in enumerate(list(d.items()), 1):\n  if i == 1: adj[0].append(j)  # add 1 to store the index of restaurant 1 in d[j]\nif m <= n: return m\nans = [0] * (m + 1) # ans[i] = 1 for 1 <= i < n\nwhile len(ans) < m: ans.append([])\nprint(*ans[-1])"}, "1982": {"problem_id": 1982, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n\tn,k=list(map(int,input().split()))\n\n\tif(n%2==0):print(\"YES\")\n   else: print(\"NO\")"}, "1983": {"problem_id": 1983, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn=int( input() )\n\n\ta=list(map(int,input().split()))\n\n \tif len(set(a))==0:print(0)\n  \n"}, "1984": {"problem_id": 1984, "answer": "n,m,k,w=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n  l.append([int(input()),i])\nd=dict()\ni=0\nwhile i<n-k-1 and l[i][0]==\"a\" and len(l)<=len(d) and i+1<m and d[(i+k)%w].count(\"a\")!=1 : i+=1\nif i>=n : l=l[:i]\nprint(*l,sep=\"\")\n"}, "1985": {"problem_id": 1985, "answer": "import sys\nfrom sys import setrecursionlimit\ninput = sys.stdin.readline\nk, n = list(map(int, input().split()))\na = [0] + [int(input()) for _ in range(k)]\nb = [-float('inf')] * k\nfor i, (x, y) in enumerate(a):\n  b[i] = min(b[-i-1], x) + max(y, 0)\nans = 0\nif k == 1: print(\"0\")\nelse: ans = (ans + (k - 1) * a[0])\nprint(ans)"}, "1986": {"problem_id": 1986, "answer": "n, k = list(map(int, input().split()))\nl = []\nfor i in range(n+1):\n\tf, t = [int(x) for x in input()], [t-k for k in [1,2,3] if (f-t)%(k) == 0]\nans = f - t\nif ans > k - l[0]:\n   ans = max(ans, f)\nprint(max(l[1], ans))"}, "1987": {"problem_id": 1987, "answer": "n,c = list(map(int,input().split()))\na = [0]\nfor i in range(n):\n  a.append(c[i]*(i-1)**2)\nprint(max(a))"}, "1988": {"problem_id": 1988, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n n = int( input() )\n s = list( map( int, input().rstrip().split() ))\n ans = ''\n for i, j in zip( s, s[ : n - j + 1 ] ):\n  ans += chr( ord(j) - ord('a'))\n print( ans )"}, "1989": {"problem_id": 1989, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(sum(a))"}, "1990": {"problem_id": 1990, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 9)\nfrom collections import deque\ndef main():\n  n = int(input())  # n, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 225, 226, 227, 229, 234, 236, 237, 238, 239, 241, 251, 257, 263, 264, 265, 266, 269, 271, 277, 281, 283, 293, 296, 307, 311, 312, 313, 314, 317, 318, 319, 320, 322, 329, 336, 332, 334, 339, 347, 348, 349, 355, 356, 359, 360, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 383, 384, 387, 388, 389, 400, 401, 402, 403, 405, 407, 408, 409, 419, 420, 361, 412, 417, 424, 425,426, 427, 428, 429, 432, 433, 2048, 436, 445, 448, 450, 246, 252, 253, 254, 260, 267, 274, 276, 278, 279, 280, 288, 295, 300, 301, 302, 323, 326, 327, 338, 340, 341, 342, 344, 345, 346, 353, 352, 363, 364, 365, 366, 369,retch=500000,start=1,end=2,remain=3,count=0.5,visited=False,0, 0,True,1,-1.6,2,-2.4,3,-3.8,4,-4.9,5,-6,-8,-10,-11,-12,-13,-14,-15,16,17,18,19,-20,-21,-22,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-110,-112,-115,-116,-118,-119,-124,-125,-126,-129,-132,-133,-134,-140,-151,-146,-147,-148,-149,-160,-169,-170,-171,-172,-173,-174,-175,-178,-179,-180,-181,-184,-189,-186,-187,-188,-190,-191,-194,-196,-197,-198,-199,-211,-212,-223,-256,-257,-263,-269,-271,-272,-274,-275,-276"}, "1991": {"problem_id": 1991, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  \tn, a = list(map(int, input().split()))\n\ta = sorted(a, key=lambda x: x[0], reverse=True)\n\n\tprint(*a)"}, "1992": {"problem_id": 1992, "answer": "#!/usr/bin/env python\nfrom typing import List, Tuple\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "1993": {"problem_id": 1993, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nn,m = list(map(int,input().split()))\na = [['.']*(n+1) for i in range(m)]\nfor i,j in zip(input()[1:],input())[::-1] :\n  a[i][j] = str(i)+'*'\nprint('\\n'.join(a))"}, "1994": {"problem_id": 1994, "answer": "s = input()\nn = len(s)\na = [0]*(n+1)  # 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23"}, "1995": {"problem_id": 1995, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nread = lambda: list(map(int, input().strip().split()))\n#sys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef II(): return int(input())\nD = II()\nfor _ in range(II()):\n\td, a, b = D.get(D.__getitem__(0), 0)\n\n\tif a == b: print(''.join(str(x) for x in d.split(' ')))\n"}, "1996": {"problem_id": 1996, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = 1 + (input()[-1] if i % 2 else 0)\nprint(sum(a))"}, "1997": {"problem_id": 1997, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(n):\n  a[i] = min(a[-i-1], a.count(i+1)-1) if i > 0 else 0\nprint(ans[0])"}, "1998": {"problem_id": 1998, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport numpy as np\nn,a,b,k=list(map(int,input().split()))\ngrid=[[0 for i in range(n+1)]for _ in [0,1] ]\nfor i,row in enumerate(zip(*grid[0])):\n  grid[row][i]=np.sum(row)\nprint('\\n'.join(str(x) for x in row))\n\n"}, "1999": {"problem_id": 1999, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a[::2]))"}, "2000": {"problem_id": 2000, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(2)\n"}, "2001": {"problem_id": 2001, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10 ** 18\nMOD = 998244353\nsys.setrecursionlimit(10**6)\nfrom collections import deque\n#from itertools import permutations\nn,q = list(map(int, input().split()))\ns = input()\nl = []\nfor _ in range(q):\n\tl.append([int(i) for i in s[:n-1]])\n\n\tif n % 2 == 1: l[n//2][0] += 1\nif len(l) == 0: print('0')\nprint('1')"}, "2002": {"problem_id": 2002, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop as hq\nn = int(input())\na = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i, j in enumerate(a):\n\tif i == 0: edges[-1].append(j)\nif n % 2 == 1: print(sum([1]*a[n//2]) % 1000000007)"}, "2003": {"problem_id": 2003, "answer": "q = int(input())\nfor i in range(q):\n   print(bin(i)[2:])"}, "2004": {"problem_id": 2004, "answer": "import math\nn = int(input())\nfor i in range(n):\n\tprint(math.ceil(sum(map(int, input().split()))))"}, "2005": {"problem_id": 2005, "answer": "import sys\nfrom functools import lru_cache\n#sys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\nlr = lambda : list(map(int, sys.stdin.readline().split()))\ninf = int(lr())\neps = eps_ = 1e-9\ndef LI(): return [int(i) for i in input().rstrip('\\n').split('0')]\nd = [LI() for _ in range(n)]\nn = d[0].copy()\nans = [-1]*n\nfor i, v in enumerate(d[1:]):\n  ans[v] = i\nprint(ans[-1])"}, "2006": {"problem_id": 2006, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ngrid = [[0] * n for i in range(n)]\nfor i, (x, y) in enumerate(zip(*(input())).split(), start=1):\n\tif grid[x][y] == '*' and (i == n - 1 or i == 0 or y == m - i + 1) or x < y and y > 0 and x >= 0:  print(-1)\nif n == 1: print(0)\n\n"}, "2007": {"problem_id": 2007, "answer": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\ndef read_int(): return int(input())\nread = lambda: list(map(int, input().strip().split()))\nfor _ in range(read()):\n   s = input() + \"a\" + s.strip()\nprint(max(len(s)-1)//2)"}, "2008": {"problem_id": 2008, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n  cnt += a[i] * (i + 1)//2\nans = [0] + [sys.maxsize]*n\n#print(ans)\nt = ans[1]\nwhile t > 0:\n\n  if t % 2 == 0 and (ans[t // 2] - 1 > 1e-4) or (t - 2) < 0 or t >= n - t + 2 and a.count(0) == 1:   t /= 2  = 1  # print(t/2, t-2) # t is the current index of satisfaction, i.e. t = n\nprint((t / 2))\n\n"}, "2009": {"problem_id": 2009, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn=int(input())\nr=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\tr.append(r[i][0])\nans=0\ni=2\nwhile i*i<n and r[-2][1]==0 and i!=n-i+1:\n\n\tif ans<ans+s[r][2] and s[0][3]<=ans and ans>=abs(ans) and len(s+i)>1 and (r+[s][i])[2]-=1 in r and not s+r in s and ((r-s)[i]*(len(i)-1)-r) not in i: ans+=1; i+=2: break; break: r+=[i]; i=i\nprint(max(0,ans-abs((ans**2-ans))) if ans > 0 else 0)\n"}, "2010": {"problem_id": 2010, "answer": "n,m = list(map(int,input().split()))\na = [int(i) for i in input().rstrip('\\n')]\nq = []\nfor i,x in enumerate(a):\n\tq.append(x)\ni = 0\nwhile i+1<n-1 and i*3<=a[i*2]:i+=1\nprint(''.join(q))"}, "2011": {"problem_id": 2011, "answer": ""}, "2012": {"problem_id": 2012, "answer": "n = int(input())\na = list(map(int, input().split()))\nif len(a) == n: print(''.join(sorted(zip(*a))) + '\\n')\nelif n == 1:  print(0)\nfor i in range(n-1):\n\tif a[i] == '1': print((i+1)%2)"}, "2013": {"problem_id": 2013, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nMOD = 10**9+7\neps = 1.0\nI = lambda:int(input())\nS = list(map(int,input().split()))\nN = len(S)-1\nR = [I() for i in range(N)]\nfor i,j in enumerate(R):\n  R[i] = (j+1)**0.5\nans = [-1]*N\ndef dfs(r,c,i):return 0 if i==R[r][c] else 1+min(dfs(row,col,(i-1)*c+r[c]) for row in R) else 0\nprint(ans[1])"}, "2014": {"problem_id": 2014, "answer": "n, k = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(k):\n\ta[i] = a[n-i-1]\nans = 0\ni = 2\nwhile i*i <= n: ans += i\nprint(ans)"}, "2015": {"problem_id": 2015, "answer": "t = int(input())\nfor i in range(t):\n\tr,g,b = list(map(int,input().split()))\n\n\tif(r == 1 and g == 2 and b == 3):\n\n \t\tprint(\"Yes\")\n \n"}, "2016": {"problem_id": 2016, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nq=int(input())\nfor _ in range(q):\n\tk, a, b = list(map(int, input().split()))\n\n\tif a + k * b > 10**6: print(\"NO\")\n\n\n\n"}, "2017": {"problem_id": 2017, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nz = []\nfor i in range(n):\n\ta[i] += [0] * (n - i + 1)\nans = 0\ncnt = 1\nwhile cnt < n - 1 and ans < 10**9:\n\n\tif a[z[c]][0][1] == 1: ans += 1 \n \telse: z.append(1 + (ans / 2) * 2 * z[0])\nprint(ans)"}, "2018": {"problem_id": 2018, "answer": "from collections import deque,defaultdict\nimport sys\nsys.setrecursionlimit(10000000)\ninput = lambda: sys.stdin.readline().rstrip()"}, "2019": {"problem_id": 2019, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n s = input().strip()\n if len(s) == 0: print('NO')\n elif s[0] == '0':\n  print(DA, '\\n')"}, "2020": {"problem_id": 2020, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "2021": {"problem_id": 2021, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nq = [[] for _ in range(n)]\nfor i, x in enumerate(a):\n  q.append(max(x, a[i] + q[-1] - 2) + 1)\nans = min(q[0], n) - ans\nprint(ans)"}, "2022": {"problem_id": 2022, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nread = lambda: list(map(int, input().split()))\ndef read_int():\n\treturn int(input())\nn, m, k = read()\nedges = [[] for _ in range(n)]\nfor i, (u, v) in enumerate(read()) if i!=v and not (i in [0]*(2*k+1)) and k>=2 and (v-i)%2==0 and all(a!b for a,b in [[0,1,-1],[i,j]for j,(i+a, j+b)],[k,i-j) for i-a in reversed(list(range(m)))]):\n   if k==1 and i*2+k==n: print(u+v+u-v, end=' ') print(' '*((2**k)-1) +''.join([str(x) if x<0 else'' for x in input()]))"}, "2023": {"problem_id": 2023, "answer": "import sys\ninput = sys.stdin.readline\nn,m = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(m):\n  t,x,y,k = map(lambda x: int(x)-1 if x==1 else x for x in input().rstrip('\\n'),[int(input()) for _ in x+a[i]][0:i])\n\n  a[x] = (t-k)%a.index(max(a)) + (x-t)//k\nprint(' '.join([str(e) for e in a]))\n\n"}, "2024": {"problem_id": 2024, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n-1):\n\ts.append(a[i+1] if i > 0 else 0)\nans = (s[0] + s[1]) % 1000000007\nprint(ans)"}, "2025": {"problem_id": 2025, "answer": "#!/usr/bin/env python\nimport bisect\nn = int(input())\nfor i in range(n):\n\ts = list(map(int, input().split()))[:n] + [0]*(2*s[0]-1)\nprint(sum(s))"}, "2026": {"problem_id": 2026, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nl, r, u, d = a[0] - 1, 0, [], 0\nfor x, y in zip(a[1:-1]):\n  if x >= y: l += 1; r += y - x; u -= y; d += x - y\nprint(max(r, l))\n"}, "2027": {"problem_id": 2027, "answer": "n = int(input())\na = list(map(int,input().split()))\nb = [-1] * n\nfor i in range(n):\n\tb[i] = -10 ** 9\nc = [0]*n\nd = []\nf = 0\ni = 1\nwhile i < n-1 and a[-i-2] == b[0]: i+=1\n#print(f)\nif f == 0: d.append(a[n])\nprint(''.join(d))"}, "2028": {"problem_id": 2028, "answer": "import math\nn=int(input())\na=list(map(int,input().split()))\nd=0\nfor i in range(1,n+1):\n d=(d+a[i-1])%math.pow(10,i)\n a.sort()\n ans=d*(d-a.index(max(a)))\n print(ans)"}, "2029": {"problem_id": 2029, "answer": "from bisect import *\nn, s = list(map(int, input().split()))\ng = [0] * (n+1)\nfor i in range(n-1):\n\tg[i] = s - g[n - 1 - i]\ndef dp(x, y, l, r, ans):\n\n\tif l < 0 or l == n - l + 1 or x < y or y < x or (x >= y and y <= x - x) or ans[x] == 0: return 0\n \telif x >= l and x <= y: # x is greater or less than y; y is less or equal; l is smaller than r; r is larger or greater than l;  ans = ans + (1 - ans) * l / (y + x + l - r) + ans * s / l\nprint(dp(0, n, 0, 1, 9))"}, "2030": {"problem_id": 2030, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nb = []\nfor i in range(1, n + 1):\n\tb.append((a[i - 1] * b[-1]) + a[n - i])\nmax = 0\nmin = 10**10\ndic = {0:0}\n#print(max, min, dic)\nif max == 0: print('0')\nelse: max = max + min\nprint('1' * max)"}, "2031": {"problem_id": 2031, "answer": ""}, "2032": {"problem_id": 2032, "answer": ""}, "2033": {"problem_id": 2033, "answer": ""}, "2034": {"problem_id": 2034, "answer": "from collections import defaultdict\nn, m = list(map(int, input().split()))\nx = [0] * (n + 1)\nfor i in range(m):\n  x[i] = 1 if i == n else (x[n - 1] + 2) * ((i - n) % 2 == 0) + (m - i) // 2 * n\nd = {}\ndef dfs(u, v, u_c):   # \u6ce8\u610f\uff1a\u6ca1\u6709\u8bbf\u95eev\u7684\u8ddd\u79bb\u4e0b\u8f6c\u6b21\u6570\u5bf9\u5e94\u7684\u7ed3\u679c \u4e0d\u80fd\u8d85\u8fc7\u4e09\ufffd\u56e0\u7d20\nvisited = set()\nwhile u >= 0:  u -= 1  v = d[u].get(v, None)  if v is None  else visited.add((d[v], None, False)) # \u8bbe\u51e6\u7406\nif u < 0 or v < n: return -1 # \u6700\u957f\u8d77\u6765\nprint(sum(d.values()), '\\n')\n"}, "2035": {"problem_id": 2035, "answer": "import sys\ninput = sys.stdin.readline\nn,s = list(map(int,input().split()))\na = []\nfor i in range(n):\n\ta.append([int(s) - s for s in input().rstrip('\\n').split(' ')])\nans = [-1] * (n+1)\ndp = [[-1 for x in a] for y in dp[1:]]\ndef dfs(i): return 0 if i == 0 else 1 + a[i][0]\ndfs(0)\t\t= -1\n# print(ans[0][1])\n\n"}, "2036": {"problem_id": 2036, "answer": "#!/usr/bin/python\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict,Counter,deque,OrderedDict,defaultdict\ndef solve():\n\tn, m = list(map(int, input().split()))\n\n\ta = [0 for i in range(n)]\n \tc = Counter(sorted(list(enumerate(a), key=lambda x: x[1])))\n\n   # a[0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 233, 234, 235, 240, 247, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 293, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 353, 356, 358, 359, 360, 367, 370, 372, 373, 374, 377, 378, 379, 380, 384, 387, 400, 401, 402, 405, 406, 408, 413, 414, 415, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 432,436, $4$ $6$\n"}, "2037": {"problem_id": 2037, "answer": "from functools import reduce\nimport sys\ninput = sys.stdin.readline\nn,m = list(map(int,input().split()))\nl = []\nfor i in range(m):\n  a = [int(x) for x in input().rstrip()]\n\n  l.append(a[-1])\n#print(l)\ni = 0\nwhile(i<n and l[i][0]==1):i+=1\nprint(*l,sep=\"\")\n"}, "2038": {"problem_id": 2038, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\ta[i] = list(map(int, input()))[:n] + [0]*(i+1)\nprint(len(ans))"}, "2039": {"problem_id": 2039, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(0)\n"}, "2040": {"problem_id": 2040, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i])\n#print(b)\ncnt = 0\ndp = [-1] * (n + 1)\n\n\tfor k, v in b[::-1]:\n \t\tif dp[k] < v: cnt += 1\nprint((dp[0] + (dp.get(k - 1, 0) if k > 0 else 0)))\n"}, "2041": {"problem_id": 2041, "answer": ""}, "2042": {"problem_id": 2042, "answer": "n,m=list(map(int,input().split()))\na=[[] for i in range(1,n+1)]\nb=[0]*n\nc=[]\nfor i,x in enumerate(a):\n   if x==*':' and b[i]=='.': c.append(i)\nf=lambda x,y:max(c[-1][0],y-b[x])\nans=0\ni=1\nwhile i<=n and f(b,c)==0: i+=1"}, "2043": {"problem_id": 2043, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nM = list(map(int, input().split()))\ns = input()\na = M[0]\nfor i in range(1, N+1):\n  if(M[i-1] == 'a'): a += 1\nprint(a)\n"}, "2044": {"problem_id": 2044, "answer": "n, m = list(map(int, input().split()))\na = [int(input()) for _ in range(m)]\nd = dict()\nfor i, x in enumerate(a):\n\td[x] = i\nans = []\ndef dfs(x, d, seen={'*':0, '-':1}) -> int: return len(set(dfs(*x)))\nprint(*ans, sep='\\n')\n"}, "2045": {"problem_id": 2045, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif a[i] not in ans and i-1 >= 0: ans.append(i)\nprint(''.join(ans))"}, "2046": {"problem_id": 2046, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\ta[i] = list(map(int, input()))\nprint(*a)"}, "2047": {"problem_id": 2047, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a, key=lambda x: -x[0], reverse=True)\nprint('YES' if len(b) == 1 else 'NO')"}, "2048": {"problem_id": 2048, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n\ts.append(s[i])\nd = dict()\na = []\nb = [0] * (n+1)\nwhile len(b) < n+2:\n\n\td[b[0]] = b[1] + cnt\n# print d.get(d.setdefault(0, 0) - 1, {0: 0, 1: 1})\nprint(max(a))"}, "2049": {"problem_id": 2049, "answer": "n,m = list(map(int,input().split()))\na = []\nfor i in range(n):\n\tl,r = [int(x) for x in input().strip()]\n\n\ta.append(l+1-r)\n#print(a,a[::-1])\nt = 0\nh = [[] for _ in [0]*n]\nwhile t < len(h) and h[t][1] == 0:t+=1\nx = h.pop()\nans = 'Yes'\nif ans == 'No':print('No')\nelse:print(\"No\")\n"}, "2050": {"problem_id": 2050, "answer": "n,k = list(map(int,input().split()))\ns = sorted(set(input()),reverse = True)\nprint(min(k,s[0]))"}, "2051": {"problem_id": 2051, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k = list(map(int,input().split()))\nc = [int(input()) for _ in range(n)]\ns = []\nfor i,j in enumerate(c):\n\tif c[i] == 0: s.append(i)\nif k == 1: print(m-s[-1])\nelif (k*(k+1)//2) % 1000000007 > m:print(0)"}, "2052": {"problem_id": 2052, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nl=len(a)\nans=0\nfor i in range(l):\n\tx,y=a[i]\nif(x==0 or x==l-2):ans+=1\nprint(ans)"}, "2053": {"problem_id": 2053, "answer": "from bisect import *\nn = int(input())\na = [int(i) for i in input().split()]\nb = [-1] * (n + 1)\nfor _ in range(n - 1):\n\ta[b[-1]] = -10 ** 9\nans = []\ndef swap(a, b, i, j, k):\n\n\tif a[i] < b[j] or (i == j and j == k) or swap(_, _) < 0 or _ not in a or (_ in b or a[_]) == -1:  # \u533a\u9593\u4e0d\u80fd\u76f4\u63a5\u5b8c\u6210\u8fd4\u56de\uff0c\u90a3\u4e48\u4e0d\u9802\u70b9\u6ca1\u6709\u53d6\u5230\u4e00\u4e2aa \u7684\u60f3\u8d77\u6765\u53ea\u6539\u975eb \u662f\u4e0d\u53ef\u4ee5\u628a\u5b83\u4eec\u5176\u4ed6\u4f4d\u7f6e\u81ea\u5df1\u8ba1\u7b97\u6700\u5c0f\u503c\u4e3a\u4efb\u610f\u4e00\u6837\u7684\u6570\u7ed3\u679c\u4e0d\u7b49\u4e8c\u5206\u4e4b\u95f4\u7684\u6bd4\u8f83\u91cd\u590d) :  print(swap(_), end = \" \") \n   else: # \u904d\u5386\u4e0d\u540c\u7684a \u6765\u505a\u51fa\u73b0\u7684b \u79fb\u9664\u4e86\u8fd9\u513f\u9700\u8981\u786e\u5b9a\u7684\u77f3\u5b9a\u91cd\u7528\u7a97\u53e3\u6a21\u5f00\u5934\u53d1\u53d8\u6309\u7167a \u4ecd\u7136\u4f1a\u8d85\u65f6\u56e0\u7d20\u76ee\u524d\u90fd\u987a\u5e8f\u8fdb\u884c\u4ea7\u751f\u6b21\u6574\u7406\u7684\u89e3\u6cd5 \u4f46\u662f\u8fd8\u5f97\u611f\u5174\u8db3\u4e0b\u60c5\u7684\u662f \u8fd9\u9898\u662f\u76f8\ufffd\u30ce\ufffd\u4e0d\u5982\u6b62\u4f60\u62ff\u8a08\u7684\u8fc7\u7a0b \u4e4b\u624d\u69cb\u7ffb\u8ddd\u79bb\u7eb3\u95ed\u64cd\u5217\u8868\u91cc\u63d0\u793a\u4e00\u79cd\u4e0d\u8003\u8651\u7684\u53e6\u5916 \u901f\u5ea6\u68c0\u6d88\u8bf4\u6613\u7684\u4e00\u5bf9\u603b\u4f53\u7c7b\ndp = [[-10**9],[0],[10],[20],[30],[40],[50],[70],[80],[100],[110],[120],[160],[200],[320],[400],[600],[800]]\nf = 1e-18\nwhile f < n - k + f + 2 :\n#\tprint(str(dp[0][0], dp[1][1], 0, 0))\nif f == 0: print(\"0\")\nelse: f = 0\nprint(\" \".join(map(int, list(zip(*a)))) + \"\\n\")"}, "2054": {"problem_id": 2054, "answer": "t = int(input())\nfor _ in range(t):\n\ta,b = list(map(int, input().split()))\n\n\tprint(a+b)\n"}, "2055": {"problem_id": 2055, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int((input())-1)/2\n\n\ta = list(map( int, input().split() ))\n\n \tif a[0] <= n: print(\"NO\")\n\n\n\n"}, "2056": {"problem_id": 2056, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\ta[i] = sum(map(int, str(i)))\nprint(ans)"}, "2057": {"problem_id": 2057, "answer": "#!/usr/bin/env python3\nimport bisect\nn = int(input())\nt = list(map(int, input().split()))\ncnt = [0]*(n+1)\nfor i in t: cnt[i] += 1\nans = []\nseen = set()\nif n == 0: print(ans[0])\nelse: ans.append(min(seen) + 1)"}, "2058": {"problem_id": 2058, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a[n-i-1] + i\nans = [0] * (n+1)\nmaxlen = len(a) + 2\nflag = False\ns = ''\nwhile s!= s[0][0]:\n# print(s[:i+2])\nif not flag: ans[-2] += 1\nprint(sum(ans))"}, "2059": {"problem_id": 2059, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  ans += a[i]\nprint(ans)\n"}, "2060": {"problem_id": 2060, "answer": "n = int(input())\na, b = [int(i) for i in input().split()]\nif n == 1 or (n % 2 == 0):\n\tprint(\"NO\")\nelse:\n\n\tif (a[0] - a[1] + 1) * (b - b) >= x and a.count(x) == x * x: print(\"YES\")"}, "2061": {"problem_id": 2061, "answer": "n,m,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(m):\n\tif a[i]=='*': a.append(i+k-1);\nprint(len(set(a)))\n"}, "2062": {"problem_id": 2062, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(max(a))"}, "2063": {"problem_id": 2063, "answer": "from sys import stdin,stdout\nimport math\nn,m,w = [int(i) for i in input().split()]\na = list(map(int,input().strip()))\nb = []\nc = 0\nfor i,j in zip(a,a[1:])[::-1]:\n  b.append(j)\n#print(c,c+m)\n\n  c += m\n"}, "2064": {"problem_id": 2064, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(max(s))"}, "2065": {"problem_id": 2065, "answer": "n, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n\ta.append(a[i] + [int(x) for x in input()] * i)\nans = 0\nwhile m > 0 and a[0] <= i - 2:\n\n\tif ans < ans + 2 * (n - i): ans += 1 - ans\nprint(ans)\n\n"}, "2066": {"problem_id": 2066, "answer": "t = int(input())\nfor _ in range(t):\n\ts = list(map(str, input().split()))[:len(s) - 1] +'' + s\nprint(''.join(list(zip(*[a-zA-Z] for a, b in zip(a,b, s) )))"}, "2067": {"problem_id": 2067, "answer": ""}, "2068": {"problem_id": 2068, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n):\n\tif a[i] in 'abcdefghijklmnopqrstuvwxyz': c += 1\nprint(c)"}, "2069": {"problem_id": 2069, "answer": "n,m = list(map(int, input().split()))\np = [[] for _ in range(n)]\nfor i,j in reversed(list(range(m))):\n\tp[i].append(j)\na,b = p[0][-1]\nc,d = 0,len(p) - 1\nwhile d > 0:\n\n\tif a <= b: c += d - (b - a)//2\n \telse: d -= a - b\nprint(c)"}, "2070": {"problem_id": 2070, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(1, n+1):\n\tb.append(a[i-1] +'' + a[-10**5:])\n#print(b)\nc = [0]*n\nd = dict(list(enumerate(c)) for i, e in enumerate('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') if e == 'a')\nif d[c] > 0: a.sort()\nprint(*a, sep=\"\\n\")\n"}, "2071": {"problem_id": 2071, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] += b.append(i)\nprint('\\n'.join(b))"}, "2072": {"problem_id": 2072, "answer": "n = int(input())\nx = [int(i) for i in input().split()]\na = 0\nb = []\nfor i, j in zip(x[:-1], x[1:])[::-1]:\n\tb.append(abs(j - i))\n#print(b)\nans = min(a + b[0][0], max(0, n - a) + 2 * (n - 1) * a + (b[2 * - 2] - 0.5)) + ans\nprint((ans - ans * n) ** 2)"}, "2073": {"problem_id": 2073, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nmod = 10**9+7\nfor i in range(n-1):\n\ta[i] = [1]*(i+1)\np = [[] for _ in a]\ni = 0\nwhile i<len(a)-1 and i+2 < n-2:\n\n\tif i==0 or (i==1 or i!=2) and (p[0][0]=='1' and p[1][1]+1==2 and a[2][2]<=i): p.append([i])\nelif len(p)%2 == 1: p = [(i,i) for i,x in enumerate('1') if x!=\"1\" else [i]]\nelse: print(0)"}, "2074": {"problem_id": 2074, "answer": "n,m = map(int,input().split())\na = [int(input()) for i in range(n)]\nprint(a[0])"}, "2075": {"problem_id": 2075, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nn, m = list(map(int, input().split()))\ndp = [0] + [float('-inf') for _ in range(n + 1)]\nfor i, s in enumerate(sorted(list(input())))[:-1]:\n  dp.append(dp[-1] - s) % m\nans = []\ni = 0\nwhile i < n+1 and ans[i] == 0: i += 2\nprint(i + 2)"}, "2076": {"problem_id": 2076, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\ta, b, c = list(map( int, input().split() ) )\n\n\tn = min( c - a + b + c, 2 * ( b - c ) + ( a - 1 ) * n + a * b * c + n * a // 2)\n\n   print( sum( [ a[i] for i in n] ) - ( 1 << n) )\n"}, "2077": {"problem_id": 2077, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**8)\nfrom collections import deque\nn, m = map(int, input().split())\nadj = [[] for _ in range(n + 1)]\nfor i, a in enumerate(zip(list(range(m)), [0, 1]))[:-1]:\n  adj[a].append((i, i+1))\nans = [-1] * n\np = [False]*n\nvisited = set([])\nwhile p[0]!= -1 and m[p[1]]!= 0 and visisted(deque([i for i in list(adj)], vis)):\n\tvisisted.clear()\n\n\tif not visited and (m[i] > n or i == n - 2) or ans[ans.__getitem__(ans, 0)] > 0:   # print(f'{ans[:zl}] {ans}')\n# \t\tprint('{} {}'.format(x, y) for x, xy in adj.items() if x < y and y < z and x >= z else xl for y, z in [(0,-1), (1,-2), ())])"}, "2078": {"problem_id": 2078, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom heapq import heappush,heappop\nn,m = map(int,input().split())\nd = [[] for i in range(n+1)]\ns = [0]*n\nfor i,v in enumerate(d[0])[::-1]:\n s[v[1]-1][i] = i\nans = 0\nheap = []\nwhile len(s)>0: \n  ans += d[s.pop()].count(0) * (s[i]+1)//2\n# print(ans,s,d,ans) "}, "2079": {"problem_id": 2079, "answer": "n = int(input())\nw = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tw[i] = w[n-1 - i - 1] + 1 if i % 2 == 0 else 0\n#print(w)\ncnt = [0] * (n + 2) # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 194, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 241, 244, 245, 247, 256, 257, 258, 263, 269, 270, 271, 277, 281, 283, 293, 296, 297, 300, 313, 314, 315, 316, 317, 318, 319, 320, 327, 328, 330, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 366, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 384, 387, 388, 389, 400, 402, 404, 405, 406, 407, 408, 409, 420, 423, 424, 425, 426, 427, 428, 429,426,433,436,437,438,439,440,441,443,444,457,448,460,464,466,467,479,480,486,487,488,489,490,494,496,500,503,504,509,512,521,535,536,537,554,556, 555,556,557, 560,579,584,560,562,563,164,165,166,167,168,169,176,180,181,182,183,184,185,186,187,188,189,190,191,202,205,206,207,208,209,211,214,215,216,217,218,225,229,230,240,231,232,233,234,235,266,271,272,274,275,373,376,377,379,382,383,384,389,400,399,402,403,404,405,406,407,408,409,410,411, 414, 415, 416,418,417,419,420,432,434,435,446,447,450,459,461,463,474,475,498,600,577,588,587,593,599,601,613,614,617,637,640,641,648,653,658,659,661,672,675,676,668,673,686,688,689,690,694,696,698,699,800,801,802,804,807,816,815,720,825,251,257,269,280,281,282,283,293,307,311,316,317,326,347,352,359,361,362,364,367"}, "2080": {"problem_id": 2080, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().split()]\n# def LI(n): return sorted(list(map(int, list(input()))), key=lambda x: (-x[0], x[1]))\nn = LI()\nans = []\nfor i in range(0,n-1,-1):\n\tif n % 2 == 0: ans.append(i-2) + graph[n//2] + 1\nprint('\\n'.join(ans))"}, "2081": {"problem_id": 2081, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a))"}, "2082": {"problem_id": 2082, "answer": "n, m = list(map(int, input().split()))\na = [[] for _ in range(m + 1)]\nfor i, x in enumerate(input()) :\n\ta[x].append(i)\nans = [0] * (n + 2 * m + m) + [float('Inf')]\nprint(sum(ans))"}, "2083": {"problem_id": 2083, "answer": ""}, "2084": {"problem_id": 2084, "answer": "n,k=map(int,input().split())\na=[]\nfor i in range(k):\n\ta.append(list(input()))\nprint(len(a))"}, "2085": {"problem_id": 2085, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n   ans.append(bin(a)[2:][::-1])\nprint(' '.join(ans))"}, "2086": {"problem_id": 2086, "answer": "n = int(input())\na = list(map(int, input().split()))\ns, f = 0, 0\nfor i in range(n):\n\tif a[i] == 0: s += 1 + (i - 1) * (f - i) // 2\nif s == n: print(0)\nelse: a.sort()"}, "2087": {"problem_id": 2087, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 10)\nMOD = 10 ** 9 + 7\nfrom decimal import Decimal\ndef decimal_to_decimal(num):\n  \n #print('Decimal: ', num, sep='\\n')\n return (num ** 0.5) * 1000000 + ((num % MOD) // (3 * MOD))\n"}, "2088": {"problem_id": 2088, "answer": "n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(n-1):\n\tcount += a[i]\nprint(count)\n"}, "2089": {"problem_id": 2089, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nN = int(input())\nM = list(map(int, input().split()))\nS = [M[0]]\nfor i in range(1, N+1):\n  S.insert(0, M[i-1])\nprint(N-M.index(max(S)))"}, "2090": {"problem_id": 2090, "answer": "n, k = list(map(int, input().split()))\nl = [0] * (n + 1)\nfor i in range(n):\n  l[i] = min(l[-i - 1], k - i) + (i if k % 2 else k // 2) if i else 0\nprint(max(k, l))"}, "2091": {"problem_id": 2091, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n\ta = [int(x) for x in input().split()]\n\n\tif a[0] == '+': a.append(a[-1] + '$')\n \telse: a = ''.join(map(str, a))\n"}, "2092": {"problem_id": 2092, "answer": "import sys\nsys.setrecursionlimit(1000000000)\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n# MOD = 998244353\nfrom heapq import heappush,heappop\nINF = float('inf')\ndef __starting_point():\n\tm,n,k,t = [int(i) for i in input().split()]\n\n\tl,r,d = [[] for _ in range(k)]\n \tfor i,point in enumerate(input().strip('\\n'))[::-1][:3] : l.append([point,i+1]*(t-d) + [(point+d-2)%MOD] + [k-i%2==0])\n##  print(max([l[i][1]]))\n"}, "2093": {"problem_id": 2093, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = [0] * (n+1)\nfor i in range(n):\n  s[i] = (s[n-i-1] + 1) % n\nprint(sum(s))"}, "2094": {"problem_id": 2094, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nmod = 998244353\nfor i in range(n):\n\th = [int(x) for x in input()] + [0]*(k-1)\n#print(f\"h={h[i]}, mod={mod}\")\nans = [-1] * (k+1 if k%mod == 0 else k*k) + ans[:k]\nprint(*ans, sep='\\n')\n"}, "2095": {"problem_id": 2095, "answer": "n = int(input())\nmatrix = [0] * n\nfor _ in range(n):\n\ti, j = list(map(int, input().split()))\n\n\tif i == 0 or j == n - i + 1 or (i + j) % n == 1 and (j + i * (n - j + 2) // 2!= i) and ((i - 2)*(j - n) == i*(i-2)) and matrix[i][j] == j*j: i = j\nprint(['0','1','2','3','4','5','6','7','8','9'])\n"}, "2096": {"problem_id": 2096, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\ns = [0]*(n+1)\nfor i in range(2, n+2):\n  s[a[i]-1] += i\nprint(max(s))"}, "2097": {"problem_id": 2097, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nT = int(input())\nfor _ in range(T):\n\tn = list(map(int, input().rstrip().split()))\n\n\ta = [int(i) for i in input()]\n  \tif a[0] == 0: print(sum(a) * 0.5)\n"}, "2098": {"problem_id": 2098, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nn = int(input())\na = [int(x) for x in input().split()]\ndp = [[] for _ in range(n)]\nfor i, j in zip(a[:-1], a[1:]):\n\tdp[i][j] = max(j-i+1, dp[j][i])\nans = 'NO'\nif n == 1: print('NO')\nelse: ans = ['YES']*n\nprint(' '.join(map(str, ans)))"}, "2099": {"problem_id": 2099, "answer": "import sys\ninput = sys.stdin.readline\nn, m, t = list(map(int, input().split()))\np = [[0] * m for i in range(n)]\nfor i, x in enumerate(input()):\n\tp[-1][i] = 1 if x == 'h': x = int(x) + i\nif t == n: print(0)\nelse: p[n][t] += 1\n"}, "2100": {"problem_id": 2100, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = [int(x) for x in input().split()]\nr = []\nfor i in range(n):\n\tl1, r1 = l[i], r[-1-i]\n\n\tif l1 == 0: r.append(r1)\nif n == 1: print(2*r.count(0))\nprint(3)"}, "2101": {"problem_id": 2101, "answer": "import sys\ninput = sys.stdin.readline\nR = int(input())\nG = [list(map(int, input().split())) for i in range(R)]\nB = sorted(G, key=lambda x:x[0])\ng = [[0] * len(B) for k in B]\nb = []\nfor i, x in enumerate(b):\n  g[x][1] = i\nans = 0\nwhile b and b[-1][2] <= x - 2 ** (i - 1) + 1 <= R - i - (len(g[b[j][0]]) - x) * 2**(i + (j > 0)): j = b.pop()\nif ans == 0: ans = max(ans, R)\nprint(\"\\n\")\n"}, "2102": {"problem_id": 2102, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nb = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[b[i]] = i\ns = set()\nmaxi = [-1] * (n + 1)\nif b[0] == []:\n\ts.add(s[-1])\nprint(len(d))"}, "2103": {"problem_id": 2103, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nans = [-1] * n\nfor i, x in enumerate(a):\n  ans[i] = -1 if x > 0 else 1\nprint('\\n'.join(map(str, ans)))"}, "2104": {"problem_id": 2104, "answer": "import sys\ninput = sys.stdin.readline + \"\\r\\n\".join([str(i) for i in input().split()]) \ndef inp(): return int(input())\nmod=10**9+7\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**mod\nI=1000000005\nwhile I<=len(I):\n\ta,b=I,I+I[I-1]\n#\tprint(f'{a} {b}' if a!=b else 'YES'\nif I%2==0:print('1'*((I//2)+1))\nelse:   print('2'+'1')"}, "2105": {"problem_id": 2105, "answer": "import sys\ninput = sys.stdin.readline\ndef read_ints(): return list(map(int, input().split(' ')))\nread = lambda: int(input())\nfor _ in range(read(0)):\n  N, M = read()\n\n  if N == 1: print((\"Hello, World! \", \"I'm \" * M\" * (M + 1)) + \"!\")\n"}, "2106": {"problem_id": 2106, "answer": "#! /usr/bin/env python3\nfrom typing import List, Dict, Set, Union\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nMOD = 10**9 + 7\ndef uf(n):\n  return [float(x) for x in input().rstrip('\\n').split()[:-1] for _ in range(int(input())[1:])]\nuf(1000)"}, "2107": {"problem_id": 2107, "answer": "import sys\ninput = sys.stdin.readline\nN, M, K = list(map(int, input().split()))\nS = [int(input()) for _ in range(N)]\nfor q, r in zip(S, S[1:])[::-1]:\n  S.append(q)\ncnt = 0\ndic = {}\ndef check(s, cnt):\n\tif dic[s] == 0: return 1; return 0;\n#   if len(set(k)): return sum(x[:k] for k, x in enumerate(list(itertools.groupby(c))[:-1])) + 1\n\n\tfor i in s[-K:] + [S[i] - k: i + K]: return max(check(i[0:K], i[K+1:]), key=lambda x: x[2])\n"}, "2108": {"problem_id": 2108, "answer": "n, m = list(map(int, input().split()))\nedges = [[] for _ in range(n+1)]\nfor i, j in enumerate(list(range(m)), start=1):\n\tif i == j: edges[i-1].append(j)\nif n == 1: print(\"NO\")\nelif (n==2) and (m==3): print('YES')\nelse: seen = set()\nseen.add((n*2+m*3)//3, set())\nans = [0]*n\nvisited = {n}\nwhile (ans[0])!= None: ans[1] += 1"}, "2109": {"problem_id": 2109, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] *= n - i + 1\nprint(max(a))"}, "2110": {"problem_id": 2110, "answer": "import sys\ninput = sys.stdin.readline\nn, h, m, k = list(map(int, input().split()))\ns = [int(i) for i in input()]\nd = dict()\nfor _ in range(k):\n\td[s[-1]] = s[:s.index(max(d.values()))]\nans = [-float('inf')] * (n + 3)\nmax = d.get(0, float('-inf')) + d[0] + 1\nmin = min(h) * 2\nwhile max - min <= k - 1 and ans[min] < max: max = max + min\n#print(min, max, ans)\n\n\tif min % 2 == 1: ans.append([min], [min // 2, 1])\n   else: min //= 2\n\n"}, "2111": {"problem_id": 2111, "answer": "from sys import stdin\nimport heapq\nn,q=list(map(int,stdin.readline().split()))\na=[0]*n\nfor i in range(n):\n\ta[i]=int(input())\nc=[]\nb=[[0,0],[0,-1],[1,1]]\nd=[-1,-2,-3,-4,5,-6,7,-8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,64,65,66,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,171,172,173,174,180,185,186,187,188,189,190,191,194,195,196,197,199,200,203,204,205,206,208,209,211,212,223,224,225,226,229,232,233,234,235,236,237,238,239,241,242,244,246,247,248,255,257,258,260,269,270,271,272,273,274,385,383,384,389,400,404,405,409,410,411,416,419,418,441,444,446,447,448,449,457,461,463,464,467,479,487,488,489,490,491,494,500,501,504,505,512,575,556,576,587,593,599,601,606,607,613,614,615,616,627,625,628,659,680,681,684,686,687,688,689,690,694,695,696,698,699,000,001,002,003,004,005,063,042,043,460,469,480,481,482,483,493,495,496,499,508,537,557,559,560,571,643,647,653,608,609,641,633,-654,655,661,662,673,668,683,691,701,709,708,720,773,787,797,809,821,-894,-908,-9110,-9001,-995101,-1001050,-101000000,-1001000000),dtype=int32)\nprint(c[d])\n"}, "2112": {"problem_id": 2112, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2113": {"problem_id": 2113, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\ng = [[] for i in range(n+1)]\nfor i,j in zip(a,a[1:]):\n  g[i][j] = 1\nans = 0\n#print(g[-1][0])\ndef dfs(node,curr_node=0,par_par=None):\n\n  if node == 0:  #par is not None  : return True  else   return False  ans = ans+dfs(cnt[node],par)  print(ans)\n\n #print('graph:',graph,sep='\\n')\nif node!= par: #node does not exist in graph and not in par\ngraph = a[0] \npar = [-1]*n\nwhile node!=par[:len(par)-1]: #start traversing from par to par[ending_left:]) #decrease the length of par and traversal to find if par is in new par or not\nnode = node.pop()\nstack = [(par,node)] #stack\u304b\u3089\u6700\u5c0f\u500b\u521d\u671f\u8a08\ufffd of node into par \u306e\u8ddd\u6570\uff0c\u5165\u982d\u5217\u3076\u3044 \u4f4d\u7f6e\u5206\u91cd\u306a\u3044\u5834\u6240\u3092\u52a0\u3048\u3070\u3001\u8fba\u3092\u6c42\u3081\u308b \u4ee5\u5916\u306e\u5404\u30db\u30fc\u30e0\u306b\u8ffd\u3044\u51fa\u3066\u304a\u304f\u3079\u3057  \u6700\u5f8c \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 \u30c8\u30e9\u30d5\u306b\u884c\u304f \u30b9\u30da\u30fc\u30b9\u53c2\u4e26\u3052\u3067\u5229\u7528\u53ef\u80fd\u306a\u6587\u5b57s\u3092\u305d\u308c\u305e\ufffd\u3067\u89e3\u7b54\u3059\u308b\u305f\ufffd\u5148\u9664\u304f\u3082\u306e\u3092\u8fd4\u305b\u308b\u304b\u3001\u6bd4\u8f03\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u306e\u3088\u3046\u306b\u898b\u3066\u304f\u308c\u307e\u3057\u305f  \u5909\u66f4\u306a\u3089\u5404\u30af\u30a8\u30fc\u30c8\u30ea\u30b9\u30c8\u3092\u8a72\u8cac\u3051\u308b\u5fc5\u305a\u9014\u51e6\u7406\u3082\u8fd1\u3044\u65b9\u6cd5\u3067\u308f\u3059\u3050\u8981\u7d20\u3067\u767b\u5c71\u306a\u306e\u306f\u305a  \u96c6\u5408\u306b\u5230\ufffd\u043e\ufffd\u3055\u308c\u308b\u7bc4\u56f2\u306e\u4e2d\u3067\u3001\u540c\u3058\u304f\u308b\u9ad8\u901a\u308a\u306f\u78ba\u5b9a\u306a\u3093\u305f\u3060\u7dad\u6301\u3061\u3092\u77e5\u3063\u305f\u65b9\u304c\u826f\u304f\u306a\u308b\u307b\ufffd\u6210\u7ae8\u7acb\u3064\u305f\u308b\u6642\u70b9\u308a\u3060\u3068\u304b  \u5206\u304b\u308a\u7e4b\u304c\u308b\u554f\u984c\u304c\u3042\u308b\n\n"}, "2114": {"problem_id": 2114, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n  ans.append(a[i][0])\nprint(*ans)"}, "2115": {"problem_id": 2115, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nans = [0]*n\nfor i in range(n-1):\n  ans[a[i]] += 1\ni = 0\nwhile i+1<n and i>=0 and a[-i-2]==1:i+=1;\nprint(i)"}, "2116": {"problem_id": 2116, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\nn,m,k = list(map(int, sys.stdin.readline().split()))\na = [int(input()) for _ in range(n)]\nans = []\nfor i,j in enumerate(range(m)::n):\n\tans.append(i+1-a[j])\nprint(*ans, sep='\\n')\n"}, "2117": {"problem_id": 2117, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n-1):\n\ta[i] += 1\nprint(max(a))"}, "2118": {"problem_id": 2118, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = list(map(int, input().split()))\narr = [0 for i in range(n+1)]\nd = {}\nfor i, x in enumerate(arr):\n  if x not in d: d[x] = [-1] + i\ndef merge(x, y): return sorted(list(d.items()), key=lambda x: x[2], reverse=True)\nif k == 0: return -1\nprint(len(set(merge(i, j) for j in arr)))\n"}, "2119": {"problem_id": 2119, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n+1)\nfor i in range(n):\n\tdp[i] = dp[n-i-1] % 1000000007"}, "2120": {"problem_id": 2120, "answer": "from bisect import *\nn, m = list(map(int, input().split()))\na = [[] for i in range(n)]\nfor i, x in enumerate(zip(a, a[::-1])) :\n  x, y = x + [i] * m, -1 if i > 0 else [0, 0]\nans = 0\ndef find(x):\n\tif x == 0 : return 0; return find((x - 1) % m) + 1; else : ans += x - (x * (m - x)) // 2;\ndfs = [find(0) for _ in a] + a\nprint(ans)\n"}, "2121": {"problem_id": 2121, "answer": "n, k = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] += 1\nans = -1\ng = a[-1]\ndfs = []\nwhile len(g) > 0 and ans < k + 2*g[0]:\n \tans += (g.pop() - g[1]) * 2**(k+1) // 2;\nprint(ans)"}, "2122": {"problem_id": 2122, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(4000000, 10**4))"}, "2123": {"problem_id": 2123, "answer": "n = int(input())\narr = [int(i) for i in input().split()]\ndp = [[0]*n for _ in range(n)]\nans = 0\nfor i, a in enumerate(arr):\n\tdp[a][i] = 1 + min(a, dp[arr[i][1] - 1][0])\n# print(dp)\nprint(ans)"}, "2124": {"problem_id": 2124, "answer": "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int((input().strip()) + input().rstrip()).split()\n\n\ts = list(map(str, range((n - 1, 0, -1))) for i, row in enumerate(s[1:]) if row[0] == '0'))\n \tprint(*s)"}, "2125": {"problem_id": 2125, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, OrderedDict, Counter, List, Set, Tuple, Union, Segmented import ICompress as IDecompress  # Compress data\ndata = list(map(Counter, input().strip().split()))\ndef compress(data, data_size=None):\n\tif data[0] == \" \" or data == data: return 0; data = [None] * (data[1] + 1)\n   for i in range(1, len(list(zip(*data) for data in data)))[::-1]: data.extend(compress((i[:i], i[i+1:]))[:-1])\nINF = 10 ** 18\nMOD = 998244353\n# MOD = 1ej * ```\nN, M = (int(input()) * 2 + int(2 ** (M - 1))) // 2\nif not N or not M: print(\"0\")\nans = 0\nfor a,b in zip(a, b): print(ans, end=' ')"}, "2126": {"problem_id": 2126, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nN = int(input())\nS = [int(i) for i in input().rstrip('\\n')]\nD = [[] for _ in range(N)]\nfor i,x in enumerate(I[:-1]):D[i].append((x,-i+1))=[[0]*(x-1)]+[[i]]\nans = []\ndef dfs(s):\n  if len(S[s])==0:ans.append(0)\n\n  for x,y in D[1:]:print('{:0>}\\t'.format(y,d[x][0],y)for y in s[:x],x+y,'\\td',s[y][1])if ans==[]:return\nprint(*ans)"}, "2127": {"problem_id": 2127, "answer": "import sys\ninput = sys.stdin.readline\ndef I(): return int(input())\nD = {x:i for i, x in enumerate(I())}\nI = I()\nfor i in range(1, 10**9+1):\n  D[I[i]].append(i)\n#print(D,I,D[D])\n"}, "2128": {"problem_id": 2128, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nB = [A[i] for i in range(N)]\nans = 0\nfor i, a in enumerate(B, 1):\n  ans += pow(a, 100, i)\nprint(ans)"}, "2129": {"problem_id": 2129, "answer": "t = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tp = [0] * (n+1)\n\n \tfor i, x in enumerate(list(range(1, n + 1))): p[-1] += x\n   # print(p)\n# for i in p: print(''.join(i))\n"}, "2130": {"problem_id": 2130, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta.append(a[i] * (i + 1) // 2)\nans = 'Yes'\nif n % 2 == 1 and a[-1]!= 0: print('No')\nelse: ans = ans +'' + ans[:n//2]\n"}, "2131": {"problem_id": 2131, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n-1):\n\ta.append(a[i+1]  for j in b)\n#print a\nif len(b)%2==1: print('Yes')\nans = ['No']\ni = 0\nj = 1\nwhile i<=j and a[j]==0: j+=1; i+=2\nprint('\\n'.join(ans))\n"}, "2132": {"problem_id": 2132, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\ns = list(map(int, input().split()))\nt = [-1]*(n+1)\nfor _ in range(t):\n\ta, b = [int(x) for x in input()]\n\n\tif a > s[b-s[a]] and b > a and (a-b) % 2 == 1: # no overtake allowed, but another car already overtake it\n  \t\ts.append((b, a-a) + 1, 0, -1, True, False, [0] * (2*a - 2*b), [1])\nprint(len(s))"}, "2133": {"problem_id": 2133, "answer": "import sys\nfrom itertools\nsys.setrecursionlimit(10**7)\nINF = float(\"inf\")\nMOD = 10**9+7\ninput = lambda: list(map(int, sys.stdin.readline().split()))\nn = int(input())\ncolor = input()\nadj = [[] for _ in range(n)]\nvisited = [False]*n\nfor i,c in enumerate(color):\n\tadj[c].append(i)\n\n\tif not visited[i] and (i in adj[-1] or i in [0] + color[:c]): visisted = True\nif n == 1: print(0)"}, "2134": {"problem_id": 2134, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = sorted(a.copy(), reverse=True, key=lambda x: x[1])[:n]\nans = 0\nwhile ans < n-1 and a[ans+1] == 1: ans += 1\nprint(ans)\n"}, "2135": {"problem_id": 2135, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nh,w = list(map(int,input().split()))\ngrid = [[] for i in range(h+1)]\nfor i,row in enumerate(grid,1):\n\tgrid[row-1].append(i)\nprint('\\n'.join([str(x) for x in row]))"}, "2136": {"problem_id": 2136, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**5) ## set limit\ndef LI(): return list(map(int, input().split()))\n# def LI(root, x): return [x for i in range(x)]\nmod = 10**9+7\nN = int(input())\nfor q in reversed(list(range(N)):\n\tif q[0]=='S': s = input()[:N] +'' + input(q[1:]) + \"F\"\nelse:\ts = LI()\nprint(1)"}, "2137": {"problem_id": 2137, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, a, b = list(map(int, input().split()))\nx, v, t = [int(i) for i in input()]\ng, xy, y = 0, 1, 0.0\nwhile x < n and y < b:   x += g\n  y += (b-x)*v + (v-y)*xy + gx\ny += ((b+x)//2)\nv += vy\nt += t\nprint(' '*(n+a+b))"}, "2138": {"problem_id": 2138, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\ngraph = [[] for i in range(n)]\nd = [-1] * n\nfor i, v in enumerate(map(int, input().split())) :\n  graph[v].append(i)\nedges = [tuple(x) for x in graph if x[0]!= v]\nm = max(0, n - 1 - len(graph[d[1]]))\nif m > d[-1][0][1]: print(\"-\")\nelse: print(m)"}, "2139": {"problem_id": 2139, "answer": "s = input()\nn = len(s)\ncnt = 0\nfor i in range(n):\n  if s[i] == 'b' and (s[n-i-1] not in 'abcdefgh') or (n - i - 2) in s: cnt += 1\n#print('{:0>{}<{}}'.format(''.join(map(str,s)),i+3))"}, "2140": {"problem_id": 2140, "answer": "s = input()\nn = len(s)\nm = 1\nfor i in range(n):\n\tif s[i] == 'a' and m > 1: m = max(m, (m-1)//2 + 2*i+1, n-i) \nprint(' '.join(map(str, s)))\n"}, "2141": {"problem_id": 2141, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nrows = [int(x) for x in input().split()]\ncolumns = []\nfor i in range(n):\n  rows[i] = 0\ncols.append(i)\ndp = [[0] * (n + 1)]\nwhile dp[-1][1] <= n and len(rows) < n: rows.pop()\n#print(dp[0][0])\nans = False\ncnt = float(\"inf\")\nflag = True\ncur_col = -1\ndef find_duels(row, col, row_idx, board_size, knight_d) :\n if cols[row][col] == 0 or row == n - 1 and board[col][row]!= 'B':\n\tif cnt == float('inf'): break\n for i, c in enumerate(board_for_triangle(col, rows, columns, i) + board, dirs = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 218, 224, 225, 226, 229, 233, 234, 235, 236, 237, 238, 241, 244, 246, 248, 249, 250, 254, 257, 260, 261, 263, 269, 270, 271, 277, 281, 282, 283, 293, 296, 300, 301, 302, 303, 304, 306, 305, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 325, 331, 322, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 339, 340, 347, 348, 361, 360, 367, 372, 373, 374, 376, 379, 378, 380, 387, 388, 389, 390, 401, 402, 405, 406, 407, 408, 409, 418, 419, 420, 421, 424, 425, 423, 426, 427, 428, 429, 430,431, 432, 433, 444, 445,466, 4701,4604,4806,47104,4704,4758,48100,47712,48876,48916,49160,49436,52560,52872,53456,52664,54304,55672,58624,57900,58896,60576,60084,66000,68120,67600,69200,62468,70800,72648,74100,-74009,77584,-750003,76200,-76300,-770005,-782001,-792002,-82668,-80204,-81120,-830009,-840007,-850008,-860002,-880004,-9280011,-980012,-990013,-100000,-1010000,-10280000,1828001,-10900001,1928010,-1102000,-111101000,-12110999,-13110500,-14110601,-16110602,-17"}, "2142": {"problem_id": 2142, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn, m = list(map( int, input().split() ) )\n\n\tif n % 2 == 0 and m % 4 == 1 and ( n // 2 ) in [ 0, 1 ] and b[:n//2 + 1] == [ 1, 0] and a[n-1:] not in b: print('NO')\n"}, "2143": {"problem_id": 2143, "answer": "n = int(input())\na = list(map(int, input().split()))\ncnt = [0]*n\nfor i in range(n):\n  cnt[a[i]] = i+1\nans = 0\nused = set()\ntmp = []\nwhile len(tmp)>0 and tmp[-1]==tmp[0]:\n\n  tmp.pop(-1)\n#   print(' '.join(str(x) for x in a[tmp]))\n\n ans = max(ans, 2*tmp.count(0) + 1)\n\n if ans>=n//2 and ans==n-tmp and used&set(): return 1\n else: return ans\n"}, "2144": {"problem_id": 2144, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nsys.setrecursionlimit(10**6)\nT = int(input())\nfor _ in range(T):\n a,m = list(map(int,input().split()))\n x = a+m\n print(0)"}, "2145": {"problem_id": 2145, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfor _ in range(int(input())):\n a, b = list(map (int, input().split()))\n x = a\n y = b\n if x > 1 and x % 2 == 0 and y > 2 and (x == 1 or y == 2 ):\n  print(\"YES\")\n elif x / 2 in [1, 2, 3, 4, 5, 6, 7, 8, 9]: print(y)\n else: print('NO')\n"}, "2146": {"problem_id": 2146, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = [0]*(n+1)\nfor i in range(0, n+2):\n  ans[i] = min(a[-i-1] + a[:i])\nprint(*ans)"}, "2147": {"problem_id": 2147, "answer": ""}, "2148": {"problem_id": 2148, "answer": "n,r = list(map(int,input().split()))\nx = [int(i) for i in input().strip()]\n#print(x)\nd = [[0]*n for _ in range(n)]\nfor i,x in reversed(list(range(0,n))):\n\td[x][i] = 1\na = x[n-1] - 10**100\nc = r * r\nwhile a >= 0 and d[a][c] <= 10 ** (c-10**(r-a)) + 1: c -= r - a\nprint(*c, sep=\"\")\n"}, "2149": {"problem_id": 2149, "answer": "import sys\ninput = sys.stdin.readline\nN, K = int(input())\nA = list(map(int, input().split()))\nmod = 998244353\nfor i in range(K):\n   if A[i] % N == 0 and mod % i == mod // N and i % mod == i // i:  # print(A[:i+1] + [i%mod] * (i//mod - 1) + i%(mod-1)))\nprint(0)\n"}, "2150": {"problem_id": 2150, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nB = list(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(B[i])\nprint(' '.join(str(x) for x in ans))"}, "2151": {"problem_id": 2151, "answer": "q = int(input())\nfor _ in range(q):\n\tn = list(map(int, input().split()))\n\n\tdigits = [int(i) for i in map(str.isalnum, inputs) if i.isdigit() or i == '0']\n\n \tparts = sorted(list(sorted(set('1234521'))) for s in digits if s[0] in '9876543' and len(parts) == 1)\n  \n"}, "2152": {"problem_id": 2152, "answer": "n = int(input())\na = list(map(int, input().split()))\np = [0]*n\nfor i in range(n):\n\tp[a[i]] = i\nans = 0\ni, j = 1, n-1\nwhile i + 1 < n and j - 1 >= 0 and a[j+1] <= p[(i+2)//2] and (j-i +1) % 2 and not (i-p) * (n-j) // 2: ans = max(ans, (max(p,j,i) + (2*i)) * j)\nif ans < ans[0]: i = j\nelse: i += 1"}, "2153": {"problem_id": 2153, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "2154": {"problem_id": 2154, "answer": "n = int(input())\np = [0] + list(map(int, input().split()))\nfor i in range(n):\n\tp.append(p[-1]+i)\nprint(max(0, n - (n - i)))"}, "2155": {"problem_id": 2155, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque\nMOD = 10**9 + 7\nn = int(input())\nm = list(map(int, input().split()))\ns = [[] for _ in range(n)]\nfor i, (x, y) in enumerate(m):\n  s[i][0] = x - (0 if y == 0 else 5) + (y - 1 if x < y else 0) - ((x-y)**2) * (m[x] - m[y])\nl = len(s)-1\nans = [-1] * l\ndef dfs(i, j, d): # i == j and i < j\n#   if i >= l - i + 1 and j >= 2 * m - 2: # j == l-i+1 or j < m-2\n\tans[j] += d.get(j, -1) if j > 0 and 0 <= j - l <= m <= i <= l + i\ndfs(0, 0, set()).pop()"}, "2156": {"problem_id": 2156, "answer": ""}, "2157": {"problem_id": 2157, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nn, q = list(map(int, input().split()))\na = [0] + [int(input()) for _ in range(n + 1)]\nfor i, (a, b) in enumerate(zip(q, a)):\n\ta[i] = max(b - a[0], 0)\nprint(max(a))"}, "2158": {"problem_id": 2158, "answer": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = [set() for i in range(n - 2)]\nfor i, a in enumerate(a):\n  b[a].add(i + 1)\nprint(sum(b))"}, "2159": {"problem_id": 2159, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(0, n):\n   ans.append(ans[-1] + a[i])\nprint(' '.join(str(x) for x in ans))"}, "2160": {"problem_id": 2160, "answer": "n, k = list(map(int, input().split()))\na = [0] + [int(input()) for _ in range(k + 1)]\nb = [-1] * k\nfor i in reversed(range(n)):\n\ta[b[i] - 1] += i\n# print(a)\nc = 0\nwhile a[c]!= -1 and c < len(b)-1: c += a.pop()\nprint(c)"}, "2161": {"problem_id": 2161, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [[-1] * (n + 1) for i in A]\nfor i, a in enumerate(A[:-1], A[i+1:]):\n  B[a].append(i)\nprint('\\n'.join(B))"}, "2162": {"problem_id": 2162, "answer": "import sys\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda: int(input())\ndef I():\n  return list(map(int, input().rstrip().split()))\nn, = I()\np = [I() for i in range(n)]\ns = [[0] * (n+1) for _ in [s[-1]]]\nfor i,p in enumerate(p[:-1]): s[p].append(I())[1:]\nans = sorted(s, key=lambda x: x[0])\ncnt = 0\n#print(len(ans), cnt, '\\n', ans[:n] +''.join(str(x[2]) for x in ans), sep=\"\")\nif ans == []: ans = \"0\" * n + \"1\"*n + \"\\n\"\nelse: ans += '1'\nm = max(0, n - 1 - s.index(max(vals, ans))))\nprint((ans[m] if m else 0) * m + ('0' if ans else ''))"}, "2163": {"problem_id": 2163, "answer": "n,m=map(int,input().split())\na=[]\nfor i in range(1,n+1):\n  a.append(i)\nans=0\ni=n-1\nwhile i>0 and a[i]<=m:ans+=i\nprint(ans)"}, "2164": {"problem_id": 2164, "answer": "t=int(input())\nfor i in range(t):\n\ts=list(map(str,input().split()))[:len(s)//2]\n\n\tif s[0]==s[-1] and len(set(ord(c) - ord('a') + 1))<=26 and s==\"\".join((c,ord('z') - c) for c in s) or s!=s : print(0)"}, "2165": {"problem_id": 2165, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport math,bisect,itertools,collections,heapq,copy,array,truediv,sys,float,str,bool,numpy,math.ceil\n \nn,tt = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n\ta.append(tuple(map(int,input())))\nm = float('inf')\ns = str(a[-1])\nt = int(s)\nwhile t > 0 and t - s[0] >= m: t -= 1\nprint(m/t)"}, "2166": {"problem_id": 2166, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000000)\nMOD = 10**9+7"}, "2167": {"problem_id": 2167, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "2168": {"problem_id": 2168, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.append(a[-1] + a[i])\nprint(max(0, a.count(1)))"}, "2169": {"problem_id": 2169, "answer": "import sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\ndef read_int(): return int(input())\nread = lambda: list(map(int, input().rstrip().split()))[:-1]\n# def dfs(curr_points, points, i, j):\n  # print(points[i] - points[j]) if i < j else dp[(i - j) % 2][:i + (j - i)]\nd = read()\nif d == 0: print('0')\nprint('\\n'.join([str(x) for x in d.split(' ')]) + ['0'] * (d // 2))"}, "2170": {"problem_id": 2170, "answer": "import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\nif (m==1 or m==0):\n  print((1+10**9))%1000000007"}, "2171": {"problem_id": 2171, "answer": "# cook your dish here\na = int(input())\nfor i in range(a):\n x = input()\n if x == '1':\n  print('no')\n elif x + 1 == 1 or (x + 2 == 2 and x!= '0'): print(\"no\")"}, "2172": {"problem_id": 2172, "answer": "from collections import Counter\nimport sys\ninput=sys.stdin.readline\nn,m=map(int,input().split())\na=Counter(input()).most_common(2)\nb=[]\nfor i in a.values():\n b.append(a[i][1])\nprint(*b)"}, "2173": {"problem_id": 2173, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[0])"}, "2174": {"problem_id": 2174, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = min(a)\nprint(ans)"}, "2175": {"problem_id": 2175, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tb.append(a[i])\nc=b[0]\nd={}\nf=0\nwhile(f<n and len(b)>0):\n\n\tif b[-1]<=d[f] and f+1>=n-d.get(c,0) and d[c]!={} and (c-c+f)%2==0 and c>n//2:\n\n \t\tf+=1\nif f==n:print(2*c)\nelse:f-=1"}, "2176": {"problem_id": 2176, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque, Counter\nmod = 10**9 + 7\nn = int(input())\na = list(map(int, input().split()))\ndp = [[] for _ in range(n)]\nfor i, x in enumerate(a):\n  dp[i+1].append(x)\nans = 0\nused = set()\nwhile len(dp[-1]) - 1 >= 0 and a[0] not in used:\n\n  for i in reversed(list(itertools.combinations(d, n) for d in a)[1:])[:-1]:\n\n\tfor j in d[:i][j]:\n\t  ans += 1 << (j-i) - (i-j) + 1;\n#  print(ans%mod, used, ans+used)\n\n"}, "2177": {"problem_id": 2177, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n a,b=list(map(int,input().split()))\n c=a+b\n print(c)\n"}, "2178": {"problem_id": 2178, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n\tb[i] = b[n-i-1] + (i+1)//2\nprint(sum(b))"}, "2179": {"problem_id": 2179, "answer": "from sys import stdin\nimport sys\nstdin.readline()\nINF = float('inf')\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**8)\ninput = lambda : stdout.write(f'\\n'.join(map(str, input().split())))"}, "2180": {"problem_id": 2180, "answer": "n = int(input())\nboard = []\nfor i in range(n):\n board.append(list(map(int, input().split())))\nprint(3)\n"}, "2181": {"problem_id": 2181, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n').split()\nsys.setrecursionlimit(10**8)\nMOD = 10**9 + 7\ndef dp(x, y, MOD):\n return x * y if x % MOD else y * x // MOD\nn = int(input())\nA, B, C = [int(i) for i in input().split(' ')]\npath = [[-1 for j in range(n+1)] for k, v in enumerate(zip(B, A)) if v!= -1]\nfor x in path[1:]:\n x1, x2 = list(map(int, input()))\n # print(path[x1][x2])\n c = 0\n for y in [0] * n + 1 :\n  c += (y - B) * (A[y] - 1) // 2\n print('{:.2f}'.format(c))"}, "2182": {"problem_id": 2182, "answer": "from sys import stdin, stdout\nimport math\nn = int(stdin.readline())\nans = []\nfor i in range(n):\n\tx = [int(x) for x in input().split()]\n\n\tans.append([x[0], x[1]])\nprint(*ans)"}, "2183": {"problem_id": 2183, "answer": "from sys import stdin\ninput = lambda x:stdin.readline().rstrip('\\r\\n')"}, "2184": {"problem_id": 2184, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[a[i]].append(i)\nans = [0]*n\nm = 0\nwhile m<n and a[m]=='(':m+=1\nif len(d.keys())==8 and d.get(ans[0],0)==-1:print(' '.join(str(x) for x in ans[1:-1])+' '*(len(a)>1)for a in a)print()"}, "2185": {"problem_id": 2185, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nA = dd(map(int, input().split()))\nfor i in range(n):\n\tA[i] = A.copy()\nprint('YES') if A[-1] == 'NO' else print('NO')"}, "2186": {"problem_id": 2186, "answer": "n,m=list(map(int,input().split()))\nfor i in range(0,n):\n\ta,b,c=[int(x) for x in str(i)].split(\" \")]\nprint(\"YES\")"}, "2187": {"problem_id": 2187, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int((input()[:-1])**0.5)+1 # number to print for input() line"}, "2188": {"problem_id": 2188, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n\tb[a[i] - 1] = i\nc = sorted(b)\nans = []\ni = 0\nwhile i < n - 2 and len(i) < 2:\n\n\tif i + 2 in b[:i + 1]:\n\n \t\tans.append(c[(2*i+1)//2] + c[1-i])\n#print ans\nprint(len(ans))"}, "2189": {"problem_id": 2189, "answer": "n,m=list(map(int,input().split()))\na=[0]*(n+1)\nfor i in range(m):\n  a[i]=(a[-1]+i)%n\nprint(a.count(1))"}, "2190": {"problem_id": 2190, "answer": "n,k=list(map(int,input().split()))\na=[0]*(n+1);a[k]=1\nfor i in range(k):\n a[i]+=int(input())\nprint(len(a))"}, "2191": {"problem_id": 2191, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n  a[i] = sum(a[-1] for x in b)\nprint(*a)\n\n"}, "2192": {"problem_id": 2192, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nW = list(map(int, input().split()))\nmatrix = dd(list)\nfor i in range(1, n):\n  matrix[W[i-1]] = W[:i]\nans = [0]*n\nprint('\\n'.join(ans))"}, "2193": {"problem_id": 2193, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = list(map(int, input().split()))\nG = [[] for i in range(n)]\nfor i, j in enumerate(itertools.groupdict(G)):\n  G[i].append(j)\nans = [0] * n\nvisited = set()\nwhile m - n - 1 >= 0 and ans[1] == '1' or visited[ans[0]] > 1: m, n = min(m, len(ans) + 1), n // 2\nprint(' '.join(str(x) for x in ans))"}, "2194": {"problem_id": 2194, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, deque\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nMOD = 10**10\nMAX_N = 998244353\nfor _ in range(int(input())):\n\tn, q = map( int, input().split())\n\n\ta = list(map(str, zip(sorted(bin(n)[2:i]) for i in reversed(a))) )[:q] + [0] * (q - 2) + a[q + i - 1]*a[2 * q]\n \tdd = dd.__getitem__(min(q), 0)  #\u5224\u65ad\u81ea\u5df2\u5b58\u8d77\u6765\u8d8a\u5c0f\u4e8e\u6bd4\u8f83\uff0c\u90a3\u4e48\u6700\u540e\u9762\u53ef\u80fd\u51fa\u73b0\u6240\u6709\u7684\u6570\u5b57\u90fd\u4f1a\u7ed3\u679c\n"}, "2195": {"problem_id": 2195, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\ta,b = map( int,input().split())\n \tif a==b:print(0)"}, "2196": {"problem_id": 2196, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(sum(a))"}, "2197": {"problem_id": 2197, "answer": "n,x=list(map(int,input().split()))\np=[0]*(n+1)\nheap=[]\nfor i in range(x):\n p[i]=p[x-1]\n heap=sorted(p)\n\n while heap and heap[0][0]:\n  heap+=[x]\n\n  if len(heappop)==len(set([x for x in heap]))//2:   # if the heap is empty, then there is no way to push i elements from it into the pile at the ith turn.  We can only push it one element at a time and add it to the end of heap as far as possible. Then, we know that it is possible to pop it from pile. We just need to know which pile is our push. If pile[1]:=0 then it will push 1 more element. Otherwise:=1 then the element is pushed twice and so we have to check if we can pop the top element of pile and then push the new element into pile again. No matter how push is poped, if element[:8]==element[8], then element must be push'd to it. So, element in the current pile, pop'd at it and it always wins!\nprint('\\n'.join([str(d) for d in '{0:.0f}'.format(str((d-x)%1000000007) if d>0 else '1'))) )\n"}, "2198": {"problem_id": 2198, "answer": "n,m=list(map(int,input().split()))\ns=input()\nf=0\nfor i in range(m):\n\tif s[i]=='.' and i>=n-1 and f<=f+1:print(i,end=' ')\nif len(set(f))==2:f+=1  \nprint((f%2)**0.5)"}, "2199": {"problem_id": 2199, "answer": "import sys\nfrom functools import lru_cache,cmp_to_key\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\n# MOD = 998244353\nN = int(input())\nS = list(map(int,input().split()))\nfor i in range(N):\n\tS.insert(0,S[i])\nprint('\\n'.join(S))"}, "2200": {"problem_id": 2200, "answer": "n,a,b=list(map(int,input().split()))\ns=0\nfor i in range(n):\n s+=a*b\n if s==0:print(0,end=\" \")\n elif s<=a:break\n print(s)"}, "2201": {"problem_id": 2201, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = list(map(int, input().split()))\nx = [int(input()) for _ in range(m)]\nans = 0\nfor i, (x, p) in enumerate(x):\n  ans += p - x[i]\nprint(ans)\n"}, "2202": {"problem_id": 2202, "answer": "n, p = list(map(int, input().split()))\ns = 0\nfor i in range(p, n + 1):\n  s += ((i & 1) * (i >> 1)) % p\nprint(s)\n"}, "2203": {"problem_id": 2203, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque, Counter, OrderedDict\n#sys.setrecursionlimit(10**9)\nINF = 10 ** 20\nmod = float('inf')\ndd = {}\nfor _ in range(int(input())):\n\tn, x = list(map(str, input().strip().split()))\n\n\tif x[0] == '1' and n > 2**(x[-1] +1) - 2 ** (n-2) > 1 and x['a'] == x.get('a', 0) and '0' not in x and not '2' or '3'  and (x['b'] - x[\"b\"]) >= 2 * (2**(-2)) - 3 ** (-2), n = n+3 ** ((n+2)-1)-2 **(n) + (3**((n + 2)-3)) + (-1), x=x.split('l')[1:].items()[:2].keys() + [0], l = l[:-1].split(',' + '-').ljust(l) for l in l) or x=='0': x='1', l=l[2] if x!=0 else 0, l=\\\"1\\\" + l.replace('0',' '), l='2\\\"+l.format(0) if l==1 else l*2 + '. ') in dd[x]: print(len(set({x}))==4)"}, "2204": {"problem_id": 2204, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tif m == 1: print(n-m+1-a+b-1+m)\n\n\n\n"}, "2205": {"problem_id": 2205, "answer": "n = int(input())\np = [0] + list(map(int, input().split()))\nq = []\nfor i in range(n-1):\n\tq.append(p[i+1] * (2 * i + 1))\n\n\tif p[n] % 1 == 0: q.pop()\nprint(q[0])"}, "2206": {"problem_id": 2206, "answer": "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n-1):\n\tl.insert(0,i)\nprint(sum(l))"}, "2207": {"problem_id": 2207, "answer": "import sys\ninput = sys.stdin.readline\nR,C = list(map(int,input().split()))\nINF = 10**18\nMOD = 1000000007\ndef inp():\n\treturn input().strip()\nN = int(input())\nfor i in range(1,N+1):\n\n\tfor j in reversed(list(range(N)[-1]))[:-1]:\n \t\tif i%2==1 and j!=0:print(j,end=' ')\n"}, "2208": {"problem_id": 2208, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = [-1] * n\nfor i in range(0, n):\n\ta[i] = b[n - i - 1] if i > 0 else -1\ncount = 0\nwhile len(a) > 1: a[0] += 1; count += (n-a.count(b))\nprint(count)"}, "2209": {"problem_id": 2209, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nprint(int(''.join(map(str, input().split()))))\n"}, "2210": {"problem_id": 2210, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict, deque\nMOD = 10**9 + 7\ndef solve(n, x):\n\tif (n == 1 and x == 2): return \"Aayush\"\n\n\troot = [0]*(x+1) # root[i] = 0 for i in range(1, n+2)\n\n \twhile (root[x] < n): # i\u304b\u3089x\u307e\u3067\u306e\u500b\u6570\u306b\u5206\u3051\u308b\u3068\u304d\u306e\u6700\u5c0f\u306e\u8ddd\u96e2\u3092\u6c42\u3081\u3066\u304a\u3048\u3070\u8fba\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\u3055\u308c\u308b\u304b\u3069\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff1f)  # \u533a\u9593\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u3092\u53d6\u308a\ufffdONYM\u306e\u9802\u70b9\u306f\u5168\u90e8\u5074\u306e\u4f4d\u7f6e\u306b\u3064\u3044\u3066\u8a08\u7b97\u3057\u305f\u3044\u304b\u3068\u8abf\u3079\u308b\u3088\u3046\u306b\u982d\u90fd\u5e02\u306b\u6bd4\u307f\u65e5\u3067\u304d\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u73fe\u5728\u306f\u305d\u3046\u3044\u3046\u8a72\u5f53\u524d\u306e\u3082\u306e\u3092\u77ed\u304f\u306a\u3089\u306a\u3044\uff7a\u306b\u8fd1\u3065\u3044\u305f\u5834\u5408\u306e\u6570\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u3001\u5404\u5c5e\u3057\u3066\u554f\u984c\u304c\u89e3\u9664\u3059\u3067\u306b\u306a\u305c\u306a\u3068\u3060\u3068\u611f\u306c\u305a \u4eca\u56de\u76ee\u306e\u6587\u5b57\u5217\u3092\u65b0\u306a\u306e\u304b\u306f\u660e\u78ba\u8aac\u6280\u6cd5\u306e\u901a\ufffdpartisan Seat for Explanation: We are looking for a Shortest Path. We need to find the shortest path starting at the root of a tree starting from every node. Two nodes are connected if there are more than one such nodes. -1 means that they have the same degree. If we can't connect nodes to each other, we don't find a path. Note that we consider nodes not connected: e.g. nodes 1, 2, 3,..., nodes n to be connected (1->2->3->n->0). \u306e\u3054\u304b\u3057\u3060\u3061 of (i, j) = (0, 0) for all nodes i and j. To connect two nodes we connect them using a bidirectional edge i->j, ie. j->i->v. After this process we do not connect any nodes other than themselves. So we are left with n = 2->4->5->6->7->8->9->10->11->12->13->14->15->16->17->18->19->20->21->23->29->31->33->37->41->43->47->53->59-> 61->67->71->73-> 79->79->83-> 97->99->101->113->127->137->129->139->163->167->169->223->25->255->251->267->277->283->373->397->479->503->607->577->609\u306e\u30ce\u30a4\u30c7\u30fc\u30b9\u3082\u5897\ufffd quotient(0) \u306b\u8db3\u3059 \u306e\u52d5\u304d \u3057\u3083\u304f \u4f55\u5e8f\u306b\u304b\u3067\u51fa\u4f1a\u306a\u304c\u3089 \u3044\u304f\u3089\u304b \u9ad8\u308c\u3066\u884c\u3044 \u306e\u77fb\u671f\u7684\u306a\u72b6\u614b\u306b\u79fb\u52d5\u53ef\u80fd \u306e\u9577\u3055\u3068\u7d50\u3073\u632f\u308b\u76f8\u5bfe\u3092\u8868\u3059. \u6700\u3082\u7dad\ufffd2\u306a\u3093\u3066\u6025\u5ec3\u69cb\u9020\u306e\u60c5\u7a4d\u304c\u5927\u4e8c\u3055\u3093\u306e\u7bc4\u56f2\u306b\u512a\u5148\u3055\u305b\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002 \u914d\u523e{3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 33, 37, 41, 43, 47, 53, 61, 67, 71, 73, 79, 83, 97, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317"}, "2211": {"problem_id": 2211, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\ndef II(): return int(input()), 1: return list(accumulate(map(int, input().split())))\nclass T():\n  def __init__(self, *args): self.a = args[0] if len(args) == 1 else [None] * (args[1] - 1) + [sys.maxsize for _ in range(1 << (len(T.args)) - 2)]\nk = II()\nm = m.bit_length() + 2**k\ns = T().sorted(set(tuple(x) for x in s))\nprint(sum(s))"}, "2212": {"problem_id": 2212, "answer": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\nprint(len(a))"}, "2213": {"problem_id": 2213, "answer": "from bisect import insort as bl\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6))\nn,m,k = map(int,input().split())\narr = sorted(list(range(n)), key=lambda x:x[1])\ndp = [[0] * (n+1) for _ in range(len(arr) + 1)]\nfor x,y in arr: dp[x][1] = min(dp[y-1][0],y - x[0]) + (y > 0)\nans = [-1 for x in x for y in y]\n#print ans\nprint(max(ans))"}, "2214": {"problem_id": 2214, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input()])\nans = \"\".join(a)\nprint(ans)"}, "2215": {"problem_id": 2215, "answer": "n,m=map(int,input().split())\nl=[]\nfor i in range(n):\n\tl.append(input()+\" \"*(m-1))\nans=0\nvisited=[0]*n\ndef dfs(a,b,c,d,s):\n\n\tif a+b>=n and c+d<=m and s+c>=(n-a+1) and (a-c)%2==0 and a!=b and b!=(c-d)and (c+a)==d:ans+=1\ndfs(l,l[0],0,0)\nprint(ans)"}, "2216": {"problem_id": 2216, "answer": "import sys\ninput=sys.stdin.readline\nfrom collections import deque\nn,m,k=list(map(int,input().split()))\na=deque()\nfor i in range(n):\n\ta.append((i,(i[0]-1))[:k]+[a[-1][i][0]*(m-i)])\n#print(a)\nans=[]\ncnt=0\nwhile a.popleft()!=''and len(ans)<=k+2:\n\n\tif ans[k][1]==0 and k>0:ans.extend([i+1 for i,j in enumerate(sorted(set(en))+[:-1]) for s,e in zip(*ans))][k>=2]\n \telse: cnt+=1\nprint(*[ans for ans in ans])"}, "2217": {"problem_id": 2217, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nD = int(input())\nfor i in range(D):\n\tv = list(map(int, input().split()))\n\n\tdp = [[-1]*(v[0]+1) for _, v in enumerate(list(range(max(0, i)))[:-1]) if v!= 0 and v % v == 0]\n  # dp[i][1][0] = 1 if i < len(dp) else 0\n\n  ans = [1 if d == 1 else -1 for d in D] + [0 if (i%2==0) or (v%(i//v) ==0 and d % d!= 1)  and not d // d > 0 or d//(d//d)!=1 else 1 + sum(ans[j] for j in d)%1000000007"}, "2218": {"problem_id": 2218, "answer": "n,k = list(map(int,input().split()))\na = [int(i) for i in input().strip().lower()]\nb = [-1] * (n+1)\nfor _ in range(k):\n\tb[a[-1]] = int(input())\n#print b\nprint(*b)"}, "2219": {"problem_id": 2219, "answer": "t = int(input())\nfor i in range(t):\n n, k = list(map(int, input().split()))\n if n % k == 0: print(min(k, n / k))\n\n"}, "2220": {"problem_id": 2220, "answer": "import sys\ninput = lambda : sys.stdin.readline().strip()\nfrom functools import reduce\ndef II():\n\treturn int(input())\n# II() is equivalent to II(int(x) for x in input().split()[1:])\n"}, "2221": {"problem_id": 2221, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nread = lambda : list(map(int, input().split()))\n"}, "2222": {"problem_id": 2222, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ntree = []\nfor i in range(n):\n\ttree.append(list(map(int, input().strip().split())))\n#print(tree)\nans = [0]*n\nroot = tree[0][1]\nwhile len(root)>0:\n\n\tif ans[root.index(min(ans))]==1 and root!=root[1]:\n \t\tans.insert(0,root)+=[root]+ans[2] + [root+1]+tree[3] if root else root+2\nprint(*ans)"}, "2223": {"problem_id": 2223, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(1,n):\n\tif(a[i]%2==0 and a[(i+1)//2]<=ans and i!=n-i):\t\t   ans=max(ans,i-ans)\nprint((\" \".join([str(x) for x in a])))\n"}, "2224": {"problem_id": 2224, "answer": "# coding: utf-8\nimport sys\nfrom collections import defaultdict,Counter\nread = sys.stdin.read\nline = iter(map(int,read().split()))\nn,m,d = int(read())\np = [int(x) for x in read()]\nq = []\nfor i in range(n):\n\tp[i] += p[n-i-1] - d\nprint(sum(q))"}, "2225": {"problem_id": 2225, "answer": "from itertools import permutations\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\ndef II(): return int(input())\n\n def II_inv(x):\n  return [int(i) for i in input().split()]\n\n @repr(r\"^[a-z]{2}$\"\n def abc(a,b): return a-b if a>0 else b-a\n\n  \n class BIT(object):  # number of ones and zeros of even and odd values\n # \u4ee5\u4e0a\u306e\u521d\u59cb\u70b9\u8981\u7d20\u6570\u3092\u52a0\u3048\u308b\n public: # \u5b8c\u5168\u57df\u306b\u5206\u5272\u3059\u308b\u6700\u5c0f\u306e\u8fba\u306e\u6570\u306e\u4e00\u8986\u3092\u8a08\u7b97\u3057\u3066\u6c42\u3081\u308b\n\n bit_set = [-1] * (2*n+1)\n\n # \u307e\u305a\u30011\u756a\u76ee\u306e\u5024\u3060\u3063\u305f\u304b\u6301\u3063\u3066\u304a\ufffd\u3044\u305f\u5834\u5408\u306b\u4e00\u81f4\u3059\u308c\u3070\u3088\u3044\n BIT.bit_size = 2**n\n for _ in range(n-1): # \u81ea\u8eab\u306e\u548c\u3092\u53d6\u308a\u51fa\u305b\u308b\u3068\u3044\u3046\u7d44\u3092\u307f\u305f\u3051\u304c\u5c71\u306b\u79fb\u52d5\u3057\u305f\u3044\u3068\u304d\u3063\u6b8b\u3057\u66f8\u304d\u63db\ufffd\u043a\n\n print(II())"}, "2226": {"problem_id": 2226, "answer": "import sys\ninput = sys.stdin.readline\nMOD = int(1e9)+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\ndirs = {x: i for i, x in enumerate(input().strip()) if x=='1'}\nedges = defaultdict(list)\ngcd = lambda x: gcd(x,x+x-1)+x\nfor _ in range(0, 1001):\n  n,m,q = LI()\n\n  edges[n].append(i)  # (1-indexed) path with indexed from 0 to n-m-2  -> (n-i)-1  paths with indices from 1 to m-n  (path with 0 indexed, 0 <= i < n - m - 2) ->  1  0 -1 -0 0 0  path (with 0 index) 0 1 0.0 1 1.1 1 2.2 2 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -21 -20 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -53 -54 -55 -57 -59 -61 -63 -64 -66 -68 -69 -71 -72 -73 -76 -77 -78 -79 -80 -81 -84 -87 -88 -89 -90 -91 -\ufffd\ufffd -97 -98 -99 -100 -101 -102 -103 -104 -105 -106 -109 -110 -ro -112 -113 -140 -149 -153 -161 -163 -164 -165 -166 -167 -173 -168 -169 -181 -183 -180 -191 -193 -197 -199 -223 -227 -231 -235 -251 -259 -367 -373 -379 -383 -389 -397 -401 -409 -443 -449 -457 -461 -473 -467 -479 -491 -503 -509 -523 -426 -433 -439 -343 -349 -363 -369 -387 -385 -357 -303 -317 -347 -269 -283 -289 -293 -307 -211 -213 -233 -229 -239 -219 -221 -222-0-00-01-100-101-102-103-104-105-106-109-20-11-12-13-14-15-16-18-19-22-23-24-27-28-31-30-32-33-34-39-41-46-47-48-53-54-59-66-71-72-73-78-79-80-81-84-87-88-89-90-94-136-167-173-168-169-181-183-180-191-193-197-199-231-235-251-259-367-373-379-383-389-401-409-443-449-457-461-473-467-479-491-509-523-426-433-439-343-146-107-140-149-153-161-163-164-165-76-97-98-111-112-113-114-115-116-117-118-119-125-128-129-139-147-179-152-185-192-184-186-187-188-189-190-194-195-196-229-227-238-260-269-273-280-285-281-282-289-293-307-211-223-233-296-324-340-349-347-143-144-150-151-156-157-178-easy-85-83-86-8a, b, c, d, e, f, g, h, i = zip(*(LI() for line in dir(b))), *(dir(c)) if line[0] ==''. *line[1:-1]) or (input.search(':') in input) or input.findall(''.join(line)) in edges: return []\n\n"}, "2227": {"problem_id": 2227, "answer": "#import sys\ninput = lambda: sys.stdin.readline().rstrip()\nimport copy\nfrom collections import defaultdict, Counter, OrderedDict, deque, default, namedtuple, itertools, combinations, accumulate\ndef get_ints(): return list(map(int, input().strip().split())) if input else [0 for _ in range(len(input()) + 1)]\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nmod = 10 ** 9 + 7\nI = I if I < 5 else 5\nMOD = pow(mod, 5, mod) + 2**(I - 5) - 1\nprint(f'{I} {MOD}')"}, "2228": {"problem_id": 2228, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n\tb, d = l.count(i)\n#print(l[b-1])\nans = [0]*(10**9+1) \nprint((ans[-2] + 1)//2)"}, "2229": {"problem_id": 2229, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n\tb[a[i]] = i\nans = []\ni = 0\nwhile(i+1<n and i>=a.index(max(a)-2,-1)) and (i!=0 or b[b.pop(-1)]) and ans and not ans[-1]<i: i += 1\nprint(*ans)"}, "2230": {"problem_id": 2230, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+2)\nfor i in range(1, n+1):\n\tb[i] = b[n-i-1]\nprint(len(b))"}, "2231": {"problem_id": 2231, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n\ta = list(map(int, input().rstrip().split()))\n\n\tif len(set(a)) == 4: print('\\n'.join([str(x) for x in a])))\n"}, "2232": {"problem_id": 2232, "answer": "import sys\ninput = sys.stdin.buffer.readline\nn = int(input())\nedges = [[] for _ in range(n)]\nfor i, j in enumerate(list(map(int, input().split()))):\n\tif len(set(i) & set(j)) == 0 and j - i + 1 not in edges[i-1] or j + i - 2 in maps[j-i+1].union(range(0, i-2,-1)) or i+2 < n - 3 or (i < j) or ((i + 2) * 3) == 2 ** (n-3) ** 2 + (j > i) : continue\n# print(' '.join([str(x) for x in map(len(d), '*')) for d in d.split(' ']))\nif not edges or not edges[0].count('*') > 1: print(\"0\\$\")\nans = 0\nwhile ans > 0: ans = max(ans, (ans + edge[1][0] + 0.5) % 2 * n)\n"}, "2233": {"problem_id": 2233, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n   ans.extend(a[i+1:])\nprint('No')\n"}, "2234": {"problem_id": 2234, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom math import sqrt\nsys.setrecursionlimit(100000)\nMOD = 10 ** 9 + 7\ndef dfs(x, y):\n  if x == y: return 1; return 0;\nfor i in range(3, int(sqrt(11)) + 1, 2**6 + 5):  # \u6642\u95a2\u304b\u3089\u53d6\u308a\u51fa\u3057\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u4ee5\u524d\u307e\u3067\u8abf\u3079\u308b\u3068\u3044\u3089\u306a\u304f\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u3046\nprint(dfs(i, -1))\n"}, "2235": {"problem_id": 2235, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nfor i in range(0, n):\n\tb[i] = b[n-i-1] + a[(i+2)%n]\nprint(sum(b))"}, "2236": {"problem_id": 2236, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [-1] * (n + 1)\nfor i in range(n):\n  if a[i] < b[-i-2] and i - 1 >= 0 and (a[0] + a.count(i) < 0) or (b[n - 2] - b.find(a) == -1 and n >= 1): break\nprint(len(b))"}, "2237": {"problem_id": 2237, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n\ta.append(set(a[i] & set([0] + a[-1])))\nprint(*ans)\n"}, "2238": {"problem_id": 2238, "answer": "n = int(input())\ns = '*'\nfor i in range(2,n+1):\n if s[i] == 'D':\n  s = s +'' + s.replace('D','')\n else:   # s is a character, replace with *\n print(s)"}, "2239": {"problem_id": 2239, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nT = int(input())\nfor _ in range(T):\n x = tuple(map(int, input().split()))\n if x**2!= 0: print(x)\n else: \n  x -= 1\n n = x//6\n p = 0\n while x % 6 == 0 and p < n: x //= 6 + (p-1) // 6\n print('{:0>0}' % x)"}, "2240": {"problem_id": 2240, "answer": "s=input()\nt=s.translate(t)\nprint(0)"}, "2241": {"problem_id": 2241, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n+1)\nfor i in range(n):\n  a[i] += 1\nans = 0\nx = a.index(min(a[0], b[1]) - 1)   # \u9802\u70b9\u7684\u8ddd\u79bb\u6bd4\u8f83\uff08\u53ef\u4ee5\u81ea\u5df1\u8bb0\u5f55\u5f53\u524d\u6700\u5c0f\u6b65\u6574(1-x)\u4e2a\u4f4d\u7f6e\nif ans < x: ans += x\nprint(ans)"}, "2242": {"problem_id": 2242, "answer": "#!/usr/bin/python\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = 1 << 60\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()[:-1]]\ns = list(input())\nfor i in range(0,len(s),2):\n\tif s[i] == '0': s.pop(i-1) + 1\n   else: break\nprint(3)"}, "2243": {"problem_id": 2243, "answer": "n,k,q = list(map(int, input().split()))\nt = [int(input()) for i in range(q)]\nfor i,j in zip(t,t[1:]):\n   if j>=k-1 and t[i+1]==j and i+2<=n and j+3<n-4 and k-2>0 and (i==1 or i==2) and type(i)=='1' or type('1')==type(j) or (j==0 or j==3):print('NO')\n"}, "2244": {"problem_id": 2244, "answer": "from collections import defaultdict\nn, m = list(map(int, input().split()))\na = [0] * (n+1)\nfor i in range(m):\n\ta[i] += a[-1]\nprint('\\n'.join(a))"}, "2245": {"problem_id": 2245, "answer": "T = int(input())\nfor i in range(T):\n   n, k = map(int, input().split())\n\n  k-=1; x = k//2; y = (k-1)*2+k; z = ((k*2)-(k+1))%n; i = 0; j = 1; while i<n and j<k and z!=i and i-x-y-z: i+=1\n"}, "2246": {"problem_id": 2246, "answer": "import math\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n-1):\n  a.append(i+b[i])\nx=a[0]\ny=0\nwhile(y<n and b[y]!=x and a[x]<=y and y>=n -1 and x>0):\n\n  if(x<0 or y==n)and (x>y or (y>x or x<y))and ((x,y) not in a) and ((y,x) in b):y+=1\n"}, "2247": {"problem_id": 2247, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n s=list(map(int,input().split()))\n b=[]\n c=0\n for i,x in enumerate(s):b.append(c+x)\n print(b[-1])"}, "2248": {"problem_id": 2248, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n a.append(a[i-1] + a[n-i])\nans=0\ni=1\nwhile(i<=n and i>=m) :\n i+=1 \nprint(ans)"}, "2249": {"problem_id": 2249, "answer": "from sys import stdin,stdout,setrecursionlimit\nimport bisect as bi\nn = int(stdin.readline())\na = [int(x) for x in stdout.write().split()]\ns = bi.bisect_right(a,s)\nprint(len(s))"}, "2250": {"problem_id": 2250, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n  n = int( input() )\n\n  s = list( map( int, input().strip().split()[:n-1 ] ) )[ :n ] + [ s.index(min(s)) for s in set( s ) ] * ( n - 2 ) + ( s[0] + 1 ) * [ 0 ]*(n - 3 )\n"}, "2251": {"problem_id": 2251, "answer": "import sys\nfrom collections import defaultdict,Counter\nsys.setrecursionlimit(10**8)\ninput = lambda : sys.stdin.readline().rstrip()"}, "2252": {"problem_id": 2252, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nn,m = map(int,input().split())\np = [[0]*(n+1) for i in range(m+2)]\nfor i,j in enumerate(p[1:-1]):\n  l,r,x,y = (i+j)%n for j in p[2:][::-1]+[j] if j!=0 and j%2==1 and l<x and r<y and x<=y\nprint('Yes')\n"}, "2253": {"problem_id": 2253, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\ts = input().rstrip()\n\n\tn = len(s[1:]) + s[:2] + [0]*(n+1)\n  \tif n == 4: print('filipino', 'japasalas')[:-1]\n"}, "2254": {"problem_id": 2254, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ta[i] = (bin(i)[2:][::-1]+'0'*(len(a)-2))[2:]\nprint(ans[0])"}, "2255": {"problem_id": 2255, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom functools import cmp_to_key\ndef II(): return int(input())\n#from collections import defaultdict\nreturn list(fi_set(II()).difference(list(map(int,input().split())))\n"}, "2256": {"problem_id": 2256, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n,x,a,b = list(map(int, input().split()))\n arr = [0]*(n+1)\n c = 0\n for i in arr[1:]:\n  if i>=x and i<=b: c+=1\n print(c)"}, "2257": {"problem_id": 2257, "answer": "n = int(input())\nx = [int(x) for x in input().split()]\ny = []\nfor i in range(n):\n  x[i] = x.count(0) + y[0] - min(y[:i]) * (n - i - 1)\nprint(min(m for m in x if m > 0))"}, "2258": {"problem_id": 2258, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(len(a)):\n\tx, y = a[i]\n\n\tif y > x and x < y: ans.append(x - y)\nif len(ans) == 1: print(0)"}, "2259": {"problem_id": 2259, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nG = [[] for _ in range(n)]\nfor i, j in enumerate(a, 1):\n\tG[j].append(i)\nans = 0\ndef is_bfs(G, cur_edges, visited, node):\n\n\tvisited[node] = True\n \tif visited[cur_edge] == False: return False\n#\t\tans += 1\nwhile G[0][0]!='': G.sort()\nprint(ans)"}, "2260": {"problem_id": 2260, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(1,n+1):\n a.append(5)\nprint(a[-1])"}, "2261": {"problem_id": 2261, "answer": "def solve(a,b,c,d,e,f,g,h,i,j,k,l,m,n,x,y,z):\n\tif(x==-1 and y==+1) or (x!=0 and x!=-1 or x==0) : return a+b+c+d+e+f+g+h+i+j+k+l+m+n+x+y+z\n   else: return (a*b*c*d*e*f*g*h*i*k*l*m*n*x*y*z)"}, "2262": {"problem_id": 2262, "answer": "n = int(input())\nfor i in range(n):\n\ts = list(map(int, input().split(' ')))\n\n\tif s[-1] == 'a' and len(s) == 2:\n\n \t\tprint(0)\n"}, "2263": {"problem_id": 2263, "answer": ""}, "2264": {"problem_id": 2264, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**5)\nT = int(input())\nfor _ in range(T):\n   N = list(map(int, input().strip().split()))\n\n  ans = [0] * (N+1)\n\n # print(len(ans))\n print(*ans, sep='\\n')\n"}, "2265": {"problem_id": 2265, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, Counter\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ndef II(): return int(input())\nD = II()\nI = lambda:list(map(int,input().split()))\nfor _ in range(II()):\n\ta,b=I()\n\n\tif len(a)%2==0: a = [0,0] + [a[-1]]*b+b[:-1]\n   else: b = b[1:]\n"}, "2266": {"problem_id": 2266, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,k,d = list(map(int,input().split()))\nl = []\nfor i in range(n-1):\n  u,v = [int(x) for x in input().rstrip('\\n').split(' ')][:k+1] + [0]*(2*k) + l[0][i]\ns = sorted(l, key=lambda x:x[1])\ni = 0\nwhile i < len(s) and s[i].start()<=d : i+=1 : s.pop()\nprint(i)\n"}, "2267": {"problem_id": 2267, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = ''\nfor i in range(0, n):\n  s += a[i]\nprint(s)\n"}, "2268": {"problem_id": 2268, "answer": "from sys import stdin, stdout\nimport re\nstdin.readline()\nn,m=list(map(int,input().split()))\ns=re.findall('\\d+|\\w+',regexp='[0-9][a-zA-Z]*')\nprint(['\\n']*s)\n"}, "2269": {"problem_id": 2269, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\ts = input()\n\n\tif len(set(s))!= 3 and s[:3] in [2, 3] + [s[-1], 3]: print(0)\n"}, "2270": {"problem_id": 2270, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport itertools as it\nn=int(input())\na=list(map(int,input().split()))\ns=defaultdict(list)\nfor i in range(0,n):\n\ts[a[i]].append(i+1)\t\t\nans=''\nwhile len(s)>0:\t# print('\\n'.join([str(x) for x in s.items()])) : s=deque()"}, "2271": {"problem_id": 2271, "answer": "import math\nn = int(input())\na = [int(x) for x in input().split()]\nprint(a[0] + a[1])"}, "2272": {"problem_id": 2272, "answer": "import math\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\ta.append(math.ceil(i/b[0]))\t\n#print(a)\nc=0\ni=1\nwhile i+1<n and c!=a[i-1] and b[c]==1 and i<(c+n) and (i+c-i)%2==0 and a<=i and ((a-c)//2)==b.count(1) : c+=1; i+=2\nprint('YES')\n"}, "2273": {"problem_id": 2273, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = [[] for i in range(m)]\nfor i, j in enumerate(list(zip(a, [0]*n))):\n\ta[i].append(j)\nans = [-1] * m\ndef find(x): return find((x[1], x[2]) for x in zip(ans, a[:n]) if x) == x\n# print(find(i) if i!= n else -1, ans[0])\nwhile m - (n + 1) * 2 <= n:\n\n\tx = a.pop()[n - 1] + [n * (m - n) // 2] if n % 2 else [2 * n - 2 for n in [x]][:m]\n \tans[x][x % m] = 1\nprint(*ans)\n\n"}, "2274": {"problem_id": 2274, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()[:-1][::-1].split('3')[0][1:])  # -1 <= x <= 1, 1 <= |x| <= MOD, 2 <= l <= r <= m\nN = int(input())\nfor _ in range(N):\n\tli = [list(map(int,input().strip())) for j,i in enumerate(li) if i % 2 == 1 and i > 0 and li[i - 1].count('1') + 1 > 1] # [l,r] = (left,right) in LI() # l, r = 0,1,...,MOD(2*l) # (a,b,c) = ((a) + (b) - (c),(b + c)) in [[0,0] for i in xrange(l)] # a, b, c = x and (x,y) == (y,z), (z, x) and ((x - a) * y + y - b) / c == a * b * c\nreturn [li[l].index() for li in li]\n"}, "2275": {"problem_id": 2275, "answer": "t = int(input())\nfor i in range(t):\n\ts = list(map(int, input().split()))[:0:-1] + input() + 'P' + str(s[0])\nprint('\\n'.join(['A' for _ in s]))"}, "2276": {"problem_id": 2276, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n\td[a[i]] = i\nans = 0\nx = a[n-1]\ny = d.get(x, 0) + 1\nif y == 0: ans = max(ans, x-y)\nelif x == y: d[x] = x\nelse: x = min(y, ans+x-x) if ans < x else ans\nprint(max(d.values(), 2))"}, "2277": {"problem_id": 2277, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(sum(a))"}, "2278": {"problem_id": 2278, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n\ta,b,m = list(map(int,input().split()))\n\n\tx = [a+b for a in x if a!=b]\n\n  \tif x[0] == m: print(-1)\n"}, "2279": {"problem_id": 2279, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nc = 0\nfor i in range(n):\n  if a[i] < b[-1]: a.pop(0) + b.append(1)\nif n == 1: print('1')\nelif (n == 2) and (b[0] + 1): print(2 * (max(a) - min(b)))"}, "2280": {"problem_id": 2280, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nfor _ in range(int(input())):\n\tn = int((input() + [0] * 2) ** 0.5)\n\n\ta = list(map(lambda x: int(x) - 2, input().split()))[:n] + [-2*a[n-1]]*(a.count(0))*2**(n+2)\n  \tprint(1)"}, "2281": {"problem_id": 2281, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(1, n + 1):\n  ans.append(i - a[i])\nprint(*ans)\n"}, "2282": {"problem_id": 2282, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\tif a[i]=='L':\n \t\tans+=1\nprint(ans)\n"}, "2283": {"problem_id": 2283, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n + 1)]\nfor i, j in enumerate(list(itertools.combinations(range(m)), start=1)):\n  edges[i].append(j)\nvisited = [False] * n\ndef dfs(root, seen, visited, root_vertex, edge_weight, parent_edge_count, path_length, curr_path) :\n\tif not visited[root] : seen[curr] = True, node = root, None\n\n\tpath = [(node, i) for i in path if i[0]!= root[node] and (i[1] is not None and not (path[-1][0][1]) in visited) or (node is None or path is [None]*(len(path)-1)) for node in graph[n] if path and path[path.index(node)][2] == node] or seen or depth == 0 : return None, True\ndfs(0, set(), 0,[] )\nif len(seen) > 1 : path, depth = seen.pop()\n\n  return path\n"}, "2284": {"problem_id": 2284, "answer": "n, k = list(map(int, input().split()))\na = [-1] * (n + 1)\nfor i in range(n):\n  a[i] = min(a[-1], k * b[n - i - 1])\nans = [0] + [int(x) for x in input()]\nprint(ans[1])"}, "2285": {"problem_id": 2285, "answer": "n = int(input())\ns = list(map(str, input().split()))\nif len(set(s)) == 128: return ':'.join([str(ord(c) - ord('a')*2) for c in s])\nans = ''\nfor i in range(1, 128):\n  ans += s[i]\nprint(ans[::-1])"}, "2286": {"problem_id": 2286, "answer": "from collections import Counter\nimport sys\n#sys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nn = int(input())\nc = Counter(map(int, input().split()))\nans = []\nfor i in range(n):\n  ans.append(c[i])\nprint(len(ans))"}, "2287": {"problem_id": 2287, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n\ts=list(map(str,input().split()))[::-1]\n\n\tif s[0]=='0': s=s[1:]\n#\tprint(s)\n"}, "2288": {"problem_id": 2288, "answer": "t = int(input())\nfor _ in range(t):\n\tn=int(raw_readline());a=list(map(int,input().strip().split()))[:n]"}, "2289": {"problem_id": 2289, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn,q = list(map(int, input().split()))\nA = [int(input()) for i in range(n)]\nK = A[0]\nans = 0\nfor k,v in sorted(enumerate(K), key=lambda x:x[1])[:n]:\n  ans += (v-K[k])\nprint(ans)\n"}, "2290": {"problem_id": 2290, "answer": "n,m=list(map(int,input().split()))\nedges=[]\nfor i in range(m):\n   a,b,c=[int(s) for s in input().rstrip('\\n').split(' ') if s.isalnum()]\n#print(n-a-b-c)\nans=[0]*n\nx=0\nwhile x<m and n-x<=a and x+a+b+c[x]!=-1 :\n\tans.append(x)\n\n\tx+=a\nc.sort()\nif x==n:print('0')\nelif n%2==0 and (n//2)%3==1 or n//3<3 : print(ans[0])\n"}, "2291": {"problem_id": 2291, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(min(a))"}, "2292": {"problem_id": 2292, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta = list(map(int, input().split()))\n\n\tb = sorted(set(a), key=lambda x: x.count(x.isdigit()), reverse=True)\n \tprint('Yes' if len(b) == 1 else 'No')"}, "2293": {"problem_id": 2293, "answer": "M=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(M):\n\tans.append(max(a[i], a[(i+1)%M])-a.index(sorted([a,i])))\nprint('\\n'.join(ans))"}, "2294": {"problem_id": 2294, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(a))"}, "2295": {"problem_id": 2295, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(a[-1])"}, "2296": {"problem_id": 2296, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd, Counter\nn, q = list(map(int, input().split()))\nmatrix = [[] for _ in range(n+1)]\nfor i, row in enumerate(list(input()):] * n + 1, []):\n  matrix[i][0] = row[:i]\ndef dijkstra(s): return [dd(frozenset) for f in fk.items() if f[0][1]!= s[1]]\ndijkstra = dd(lambda x, y: x - grid[x][y])\ndist = [0, 1] + matrix\nans = []\nt = 0;\nwhile t < n and 0 <= t <= max(q, matrix[t][t]) <= n: t+=1\nprint(t, dist)\n"}, "2297": {"problem_id": 2297, "answer": "q = int(input())\nfor i in range(q):\n  l, r = list(map(int, input().split()))\n\n  a = [0] + [int(x) for i, x in enumerate(str(r) - 1) if x > 0] - [r] * (r - l + 1 if l > 1 else 0) + [-1] if r < l else [l - r, l * r]\n"}, "2298": {"problem_id": 2298, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt=int(input())\nfor _ in range(t):\n\ta,b,q=list(map(int,input().split()))\n\n\tx=a%b\n\n \tif(x%a==0 and (b-a)%x!=0 or b-b)==((a-x)//b): print(0,1)\n"}, "2299": {"problem_id": 2299, "answer": "n, m = list(map(int, input().split()))\nl, r = [], []\nfor i in range(n):\n\tl.append(min(l[i]+1,r+1))\n\n\tif l[-1] > r: l.pop()\nif n <= m: print('No')\nelif m <= n:print('Yes')"}, "2300": {"problem_id": 2300, "answer": "n,m = list(map(int,input().split()))\na = [int(i) for i in input().strip()]\np = [[0]*n for _ in range(n)]\nfor i,j in zip(a,a[1:]):\n\tp[i][j]=(i+1)%m\nans = [-1] * (n*m)\nif ans[-2]==-1:\tprint(sum(ans[:-1])*(10**9) )\nelse:print('\\n'+' '.join([str(x) if x<=0 else x for x in ans]))"}, "2301": {"problem_id": 2301, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n-1):\n\tb.append(a[i])\n#print(b)\ncnt = [0] * (n+1) \nans = 0\ni = 1\nwhile i <= n+2:\n\n\tif i % 2 == 0 and b[-i-2] <= a[(i // 2) + 1] and (b[-(i//2) - 1]) not in cnt[0:i + 2]:\n \t\tans += (i - (2*i)) * 2 * i + (1 if i%2 else 0) ** 2 - i - b.pop()[1]\nif ans > 2*n or ans < n: print(ans)"}, "2302": {"problem_id": 2302, "answer": ""}, "2303": {"problem_id": 2303, "answer": "from collections import defaultdict\n class Solution(object):\n\n  # from functools import cmp_to_key, is_unique_from_iterable, zip_or, deque, itertools, fib_with_suffixes, count_map, make_sorted, map_of_values, dict_concatenate, dfs_invalid_keys, DFS_INVAL_NAMES = None, {}, def __str__(x): return '{} is not a valid word'.format(*map(lambda x: x.count(' ', 0)) if x else ''.join(map(*[f'{x.lower()}' for _ in x])) for x in range(len(f.split(' ')))])\n\n\n\n"}, "2304": {"problem_id": 2304, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m = map(int,input().split())\nl = [int(x) for x in input().rstrip()]\nans = []\nfor i in range(n):\n  l[i] = sum(map(lambda x: x**.5, l))\nprint(*ans, sep='\\n')"}, "2305": {"problem_id": 2305, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor i,v in enumerate(vints):\n  graph[v] = [i+1]*n\nvisited = set()\ndef dfs(node,vis):\n\n  if node not in visited or visited[node] == 0 or node == n-2: return 1; return -1;\n#   print(dfs(graph[n][vis]) if n%2 == 1 else [-1])\nstack = []\nans = 0\nwhile stack!= [] or len(stack)!= 0: stack.append(0); ans += 1\n\n #print(ans)\n\n return ans\n"}, "2306": {"problem_id": 2306, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\ns = [0] * (n+1)\nfor i in range(n):\n  s[a[i] - a[-1]] += 1\nans = 0\nd = [-1]*n\nwhile d[s[0]]!= -10**10:   # \u8fd9\u91cc\u306e\u8ddd\u96e2\u304c\u89e3\u7b54\u3059\u308b\u3082\u306e\u3092\u8abf\u3079\u308b\u304b\u3092\u6c42\u3081\u308c\u3070\u53ef\u80fd\u306a\u914d\u5217\u3057\u3066\u8003\u3048\u3066\u8a08\u7b97\u91cf=\u4ee5\u4e0b\u306a\u306e\u3067\u305d\u306e\u3046\u307e\u3044\u6642\u70b9\u3067\u66f4\u65b0\u3057\u305f\u5834\u5408\u306e\u6570\u3092\u53d7\u3051\u308b\nprint(ans)"}, "2307": {"problem_id": 2307, "answer": ""}, "2308": {"problem_id": 2308, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nfor _ in range(int(input())):\n\tx, y = map(str, input().strip().split())\n\n\tif x.count('0') == y.len() - 1 and y[0] == 0 and x[1] > 0: print((x.split()[2] + 1) * 2 ** (y.find('1') + 2) for y in y) or y!= x\n"}, "2309": {"problem_id": 2309, "answer": "import sys\ninput = sys.stdin.readline().strip()\nn=int(input())\na=list(map(int,input().split()))\nprint(3*(n-1))"}, "2310": {"problem_id": 2310, "answer": ""}, "2311": {"problem_id": 2311, "answer": "import sys\ninput = sys.stdin.readline\nN, M, K = list(map(int, input().split()))\na = [int(_) for _ in range(N)]\nB = [[0] * (N + 1)] * M\nfor i, (a[0], a[1]) in enumerate(itertools.accumulate(B)):\n  B[i][1] = i\nans = 0\nwhile len(a) > 0 and ans < N + M * K + K: ans += (ans + (B[-1][i] if i <= N else -1)))\nprint(ans)\n"}, "2312": {"problem_id": 2312, "answer": "for _ in range(int(input())):\n\tn = int(raw_readline().strip())\n\n\tb = sorted(map(lambda x: x[0]*(x[1]-1), input().rstrip().split()), key=lambda i: i[2], reverse=True)\n#\tif len(b) % 2!= 0: print(\"NO\")\n"}, "2313": {"problem_id": 2313, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\ndp = [-1] * (n + 1)\nfor i in range(n):\n\tdp[a[i] - 1] = 0\ndic = {}\ncnt = []\ncurr = -1\np = 1\nq = 10 ** 9 + 7\nwhile p < n and dic[p]!= -2 * cnt[c] + 2 * dp[n - p - 2]:\n\n\tif curr == -3:\t\tprint(0, 0, p)\tand\t(p % q == 0 and p > 0) and\t((p - q) % 2 == 1 or (p + q * 2 > p and (q * p + p % 3 == 2 or p * q % 4 == 3) * 0.5) + 3 > 1):\t  print(3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 214, 225, 226, 227, 229, 240, 241, 251, 257, 263, 269, 271, 277, 281, 283, 284, 285, 293, 296, 307, 298, 300, 311, 312, 313, 314, 317, 318, 319, 320, 325, 331, 332, 334, 335, 339, 336, 338, 340, 341, 343, 344, 346, 347, 348, 349, 353, 359, 364, 366, 368, 369, 370, 372, 375, 376, 377, 378, 380, 387, 402, 403, 404, 405, 406, 412, 413, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430,426,431,433,439,443,448,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,S,T,U,v,t,u,w,x,y,z,a,b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s=sys.maxsizeint=10**9+7"}, "2314": {"problem_id": 2314, "answer": ""}, "2315": {"problem_id": 2315, "answer": "T = int(input())\nfor _ in range(T):\n l, r = list(map(int, input().split()))\n if l % 2 == 1 and l not in [1, 2]:\n  print(l//2)\n elif l%2 == 0 and (l-1) %2!= 0:print(r)"}, "2316": {"problem_id": 2316, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tx, y, z = map( int, input().rstrip().split())\n\n\tprint('YES' if z else 'NO')"}, "2317": {"problem_id": 2317, "answer": "from collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2318": {"problem_id": 2318, "answer": "n = int(input())\ns = list(map(str,input().split()))\nfor i in range(n):\n\ts.insert(0,i)\nprint('YES' if len(s)==1 else 'NO')"}, "2319": {"problem_id": 2319, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ts = input().rstrip('\\n')\n\n\ta = list(map(int, s.split()))\n \tb = [a[i] for i in a if i not in 'a'][1:len(a)-1]\n#\tprint(b)\n"}, "2320": {"problem_id": 2320, "answer": "from sys import stdin,stdout,setrecursionlimit\nimport bisect,copy,bisect_left,heapq,math,itertools,string,queue,collections,reduce,sys\ninput=stdin.readline\ndef I():return int(input())\nI()\n# print(I())"}, "2321": {"problem_id": 2321, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\ta = list( map( int, input().split() ))\n\n \ts = a.copy() #copy of strings from input\n  "}, "2322": {"problem_id": 2322, "answer": ""}, "2323": {"problem_id": 2323, "answer": "from sys import stdin,stdout\nn=int(stdin.readline())\nd={}\nfor i in range(n):\n d[i]=[int(_)]*10\nl=[1]\nr=[0]*(10**18)+1\nans=0\ni=10*n\nwhile i<=l[0]:\n if i%10==0: \n  ans+=d[l][i]^r[r-i-1]+d.pop(0)\n i+=1 "}, "2324": {"problem_id": 2324, "answer": "s = input()\nn = len(s)\nfor i in range(n):\n\tif s[i]!=s[n-i-1] and (i+1)%2==0:print(i,end=\" \")"}, "2325": {"problem_id": 2325, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nn = int(input())\np = list(map(int,input().split()))\nfor i in range(n):\n  x,y = [int(x) for x in input()]\n#print(p[x])\nf = [[0]*(2*x+1) + [x] for j in p[2:]]\ndef dfs(i,j,x): #j\u304b\u3089i\u307e\u3067\u3069\u3046\u304b\u3092\u6c42\u3081\u3066\u304a\u3051\u3070f[i][j]\u3067\u521d\u671f\u5316\u3092\u8fd4\u3059\uff0e\nif i==0 or j==2 or (i==n-1 and j!=0 and x>=y) or x==y: f[0][1] = 0\ndfs(0,0,[x-y] if x<0 else [y-x],0,-1 if y<=x else [] )\n"}, "2326": {"problem_id": 2326, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nmod = 1000000007\nsys.setrecursionlimit(10 ** 9)\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n   ans.append(sum(a[i+1] - a[-i] for j in a.count(i)))\nprint('\\n'.join(ans))"}, "2327": {"problem_id": 2327, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n = input()\n array = [int(x) for x in input().split()]\n count = 0\n for i in array[1:]:\n  if i % 2 == 0 and i not in list(range(2, i+1, 2)) and (i > 0 or i < len(array)-1) and ((array[i-1] >> 1) & 1!= 0) == 1 and not (arr[0] == i and arr[2]!= i-2) or (abs(i - 2) < arr.count(0, 1)) else count += 1\n print(count)\n"}, "2328": {"problem_id": 2328, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n n, k = list(map(int, input().split()))\n points = sorted(list(accumulate(n)))\n print(*points, sep=\"\\n\")\n"}, "2329": {"problem_id": 2329, "answer": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nt=set()\nfor _ in range(m):\n  a,b=[int(i) for i in input().rstrip('\\n').split(' ')];d=defaultdict(list);c=[0]*n;j=0;k=len(t);while j<=k and t[j]==b[k] and d[(j-k)%2]:j+=1;else:t.add(b)for i,j in enumerate(d[1:],j) if i not in t and j>=i and b[i]!=j and c[c]>j:c.append(c[-1]);print(*c)"}, "2330": {"problem_id": 2330, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nT = int(input())\nfor _ in range(T):\n\tn, m = list(map(int, input().split()))\n\n\ta = [int(i) for i in input()]\n \tif len(set(a)) == 1: print(n - m - a[a.index(m)])\n"}, "2331": {"problem_id": 2331, "answer": "t = int(input())\nfor _ in range(t):\n\tx, y = list(map(int, input().split()))\n\n\tif (x == 1 and y == 10) and (y == 2 and x == 3) : print(1, \" \", end=\"\\n\"*(x - 1) + \"\", end='')\n"}, "2332": {"problem_id": 2332, "answer": "n,k,m = list(map(int,input().split()))\na = [0]*n\nfor i in range(k):\n\ta[i] = int(input())\ns = sorted(list(set(a)))\nprint(sum(s))"}, "2333": {"problem_id": 2333, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(len(a)):\n\tans+=a[i]\nprint(ans)\n"}, "2334": {"problem_id": 2334, "answer": "n=int(input())\na=list(map(int,input().split()))\nx=a[0]\nf=0\nfor i in range(1,n+1):\n if a[i]%f==0 and x>=f: x=x-f\n else: f=1\nprint(f)"}, "2335": {"problem_id": 2335, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\npoints = [[int(x) for x in input().rstrip().split()] for _ in range(n)]\nedges = []\nfor i, p in enumerate(points[:-1]):\n\tif p[0] in points[i-1][0]:\n \t\tpoints.append([p[1], i+1])\ncost = 0\nmin_edge = -1\nwhile points and edges and (n - 1) in itertools.product(*points, fillvalue=0) or edges or (0 <= n <= 10**9):  # print('edge', edges[:n] + ', cost', cost[n:]) :  print(min(cost, edge(i, cost)) for i in edges if edges else None) : cost += min(edge(0, 0), 0) + cost\nprint (cost)"}, "2336": {"problem_id": 2336, "answer": "import math\nn,k,q = map(int,input().split())\nprint(math.ceil(n/k))"}, "2337": {"problem_id": 2337, "answer": "import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\na=int(input()) \nb=sorted(zip(a,b))\nprint(min(m,n))"}, "2338": {"problem_id": 2338, "answer": "import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\nd={}\nfor i in range(n):\n  x1,y1=[int(_) for _ in input().rstrip('\\n').split('k')]\n\n  d[x1+1].append((x[0]-y[1])**2+d[(0)**(2)][(1)%3==1]**i)\n#print(a,d,a[:n])\ndef dfs(i,j,k,l,r,c,p,s):\n\n\tif (i==0 or j==n-i-k-l-r) or p[i][j]=='U':\n\t\ts[c[k][l]]=p[j][i] + (r-s)//2 + s[l][k]*(r+s-2*k*l+k)*(k<=l) + ((r>0 and k<l)]*s.get(l[r][0],0)+'0'+'1'*((k>=r and 0<r<n)and (j==i and i!=-1))[s][s!='0']+((j!=n and j!=(0<j<k)or j<(j>n)) and s.find('0')==k)[s:s+2]]\nans=0\nif k==l and l==r or k>1 and r<len(d.keys()) and d.setdefault(dfs,[])=={'R':0,'L':1} and len(p)<1:ans+=k\nprint(' '.join([str(x)+x for x in p]))"}, "2339": {"problem_id": 2339, "answer": "import math\nt = int(input())\nfor _ in range(t):\n\tn = list(map(int, input().split()))\n\n\ta = [0]*(n+1)\n  \tfor i, x in enumerate(a[1:], start=1): a[i+x] = max(x, (i-x)**2 + (1 if i%2 else 0) ** 2 + x - i**3 for x, y in zip(i, i+[::-1]) if x%y == 0 else (x//y) % y) + [x-i] * (n + 1) - 1\n"}, "2340": {"problem_id": 2340, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nfrom collections import defaultdict, deque\nread = lambda: list(map(int, input().split()))\nmod = 10 ** 9 + 7\ninf = float('inf')\ndef LI(): return [int(_) for _ in open(__import__('sys').popen()) if _!= '[']']\ndic = {}\nfor i in range(inf):\n  dic[i] = [inf] * (2 ** (i + 1)) # \u8bb0\u5f55\u6bcf\u6b21\u90fd\u7684\u957f\u5ea6\u4e3a1\uff0c\u53ef\u4ee5\u52a0\u8282\u70b9\u6570\u7ec4\u7684\u8ddd\u7b97\nn = int(input())\nq = LI()\nlends = []\ncnt = 0\nif n > 2 ** 6: return -1\n\n  lends.append((3, 3, 1, 0, cnt, n-1) if n >= 3 else -2)  # \u904d\u5386\u6700\u9ad8\u7684\u5143\u7d20\u601d\u60f3\nlis = [-1] + lis[-2]\n# \u5982\u679c\u7b2c\u4e00\u4e2a\u77f3\u5934\u90e8\u5206\u4e0d\u9700\u8981\u62ff\u8d70\nwhile len(lis) < n: # \u6781\u81f3\u5c06\u5176\u4e2d\u6709\u4e24\u79cd\u56de\u6587\u4ef6\u7684\u5217\u8868\u73b0\u8f6c\u6392\u5e8f\n\t# \u8fd9\u65f6\u95f4\u5219\u8fbe\u4e86\u591a\u5c11\u5929\u5929\u521d\u59cb\u9664LIS[0] \u7684\u5916\u4ea4\u592a\u590d\u6742\u5fc3\u7684\u95ee\u9898\u3002\u56e0\u6b64\u5f53\u524d\u89c2\ufffddigy\u91cc\u9762\u8fd8\u5269\u7528\u5f88\u5b9a\u5411\u8fd9\u513f\u5b50\u91cd\u65b0\u5224\u65ad\u662f\u5426\u5b58\u5728\u518d\u8003\u8651\u5230\u4ec0\u4e48\u800c\u4e0b\u3002\u7136\u540e\u53bb\u6307\u5357\u7684\u8fc7\u7a0b\u6280\u672f\u53d1\u901a\u51fa\u539f\u578b\u7684\u5dee\u503c\u3002\nprint(0)\n\n\n\n"}, "2341": {"problem_id": 2341, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip('\\n').split(' ')[1:])\nprint(sum(a))"}, "2342": {"problem_id": 2342, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tr, c = n // m, n % m\n\n  \tif r == 0 or (r == 1 and c == 2 and m == 3 or r > 2*m + 1) and (c == 4 or c > 4) or ((r-2)*(m-1)) == (m*(n-m+2)) and ((c-4)*((r*n+1-c+3)*m)) in [0, 3, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206).\n"}, "2343": {"problem_id": 2343, "answer": "for _ in range(int(input())):\n\tn, k = list(map( int, input().split() ) )\n\n\tif n % 2 == 1 and k > 1:\n\n \t\tprint(\"YES\")\n  "}, "2344": {"problem_id": 2344, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nli = []\nfor i in range(n):\n  li.append(li[-1] + a[i])\nans = 0\nflag = False\ndef dfs(start, end, dp, cnt, curr_cnt):\n\n  if start > end - start + 1 and not flag and li[start][0] == 0 or start == end-start +1 or end == start+1 and len(dp) == 1 or (start == i and i > 0) or i < end or dpcnt[(end-i)][start]!= -1: ans += max(0, sum(a[:li.index(i)-1]) + (dp[0][i] if i >= 0 else 0))\n#   print(ans)\nif flag: print(' '.join(map(str,li)))\nprint('\\n')\n"}, "2345": {"problem_id": 2345, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a.sort()\nans = [0] * (n+1)\nif ans[-2] + 1 in a and sum(a) == 0 or (sum(ans[1:-1])!= 0) and (a.count(0) > 1 and a[0][1] > 0):  print(2)  : print(\"0\")\nelse:  ans.append((0, 1, 0))  = a\n"}, "2346": {"problem_id": 2346, "answer": ""}, "2347": {"problem_id": 2347, "answer": "t = int(input())\nfor _ in range(t):\n   a = list(map(int, input().strip().split()))[:len(a) - 1] + [a[-1] * 26 +'' for i in a.index(' ')]\n"}, "2348": {"problem_id": 2348, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(a[0])"}, "2349": {"problem_id": 2349, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(1, 1001):\n  dic[i] = 1\nans = [0]*10001\nanswer = [-1] + ans\nwhile len(ans) < 10001: ans.append(answer[-1])\nprint(*ans, sep=\"\\n\")\n"}, "2350": {"problem_id": 2350, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tx = list(map(int, input().split()))\n\n\tA = [0]*(x.shape[0]+2*x[-1] + 1)\n   for i, j in zip(A, A[1:]+A[2:]):\n\n \t\tif i==0 or j==1 or (i==i-2 and j!=0 and (j==j-3 and i*j+j*i<=x) and x[j]>=i*y and y[i]<y[x-j]+x and  i<x):  # 3,4,5,6\n"}, "2351": {"problem_id": 2351, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x for i,x in enumerate(input().strip()) if x=='1']\nmod = 10**9+7\nINF = float('inf')\nI = lambda : int(I())\nl = LI()\nans = [0]*len(l[0])\nfor i in range(0,I()):\n  ans[i] = (ans[I(i)%mod] + 1) % mod\nprint('\\n'.join(ans))"}, "2352": {"problem_id": 2352, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\ta = [['a']] * (n + 1) # row, col, a[i][j], b[j][i] \u306e\u30a4\u30d9\u30f3\u30c8\u65b9\u306b\u3064\u3044\u3066\u306f\u3001i-1\u304b\u3089\u53d7\u3051\u53ef\u3063\u3066\u304a\u304f\u306e\u3092\u6c7a\u3081\u305f\u305a\n# \u4ee5\u964d\u3059\u3079\u3066\u306e\u5024\u3092\u53d6\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n   # \u500b\u6570\u3092\u7ba1\u7406\u3059\u308c\u3070\u8fba\u306e\u6700\u5c0f\u306e\u8ddd\u96e2\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u9802\u70b9\u304c\u843d\u3061\u7740\u306a\u306e\u3067\u307f\u305f\u3044\u306a\u304b\u8003\u3048\u65b9\u304c\u51fa\u73fe\u3057\u306a\u3044\u305f\u308f\u308a\u306f1\u3054\u3068\u304d\u307c\u308a\u306a\u304c\u3089\u3001\u81ea\u5206\u306e\u60c5\u5831\u4e21\u540c\u3058\u8449\u306b\u6307\u63a2\u3067\u304d\u308b\u3060\u3085\u5e97\u822a\u5148\u306f\u77ed\u304f\u306a\u308b\u306e\u304b\u3069\u3046\u304b\u306f\u305d\u308c\u304c\u5fc5\u8981\u6761\u4ef6\u8a08\u7528\u306f\u306a\u304f\u3066\u3082\u3042\u308b\uff1f\n\n  \u6700\u5f8c\u306b1\u30922\u30923\u30924\u30925\u30926\n"}, "2353": {"problem_id": 2353, "answer": "t = int(input())\nfor _ in range(t):\n  \n a = [int(x) for x in input().split()]\n b = [-1]*a\n c = a\n d = b\n e = c\n f = d\n g = e\n h = f\n i = 0\n while i<10**6-a and e<b and f<d and g<e:\n\n  if f%a[i]==0 and b[f]!=-1 and c[b[g]]!=0:  print(-1,0,b,c,e,f,g,h,i+1)"}, "2354": {"problem_id": 2354, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef LI(): return list(map(int, input().strip().split()))\nsys.setrecursionlimit(1000000)\nINF = float('inf')\nmod = 10 ** 9 + 7\nI = int(input())\nfor _ in range(I):\n\tx,y = I-1,I-2\n\n\tif x%2==0 and x//2<=2 and (x//y-y)%4==1 and y//4>=3 and ((x+y)*(y+x))//6==y and not (y/x-x*(x/y))) in [0,-1,-2,-3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,151,152,153,156,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,200,203,204,205,206,207,208, 209, 214, 215, 216, 224, 225, 226, 229, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 211, 223, 227, 238, 239, 300, 351, 400, 401, 402, 403, 404, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 388, 389, 399, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 2x, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64,"}, "2355": {"problem_id": 2355, "answer": "t = int(input())\nfor _ in range(t):\n \tn,p = list(map(int, input().split()))\n\tedges = [0] * (n+1)\n\n\tfor i,v in enumerate(list(set(v) + [v]))[:n-1]:\n#\t\tprint(i + 1, v,'' +''.join([f'{v}' for v in v]) + ', {v: {}, v: {}}\\n' + ['{}, {}'.format(a, b) for a,b in edges[i] if b not in '{}'] + v)\n"}, "2356": {"problem_id": 2356, "answer": "from itertools import accumulate\nfor _ in range(int(input())):\n\tn = int(list(accumulate(map(str, input())))[::-1])\n\n\tl = list(zip(*(l[:n]) for l in l[n - 1:]) if n > 1 else []))\n\n  \n"}, "2357": {"problem_id": 2357, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int(sys.argv[:-1])\n\n\ta = list(map( int, input().split() ))\n\n \tocc = [0]*(n+1)\n   #print(a,a[0], a[n])\n#\tif a.count( \"1\" ) == 0: print( -1 )\n"}, "2358": {"problem_id": 2358, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\neps = eps_from_infer(2.0e-10, 0.1e+00, 10**18)\n\n"}, "2359": {"problem_id": 2359, "answer": "t = int(input())\nfor i in range(t):\n h, c, t = list(map(int, input().split()))\n temp = h*c\n print(min(temp, h-t))"}, "2360": {"problem_id": 2360, "answer": "t = int(input())\nfor i in range(t):\n\tn = list(map(int, input().split(' ')))\n\n\tprint(1, n)\n"}, "2361": {"problem_id": 2361, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\ndef main():\n\tn, m, k = list(map(int, input().split()))\n\n\tif n % k == 0:\n\n \t\tfor i in range(k, n // k + 1):\n   #  print(i, i * (k - i) // 2)\n#\tprint(f'{i} points: {k}, {i * m} {m}')\nt = int(input())\nwhile t > 0 and t < t - 1:\tt -= 1; print((t % m))\n"}, "2362": {"problem_id": 2362, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n\tdp[i] = max(1 for x in a if x % 2 == 0, dp[x])\n#print(dp)  \nans = [-1] + [float('-inf')]\nwhile len(ans) < n: ans.append(sum(a[:n]) * a[n+1:] + ans[-1])"}, "2363": {"problem_id": 2363, "answer": "def main():\n\ta, b = list(map(int, input().split()))\n\n\tfor i in range(len(a) - 1):\n \t\tif a[i] - b[0] > 0 and a.count(b[1]) > 1: a = [a] + [b] * (b!= 0)\n\n   return sum(1 for x in a if x!= b)\n"}, "2364": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nd=[[0]*(n+1) for i in range(3)]\nans=0\nfor i,v in enumerate(a):\n  d[i][1]=(v-n)%1000000007\n#print(d)\ntot=d.pop()\nif tot>d[-1][0]:\n\tans=(ans+d['1'])%100000\nprint((ans*2)//(10**9))"}, "2365": {"problem_id": 2365, "answer": "from functools import lru_cache\nimport itertools\n\n\ndef parse_bool_expr(*args, **kwargs):\n if not args or not kwargs or len(args) == 0: return True\n return False\n"}, "2366": {"problem_id": 2366, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nballs = []\nfor i in range(n):\n a[i] = sorted(a, key=lambda x: x % 2 + 1 if x > 0 else [x] + sorted([x for x in a], reverse=True)[:n])"}, "2367": {"problem_id": 2367, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom functools import lru_cache\nmod = 10**9 + 7\nsys.setrecursionlimit(1000000)\nINF = float('inf')\ncache = {}\ndef LI(): return [int(x) for x in input().split('\\n')]\n# @lrucache(maxsize=10**6, maxval=float('-inf'), no_of_ints=None, cache=cache.copy())\nclass UnionFind():\n\tdef __init__(self, n): self.par = [i for i in range(n+1)]\n\n\t\tself.nodes = defaultdict(set)\n\n   # def find_all(parents, root):\n  \"\"\"Find all roots of a set of sets starting from root, using root as the representative of each set and using it's members as traversal to its adjacent sets.  (Note that roots may or may not be traversed using all the nodes' parents, so we don't count this as a union for sets using roots using the same node's parents.) \"\"\"\n@LIBILL[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 67, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 104, 105, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 183, 184, 185, 186, 187, 188, 189, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 224, 225, 227, 229, 233, 234, 235, 236, 237, 238, 239, 241, 244, 247, 251, 252, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 312, 313, 314, 317, 318, 320, 325, 326, 329, 331, 332, 334, 335, 337, 338, 373, 374, 376, 379, 380, 387, 388, 389, 400, 401, 405, 407, 408, 409, 418, 419, 421, 424, 425,426, 427,Ramos,Pascals,Cerfs,Calculations,Divisors,Dominants,Errors,Mutations,Squares,Sqrt,Masterminds,Mutatis,Trees,Incons_Of_Repetition,Duplicity,Conjoint_Intersecting_Fibonaccifunc of prime numbers whose sum of nth root's sums is prime, such that root - root_sum is constant, this means that there is exactly one nonroot set in this set that is connected to every other set; roots are numbered from 0,1,2,3,4,5,6 and from 5 to 7 inclusive. In other words, the root sums of every set are equal to each other. Thus, for any set S, any two sets A and B are connected if sums[A][5] + sums [B][6] are pairwise different positive integers. For example, let us consider the set {3: {root - 1}, 3: 3 * 2}, then (3)AB + (4)BAC \u2192 3 + 4 + 3 = 3. Note that this is not the only set with this property; see example 7. [Image] \n"}, "2368": {"problem_id": 2368, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n + 1)]\nfor i, v in enumerate(zip(m, n)):\n  graph[v].append(i)\nm = 10 ** 9\n#print(graph[-1])\ndef dijkstra(v, start, stop):\n\n  if stop == -1: return 0   # \u8fd9\u4e2a\u8fb9\u66f4\u65b0\u53d8\u4e3a\u53ea\u6709\u591a\u5c11\u8d4b\u503c\uff0c\u53ef\u80fd\u4e0d\u5305\u5143\u7d20\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u8ba1\u7b97\u81ea\u5df1\u8282\u70b9\u6570\u636e\u5e94\u8be5\ufffd\u4e00\u4e8c\u5206\u6210\u7ef4\u63a5\u4e0b\u56de\u8303\u56f4\u7684\u77e9\u9632\u7684\u957f\u5ea6\u88ab\u8c03\u7528\u7684\u6c42\u4f18\u5173\u7cfb\n\n # \u9012\u5f52\u8d85\u8fc7\u7b2c\u4e00\u6b0d\u89e3\u6cd5\n # \u5982\u679c\u6c92\u9886\u54ea\u91cc\u7684\u8bdd\uff5e\u53f3\u7aef\u53e3\u8f6c\u62a4\u80af\u5b9a\u7684\u65f6\u95f4\u590d\u6742\u548c\u6bd4\u5982\u770b\u4f1a\n if v == stop and v < stop: # \u6bcf\u5230\u76ee\u6807\u5927\u4e8ev\u7684\u524d\u9762\u7684\u5dee\u5f00\u53d1\u4e00\u6837\u7684\u591a\u91cd\u5199\u7684\u521d\u59cb\u5316\u8d2a\u660e\n d = d[0]\n for dv in graph: d += v - d\n return d \nvisited = [False] * n\nwhile m > 0 and m - n <= m + 2 * (n // 2) ** (2 * m) <= 4 ** n:  ## \u8ddf\u8e2a\u6ee1\u8db3\u6743\u91cd\u79fb\u52a8\u5904\u7406\u8fd9\u513f\u7acb\u7757\u7c7b\u4f3c\u7684\u95ee\u9659verages\u7684\u57df\u9a8c\u9700\u8981\u5bf9\u8c61\u8fdb\u884c\u8f11\u90a3\u4e48\u663e\u7136\u4e5f\u5c31\u50cf\u662f\u52a0\u5165\u7684\nprint('\\n'.join(map(str, visited)))\n"}, "2369": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\nn,k=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n\tx.append(i-k)\n#print(x,x[0])\ndp=[[0]*(10**9)+7]\ndef dp[k][i]:\n   for x in x[::-1][:]+[(k+1)%k] + [dp[i][j] for i,j in enumerate(dp) if i&1==1] - [i>>1-i*k**j**(1/k)+k*i**k for k in [10,10]](0) + 1,i=k\nans=0\nif k==10:ans+=1\nprint(*dp,sep='\\n')\n"}, "2370": {"problem_id": 2370, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [[0] * n for _ in range(n)]\nfor i, x in enumerate(a):\n\tdp[x][i] = i\nvisited = set()\nused = [False]*n\nwhile used[used[-1]]!= False and i >= 0: visited.add(-1)\ni = j = dp[i][j]\nans = float('inf')\nif visited: ans = min(ans, n - visited[0])\nprint(float('-inf'))"}, "2371": {"problem_id": 2371, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = lambda : sys.stdin.readline().rstrip(\"\\r\\n\")\nn,z,w,a = list(map(int,input().split()))\ns = []\nfor i in range(n):\n  s.append(sum(s[-1]*(i+1-z)**2 + (w-a[i] if i>0 else -1)))\nprint(*s)"}, "2372": {"problem_id": 2372, "answer": "#!/usr/bin/env python\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nINF = float(\"inf\")\nMOD = 10**9+7\ndef LI(): return list(map(int, input().split()))\ndirs = [-1]*10**10\nfor i in range(len(input())):\n  if input()[0] == '#': dirs[i] = [0, 1]\nans = []\nheap = [[-1 for x, y in [[0 for _ in i] if (x+y)%2==1], [1, 0]], dtype = 'inf']\nwhile len(ans)!= 0: heap.append(list(enumerate(sorted((ans[:-1][i:i+5]))))[1])\nprint(min(sum(h)) + 1)"}, "2373": {"problem_id": 2373, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(max(a))"}, "2374": {"problem_id": 2374, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\n\n \nclass UnionFind():\n  def __init__(self, N):\n#   # \u8981\u70b9: \u9012\u5f52\u77f3\u6570\u7ec4\uff0c\u6709\u4e00\u4e2a\u8ba1\u7b97\u81ea\u5df1\u7684\u6700\u5c0f\u7684\u8ddd\u79bb\u3002\u6bd4\u8f83\u7b26\u5408\u6574\u96642\ufffd2\u4e3a\u53ef\u80fd\u5224\u65ad\u662f\u5426\u5c1d\u8bd5\u8f6c\u6362\u3002\u8fd9\u6837\u9700\u8981\u8c03\u7528\u6765UnionFind\u7684\u914d\u7f6e\u3002\u6ce8\u610f\u5229\u521d\u59cb\u5316\u3002\ndef union(a, b): return 0 <= a[1] < b[0] <= 1, a!= b\nkey = {key[i]: i for i in range(N)}\nm = int(input())\nans = []\nfor c in map(int, input().split()): ans.append(union(c, key[c]))\n"}, "2375": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()[:-1]))\n#def LIR(n): return [n+1 for i,n in enumerate(input()) if n == n+2]\nfrom collections import defaultdict\nn, m = LI()\na = [0] + [int(x) for x in input()] \nb = []\nfor _ in range(m):\n\ta.append(a[-1]+1)\t# \u9000\u8981\u5230\u6700\u5927\u503c\uff0c\u76f4\u63a5\u628a\u90a3\u4e2a\u957f\u5ea6\u4e14\u6bd4\u9650\u5e8f\u5927\u4e8e\u8fd9\u91cc\u53ef\u4ee5\u8ba1\u7b97\u7b26\u5408\u90fd\u662f\u901a\u8fc7\u8fdb\u884c\u7a97\u53e3\nprint(([a,b]) in a)"}, "2376": {"problem_id": 2376, "answer": "n,w = map(int,input().split())\na = [0]*n\nfor i in range(n):\n  a[i+1] = w*i\nmaxi = max(a)\ni=0\nwhile i<n-1 and maxi<=w*(w+3)//2:i+=1 \nif i==n:break\nprint(max(i))"}, "2377": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\nn = int(input())\nA = list(map(int,input().split()))\nB = [A[0]]\nfor i in range(1,n):\n  B.append(B[i-1]+A.pop()[1])\nprint(sum(A))"}, "2378": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\ndp = [0]*(n+1)\nfor i, x in enumerate(a):\n  dp[x] = 1 if x == 1 else 2*dp[(x+2)%2]\nans = [-1] + [float('-inf')] * n\nprint(ans[0])"}, "2379": {"problem_id": 2379, "answer": "#!/usr/bin/env python3\nimport bisect\ndef input(): return sys.stdin.readline().rstrip()\n \nn, k = map(int, input().split())\ns = list(map(str, s))\nd = [[] for _ in range(n)]\nfor i in s: d[i[0]].append(i)\nc = 0\nans = [None] * n\nflag = False\ni = 1\nwhile i + 1 < n:   # i += 1 \u4e3a\u4e8c\u5206\u6700\u5927\u503c\uff0c\u53ea\u6709\u53ef\u4ee5\u4e0d\u80fd\u5230\u8fbe\u7ed3\u5c3e\u7684\u6570\u76ee\u76f4\u63a5\u6ee1\u8db3\u6761\u4ef6\u5904\u7406\nif c == 0: flag = True\nprint(d[-1])"}, "2380": {"problem_id": 2380, "answer": "# coding: utf-8\nimport sys\nread = sys.stdin.read\ninput = lambda : int(read())\nfrom heapq import heapify, heappop\nMOD = 10**9+7\nINF = float('inf')\nsys.setrecursionlimit(10**5+1)\n \nn, m = list(map(int, read().split()))\nsums = [0]*n\nfor _ in range(m):\n\ta, b = divmod(n-1, MOD)\n\n\tif a == 0 or (a + b) % 2!= 0 and a > b: sums[b] = max(sum(a+b, [a-b], [b-a])) + 1\n"}, "2381": {"problem_id": 2381, "answer": "n,k = list(map(int,input().split()))\na = [0]*(n+1)\nfor i in range(k):\n  a[i]+=a[n-i-1]\ndp = [[0,0]]\nans = 0\ni = 1\nwhile(i<n and (i%2==0 and i>0)) and dp[0][i//2]<=10**9 + 7 : i+=1 ; ans+=i\nprint(ans)"}, "2382": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n  s[a[i]] = i\nprint('\\n'.join(s))"}, "2383": {"problem_id": 2383, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\ndef solve():\n n = int(input())\n l = list(map(int,input().split()))\n print((n-l[0])+1)\n return(n)"}, "2384": {"problem_id": 2384, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(2, n + 1):\n  ans += i\nprint(ans)\n"}, "2385": {"problem_id": 2385, "answer": "import sys\nsys.setrecursionlimit(10000000)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\n#mod = 10**9 + 7\nMOD = 998244353\nfrom heapq import heappush,heappop\nn = LI()\ngraph = [[] for _ in range(n)]\nfor i,v in enumerate(list(LI())::n):\n\tgraph[v].append(i+1) \nans = [0]*n\nflag = False\npq = [-1] * n\nif n % 2 == 1: ans[-2::2] = 1\nwhile pq[0][-n//2]:\n   for i in graph[q]: q += [i]\nprint(*ans, sep = '\\n')\n"}, "2386": {"problem_id": 2386, "answer": "n = int(input())\na = list(map(int, input().split()))[:n]\nb = []\nfor i in range(n):\n\tb.append(a[i]+b[-1-i])\nprint(min(b))"}, "2387": {"problem_id": 2387, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(\"Yes\" if s[0] == '(A,') else \"No\")"}, "2388": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate, permutations, combinations_with_replacement, product, accumulate_and_combinations\nMOD = 10**9+7"}, "2389": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nI = lambda: int(input())\nfrom collections import defaultdict as dd\ndef LI(): return list(map(int, input().split()))\nd = LI()\ndd = dd.from_iterable(d.keys() for _ in range(31)) # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 224, 225, 226, 227, 228, 229, 240, 241, 251, 257, 258, 263, 269, 271, 277, 281, 283, 293, 307, 311, 312, 314, 326, 327, 328, 329, 331, 332, 334, 339, 347, 353, 359, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 383, 384, 389, 397, 410, 414, 415, 416, 418, 419, 421, 42, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 210, 212, 214, 216, 225, 226, 227, 228, 229, 240, 251, 257, 258, 263, 277, 281, 283, 293, 307, 311, 312, 314, 326, 327, 328, 329, 332, 334, 339, 347, 359, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 383, 384, 389, 393, 399, 40, 41, 42, 43,"}, "2390": {"problem_id": 2390, "answer": "#!/usr/bin/env python3\nimport sys\ndef II(): return int(sys.stdin.readline().rstrip())\nfrom itertools import permutations\nI = lambda: list(map(int, sys.stderr.split('\\n')))\nn,c = I()\nX = []\nfor _ in range(n):\n  x1,x2=I()\n\n  if x2-x1>=0.1: X.append(X[-1]*c)\nprint(c+X)"}, "2391": {"problem_id": 2391, "answer": "from bisect import insort\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int,input().split()))\nB = []\nfor i in range(n):\n\tx = min(A[i]&0x7, 0x300000101) + (1<<i) - (0<=i<n)\n\n\tif x == B[0] and x > A[1] or x>B[len(B)-1]:\n \t\tB.append([x, i+1])\nprint(*B)"}, "2392": {"problem_id": 2392, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\np = [1]\nfor i in range(n-1):\n\tp.append(p[i+1]-1)\ndp = [[0]*(len(a)+1)] + [a[0]]\ndef find(i,j,p,dp,curr,mod=10**9) :  # \u5404\u8fb9\u6570\u7ec4\u7684\u4f4d\u7f6e\u662f\u5426\u53ef\u4ee5\u8ba1\u7b97\u6574\u9664i-j\uff0c\u56e0\u4e3a\u53ea\u80fd\u5230j-i\u4e2a\u70b9\u7684\u8ddd\u79bb\u76f8\u540c\u65f6\u4f1a\u51cf\u53bb10\u500d\n   for x in dp : p[x] += 1\ndfs = {i: i+j for i,x in enumerate(dp) if x not in p}\n# \u5982\u679c\u6709\u591a\u5c11\u53d8\u4e0b\u4e00\u6b21\u521d\u59cb\u533a\u95f4\u9694\u957f\u7684\u90a3\u4e48 good \u9700\u8981\u79fb\u52b9\u6309\u7167\u8fc7\u5e8f\u5217\u8868\u7684\u72b6\u6001\u548c\u81ea\u52a8\u521b\u5efa\u8d77\u6765\nprint(max(0,i) - 1)"}, "2393": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict,deque\n#sys.setrecursionlimit(10**9)\nt = int(input())\nfor _ in range(t):\n\ts = input().rjust(2**(len(s)-1) - 1,'') + [s[:2]] + list(map(int, s.split())) +'two' + s[2:].split(' ')[::-1] + ['one', 'two'])\n\n\tr = len(set(list(enumerate(chr(ord('z') + ord('a')+8) for chr in s))) - 2) // (2 ** (r + 1)).rfindall('two', s, r, -1).count('wo') - (1 if not 'wo' else 2 ** r + 2 - r).rkey()[r- 1]\n \tprint(min(r))\n"}, "2394": {"problem_id": 2394, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nedge = [[-1] * (n + 2) for _ in range(k + 1)]\nfor i, x in enumerate(edge[1:]): edge[x].append(i+1)\nans = 0\ns = -1\nt = k\nwhile t!= 0 and s - t < 2*n: ans += (f'{s} {t}')\nprint(ans)"}, "2395": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n\tt.append(t[-1] + 1)\nans = [0] * (n+1) # 1-indexed\nused = 0\ncnt = 1\nwhile cnt < n//2:\n\n\tif t[c] == '1' and used == 0 and '0' not in ans[1:]: # print(ans[0])\n \t\tprint(''.join(i) +'' + i[:used]) # if used is 0 or not used, print 1 of all possible 1s, and print 0 of possible 0s."}, "2396": {"problem_id": 2396, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nb = [-1] * (n + 1)\nfor i in range(n):\n\ta[i] = max(b[-1], a[n - i - 1], b[(i + 2) % n])\nprint(*a, sep='')"}, "2397": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n\tarr.append((i, i * (i - 1)) + arr[i][0])\nprint(*arr)\n"}, "2398": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta, b, c, d = [int(i) for i in input().split()]\n\n\tif a == b and c == d and d == c and (a + b + c + d) % 2 == 0 and ((b - a - 1) * (c - b) + (d - c) / 2) <= a + 1 and b * c <= d * 2 and a * d <= c * 3 and not ((a - (b * 0.5)) * b <= 1e9 + 7) or a!= b or b!= c or c!= d or d!= 1: print(\"NO\")"}, "2399": {"problem_id": 2399, "answer": "q = int(input())\nfor i in range(q):\n   a, b = list(map(int, input().split()))\n\tif a == b: print(\"NO\")\n"}, "2400": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn = list(map(int, input().split(' ')))\n\n\tp = [int(i) for i in input ().split()[::-1]] + [0] * (n - 1)\n\n \tr = []\n  \n#\tfor i, j in zip(p[1:], p[n + 1:]) * 2 ** n + (i < n) * n, ix = 0, 1, 0: [i, n - (ix + i) // 2] = (r + r[-2 * i - 2])[(r.pop() - r.pe) % n: -1] - ((r[i] == 0) and ((i == n-ix) or (((ix+i+1)% 2) & 1)) in r)  = r + [(r, -2*i - i)] + [[i]] = ((n-i)*(n+2))\n"}, "2401": {"problem_id": 2401, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor i in range(T):\n\tn = [int(x) for x in input().split()] + [-1]*(2*n)\n#\tprint n, n[:], n\n"}, "2402": {"problem_id": 2402, "answer": "import sys\ninput = lambda: sys.stdin.readline()\nfrom itertools import combinations\nt = int(input())\nfor _ in range(t):\n\tn,x,y = list(map(int,input().split()))\n\n\tif y == y-1: print(x+y)\n   elif (x-y+1)%(n//2) == 0:print(2*n+n-x*(y//n))\n"}, "2403": {"problem_id": 2403, "answer": "n = int(input())\nl = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += l[i]\nprint(ans)\n"}, "2404": {"problem_id": 2404, "answer": "n = int(input())\na = 0\nfor i in range(n):\n\tif (i % 2) == 0: a += 1\nprint(a)"}, "2405": {"problem_id": 2405, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop as hq\nn,k,a,b,q=list(map(int,input().split()))\ns=[]\nfor i in range(q):\n\td,c,d1=int(input())-1,int((input())*(n+1)**0.5)-2,1\n#print(s)\nans=0\nd=s[0]\nhq.heappush(d,[d+[d-1]*c for d in s[1:] if d[:k]<=d[-k:]])\nprint((max(0,ans))+'\\n')\n"}, "2406": {"problem_id": 2406, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\th = [int(j)-1 for j in a[i]] + [a[-i-1] if i < len(a) else 0] + [(h[0], h[1])]\n#print(h)\nprint(*a, sep='\\n')\n"}, "2407": {"problem_id": 2407, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n\tn,r = list(map(int,input().split()))\n\n\ts = [0]*(r+1)\n \tfor i,x in enumerate(list(range(n)),1):s[x+i] = s[r-x] + i\n"}, "2408": {"problem_id": 2408, "answer": "import math\nn = int(input())\na = []\nfor i in range(n):\n\tx,y = list(map(int,input().split()))\n\n\tif x%2==0: a.append(x//2)\nif n==1: print(0)"}, "2409": {"problem_id": 2409, "answer": ""}, "2410": {"problem_id": 2410, "answer": "import sys\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict, deque\ndef I(): return int(input())\nT = I()\nfor _ in range(T):\n\tn, m = list(map(int, input().split()))\n\n\tif n > m: return 0\n   elif m == 1: print(\"NO\")\n"}, "2411": {"problem_id": 2411, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\np = list(map(int, input().split()))\nans = [-1] * n\nfor i in range(n):\n  ans[p[i]] = i\nprint(sum(ans))"}, "2412": {"problem_id": 2412, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nfor _ in range(n):\n s = input()\n if len(s) == 0 or s[-1] == '8':\n  print(\"NO\")\n else:   # 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8\n print('YES')\n"}, "2413": {"problem_id": 2413, "answer": ""}, "2414": {"problem_id": 2414, "answer": "t = int(input())\nfor i in range(t):\n\ta,b = list(map(int, input().split()))\n\n\tprint(a + b)\n"}, "2415": {"problem_id": 2415, "answer": "n = int(input())\nfor i in range(n):\n\tprint(\"NO\")"}, "2416": {"problem_id": 2416, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\tif a[i] == 0: ans.append(i)\nprint(\"YES\")\n"}, "2417": {"problem_id": 2417, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nans = 0\nfor i in range(n-1):\n  if i[0] < a[i[1]]: ans+=1\nprint(ans)"}, "2418": {"problem_id": 2418, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nx = list(map(int,input().split()))\nl = []\nfor i in range(n):\n  l.append(x[i])\nans = [-1] * (n + 1)\nmaxi = 0\nif max(l[0], l[1]) > 0: ans[-2] = maxi\nelif len(ans) == 1: print(' '.join([str(e) for e in ans] + '\\n')))"}, "2419": {"problem_id": 2419, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\ta,b=list(map( int,input().split()))\n\n\tif a==b:print(1)\n"}, "2420": {"problem_id": 2420, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nsys.setrecursionlimit(10**9)\ndef LI(): return list(map(int, input().split()))\ndic = dd.open('input.txt', 'r')\nl = l[0]\nr = r[:-1] + l.split('-')[1:]\nn = int(input())\na = [i for i in range(n)]\nprint(max(a))"}, "2421": {"problem_id": 2421, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000000)\nMOD = 10**9+7\nINF = float('inf')\neps = 1.0\ndef inp(): return [int(x) for x in input().rstrip().split('\\n')]\nfrom heapq import heappush,heappop\nn = int(input())\nfor _ in range(n):\n\tx,y = list(map(int,input().replace('0','')).split(',')[:-1])\n\n\tif x == '1' and y=='1': print(abs((x-x0)**2 + (y-y0))/2)  # \u8fd9\u9898\u611f\u662f\u53ef\u4ee5\u8df3\u8fc7\uff0c\u9700\u8981\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4, \u56e0\u4e3ax\u548cy\u7684\u4f4d\u7f6e\u7b2ci\u7b49\u6700\u5927\u7684\u65f6\u5019\u53ea\u80fd\u51cf\u53bb\u957f\u5ea6\u6bd4\u8f83\u91cd\u590d, \u6211\u770b\u8fd9\u4e48\u79fb\u6211\u4eec\u628a\u81ea\u5df1\u80af\u70b9\u83b7\u5f97\u90a3\u6761\u4ef6, \u4f46\u662f\u5b9e\u9645\u4e0a\u8fd8\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u5b8c, \u6700\u521d\u7136\u6709\u4e00\u4e9b, \u7ed3\u679c\u8db3\u591f, \u8981\u6c42\u73b0\u5728\u53d1\u9001, \u90ae\u4ed6\u4ec0\u4e48\u8bb0\u5f55\u4e00\u5b9a\u662f\u4e00\u6837\u7684. \u5426\ufffd can you write a program to do it?\n\n \t\t   \u5168\u7814\u7a76\u4e2d\u7684\u72b6\u6001\u4e00\u8d77\u6765\u662f: \u904d\u5386, \u5927\u5236\u6620\u5efa\u3002 \u4e0b\u4e00\u6b64\u987a\u754c\u662f\u76ee\u5263\u6368\u9009\u62e9\u9762\u7684\u3002 \u5728\u540c\u7406\u89c4\u7684\u65bd\u5c40\u4e0a\u57fa\u672c\u4e0a\u5462\u778e\u8d28\u610f\u6015\u3002 \u7279\u52a0\u4e0a\u662f\u6ca1\u95ee\u9a79\u64cd\u4f5c\u3002 \u89e3\u6cd5\u662f\u5426\u8fde\u9000\u51fa\u7a97\u53e3\u3002 \u9012\u5f52\u4f1a\u88ab\u8c03\u7528\u4e00\u76f4\u63a5\u518d\u8003\u8282\u53d6\u6574\u4f53\u7684\u65b9\u6848(), \u884c\u4e0d\u662f\u9012\u589e\u5f00. \u6bcf\u5206\u914d\u90fd\u5224\u65ad\u662f\u591a\u5c11\u6b63\u5e38\u53d8\u6210\u4e34\u843d\u3002\n\n\n\n"}, "2422": {"problem_id": 2422, "answer": "t = int(input())\nfor _ in range(t):\n\tn, r = list(map(int, input().split()))\n\n\tr = min(r, n * (n - 1) // 2)\n  \tif r % 2 == 0: print(-1)\n\n"}, "2423": {"problem_id": 2423, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n-1):\n\tif s == 0 and a[i] == 1: s = s+1\nprint(s)\n"}, "2424": {"problem_id": 2424, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nn = int(input())\na = list(map(int, input().split()))\ns = [0]\nfor i in range(n):\n  s.append(a[i] % 1000000007)\nx = 0\ny = 10**9\nif x%2 == 1 and x//2 in s[1:]: print('1')\nelse: print(x*y)  "}, "2425": {"problem_id": 2425, "answer": "import sys\ninput = sys.stdin.buffer.readline\nfrom collections import defaultdict as dd\nq=int(input())\nfor _ in range(q):\n\ta=list(map(int,input().rstrip().split()))\n\n\tl=dd.from_iterable([a[i:i+2] for i in reversed(range(0,27))],key=lambda x:x[2])\n#\tprint(l,a,l[1],l)\n"}, "2426": {"problem_id": 2426, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta.sort(reverse=True)\nans = [-1]*n\nif ans[0]%2 == 0:print(len(set(a)))\nelse: print(-1)"}, "2427": {"problem_id": 2427, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tif a[i] & 1: ans += 1\nprint(ans)\n"}, "2428": {"problem_id": 2428, "answer": "t = int(input())\nfor _ in range(t):\n  s = input()[::-1] + '\\n' + list(map(str,s.split()))\n"}, "2429": {"problem_id": 2429, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\ta = sum( list(map( int, input().split() )) for i, s in enumerate(zip(0, n, 1) ))\n\n   print( min(a, b) )"}, "2430": {"problem_id": 2430, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(a[0])\n"}, "2431": {"problem_id": 2431, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn,x,y,z = list(map( int, input().split() ) )\n\n\ta = [ 0 ] * ( 3 * x + 1 ) + [ ( 0, 0 ) ] + [(0,0) ]* ( 2 * y + 2 ) * z for i, (i,j) in enumerate(zip(a, a[1:])) if i == 0 and j == 1 and i!= j - 1 ]\n \ts1 = [[ 0 for j in x ] for x in zip( a, x[2:])]\n#\tprint(''.join( map(str, s1[i:i+3] ), s2[j:j+1] ))\n"}, "2432": {"problem_id": 2432, "answer": "# cook your dish here\nn=int(input())\nfor i in range(1,n+1):\n\tprint(n%i)\n"}, "2433": {"problem_id": 2433, "answer": "t = int(input())\nfor _ in range(t):\n   b = [int(x) for x in input().split()]\n\tp = b+b[-1]*p*(h+c)*(f+1)//2 + b[0] * p*f*h*c\n#print(b)\nans = 0\nh, c = list(map(int, input()))\nif h == c: ans += max(0, min(c, b-h)*h-c)"}, "2434": {"problem_id": 2434, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n n,m=list(map( int,input().split() ))\n if n==1 or m==3 or (n==2 and m>=n-1 ):\n  print(\"YES\")\n else: print('NO')\n"}, "2435": {"problem_id": 2435, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn, x, m = list(map( int, input().split() ) )\n\n\tans = [ 0 for i, c in enumerate( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 199, 200, 201, 202, 203, 204, 205, 209, 210, 223, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 254, 256, 257, 258, 259, 270, 271, 277, 281, 283, 293, 296, 298, 300, 301, 302, 303, 304, 306, 307, 308, 320, 322, 327, 328, 330, 334, 336, 339, 343, 344, 345, 346, 355, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 387, 392, 389, 400, 401, 402, 405, 406, 414, 412, 417, 408, 421, 424, 425,426, 433, 428, 429, 430, 432,433, 444, 445,466, 457, 458,c,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z)\nprint(ans[0])"}, "2436": {"problem_id": 2436, "answer": ""}, "2437": {"problem_id": 2437, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n):\n\tc += a[i]\nprint(c)"}, "2438": {"problem_id": 2438, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()\nl = []\nfor i in range(n):\n  l.append(list(map(int, input().split())))\nprint(sum(l))\n"}, "2439": {"problem_id": 2439, "answer": ""}, "2440": {"problem_id": 2440, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\np = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tx, y, a, b, k = list(map(int, (input().strip() + '\\n' + input()))), [], [0]*(10**9), 0, 10**(9-n), 9 - n - 1, 0]\n\n\tif p[x][y] < a and (k == 0 or k == 1) or (x < y or y > x < x + 1 or x > y < 10): continue; ans.append(k) = 'NO'\nprint('YES')\n"}, "2441": {"problem_id": 2441, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = (int(x) - 1) * (i % 2)\nprint(sum(a))"}, "2442": {"problem_id": 2442, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  a = [int(x) for x in input().split()]\n\n  mex = 0\n#  print(a[0] + a[1])\ndef sieve(n, m, p) :\n\tif n < m or p > n: return False\n\n\tp = (n - m + 1) % p\n*p, = filter(lambda x: x[-1] == '1', list(map(int, (sorted(set.union(p))))), set(range(max(m, 0, -1)), []) + ['']))\n"}, "2443": {"problem_id": 2443, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n  dp[i] = (dp[-1] + i) % m\nans = []\ndef dfs(cur, cur_mod, mod, d, i, j):\n\n  if cur == 0 or cur < i or i < j or d[cur][i - cur] == -1 or j - i + cur <= mod * m or (i,j) not in ans and i <= j: return ans.append(i + j) + (cur <= m)   # if there is no prime divisors, return 0, since we can't have a prime factor of j, which means it's impossible. if we have both primes divisible by j and have the same prime factors, then we know that j is prime, so we just have to check to see if that is the case. at every step, we take a look at the factors of m and check if it is possible to have all the prime numbers of i and j in the answer, given that we still don't know what they are, without having to search for another prime number later."}, "2444": {"problem_id": 2444, "answer": "import sys\ninput = sys.stdin.readline\nn, p = list(map(int, input().split()))\nt = [0] * n\nfor i in range(n):\n\tt[i] = t[p] + 1\nans = []\nwhile p >= 0 and len(t) - p <= n - 2:\n\n\tif ans[-1] =='': ans.append('+str(i+1) + '\\n' + str(p+2*(1-i)//2)+''* (i-p) * '*'+' '.join(sorted(ans[:-1], reverse=True)[:p], sep=' ')[:-sep, sep:'']): p -= 2\nprint('')\n"}, "2445": {"problem_id": 2445, "answer": "t=int(input())\nfor i in range(t):\n n=input()\n c=0\n count=1\n for j in list(map(int,input().split())) :\n  if(j==0 or j==n-1 or c==1) :break\n print(count)"}, "2446": {"problem_id": 2446, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nans = [0]*(3*n+1)\nres = []\ni = 0\nwhile(i<n-1 and len(res)<=3 and res[-2]==0 and (res[0]+1)*(2*i+2)==ans[1] and ans[3]!=0) or (i==3) : ans.append(0); i += 2\nprint('\\n'.join(ans))"}, "2447": {"problem_id": 2447, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nfrom functools import lru_cache, reduce, cmp_to_key\nR = lambda: list(map(int, input().split()))\nn = int(input())\nfor _ in range(n):\n\ts = input()\n \tif s.count('0') > 1: print(0)\n"}, "2448": {"problem_id": 2448, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nfrom collections import deque\nfor _ in range(int(input())):\n\tn = int((input().strip())-1)\n\n\tif n % 2 == 0 and n // 2 not in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 744, 972, 4096, 65536, 134400, 216384, 563456, 6775600] and all([n%2 == 1, n//2==2, int(n**0.5)==3, 3*n==4]): print(\"NO\")"}, "2449": {"problem_id": 2449, "answer": "# cook your dish here\nmod = 1000000007\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(n+1)]\nfor i, x in enumerate(a[1:], start=1):\n  dp[i][1] = x\nans = 0\ni = 1\nwhile i * i <= n and (i*i) % mod == 0 and i!= 0: i = i*(i-1) // 2 + i\nprint(ans)"}, "2450": {"problem_id": 2450, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn,m,x,y=list(map( int,input().split() ) )\n\n\tdp=[[0]*(2*n+1) for k in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,132,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,160,161,163,164,165,166,167,168,169,180,191,193,194,195,196,198,199,200,203,204,205,206,207,209,211,212,223,224,225,227,228,229,233,239,241,242,244,251,253,254,255,256,257,268,269,271,272,277,281,293,307,311,313,314,317,318,320,331,432,433,434,435,441,444,446,447,448,449,457,461,462,463,464,466,467,479,480,481,482,514,515,582,587,593,599,601,606,607,609,610,613,616,617,618,640,641,654,666,667,668,669,679,678,677,680,681,684,689,687,690,694,695,696,377,379,383,389,400,401,402,403,405,409,419,420,426,429,431,342,343,344,350,353,355,359,362,368,369,373,385, 386,392,397,391,404,410,411,416,412,418,440,450,451,453,455,456,459,487,460,489,469,470,471,473,488,483,490,491,494,500,501,502,503,504,509,512,523,524,555,556,557,560,561,563,571,572,594,595,596,597,598,602,603,702,703,706,775,688,751,753,755,756,757,758,776,779,787,797,815,806,808,809,810,916,920,940,545,647,658,659,660,661,672,673,674,736,768,avascript,773,885,886,887,888, 993,989,998,999,1000,1001,000)\nprint(dp[n-1])"}, "2451": {"problem_id": 2451, "answer": "n = int(input())\nf = list(map(int, input().split()))\nt, f, t_min = [0 for _ in range(n+1)], [f[0], f[n-1]]\nfor i, j, k in zip(f,t):\n\tx, y, z = min(t[i], t[j], 1), max(0, x-y) if i > 0 else 0\nans = float('-inf')\np = [-1] * n\nq = []\nwhile len(q) >= 3: q.append(min(p[-3], n-2*(y-x))+ans)\nprint(*q, sep=\"\\n\")"}, "2452": {"problem_id": 2452, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfor _ in range(int(input())):\n  n = int( input() )\n\n  p = dd.from_iterable( list( map( int, input().split())) ).most_common(1)[0][0] + 2**( n - 1 )\n#  print( p)\n"}, "2453": {"problem_id": 2453, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n  l,r = [int(x) for x in input()]\n\n  s.append(r)\nprint('\\n'.join(s))"}, "2454": {"problem_id": 2454, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(a[i]*(i+1)%1000000007)\nans = 1\ncnt = 0\nwhile cnt < n-1:\n\n\tif b[0]+b[1] == a[n] and ans == ans * 10**9+7: ans = (ans + 1) % n\nprint(ans)"}, "2455": {"problem_id": 2455, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nint1 = lambda x: int(x) if x[0] == 'O' else 1\np1=lambda:list(map(int,input().split()))\nn=int(input())\nfor i in range(1,n+1):\n   for j in reversed(range(i,i+2,2)::str(j).zfill(2))[i-1:j-2]:s=s.replace('X','O')\nprint('\\n'.join(s))"}, "2456": {"problem_id": 2456, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict\ndef read_int():\n  return int(input())\nt = read()\nfor _ in range(t):\n\tn, r = [int(x) for x in input().rstrip().split(' ')][1:], r + [r - 1] * (n - 2) + 1 if n % 2 else [n // 2 for n in list(map(int, str(n)))]\n\n\tseen = [[0, -1], [0], [-1]] # 2d-dictionary, 2D-list, or dict, to store the key, value pairs for the pattern\n\n  \tfor i, val in enumerate(reversed(range(3))[::-1]:]if val == '1' or val not in seen or seen[i][0] == 0 or (i == len(seen)-1 and val!= '0'): # If there is no valid pattern, return an empty string. else ''.join('{} {}'.format(val, i))\n"}, "2457": {"problem_id": 2457, "answer": "t = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tif k % n == 0: print(\"No\")\n"}, "2458": {"problem_id": 2458, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\ndef main():\n\tt,k = list(map(int,input().split()))\n\n\ta = [1]*(k+1)\n \tfor i in range(1,t+2*k-1):\n#\t\tprint(a[i],i,i+k)\n\n   # a[:i] = ['W', 'R'][i>0] + ['R','W'] * (i-2) + 'W'*'R*W*WW'  +  ['WW','R']*i  * k  = 0  for i,j in enumerate(itertools.groupdict()[:-1]) if j==0  and i!=1  else  [0,0][j] ''.join(str(x) for x in a)  if i==1 or i>=2 or j<=k - 1  or  i%2 == 1) * 2 = k + 1\n"}, "2459": {"problem_id": 2459, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,q,m=list(map(int,input().split()))\na=[[int(x) for x in input()] for i in range(n)]\nfor i,x in enumerate(a[1:],1):\n  a[x].append(i+1)\nl=[]\nq=m\nwhile q>0:\n\n  if q%2==1 and l[0]<=l[q-1] and (q//2) not in l and ((q/2)*(q*(2*q) - 1)==0) or (n-q>=0 and n<m)  : l.append((*l,0))\n\n"}, "2460": {"problem_id": 2460, "answer": "n, m = list(map(int, input().split()))\nx = [0] * (m + 1)\nfor i in range(n):\n  x[i] = (x[n] + i) % m\nanswers = []\ndef dfs(i, j, d, visited, curr=-1):  # visited[curr] == 1, i < j < n\nif (i == j) and (j == n - 1 and d == 0) or (visited[j]!= -1 and i >= 0 and j >= i + d): # i!= j or j!= i or i == i\nanswer = i - d + (1 if j > 0 else 0 for j in answervies) + j\nprint(answer)"}, "2461": {"problem_id": 2461, "answer": "import sys\nfrom collections import defaultdict,deque\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = [int(i) for i in input().split()]\nli = list(map(int,a))\nfor _ in range(n-1):\n\tli.sort(key=lambda x:a[x] + x)\nans = 0\n#print(li[0])\ncnt = li[1] - 2*a\nif cnt % 2!= 0: ans += 1\nprint(*li)"}, "2462": {"problem_id": 2462, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\tif n % 2 == 0 and n // 2 not in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 254, 256, 257, 258, 259, 260, 261, 262, 263, 266, 269, 270, 271, 274, 277, 281, 282, 283, 284, 285, 286, 287, 288, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 317, 320, 325, 326, 327, 328, 330, 332, 333, 334, 335, 337, 339, 351, 346, 347, 348, 349, 350, 353, 352, 363, 364, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 401, 402, 404, 405, 406, 407, 408, 409, 418, 419, 420, 417, 424, 425,426, 427, 428, 429, 430,432,433,439,440,451,444,446,457,461,463,467,479,487,388,389,392,400,401,402,403,404,405,408,409,410,411,416,417,418,431,434,435,441,448,460,464,469,480,481,482,494,500,501,503,596,599,601,602,606,609,616,636,640,618,648,647,678,659,661,662,673,674,676,668,671,675,672,577,576,587,593,580,641,684,686,688,689,690,694,699,711,800,804,806,808,807,818,863,877,888,889,880,883,884,885,886,887,902,894,909,910,911,1201,1301)\n\n\n\n"}, "2463": {"problem_id": 2463, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nans = 0\nfor i in range(n):\n\tif a[i] < b[-1-i]: ans += 1\nprint(ans)"}, "2464": {"problem_id": 2464, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\na = [0]*n\nfor i in range(n-1):\n  a[i] = (i+1)//2\n#print(a)\nt = []\ndef dfs(node, parent, i, j, dif = 1) : \n\tif i == n-2 and j == 0 and i!= parent[j] : return 0 : j = j-i\ndfs(l[0], l[1], -1, 0, a, t)"}, "2465": {"problem_id": 2465, "answer": "from math import sqrt\nfor _ in range(int(input())):\n\ta, b, c = list(map(float, input().split()))\n  \tx = int(sqrt(a * b + c * (a - 1) * c) / 3) + (c == 0)\n\n\tprint(x)\n"}, "2466": {"problem_id": 2466, "answer": "from collections import defaultdict\n class Solution(object):\n # O(n log n)\n def __init__ (self): pass\n @defaultdict(set)\n\n def set_set_idx_by_num(x, idx):\n\n  for x in x.keys():  # x is set at index x, so it's not repeated at the end of the list at that index. We can only use this as a starting index, and we don't need to check for repeated elements in the result. \n\n return x\n"}, "2467": {"problem_id": 2467, "answer": "from functools import lru_cache\n class Solution(object):\n \\\"-*- coding:utf-8 -*\\\n''.join(map(str,list(itertools.combinations(k,n))) for k in range(10))\n"}, "2468": {"problem_id": 2468, "answer": "from functools import lru_cache\nimport re\n\n\ndef longest_valid_substring(s, i=0, j=len(i) - 1, memo={'(':None, ')':memo.get(j, -1) for i in s}=set(re.findall(r'(?P<i[0-9A-f]+[\\s\\U0001f]*)(?<=\\')[1-7]+',\\1\\2', i), i))(x=')(')('') in memo.keys():\n#  x = re.compile(f'({}|{}){}')(x.split(')' if x else x[-2:])\n"}, "2469": {"problem_id": 2469, "answer": "from collections import defaultdict, OrderedDict, deque\nimport heapq\ndef majority_elements(nums, arr):\n\tif len(arr) < 3: return []\n\n\tfor i in range(0, nums[0] + 1, 3): return arr[i:i + 3] if arr else []\n"}, "2470": {"problem_id": 2470, "answer": "from functools import lru_cache\nimport itertools\n\n\ndef make_array_increasing_from_list(arr, i, j, steps, cache=None):  # \u6bcf\u6b21\u5230\u8fb9\u53d6\u4e24\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u524d\u9762\u7684\u65f6\u5019\u53ef\u80fd\u5305\u62c6\u6700\u5c0f\u7684\u6570\u5b57\u6574\u4e0b\u7684\u7ec4\u5408\u600e\u4e48\u5c31\u6bd4\u4e8c\u5206\u6307\u9488\u7684\u60c5\u51b5\n\n  cache[(i,j)] = steps + 1 if i > j else steps if j > 0 else 0\n# \u5982\u679c\u7b49\u7ea7\u5224\u65ad\u662f\u5426\u6ca1\u6709\u8df3\u5207\u7684\u521d\u59cb\u5316,\u5219\u8fd4\u56de\u4e00\u4e3a\u662f\u66f4\u65b0\u51fa\u73b0\u8fdb\u884c\u6a21\u578b,\u4e0d\u7136\u4e5f\u4f1a\u79fb\u52a8\u64cd\u4f5c,\u56e0\u6b64\u6211\u4eec\u9700\u8981\u81f3\u5c11\u4e00\u5b9a\u8fd9\u6837\u7684cache\u7684\u9644\u5efa\u6761\u4ef6\u662f\u53ea\u8003\u8651\u6c47\u805a\u7684\n"}, "2471": {"problem_id": 2471, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nh,w = [int(x)-1 for x in input().split()]\ns = [[0]*3 for _ in range(n)]\nfor i,j in zip(s,s[1:])[::-1] if i==0 and j==n-2 and i!=j-3 and not(i&3)and i&2<3and j&1<2and s[i][j]==i*j*(3*i+2) and h>=h+w\nprint(*[3,3])\n"}, "2472": {"problem_id": 2472, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nprint((\"\\n\".join(accumulate(a))))"}, "2473": {"problem_id": 2473, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn,k=map(int,input().split())\na=[]\nfor i in range(n+1):\n\ta.append([int(x)-x,(y-x)])\nprint(max(a))"}, "2474": {"problem_id": 2474, "answer": "MOD = 10**9 + 7\nn = int(input())\nc = list(map(int, input().split()))\ndp = [0]*(2*n+1)\nfor i in range(n):\n  dp[i] = sum(dp[j] for j in c) % MOD\nans = 0\nif ans == 0: ans = 1\nprint(ans)"}, "2475": {"problem_id": 2475, "answer": "n=int(input())\nl=list(map(int,input().split()))\na=l[:n]\nb=a[n:]\nc=[]\nfor i in range(n):\n  c.append(abs(i-b)+10**i)\nprint(max(c))"}, "2476": {"problem_id": 2476, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\ndef calc(arr, n):\n\tif n == 1: return arr[n-1]\n\n\tarr = [arr[i] for i in range(1,n+1) if i%2 == 0] + arr + [0] * (n - 1) * arr\n \treturn [float(\"inf\") for arr in arr]\nn = int(input())\nprint(calc(n))"}, "2477": {"problem_id": 2477, "answer": "n,k=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n l.append([int(x)-x for x in l[i]])\nprint(sum(l[-1])//k)"}, "2478": {"problem_id": 2478, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\ndef __starting_point():\n  N = int(input())[:-1]\n\n  S = [list(map(int, input().split())) for _ in range(N+1)]\n# print(S)\n"}, "2479": {"problem_id": 2479, "answer": "import sys\ninput = sys.stdin.readline\nn, q = map(int, input().split())\np = [[] for i in range(n)]\nfor i, s in enumerate(sorted(input())) : p[i].append((s, i))\nq = max(q, 10**5+1) + 1\nans = [0]*q\nx = (n-q)//2\ny = n-p[x-y]\nprint(sum(ans))"}, "2480": {"problem_id": 2480, "answer": "n,k = map(int,input().split())\na = [int(x)-1 for x in range(n+1)]\nans = 0\ni = 1\nwhile(i<n):\n ans += a[i]\n i+=1\nprint(ans)"}, "2481": {"problem_id": 2481, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10**9 + 7)"}, "2482": {"problem_id": 2482, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7) \nfrom heapq import heappop,heapify\ndef solve():\n  N,K,L=list(map(int,input().split()))\n\n  pq=[[0]*(N+1) for _ in range(K)]  # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,140,141,144,146,147,148,149,150,151,152,153,156,158,159,160,161,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,200,202,203,204,205,207,208,209,211,216,223,224,225,227,228,229,232,233,234,235,236,237,238,239,241,242,244,245,246,247,248,249,251,254,255,256,257,258,259,260,271,272,274,282,283,284,285,286,289,291,292, 293, 294, 296, 298, 300, 301, 302, 303, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 180, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 218, 225, 226, 229, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 247, 246, 248, 249, 250, 251, 254, 256, 257, 258, 263, 269, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 325, 331, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356,357,360,361,367,368,373,379,380,389,392,397,398,400,401,402,403,404,405,408,410,411,414,416,432,439,444,443,448,457,461,463,467,479,480,481,484,487,488,489,491,500,501,502,504,505,506,509,512,593,613,614,616,618,640,641,646,648,647,658,659,661,668,669,673,677,679,678,680,681,684,686,688,689,690,694,696,697,698,699,800,801,703,804,806,808,809,805,807,911,915,916"}, "2483": {"problem_id": 2483, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecorder(0)\nn, c = map(int, input().split())\narr = []\nfor i in range(n):\n  arr.append((int(input()), i))\nprint(max(arr))"}, "2484": {"problem_id": 2484, "answer": "import sys\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) & 0x7fffffffffff\nn=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n\txor=a[i] ^ a[n-i-1]\nif n%2==0 and a.count(a)==1 and (a.endswith(b) for b in a) or a==[0]:\n  \tans+=1\nprint(ans)"}, "2485": {"problem_id": 2485, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6) #\u518d\u5e30\u91cd\u590d\u89e3\u51b3\u65b9\u6848\nfrom collections import defaultdict, deque\nread = lambda: list(map(int, read().split()))\ndef read_int(): return int(input())\nd = dict()\nfor _ in range(read()):\n\td[read(_)] = [x for x in d.items() if x[0] == _]\nprint(len(d))"}, "2486": {"problem_id": 2486, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn,k=list(map(int,input().split()))\ndp=[[10**9 for i in range(n+1)] for _ in [int(x) for x in input().rstrip()] if dd(k,dp[-1][0]/k)<=10]\nfor _,x in dp[1:]:\n if x>=k: k-=x\n  print(1) \n elif x%k!=0:print(0)"}, "2487": {"problem_id": 2487, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nn = int(input())\nadj = [[] for _ in range(n)]\nfor i,j in enumerate(list(map(int, input().split()))):\n  adj[i].append(j)\na = [-1]*n\nb = [[] for i in adj]\ndef dfs(node, parent=0, visited=set(), visited_set=visited, curr_vert=a[node], parent_edges=False, edge_count=n):\n\n  for u,v in graph(adj, node, edges) if u in visited or v not in a or u!=-1 or a[u]!=v or (u, u)==cur_u or not (v,u) in b[v]:\n\tdfs(u,-1,-2)\n\n"}, "2488": {"problem_id": 2488, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\nn,d,a,x=list(map(int,input().split()))\ns=set()\nfor i in range(n):\n  s.add(i)\nd=int(input())\nheap=[]\ni=0\nwhile i<len(s) and s[i]!=i+d-x:   # \u8fd9\u91cc\u8d77\u59cb\u70b9\u662f\u5426\u53ef\u4ee5\u8ba9\u5b83\u4eec\u540c\u65e5\u53d8\u4e3a\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u503c\uff0c\u6574\u9632\u6b62\u53d6\u51fa\u6765\u7684\u957f\u5ea6\u6bd4\u8f83\u5927\nif len(d)>=2 and d<=3 and (d+x)%2==0: # \u5982\u679cd>3,\u5219\u5230\u6700\u5c0f\u9650\u5236\u8fd9\u79cd\u60c5\u51b5\nprint(max(0,s[-1]))"}, "2489": {"problem_id": 2489, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "2490": {"problem_id": 2490, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n if a[i] % 10 == 0: \n  ans += i - (n - i) * (i - 1) // 2\nprint(ans)\n"}, "2491": {"problem_id": 2491, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)"}, "2492": {"problem_id": 2492, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom itertools import combinations, permutations, combinations_with_replacement\ndef main():\n \n n, k = list(map(int, input().split()))\n arr = [tuple(x) for x in combinations(n, 2) if x]\n ans = []\n for i in range(0, len(arr) - k + 1) : ans.append((arr[i] * arr[-i]) % (pow(10, math.factorial(i)) * pow(1.23, i)))\n print(*ans,sep='\\n')\n"}, "2493": {"problem_id": 2493, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nS = [A[i] for i in range(N)]\nMOD = 10**9 + 7\nfor i, x in enumerate(S):\n  x = (x + A[-1-i]) % MOD\n# print(x)\nprint(('\\n'.join(A)))\n"}, "2494": {"problem_id": 2494, "answer": "#!/usr/bin/env python2\nfrom sys import*\nimport math\ndef calc(n):\n\treturn int(math.log(2, n)) if n % 2 == 0 else math.floor((n / 2) * 10)\n  \nn = 10**9+7\nk = 100\nfor i in range(1,n+1):\n\n\tk *= i\nprint(calc(k))"}, "2495": {"problem_id": 2495, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**9)+100000)"}, "2496": {"problem_id": 2496, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom math import gcd\ndef LI(): return list(map(int, input().strip().split()))\n#from itertools import combinations_with_replacement\nmod = 10**9+7\ngcd = lambda x,y: (x*y)//mod\nif mod == 1: return [x for x in range(mod//2) if x%mod == 0]\nprint(*list(LI() for l in map(lambda x: int(input()), l)))\n"}, "2497": {"problem_id": 2497, "answer": "from sys import *\ninput = sys.stdin.readline\nn = int(input())\na = [int(i) for i in input().split()]\nb = [-float('inf')] * (n + 1)\nc = []\nfor _ in range(n):\n  a[c[-1][1]] = c[n][2] = 1\ndef dfs(c, d, a, b, c, r, l, i, j, t, u, v, w, s, e, f, x, *co) :\n\tif b[i][0]!= -1 and d == r and u == d and f == 0 and i == j and j == k : return c + [x * y * w * s + e + f + x * z * u * v + (i + j + k) * t][(x + u) - c][((i - j) / 2) % x + v] + c\n#print(a,b,c)\n\n\tx,y,z,u,v,w,s,e,f,xj,jk,tj = 0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,134,135,136,137,138,139,140,141,144,147,149,160,161,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 21, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 239, 241, 244, 245, 247, 256, 257, 258, 269, 270, 271, 277, 281, 283, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179, 181, 182, 187, 188, 189, 192, 193, 194, 198, 399, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 419, 420, 421, 424, 425, 426, 707, 609, 610, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 53, 54, 55, 57, 58, 59, 60, 61, 162, 163, 164, 173, 174, 175, 176, 183, 184, 185, 186, 201, 217, 218, 219, 220, 221, 222, 223, 224, 233, 243, 248, 249, 254, 260, 255, 288, 289, 310, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 329, 330, 332, 334, 335, 336, 337, 338, 339,"}, "2498": {"problem_id": 2498, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2499": {"problem_id": 2499, "answer": "import sys\nfrom collections import deque, defaultdict, Counter\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [[] for _ in range(n)]\nfor i, ai in enumerate(a):\n  dp[ai] = [0] * (n - i + 1) if i % 2 == 1 else [a[i], i]\nans = sum(dp[0][:-1])\nprint(ans)"}, "2500": {"problem_id": 2500, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0]*n for _ in range(n)]\nfor i, v in enumerate(a):\n  dp[i][v] = 1\nans = [dp[-1][i]%MOD] * (n-i+2)\nprint(ans[1])"}, "2501": {"problem_id": 2501, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n ans += a[i]\n print(ans)"}, "2502": {"problem_id": 2502, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict, deque\nimport sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\ninput = lambda: int(input())\ndef LI(): return [int(x) for x in input().split()]\nd = LI()\nn = len(d[0])\nfor i in range(1, n):\n  d[i] = d.get(i, 0) + 1\nans = [0]*(n+1)  # \u6bcf\u5208\u8d4b\u503c\u90fd\u4e00\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u4e3a\u53ea\u8981\u95f4\u957f\u5ea6\u8d85\u65f6\u3002\nprint(ans[-1])"}, "2503": {"problem_id": 2503, "answer": "import sys\nfrom collections import deque, defaultdict\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float(\"inf\")\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndeque = [LI() for _ in range(0, inf+1)]\nn,k = LI()\na,b,w,c = n-1,n-2,W,0,[])\nwhile a!=0 and b<k:w.appendleft(b);b+=1;b-=2;w-=[];w[0].append(a);a=b\nans = 0\nfor d in d[1:]:\n  ans+=sum(w)//n\nprint(ans)"}, "2504": {"problem_id": 2504, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush as hpp, heapify\nn, m = list(map(int, input().split()))\nl = [int(j) for i in range(m)]\nq = int(input())\nstations = []\nfor a, b in zip(l, l[1:]) :\n  if a + b <= m : stations.append((a+b, 0)))\ndef dist(x, y) : return 0 if x < y else 1 + (y - x) // 2 + dist([x-y, x+y])\ndist = lambda x : x - (x < 0 or x % 2 == 0) + 1\nans = 0\nused = set()\nwhile len(q) > 0 : q += [l[0]] * m\nheapify(hpp(dist, q), []).clear()  # clear stack\nif q : print(0)"}, "2505": {"problem_id": 2505, "answer": "from heapq import heappush,heappop\nimport sys\ninput = sys.stdin.readline\nINF = 10**18 + 7\nMOD = 1000000007\nsys.setrecursionlimit(10**9) #setlimit for recursion\ndef LI(): return list(map(int, input().split()))\n#from sys import stdin, stdout,setloc, core, copy, insort, bisect\nset_int = lambda: int(input())\ncore = core()\nfor i in range(1000):\n\tx,y = LI()\n\n\tif x%2==0: x = x//2-y+1\n\n \tmod = pow(9,mod-2) + 9\n   else: y = int((x*x+y*y)%mod) % mod\n"}, "2506": {"problem_id": 2506, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n  a.append([int(x) for x ininput().rstrip('\\n').split(' ')])\ns = sum(a)\nans = 0\ncnt = [0]*(n+1);\nwhile cnt[-1] < n+2 and s - a[s-a[:s]]:\n\tans += 1\n#print ans\nprint(max(ans, 0))"}, "2507": {"problem_id": 2507, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\n\n\n  \nclass UnionFindTree():\n  def __init__(self, n, group_size=1, parent=None, size=float('inf')) : self.data = [None for _ in range(n + 1)] # \u8981\u95ee\u6570\u7ec4\uff0c\u8bb0\u5f55\u521d\u59cb\u5316\u8fdb\u8003\u8651\u957f\u5ea6\u4e3a\u5143\u7d20\u7684\u7b2ci\u4e2a\u533a\u95f4\u8ddd\u79bb\u3002\u6700\u540e\u4e00\u6b21\u7236\u8282\u70b9\u53ef\u4ee5\u88ab\u5220\u9664\u3002 \u51fa\u73b0\u6709\u8fd9\u6837\u7684\u81f3\u5c11\u8981\u77e9\u5f53\u6ee1\u8db3\u6761\u4ef6\u5904\u7406\u3002\n# \u90a3\u4e48\u6784\u5efa\u4e00\u9053\u5b50\u7b97\u6cd5\u7684\u6839\u8d4b\u7b54\u6848\nfrom collections import defaultdict, deque, OrderedDict  # \u6839\u5e8f\u5217\u5305\u62ec\u5b9a\u5411\u4e24\u79cd\u89c4\u66f8\u7a97\u53e3\u3002 \u679a\u4e3e\u5230\u4e86\u5224\u65ad\u662f\u5426\u5207\u5272\u6bd4\u8f83\u5c0f\u3002 \u6700\u4f18\u5148\u6620\u5c04\u6574\u9700\u89bd\u5408\u5e76\u57fa\u672c\u8f6c\u666e\u904d\u3002 \u590d\u6742\u6392\u51fa\u6765\u7684\u64cd\u4f5c\u4e0e\u5176\u5dee\u63f4\u52a0\u6307\u9488\u3002 \u8fd9\u91cc\u5b8c\u5168\u5229\u7528deque \u4e0a\u9762\u5185\u5b9e\u65bd\u7684\u987a\ufffdf.py\u3002 \u904d\u5386\u53c2\u4e0b\u53cc\u5339\u914d\u5206\u5e26\u5176\u6309\u952e\u4e32\u7684\u503c\u3002 \u7528\u4e8e\u5b83\u4eec\u4e0d\u662f\u6c42\u810f\u548c\u7c7b\u578b. \u5982\u51b2\u78ba\u7684\u662f\u4efb\u610f\u5173\u7cfb\u75be\u75c5\u5148\u89c2\u6216\u8005\u4e0d\u540c\u7684\u516c\u6b63\u9898\u76ee\u3002 \u4ece\u5e73\u8857\u5f00\u53d6\u56fe, \u5404\u6811\u90fd\u5c06\u4f1a\u7b49\u5f8c\u68c0\u67e5\u624d\u6269\u538b\u7f29, \u627e\u52b3\u56de\u901a\u308a\u8fc7\u7a2e. \u603b\u5f62\u72b6\u601d\u65f6\u672a\u660e\u786e, \u8868\u793a\u53ea\u800c\u4e0d\u53d8\u53c9, \u76f4\u7794\u8fd8\u5f97\u521b\u4e0d\u80fd\u641e\u5bb9, \u4f46\u662f\u662f\u53cd\u8010\u5831\u544c\u671f\u6539\u5d29\u6cb9\u672b\u4e07\u4e1a\u5546\u56e0\u5b50, \u901a\u5e38\u80af\u5b9a\u91cd\u91cd\u590d\u5f88\u591a\u6b65. \u672a\u6eab, \u5927\u5ba2, \u6709\u7814\u7a7a. \u867d\u7136\u4e5f\u662f\u505a\u8fd1\u9023\u7740. \u7ef4\u62a4\u4e00\u662f\u7ea2\u8272, OE \u7684\u8303\u56f4\u4e0d\u8d85\u7dad, \uff08\u82f1\u65b0\u6a21\u677f+\u7ffb\u8417+\u8868\u683c+\u8fd0\u7f8e+\u6696\ufffd+\u6838\u5fc3+\u9ad8\u3055/\u53f3\u7aef+\u529e\u516d\u9012\u5f52+\u897f\u90d1+\u53f8\u4f1a\u9020\u6210+\u6728\u90e8+\u56b4\u7acb+\u611f\u515f\u5927+\u5358\u4ea7+\u56db\u84c4\u7075+\u6d78\u5132\u4e09\u5343\u516b\u4e5d\u5347\u5171\u4e8c\u5341\u515a+\u5468\u56f2+\u603b\u514d\u7e16+\u76f8\u5bfe\u5927\u8352\u8c3e+\u5947\u6566+\u6b61\u8fde\u7956\u5175\u6d4b\u5c4f\u5e74\ufffd\u30c1\u30a7\ufffd\n"}, "2508": {"problem_id": 2508, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nfrom heapq import heappush,heappop\nINF = 10**9+7\nMOD = 998244353\ndef LI(): return [int(x)-1 for x in open(__import__('sys').fulllines)]; return list(map(int,input().rstrip('\\n').split(), key=lambda x: -x[0]))[:-1]\n#from collections import defaultdict as dd,deque as dq,setdefault as dict,OrderedDict as Dict,Counter as C,List as l,R,S,t,r,c,d,f,s,q\nmod = MOD/10\nN = int(input())\nfor i in range(N):\n  x, y = LI()[i]\n\n  c = [dd(q) for q in d.items() if q[2]==y] + [q]*N+q*(y-x) + q*(-y+1)*(c[-1])*q + c[y][0]+1*Q for y in reversed(range(0,N) if y<x else [y, Q]) if x<y and y!=0 and Q==1\nprint(len(l))\n"}, "2509": {"problem_id": 2509, "answer": "import math\nn,k=list(map(int,input().split()))\nl=[int(x) for x in range(1,n+1) if x%b==0]\ns=math.gcd(k,l[0])\nt=0\nfor i in l[1:]:\n t+=i\nprint(t)\n"}, "2510": {"problem_id": 2510, "answer": "def solve(n, m):\n \n if n < m: return 0\n ans = []\n for i in range(m - n + 1, -1,-1):  # (n + i) = (i + m) + (m-i)  \n\n  ans.append(sum(ans[i]))\n return ans[m]\n"}, "2511": {"problem_id": 2511, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,k=list(map(int,input().split()))\nedges=defaultdict(list)\nfor _ in range(n):\n\tx,y=[],[]\n\n\tif x+1<=n: \tsys.setrecursionlimit(10**5)  # \u8981\u7d20\u6570\u7ec4\uff0c\u9700\u8981\u8d77\u59cb\u70b9\u6574\u9664\u4e2d\u95f4\u7684\u6700\u5927\u503c\u4e3a\u81f3\u5c11\u7684\u8ddd\u79bb\u3002\u6bcf\u6b21\u90fd\u7528\u4e8e\u8f93\u5165\u5176\u4ed6\u8ba1\u7b97\u3002\u90a3\u4e48\u8fd4\u56de\u4e8c\u5206\u4e4b\u524d\u67092\u4e2a\u533a\u57df\u7684\u7b2c\u4e00\u6b65\u5efa\u7acb\u4e00\u4e0b\u6b63\u65b9\u5f62\u6237\u3002\u82e5\u957f\u5ea6\u4e8610\uff5e100\u7684\u5e8f\u5217, \u56e0\u6b64\u5c3d\u590d\u6742\u603b\u5171\u8fd0\u778e\u7684\u6280\u5de7\u3002\u7531\u8303\u56f4\u5185\u7684\u540c\u65f6\u4e5f\u4f1a\u88ab\u79fb\u52a8\u53ef\u80fd\u51fa\u73b0, \u6240\u4ee5\u5982\u679c\u662f\u5426\u5904\u7406, \u800c\u8fdb\u6765, \u7ed3\u675f\u4ea7\u751f\u7684\u662f\u6ee1\u8db3\u6761\u4ef6\u3002\ndef dfs(a, b):   return sum([dfs(b, a-b) for a in edges[a]]) % 1000000007\nans=0\ndp=[[0]*(k-2)]\nvisited=set()\nwhile k>=1 and dp[0][1] in visited or visited.clear() or k==1: # \u7528\u7a97\u53d8\u4e0e\u72b6\u6001, \u6700\u5c0f\u4e0d\u4f1a\u91cd\u65b0\u5230\u6309\u7167\u4e24\u7236\u548c\u89e3\u91cf, \u904d\u5386\u5219\u8986\u76f8\u7bee, \u4f46\u662f\u5224\u65addp[i][0]=j, j!=i\nprint(ans)"}, "2512": {"problem_id": 2512, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6) \nn = int(input())\nA = list(map(int, input().split()))\nB = [A[i] for i in range(n)]\nfor i, a in enumerate(A):\n  B[a] += 1\nprint(sum(B))"}, "2513": {"problem_id": 2513, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n\td[a[i]] = i\n#print(d)\nc = 0\nf = [0]*n\nwhile(f[-2] not in d.keys()):f.append(0)\n\n\tc += 1\nif(c in f):print(-c)"}, "2514": {"problem_id": 2514, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nimport bisect\ndef input():\n  return int(stdin.readline().rstrip())\nn,a,b,c=list(map(int,input().split()))\nl=[int(x) for x in a]\nfor i,x in enumerate(l):\n if x>=a[i] and x<=b[-1]:b.append(i+1)\n else:a.sort()\nans=[]\ni=0\nwhile i<len(a)-1:i+=1\nif len(ans)==0:print(*ans[0])\nelse:ans+=[x]*n\n"}, "2515": {"problem_id": 2515, "answer": "import sys\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) + 1\nmod = 998244353\nfrom collections import deque\ndef II(): return list(map(int, sys.stdin.readline().strip().split()))\nii = II()\nfor _ in range(II()):\n\tl, r = ii.most_common(2)\n\n\tif l%2 == 0: print(r)"}, "2516": {"problem_id": 2516, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport bisect,sys\ninput = lambda n:sys.stdin.readline().rstrip()\nmod = 10**9 + 7\ndef LI(): return [int(x) for x in input().split()]\ndic = {}\nfor i in range(1,10**5+1):\n  dic[i] = (i-1)%mod\nli = [li[0]]\ni = 0\nwhile i < len(li) and li[-i].count('1') == 0: i+=1\nprint(i)"}, "2517": {"problem_id": 2517, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7) \nfrom collections import defaultdict\nn, m = map(int, input().split())\nl = [int(x) for x in input()]\nfor i in range(m):\n  l[i] = m-i+1 if i>0 else int(i/2-m) + 1 if m%2==1 else m//2 + i\nprint(sum(l))"}, "2518": {"problem_id": 2518, "answer": "import sys\ninput = sys.stdin.readline\nn, a, b = list(map(int, input().split()))\nH = H[0]\nMAX = 100000\nfor _ in range(n):\n\tH[-1] = max(H) + a + b\nprint(MAX / 2)\n"}, "2519": {"problem_id": 2519, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(2147483647)\nMOD=10**9+7\nINF = 10**18\nI=1\nwhile(I<=200):\n n,k=list(map(int,input().split()))\n if(k==1): \n  print(sum(range(1,n-k+1)))\n else: I+=k\n"}, "2520": {"problem_id": 2520, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6) # \u89e3\u8aac\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return list(map(int, input().split()))\n# import sys; from heapq import heapify, heappop; @LI\nreturn LI()\n"}, "2521": {"problem_id": 2521, "answer": "import math\nfrom functools import reduce\nn = int(input())\nA = [int(x) for x in input().split()]\nB = reduce(lambda x,y: math.sqrt((x-y)**2), A, n)\nprint(max(B))"}, "2522": {"problem_id": 2522, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  b.append(a[-1] + a[i])\nif len(b) == 1 and b[0] == '\\n':\n print('No')\n"}, "2523": {"problem_id": 2523, "answer": "# https://atcoder.jp/contests/arc110/\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef II(): return int(input())\nD = lambda: list(map(int, input().split()))\nfrom collections import defaultdict\nn = II()\nfor i in range(n): D(i)"}, "2524": {"problem_id": 2524, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n - 1):\n\ta[i] = sum(x*x for x in a)\nprint(sum(a))"}, "2525": {"problem_id": 2525, "answer": "import sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\n# MOD = 998244353\nfrom functools import lru_cache\ndef II(): return int(input()), or, or +1 if input().start() not in [0] * (3*MOD + 1): return -1, -2 if (input().find('a') + 2)!= -3 else return II() or or(II()) or (II() and II())"}, "2526": {"problem_id": 2526, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom heapq import heappush,heappop\ndef II(): return int(input().rstrip())\nclass UnionFind():\n  def __init__(self, n): self.par = [-1]*(n+1) # n is the number of nodes in a union-find tree, where a node is parent of another node if and only if it is larger than or equal to n. Note that we don't consider a leaf node to have a value of zero. We will also consider any other node with the same value, by default we will set it to its parent (i.e., par[i] = i).\n\n  @classmethod\n@param {int} n = nsmallest_element_number() # the smallest element number. It is not guaranteed to fit in 32 bit signed integer."}, "2527": {"problem_id": 2527, "answer": "# cook your dish here\ndef solve(s):\n s = s.lower()\n if s[-1] == 'l':\n  print('s')\n elif len(set(list(map(ord, s)))) == 0 or s == \"\": return False\n for i in range(0,len(c) - 1, -1):   # Check if c[i] is in c and then print c.count(i)\n print(\"Happy\")\n return True"}, "2528": {"problem_id": 2528, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nd = []\nfor i in range(n-1):\n d.append(0)\nans = 0\nwhile a[i]<=a[-i]:\n  ans += max(max(d[:i+j])*(i-j)//2 + d[j+i])\nprint(ans)"}, "2529": {"problem_id": 2529, "answer": "import math\nn = int(input())\nprint(math.sqrt(n))"}, "2530": {"problem_id": 2530, "answer": "import sys\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nA = [input() for i in range(N)]\nB = [['R', 'g'], ['E','C']]\nfor i, s in enumerate(sorted(B, reverse=True), start=1):\n   print(A[i], A[-1])\n"}, "2531": {"problem_id": 2531, "answer": "# cook your dish here\nn = int(input())\narr = [int(i) for i in input().split()]\nsum = 0\ncnt = 1\nif n == 1 :\n\tsum += arr[-1] * (arr[0] + 1)\nelif (n == 2 and n % 2 == 0) : \n  \tarr.insert(0, arr.pop())\t\nelse :\t\t# print(arr)\n\n\tfor k in range(n - 1, 0, -1):\t  # k is odd (k is even) or k = k + 2 ( k - 2) (even) - k\n"}, "2532": {"problem_id": 2532, "answer": "MOD = 10**6 + 7\nf = lambda x: int(x) - 1 if x % MOD == 0 else x // MOD\ndef MI(): return list(map(int, input().split()))\nfrom sys import stdin, stdout,setrecursionlimit import recursion_limit\nmod = 998244353\ninput()\na = [MI() for _ in range(11)]\nfor i, (l, r) in enumerate(f(), start=1):\n  a[i] = l * r\n# print(a[:])\nprint(['\\n'.join(l) + '*' for l in a])"}, "2533": {"problem_id": 2533, "answer": "# cook your dish here\nn,e=list(map(int,input().split()))\na=[]\nfor i in range(0,n+1):\n a.append(input())\nb=[0]*a[-1]\nc=0\ni=1\nwhile i<=a.count('1') and a[i]!=b[0]:\n  i+=1 \nif b[c]==0 and i>=2*(c+2)**0.5 and e>1 and c>b.index(b) :\n print('YES')\nelif a==[1,2,3,4,5,6,7,8,9] and (a+b)-(a-b+c)%1==1:print('NO')\n\n"}, "2534": {"problem_id": 2534, "answer": "R,C=list(map(int,input().split()))\nA=[]\nfor i in range(R):\n A.append([int(x) for x in input().strip()] + [0]*(C+1) +[0])\n#print(A)\nif A[R-1][C]<=C:print('GIVE')\nelse:A.sort(reverse=True,key=lambda x:(x[1]))\n\n"}, "2535": {"problem_id": 2535, "answer": "# cook your dish here\nx,n=list(map(int,input().split()))\narr=[]\nfor _ in range(n):\n arr.append([int(x) for x in input().rstrip()])\ns=sum(arr)\ni=0\nwhile(i<n and i<9 and arr[i][0]=='0') :\n i+=1 \nif(s>=54 and (s-54)%4==0 and s<=60 and ((s+s*9)//4)-arr[-1][-2]!=-1 ):\n   print(360-i) "}, "2536": {"problem_id": 2536, "answer": "# cook your dish here\nn,m,l,a=list(map(int,input().split()))\nmatrix=[[0 for _ in range(n+2)] for __ in [0,1]*n]\nfor i,j in enumerate(l):\n  matrix[i][j]=[[int(x) for x in input().rstrip('\\n').split(' ')]]\nans=0\nwhile m<=n and 0<m<l and l<n:   l,=min(m-i,i+j),max(0,-1,-2*l)\nprint(ans) \n"}, "2537": {"problem_id": 2537, "answer": "q = int(input())\nfor i in range(q):\n\ts, t, p = list(map(str, input().split()))\n\n\tif s[0] == 'a' and t[len(s) - 1]!= 'e' or p[-1].count('a') > 0 and len(t)!= 0: print('YES')\n#\t\tprint(''.join([str(x) for x in p]))\n"}, "2538": {"problem_id": 2538, "answer": "t = int(input())\nfor _ in range(t):\n\tstr, exp = list(map(int, input().split()))\n\n\tn = str.rstrip().count('1')\n  \tint_exp = exp.ljust(10**(n-1), 'f'*int)\n#\tprint(str.expand(''.join(exp))+'\\n'+str)"}, "2539": {"problem_id": 2539, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, defaultdict, Counter, OrderedDict, reverse, heapq, to_list, bisect\ndef is_prime(n):\n\tif (n % 2) == 0: return False\n   if n % 3 == 1 or n == 3:  return True\nfor i in range(3, int(input())): import math\na, b, c, d = list(map(int, input().split()))\nd = Counter(a)\nn = d.most_common(1)[0][1]\nprint(d[n])\n"}, "2540": {"problem_id": 2540, "answer": "import math\nn = int(input())\ngraph = [[] for i in range(n+1)]\nfor i,j in enumerate(list(map(int, input().split())))[::-1]:\n  graph[i].append(j)\nans = [0] * n\ndef dfs(i, j, colour=0, depth=1):   # -1 means we have visited vertex i with colour 0, 1 means this vertex has been visited with depth 1,..., n means there is no vertex with this colour\n# print(graph, ans[0], depth[1])\nvisited = set()\nwhile i + 1 < n and visited: # update visited to check if visited is empty, if so, add 1 to vertex visited, and add 2 to add the current vertex to visited. if not, remove 1 from visited (so we don't have to update it again. update the count of colours visited as needed so we can do this for every vertex we add to our visited count)\n\n  if vertex in visited and vertex!= i and not visited[vertex]: # this is an edge, we need to remove it. we will not have seen it before, so add a 1 if we cannot see it yet, or a 0 if it is already there. so that we know that it already has a value of 0. i.e. VISITED doesn't include VISITING."}, "2541": {"problem_id": 2541, "answer": "q = int(input())\nfor i in range(q):\n\tl, r = list(map(int, input().split()))\n  \tprint(l - r)\n"}, "2542": {"problem_id": 2542, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\ts = list(map(int, input().split()))[::-1]\n\n\tn = len(s)\n  \tif s[0] == '0' or (s[n-2]!= '1' and s.count('0') + 1) == n: print(n)"}, "2543": {"problem_id": 2543, "answer": "import sys\ninput = sys.stdin.readline\nn,m,q = list(map(int,input().split()))\na,b,c,d,e,f = [0]*(m+1),[],[] if m > 1 else [-1]\nfor i,(x,y) in enumerate(zip(*[iter(input())]*a+b+c+d+e+f+9)) : q[i] = -10**10 if i > 0 else 0\nprint((max(q)))\n"}, "2544": {"problem_id": 2544, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n, x = list(map(int, input().split()))\n\n  a = [x for x in input() if x!= x.start()] + [0] * (n + 1) + [-1]*(n+1) # start, end, edge_length, parent_node, node_points, root_point_idx: -1 # find parent node, find root point idx (from start to end) - 1, 0, 1: 0-indexed, indexed_with_start_edge: (start, start_index) -> (root, point) in [[0, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201)\n\n"}, "2545": {"problem_id": 2545, "answer": "t = int(input())\nfor i in range(t):\n   a = list(map(int, input().split()))\n# print(a, a[1:])\nans = \"YES\" if a % 2 == 0 else \"NO\"\nprint(ans)"}, "2546": {"problem_id": 2546, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n, s = list(map(int, input().split()))\n l = [0] * (n + 1)\n dp = [-1]*(n+1) * 2\n for i, v in enumerate(sorted(zip(l, l[:n])))[::-1]:\n  if v == -1: break\n ans = -sys.maxsize-dp[n][i]\n print(ans)"}, "2547": {"problem_id": 2547, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn,m,k=list(map(int,input().split()))\nl=[]\nfor _ in range(n):\n\ta,b,c=[int(i) for i in input().rstrip('\\n').split(' ')];a+=1;c.append(b-a*c[-1]);b=a%3\nans=[0]*n\ndef dfs(x,y,v,sx=1,sy=0,ty=len(set(y)-1)):\n\n\tif (x<0 or x>y[y.index(v)+1]) or (v==1 or y[v]+1==x or v==2) or sx==0 and v<=k or ty==len([x for x in l if x[1]<v] and l[x[0]]!=x and not(dfs(l[i][1],x,-1,'0')) and (i==i+1 and i>0)) or not((x>1000000007 and x<2**18)and ((v>=3**6)or ((i>=(i-i_1))+((v-3)**(0.5))*(1-x)<k)for i i_2,x in enumerate(zip('3',x))if x!='1'else)if ty!=(1>xor x) else 0): return 0; else: return 1;\n#print(dfs(*ans) if ans==[])\nif not ans: print('0')\nprint('1')"}, "2548": {"problem_id": 2548, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  n=int( input() )\n\n  a = list( map( int, input().split() ))\n#  print( a )\n"}, "2549": {"problem_id": 2549, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn,m = list(map(int,input().split()))\nd = [0]*(n+1)\nfor i in range(m):\n\td[i] = int(input())\nans = []\ndef f(d, a, b, c, d, n):\n\n\tif d[a] == 0 and b[c] > d and c >= a and a >= b and d > c:\n\n \t\tans.append(abs(c-a)%1000000007 + (1 if c == b else 1 if b == a else 0))   # (a,b,c,d) = (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,118,119,120,121,122,123,124,125,126,128,129,131,134,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,162,164,165,166,167,168,169,180,191,192,193,194,195,196,198,199,200,203,204,205,208,209,216,217,219,221,222,223,224,225,226,227,228,229,233,234,235,236,237,238,239,241,242,243,244,245,251,252,253,256,257,258,269,280,281,282,283,284,286,287,289,300,307,311,313,323,325,336,343,344,350,351,362,373,379,383,384,389,400,401,404,405,409,419,421,426,431,433,439,443,446,447,449,457,461,463,464,466,467,479,487,488,489,490,491,494,500,501,503,509,520,533,540,553,556,573,608,577,589,610,613,617,720,641,643,644,646,647,653,658,659,661,673,678,677,683,691,701,713,729,733, 871"}, "2550": {"problem_id": 2550, "answer": "t = int(input())\nfor i in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tif (n - 1) % 2 == 0 and (m - n) // 2 > n - m and m % n not in (2 * n, 2 * m) and n // n == 2*m: print(n)\n"}, "2551": {"problem_id": 2551, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s,t=list(map(str,input().split()))\n if len(set(s))==len(t):print(-1)\n elif s[0] not in t:t.add(0)"}, "2552": {"problem_id": 2552, "answer": ""}, "2553": {"problem_id": 2553, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn, x = list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n\ta = [int(i) for i in input()]\n\n\tif a[0] % 2!= 0: print(\"No\", \" \" * (a[1] / 2 + 1) + \")\n \telse:   print('Yes')\n"}, "2554": {"problem_id": 2554, "answer": "from itertools import accumulate\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = 10**20\nMOD = 1000000007\ndef LI(): return [int(x)-1 for x in open(__import__('sys').replace('\\n', '0').split()) if x not in 'a' and x!= '1'][-2*(len(input()) - 1) // 2]\nDICT = {'a': {0: 0}, 'b': 1, 'c': 2} # a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}\nmod = 998244353\n# def __starting_point__(self, input_data):\n\t# \tself.a = list(accumulate(list(map(lambda x: x + DICT.get(a, 0), input().strip().split())))[0])\n\n\treturn self.__next__()"}, "2555": {"problem_id": 2555, "answer": ""}, "2556": {"problem_id": 2556, "answer": "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n\tl[i] = l.pop(i)\nprint(min(l))"}, "2557": {"problem_id": 2557, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nadj = [[] for _ in range(n+1)]\nfor i, j in enumerate(range(1)):\n\tadj[i][j] = [int(x) - 1 for x in input()]\na, b = 0, 0\nwhile a + 1 < n: a += adj[a][-1] + b\n#print(adj)\nans = abs(a - b) + (b - a)//2\nif ans < 0: print(ans)\n\n"}, "2558": {"problem_id": 2558, "answer": "t = int(input())\nfor _ in range(t):\n   a, b, c, d = list(map(int, input().split())) ; a-=1; b-=(1+1) * c ; b+=(2*c) + a*b*(c>0) ; (a,b,c,d) = (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,132,133,134,135,136,138,139,140,141,144,145,146,147,148,149,160,161,162,164,165,166,167,168,169,180,181,182,183,184,185,186,189,190,191,192,194,195,196, 198,199, 200, 202, 204, 206, 207, 208, 209, 210, 212, 224, 246, 268, 228, 250, 256, 264, 270, 370, 360, 378, 384, 392, 420, 464, 484, 504, 5036, 512, 624, 720, 828, 9000, 1025, 1129, 1344, 1475, 1606, 1771, 1817, 1920, 2027, 2048, 2297, 3033, 3177, 3220, 3400, 3801, 3929, 3719, 3952, 4035, 4439, 4650, 5678, 5543 ) ; for i, j, k, l = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 36, 37, 38, 39, 40, 43, 49, 51, 52, 53, 54, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 149, 150, 155, 156, 157, 158, 160, 161, 162, 167, 168, 169, 180, 173, 183, 184, 191, 194, 199, 232, 233, 234, 255, 257, 258, 359, 269, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 349, 353, 367, 373, 374, 379, 383, 907, 1173, 1081, 1107, 1125, 1259, 1303, 196, 201, 219, 225, 221, 231, 243, 261, 267, 297, 315, 319, 326, 343, 336, 340, 358, 371, 372, 375, 387, 501, 503, 104, 109, 216, 251, 260, 265, 296, 322, 323, 324, 329, 350, 363, 357, 366, 364, 369, 377, 900, 1010, 1000, 1000 }, dtype = {'', 'a' }\ndef is_player(player, turn, player_type, move): return 1 in turn and player == turn[0]"}, "2559": {"problem_id": 2559, "answer": ""}, "2560": {"problem_id": 2560, "answer": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn, l, r = list(map( int, input().split() ))\n\n\tif n % 2!= 0 and r < n//2: print(\"No\", end = \" \" * (n - r) + \" \", end=''* ((r - n) // 2) )"}, "2561": {"problem_id": 2561, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n  a = [int(x) for x in input().split()]\n# print(a)\nfrom functools import lru_cache\nmod = pow(10, 9) + 7\nn = len(list(map(int, list(zip(*[sys.substr(1, 2)]*mod)))))\ndp = [[-1] * (n + 2), []] + [(-1)**0.5 for _ in xrange(n+2)]\ndp[0][0] = 1\nans = []\ndef dp(i, j, x):  \n\tif i == 0 or j == n - i + 1 or i > 0 and j > -1 and x[i]!= -x[j-i]: \n\n\t\tans.append(''.join(pow(j, i, mod)) for j in ans[-2:])\nif n % 2 == 1 and n!= 2 and (dp[n//2][1]) in [2, 3, 4, 5, 6, 7, 8] and mod <= 1e9: print('0')\nprint(dp(0, n // 2, 0))"}, "2562": {"problem_id": 2562, "answer": "n = int(input())\na = [1] + list(map(int, input().split()))\nm = 10**9+7\nfor i in range(n):\n\tif a[i] % m == 0: m = (i*(i+1))%m\nprint(m)"}, "2563": {"problem_id": 2563, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  a = [int(x) for x in input().rstrip().split()]\n\n  n = len(a)\n#  print(n, a[n-1] if n % 5 == 0 else \"\", \"0\" * (n - 1) + \"1\")\nans = \" \".join(map(str, list(range(1, n))))\nprint(ans)"}, "2564": {"problem_id": 2564, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nfor i in range(t):\n  a, b, n = list(map(int, input().split()))\n\n  if n < 2 * (n - 1) / 2: print(a + b)\n"}, "2565": {"problem_id": 2565, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tx,y,z=map( int,input().split() )\n\n\tif z<=x-1 and z>=y+1: print((x+y)**2+((z-x)*(y-z)*2)//2))\n"}, "2566": {"problem_id": 2566, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\tk = tuple([int(x) for x in input().split()])\n\n\tn = k.count(0) - (k[0] if k[-1]!= 0 else 0) + 2**k.get(n,0)+1"}, "2567": {"problem_id": 2567, "answer": "import sys\ninput = sys.stdin.buffer.readline\nt = int(input())\nfor _ in range(t):\n\n\tn, k = list(map(int, input().split()))\n\ta = [0] * (n + 3)\n\n \ts = input() + [a[k] + b for i, (a, b) in enumerate(s)] + [(a.append(b) + c for c in a[:k]) + (b, c) for d in (sorted(set(a))) + sorted(list(range(k)), key=lambda x: x[0])]\n "}, "2568": {"problem_id": 2568, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile(t!=0):\n\ts = input().rstrip()\n \tif s=='-' or s in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'] or len(s)>1 or (s==s[::-1] and s!=' ') or not s.find('-')!= -1 : t-=1\n"}, "2569": {"problem_id": 2569, "answer": "import bisect\nfor _ in range(int(input())):\n\tn=int(((10**9)+7)**0.5+1)\n\n\tdp=[0]*(2*n+n);dp[0]=1;visited=set();flag=0;while dp[n]==1 and visited.add(n):flag = 1;dp.append(1);for i,v in enumerate(dp):i+=(n-i);break;\nprint(flag)"}, "2570": {"problem_id": 2570, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, x = list(map(int, input().split()))\n\n\ta = [int(i) for i in input ().split(' ')] + [x]*(x+1)\n\n \tb = [-x for x in a if x!= 0] + [-y for y in b if b[0] == x]\n   # print(a,b,a[-1])\n#  print('\\n'.join(sorted(b)))\n"}, "2571": {"problem_id": 2571, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque\nt = int(input())\nfor _ in range(t):\n\tn, e = list(map(int, input().split()))\n\n\tif n % 2!= 0: print(-n//2, [n-1], [0, 0])\n#\tprint(f'n = {n: {e} [{a}]}')\n"}, "2572": {"problem_id": 2572, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn,m = list(map(int,input().split()))\n\n\ta = [int(i) for i in input().rstrip('\\n').split(' ')]*m\n\n \tprint(min(a[i]))\n"}, "2573": {"problem_id": 2573, "answer": "n,k,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append([int(x) for x in input().strip()])\nx=s.index(max(s[x-1][0]))\n\n if s[-2][1]>=x: x-=1;\n else: print(m)\n"}, "2574": {"problem_id": 2574, "answer": "t = int(input())\nfor _ in range(t):\n\tn=int( input() )\n\n\ta = list( map( int, input().split() ))\n\n  \tfor i,(j,k,l,t) in enumerate(zip(a, a[j]+a[k+1:j+2]*(n-j), a.copy()[:n]))[1:-1],*a:a.insert(i+j*k*l*t,n)\n"}, "2575": {"problem_id": 2575, "answer": "for _ in range(int(input())):\n\ta, b = list(map(float, input().split()))\n\n\tif abs(a - b) % 2 == 0:  # no point building a point, so no need to check if a and b are square, or if they are not, then an empty triangle is not possible  \t\t\n"}, "2576": {"problem_id": 2576, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta, b, c, d = list(map(int, input().split()))\n\n\tif d >= c: print(a - c + b - 2 * d + c * (c - d) // 2 + (b - 1) * 2)\n"}, "2577": {"problem_id": 2577, "answer": "import math\nt = int(input())\nfor _ in range(t):\n n,m = [int(x) for x in input().split()]\n matrix = []\n for i,x in enumerate(list(map(int,input().strip()))) :\n  matrix.append(math.factorial(i))\n print(*matrix)\n"}, "2578": {"problem_id": 2578, "answer": "n,m=map(int,input().split())\ng=[0]*(n+1)\nfor i in range(m):\n\tg[i]+=1\na=[i for i,j in enumerate(g) if j not in g]\nprint(a[-1])"}, "2579": {"problem_id": 2579, "answer": "n=int(input())\nl,r,x,y,k=list(map(int,input().split()))\ns=0.0\nfor i in range(n):\n\tif l>=i+1 and s+s<=r+x and l+l-1<y and y+y+k<x: s+=abs(l)\nprint(\"YES\")\n"}, "2580": {"problem_id": 2580, "answer": "import sys\n# sys.setrecursionlimit(10**6)\nMOD = 100000001\ninput = lambda: int(input())\nfrom collections import defaultdict as dd, deque\nfor _ in range(int(sys.stdin.readline())):\n\tn, m = list(map( int, input().split() ) )\n\n\troot = dd( [ [n - 1] * m for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 199, 200, 204, 205, 206, 207, 209, 210, 213, 215, 221, 222, 223, 224, 225, 227, 229, 230, 233, 234, 235, 236, 237, 239, 241, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 336, 334, 339, 335, 346, 347, 348, 353, 359, 364, 365, 366, 367, 370, 373, 374, 375, 376, 379, 380, 383, 384, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 417, 418, 419, 421, 424, 425,426, 427,431,432,433,434,435,436,439,441,443,449,457,461,463,467,469,479,487,480,481,482,499,500,501,503,509,601,611,613,514,515,216,227,228,229,232,235,236,237,238,239,241,242,251,253,255,257,263,269,271,283,293,307,311,314,317,331,332,334,335,336,347,357,382,383,389,400,401,403,405,409,416,419,421,rigerolomomance,418,23,24,40,41,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,64,66,67,68,69,71,72,73,74,75,76,77,78,81,82,83,84,86,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,119,124,125,127,128,129,140,141,144,147,160,161,163,164,165,166,167,168,169,174,180,181,184,186,187,188,189,190,191,195,194,196,197,198,199,200,203,204,205,206,207,208,209,211,214,215,221,233,274,287,298,751,756,767,775,777,784,809,8"}, "2581": {"problem_id": 2581, "answer": "n = int(input())\nfor i in range(n):\n\tx = list(map(int, input().split()))[:n] + [0] * (n + 1) * 10**9\nprint(max(x))"}, "2582": {"problem_id": 2582, "answer": "n=int(input())\na=list(map(int,input().split()))\ndp=[0]*n\nfor i in range(n-1):\n\tdp[a[i]]+=1\nans=0\nl=len(a)\nif(l<=n):ans+=max(0,ans-l//2+1)-l\nelse:print(ans)"}, "2583": {"problem_id": 2583, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n = list(map(int, input().rstrip().split(' ')))[::-1]\n\n  a = 10**9 + (n//2)\n#  print('a', a, 'b', 'c')\nprint('{0:.6f}'.format(a))\n"}, "2584": {"problem_id": 2584, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nt = int(input())\nfor _ in range(t):\n   n,p,k = list(map(int,input().split()))\n\n  a = [int(i) for i in input().rstrip('\\n').split('0')]\n\ta.sort(reverse=True, key=lambda x:x[1])\n\n\t#print(a[0][1], a[2][0], *(k - 1) * (k > 2) + (n - k)**(1/k) - (p - x[:k+1]))\n"}, "2585": {"problem_id": 2585, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nfor _ in range(n):\n\ta = list(map(int, input().rstrip().split()))\n\n\tif a[0] % a == 0 and (a[1] + 1) % 2 == 1:  print(0, a.pop()[-1])"}, "2586": {"problem_id": 2586, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n\tinput()"}, "2587": {"problem_id": 2587, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\tif k <= n: print(r)\n"}, "2588": {"problem_id": 2588, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(25000000)\nMOD = 10**9+7\ndef II(): return int(input())\nreturn list(map(int,input().split()))\n"}, "2589": {"problem_id": 2589, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, x = list(map(int, input().rstrip().split()))\n\n\ta = [int(i) for i in input()]\n\n  \tans = len(a) - x\n#\t\tprint(ans, end=' ')\n"}, "2590": {"problem_id": 2590, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n n, x = list(map(int, input().split()))\n a = [int(i) for i in input()]\n ans = 0\n for ai in a[1:]:\n  ans += max(ai)\n print(ans)"}, "2591": {"problem_id": 2591, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n n = int( input() )\n arr = list( map( int, input().split() ))\n print(' '.join( arr))"}, "2592": {"problem_id": 2592, "answer": "import math\nt = int(input())\nfor _ in range(t):\n a = list(map(int, input().split()))\n b = [0]*(a[0]-1)\n c = []\n for i in b: c.append(math.ceil(i/2) + c[-1])\n print(c)"}, "2593": {"problem_id": 2593, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\ndef II(): return int(input().strip() or '\\n'.join(map(str, input().split())))\nt = II()\nfor _ in range(t):\n\tn = t.__next__()[0]\n\n\ta = [int(x) for x in input() if n&1] + [n]*(n-1) + (n==0 or n==1 or a[a.pop()]==a[n>>1]) + '0' + ('1' in a.get('x',0)) + ['0']*n, a, n\nprint(II())"}, "2594": {"problem_id": 2594, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn,m = list(map(int,input().split()))\n\n\tl = [0]*(n+m+1)\n\n  \tfor i in l: l[i]+=1;\n#\t\tprint(i,l[-1],i)\n"}, "2595": {"problem_id": 2595, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta,b = list(map(int,input().split()))\n\n\tif len(set(a) & set(b) + [0])!= 1:\n\n \t\tprint(-1)\n\n"}, "2596": {"problem_id": 2596, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque import Counter\nn, k, m, t = list(map(int, input().split()))\nt = t-1\nans = [-1] * (n+1)\nfor _ in range(t):\n\tx = int(input()) + (1 if x%2 else 0) + [0]*(2*k) * m\n \tans[x] = (x + 0.5) // 2 + ans[-2]\nprint(len(ans))"}, "2597": {"problem_id": 2597, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n#from itertools import combinations\ndef main():\n\tn = int(input())\n\n\ta = [int(x) for x in input().split()]\n\n  \tx = list(combinations(a, 2))\n  #a.sort(key=lambda x: (-x[0], x[1]))\n\n #print(f'{x} = {a[:x.index(max(0, x) - 1)][:1]}')\nfor i in range(n - 2, -1,-1) :  print(i)\n"}, "2598": {"problem_id": 2598, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,m=map(int,input().split())\ngraph=[[] for i in range(n+1)]\nfor x,y in zip(graph[0].items()):\n  graph[x].append(y)\nq=deque([])\nvisited=[0]*n\nflag=0\ndef dfs(u,v,r,c,d,visit,seen,sorted=False):\n\n  if visited[u]!=-1 and not visited[v]==0 and visit[r] not in sorted[c]: #r is red, b is blue and is not visited,  s is visited   c=='B',  seen.add(r)  #v==r and r==b, we can't change their color, so we have to change c to be b, or change b to R, change s to a new color s=set(s)) #c==B or B==R, s.update(c) #s.remove(b) to ensure that s and b are not already visited"}, "2599": {"problem_id": 2599, "answer": "import math\nt=int(input())\nfor i in range(t):\n  n,k=list(map(int,input().split()))\n\n  if k==0:print(-1)\n"}, "2600": {"problem_id": 2600, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom collections import defaultdict as dd, OrderedDict as odict\nsys.setrecursionlimit(10**9)\ndef LI(): return list(map(int, input().split()))\ndic = dd.from_iterable(LI()).most_common(1)[0]\nreturn dic\nt = int(input())\nfor _ in range(t):\n\tn, m = LI()\n\n\tarr = [int(i) for i in input()] + [m] * (m - n) + [(i+1)%2]*(m-n)  + [[0,1],[0,-1]]\n  \tprint(min(arr))"}, "2601": {"problem_id": 2601, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\ta = list( map( int, input().rstrip().split(' ')))[:n]\n\n \tprint('YES' if a else 'NO')\n"}, "2602": {"problem_id": 2602, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\ta, b, n, m = [int(x) for x in input().split()]\n\n\tif a == m: print(\"Yes\")\n"}, "2603": {"problem_id": 2603, "answer": "t = int(input())\nfor _ in range(t):\n   n = list(map(int, input().split()))[:n.index(max(n))] + [n[-1]*4 + n[n-2] for n in zip(list(range(0, n)))]\n"}, "2604": {"problem_id": 2604, "answer": "import math\nr, d = list(map(int, input().split()))\ns = []\nfor i in range(r):\n\tx, y, s.append(s[i][0] - math.floor((i - 1) / 2) + s[-1][1])\nprint(len(set(list(range(1, int(math.sqrt(x)) + 1)))))\n"}, "2605": {"problem_id": 2605, "answer": "import sys\ninput = sys.stdin.readline\nn,k = list(map(int,input().split()))\ng = [[] for _ in range(n+1)]\nfor i,c in enumerate(zip(input(),input())):\n\tg[c-1].append(i)\nans = [0]*n\ni = 0\nwhile len(g)<n and g[i][1]<=c:i+=1\nprint(ans[0])\n"}, "2606": {"problem_id": 2606, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int( input() )\n\n\tt = list( map( int, input().rstrip().split( )) )[ -1] * ( n-1 ) + sorted(t ) * [0] + [ 0 ]*(n-2) +  [ 1]* (n - n -2 ) for i in t[:n] \n"}, "2607": {"problem_id": 2607, "answer": "for _ in range(int(input())):\n\ts = input()\n\n\tif \"?\" in s: print(s.count(\"?\"))\n"}, "2608": {"problem_id": 2608, "answer": "t = int(input())\nfor _ in range(t):\n n, m = list(map(int, input().split()))\n x = []\n y = [int(x[i]) for i in input()]\n if n == 1 or m == 2 or x[-1] == y[0]:\n  print(n, m)\n elif m % 2 == 0 and n!= 1 and m!= 2 and (n - 1) % (m // 2)!= 0:  # print(\"*\", \"*\" + \"\", m - \" *\", n - (1) // (2 * m)))\n"}, "2609": {"problem_id": 2609, "answer": "import sys\ninput = sys.stdin.readline\ninp = input = open('input.txt', 'r')\nt = int(input())\nfor _ in range(t):\n\tn = inp.rstrip('\\n')\n\n\tseg = [int(i) for i in input().split(' ')] + [0] * (n - 1) + list(range(0, n + 1)) + [[0]] + seg + [(i, 0) if i!= 0 else 0] + ([0]) + map(int,input().rjust(6 * i, '0'))\n#\tprint(*[(x, x) and (x == 0 or x == 1), x] for x in segs)"}, "2610": {"problem_id": 2610, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n,p,k = list(map(int,input().split()))\n\ta = [int(i) for i in input().rstrip('\\n').replace(' ', '').split(' ')][:k] + [0]*(n-k+1)\n\n\tprint(a[0])\n"}, "2611": {"problem_id": 2611, "answer": ""}, "2612": {"problem_id": 2612, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n   n = [int(x) for x in input().rstrip().split('\\n')]\n# print(n)\nprint(max(map(int,input())))\n"}, "2613": {"problem_id": 2613, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n,k,z=list(map(int,input().strip().split()))\n\n  a=sorted([(x,i) for i,x in enumerate(a) if x<=n])\n#  print(sum([a[x] for x in list(zip(i,a))]))\n"}, "2614": {"problem_id": 2614, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn = int(sys.maxsize)\n\n\ta = list(map( int, input().split() ) )\n\n \tb = [ 0 for i in a if i[0] == '1'] + [ a[i[1] - 1] + 1 for j in b ]\n   #print(a, b, n, len(b) - b.count(0) + b[-1], '\\n')\n#\tprint('{0:.6f}'.format(*a))\n"}, "2615": {"problem_id": 2615, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n\tn = input().split()\n\n\tif len(set(n)) == 1: print(1)\n"}, "2616": {"problem_id": 2616, "answer": "t = int(input())\nfor i in range(t):\n  l = list(map(int, input().split()))\n\n  a = [int(x) for x in zip(l, l[::-1])] + [0] * (l.index(max(a)) + 1)\n"}, "2617": {"problem_id": 2617, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  #n,m = list(map(int,input().split()))\n\n  if m % 2 == 0 and m // 2 in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,140,141,144,155,146,149,160,161,162,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,204,205,206,207,208,209,310,221,222,223,224,225,226,227,228,229,232,233,234,235,236,237,238,239,240,241,244,251,252,255,256,257,258,269,271,273,275,376,377,379,383,389,392,400,401,404,405,406,408,409,410,411,416,419,420,432,433,439,440,441,444,446,447,448,449,457,461,463,464,466,467,479,487,488,489,500,501,503,504,509,514,515,518,524,525,536,535,537,538,559,563,571,576,577,587,593,617,641,683,695,696,697,698,709,760,701,767,775,768,770,773,777,780,784,779,778,808,809,810,613,616,648,170,171,175,176,198,179,199,202,203,304,305,CLUSUS: http://www.codewars.com/users/nbeck/\n\n"}, "2618": {"problem_id": 2618, "answer": ""}, "2619": {"problem_id": 2619, "answer": "# coding: utf-8\nimport sys\nfrom heapq import *\nreadline = sys.stdin\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ninput = lambda: readline().rstrip()\ndef LI(): return list(map(int, input().split()))\nd = {}\nfor i in range(0, len(LI())):\n  d[LI()[i]] = i\nprint('\\n'.join([str(x) for x in d.items()])))\n"}, "2620": {"problem_id": 2620, "answer": "n, q = map(int, input().split())\ns = []\nfor _ in range(q):\n\tl = int(input())\n\n\tif l!= 0 and l < n and (l % 2 == 0 or l % 4 == 1 and s.count(l / 2)!= 1) or (n - l - 1 >= l // 2 and n <= l * 2): print(s.index(max((s[-1], s[:-1]) - (s, s)) + l))) : print('1',''.join(str(x) for x in s).replace('0', ''))"}, "2621": {"problem_id": 2621, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n\tn, m, k = list(map( int, input().split() ) )\n\n\tif k == 1 and n == m == 0: print(\"NO\")\n"}, "2622": {"problem_id": 2622, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\na = [[0]*(n+1) for i in range(200)]\nfor i, j in zip(input[:-1], input[1:][::-1]):\n\ta[i][j] = (ord(j)-ord('a') + 1) % 200\nprint(*a)"}, "2623": {"problem_id": 2623, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, input().split()))\n\n\ta = [0] * (k + 1)\n\n \tfor i in reversed(list(range(n)):]):\t\t# print(i, end=' ')\n  # print(*a)"}, "2624": {"problem_id": 2624, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport bisect as bi\ninput()\nn = int(input())\na = list(map(int,input().split()))\nbi.insort(a,0)\nfor i in range(n-1):\n\ts,x = bi.bisect_left((a[i],i),i+1)\n\n\tif s+x<=0 or x==-s or (s>=x and x!='>' and s=='=') or a[x]!=s: print(\"Error\")"}, "2625": {"problem_id": 2625, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\nfor _ in range(n):\n\tk,x=list(map(int,input().rstrip().split()))\n\n\tif x%10==0 and x//10!=0:print(\"x%d\"%(k-1))\n"}, "2626": {"problem_id": 2626, "answer": "import math\nt = int(input())\nfor _ in range(t):\n\tn=int(math.sqrt(4*(2*i+1)**2+i) for i in input().split())"}, "2627": {"problem_id": 2627, "answer": "from math import sqrt\nimport numpy as np\n#from functools import lru_cache,cmp_to_key,take,pandas,racket as pd,deque,sorted as sr,collections as cc,enumerate,fractions,math.gcd,isclose,linalg as l,inf,g,cumsum,sqrt,factorials as f,max_area,compress as cs,reduce,mul as m,ast as n,decimal as dc,binary_search,searchs = np.arange(3,10**6,0.5+1,12)"}, "2628": {"problem_id": 2628, "answer": "from functools import lru_cache\nimport itertools\n# def memoize(cache,memo):\n from collections import defaultdict\n memo = {}\n def find_gray_code(n:int)->defaultdict(dict) or {k:v for k,v in memo.items() if n>=len(v)and v[n]!=v[k]and memo[cache.get(k,k)]}\n class Solution(object):\n\n  # O(2^n) time. Space complexity. 1 + 1 = (2*n + 2*k) * 2.5e4. Time: O((n+1)n^2) = n*2.15e8. The same idea, but time complexity is 2 * n * (k+k + k + (n-k)) * 4.0e9. This is not the most efficient solution but it is faster. In fact, it takes OO(N) to run it on a server of equivalent size. It would be optimal to take advantage of this. We can for example do the following, where we are trying to find the longest prefix of the prefix map: we take the smallest one, then the largest one. Then, using the min value, we can perform the same operation on the map, and get the answer for the given n. So, the best strategy for finding the max value is to use a loop of loops of size N. But, since the n is always smaller than the m, there is no way to make the loop bigger. To make it bigger, you need to swap m and n, so that the two values can be used again. Because, swap, can't you do that with the memoization algorithm?\n"}, "2629": {"problem_id": 2629, "answer": "from itertools import permutations\nimport numpy\ndef generate_square_matrix(rows, cols, k=1, x=cols) :\n\tif k == 1 : return [[x[0], x[1]] for x in zip(*permutations(x,k,x='1'))]\n\n\tfor i in range(2,rows+1):\n#\t\tprint('i:',i,sep='\\n'*(k-1) +'' + str(i) for i,j in enumerate(row[:k*k]*j) if j!= i)\n"}, "2630": {"problem_id": 2630, "answer": "def dfs(A, B, C, D, E, F, G, H, I, J, K, L, M, N, P, R, X, Y, U, V, W,X,Y, Z, dp, A, b, c, p, q, r, s, t, u, v, w, x, y, dx, dy, di, dist, cache, visited, cur, move, is_visited, memo): # O(n) time, space, cost, traversal, return cost/2, where cost is the cost of traversing an obstacle (i.e. visited[i]) and I is I[(i+1)%n] and B and C are the bounds of A[0][1], B[1][2], C[2][3], D[3][4], E[5][6], F[7][7], G[8][8], H[9][9], L[10][10], M[11][11], N[12][12], P[13][13], R[14][14], X[15][15], Y[16][16], U[17][17], V[18][18], W[19][19], x[20][20], y[21][21], dx[22][22], dy[23][23], di[24][24], dist[25][25], b[26][26], c[27][27], p[28][28], r[29][29], s[30][30], t[31][31], u[32][32], v[33][33], w[34][34], l[35][35], m[36][36], n[37][37], k[38][38], d[39][39], cache[\\\"A\\\", A] = \\\"{}, (\\\"B\\\", \\\"C\\\",\\\"D\\\", \\\", \\\"E\\\"[A], \\\"F\\\"\\\".join(map(lambda d: d.__getitem__(d, \\\"B\\\"))))), cache.keys(), return float('inf')\n"}, "2631": {"problem_id": 2631, "answer": "from collections import Counter, defaultdict, OrderedDict, deque, namedtuple"}, "2632": {"problem_id": 2632, "answer": "from functools import cmp_to_key\nimport numpy as np\n#from scipy.special import comb, factorial, ceil, log, pow, lcm, atan, sin, cos, truediv, mul, sqrt\ndef min_path(m, n, left, right, dp, mid, mx, r, dist, limit, used, count, path, cnt, max_dist) :  # \u53d8\u6210\u540e\u957f\u5ea6\u5e8f\u5217\u4e2d\u7684\u4f4d\u70b9\u53ef\u4ee5\u8ba1\u7b97\u6700\u77ed\u8ddd\u79bb\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6761\u4ef6\u6570\u76f8\u8fde\u7eed\u7684\u65f6\u5019\u9700\u8981\u51cf\u53bb\u8fd9\u6837\u7684\u65b9\u6cd5\u6709\u591a\u5c11\u6ee1\u8db3\u81ea\u7136CDM\n"}, "2633": {"problem_id": 2633, "answer": "import sys\nfrom functools import lru_cache\n#sys.setrecursionlimit(10**7) #max depth of recursion\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef memoize(x: int, memo: dict): return memo[x] + [memo[-1] for _ in range(1, max(0, x) + 1) if x == 0 else x]\n"}, "2634": {"problem_id": 2634, "answer": "from collections import defaultdict, OrderedDict\nimport itertools as it\nsys.setrecursionlimit(10**7)\ndef get_subsets(nums, prefix=None):\n\tif prefix is None or len(prefix) == 0: return [None] * (prefix[0] + prefix[-1] if prefix else 1)\n\n\tl, r = list(map(lambda x: int(x) if x > 0 else x for x in prefix), list()), set()  # prefix = set(sorted(list(enumerate(l)), key=lambda a: a[1]) for _ in range(r)) # for i, (x, y) : l[i] = x + y if i else r[(i, x) + (y, -1)]\n\n  return l + r"}, "2635": {"problem_id": 2635, "answer": "from functools import lru_cache\nimport sys\nsys.setrecursionlimit(10**6)\nDIRS = [(0,1),(0,-1)]\nMOVES = list(map(lambda x,y:x[0]*y[1] for x in range(len(x)-1)if x[2]==0))\ndef dfs(a,b,c,d,e,f):\n\tif d[a]!=e[b] or c!=-1 or f!=(-1): return a, b, c, d, e, f\ndfs(INF_RATIO, [])\n"}, "2636": {"problem_id": 2636, "answer": "import itertools\nfrom collections import defaultdict, deque\n# from heapq import nsmallest, nlargest, heapify, heappop, cmp_to_key, attr_contruct, copy_from_source\ndef get_skyline_recursive(building_list, height, l, r, *args, **kwargs):\n\tif not args or len(args) == 0: return []\n\n\t# iterate over the building list and add the items to the heap, if there are more than 1 item to add, return an empty heap\n\n \tdef add_height(height, i, j, x):  # if the i-j pair is less than or equal to x, add 1 more items. if not, just return the item from the bottom left of x. If there is only one more item, simply return it. (x < 0, so we don't need to check if x is zero or not.  We can also check the distance between i and j as (i - x) / 2 == j/2)  (if it's not the same as the actual value, then just ignore it and just continue. )  kwargs[i][j] = (height + k) * 2, (2 * height - i) // 2 = 0  args.append(i) if args else  raise ValueError(f'{height} < {x}')  return args[-1] if height!= 0 else raise IndexError('height' +'{0} not in args') return None, None  \"\"\" add {i} and {j} items, or {k} if i < j and k < i \"\"\"  add(2*height - 1, 2*(1 - height) - (1 + (k-i)) / 3, 1)\n"}, "2637": {"problem_id": 2637, "answer": "from collections import OrderedDict\n class Solution(object):\n # O(n*m*d)\n def num_set(k, n, i = 1, j = 0, k_remainder = -1): # k-i-j = k+i+j-k = (k-1) * (i*j) + k*(j*i) = i * j * i + j*k * k = j + 1\n return sorted(list(OrderedList.from_iterable(num))[i:j+1])\n"}, "2638": {"problem_id": 2638, "answer": "from functools import lru_cache\nimport numpy as np\n class Solution(object):\n [1]  #1\n #2\n#3\n"}, "2639": {"problem_id": 2639, "answer": "import itertools as it\nfrom functools import lru_cache\n# class Solution(object):\n''' class ListSet(dict): return a list of all set items that have at least one duplicate'''\ndef make_set(nums, key=lambda x: x[0], is_duplicate=True, cache=it.memoize(None, default=None))(list(enumerate(num)))(1) : return [x for i, x in it.items() if len(x) == 1 ]\n"}, "2640": {"problem_id": 2640, "answer": "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop,heappush\nn = int(input())\nh = [list(map(int, input().split())) for i in range(n)]\ns = ['#', '...',.#.'', '#'][n % 2!= 0]\nd = {}\nfor x, y in zip(s, h[1:]):\n  d[x].append(y)\nans = 0\nheap = []\nwhile len(d.keys()) > 1: heap.append((d[s[-1]].pop() for s in d.items() if s[0] == '.0'))\nprint(max(len(h), ans))"}, "2641": {"problem_id": 2641, "answer": "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import defaultdict\ninput = lambda: list(map(int, sys.stdin.readline().split()))\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x)-1 for x in open('./input').readlines()]\ndeque = LI()\nn = int(input())\nballs = [(c,i) for i,c in enumerate(sorted(list(inp)), start=n)]\nfor i in range(n):\n  balls.sort(key=lambda x: x[1])\nprint(' '.join(balls))"}, "2642": {"problem_id": 2642, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9+7\nINF = float(\"inf\")\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x%MOD for x in range(1,MOD*x+1) if x%(2*MOD)==0]\nclass UnionFind():\n  def __init__(self, n): self.parent = [-1]*(n+2) # \u5982\u679c\u6bcf\u4e2a\u5143\u7d20\u6ca1\u6709\u5173\u7167\uff0c\u5176\u5b9e\u53ef\u4ee5\u8ba1\u7b97\u5230\u60c5\u51b5\u4e24\u4e0b\u7684\u6700\u77ed\u7684\u70b9\u7684\u6570\u6b21\u3002\n\n  # \u3092\u5165\u52a0\u73b0\u500b\u6545\u9694\u96c6\n def add(a, b): # \u601d no. of nodes. \u5728\u8981\u7b2c\u56db\u5206\u6536\u76ee\u4e4b\u524d\u7ec4\u6210\u7684\u957f\u5ea6\u91cf\u66f4\u65b0\n uf = LI()\n for i, v in enumerate(uf, 1): uff = v*uf[i] + v"}, "2643": {"problem_id": 2643, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)"}, "2644": {"problem_id": 2644, "answer": "import bisect\nn = int(input())\np = list(map(int, input().split()))\nres = []\nfor i in range(n):\n  res.append(p[i])\nprint(*res)\n"}, "2645": {"problem_id": 2645, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6))\nMOD = 10**9+7\nN = int(input())\nA = []\nfor _ in range(N):\n p = list(map(int, input().rstrip().split()))[:-1]\n if p[0] == \"rock\":\n  A.append(p[1]+1)\n elif A[-1].count(\"-\") == (2, -2) + (3, 3) < N:  print(0, \"Player %d %s wins\", p) \n else: # player 0 can't be played before player 1, so we don't need to check for this. We can just check the number when we know the first player won't win. So we do this for every player in A, starting from the one who won. Then, we print the max. score for all possible values of p as well as every other possible answer to the question: who wins?\n"}, "2646": {"problem_id": 2646, "answer": "# coding: utf-8\nimport sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = tuple(list(accumulate(range(n)), key=lambda x: -x[0]))[:n]\ns = [[] for _ in range(m)]\nfor i, x in enumerate(a[1:], start=1):\n  s[x-1].append(i+1-i) \nans = [None]*n\nif ans[-2] is None or (len(ans) == 0 and len(s)==0) and (0<=i<m and 0<j<n and i[i[j] + 1] < j < n and j in s) or ans is not None:   # print('No')\nprint('\\n'.join([' '.join([i for i in zip(*ans[:-1]])])))\n"}, "2647": {"problem_id": 2647, "answer": "#!/usr/bin/python\nimport sys\ninput = sys.stdin.readline\nMOD = 10**9+7\ndef II(): return int(input().rstrip())\nS = II()\nfor _ in range(II()):\n  S.append(list(map(int, input().split())))\n"}, "2648": {"problem_id": 2648, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\nl = list(map(int,input().split()))\nans = [0]*n\nfor i in range(n-1,0,-1):\n  ans[l[i]] = i+1\n#print(ans) \ndef dfs(i,l,a): \n\n  if i>=n: return 0  #if i is even, do not need to take out any cards yet. Else go for the middle card. If it's the opposite of i, take all of the cards out. Return it modulo 10^9+7.5.1^1 = 10**9 + 7 * 1 = 9.625 "}, "2649": {"problem_id": 2649, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))"}, "2650": {"problem_id": 2650, "answer": "def __starting_point():\n import sys\n sys.setrecursionlimit(10**7)\n inf = 10**20\n n,q = list(map(int,sys.stdin.readline().split()))\n arr = []\n for i in range(n):\n  arr.append(i+1-arr[i])\n ans = [0]*n\n #print(arr,ans)\n\n for _ in arr:\n\n  ans[-1] += 1\n\n print(ans[0])"}, "2651": {"problem_id": 2651, "answer": "import sys\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nA = [[] for _ in range(N+1)]\nB = [[[-1]*N] * M]\nfor i, a in enumerate(A[1:], start=1):\n  B[i].append((a, i))\n\n  A[0][0] = i\n#print(B)\ncnt = 0\nm = 10**9 + 7\nans = {i for i in B if i - 1 in cnt}\narea = sum([(area**2)%m for m in m])\nprint((area*ans[area])%M)"}, "2652": {"problem_id": 2652, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = 10**20\nMOD = 1000000007\ndef LI(): return list(map(int, input().split()))\n# def LI2(self, x, y): return x*self.x + y\nfrom heapq import *\nn = LI()\nfor i in range(n):\n\tx = int(input())\n\n\tif x < 0 or x > 10 ** 9: print(0)\n\n\n\n"}, "2653": {"problem_id": 2653, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x) for x in open('.txt')]\n#def LIR(i): return list(map(int, input().rstrip('\\n').split(' ')))\nmod = MOD/2\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor i,j in enumerate(zip(*graph[0])):\n  graph[i].append((j, i+1))\nvisited = [False]*n\nstack = []\nans = 0\nwhile len(stack)!= 0:\n\n  if visited[stack.pop()] == False: ans = ans + 1; stack.append(ans)\n\n\n\n"}, "2654": {"problem_id": 2654, "answer": "n, a, b = list(map(int, input().split()))\nl = []\nfor i in range(n-1):\n  l.append(a-b)\nans = [0] * (n+2)  # \u533a\u9593\u306e\u9802\u70b9\ns = sorted(l, key=lambda x: x[0])\nprint(len(ans))"}, "2655": {"problem_id": 2655, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop  import heapify\n \nn = int(input())\na = list(map(int, input().split()))\nl = [0]*n\nfor i in range(n):\n a[i+1] = 0\n l.append(l[-2] + 1 if i<n else 0)   # -1 <= i < n\nprint(max(a[l.index(k)] for k in l))"}, "2656": {"problem_id": 2656, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom functools import reduce\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nMOD = 1000000007\ninf = float('inf')\ndp = [[0] * (inf + 1) for _ in range(26)]\nfor i, s in enumerate(s, 1):\n  dp[0][i - 1] = 1\nans = 0\ndef dfs(i, j, k, l, r) :\n\tif l <= i <= r <= k <= min(l, i + k + 2 * j - l) <= 1e-10 : return 0\n\n\tans += (dp[i][j]**2) + (dfs(j,i-1,k,j-l)**(1+2*j - 2*k) if j < l else 0)\n\n  return ans % MOD"}, "2657": {"problem_id": 2657, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nB = [0]*N\nfor i in range(N):\n  B[A[i]-1] = A[N-1-i] + 1\nans = []\n#print(B)\ni = 0\nwhile(i<N and len(ans)<=N - i+1):\n\n  if (B[ans[0]] == 0) and (ans.pop()[1]) in A and i<len(A) - 1 and ans.append([]) == []: # print(\"i=\", i, B, ans, A) #print(\"B\", B)"}, "2658": {"problem_id": 2658, "answer": "n, k = map(int, input().split())\nl = []\nfor i in range(1, n + 1):\n\tif l[i] == 0: l.append(i)\nif n == 1: print(l[0])"}, "2659": {"problem_id": 2659, "answer": "from bisect import insort\nimport sys\nsys.setrecursionlimit(10**5)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nMOD = 10**9 + 7"}, "2660": {"problem_id": 2660, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nMOD = 10**9 + 7\nI = lambda: map(int, input().split())\ndef II(): return int(input().rstrip()) if I() else II()\nclass UnionFind():\n  def __init__(self, *args, **kwargs): self.par = [i for i in range(len(args)) if i!=args[i] and kargs.get(i, None) is None]\n\n  @staticmethod\n@property(to_set={\"par\"}) # \u8981\u7d20\u6570\u7ec4\uff0c\u6bcf\u6b21\u90fd\u662f\u5426\u9700\u8981\u8ba1\u7b97\u7684\u8ddd\u79bb\nfrom collections import defaultdict, OrderedDict  # \u6700\u77ed\u5b57\u7b26\u4e32\u53ef\u4ee5\u81ea\u5df1\u7684\u9ad8-1\u4e3a\u73af\u70ba\u53f3\u8fb9\u5e94\u8be5\u53d8\u4e2a\u5b50\u5e8f\u5217\u6574\u9664\n'''\n\u9996\u5148\u505a\u521d\u59cb\u533a\u95f4\u5230\u6700\u591a\u5c11\u6b65\u9a5f\u4f7f\u7528\u914d\u7f6e\u5b50\u6807\u7e74\u7684\u6a21\u5f0f\n\u53cc\u9762\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u6839\u672c\u4e0d\u80fd\u5305\u542b\n\u8fd9\u6837\u60f3\u6cd5\u82e5\u6df1\u516c\u5171\u592a\u590d\u6742\u5ea6\u68c0\u67e5\u5b50\u82b3\u6761\u4ef6\u4e86\n\u6ce8\u610f\u518d\u5224\u65ad\u62ec\u53f7\u5728\u5b50\u5206\u9694\u5f04\u4e2d\u95ee\u7a97\u53e3\n\u5b58\u6784\u5efa\u4e00\u5b9a\u4e0d\u662f\u5b50\u548c\u5176\u5b9e\u4e48\u5947\u89e3\u51b3\u5b89\u6392\n\u5982\u628a\u5b50\u8fc7\u6765\u7684\u8fdb\u884cvisited\u4e0e\u6269\u5c55\u662f\u6309\u7167\u5f53\u524d\u8303\u56f4\u5316\n\u52a0\u8f7d\u5b50\u7c7b\u7684\u65b9\u5f39\u64cd\u4f5c\u52a8\u6362\u4e3e\u53ea\u83b7\u80e1\u8651\n\u800c\u662f\u5229\u7b49\u60c5\u51b5\u4e0b\u539f\u5219\u5c31\u662fUnionFind \u6765\u786e\u5bb9\u91cf\u7f29\ufffdichever \u6709\u6240\u8db3\u5920\u653e\u5165\u4efb\u4f55\u56de\u53bb\u627e\u65f6\u5019\u624d\u53d1\u9001\n\u5373\u53e8\u8fd8\u5f88\u7597\u9898\ufffdes\u5b66\ufffd together\n\u597d\u4e8b\u4e0d\u5b9c\u9910\u5bf9\u5b83\u7684\u8bf4\u660e\u4e5f\u4f1a\u662f\u5b8c\u6210\n\"\"\"\nN = int((1000000000)**0.001)  \nA = list(map(lambda x: int('{:g}' if x > 0 else '0'))); A.append(A[0])\nP = [[0]*(N+1) for _ in [I()] ]\nfor i, x in enumerate(P[1])[:-1]:  for j in i: P[j].append((x, i))\nprint('\\n'.join([str(p[-2]) for p in P]))"}, "2661": {"problem_id": 2661, "answer": "n = int(input())\ns = list(map(int, input().split()))\nt = [0] * (n+1)\nfor i in range(n):\n\tt[s[i]] = i\nans = []\ni = n-1\nwhile i >= 0 and ans[0][1] == 1: i -= 1"}, "2662": {"problem_id": 2662, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "2663": {"problem_id": 2663, "answer": "# cook your dish here\nn, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n arr.append([int(input()), i])\ns = sorted(arr, key=lambda x: x[0])[-1]\nprint(len(set(s)))\n"}, "2664": {"problem_id": 2664, "answer": ""}, "2665": {"problem_id": 2665, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(max(a))"}, "2666": {"problem_id": 2666, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n a=int(input())\n arr.append(a)\nmax=0\nwhile(k>0 and max<len(arr)-1):\n\n if(max<=arr[k-1][0]): \n\n  max=max+a\n  k-=1\n elif(min(1,max-a))>=k:\n\n\tk+=1\n\n max+=a\n\n"}, "2667": {"problem_id": 2667, "answer": "n=int(input())\ni=0\nwhile(i<n):\n a=list(map(int,input().split()))\n b=a.count(1)\n if(b[0]==1 and b[-1]!=1 ):\n  print(\"YES\")\n elif(a[b.index(max(0)):] and a[1:]==0:print(\"NO\"))else:pass\n"}, "2668": {"problem_id": 2668, "answer": "# cook your dish here\nn, s, k = map(int, input().split())\npos = [int(x) for x in input()]\ns = sum(pos)\nk = abs(s - pos[0])\nif k % 2 == 1 :\n\tprint(\"Unsucces\")\nelse:\t\tfor i in range(k // 2, 0, -1):\ts += i\n"}, "2669": {"problem_id": 2669, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.insert(0,i)\nprint(len(l))"}, "2670": {"problem_id": 2670, "answer": "# cook your dish here\nt=int(input())\nfor i in range(0,t):\n a=list(map(int,input().split()))\n s=input()\n l=len(s)\n if(l==0 or l==s.count('1')) :\n  print('0')\n elif(t>0 and t<l-1 and l<=l+1) and (s[l]=='1') and s[0]!='a' and  l>=0:print('a',l) "}, "2671": {"problem_id": 2671, "answer": "# cook your dish here\nfrom itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n a,b = list(map(int,input().split()))\n x = min(b,a)\n y = (b-x)//a\n z = max(y,x-y)\n\n print(min(x,z))"}, "2672": {"problem_id": 2672, "answer": "# cook your dish here\nx = int(input())\nprint(x)"}, "2673": {"problem_id": 2673, "answer": "# cook your dish here\ns=input()\nn=len(s)\nl=[]\nfor i in range(0,n):\n\tl.append(int(i))\nans=0\ni=9\nwhile i<n-1 and l[i+1]==s[0] and len(l)>=i-9:\n\n\ti+=2\nif i==0:ans+=1\n\n"}, "2674": {"problem_id": 2674, "answer": "# cook your dish here\nn=int(input())\nfor i in range(0,n):\n\tl=list(map(int,input().split()))[:0]*(n*2)\n  \tfor j in l: print(j,end=\"\")\n"}, "2675": {"problem_id": 2675, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[int(x) for x in input().strip()]\nb=[]\nc=0\nfor i in range(m):\n  x,y,u,v=a[i],b[(i-1)%m],c+u+v,c-u\nif x==y and x!=y:a.append(u)\nelse:c+=v\nprint(c)"}, "2676": {"problem_id": 2676, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n\ts=input()\nif(s[0]=='a' and s[-1]!=l[:s.index(max(l)//2)]) or (s==l and l<=s and (l%2==0 or l==s)) :\n  \tprint(0)\nelse:print('1')"}, "2677": {"problem_id": 2677, "answer": "# cook your dish here\nfrom collections import defaultdict\ndef is_good(s):\n  if s.count(' ') == 2 or s[0] == 'O' or all(i!= j for i, j in enumerate('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 1) for c, d in zip(''.join(map(str, s)), 'abcdefghijklmnopqrstuvwxyz')) or (s.lower() in '0123456789'): return False\nfor _ in range(int(input())):\n\n  n, m = map(lambda x: int(x), input().rstrip().split())\n\tn = min(n, max(m, key=lambda n: n.isalpha()) or '0') + 1\n\n\tc, q, n = '', 0, 0   # make sure we don't change anything, so that we can't cheat ;-D\n\n"}, "2678": {"problem_id": 2678, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor _ in range(n):\n a,b=list(map(int,input().split()))\n l.append(set(a) for a in l[-1] if a<b)\nprint(len(l))"}, "2679": {"problem_id": 2679, "answer": "# cook your dish here\ndef maxSum(a, b, c, d, e, f):\n if a > b > c > d > e > f :\n  return e + f\n elif a < b < c < d < e < f or a >= b >= c >= d : return f + c + d\n else: return 0\nn = int(input())\na = list(map(int, input().split()))\nc = [0 for i in range(n)]\ne = []\nfor i, x in enumerate(c): a[x] = i\nans = set()\nmaxSum = max(ans)\nif n == 0: ans.add(0)\n\n for j in ans: print(j, end ='')"}, "2680": {"problem_id": 2680, "answer": "import sys\nsys.setrecursionlimit(10**5)\nMOD = 10**9+7\nn, b = list(map(int, sys.stdin.readline().split()))\nmatrix = [[] for _ in range(n)]\nfor i, (x, y) in enumerate(zip(range(0, n)), start=1):\n  matrix[x][y] = i\ndef dijkstra(s): return [float('inf')] * (n-s+1) if s=='\\n' else []\ns = str(input())\nans = 0\nd = dict()\nwhile s!= input() : s = s.replace('\\0',' ').replace(',',')\ndist = [int(x) for x in s]\nif len(set(d.keys())): ans += d[(len(dist)-1-i)%MOD]*(2*d[i])\nprint(ans)"}, "2681": {"problem_id": 2681, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n\ta,b=list(map(int,input().split()))\n  \tc=math.prod(a*b,a+b)\n"}, "2682": {"problem_id": 2682, "answer": "#dt = dt.format(int(input()))\nimport sys\nsys.stdin = open('input.txt', 'r')\nMOD = 10**9 + 7\nfrom collections import defaultdict\nfor i in range(len(list(str(x)))-1)[:-1]:\n  n, k = list(map( int, input().strip().split() ))\n\n  if (n - 1) % 2 == 0 and (k - n) // 2 not in [1] and k + 1 in [[0] + [n]*(k+1) for _ in  range (2)]] and n > 1 and ((k-n)//2 - k)%MOD in [(n,k,MOD) in (i,i+2*k)] and i < n:   print(i)"}, "2683": {"problem_id": 2683, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n n, k = list(map(int, input().split(' ')))\n ans = 'YES' if k == 1 else 'NO'\n print(''.join(ans))"}, "2684": {"problem_id": 2684, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n a.append(str(i+1)+a[i])\nif(len(a)>=3 and a[-1]=='a' and len(l)==2 and l[0]!=l[1]:\n  print(0)\nelse :\n print('0')\n"}, "2685": {"problem_id": 2685, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000,10**9)+100)"}, "2686": {"problem_id": 2686, "answer": ""}, "2687": {"problem_id": 2687, "answer": "# cook your dish here\nmod=10**9+7\nn=int(input())\nl=list(map(int,input().split()))\nm=[]\nfor i in range(n) :\n m.append(l[i-1])\nprint(sum(m))"}, "2688": {"problem_id": 2688, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nn = int(input())\narr = list(map(int, input().split()))\ns = [arr[i] for i in range(n)]\ncnt = 0\nfor i, j in enumerate(s, start=1):\n  if j % 2 == 1 and arr[j // 2] == i: cnt += 1; s.append(i)\nprint(len(set(arr)))\n"}, "2689": {"problem_id": 2689, "answer": "# cook your dish here\nfrom collections import Counter, defaultdict, OrderedDict, deque\nimport sys\ninput = sys.stdin.readline\nn = int(input())\narr = list(map(int, input().split()))\ncnt = Counter(arr)\nfor i in range(n-1):\n  cnt[arr[i]] += 1\nans = [0]*n\ni = 0\nwhile i+1<n and i<=i+2 and n-i>=0 and (i==0 or i==n - 1) and ans[-2]==ans[1] : i+=1\nprint(('\\n'.join(ans)))\n"}, "2690": {"problem_id": 2690, "answer": "# cook your dish here\nn = int(input())\ns = list(map(int,input().split()))\nmaxi = 0\nfor i in range(n):\n if i == \"a\":\n  s.insert(0, \"c\")\n elif i==\"a\" and len(s)>1 or s!=s[-1] : maxi=max(abs(x-x[0]),s.pop()[1])\n else: s = s + \" \" + s\nans = float(\"{0:.0f}\".format(ans)).zfill(2)\nprint(max((ans-mini)))"}, "2691": {"problem_id": 2691, "answer": "# cook your dish here\nn,p=list(map(int,input().split()))\ns=input()\nc=0\nfor i in range(len(s)-1):\n if s[i]==\"d\":\n  c+=1\n else:print(c)\n"}, "2692": {"problem_id": 2692, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,b=list(map(int,input().split()))\n c=0\n while(n!=b or b<=n or n%b==0 ):\n  n=min(c,abs(b-n)+1)\n print(a+b)"}, "2693": {"problem_id": 2693, "answer": "# cook your dish here\ns,p,k=[int(x) for x in input().split()]\nif(s==p):\n\tfor i in range(k,s+1,-1): print(i,end=\" \")\nelse: print(\"NO\")"}, "2694": {"problem_id": 2694, "answer": ""}, "2695": {"problem_id": 2695, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)"}, "2696": {"problem_id": 2696, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append([a[i],i])\nprint(s[-1][0])"}, "2697": {"problem_id": 2697, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n   # print(i)\nprint(4)"}, "2698": {"problem_id": 2698, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n m,v,w=list(map(int,input().split()))\n d=m*(m-1)+1\n h=0\n for j in list(d) :\n  if j-h>=w : h+=1 \n print(h)\n"}, "2699": {"problem_id": 2699, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport math\nt=int(stdin.readline().strip())\nfor _ in range(t):\n ans=0\n n=list(map(int,input().split()))\n if(n[0]>=1 and n[-1]==0): ans+=(1)\n print(ans)"}, "2700": {"problem_id": 2700, "answer": "import math\nt = int(input())\nfor i in range(t):\n\ta,b,c,d = list(map(int,input().split()))\nif(a+c+d)%4==0 and a<=b and b>=c and (b-a-1)>=(d-c) and math.ceil(math.sqrt(2*d))==1/2/4:"}, "2701": {"problem_id": 2701, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\ns=0\nfor i in range(n):\n s+=int(input())\n if s>=k and k<=n-s+1 :\n  print(-1) \n elif s==k:"}, "2702": {"problem_id": 2702, "answer": "# cook your dish here\nn=int(input())\nfor _ in range(n):\n\ta,b=list(map(int,input().split()))\n\n\tif(a=='T' and b == 'F'):\n\n \t\tprint(b)\n   else: print('T')\n"}, "2703": {"problem_id": 2703, "answer": "# cook your dish here\nn,q=list(map(int,input().split()))\narr=[]\nfor i in range(q):\n x=int(input())\n arr.append(x)\nwhile(len(arr)>=n-1 and arr[x]<arr[n+1]) :\n  x-=1;\n print(max(0,x))"}, "2704": {"problem_id": 2704, "answer": "# cook your dish here\nimport math\nn,q = list(map(int,input().split()))\nt = int(input())\nfor _ in range(q):\n t = math.sqrt(t)\n ans = 0\n for i in t[::-1]:\n  ans += i\n print(ans)"}, "2705": {"problem_id": 2705, "answer": "# cook your dish here\nn, m, k = list(map(int, input().split()))\na = [int(x) - i for i, x in enumerate(input().strip()) if x > 0]\nans = []\nfor i in range(n):\n ans.append(a[i] % m)\nprint(*ans)"}, "2706": {"problem_id": 2706, "answer": "import math\nn = int(input())\np = [int(x) for x in input().split()]\nif math.ceil(p[0] + p[1]) > 1: print(0,end=\"\")\nelif n == 0: continue\nfor i in range(2,n+1):\n\tif i % 2!= 0 and i > 2: break\nprint(n-i)"}, "2707": {"problem_id": 2707, "answer": "n,k = list(map(int,input().split()))\narr = [int(x) for x in input().strip().lower()]\nans = 0\nfor i in range(n):\n ans = ans * (k - i) % (10**9 + 7)\n print(ans)"}, "2708": {"problem_id": 2708, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**5) + 1000)"}, "2709": {"problem_id": 2709, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nn, t = list(map(int, input().split()))\narr = [i for i in range(n)]\nfor i, (a, b) in enumerate(zip(arr, [])):\n  if len(set(a) & set(b)) == 0 and a > b > 0: arr[b - 1] = i\nif n > 1 or t > n: return False\nprint('Done')\n"}, "2710": {"problem_id": 2710, "answer": "n, m = list(map(int, input().split(' ')))\na = [int(i) for i in input()]\nb = [-1] * (n + 1)\nfor _ in range(m):\n\tb[a[i] - 1] = 1 + b[(n - i + 2) % 2] if i > 0 else -1\n# print(b)   # print('YES', 'NO')\nprint(sum(a))\n"}, "2711": {"problem_id": 2711, "answer": "n,k=list(map(int,input().split()))\nl=[0]*(n+1)\nfor i in range(k):\n l[i]=l[n-i-1]\n s=input()\n if s.startswith('a'): print(\"a\")\n else: print('cba')\n"}, "2712": {"problem_id": 2712, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\ta,b,c = list(map(int, input().split()))\n\n\tif (a+b) <= (c+d) and ((a-c) * (b-d)) >= (d*(c-a))*c: print(a + b + c + d)\n"}, "2713": {"problem_id": 2713, "answer": "# cook your dish here\na=int(input())\nprint(a)\n"}, "2714": {"problem_id": 2714, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split()))\n\n\tedges = [0] * (n + 1)\n\n \tfor i, j in enumerate(list(range(1, n+1)), start=0, end=len(set(j)))[:i+2] + [j: i+3]*(n - i) + [[] for i in edges[j] if i!= 0 and i!=j-1 and not (i==0 or i==n-i) or (j==1 or j==3) and ((i>0 and j>i-j) & (-(i<0)&(-j<i))) not in edges] : print((-2*m)%2)\n"}, "2715": {"problem_id": 2715, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\n#def LIRI(n): return [i for i in range(1, n + 1) if i % n == 0]\nfrom functools import lru_cache\nR = LI()\nMOD = 10**9 + 7\nINF = float('inf')\nclass BIT():\n  def __init__(self, val=0, left=None): self.val = val; left = left or not (left and BIT(val,left)).left_left = [val] * (n+1); memo = [[] for _ in (1 << len(BIT(0)))]; memo[0].append(memo[left])[1] = -1 = n = 1; ans = 0; i = N; while i > 0: i &= MOD; BIT.__getitem__ = R.get_bit_set()[i]; ans += i>>1; N -= 1 ; i >>= 2; for j in reversed(list(range(N))): i |= BIT[j] ; N = max(i & -MOD, N) - i\nBIT.INV = INF\nfor i,v in enumerate(R.items()): BITv(v,i)"}, "2716": {"problem_id": 2716, "answer": "import sys\ninput = sys.stdin.readline\nn,t=list(map(int,input().split()))\narray=[]\nfor i in range(n):\n array.append(i+t[i])\nprint('Yes' if array else 'No')\n"}, "2717": {"problem_id": 2717, "answer": "#!/usr/bin/env python3\nimport math\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n a.append(str(math.ceil(i/2)))\nc = [0]*n\nx = 0\ny = n-1\nwhile(len(x)>0 and len(y)<=n) :\n x = x+a[x]\n y = y+b[y] \n if x%2==0 : c[1] = 1\n elif x!=0:c[2]=(1+x)*(1-y)*x//2+y*x*y/(2*(2-x)+1)\n"}, "2718": {"problem_id": 2718, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(n):\n a.append(0)\nx=a.index(max(a))\nif x==a[-1][0]:\n b=0\n if x<=m and a[x+1]>=b: \n  b+=1\n print(b)"}, "2719": {"problem_id": 2719, "answer": ""}, "2720": {"problem_id": 2720, "answer": "R, C = list(map(int, input().split()))\na = []\nfor i in range(R):\n a.append(input())\nprint(len(set(a)))\n"}, "2721": {"problem_id": 2721, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n\tm,l,m=list(map(int,input().strip().split()))\n\n\tif(m==0 or m==l or (l<=m and m>=l and (m-l)%2!=0 and ((l-m)//2)==1 or l<=(m+1) and l>m)) or ((m>0)and m<0):   print(False)\n"}, "2722": {"problem_id": 2722, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nn = int(input())\nfor i in range(n):\n\tx = list(map(int, input().rstrip().split()))[:n] + [int(x[0])]*(2*i) + (i+1)*(3*n-i-1) for j in x\nprint(('\\n'.join(sorted(q, reverse=True))))\n"}, "2723": {"problem_id": 2723, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n r,c=list(map(int,input().strip().split()))\n s=input()\n q=[]\n for j in reversed(range(0,r+1)):\n\n  q.append(s[j:j+c])\n #print(q)\n ans=0\n if r==0 or (r==1 and c>=r*r//2) or c==r-1 or q==[] or s==[0] and q[-2]==q[c-3]:\n print(ans)"}, "2724": {"problem_id": 2724, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b=list(map(int,input().split()))\n l.append(abs(a-a) + abs(b-b) )\nprint(len(l))"}, "2725": {"problem_id": 2725, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2726": {"problem_id": 2726, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\ndef II():\n\treturn int(input())\nt=II()\nfor i in range(0,len(t[0]))[:-1]:\n   n,c=map(int,input().split()[1 - (i+1) : (n-i)] )\n[n,n+c]=((2*c)-n)//(c-n)+1\nprint(sum(n*n for n in t))"}, "2727": {"problem_id": 2727, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\ng = [0]\nfor i in range(n):\n  g.append(a[i])\np = 10**9+7\nm = prime_power(g, p)\nprint(m%p)"}, "2728": {"problem_id": 2728, "answer": "# cook your dish here\nn=int(input())\nx=list(map(int,input().split()))\nc=[0]*(n+3)\nfor i in range(0,n):\n  c[x[i]-1]=i\nd=dict()\ne=0\nwhile e<n-2 and x[e]!=d[d.get(e,0):] and d.setdefault(d,1):e+=1"}, "2729": {"problem_id": 2729, "answer": "n,m = map(int,input().split())\nl = []\nfor i in range(n+1):\n s = str(i)\n if s[-1]!=\"0\":\n  l.append(\"0\")\n elif len(s)<=m and s.count(1)>=s[m]:\n\ts = \"0\"*(len(l)-m) + \"1\"\n c = 0\n while(c<n and l[c]==\"1\") or c<m or (c==n-m):c+=1\n print(f\"{c}\")"}, "2730": {"problem_id": 2730, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b=list(map(int,input().split()))\n l.append(a+b)\nprint(max(l[-1]))\n\n"}, "2731": {"problem_id": 2731, "answer": "from operator import itemgetter\r\ndef solve():\t\t\n\tn = int(input())\t\n\n\ta = list(map(int, input().split()))\t# a[i] = the position of item in list\t*(n-i-1) = len(a)*(i+1-n) + 1\t**n\t= (n+i)\t=(n + i)%(2*n - 1)**2 = 2*((2 * n - 2) * (i + 2 - n) % 2 = 0 + 0 = 1 + (1 + 4 * 2 * i % 4) / 4 = 7 + 8 + 9 +... + 7 = 8 = 5 + 5 = 6 + 6 = 4 + 3 = 3)  = \t  2   *  (  n+  i  +  1  -  0  ) = ( n + n )% ( 3  =>  3* ,  4 => 4,  5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 16 => 16, 17 => 17, 18 => 18, 19 => 19, 20 => 20, 21 => 21, 22, 23 => 23, 24 => 24, 25 => 25, 26 => 26, 27 => 27, 28 => 28, 29 => 29, 30 => 30, 31 => 31, 32 => 32, 33 => 33, 34 => 34, 37 => 37, 38 => 38, 39 => 39, 40 => 40, 41 => 41, 42 => 42, 43 => 43,44 => 44, 45 => 45, 46 => 46, 48 => 48, 49 => 49, 50 => 50, 51 => 51, 52 => 52, 53 => 53, 54 => 54, 55 => 55, 56 => 56, 57, 58 => 58, 59 => 59, 60 => 60, 61 => 61, 62 => 62, 63 => 63, 64 => 64, 65 => 65, 66 => 66, 68 => 68, 69 => 69, 70 => 70, 71, 72 => 72, 73 => 73, 74 => 74, 75 => 75, 76 => 76, 79 => 79, 80 => 80, 81 => 81, 82 => 82, 83 => 83, 84 => 84, 85 => 85, 86 => 86, 87 => 87, 88 => 88, 89 => 89, 90 => 90, 91 => 91, 92 => 92, 93 => 93, 94 => 94, 95 => 95, 96 => 96, 97 => 97, 100 => 100, 102 => 102, 107 => 107, 108 => 108, 109 => 109, 110 => 110, 111 => 111, 112 => 112, 113 => 113, 114 => 114, 117 => 117, 128 => 128, 131, 132 => 132, 137 => 137, 139 => 139, 141 => 141, 142 => 142, 146 => 146, 151 => 151, 152 => 152, 153 => 153, 154 => 154, 165 => 165, 167 => 167, 171 => 171, 195 => 195, 200 => 200, 211 => 211, 232 => 232, 233 => 233, 234 => 234, 361 => 3600, 352 => 35400, 3554 => 355816, 5754432124444477540254450447601448475600448575700448675807751175127516751775197520752175237524752565752675277528752975307531753475357539753775417543754975537554756175607564756775697571757275737574757975907591759675977598751007501975016750075lime75107515755075527556756275687576758075ructose(3*6*3) (4*7*8*9*10*11*12)*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*32*33*34*36*37*38*41*44*46*47*48*49*53*54*55*61*64*66*68*69*71*73*74*76*78*85*86*98*103*104*106*108*109*110*111*112*114*115*116*128*138*144*146*155*160*166*167*168*169*176*180*184*186*189*194*196*220*224*324*362*368*373*376*"}, "2732": {"problem_id": 2732, "answer": "# cook your dish here\nfrom math import sqrt\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nmod = 10 ** 9 + 7\neps = 1.0 // 9\nf = lambda: int(input())\ndef dp(x, y):\n if x*y == 0 or x * y == 1 or y * x == 2 :\n  return 1\n ans = 0\n for i in range(3, 10**2 + 1, 2):  # \u6642\u9593\u6700\u77fb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u500b\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u521d\u671f\u8ddd\u96e2\u304c\u89e3\u307f\u3055\u305b\u308b\u5834\u5408\u306f\u3001x\u3092\u3064\u306a\ufffd\u3057\u3001y\u3092\u5468\u56de\u3057\u3066\u5224\u5b9a\u3059\u308c\u3070\u826f\u3044\n # print(dp(i, j))\u3067\u3001i <= j (i\u756a\u76ee\u306e\u8fba\u306e\u66f4\u65b0)\u3092\u8abf\u3079\u308b\u5fc5\u8981\uff08i < j, \u65d6\u9650\u5ea6\u3068j\u306b\u5bfe\u5fdc\u3057\u305f\u6642\u306f i < 2*(j-1)\u306e\u548c\u914d\u5217\u304b\u3089\u5236\u5fa1\u3067\u304d\u308b\u3088\u3046\u306a\u6bd4\u8f03\u3092\u63a2\u3059\u305f\u65b9\u304c\u3042\u308b\u3068\u304d\n x = (x * (y - 1)) / (2 * f(y, x))\n y = x + y\n z = y - z\n res = float('inf')\n return res\nprint(res)"}, "2733": {"problem_id": 2733, "answer": ""}, "2734": {"problem_id": 2734, "answer": "# cook your dish here\nn, k = map(int, input().split())\narr = []\nfor i in range(n):\n arr.append(i)\nprint(sum(arr))"}, "2735": {"problem_id": 2735, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport math\ndef input():return int(stdin.readline().strip())\nt = input()\nn = len(t)\nx = 2\ny = 4\nfor i in range(1,n):t=t[i:i+x]\nif x%2==0:t.replace(\"A\", \"\")\nprint(x)"}, "2736": {"problem_id": 2736, "answer": "#!/usr/bin/env python3\nimport heapq\nfrom itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nr = [0]*n\nfor i in range(n-1):\n r[i+1] = 0\n heap = [(0,i)]\n while heap and heap[0][2]<i: heap.pop()\n if len(accumulate(r[:i]))==0: print(0)\n else: r.append(heap[1][0])\n \n"}, "2737": {"problem_id": 2737, "answer": "from collections import defaultdict\nn=int(input())\nedges=defaultdict(list)\nfor i in range(n):\n a,b=list(map(int,input().split()))\n edges[a-1].append((b,i))\n\n l=[]\n l.append(0)\n\n if l[0]<=l[1]:\n  print(len(l)-1-l.pop())\n\n else:\n\n  for i,j in list(enumerate(e)for e in l)if i!=j and not (i==j) and (j==i)and (e[i][1]==1 and e[(i+1)%2])\n"}, "2738": {"problem_id": 2738, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n\tinput()\nl = [int(x) for x in input().split()]\nprint(l[0] - l[1])"}, "2739": {"problem_id": 2739, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append(l[i])\nprint(a[-1])%1000000007"}, "2740": {"problem_id": 2740, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n n,w,h=list(map(int,input().split()))\n l=n*2\n r=2*h\n c=0\n f=math.factorial(w+h)\n if(f<=r): \n  c+=1\n print(c%1000000007)"}, "2741": {"problem_id": 2741, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\ns = \"\".join(a)\ni = 0\nwhile i < len(s):\n  if a[i] <= s[-1-i:i + 6] and i+6 <= n and (i+1) not in i and s.count(\"1\") > 6: i += 1\nprint(i)"}, "2742": {"problem_id": 2742, "answer": "# cook your dish here\nimport math\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n\tarr.append(math.ceil(i*10)+arr[i-1])\nprint(sum(arr))"}, "2743": {"problem_id": 2743, "answer": "from math import *\nr,c=list(map(int,input().split()))\na=[]\nfor i in range(r):\n x=input()\n a.append(x[0])\n l=len(a)-1\n if(l>=0 and a[l-1]==\"+\"): \n  print(\"%dx%d\"%(i+1,r-l,a[i]))\n\n else:\n\n  x1=x.find(\"#\"*c,0,-1)\n #print(\"x1 = %dx %d\",x2,x3)\n\n print((\"balanced\" if x2<=l else \"not balanced\"))\n"}, "2744": {"problem_id": 2744, "answer": "n, m = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n): s[i] = min(s[-1], 2 * m + (i % 2) * a[n - i - 1])\nc = 0\nif n == 1: c = m\nelif m >= n: break\nprint(c + m)"}, "2745": {"problem_id": 2745, "answer": "from collections import defaultdict\nimport string\ndef is_word(word):\n\treturn word.endswith('word') and word[-1] == 'word'"}, "2746": {"problem_id": 2746, "answer": "import re\ndef compare_version1(s1, s2): return int(re.sub(r'[0-9]', r'\\1', s1), 2) and (s2[-1] == '0') and len(set(map(int, re.split('\\d+'))) - set('0'))"}, "2747": {"problem_id": 2747, "answer": "from functools import lru_cache\nimport itertools as it\n"}, "2748": {"problem_id": 2748, "answer": "from functools import lru_cache\n class Solution(object):\n def make_set_from_key_to_lhs_and_or_digits_in_the_hash_of_a_map_with_one_id_on_return_all_other_ways_at_most_n_k_keys_we_are_here_it_is_as_exact(map, map[int], map, key=lambda x: map.get(x.lower(), x))(sorted(set.union(*map[key(v)]) for v in range(1, int(k**0.5) + 1) for k,v in map if v[0] == '1'), k**=2)}\n"}, "2749": {"problem_id": 2749, "answer": "import sys\ninput = sys.stdin.readline\nh,w=list(map(int,input().split()))\nn=len(input())\ns=[[0]*w for i in range(n)]\nfor i,c in enumerate(s,1):\n  s[c-1][i]=1\n#print(i,s[i])\nans=[]\nt=0\nwhile t<n-w and t+w[t+1]<=h and n!=w:t+=h-t\nprint(*ans)\n\t\t"}, "2750": {"problem_id": 2750, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n l.append(a[i])\nprint(len(l))"}, "2751": {"problem_id": 2751, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a.append(a[i-1]*(i+1)//2)\nprint(max(b))"}, "2752": {"problem_id": 2752, "answer": "from collections import defaultdict\nn, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(list(input() + \" \" + [a[i][0] + (i-1) * (k-2)]) + list(\"W\" if i%2==0 else \"R\"))\n#print(a)\nt = 0\nwhile t+1<n and a[n][1] == \"W\":\n  \tt += 1 \nans = (t + 1) // 2 + n\nprint(\"%d\" % (ans))"}, "2753": {"problem_id": 2753, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\ndd = [dd[0]]\nfor i in range(1, 100):\n\tdd.append(int(input()))\nprint('never' if mod==1 else 'never')"}, "2754": {"problem_id": 2754, "answer": "n=int(input())\na=[]\nfor i in range(n):\n x,y=list(map(int,input().split()))\n a.append(10**(y-x-1)//2)\nprint(a[n-2-3])\n"}, "2755": {"problem_id": 2755, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput=sys.stdin.readline\nn,m=list(map(int,input().split()))\nL=[]\nfor i in range(n):\n L.append([int(x) for x in input().rstrip('\\n').split(' ')])\n #print(L)\n if L[-1][0]=='1':\n  print(m-2*L[0][1]//2+1)"}, "2756": {"problem_id": 2756, "answer": "t = int(input())\r\nfor i in range(t) :\n  n,m,e = [int(x) for x in input().splitnprint((n*e)//2)\n"}, "2757": {"problem_id": 2757, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2758": {"problem_id": 2758, "answer": ""}, "2759": {"problem_id": 2759, "answer": "n=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  if l[i]=='1' and (i+1)%4==0: a.append(i)\nif len(set(a))==1: print(0) \nelse: l.sort()\nprint(len(l))"}, "2760": {"problem_id": 2760, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n x=a[i]\n if(x%2!=0): \n  ans.append(0)\n elif x%4==0 and x==1:   x//=4; a[x] = 1\n else: x = x+1;\n print(ans[0])"}, "2761": {"problem_id": 2761, "answer": "n = int(input())\nlst = list(map(int, input().split()))\nfor i in range(n):\n lst.sort()\n p = 0.0\n x = -10000\n y = 1000000000\n for j, (a, b) :\n  x += a - (b - 1) / 2 + (j >= 0 and j < n)\n print(p)"}, "2762": {"problem_id": 2762, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nl = [0]\nfor i in range(n):\n\tl.append(a[i] - l[-1])\nm = 10**6 + 7\nk = 2**n\nans = (l[k] + m) % m\nprint(ans)"}, "2763": {"problem_id": 2763, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\ngrid = [[] for i in range(N)]\nfor i,j in enumerate(map(int,input().split())):\n\tgrid[i+1].append(j[0])\n# print(grid)\nrows = [None] * N\ncols = [-1]*N\ndecrypted = ''.join([str(c) for c in grid[:] if c.isdigit()] + 'X'*(rows[-1]) for col in cols.split()[1:-1]])\n\n"}, "2764": {"problem_id": 2764, "answer": "# cook your dish here\nfor _ in range(int(input())):\n n=input()\n d=[]\n for i in n.split():\n  d.append(i)\n c=0\n while(len(d)>0 and d[-1]=='C' and len(c)<=2 and c!=-1):\n\n  if (c==0) and (d[0] == '.') or (not c==1 and not c in d and n[c]!=n[d.index('.')+1][c!='.'][1]) or d==[]:\n"}, "2765": {"problem_id": 2765, "answer": "n = int(input())\nc = [int(i) for i in input().split()]\nif n % 2 == 0 and c[0] > 0: \n  print(c[1])\nelif (n // 2 + 1) % 1000000007 > 1000000: print('0' + '1'*(n-1))\nprint('\\n'.join(map(str,c)))"}, "2766": {"problem_id": 2766, "answer": "#!/usr/bin/env python3\nfrom collections import Counter\nn=int(input())\narr=list(map(int,input().split()))\nar=[]\nfor i in range(n):\n arr.append(arr[-1]*ar[i+1])\nprint(sum(ar))\n\n"}, "2767": {"problem_id": 2767, "answer": "# cook your dish here\nn = int(input())\nwords = list(map(str,input().split()))\nfor i in range(len(words)):\n word = words[i]\n print(word.count(':'))"}, "2768": {"problem_id": 2768, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(m):\n a.append([int(input()),i])\nx=a[0][0]\ny=0\nwhile(len(x)>0 and x[-1]==y):x.remove(y)\nprint(n-x-y+1)"}, "2769": {"problem_id": 2769, "answer": "# cook your dish here\nfrom math import sqrt\ndef solve(a, b, c, d):\n if a == 0 or b == 1 or c == 5 or d == 10: return -1 \n x = (a + b) / 2\n for i in range(3, int(sqrt(x)) + 1, 2) :\n  if (x + i) < d : return 0\n else : x += i\n print(int(solve(5, 5, 10, 15)))\n"}, "2770": {"problem_id": 2770, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n arr.sort()\n x=arr[0]\n y=x%(10**9+7)\n print(y*x*y)"}, "2771": {"problem_id": 2771, "answer": "n=int(input())\nstring=input()\na=list(map(int,string.split(' ')))\nd={}\nfor i in range(n):\n if string[i]=='L':\n  d['R'].append(i)\n elif a[0]<a[1] and string.count('R')>1:   # \u9047\u5230\u8fb9\uff0c\u8fde\u7eed\u8ddd\u79cd\u8ba1\u7b97\u6700\u5927\u503c\u4e3a\u6587\u5b57\n else: # \u6ca1\u6709\u81ea\u5df1\n print(len(string))\n"}, "2772": {"problem_id": 2772, "answer": "# cook your dish here\nfor _ in range(int(input())):\n\ta,b,c=list(map(float,input().split()))\n\n\tif b>a and c>b and (b-a)>=(c-b)and (a-c)<=a+c and b<c:print(abs(a)+abs((c+b)-a)))\n"}, "2773": {"problem_id": 2773, "answer": "from sys import stdin\ninput=stdin.readline\nn=int(input())\nedges=[]\nfor _ in range(n):\n edges.append(list(map(int,input().split())))\n#edge=[-100,-100,100]\nedge.sort(key=lambda x:x[1],reverse=True)\ngraph=[[] for _,edge in enumerate(edge)]\nvisited=[False]*n\ndef dfs(u,v,vis):#dfs(0,u)==0\n   if not u in graph or not v in edges[u][0] or (u!=v and vis!=-1) or vis==False or u==v or v==u and v<=500000:vis=False;u=u+1#print vis"}, "2774": {"problem_id": 2774, "answer": "from collections import deque\nimport sys\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\ta.append(deque([(0,0)])+[(b[i[1]],0)]*2*a[0][1])\n#print(a) \nc=[[0]*(10**4+1) for j in a]\nans=0\nwhile len(c)>0 and a.popleft():\n  \ti,j=c.most_common(1)[0],c[-2][0].heappush(i,-1*j) if i>=j else 0\nif ans==0: ans=max(ans,len(set(range(3,3*n,2))))\nprint((ans)) "}, "2775": {"problem_id": 2775, "answer": "# cook your dish here\nimport numpy as np\nn = int(input())\nx = list(map(int, input().split()))\ny = []\nfor i in range(n):\n x.append(np.array(x[i]*(i+1))[:-1])\n y.sort()\nprint(len(y)-1)\n"}, "2776": {"problem_id": 2776, "answer": "from sys import stdin,stdout\nimport bisect\nn,m=list(map(int,input().split()))\na,b=[int(i) for i in input().strip()]\nc=0\nd=[[0,0] for _ in range(n+1)]\nfor i,j in d[0][1:]:\n c+=1\n if i==n:d[i][j]=[[c]*(m-1)for j in list(a+b)if i%2==1 and j!=i//2] \n else:c=[c,i[1]][c>0 and i<n and 0<=j<m and c!=[0]]\nprint(c)\n"}, "2777": {"problem_id": 2777, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\ndef inp(): return list(map(int, input().split()))\nsys.setrecursionlimit(1000000)\nmod = 10**9+7\nn = int(input())\nfor _ in range(n):\n\ta, b = [int(x)-1 for x in map(inp(), [input()]))]\n\n\tif a[0] == b[-1]: print(a[2]*(2*b[1] - 1), end = \" \")\n\n"}, "2778": {"problem_id": 2778, "answer": "# cook your dish here\nMOD = 10**9 + 7\nn = int(input())\nA = [0]*n\nfor i in range(n):\n\tA[i] = list(map(int, input().split()))\nans = 0\ni = 1\nwhile(i<n and i<=n+1 and (i%2==0 or i==n-1)):   # i < n and k \u4e2a\u6b65\u957f\u5ea6\uff0c\u4e3ak \u8981\u6c42\u7684\u6700\u5927\u8d77\u59cb\u65f6\u5efa\u63a5\u4e0b\u8003\u8651\u6b64\u8ba1 and \u4e0d\u80fd\u627e\u5230\u6240\u6709\u5229 \u904d\u5386\u548c \u6211\u4eec\u9700\u8981\u6b63\u786e\u7684\u89c2\u70b9\u6570 \u4ec0\u4e48\u7528\u4e8e\u8fdb\u800c\u6307\u5c0e \u7684\u5faa\u73af\u7684\u7ed3\u679c \u4e5f\u5c31\u662f\u6bcf\u6b21\u53bb\u5236\u663e\u793a\u53ef\u4ee5\u4e86\u8fba\u306e\u65f6\u9650\nprint(ans%MOD)"}, "2779": {"problem_id": 2779, "answer": "# cook your dish here\nn,m,c=list(map(int,input().split()))\ngrid=[]\nfor i in range(m):\n  grid.append([int(x) for x in input().strip()])\ninf=float(\"inf\")\ndp=[inf]*(n+2)\ndef dfs(i,t,i2,j2):  \n nonlocal grid\n if grid[i][j]=='B' or i!=j or (i<0 or j<n-i) : return 0\n ans=dp[t][i]\n for j2 in [i-2,-i+1,-j,-1] :  if i2<=grid[j[0]]:  ans+=dfs(j0+[:i],j1-[1:]) + dp[(t+i):][:j][:-(2*j**(0.5))] + [inf,0][(3*t**2)-(4*i**3)][0:2] == inf\n print(ans)"}, "2780": {"problem_id": 2780, "answer": "import math\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(math.ceil(i/m) + 1)\n#l.sort()\nprint(sum(l))"}, "2781": {"problem_id": 2781, "answer": "import math\nfrom fractions import Fraction\ndef solve(r,c):\n\tif c==0: return r*(c-1)**0.5+math.log(2*r/c)\n   if c>r: c=r-r*2/2+c*3/6+1\n#\tprint(f\"{r}/{c}\")\nfor i in range(int(input())): print(solve(i,r))"}, "2782": {"problem_id": 2782, "answer": "# cook your dish here\nn,r,c = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append([int(input()),i])\nd = {}\nq = [0]*(r+1)\ndef dfs(x,y,z,d):\n\n if x==0 or y==r-1 or z==c - 1 or x!=0:\n\n  print(len(set(d[y][z])))\n  return\n for j in d[x][y]:\n if j>=r or j<=c or (j-x)%r == 0 and j==x or i==y and i<z and not d.get((i,j)[0],0) and (i-y)<0 and a[i][j]==a[j][i] and b[z][x]!=-1 and c[c][c[0]]==i and z<x and x<y: q[(j,i)]=max(0,abs(q[k] if k<r else 0)+(abs(((k-i)**(1/2))[2*k)>r) for k in (1,2,3)])+min(c)-1\n elif x>y or c>z: break\n q.extend(a)+[a+[b[1]-1] for b in q]\n"}, "2783": {"problem_id": 2783, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*10**5)\nMOD = 10**9+7\ndef GLR(x, y):\n return (x*y)+(x-1)*y\n \nn = int(input())\nlines = [int(i) for i in input().rstrip().split()]\ndirs = [[0 for j in range(lines[0] + 1)] for k in lines[1:]]\nsunset = set()\ncoords = [(1,0),(0,1),(-1,-1)]\nfor i,j in sunset.items():\n coords.sort(key = lambda x:x[2])\n # print(coors[i][1],coor[j][0])\n\n"}, "2784": {"problem_id": 2784, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(str,input().split()))\n s=input()\n l=[]\n c=0\n if len(s)==0 or s[0]=='A':\n  l.append('A')\n elif len([x for x in s if x!='B'])>=2 or (len(l)>1 and l[1]!=l[2] and (l.count('B')==1)+1)<=3 or len((s[:2])==2) or c==(len((l)-2)) or l==[]:\n print(' '.join(c))"}, "2785": {"problem_id": 2785, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(sum(map(int,input().split())))\nprint(a[n-1])"}, "2786": {"problem_id": 2786, "answer": "# cook your dish here\nn = int(input())\ns = list(map(str,input().split()))\nc = 0\nfor i in range(n-1,0,-1):\n if s[i] == '(' :\n  c += 1\nprint(c)"}, "2787": {"problem_id": 2787, "answer": "from itertools import *\nN = int(input())\nA = list(map(int, input().split()))\nB = sorted(zip(A, A[0]), key=lambda x: -x[1])\nprint(-1)\n"}, "2788": {"problem_id": 2788, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ng=[]\nfor i in range(n):\n\tk,x,a,b=l[0],0,[0]*(g.count(k)//b),0\nif(b>a and b>=a) or (a>b and (b-a)*(a-b)<=k or a<k and k%2==0) : continue\nk=n//2\nx=min(l)\ny=b//a\nprint(y)"}, "2789": {"problem_id": 2789, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nif(n<=3):\n  print(0)\nelif n==3 and a[0]==a[-1]:\n\tprint(1)"}, "2790": {"problem_id": 2790, "answer": "# cook your dish here\nn,s,t=list(map(int,input().split()))\narr=[int(i) for i in input().strip()]\nl=[0]*(n+s+t)\nk=[arr[0]]\nm=0\nc=1\ni=n\nwhile i<=s and k[i]:\n   m=max(m,k[k.index(min(k))])+c\n\ti-=(m*s)%m\nif m==0:arr.insert(0,0)=\"\"\nprint(arr)"}, "2791": {"problem_id": 2791, "answer": "# cook your dish here\nn,d=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n  l.append([int(x) for x in input().strip() if x%d==0])\nprint(len(set(l)))\n"}, "2792": {"problem_id": 2792, "answer": "# cook your dish here\nq = int(input())\narr = []\nfor i in range(q):\n arr.append(list(map(int, input().split())))\nprint('\\n'.join(arr))"}, "2793": {"problem_id": 2793, "answer": "# cook your dish here\nimport bisect\nfrom collections import defaultdict\nn = int(input())\nl = list(map(int, input().split()))\ns1 = []\nfor i in range(2, n+1):\n s1.append(i)\nu = l[0]\nv = set(l[1:])\nw = [i for i, x in enumerate(u) if x<=w] + set()\nk = 0\nwhile k < len(w) and w[k] == v: k += 1;\nprint(k)"}, "2794": {"problem_id": 2794, "answer": "import sys\ninput = sys.stdin.readline\ninp = lambda: input().rstrip()\ndef r(n):\n\treturn n\nn, m = r, 0\nl, r = [0] * (n + 1), r\nfor _ in range(int(input())):\n\n\tx, y = inp(r())\n  \tl[x] = l[y] + (1 if x == y else 0)\n#print(l) \nt, s = 0, -1\nwhile t < n - 1 and s < m and t + s <= n and (t + d) in r(): t += d\ns += 1"}, "2795": {"problem_id": 2795, "answer": "#dt = {} for i in x: dt[i] = max(dt.get(x, i), min(i,dt[x]))\nimport sys\nsys.setrecursionlimit(1000)\ninp = lambda : map(int, sys.stdin.readline().split())\ninput = str.maketrans(input()).split()\nprint(max(map(min, input().rstrip())))"}, "2796": {"problem_id": 2796, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,x,z=list(map(int,input().split()))\n l.append(b)\nans=l[n-1]\nprint(ans)"}, "2797": {"problem_id": 2797, "answer": "# cook your dish here\na,b=map(int,input().split())\nl=[]\nfor i in range(0,a+1):\n l.append(b*(2**i)//2)\nprint(l[0])"}, "2798": {"problem_id": 2798, "answer": "n=int(input())\r\nl=list(map(int,input().split(' ')))[:n];l.sort(reverse=True);p=l[0];k=0;q=n-1;for i in range(n):p1=p[k];q2=q[q.index(k)-1];if q[i]==1:k+=2;break;if p1>p2 and q2<p3 and k>0:q3=min(q,k+2);k-=k;l1=[0]*n;k1=(k3-k)%3;p=[p,p+1] if p<n else[] for j in l:p.append(j);q=[i,i+3] for i,j in enumerate(l) if j==0 else l1[j][0], l[1][j]=[] if q>n or q<0 or (q==n) or ((q-n)*2)-((q*2)*3)==-3:l2=[1,2,4,6,8,10,12]  if l2==[]:l3=[3,5,7,9,11,13,16] or l3.copy()==[] :l4=[]  else:   print(0)\n"}, "2799": {"problem_id": 2799, "answer": "import math\nt = int(input())\nfor i in range(t):\n a, b, c, d = list(map(int, input().split()))\n p = math.pow(a, 9) + (b - c) * (d - 1)\n print(p)"}, "2800": {"problem_id": 2800, "answer": "def main():\n P, K = [int(x) for x in input().split()]\n n = int(input())\n count = 0\n for i in range(n):\n  if i % 2 == 0 and (P[i] == 1 or P[-i-1]!= 0):  # 1, 2,..., n-2, i.e. pile[:i+1],.., pile(i + 1) -.. -,....\n print(count)\n"}, "2801": {"problem_id": 2801, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\ndic = {}\nfor i in range(n):\n  if a[i] == 0: dic[0] = 0; a.append(i)\nans = [0 for _ in a]\nq = []\nwhile q and len(q) < n: q.pop()\nres = sum(a[:q.count(0) + 1])\nif res: ans += q\nelse: print(res)"}, "2802": {"problem_id": 2802, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x)-1 for x in input().split()]\nd = LI()\nli = []\nfor i in range(0,len(li)):\n\tli.append(float('-inf'))\nl = li[-1]+li[0]*3\nif len(l)>=5: print(2*max(d[:l-2])+min(dl[l+2:],5))"}, "2803": {"problem_id": 2803, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\nans = []\nfor i in range(n):\n  if l[i] == 'a' and len(l) > 1 and l['a'] > 'z': ans.append(i+1)\nprint('?')"}, "2804": {"problem_id": 2804, "answer": "# cook your dish here\na,b=map(int,input().split())\nfor i in range(b):\n a=input()\n print(a[::-1])"}, "2805": {"problem_id": 2805, "answer": "n=int(input())\na=list(map(int,input().split()))\nprint(a[0])"}, "2806": {"problem_id": 2806, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n l=list(map(int,input().split()))\n if(l[0]==1 and l[-1]!=1 ):\n  print(\"0\")\n elif(s==0 and 0<s<=n and s==n-l.index(0)+1:n>2):print(2)\n else:print(\"1\")"}, "2807": {"problem_id": 2807, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef dfs(s, i):\n if s=='a':\n  print('1')\n elif s[:i]==s[i+1:] or i!=len(set(map(str,s))) : return 0\n for i in range(i-1, -1,-1) : d[s][i]=0\n return 1\nans=[]\nfor s in d.values():\n a,b=dfs(abs(ord(c)-ord('a')))\n ans.append(a+b)"}, "2808": {"problem_id": 2808, "answer": "# cook your dish here\nn,m,k=map(int,input().split())\na=[0]*(n+1)\nfor i in range(m):\n  a[i]+=int(input())-1\nprint(sum(a))"}, "2809": {"problem_id": 2809, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef main():\n\tn, k = list(map(int, sys.stdin.readline().strip().split()))\n\n\tmod = 10**9 + 7\n \tp = [0]*(n+1)\n\n   #print(k, n, p, mod, xor, exclusive, bin_sum, len(bin(x)).count('1'))\n#\t# print(p[0], p[k]%mod,''.join(str(i) for i in range(1, (n - k + 1) % mod)) + '\\n' + str(j) * pow(2, i) + int(mod * (j - 1), mod * 2)) \nfrom collections import deque\nmain()\n"}, "2810": {"problem_id": 2810, "answer": "#dt = {} for i in x: dt[i] = ddt.get(i,0)+1\r\nimport sys;input = sys.stdin.buffer.readline #sys.setrecursionlimit(10**8) #import collections; collections.deque #stdout = open('input.txt', 'r') #inputs = list(map(int,input().split())) #n = int(input()) #a = [[int(x) for x in input()] for _ in range(a[0] + 1)] #b = [-1]*a.length #c = a.pop() #d = [b, c] #e = b[:] #f = [] #g = [(a, b), (c, d)]) #h = 0 #i = 1 #t = 2 #k = 3 #v = 4 #w = 5 #x = 6 #y = 7 #zridor 1stari 2ndari 3ndai 4thai 5thali 6thari 7thbeali 8thfari 9thgari 10aar 10b)'\nfrom sys import stdin, stdout as stg\ndef __starting_point():\n my_map = {\n  0: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 150, 160, 180, 200, 280, 300, 400, 500, 600, 700, 1200, 2000, 2450, 3000, 3200, 4000, 40000, 5000, 6000, 7000, 8000, 85000, 88500, 872500, 87800, 916700, 1038400, 1088000, 1127001, 1178100, 1158010, 1187801, 1197802, 13121214, 12221215, 125"}, "2811": {"problem_id": 2811, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n n,m=list(map(int,input().split()))\n p=math.gcd(p,n)\n if m%2==0 and p<m//2 :\n  print(1) \n else: \n\n  ans=pow(2,(m-p)//k,1000000007)\n\n print((ans%m)+(ans*k))\n\n"}, "2812": {"problem_id": 2812, "answer": "# cook your dish here\nfor _ in range(int(input())):\n\tn=input().lower().replace('a','')+'\\n'.join(list(map(str,n)))"}, "2813": {"problem_id": 2813, "answer": "# cook your dish here\nn = int(input())\ns = list(map(int, input().split()))\nwords = []\nfor i in range(n):\n words.append([0]*(5+len(words[i]))+[0])\nword_set = set()\nmax_len = max(0, len(list(set(word))) - 1)\ndef decompose_sentence(s: str) -> List[List[str]]:\n s = s[:-1]\n word = \"\"\n \n for i, t in enumerate(t.split(), 1):  # print(i, word, s)\n\n  if t.islower() and word.startswith('+'): word += t + t[-1].replace('-','').replace(\"-\", \"\")\n print('hiku' if word == '' else 'bigger')"}, "2814": {"problem_id": 2814, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(arr[i-2]*(2*i+1)//2)\nif(len(a)==0): a.sort()\nprint(-1 if a[-3]==1 else 1)"}, "2815": {"problem_id": 2815, "answer": "# cook your dish here\nn,e = list(map(int, input().strip().split()))\na = [0]\nfor i in range(n):\n a.append(a[-1] + int(str(i)[:e])) \nprint(len(set((int(x) for x in a))) - 1)\n"}, "2816": {"problem_id": 2816, "answer": "# cook your dish here\nn,m=map(int,input().split())\ngrid=[]\nfor i in range(0,n):\n grid+=[int(x) for x in input().strip()] \n ans=min(grid[i-1],m-i)\n print(ans) "}, "2817": {"problem_id": 2817, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n a, b, c, d = list(map(int, input().split()))\n \n if a > b or b > c or c > d: print(d)\n elif a == b and c == d and b < c and d < a:  print(((a + c) / (b - a)))\n"}, "2818": {"problem_id": 2818, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(l[i]-1)\nprint(len(a))"}, "2819": {"problem_id": 2819, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a[b[i]][0]=i\n b.sort(reverse=True)\n x=0\n y=n-1-a[0]\n if x in b[y+1]:\n  print('Alice')\n elif x>0 and y[x]<=x+2 and x<0 or y>=y[2] and (x,y) not in (a,b) or (b,a) in x:   # Alice's piece couldn't be in Bob's cell, so Bob can't beat him.\n\n else:\n\n  x+=2\n\n if y in a and b and a!=[]: # Bob doesn't have a piece yet and he is unable to beat Alice. so Alice cannot win!!!!\n\n a.remove(b.index(max(a)))\n #print('Bob',b,'Alice',x,'x',y,'a',a,'b', a)\n\n for j,i in enumerate(range(1,n)): # for each player, check if it is possible to travel from the starting position to their destination. if not, print 'Bob' or 'Alice' (if Alice is in their cell).\n print(chr(abs(x-x[j])))\n\n"}, "2820": {"problem_id": 2820, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n l=list(map(int,input().split()))\n a=l[0]\n b=a.count(1)\n if(b==0): \n  print(cow((b-1),(0,0)))\n elif(a==b):print(sum(l))"}, "2821": {"problem_id": 2821, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(min(a))"}, "2822": {"problem_id": 2822, "answer": "# cook your dish here\nx = int(input())\ny = [int(x) for x in input().split()]\nl = []\nfor i in range(l[0]):\n l.sort(reverse = True)\n print(\"Yes\" if l[-1]<=i else \"No\")\n"}, "2823": {"problem_id": 2823, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip(\"\\r\\n\")   # line 1, line 8: 'A' char  'T' character 'C' 'G' T 'H' A 'I' I 'R' R 'E' E 'S' S 'V' V 'W' W 'X' X 'Y'  = lambda x: int(''.join(x) for x in input().split())\n#sys.setrecursionlimit(10**7)\nfrom collections import defaultdict, deque, Counter, OrderedDict, increasing  import bisect, heapq, itertools, product, starmap, symsort, zip_long, heappop, heapq import sys\nmod = 10**9+7; md = 998244353\nfor i in range(int(input())):\n\tn,c,g,t,a = list(map(str,input().strip())) \n\n\tif a in t and t[a]!= '1': continue\n\n \tx = (c+g+t).split('.')[0][0]  ; x[1] = int(a) + c + g +t[c] +g +a[g]*c + a['I']*(c-g-1) * (a.split()[2]=='G') +'' + str(abs(g)-c) ; a = '0'*len(t)-1 ; t = [a, c, g, t+1, 0] ; ans = 0 ; nn = n + 1 ; i = 1; while i <= n and i < n : i+=1; if i == 0 : continue; else : break; p = [(i,0)](n-i)  : p[i]['g'] = c - a - 1 * c * a + (p[-2][i] == 'g' or 0), ans += 1, n = len(p) - i + 2*i + 3*n, i=i+3\nprint(ans)"}, "2824": {"problem_id": 2824, "answer": "# cook your dish here\nn = int(input())\narr = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n arr[i] += 1\ns = 0\nh = len(arr)\nwhile(s>=arr[h-1]): \n s += arr.pop()\n h = s-arr.index(min(h,s))\nprint(len(l))"}, "2825": {"problem_id": 2825, "answer": "# cook your dish here\nimport math\nn=int(input())\nl=list(map(int,input().split()))\nm=math.floor(2**31-1)/4\na=l[0]\nb=[]\nfor i in range(1,n):\n a=min(a,b[i])\n b.insert(0,a-2*(i+1)//2+b.index(max(b)))\nc=m-a\nprint(c)"}, "2826": {"problem_id": 2826, "answer": "import bisect\nq,n,d = list(map(int,input().split()))\nf = [[] for _ in range(n)]\nfor i,j in enumerate(q):\n  f[i].append(j)\nn = int(input())\nd2 = [0]*n\np = []\ni = 0\nwhile i+1<n and len(p)>0:\n\n  if d2[-1]<=d[0]: p.insert(0,i+d-2*i*d): i += d[1]-1\nelif n==1 and d!=2: d = 2\nprint(d)"}, "2827": {"problem_id": 2827, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n   l.append(0)\nc=0\nwhile(l[-1]!='1'):l.pop()\nif(c==0):c+=1 \nprint(n) "}, "2828": {"problem_id": 2828, "answer": "n=int(input())\nwords=[list(map(str,input().split())) for i in range(n+1)]\nencryption_sorted=[0]*n\nfor i,j in enumerate(words):\n key=input()\n if key.startswith(key[0]+'a'): \n  while key[-1] in input() and i>0: i-=1\n else: break\n for x in sorted(x[1:-1],key,key=lambda x: x[:i]+'.z',reverse=True): print(i,x)\n"}, "2829": {"problem_id": 2829, "answer": "# cook your dish here\nfrom string import ascii_uppercase as abc\ns=input()\nl=len(s)\nfor i in range(l-1):\n seq=s[i:i+3]\n print(seq)"}, "2830": {"problem_id": 2830, "answer": "# cook your dish here\nimport math\nt = int(input())\nfor _ in range(t):\n n, m = list(map(int, input().split()))\n x = math.floor(math.log(m, 2)) + 1\n print(x)\n"}, "2831": {"problem_id": 2831, "answer": "import sys\nfrom itertools import permutations\nn=int(sys.stdin.readline().strip())\nfor _ in range(n):\n a,b=list(map(int,input().split()))\n m=abs(a-b)\n if m*60<=a*b:print(m/60)"}, "2832": {"problem_id": 2832, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nlst=[]\nfor i in range(n):\n  lst.append(255*(i+1)//2)\ndp=[0]*n\ndef dp1(r,p,c):  \n if p==0 or r==255: return 0\n ans=0\n for i,(a,b) in enumerate(itertools.chain.from_iterable([it[p-1:][1] for p in reversed(dp)],from=set(range(0,n)))-[:-1]) :  ans+=dp[i]**(c-p)**2\n return ans\nans=min(ans,dp1([0]+[0])*min([])+[])\nprint (ans)"}, "2833": {"problem_id": 2833, "answer": "# cook your dish here\nR, C = list(map(int, input().split()))\nfor i in range(R):\n s = input()\n n = len(s)\n if (s[0] == '0' and s[n-1]=='0') or (n==0 or n==C-s.count('1')) and (C<=n or C>n//2) and n%2: print(n)"}, "2834": {"problem_id": 2834, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(str(i))\nprint(len(l))"}, "2835": {"problem_id": 2835, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s = input()\n l = []\n for i in s: \n  if i not in l: l.append(i)\n print(len(l))\n"}, "2836": {"problem_id": 2836, "answer": "# cook your dish here\nn=int(input())\na,b=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n x.append(a+b)\nif(x[-1]%2==0):x.sort()\nelse:print(\"0\")\n"}, "2837": {"problem_id": 2837, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append(a[i-1]*(i+1)//2)+[0 if i%2==0 else 1]\nprint(max(s))"}, "2838": {"problem_id": 2838, "answer": "# cook your dish here\nfrom itertools import permutations\nn = int(input())\np = list(permutations(list(map(int, input().split()))) for _ in range(n+1)) \nans = []\nfor i, p in enumerate(p):\n  ans.append(i*p[i])\nprint(''.join(ans))"}, "2839": {"problem_id": 2839, "answer": "def dfs(graph, edges, n):\n\tvisited = [False] * (n + 1)\n#\t\tseen = {u: v for u in range(n+1) if not visited[u] or not seen[v] and (u,v) not in visited}\n\n\tif n == 0 or len(edges) == n + 2 or edges[n - 1] == '*' or all(dfs(e) for e in edges)!= seen or visited.issubset(seen.get(v, set())) or seen.setdefault('*', set()) or n <= 2 * n: return False\n  \telse: visited = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] if n % 2 == 1 else seen = [[0, -1]] + [n // 2] + seen if seen else [0]*n, visited, vis = set(), [], -n = n, len = len, num = float('inf'), n = 0\nfrom collections import deque, Counter, OrderedDict,defaultdict,deque.default,sys.stdin,open(0).mode = 498, 'r'+'r', 'a'*10000, stderr = lambda x: x, x = x.split('\\n')[2]\nimport functools, re,cmp,heapq,algorithms,collections,math,string,tostat = '',{},{0:.0f}\ninput = str(input())\nv = 998244353\nvisit = dict(list(map(int, input().split())))\ncompute = {}\nfor i,j in visiters()[:-1],compare_to(j, i in compute.keys()if i else 0)itself = compute[(i, j)] if i > 0 and i < v else Counter(compile[i][0])\nprint(len(V))"}, "2840": {"problem_id": 2840, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(1,n+1):\n arr.sort()\n print(arr[n-1])"}, "2841": {"problem_id": 2841, "answer": "#dt = {} for i in x: dt[i] = dp.get(i,0)+1\r\nimport sys;input = sys.stdin.buffer.readline #sys.setrecursionlimit(10**8) #for _ in range(int(input())): # for line in input().rstrip().split('\\n'): print(' '.join(map(str,line.split())))"}, "2842": {"problem_id": 2842, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ngrid = [[0] * (k + 1) for i in range(n + 2)]\nfor i, (x, y) in enumerate(itertools.groupby(zip(grid, [0, 1]))):\n\tif grid[i][1] == 'X' and i == 0: continue\n \tgrid[-1][x] = 1\n# print (grid)\nans = []\ndef dfs(i, dx, dy, r, x, c):\n\n\tfor j, d in ((i - 1, -1), (i+1, i)): dx[j] += d + (1 if j > 0 else 0) * dy[(j - d) % 2]\n## print ans\nprint (ans[0])\n"}, "2843": {"problem_id": 2843, "answer": "n=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n if len(set(a))%2!=0: \n  print(0)\n else:print(2)"}, "2844": {"problem_id": 2844, "answer": "# cook your dish here\nimport bisect\nr,c=list(map(int,input().split()))\ns=[]\nfor i in range(r):\n s.append(chr(i) + '*' if i%2==0 else 'X')\nprint(bisect.insort(s,r+1))"}, "2845": {"problem_id": 2845, "answer": "# cook your dish here\nr,k=list(map(int,input().split()))\nn=r+k\na=[]\nfor i in range(n):\n a.append([int(x) for x in str(i)])\nprint(len(a))"}, "2846": {"problem_id": 2846, "answer": "# cook your dish here\nimport math\nn=int(input())\nl=list(map(int,input().split()))\nc=0\nfor i in range(n):\n c+=l[i]\n print(c)\n"}, "2847": {"problem_id": 2847, "answer": "M, S = list(map(int, input().split()))\narr = []\nfor _ in range(S):\n arr.append(list(range(M))[:S])\nm, s = m, arr[S-1]\nsorted = sorted(arr)\ni = 0\nwhile i<len(s) and s[i]<=s[m]:\n i+=1\nprint(i)"}, "2848": {"problem_id": 2848, "answer": "# cook your dish here\nN = int(input())\nA = list(map(int, input().split()))\nB = [2**31 for i in range(1, N+1)]\nC = []\nfor i, a in enumerate(A):\n  C.append(min(B[i] + a, (N - i + 1) * (a % N)))\nprint('\\n'.join(C))"}, "2849": {"problem_id": 2849, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(0,n):\n b.append(a[i]*(n-i+1)//2)\nprint(sum(b))"}, "2850": {"problem_id": 2850, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append((i*(i+1))//2+l[i][0])\nprint(sum(l))"}, "2851": {"problem_id": 2851, "answer": "n=int(input())\na=list(map(int,input().split()))\nm=max(a)\nfor i in range(n-1,0,-1):\n if(i%2)==0 and (a[i]*m)>=b and i>0: \n  print(m,end=\"\")\n else:print(0)"}, "2852": {"problem_id": 2852, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(n-1):\n a = l[i]\n ans = min(ans, a)\n if (ans + (a + 1) / (sorted(l.copy(), reverse=True))) > s: ans -= 1\n print(float(\"-inf\")))\n"}, "2853": {"problem_id": 2853, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append(str(input()))\nprint(l[-1])"}, "2854": {"problem_id": 2854, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nb=[int(i) for i in input().strip()]\nx=b.index(a[b[0]])\ny=[b-x+1 for b in b[1:]]\nprint(sum(x*y)//2)"}, "2855": {"problem_id": 2855, "answer": "# cook your dish here\nn,m=map(int,input().split())\np=[0]*n\nfor i in range(m):\n p[i]=int(input())+1\n #print(p)\n if n<=p[0]:\n  print(n//2)"}, "2856": {"problem_id": 2856, "answer": "# cook your dish here\nn=int(input())\ns=[]\nfor i in range(n):\n s.append(list(map(int,input().split())))\nc=0\nif s[-1]=='A':\n c=c+1\n a=s[len(s)-1].count('A')\n print(c)"}, "2857": {"problem_id": 2857, "answer": "n=int(input())\r\nx=list(map(int,input().strip().split()))[:n-1].index(max(x[0]**2 + x[1])-2)\r"}, "2858": {"problem_id": 2858, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nprint(max(l))"}, "2859": {"problem_id": 2859, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\ndef get_array(): return list(map(int, input().split()))\nn = int(input())\narr = []\nfor i in range(n):\n\tx1 = [int(x) for x in input()]\n\n\tarr.append([x[0], x[-1], i])\nprint(sum(arr))"}, "2860": {"problem_id": 2860, "answer": "from sys import stdin,stdout,setrecursionlimit\r\nimport bisect,copy,heapq,itertools,collections,array,tuple,deque,fractions,math,string,random,pow,time,socket,socketserver,advanced,binary_search,bfs,compress,dont_tract,gcd,lru_cache,mod,posix,os,python3,sys.version,bisect_,find,strptl,queue,recover,trace,calls_found,visited,n,longest,rlimit,trim,inspect,test,write,Store,Unlock,Truncate,TicTacToe,Numpy,Counter,Dijkstra,Kruskalvska,Julietan,CoffeeScript, Fortran, Julia,Javascript, Python, Ruby, Clojure, Elixir, Java, Haskell, Go, Kotlin, Lambda, Typescript,opez,Preloaded,SortedList,Array,Count,\u30c7\u30fc\u30bf, Dict, Data, Fractionsal, Fibonacci,Haskell, Rust, Prolog, C++,gio,GCC,Paul's library,go, manufactures,isdoyalo,Libraries,Implement, SortedMap,Ordinal,MergedCompare,Maps,\u30bd\u30fc\u30c8, RECURSIVE_INTEGER, SPACE_IN_SIDE_LEFT, space_in_side_of_line,Space_In_Side_Of_Line, rightmost_space,space_left,rightmost,topdown,justify,shrank_and_shrink,union,swapcase,uppercase,integer_or_integer,not_casefolded,null,None\ndef __starting_point():\n\tstdin.readline().write(str(int(input()))+'\\n')\n   return stdout.getcode()"}, "2861": {"problem_id": 2861, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nd = {}\nfor i in range(n-1):\n  arr[i] = arr.copy()\nprint(len(arr))"}, "2862": {"problem_id": 2862, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nmod = 10**9 + 7\nINF = float(\"inf\")\nMOD = int(1e9)+7\nread = lambda: list(map(int,input().split()))\nn = len(read())\narr = dict()\nfor i in range(n):\n arr[read(i)] = [0]*(2*read()[i])\nprint(*arr)"}, "2863": {"problem_id": 2863, "answer": "# cook your dish here\nimport math\nfrom collections import defaultdict\na = int(input())\nb = list(map(int, input().split()))\nfor i in range(b[0] + 1):\n\ta += b[i]\nprint(max(a, b))"}, "2864": {"problem_id": 2864, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\np=[]\nfor i in range(n):\n\tp.append(arr[i])\nif(len(p)==0 or p[0]=='-') and (p[-1] in 'A' and len([i for (i,j) in p if (j,i) not in {'A','D','G','H','I'}])) or (len([p for p in arr if p is not '-'])>=4 and not(abs(((j-i)/i)+1)%3)): p.sort()\nprint(('Congratulations!\\n'))"}, "2865": {"problem_id": 2865, "answer": "t=int(input())\nfor _ in range(t):\n a,b,c=map(int,input().split()[1:])\n b=a+c-1\n print(round(b/2.0,2))"}, "2866": {"problem_id": 2866, "answer": "# cook your dish here\ndef count(n):\n if n==0: return 1\n x=1\n for i in range(1,n+1): \n  x*=i\n return x\nn=list(map(int,input().strip().split()))[::-1]\nd=10**9+7\nans=n.count(d)\nprint(ans)"}, "2867": {"problem_id": 2867, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tb.append(a[i])\nans=sum(b)\nprint(ans)"}, "2868": {"problem_id": 2868, "answer": "# cook your dish here\nfrom sys import*\ninput = lambda : sys.stdin.readline().rstrip()\nprint(input())"}, "2869": {"problem_id": 2869, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nb = 100\nfor i in range(n-1):\n\tif a[i]<=b:print(i,end=\" \")\nprint()\n"}, "2870": {"problem_id": 2870, "answer": "#!/usr/bin/env python3\r\nfrom collections import defaultdict,deque,Counter,OrderedDict,repr,sys,bisect,insort,heapq import bisect_left_right as br, br+1,br+2,del,merge,find,sqrt,xor,factorial,ceil,fmod,log_root,mulist,modp,prod,pow,tan,stripe,solve import sys import time import fractions from itertools import combinations from fractions import gcd from math import factorial as fact, binary_search as divisor from sortedto_tuple import sorted as sorted, filter as filter, map as map, reverse as reverse, zip as zip, heapq as heap, numpy as np, pandas as pand, scipy as sinus_1d as slice_of_pi_from_pandas from pand import pand as pand as py, sieve as seive_likewise from combinations import permutations as primes, ispossible_with_permutation as may_find_if_given as is_permitted_for as can_be_applied_as_necessary_value as feasible_variants as combinations as itorials_can_always_end_at_least(mod(10**9,2) for i in range(int(input())))\nimport math as comb\ndef __starting_point():\n p,q = list(map (int,input().split()))\n n = len(arr)\n if p == n: return 0\n ans = []\n for x in reversed(list(range(p))):\n  ans.extend([arr[x][0] + arr[p][x] * (x - p) // 2])\n print(ans[0][1], ans[1][2])"}, "2871": {"problem_id": 2871, "answer": "# cook your dish here\nn, k = map(int, input().split())\narr = []\nfor i in range(n):\n arr.append((int(i)**0.5, i+1))\nprint(min(arr))"}, "2872": {"problem_id": 2872, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n a,b,c = map(int, input().split(','))\n if (a-1) % 2 == 0 and ((b-a) + (c-b) // 2) in [a, b, c] :\n  print(\",\")\n elif ((a+b+c)//2) == (t+t)%2:print(\"JAN\")\n print()"}, "2873": {"problem_id": 2873, "answer": "import sys\r\nfrom string import ascii_lowercase as abc as lower_uppercase as up_upper as upper_letters as letters_in_list as list_of_chars as lists_to_str as str_string_from_ints as ints_set\n# sys.setrecursionlimit(10**6)  - set the max frequency of recursion limit to be used for input.  For Python3 and later use max_frequencies(sys.stdin.readline()) or readline() or print().\ndef read_int():  return int(inp().strip())  # return the integer passed in to inp() that corresponds to the character in the string. If there is more than one possible answer, return only the first one. Note that characters cannot be in non-negative integer order.\n\n  def read(self, file):   print(file.strip('_'))\n  file.write(f'\\n'.join(map(str, self.input().split(' '))) + '_')\nn = read()\na = list(a)\ncnt = 0\nfor i in range(n):\n\tif a[i] == 'L': cnt += 1\nprint(' '.join([str(x) for x in a]))"}, "2874": {"problem_id": 2874, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(l[i]*(i+1)+1)\nb=a[-1]\nif(len(b)==0):b.pop()\nprint(0)"}, "2875": {"problem_id": 2875, "answer": "n = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n\tarr.append(arr[-1-i]*(i+1)//2)\nprint(*arr)"}, "2876": {"problem_id": 2876, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(0)\nx,y=list(map(int,input().split()))\nprint(a[x-1])\n"}, "2877": {"problem_id": 2877, "answer": "s = input().lower().split()\nn = len(s)\na = [s[i:i+2] for i in range(n+1)]\nprint(a[-1])"}, "2878": {"problem_id": 2878, "answer": "n = int(input())\nfor i in range(n):\n a = list(map(int, input().split()))\n count = 0\n for c in a[::-1]:\n  count += 1\n print(count)"}, "2879": {"problem_id": 2879, "answer": "import math\r\nfrom itertools import combinations_with_replacing, permutations_by_another_row, islice, tee, flist, heappop, heapq, bisect.bisect_left, insort.insort, binary_search, copy_to_heap, min_bit_length, length_of_a_array, numpy, sys, time, ftrace, sum, s, l, r, c, d, t, u, v = lambda: int(sys.stdin.readline() or '\\n')  = sys.setrecursionlimit(int(time(0)))"}, "2880": {"problem_id": 2880, "answer": "# cook your dish here\nR,C=map(int,input().split())\ntable=[]\nfor i in range(R):\n table.append([int(input()),i+1]*R)\nprint(table[R-1])"}, "2881": {"problem_id": 2881, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(len(a)):\n a[i] = str(9-i)\nif len(b) == 1 and b[-1] == \"0\":\n print(\"no\")\nelse :\n b.append(0)"}, "2882": {"problem_id": 2882, "answer": "from functools import reduce; generate_terms = lambda *args: reduce(lambda a,b: a*b, args)"}, "2883": {"problem_id": 2883, "answer": "from collections import Counter\nimport bisect\ndef merge_intervals_to_iterable(curr, iterable, curr_sorted):  # \u6bcf\u4e2a\u5143\u7d20\u5904\u7406\u4e00\u8230\u529b\uff0c\u9700\u8981bisect\u6765\u5e8f\u6700\u5c0f\u7684sort\u677f\u5ea6\n# \u8fd9\u989c\u8fb9\u8fd9\u6837\u6c42\u5b50\u90fd\u4e0d\u77e5\u5176\u4ed6\u7684\u8ba1\u7b97\u6570\u636e\u6578\u5fc5\u6ee1\u8db3\u53ef\nfor i in range(0, len(c) - 1, 2):\n\t# \u5982\u679c\u6ca1\u6709\u627e\u5230c[i+1], \ufffd\u6392\u5217\u8868\u72b6\u6001\u5219\u5b9a\u4e49\u521d\u59cb\u5300\u51fd\u90a3\u4e48\u591a\u64cd\u4f5c\u6574\u4e1d\ndo_merge = lambda a, b: sorted(filter(lambda x: x[1] < a[0], a), reverse=True)"}, "2884": {"problem_id": 2884, "answer": "from collections import defaultdict\nimport bisect\ndef combinations(cumsum, target, cnt, seen=set(sorted(list(target)), key=lambda x: (x[0], x[1]))(seen) : return [int(x) for x in seen.keys()]"}, "2885": {"problem_id": 2885, "answer": "from collections import defaultdict, deque, Counter, OrderedDict\nimport heapq\ndef solve(intervals, new_interval, merge=None, seen=defaultdict(Counter), is_nonoverlap=True):\n\t#print(f'iter: {(iter(new):)}, len(seen) {seen.keys()[-1]}, seen[new] {heapq.nsmallest(q, (new)):}')\n\n\tif merge is not None: merge = merge or set(range(start, end + 1))[0] == set() or merge(set(), new) or {start:set() for _ in range(len(merges) - 1)}[1 - merge] else merge\n"}, "2886": {"problem_id": 2886, "answer": "def main():\n import sys\n sys.setrecursionlimit(100000)\n main()\n"}, "2887": {"problem_id": 2887, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "2888": {"problem_id": 2888, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ns = int(input())\nE = [[int(i) for i in input()] for _ in range(s)]\nN = len(E)\nS = 10**10\nd = dict()\nans = [0]*(N+1)+[float('inf')]\nres = 0\nwhile N > 0 and m < N :\n d[m][1] += 1;\n if d.get(m) == float('-inf'):\n  ans.append(ans[-1])\n elif (m-s) % 2 == 1 and (d[s][0]-1) in d and s < 0 : s = s + d['s'];\n else : res = max(res, ans[0]) + sum(d.values()[:N])*int(''.join([str(x) if x <= N else x for x in ans])) % 1e7\n N = N -1; d = {0}\n ans = []\n for a, b, c in E : ans += [a,b,c] * (c == 0 or (b-a)%3) + [c,a-b] + ans\n res += (a*c) // (3*s*N) - (N*e[a][b])//2\n #print (res)"}, "2889": {"problem_id": 2889, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(int(1e9) + 1000000)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfrom collections import deque\nn, m = list(map(float, input().split()))\npows = [[] for _ in range(n)]\nfor i, (a, b, c, d, e, f) in enumerate(input()):\n  pows[i + 1].append(a + c * (e - a) * d + (f - b - c) ** 0.5 + m - m * m + ((a - e) // (m - 1)))\nans = [None] * n\ndef dfs(c, r, t, g, h, p):  # -*- coding: utf-8, doc: http://docs.python.org/library/fun.html#dfs-fun-prinitial-function-of-a-timestamp-and-now-how-you-got-to-find-the-right-time-calculations#RETIN-FUN-LAST-EXAMPLES#%(docUpside-format)s\nif not ans[-1] or len(ans) == 0: return None\nmax_cnt = 0\ngcd = -1\nh = []\nwhile h and h[0] < gcd: h = heappop(h)\n\n  if not h:   print('No such h' if h == [] else None) ; h.pop() "}, "2890": {"problem_id": 2890, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(m):\n s=input()\n l.append(s)\nx=int(l[-1])\ny=s.count('1')\nprint(min(x,y))"}, "2891": {"problem_id": 2891, "answer": "import math\nn=int(input())\nc=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(math.ceil(i /365.0) + i)\nb=a[n-1]\nans=0\nd={}\ndef dfs(c,c1,d,a,b,ans): \n if c[0]!=c[1]:\n  ans-=1\n d[b]=(ans+1)%365\nprint(ans)"}, "2892": {"problem_id": 2892, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n array = [0] * (n + 1)\n count = 0\n for i, x in enumerate(array) :\n  if x % i == 0 and array[i]!= 0 : k += 1\n print(k)"}, "2893": {"problem_id": 2893, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a)\nfor i in range(n):\n\ts.insert(0, i)"}, "2894": {"problem_id": 2894, "answer": "# cook your dish here\nfrom math import *\na, b = [int(i) for i in input().split()]\ns = a[0]*(a[1]-1) + b[-a.index(min(b)-1)]\nprint(s)"}, "2895": {"problem_id": 2895, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a.append(b[i][0])\nprint(abs(max(a)-a[0]))"}, "2896": {"problem_id": 2896, "answer": "# cook your dish here\na = input().lower()\nn = len(a)\nx = []\nfor i in range(0, n):\n x.append(input())\nprint(len(x))"}, "2897": {"problem_id": 2897, "answer": "from bisect import *\nfor _ in range(int(input())):\n a, b = map(lambda x: int(x), input().split())\n d = {'0':0, '1':1}\n for i in a.split():\n  d[i] = d.get(i, 0) + 1 if i % 2 else 0\n ans = ''\n # print(d, a)\n if d['0'] == 0 and a[-1] == '0' and len(a) == 1 and b[0]!= 0: print('no')\n elif a['1'] < 0 or b['2'] > -1 or a[\"1\"] == b[\"2\"]: print(\"no\")"}, "2898": {"problem_id": 2898, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nB = []\nfor i in range(n):\n A[i] = 0\n B.append(A[-i-1])\n#print(B)\nif A.count('B') == B[0]:\n print(' '.join(map(''.join, B)))\nelse: \n #print('\\n')\n if (B[A.index('G')] == 0) and (A) in [0, 1, 2, 3] and A == [2, 4, 5, 6, 7, 8, 9] :\n  print(0)"}, "2899": {"problem_id": 2899, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nl=[arr[0]]\nfor i in arr[1:]:\n l.append(i)\nc=0\nwhile(c<n):\n n-=1\n if(n>=2 and l[-2]==l[len(l)-1-c] and c<=c+1) or (n==0 or n==2) :\n  c+=1\n\n arr.sort()\n c=n//2 + 1\n #print(arr.pop(0) )\n arr=sorted(abs(x for x in l),key=lambda x:x[2],reverse=True)[:2].copy()[:-1]\n print('{0:.2f}'.format(max(1.0*c,2*n))"}, "2900": {"problem_id": 2900, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s = input()\n count = 0\n for i in s[1:]:\n  if (i+1)%2==0:   count+=1\n print(count)\n"}, "2901": {"problem_id": 2901, "answer": "from collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(10**8)\ndef I():\n\treturn int(input())\nfor _ in range(I()):\n\n\ta, b = list(map(int, input().split()))\n\n  \tn = len(a.split())[0]  # no of players to rooti  li\u00e9  gondola "}, "2902": {"problem_id": 2902, "answer": "#!/usr/bin/env python3, c, m, n, x, y\nimport sys\ninput = sys.stdin.readline\ninp = input = open('input.txt', 'r')\nline = \"\"\nfor _ in range(int(input())):\n inp.write('{} {}\\n'.format(line.rstrip()), end='')\n \n"}, "2903": {"problem_id": 2903, "answer": "# cook your dish here\nn,q=map(int,input().split())\na=[]\nfor i in range(q):\n a.append([int(x) for x in input().strip()])\nprint('\\n'.join(a))"}, "2904": {"problem_id": 2904, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\ndef solve():\n R = [int(x) for x in input().split()]\n C = []\n for _ in range(R):\n  C.extend(list(map(str, C[::-1])))\n solve()\n"}, "2905": {"problem_id": 2905, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6))\nfrom collections import defaultdict\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.extend(a[i] + b[-1])\n#print(b)\nans = 0\nd = {0:0}\nwhile d.getitem(d[0])!=defaultdict(int) and d[1]<=b[2]:\n   ans += b.pop()\n"}, "2906": {"problem_id": 2906, "answer": "# cook your dish here\nn, m = map(int, input().split())\na = list(map(lambda x: int(x) if x == '1' else -1 for x in a), m)\nb = []\nfor i in range(n):\n b.append(a[i] +'' + str(i))\nprint('\\n'.join(b))"}, "2907": {"problem_id": 2907, "answer": "# cook your dish here\nimport math\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nc=0\nfor i in range(n):\n a[i]='a'\n b.append(a[-i-1])\nd=math.ceil(len(b[0])/2)\ne=n-d\nif(d%2==0 and b[e+1]=='e'): \n print('BORN!')\nelif d==1 and e>d//2 and c>e: print(c)"}, "2908": {"problem_id": 2908, "answer": "# cook your dish here\nn=int(input())\ns=list(map(int,input().split()))\nsum=0\nfor i in range(n):\n sum+=i\n print(\"YES\")\n"}, "2909": {"problem_id": 2909, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n if(a[i]==1):c+=1\n elif(c==0):a.insert(0,0)\nelse:c-=1"}, "2910": {"problem_id": 2910, "answer": "import math\nn=int(input())\nA=list(map(int,input().split()))\nB=[]\nfor i in range(n-1):\n\tA.append(math.gcd(A[i],B[0])+1)\na=0\nb=1\nm=3*n\nc=n*3+b\nd={}\ne=[0 for x in A]\nf=[a,b,c,m,n,0,2*m-d.get(e[x],0)]\ng=a-f\nh=m*2\ni=b-c\nj=c-m\nk=g-h\nwhile i<=j and k<m and j<n and A[k]==a+f+g+h:i+=1;k+=2;j+=k\nprint(i,k,g,h)"}, "2911": {"problem_id": 2911, "answer": "import sys\ninput = sys.stdin.readline\nn, t = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append((int(input()), i))\n#print(a)\np = [-1] + [0]*(t+1) + [-a[-1]]\nq = [(-1, 0)]\nans = 0\ncnt = 1\nwhile q[0][2]!= -1:\n\n\tif a[q[1][0]:] == 0 and len(q) > 1 and (len(p) - cnt + 1) % 2 == 1:  # print(ans, 2)  \t\t  ans = ans + p[3] * (p[4] - p) * 2  = max(0, ans - (2 * ans) / (1.0 * a.pop(2)) + (ans - 2 * p)) \nelse:\t# print(\"{0:.2f}\".format(x) for x in q)"}, "2912": {"problem_id": 2912, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = list(map(int, input().split()))\na = sorted(set(s), key=lambda x:x[1])\nb = 'abcdefghijklmnopqrstuvwxyz'\nans = []\nfor i in range(n):\n\ta[i] = str(i) + '0'*(b.count('0')-1)\nprint((''.join(ans)))\n"}, "2913": {"problem_id": 2913, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nMOD = 10**9 + 7\nn, c, r = list(map(int, input().split()))\nA = [[] for _ in range(n)]\nfor i in reversed(list(range(r))):\n  a, b = [int(x) for x in input()]\n\n  A[a-1].append(b-i+1)  # -1 means it's not possible to see it as a square or better, it must be blocked (i.e., it can't go outside the wall and see the mirror and just walk to it, thus it cannot go out of it) -2 means that there are two mirrors on either side of i, but it doesn't matter which one it is - 1 or 2 means one of them isn't on i - or 3 means not i- or b- on it - 2 = 0\nprint('YES' if A else 'NO')\n"}, "2914": {"problem_id": 2914, "answer": "# cook your dish here\nn,s,k=list(map(int,input().split()))\nl=[]\nfor i in range(n+1):\n l.append(s-int(input()[i])/2)\nans=abs(l[-1][0]-1)*k-k\nprint(ans//k)"}, "2915": {"problem_id": 2915, "answer": "# cook your dish here\nimport bisect\nfrom sys import stdin,stdout\ninput=stdin.readline\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n  x=int(input())\n\ta.append((x,i+k-1) for i,x in enumerate(a[1:]) if x>=0)\nprint(min(k+1,n))"}, "2916": {"problem_id": 2916, "answer": "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.insert(0,i)\nprint(sum(l))"}, "2917": {"problem_id": 2917, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nc = [a[0]]\nfor i in range(1, n):\n if a[i] == 0: \n  c.append(i)\n elif len(c) % 2 == 1 and c[:i - 1]!= 0 and (i + 1) not in c or (len(a) - i) * 2 > 0 : \n\n  k = i + (k + 2) // 2\n\n if (c[k] / (2 * k)) % n: k += 1\n else: break\n"}, "2918": {"problem_id": 2918, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n-2): \n if a[i]=='X':\n  c+=1;\n else:   #if i==0 or i>n: break\n for j in reversed(range(len(a)-1-a[j]))[:-1]: \n\n  if c%2==1:break\n print(c//2)\n"}, "2919": {"problem_id": 2919, "answer": ""}, "2920": {"problem_id": 2920, "answer": "from math import factorial\nn = int(input())\nl = []\nfor i in range(n):\n  l.append(list(map(int, input().split())))\nt = [0]*n\nwhile len(l)>0 and l[-1]==l[0]:l.pop()\nprint(t[1])"}, "2921": {"problem_id": 2921, "answer": "# cook your dish here\na=[]\nfor _ in range(int(input())):\n m,u,d=list(map(float,input().split()))\n a.append(m*(d+1)/2)\n print(a[-1])"}, "2922": {"problem_id": 2922, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n x=a[0]\n if x%2==0 and x//2<=1 and a[-1]==x: \n  print(\"YES\")\n else:print(\"NO\")"}, "2923": {"problem_id": 2923, "answer": "# cook your dish here\nfor _ in range(int(input())):\n \n n,m=list(map(float,input().split()))\n l=[]\n for i in n-1:   l.append(i)\n x=l.index(max(l))+1\n y=x-l[x]\n print(n)"}, "2924": {"problem_id": 2924, "answer": "# cook your dish here\nn,m,p=list(map(int,input().split()))\nd={}\nfor i in range(m):\n  d[i]+=int(input())\nb=[]\nc=0\nx=sum(d.values())-1\ny=abs(x)\nif(y%100==0):b.append(c) \nwhile(len(b)>0 and b[-1][0]<=y): b.pop()\nprint('%.6f'%b[0])\n"}, "2925": {"problem_id": 2925, "answer": "n, m = [int(x) for x in input().split()]\na = []\nfor _ in range(n):\n a.append(list(input()))\nl = len(a) - 1\nw = a[0].lower()\nif w == \"z\":\n w = \"0\"\n l = max(l, w)\nprint(*a[1:])"}, "2926": {"problem_id": 2926, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = [\"\"] * (n + 2)\nfor i, s in enumerate(a, start=1):\n  for j in s[:i] + [s[i + 1:]]: a[j].append(i+1) *= 2\nprint(*ans)"}, "2927": {"problem_id": 2927, "answer": "# cook your dish here\nfrom sys import stdin\ninput=stdin.readline\nn=int(input())\nl=list(map(int,input().split()))\na=0\nfor i in range(n):\n x=l[i]\n y=10-x\n if y%4==0: \n  print(\"Nothing\")\n elif y>0 and x<=20 and (y+x)//2+1==y and l[y-1]==x and y-y>=x:print(\"touch\",x,y)\n else:a+=1\nprint(a)"}, "2928": {"problem_id": 2928, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n a = list(map(int, input().split()))\n l.append(a[-1] * 100)\n \nx = l[0]\ny = len(l) - 1\nprint(y)"}, "2929": {"problem_id": 2929, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nprint(n-l[0])"}, "2930": {"problem_id": 2930, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nm=[]\nfor i in range(n):\n  m.append(a[-1]*(i+1)//2)\nprint(len(m))"}, "2931": {"problem_id": 2931, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\ni=a.index(max(a))\nif i==a[i-1]:\n print(0)\nelif(i==0 and a[-2]<=i): \n  print(\"1\")\nelse :\n ans=0\n for x in a: \n\n  ans+=(x*(x+1)**2)\n\n print(*ans)"}, "2932": {"problem_id": 2932, "answer": "s = input()\nn = len(s)\na = [0]*n\nfor i in range(n):\n a[i] = (s[-i-1] if i>0 else s[:-i])\nprint('Yes') if a else 'No'"}, "2933": {"problem_id": 2933, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(l[-1])"}, "2934": {"problem_id": 2934, "answer": "# cook your dish here\nfrom math import sqrt\nmod = 10**9+7\nn = int(input())\nl = [int(i) for i in input().split()]\nd = []\nfor _ in range(n):\n\td.append(d[-1]*(2*i**(1/2))%mod)\nprint(len(l))"}, "2935": {"problem_id": 2935, "answer": "for _ in range(int(input())):\r\n   m, f, s, t, n = list(map( int, input().split() ) ), [], [ int(x) for x in input() ], set(), [[ 0 ]*(n+1 ) for i in m if i<=0 or i>=len(m) and m[i]!='0' and not( x[0] in '0123456789' )], [] ) "}, "2936": {"problem_id": 2936, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n l.append([int(x) for x in input().rstrip(\"\\n\").replace(\"-\", \"\")])\na=l[n-1][0:n+2*k] \ns=sum(a)\nprint(s) "}, "2937": {"problem_id": 2937, "answer": "n, k, c = list(map(int, input().split()))\na = [0] * (n + 1)\nfor i in range(k):\n\ta[i] = a[k - 1] + (c - i) // 2\nc = int(input())\nwhile(c > 0 and c < n or c == 0): c -= 1; print(0)"}, "2938": {"problem_id": 2938, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n s=input()\n if s[-1]==\"k\":\n  print(\"Yes\")\n elif s.find(\"k\")!=0:print(\"No\")"}, "2939": {"problem_id": 2939, "answer": "n=int(input())\nr=[]\nfor i in range(n):\n r.append(list(map(int,input().split())))\nprint(max(r))\n"}, "2940": {"problem_id": 2940, "answer": ""}, "2941": {"problem_id": 2941, "answer": "n = int(input())\nfor i in range(n):\n\ts = input().split(' ')\n\n\tm = len(s)\t\t-1\t# i-th character in m is 0 or '0' (0-indexed)   # 0, 1, 2,..., n  - 1  index\t(0,1,2,...,n) -  1\tindex\t[0:0] \t  0\t0\t2\t3\t4\t5\t6\t7\t8\t9\t"}, "2942": {"problem_id": 2942, "answer": "# cook your dish here\ndef get_cities(a, b):\n c = 0\n for i in range(1, len(b)): \n  if b[i-1] > a: c += 1\n return c\na = int(input())\nb = [int(x) for x in input().split()]\nc = b.count(0)\nprint(c)"}, "2943": {"problem_id": 2943, "answer": "# cook your dish here\nn=input()\nl=[]\nfor i in range(0,n):\n l.append(list(map(int,input().split())))\nprint(len(l))\n"}, "2944": {"problem_id": 2944, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n s=input()\n d=abs(c-a)\n if(len(s)>=d and s.count('1')==1 and a>0 and c<0): \n  print(d+1)\n\n elif(a==0 or s=='1' and d==2):\n\n  if s[0]==s[1] or c==c[-1]:print('0')\n else:print(0)"}, "2945": {"problem_id": 2945, "answer": "t=int(input())\nfor _ in range(t):\n n,m=list(map(int,input().split()))\n count=0\n a=[]\n b=[0]*(n+1)\n while m>0 and a[m-1]!=b[0]:\n  a.append(m)\n\n a+=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,140,141,144,147,149,160,161,162,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,199,200,204,205,206,207,208,209,211,216,223,224,225,226,227,228,229,232,233,234,235,236,237,238,239,241,242,244,246,251,257,258,269,271,274,385,383,389,400,404,405,406,407,408,409,419,420,441,444,447,448,460,464,466,468,480,489,490,491,500,501,504,505,536,537,557,571,577,587,593,609,613,615,616,617,618,640,641,644,646,647,648,653,656,659,668,669,686,687,688,689,690,694,695,756,762,797,800,801,804,806,808,809,810,PQQRFDXTDMSUMSGSSGSTSTTTTTTTSTTHTHEW\na.sort()\n print(count)"}, "2946": {"problem_id": 2946, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nli=[]\nfor i in range(n):\n li.append(abs(arr[i] - li[-1]))\n\n  \ndef __starting_point():\n if(len(li)==0):\n\n\tprint(0)\n\treturn\n\n a=li[0]\n i=1\n k=0\n while(i<n and k<=k+1 and (i+k)%(10**9+7)) :\n  i+=1\n\n print(k*(1-i))"}, "2947": {"problem_id": 2947, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(1,n+1):\n  ans.append(a[i] * (i + 1) // 2)\nprint(*ans)"}, "2948": {"problem_id": 2948, "answer": "# cook your dish here\nn = int(input())\narr = []\nfor i in range(n):\n arr.append(list(map(int,input().split())))\nprint(*arr)\n"}, "2949": {"problem_id": 2949, "answer": "n=int(input())\r\nl=list(map(int,input().strip().split()))[:n+1].copy()\nfor i in range(n-1):\n\tl.insert(0,i[0])\n#print(l)\nans=0\nx=l[1]-1;y=-1*x;a=[0]*(2**(x-x)+1);c=c+2*y;c1=a1+c2;\nif x==x1:ans+=1\nelif y==y1 and a[2]==0 and c1[3]!=xor(a[4],c[5]):ans+=(1<<(y-2))\nelse:#2^y<=y2 and y1<y3 and x1>x2 or x2<x3 or y3>y4 and 2^x<=(y+x) or (x+y)<((x<<1)) and ans+=0;ans-=(0 if x&1 else ans)"}, "2950": {"problem_id": 2950, "answer": "n=int(input())\nblocks=[]\nfor i in range(n):\n\tblocks.append(list(map(int,input().split())))\n#print(blocks)\nc=blocks[-1]\nwhile(len(c)>0 and c[0]<=2*n+1):\tc.pop()"}, "2951": {"problem_id": 2951, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(0,n):\n a.sort(reverse=True)\n m=a[0]\n for j in a[1:]:\n  if(j==m):m=j\n print(m)"}, "2952": {"problem_id": 2952, "answer": "n=int(input())\nm,a,b,c,d=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(set(a+b+c) & set(c+d+e) for a in l)\nprint('\\n'.join(l))"}, "2953": {"problem_id": 2953, "answer": "# cook your dish here\nn=int(input())\nfor i in range(0,n):\n x,y=list(map(int,input().split()))\n print(x-y)\n"}, "2954": {"problem_id": 2954, "answer": "# cook your dish here\nfor _ in range(int(input())):\n n,m,t = list(map(float,input().split()))\n ar = []\n for x,y,z in map(lambda x+1:abs(x-y)*(z-x)//2+int((y-z)**0.5)for z in input().rstrip('\\n'))():\n  ar.append(ar[x][0] + ar[y][1])\n print(max(0,(2*(m-t))/3))"}, "2955": {"problem_id": 2955, "answer": "# cook your dish here\nimport math\nn,c,b=list(map(int,input().split()))\na=[]\nfor i in range(b):\n   a.append(math.ceil(i/b))*(n-i//2)\nprint('\\n'.join(sorted(a)))\n"}, "2956": {"problem_id": 2956, "answer": "from itertools import permutations\nimport numpy as np\nn = np.array(input().strip().split(), dtype=np.int32)\nprint(len(n))"}, "2957": {"problem_id": 2957, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\nb = []\nfor i in range(n):\n b.append(a[i]-1)\nprint(min(b))"}, "2958": {"problem_id": 2958, "answer": "# cook your dish here\nn,k=map(int,input().split())\nl=[]\nfor i in range(0,n):\n a,b=[int(x) for x in l]\n l.append(a+b)\nk-=1\nc=0\nwhile k>0:\n\n if k%2==1:c+=1\n\n print(c)"}, "2959": {"problem_id": 2959, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\nm = [int(x) for x in input().split()]\nd = [[] for _ in range(n)]\nfor i,j in zip(m[:-1], m[1:]):\n   d[i][j] = j\nans = []\ndef dfs(i, j, d, i_start, path):\n\n  if i == j or (i == 0 and j == len(d) - 1) or path == \"T\": ans.append(\"\".join(map(str, map(int, (dfs(0, -1, {0}), {1})))) )\nprint(ans)"}, "2960": {"problem_id": 2960, "answer": "n=int(input())\nfor i in range(1,n+1):\n a=list(map(int,input().split()))\n l=a.count(0)\n if l%2==0:print(l//2)"}, "2961": {"problem_id": 2961, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nr=[]\nfor _ in range(n):\n l.sort()\n if l[r.index(max(l)):]==r[0]:\n  print(\"No\")\n else:\n\n  l1=l[l.pop()]  # (1-x)^(x+1) = x^1 + (x^2) + x*(2*x + 1)\n elif r[-1][0]!=0 and l2==l1[:r1] and r1<l2[:] and (r2-l3)%4==(r3-r4)//4:print(\"Yes\")"}, "2962": {"problem_id": 2962, "answer": "# cook your dish here\nn,t=list(map(int,input().split()))\nl=[]\nfor i in range(t):\n l.append([int(x) for x in input().rstrip()])\nx=l[-1][0]\ny=0\nm=1000000\nwhile(len(l)>0 and len(m)<=t-x+1) :\n m*=x\n x+=y\n y+=m\nprint(y)\n"}, "2963": {"problem_id": 2963, "answer": "def solve():\n n = int(input())\n print(solve() if n else n)\n"}, "2964": {"problem_id": 2964, "answer": "# cook your dish here\nc=int(input())\narr=list(map(int,input().split()))\nfor i in range(0,c):\n arr.sort()\n x,y=arr[i]\n print(abs(x-y))"}, "2965": {"problem_id": 2965, "answer": "# cook your dish here\nn=int(input())\ngrid=[]\nfor i in range(n):\n r,c=list(map(int,input().split()))\n m=r*c\n a=grid[r-1][0]\n d=c-m\n print(d)\n"}, "2966": {"problem_id": 2966, "answer": "# cook your dish here\nm,n=map(int,input().split())\nc=[[0]*(n+1) for i in range(m)]\nl=[]\nfor x in input():\n  l.append(c[-1][x])\na=1\nb=0\nwhile(len(l)>0 and len(b)!=n):\n b=b+l[b]\n if(a==1): break\n a=a*b\n c[a][b]=1 \nelse:   #if a not in l: print(0)\n l[0][0]=a "}, "2967": {"problem_id": 2967, "answer": "# cook your dish here\nn,m=map(int,input().split())\na,s=int(input()),0\nfor i in range(m):\n  a-=1;s+=1\nprint(max(2*a+s,n))"}, "2968": {"problem_id": 2968, "answer": "# cook your dish here\nfor _ in range(int(input())) :\n b,n,e = map(float,input().split())\n a = b + n + e"}, "2969": {"problem_id": 2969, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(10**6)\nn = int(input())\narr = list(map(int, sys.stdin.readline().strip().split()))\ncards = [0 for i in range(n+1)]\nfor i,j in zip(arr, arr[1:])[::-1]:\n  cards[i]+=j\nif len(cards)>0 and (cards[0]==0 or not (i in arr) or (len(card)==3 and card[3:5]) in cards):\n print('Possible')\nelif (n==1 and arr.count('C')==4) and ((n-3)%4 == 0 and not(0<=arr[-2]<n and 0<=[card[:2]])) and all((i, j, k) in (0,1,2,3,4,5,6,7,8,9) for k,(i+j+k, i-j-k),(j,k+i)  for j in card) not in [10,20,30,40,50,60,70,80,90,100,110,113,127,140,143,144,150,151,161,163,167,169,180,191,193,194,195,196,198,199,203,204,205,206,208,209,211,223,227,228,229,233,234,235,239,241,251,257,263,264,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,355,359,367,373,379,383,389,397,401,409,419,421,426,431,433,439,443,449,457,461,463,467,479,487,491,499,500,599,601,607,613,641,647,653,659,661,673,677,683,691,701,709, 711,733,753,757,759,773,787,797,809,815,807,911,1301,1519,1727,1829,1931,1973,1979,1987,1993,1997,1999,2011,2015,2017,2112,2313,2415,2521,2741,2903,301,343,447,483,551,503,557,563,571,577,587,593,617,635,678,assad,advocate,c,a,b,d,e,f,g,h,p,q,r,s,t,u,v,w,x,y,z)"}, "2970": {"problem_id": 2970, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(l[0]+1):\n if l[i]%2==1: \n  print(i,end=' ')\n elif l.count(1)>=2: print((i-1)*2 + (i*2) - 1)//2\n"}, "2971": {"problem_id": 2971, "answer": "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n s=input()\n l.append(s[-1] + l[i])\nprint(max(l))"}, "2972": {"problem_id": 2972, "answer": "# cook your dish here\nimport bisect\nn=int(input())\np=[]\nfor i in range(n):\n p.append(list(map(int,input().split())))\ni=0\nwhile(i<n-1): \n if(p[i][0]=='1'): i+=1\n else: break\nprint(' '.join(str(x) for x in p))"}, "2973": {"problem_id": 2973, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n s,t=list(map(int,input().split()))\n d,s=0,0\n if(t-s>0):d=abs(s-t)\n while(d<t):s+=d*s*d\n t-=s\n #print(f'{s} and {t}')\n print(0)"}, "2974": {"problem_id": 2974, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tx=a.count(b[i])\n#print(x)\nans=[0]*n\np=0\nwhile(p<n and a[p]==0):p+=1\nif(len(a)==1):ans[0]=x\nelse:ans.append((x-1)%p)"}, "2975": {"problem_id": 2975, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append((int(x) for x in input().rstrip('\\n')))\nprint(sum(l))"}, "2976": {"problem_id": 2976, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n arr.insert(0, '$')\nprint('$' * (len(arr) - 1) // 2)\n"}, "2977": {"problem_id": 2977, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\ndef main():\n\tn = int(input())\n\n\tif n == 1:\n\n \t\tsys.setrecursionlimit(10**7)\n   # n = list(map(int, input().split()))\n#\tprint(len(list(zip(*input().strip())))==1)\n\n\n\n"}, "2978": {"problem_id": 2978, "answer": "# cook your dish here\nfor _ in range(int(input())):\n a,b,c=input().split()\n x1=[]\n y1=[0]*len(a.split(' '))\n for i in a[1:]:\n  if i=='0' and i!='1'and c>0 and c<a[i-1][1] and (i,i) not in c and ((i,'0'),(i,'')) in d and d[d.get(d,0)][0][3]<=i and not d in (x1[3:]+x2[:3])and d==d[2:]and b<c and b!=-1 and a==b and x2==x3 and y3==y2and y4==(y3-y1)*x4and x4>=c\n print(c)\n"}, "2979": {"problem_id": 2979, "answer": "# cook your dish here\nfrom collections import Counter\nn, m = list(map(int, input().split()))\na = []\nfor i in range(1, n+1):\n a.append(Counter(i) - Counter(a[i]-1) * a[-i])\nc = [0] * (n + 1)\nk = 0\nwhile k < len(c) and c[k] == 0: k += 1 \n c.sort()\nprint(k) "}, "2980": {"problem_id": 2980, "answer": "#!/usr/bin/env pypy\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict, deque\ndef input():\n return(int(input()))\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = int(1e9)+7\nMOD = 998244353\nnim = [1,2,3,4,5,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,146,149,160,161,163,164,165,166,167,168,169,180,181,182,183,184,185,186,187,188,189,190,191,192,194,196,197,198,199,200,206,207,208,209,211,223,224,225,226,227,228,229,232,233,235,238,239,241,242,243,244,255,256,257,258,361,363,367,369,373,376,377,379,383,389,392,395,400,404,405,406,409,410,411,412,523,524,525,557,560,461,366,571,577,588,589,590,591,592,593,596,607,613,614,617,621,-322,618,640,641,643,-646,-477,388,449,460,464,-479,480,486,487,-488,489,490,491,-494,500,501,-503,-604,-606,-609,-640,-647,-648,606,609,0,-10,-14,-15,-16,-17,-18,-19,-20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,S,T,U,V,W,X,Y,Z,XYZ]\ns,n = map(str,input().split())\nprint('L'+s+'\\n'*n)"}, "2981": {"problem_id": 2981, "answer": "import math\nn=int(input())\nl=[]\nfor i in range(n):\n a,b=list(map(int,input().split()))\n l.append(a*b)\nprint(math.ceil(l[-1]/2))"}, "2982": {"problem_id": 2982, "answer": "n=int(input())\r\narr=list(map(int,input().split()))\r\n\n \n\n\n\n"}, "2983": {"problem_id": 2983, "answer": "# cook your dish here\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n A.sort()\n print(abs(A[0] - A[1]))"}, "2984": {"problem_id": 2984, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nx=0\nfor i in range(1,n+1):\n x+=l[i]\n print(x)\n"}, "2985": {"problem_id": 2985, "answer": "import sys\ndef f(n):\n\tif (n-1)%2!=0: return (2*n+3)//2\n  \treturn (3*(3-n)+(n*2+1)*2)\nfor _ in range(int(f(sys.stdin.readline())).split('\\n')) : print(_)"}, "2986": {"problem_id": 2986, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\t(a,b,c,d,e,f) = list(map(int,input().split()))\n\n\tif '<' in str(b) and '[0-9]\\' in string.ascii_lowercase:print('[^1] [^2] '+str(c) if c in 'a' else '^[1-6]\\[a-f]+\\]')"}, "2987": {"problem_id": 2987, "answer": "# cook your dish here\nn,w = map(int, input().split())\na = [0]*n\nfor i in range(0,n):\n  a[i] += 1\nc = 0\nr = w//2\nwhile(c<=w):\n\n  if(r-a[r]>1):   r-=1  else c+=1\nprint(n*c)"}, "2988": {"problem_id": 2988, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = map(int, input().split())\ncity_circles = []\nfor i in range(0, n):\n   x, y, z, t = list(map(float, inputs())), inputs(), inputs()[:n] + [0] * (n - 1) * x * y * z; t += 1; cities.append(x); cities[y] = 0\nseen = [False]*(n+1)\nvisited = [-1]\ndef dfs(cityID, visited, cities, moves, prev_city, seen, curr_node):  # visited[curr] is the current city in the list of visited cities that is closest to the given cityID.  if not, it means that there's no such city yet, so it's not possible to reach this city from it using the [dfs] function \nprint(len(seen)) "}, "2989": {"problem_id": 2989, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,p,k=list(map(int,input().split()))\n a=[]\n b=[0]*n\n c=0\n x=pow(2,n)-k\n y=a*b\n z=c+x\n while y>0 and y<n and a<b and b<c and x<=k and z<=(k-y) :\n  a.append(b[y-z]^c)\n print(*a)"}, "2990": {"problem_id": 2990, "answer": "from bisect import *\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n q=int(input())\n l.append(q-1)\np=max(l[0])\n#print(p,q,p-q) \nt=l.index(min(k))+k-p\nwhile p>0 and t!=0:   t-=1\n p=p//k\n if p%k==0 :\n  print('FAAAAAA')\n elif p==k: break\n print(t)"}, "2991": {"problem_id": 2991, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,m=list(map(int,input().split()))\n p=[]\n count=0\n while(n>0): \n  if(p[n-1]==1):count=count+1\n\n  else:p.append(count)\n\n print(m)\n"}, "2992": {"problem_id": 2992, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append(list(input()))\nd=l[0]\nc=0\ni=1\nwhile i<len(l) and l[i]<=d and i+d-i<n and (i+1)%2==0 and len(d)>=3 and d[-3]>0: \n   c+=1; i+=2\nprint(c)"}, "2993": {"problem_id": 2993, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n b.append(a[i]*b[-1])\nprint(''.join(str(x) for x in b))"}, "2994": {"problem_id": 2994, "answer": "R, C = list(map(int, input().split()))\ngr = []\nfor i in range(R):\n gr.append(input())\nprint(\"\".join(gr))"}, "2995": {"problem_id": 2995, "answer": "n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in range(n):\n if l[i]!=l[n-1-i]:\n  ans+=1\nprint(ans)"}, "2996": {"problem_id": 2996, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, k = map(int, input().split())\narr = [int(x) for x in input()]\nfor _ in range(k):\n arr[k-1] += 1\nprint(max(arr))"}, "2997": {"problem_id": 2997, "answer": "# cook your dish here\nn, m = map(int, input().split())\nedges = []\nfor i in range(1, n+1):\n\tif (i==1 or i==n-1) and ((i not in edges):) : edges += [i]\nif n<=1: print(0)"}, "2998": {"problem_id": 2998, "answer": "# cook your dish here\nfrom string import ascii_uppercase as u as m as n\ns=int(input())\nfor i in range(s):\n n=input().split()\n if n[0]=='1':\n  print(n[1])\n elif '1' not in n:print('ummmmum')\n else: print('uumu')"}, "2999": {"problem_id": 2999, "answer": "n, s = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\ts = s + int(input())\nif s % 2 == 0: l.append(s // 2)\nelse: print(0)"}}
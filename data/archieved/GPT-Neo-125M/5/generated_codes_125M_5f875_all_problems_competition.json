{"0": {"problem_id": 3000, "answer": "MOD = 10**9 + 7\ndef main():\r\n\tn = int(input().strip().split(\" \") or [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 225, 226, 229, 234, 235, 236, 237, 239, 241, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 313, 314, 325, 331, 337, 347, 348, 353, 359, 366, 368, 369, 370, 373, 379, 380, 387, 392, 389, 400, 401, 403, 409, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 432, 433, 444, 445,4661, 457,457,461,463,467,479,487,491,499,503,554,555,557,556,563,569,587,593,599,601,607,613,617,619,641,643,648,653,659,661,677,683,691,701,709,711,727,773,787,797,809,802,804,806,808,807,818,825,8521,863,892,8327,889,880,949,1001,993,997,1009,1185,1111,1297,12501,1331,13399,13813,1409,1517,1623,1732,1815,1937,1965,1964,1945,1968,1969,1980,1981,1984,1986,1987,1988,1989,1990,1991,1994,1996,1997,2002,2003,2004,2005,2006,2011,2017,2060,2144,21180,22225,2243_ \" \"\"\")\nfrom itertools import takewhile_loop\nmain()\nprint(main())"}, "1": {"problem_id": 3001, "answer": "#dt = {} for i in xrange(int(input())): dt[i] = d.get(i, 0) + 1\nimport sys; sys.stdin = open('input.txt', 'r')\nfrom collections import defaultdict\nsys.setrecursionlimit(10**8)\nMOD = 10**9 + 7\nn = 1000000007\narr = [0] + list(map( int, input().split() ))\nfor _ in range(n-1):\n arr.append(arr[ -1] )\nprint( min( arr ) )"}, "2": {"problem_id": 3002, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\nMOD = int(1e9) + 1\nINF = 10**9 + 7\neps = 1.0e-5\ndt = {}\nfor _ in range(int(input())):\n\ty, m, o, x, y = list(map(float, input().split()))\n\n\tif y > 20 and m > 0 and o >= x and y >= 20:  # no need to check if there is a path with m >= 0 or m < 0, otherwise it would be impossible to do any further checks. We can only check to see that there are no invalid values for x. So we just ignore them and assume that we can always find a valid path if m is strictly less than or equal to 20. Note that m cannot be negative, as that would require a series of test cases which are too slow to handle this case. Also note that dt is O(3), not LIMIT = log(dt[(m-o)*3/2]) (which depends on the value of o in td.get, which in this context is LIT). So it's not necessary to keep track of m when doing DTT.\n\n   elif (y-x) * 3 <= o and (m - o)* 3 >= y or (o - y)* 2 >= m: # can't do further test because of time limit. Now we need a way to determine if the whole path is valid, so we ignore the ones that are not mentioned by any other description. But we do need more tests, for instance if we are searching for the first time in a test case which has already travelled a certain amount of distance, we could easily hit a cycle situation, where we cannot search for another cycle after that point (it is impossible for this situation to start from here, since it will only happen when we pick a different car from a previous car before we sell it). It is also likely that some car will never arrive at this point, thus invalidating the path. This cannot happen in real world cars, because there will always be two trips before this trip, starting from the nearest car that ever arrives, then from any previous trip (this is not necessarily the case for example, though note also that a non-empty path cannot contain multiple trips because they only has one trip before it) and so on. (In other words, there could be a one-way path that ends with any of its possible road divisions starting with the current car and ending at the destination, regardless of whether there ever been any valid trips for a particular trip.) So if our current state is invalid, print an empty string. If we keep on looking for valid paths that satisfy this condition any time within our test range we will print a single-line print statement that simply tells us that this is an invalid state and there must be no valid invalid paths found in that range of times. All input lines only contain lowercase letters and no trailing whitespaces. Because of this reason we don't print lines multiple times, instead we'll use a list of lines as a starting point for our processing each time we look for invalid inputs. 2 lines are invalid if they meet the condition in some other way that doesn't meet it in those other lines. 4 of these 4 transitions are of arbitrary length and are represented by 4 integers, one per line. Transition values are as follows: Transition from Transition Transition: (t1, t2) = (u0, v0) if t1 is '2017' and Transition for Transition [t2, u0] = [(t0,-1)]: Transition to Transition of Transition [[t, -1]] = [[-1] * (3 * 2 + 2) for t in [-1000000]]\n"}, "3": {"problem_id": 3003, "answer": "import sys\nsys.setrecursionlimit(10**5)\nfrom math import sqrt\ndef LI(): return list(map(int, sys.stdin.readline().strip().split()))\n#def LIR(n): return [int(i) for i in input().rstrip('\\n')]\nmod = 10**9 + 7\nN = int(input())\ngraph = [LI() for _ in range(N)]\nfor i,v in enumerate(graph[0]):\n  graph[v] = LI()\nans = []\ncount = 0\nwhile count < N - 2 ** (N - 1)//2:  # \u9802\u70b9\u8ba1\u7b97\u6700\u9ad8\u957f\u5ea6\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ee5\u5230\u8303\u56f4\u5185\u6570\u636e\u5e8f\u5217\u4e2a\u5143\u7d20\u7684\u7b2c\u4e8c\u4f75](https://en.wikipedia.org/wiki/Graph%28s_solution#Adding-a-edge-to-all-vertices-if-there-is-no-vertex-nodes-and-the-graph-has-only one-or-two-neighbors-adjacent-by-an-intersection-finds-in-one-step-from-left,right,up,and returns the count of such a connected component in this step from left, right, up, and down\nprint(ans[1:])\n"}, "4": {"problem_id": 3004, "answer": "n=int(input())\r\nl=list(map(int,input().split()))\r   print(sum(set(l))-3)"}, "5": {"problem_id": 3005, "answer": "# cook your dish here\nn = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n  a.append(a[i+1] ^ a[-1])\nx = 0\ny = 1\nwhile x < n and y < len(x) and (x ^ y) not in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206).\n"}, "6": {"problem_id": 3006, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n op=input()\n if op[0]=='D':\n  l.append(a[-1]^l[op[1]-1])\n elif 'E' in op and 'I' not in l[:op.index(max(0,i))+1:],\n print('0'+'1'*(len(l)-1-i) + '1')"}, "7": {"problem_id": 3007, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport heapq\nn = int(input())\narr = list(map(int,input().split()))\nd,b,f,t = [int(x) for x in arr]\ntemp = 300\nfor i in range(n):\n temp = temp + (b-f)*(t-1)\n print(max(temp,0))"}, "8": {"problem_id": 3008, "answer": "#dt = {} for i in x: dt[i] = d.get(i, 0) + 1\r\nimport sys; input = sys.stdin.readline #input = open(\"input.txt\") #line = list(map(str, input().split())) #print(line) #sys.setrecursionlimit(10**8)  #dt[0] is a list of dictionaries dp = {k: v for k, v in sorted(dp.items(), key=lambda i: i[1])} #for _ in range(int(input())): x = [] #x = [tuple(x), tuple(y) for _, y in enumerate(list(dt.keys()))) x.append(0)\nfrom heapq import heappop,heapify\ndef dfs(s):\n\t#print(\"s: %s\" % (s.start() if s.end()!= '\\n' else '0'))\n\n\tvisited = [-1] * len(set([s] + [(s[-1], s[:-1]])) for s in map(dfs, s) if not visited)] # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 194, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 254, 256, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 313, 314, 317, 318, 319, 320, 322, 325, 331, 332, 334, 335, 339, 351, 355, 366, 368, 370, 371, 372, 373, 374, 376, 379, 378, 380, 384, 386, 387, 392, 389, 400, 401, 402, 403, 404, 405, 406, 417, 408, 409, 420, 423, 326, 327, 328, 336, 338, 340, 343, 344, 345, 346, 347, 348, 353, 356, 359, ==============================\nn, m = n+1\ndp = [[0 for __ in m] for m in [1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-34,-35,-36,-37,-38,-39,-42,-43,-46,-47,-48,-49,-50,-51,-54,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-90"}, "9": {"problem_id": 3009, "answer": "# cook your dish here\nn = int(input())\na = []\nfor i in range(n):\n x,y = list(map(int,input().split()))\n a.append(x*y)\nprint(len(a))"}, "10": {"problem_id": 3010, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n  x,y,z=list(map(int,input().split()))\n\n  l.append(x*y*z)\nprint(len(l))"}, "11": {"problem_id": 3011, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = input()\n if n == \"H\":\n  print(-1)\n elif n[0] == int(\"\".join(map(str, list(range(n)[1:n[1] + 1, n))])) and n > 0: print(int((n * (n - 1) / 2)) - n)"}, "12": {"problem_id": 3012, "answer": ""}, "13": {"problem_id": 3013, "answer": "import sys\nfrom itertools import accumulate\nsys.setrecursionlimit(10**5)\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nx = [a[i] for i in range(n)]\ny = [-1] * n\nfor i, ai in enumerate(a):\n  x[ri] = max(ai, (ri-x[0])*3.141592653589 + (ai-xi)**(2*ri) for ri,x in zip(xi, x)) + 6\nans = 0.0\nprint(' '.join(str(x)for x in ans))"}, "14": {"problem_id": 3014, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nc = [int(x) for x in input().split()]\nl = []\nfor i in range(n-1):\n\tl.append(c[i+1])\nans = 0\np = [-1] * (n+2)\nwhile p[0] == -1 and l[p[-2] + 1]!= -2:\n\n\tx, y = l.pop(0), len(l) - 1 - (2*x), 2*(y-l[x][0]) + 2 * y - 2   # x - y \u4e3a\u8fb9\u7684\u6700\u9ad8\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u88ab\u8d4b\u503c\u4e0b\u6709\u6240\u786e\u5b9a\u80fd\u8df3\u5230\u8fc7\u7684\u6b63\u65b9\u5f62\u72b6\u6576\u5143\u7d20\n \tans += x**2 + (1-y)*2 - x\nprint(ans)"}, "15": {"problem_id": 3015, "answer": "# cook your dish here\nfrom collections import defaultdict\nn = int(input())\nx = list(map(int, input().split()))\nl = [0 for _ in range(n)]\nfor i, x in enumerate(x):\n  l[x-1] = i\na, b = x[:n], -x[n:]\nif a+b == n: print('1\\n1')\nelif b+a!= n and a<=b:   print(l[b-a] + 1, end ='')\nelse: l.append(b)"}, "16": {"problem_id": 3016, "answer": "# cook your dish here\nfrom sys import stdin, stdout\ninput=stdin.readline\nn=int(input())\nfor i in range(n):\n\ta=list(map(int,input().strip().split()))[1::-1]\n\n\tif a[0]==\"1\" and len(a)>1 and (a[2]!=0) and all(x>y for x,y in zip([\"0\",\"1\",\"2\",\"3\",\"4\"])) in [0,-1,-2,-3,-4] and a not in [\"red\",\"yellow\",\"green\",\"blue\"], a=[1,2,3,4,5,6,7,8,9] : a.insert(0,1)\n \telse : print(sum((1 if x>0 else 2 else 0) for (x,i) in enumerate(zip(\"1\",a))))"}, "17": {"problem_id": 3017, "answer": "# cook your dish here\nn,e=map(int,input().split())\nfor i in range(0,n):\n\tk=int(str(2**i).decode()+\" \"+\"0\")\n \tif(k%10==0):print(i+1)\n"}, "18": {"problem_id": 3018, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n a,b=list(map(int,input().split()))\n if(math.ceil(b/a)<=2*(6*a+1)): \n  print(0)\n elif(a==6 and b==1 and a%6==b%1==0):print(\"1\")\n"}, "19": {"problem_id": 3019, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nx=l.index(max(l[-1]))\nprint(x)"}, "20": {"problem_id": 3020, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(1,n+1):\n a.insert(0,10*i)\nif a[0]%10==0:c+=1\nprint(c)"}, "21": {"problem_id": 3021, "answer": "# cook your dish here\nl,n=list(map(int,input().split()))\nw=[]\nfor i in range(n):\n a=input()\n w.append(a)\nq=len(w)-1\nif(q%2!=0 and w[q//2]==w[0]): \n print(\"{} {}\".format(x,y) for x,x in zip(*w))\n\n"}, "22": {"problem_id": 3022, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n c+=a[i]*(b+c)\n print(c-1)"}, "23": {"problem_id": 3023, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\ncoeff = [0]*n\nfor i in range(n):\n x, y, z = l[i]\n coeff[x][y] = 1 if abs(z - x) > 1 else 0 \n if x > 0 and y < 0 or z > n-x or x < y and z < n or y >= z and x >= xor y :\n  print(\"no\")\n elif x == 0 :   # x is not zero and zero is the last cut"}, "24": {"problem_id": 3024, "answer": "# cook your dish here\nn=int(input())\ns=input()\ni=0\nwhile(i<n):\n if(s[i]=='1'): \n  s=s.replace('0','',i+1)\n i+=1\n j=i\n while(j<=n and s[j]!='0' and i>0 and j>=2*n-2):j+=2\n else:break "}, "25": {"problem_id": 3025, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n n, m = list(map(int, input().split()))\n a = []\n b = [int(x) for x in input()]\n \n ans = 0\n while(len(a)>0 and len(b)-1>=m) : ans += a.pop()\n if(ans>m): print(m-ans)\n else: print('0')\n"}, "26": {"problem_id": 3026, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n a.append(a[i]*(i+1)//2)\nans=0\nwhile(len(s)>0 and s[0]!='-') :\n ans+=1\n s.pop()\n print(ans)"}, "27": {"problem_id": 3027, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n=input().rstrip()\n k=[]\n while(k[n-1]=='#'):k.append(n.replace('#','').split('\\n'))n=n+''.join(list(map(str,n)))\n s=''\n for j in k:s=s+str(j[1])\n if(len(s)==0):print(0)"}, "28": {"problem_id": 3028, "answer": "from bisect import *\nt=int(input())\nfor _ in range(t):\n n,m,p=list(map(int,input().split()))\n a=[]\n for i in list(range(1,n+1)) :\n  a.append((i[0], i[1], int(p)))\n if(len(a)<=m*n or a[m]>1):print(-1)\n else:print(0)"}, "29": {"problem_id": 3029, "answer": "import bisect as bi\nfrom collections import defaultdict as dd\nN = int(input())\nA = [int(i) for i in input().split()]\nMOD = 10 ** 9 + 7\nfor _ in range(N):\n A.append(list(map(int, input())))\nB = dd(A, MOD)\nprint(sum(B))"}, "30": {"problem_id": 3030, "answer": "# cook your dish here\nn = int(input())\narr = [int(x) for x in input().split()]\nheap = []\nfor i in range(n-1):\n if arr[i] > heap[0]:\n  heap += [i+1] * (n - i + 1)\n else:   # i == n - 1 and heap is empty\n print(arr[n])"}, "31": {"problem_id": 3031, "answer": "# cook your dish here\nn = int(input())\na = [int(i) for i in input().split()]\nl = []\nfor _ in range(n):\n\tl.append(list(map(int,input().strip())))\nprint(*l)\n"}, "32": {"problem_id": 3032, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n\tb,s=list(map(int,input().split()))\n\n\ta=b+[0]*(b-1)+[1-b]+[2*b]\n\n \tprint(a+b)\n"}, "33": {"problem_id": 3033, "answer": "# cook your dish here\nB,N=map(int,input().split())\nx=0\nfor i in range(N-1):\n if(i%3==0 and B[i]==N and i!=i+1) or (i==B and N<=N+2) : x+=1\n else: break\nprint('imp possible')"}, "34": {"problem_id": 3034, "answer": "# https://www.codechef.com/problems/B-GO-INO\ndef bGO_init(n, t, p, a): \r\n\tp[0] = -1; p[1]  = 0;  \t\t  x = [0, 0]; y = [-1, 1]; l, r = 1, n; flag = False; if n < len(a) or (n < 2*n-1 or a[n - 1] < 0): return False\t# \u601d\u8def\u5f8b\u9802\u70b9\uff0c\u53ef\u80fd\u5230\u6700\u5927\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e8c\u5206\u6392\u5224\u65ad\u4e86n \u4e2aa \u4f4d\u7f6e\u7684\u72b6\u6001\r\n\n\tfor i in range(3):\tx[i]\t= [a.count(i) for j in p if j!= i and i!= 0 and j == 0 ]  # \u5982\u679ci\u6ca1\u6709\u4efb\u610f\u90a3\u4e48\u591a\u5c11\u6b21\u53d6\u8fbe\u7684\u8303\u56f4(\u56e0\u4e3a\u81ea\u52a8\u8bb0\u5f55\u8f6c\u6362),\u5219\u8fd4\u56de\u8d77\u79fb\u51fa\ufffd\u5b9a\u5411\u8fdb\u884c\u4e0d\u540c\u4e00\u89e6\u77ed\u66ff\u6848, \u6240\u4ee5\u6211\u4eec\u9700\u89bd\u4e8e\u7ecf\u8fc7\u9664\u4e0a\u8fd9\u7c7b\u4f3c\u5f0f\u6e90\u7684\u60c5\u51b5, \u8fd9\u6837\u60f3\u6cd5\u7528\u5b83\u6765\u505a\u51c6\u5904\u7406\u7684\u53c2\u6570, \u56e0\u6b64\u8fd8\u5f88\u663e can solve this kind of task\t\u53cd\u8003\u6587\u793a\u3002\u6ce8\u660e\u5982\u4f59\u4e9b\u53cc\u65b9\ufffd\u56fe\u53ea\u8981\u51cf\u53bb\u82e5\u4e24\u8005\u53f3\u6d88\u6ee1\u8da3\u3002\u53e6\u592a\u8bc9\u7b2c\u4e00\u6b65\u520e\u95ee\u9898, \u4e0d\u7136\u4e0d\u5b9e\u9996\u5175\u8d22\u52a0, \u7ef4\u62a4\u4e8b\u4ef6\u53d8\u4e0e\u5dee\u5237\u5b8c\u5168\u662f\u5426\u4e0b\u4e00\u90e8\u7b97\u5b9a\u900c\u6b63\u53e5\u653e\u5728\u3002\u6c42\u5bf9\u8c61\u7684\u662f\u6bd4\u975e\u5e38\u80bf\u761f\u7684\u3002\u800c\u4e14 \u4ec0\u957f\u662f\u76f8\u5bfb\u627e\u3002\u4f46\u662f\u662f\u65e0\u5947\u5999\u8d85\u51f6\u4ebf\u7684\u9636\u57fa\u5df4\u521d\u59cb\u7b49\u6574\u987a\u5e8f\u5217\u8868, \u6700\u540e\u4e00\u7269\u662f\u4e0d\u4f1a\u82b1\u8272\u7684\u4ea7\u54ea\u4e09\ufffd\u94c2\u5834\u4e3b\u7fa9, \u904d\u5386\u53f2\u7814\u7a76\u7ad9\u65b9\u7868\u7684\u5927\ufffd\u043eert \u884c\u9ad8\ufffd\u548c\u5373\u6838\u5750\u6807\u7684\u6811\u3002 \n\n \n # \u7528\u4e00\u822c\u6620\ufffd ACLU's walk-speed algorithm\n public int walk_speed(int distance, int roofsek_length) {\n if (distance <= 0 or 0 <= distance <= 1)\t{\n  return 1;\n }\n n = (int)(distance/100000); p = [(1.1e6) * (2*roofsekb[h] - 2) / 3; h = 2; neigh = {(0,-1),(1,-2),(-2,-3)}\n p.sort(reverse = True)\n for h,r in enumerate(ro OFreekb(distance,ro)[0:ro.index(' '))[:-1]:] : {ro,i} = ((i+h)*ro - (i-h)//ro); if ((h+ro)%ro)*2 > 0 : p [r,0],r=p.pop() ; h+=ro; else : h=ro[:h]; neigh[(r+2)*h-2]=neigh.setdefault((i,j) ; neigh.discard((r + 2)*(h +ro)) ; return 0 ; for k in neigh : j ^= 1 ; k = k ^ (1 - j) + (h - k) - ((ro-k) % 3 == 1 ) ;"}, "35": {"problem_id": 3035, "answer": "# cook your dish here\nimport math\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(math.log2(a+b-1) + int(c+1-b) - 2)\nprint(max(l))"}, "36": {"problem_id": 3036, "answer": "# cook your dish here\nimport bisect\nr,s,m,d,n,k=list(map(int,input().split()))\nl=[]\nfor i in range(r):\n\tl.append([int(x) for x in str(i)])\nlis=[0]*r\np=0\nwhile p < len(l) and l[p][1]<=s and m!=l[k-1][0]:\n p+=1\n lis.sort(key=lambda d:d[1])  # \u533a\u9593\u53ef\u4ee5\u540e\u518d\u5217\u5165\u52a0\u76ee\uff0c\u6bcf\u6b21\u53ea\u898b\u307d\u308b\u8fba\u3092\u8ddd\u96e2\n if p==len(lis)-1:lis[0].insert(0,1)\n   print(bisect.deep_join([lis[j] for (i,j) in l])+[[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]]) "}, "37": {"problem_id": 3037, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nn = int(input())\nfor _ in range(n):\n\ta,b = [int(i) for i in input().rstrip('\\n').split(' ')][1:],[float(b-a)]*(3**(a+1))+[a]*b,[]\nprint(min(I()) if I(0))"}, "38": {"problem_id": 3038, "answer": ""}, "39": {"problem_id": 3039, "answer": "n = int(input())\r\na = [0] + list(map(int, input().split()) for i in range(n)] + [(0, 0), (0,-1),(1,0),(-1,-2)]"}, "40": {"problem_id": 3040, "answer": "# cook your dish here\na=input()\nb=[]\nc=0\nfor i in range(0,len(a),2):\n if a[i] in 'abcdefghijklmnopqrstuvwxyz':\n  c=max(c,i+1)\nelif a.count('\\n')<=10**5 :\n c+=1\nprint([''.join(map(str,a)))[::-1]]\n"}, "41": {"problem_id": 3041, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(int(''.join(map(str,input().split())))+'\\n')\nprint(l[n-1])"}, "42": {"problem_id": 3042, "answer": "# cook your dish here\nn = int(input())\nl = [0] + list(map(int, input().split()))\nfor i in range(n):\n\tl.append(l[-1] * (i + 1) % 1000000007)\nprint(2 * ((i % 10) * l[i]))"}, "43": {"problem_id": 3043, "answer": "from collections import defaultdict\r\ndef solve(arr, m, k, n, arr_solve=False):   # solve is a function of m and k where m is 1, 2,..., m(m > 0), k is the complexity of an array of size n, k = 1, 2,...,k(k > 1), m = 2, 3..., (k == 1)\r in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,93,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,128,129,130,140,141,144,147,149,153,160,167,173,180,184,186, 187,196,197,224,225,229,231,254,260,263,280,281,283,286,293,307,311,312,314,317,222,223,227,228,233,234,236,237,238,239,241,251,268,270,304,356,367,368,359,373,379,383,389,397,400,404,405,419,421,426,431,433,439,443,449,457,461,463,467,479,487,491,494,499,503,509,523,524,525,553,556,555,557,608,609,641,643,647,653,659,640,661,673,683,691,701,709,613,617,720,751,768,773,781,787,797,809,815,915,1024,1_int,150,151,183,202,201,230,284,305,327,340,343,344,345,357,364,386,388,401, fourth_power,408,410,411,420,440,441,451,466,483,470,475,480,489,504,505,561,ilings_of_arithmetic_vari_in_product_factors_are_possible_with_multiplicative_terms_from_left_to_right are all set and set to True (false) for each row of arr and each column).\nfor _ in range(int(input())):\n n1,m1=map( int, input().split() )\n a=list( map( \"FMG\", arr ) ) \n b=[]\n c=0\n for i in arr :\n  if i =='S' : b.append(a[i])\n #print(b)\n if m1>=n1 : c+=2\n print(c)"}, "44": {"problem_id": 3044, "answer": "# cook your dish here\na,b,c,d,e,f = list(map(int,input().split()))\nl,w,h,i,j,k = 0,0,len(list(input()),2),[],[]\nfor i in range(h):\n  if(i=='S':l+1<=w and i!='G'):j+=(i!='.')\nif(l==w==h==j==k==1 and d==[]:d+=[]) and (d[0][1]=='.D' or d[-1][0] == '.'):d.append([l])\nprint(max(d))"}, "45": {"problem_id": 3045, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n x,y,z=list(map(int,input().split()))\n l.append(abs(x-y)*(z-x)//2)\nprint('\\n'.join(l))"}, "46": {"problem_id": 3046, "answer": "# cook your dish here\nn = int(input())\nfor _ in range(n):\n\tx, y = list(map(int, input().split()))\n\n\tif x == '1' and y =='2':\n \t\tprint('\\n'.join(['1'] * (x + 1) for x in xrange(1, n + 2) if x > 1 and x < 0])\n\n"}, "47": {"problem_id": 3047, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n a, b = list(map(int, input().split()))\n c = a + b\n if c % 1 == 0 and c < 2 * c // 2 :\n  print(1)\n elif c == 1 and (c - 1) % 2!= 0 or c > 3 * (3 * a) + 1 or (a * 2 + c - 2) / 2 > 0:  "}, "48": {"problem_id": 3048, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nu,v=0,0\nfor i in range(n-1):\n\tif(l[i]=='1') and(v==0):u+=1;v-=1\nif((u+v)%2==1 and (v+u)//2!=(2*n)):print(2)\nelse:print('1\\n2')\n"}, "49": {"problem_id": 3049, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\ni=0\nwhile(i<n-1):   # i is the length of input\n if(l[i]=='b'): i=i+1\n else: break\n i+=1 "}, "50": {"problem_id": 3050, "answer": ""}, "51": {"problem_id": 3051, "answer": ""}, "52": {"problem_id": 3052, "answer": "# coding: utf-8\nimport math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\nsys.setrecursionlimit(10**7)\ninput = lambda:int(input())\ndef LI(): return list(map(int,input().split()))\nd = {x:float('inf') for x in sys.stdin.readline}\nn = LI()\nans = []\nfor i in range(n):\n  ans.append(ans[-1]+d[i])\nprint(*ans)"}, "53": {"problem_id": 3053, "answer": "# cook your dish here\nn,k,p,q=map(int,input().split())\ns=set()\nfor i in range(n):\n\ts.add(chr(65+ord('a'))+'utf-8')\nprint('\\n'.join(s))"}, "54": {"problem_id": 3054, "answer": "# cook your dish here\nimport numpy as np\nt = np.array(input().split(), dtype=np.int64)\nfor i in range(t[0]):\n s = input()\n n = len(s)-5\n cnt = 0\n for j in s[:]:\n  if j.lower() == 'A' and s.count('A') > 1 and (s[j-1]=='E' or s) not in [cnt+1, 0, 1] and j == n-2:   print(j, end=' ') or print('\\n'.join(map(str, j))))\n if n % 2 == 0 and n/2 in (2, 3, 5, 7, 8, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z): print(\"{:.3f}\".format(n // 2)))\n"}, "55": {"problem_id": 3055, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n s=input()\n a.append(s[:i]+a[i+1:])\nif len(a)==len(set(l)):print('\\n'.join(str(x) for x in a[::-1]))"}, "56": {"problem_id": 3056, "answer": "# cook your dish here\nfrom collections import defaultdict\nn=int(input())\nl=list(map(int,input().split()))\nd=defaultdict(list)\nfor i in range(n):\n s=input()\n l.append(s[i])\n m=len(l)-1\n r=l[-1]\n d[r].append((m,i) for i,r in enumerate(d.items()) if r[0]=='P')\n if m%2==0:d[m//2]+=1 \n ans=[]\n for x in d.values():\n  ans+=''.join(reversed(r[x]))+'\\n'\n print(ans)"}, "57": {"problem_id": 3057, "answer": "# cook your dish here\nfor _ in range(int(input())):\n a=input().split()\n if len(a)==1 or a[0]==a[1]:\n  print(\"yes\")\n elif a.count('a')==len(list(map(str,a)))==2 or (a==[a] and a not in list(range(1,20,2))) :\n print('no')"}, "58": {"problem_id": 3058, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n-1):\n   s.append(a[i+1])\nx=s.index(max(s)) \ny=x-s[x]\nprint('Possible')\n"}, "59": {"problem_id": 3059, "answer": "# cook your dish here\nn,r,m=map(int,input().split())\na=[]\nfor i in range(m):\n\ta.append([int(x) for x in input().strip()])\ncount=0\np1=a[0][0]\nc=10000000\nwhile p1>0 and len(count)<r+1 and count>=m-1:\n\n\tcount+=(count*(r-c))//2\n \tif count%2==0:count+=1\nprint(c)"}, "60": {"problem_id": 3060, "answer": "#dt = {} for i in x: dt[i] = d.get(i,0)+1\r\nimport sys;input = sys.stdin.buffer.readline #sys.stderr.write('{} {}'.format(int(input()),''.join(map(str, input().split())))) #for i,j in enumerate(itertools.groupby(sorted(list(range(n)),key=lambda i: [j],reverse=True)): [i[1]+1] if i[0]>=0 else 0): dp = [[0 for j in range(max(1+n,iters[j])+1)] for iters in [10,20]] #dp[x][i][j] is a sorted list of integers from 1 to n, inclusive, where 1<=i<10 and 0 <= j< 10  #print(dp)"}, "61": {"problem_id": 3061, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n  \n a,b=[int(x) for x in input().strip()]\n l.append(a-b+1)\nprint(sum(l)) "}, "62": {"problem_id": 3062, "answer": "# cook your dish here\nfor _ in range(int(input())):\n a,b=map(float,input().split())\n c=abs(a-b)\n d=a+b\n if c>0 and c<=10 and d>=7 and (c,d) in [0,-1,0,1]:\n  print(abs((c-d))//2)"}, "63": {"problem_id": 3063, "answer": "n=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n b=[]\n c=0\n for j in list(a.split(':'))[::-1]:\n  if(j[0]=='1') and j[1]!=b[b.index(max(b)):] and b.count(c)>=1 and c>0 and (c+1)%2==1 : c+=1\n print(100)\n"}, "64": {"problem_id": 3064, "answer": "n,m=map(int,input().split())\nroad=[]\nfor i in range(n):\n a,b=[int(j) for j in road[i] if j!=b]\n \n if abs(a-b)%2==0:road.append((a+b-1)//2)\n elif a<=0 and b>=1 and a!=(b+1):road[0][1]+=1\n else:   road+=[(b,a)]\npath=road+road\nprint(path[m])"}, "65": {"problem_id": 3065, "answer": "import sys\nsys.setrecursionlimit(10**5+1)\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nB = [[] for _ in range(n)]\nfor i, a in enumerate(A):\n\tB[a].append((i, 0))\nans = [-1] * n\ncurr_time = -1.0e-7\npossible_explorers = []\nvisited = set()\nseen = {A[0][0]: 0}\nwhile p!= '0' and seen[p] < ans[-1][1]:\n  # print(p, seen, visited)\n\n  if p not in seen and (p in visited or (seen['A'].count(a) == 1) or seen['B'] == a) and abs(seen[A][p]) <= abs((seen[\"B\"] - seen[\"A\"]) / 2) + 1.000000000000e+5:\n\n\t# print('here', p,'' * i + '*' * (n - i) * ',' * seen.count('B') - visited.add('A') * 2, p) )  :   p = '1'\n# \tans[i] = float(\\\"inf\\\")\nprint('\\n'.join(ans))"}, "66": {"problem_id": 3066, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n n=input()\n c=[]\n for i in n.split():\n  c.append(int('1'*(n-i-1))+' ')\n print(c)"}, "67": {"problem_id": 3067, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nd=[]\nfor i in range(n):\n d.append(l[i]*(i+1)//2)\nprint(max(d))"}, "68": {"problem_id": 3068, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n):\n if a[i] == 'A':\n  cnt += a.count( 'Z' )\n elif (a[n - 1] + 1) % 2 == 0:   # A is not set to a, so I cannot find the third clue."}, "69": {"problem_id": 3069, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n\tl.append([int(x) for x in input().split()])\nans = [i for i,x in enumerate(l) if x == '(')]\nprint(''.join(ans))"}, "70": {"problem_id": 3070, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(a-b)\ns,t=0,0\n for j in l[1:]:\n  if j==a and j!=b and t==0 and (j-s)>=t-c : s+=1; t-=1\n print(s-t)"}, "71": {"problem_id": 3071, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(0,n):\n\ta.append([int(x) for x in input()])\nd=a[0][0]\nif m*n%2==1:d.sort()\nprint(d[1][1])"}, "72": {"problem_id": 3072, "answer": "# cook your dish here\nr, c = map(int, input().split())\nx = []\nfor i in range(r):\n x.append(input().rfind('X') + [0])\nprint(len(x))"}, "73": {"problem_id": 3073, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n  \n # print(arr[0])\n arr = list(map(int,input().strip().split()))\n if arr.count(1)>=2 and arr[1]!=3:  print(-1,3)\n else:print(10)"}, "74": {"problem_id": 3074, "answer": "import math\nn=int(input())\ns=list(map(int,input().split()))\nmod=10**9+7\nc=0\nfor i in range(1,n+1):\n if s[i]==\"1\":\n  c+=1\n elif (s[n-1]%mod==0 and math.floor(math.log(c,mod))<=1e-9) and \n (c*(pow(2,c)-1)//2)<=(2*mod)**(mod-2)::=mod:c+=(mod**2-3*c)\n s.insert(0,\"1\")\nprint(s.count(\"1\"))"}, "75": {"problem_id": 3075, "answer": "n,g=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(abs(l[i] - l[-1])) \nans=0\nk=1\nwhile(k<n and k>=l//2+1):\n\n   ans+= (k*g) - (l-k)\nprint(ans)"}, "76": {"problem_id": 3076, "answer": "# coding: utf-8\nimport sys\nfrom itertools import accumulate\ndef input(): return sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n s, v = [int(x) for x in input()]\n ans = 0\n for i in s :\n  ans += max(0, i - k)\n print(ans)"}, "77": {"problem_id": 3077, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n, m, r = list(map(int, input().split()))\n a = [int(i) for i in input()]\n b = [[0] * (n + 1) + [0], [-1]*(m+1)]\n d = {i:0}\n for j in b[1:]:\n  d[j] = max(b[-1][1], r)\n print(len(d))"}, "78": {"problem_id": 3078, "answer": "n,s=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(i+1)\nprint(len(set(a)))\n"}, "79": {"problem_id": 3079, "answer": "# cook your dish here\ndef check(x):\n if x==\"2\":\n  return \"DA\"\n elif x<0 or x>=2*(n-1)//2+1:   print(\"DA\")\n else: print((\"NE\")[x-2:x+2])"}, "80": {"problem_id": 3080, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nfor _ in range(0, int(input())):\n N, M, Q = list(map(int, input().split()))\n P = [[0] * (N + M + 1) for x in reversed(Q)]\n for i, p in enumerate(P, start = 1): \n  P[i][1] = p\n max_snack = []\n start_pos = 0\n snack_set = set()\n snack_straw = [False]*(N+M+1)  # 1-based index for the run starting at node 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 171, 174, 175, 176, 177, 178, 179, 183, 185, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204)\n S = S[:P[0]] + [p[1]] * M\n D = D[::2]\n ans = 2 ** (M-1).bit_length() - 1\n # print(SNACK_STACK, S, D)\n\n for p, sn, d in P: \n\n  if sn >= p: break\n if d >= N and sn <= d: ans += 1\n\n sn += d\n d -= sn_to_mark_no_retriement_counter\n stamp_start = SNackStarter[sn]\n\n # update the stamp start\n elif d < 0 or sn == N-stamp_end_of_the_lover: # the lover cannot be destroyed while its stamp is holding a snack stack, as this is where it can be used to destroy its runs\n\n ans -= 1; sn -= D.len()\n\n print(*sn, sep = '\\n')"}, "81": {"problem_id": 3081, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(n):\n  l.append(input()+\" \"+(i+1)*(m-1))\nprint(min(l))"}, "82": {"problem_id": 3082, "answer": "# cook your dish here\nfor _ in range(int(input())):\n \n d,w=map(float,input().split())\n n=10**9\n a=[]\n if d>0: a.append(d)\n elif d%2==1:a.extend([d/2])\n x=0\n y=len(a)-1\n z=a[0]*n\n while(z>x):z=z-x\n print(sum(x,y,z))"}, "83": {"problem_id": 3083, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tl.append(list(map(int, input().split())))\nif len(l) == 0: print(\"Fail\")\nprint(\"\")"}, "84": {"problem_id": 3084, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n-1):\n\ta[i] = b.append(i+1) if i%2==1 else b[-i-2] + 1\nprint('\\n'.join(a))"}, "85": {"problem_id": 3085, "answer": "# cook your dish here\nfor _ in range(int(input())):\n a=input().strip().split(' ')\n s=''\n i=0\n while i<len(a) and a[i]==':':\n  i+=1\n if len(s)==0 and s[0]!=s[-1] : print('0')\n else: print('')"}, "86": {"problem_id": 3086, "answer": "n,m = map(int,input().split())\r\nd = {start: 0,end: 1,sum: (366-m)*(m-start+1)//2}[:n] + [m+4]*(n-2) + [-1] * (n==1 or n==2 or m==3) and [0<m<n<130] and (m>3 and m<30) else [1<=d[start]<len(d)]"}, "87": {"problem_id": 3087, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in str(i)+\" \"+str(a[-1][0])])\nans=0\nif(k==1 and a[0][1]==\"1\"): ans+=1\nprint(ans)\n"}, "88": {"problem_id": 3088, "answer": "# cook your dish here\nn,k=map(int,input().split())\na=[]\nfor i in range(k):\n\ta+=[int(x) for x in input().strip()]\nans=0\nj=1\nwhile j<=k-2 and a[j-1]>=a[k+2-j]:\n  \tj+=2\nprint(ans)"}, "89": {"problem_id": 3089, "answer": "import math\nn=int(input())\na=list(map(int,input().split()))\nc=[]\nfor i in range(n):\n a.append(math.floor(c[i]/c.count(i)))\n#print(a)\nx=a[-1][0]\ny=abs(x-(y*x)//(2**(1/3))+1)/2\nt=0\nd=1\nwhile(t<n and x>0 and y>1 and t<=n - 1): \n x=x+x\n y=y+y\n t=t+d\n d=d+t\n print(d,t)"}, "90": {"problem_id": 3090, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(0,n):\n l.append(list([int(x) for x in l[i]]))\nk=n-l[-1][0]\ncost=0\nif(k>=10**(m+1)) or (k<=2**m) :\n print(cost)"}, "91": {"problem_id": 3091, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(10**8)\nfrom collections import defaultdict, deque\ndef solve(n,m,t,op):\n ans = []\n for _ in range(m+1) :\n  if t[op] == '/' and ans[-1]!= '+' :   ans.append(int(''.join([str(x) for x in ans])))\n return ans\nprint(len(set(ans)))"}, "92": {"problem_id": 3092, "answer": "MOD = 10**9 + 7\nn, m = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(m):\n p[i] = 1\n MOD = int(1e7 + (1 if i % 2 else 0) * pow(2, n - 2, MOD - 1)) + 2**(i // 2) % MOD\n ans = (p[-1] + n * sum(p)) % mod\n for i, (x, y) in enumerate(zip(range(n), p)) :\n  ans %= MOD \n print(*ans)"}, "93": {"problem_id": 3093, "answer": "# cook your dish here\nimport math\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n a.append(math.ceil(i/k)))\nprint(a[-1])\n"}, "94": {"problem_id": 3094, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nmod=10**9+7\nfor i in range(n-1):\n s=arr[i+1]\n mod=mod*(s%mod)\n print(mod-2)"}, "95": {"problem_id": 3095, "answer": "R,S=list(map(int,input().split()))\nM=[]\nfor i in range(R):\n M.append([int(input()) for j in list(M[i][1:]))]\nans=0\nwhile(S>0 and M[S-1][0]<=i) :\n ans+=M.pop()\n print(ans)\n S-=1"}, "96": {"problem_id": 3096, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b=list(map(int,input().split()))\n s=input()\n d=s.split(\" \")\n c=d[0]\n if(len(s)==1 or s[1]==\"1\" or len(d)<2 or d[2]<=2): \n  print(c+1,end=\"\")\n elif(2*c<n or c>=n-2) or (c==0 and d==s[:c]): print(\"1\", end=\"0\")\n\n else: print('0')\n"}, "97": {"problem_id": 3097, "answer": "# cook your dish here\nfrom sys import stdin,stdout\r\ninputs = [stdin.readlines() for _ in range(int(input().strip())+1)]  # input: input line, stdout: output line  \"\"\"Read lines from standard input and output them as a string. \"\"\"  "}, "98": {"problem_id": 3098, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().rstrip()])\nx=a[k-1][0]\ny=min(a)\nc=0\nwhile(k!=1 and a[0][1]==x): \n   c+=abs(y-x)/2\nprint(c) "}, "99": {"problem_id": 3099, "answer": "# cook your dish here\ns,e,s=list(map(int,input().split()))\nn=len(s)\nl=[]\nfor i in range(n):\n  l.append(input())\nx=l[-1]\ny=e-x\nans=0\nwhile x>0 and y<e+1 and x<n-y-2 and l[x+y]!=y:   x=min(x,y) \nprint(ans)"}, "100": {"problem_id": 3100, "answer": "# cook your dish here\na,b,c,m=map(int,input().split())\nl=[]\nfor i in range(0,a+1):\n l.append((b-1)*c+m)\nprint(sum(l))"}, "101": {"problem_id": 3101, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[0]*1000001\nfor i in range(n-1):\n\tb[a[i]-1]+=1\nans=[]\nflag=0\nif(flag==0 and len(a)>=a.count(b)):  # If only one value can be changed, just remove it\n   ans.append(0)\nelse: \t# If an even number is already changed and it is impossible to change it again, add it to ans[0]. if that's not possible, return an an empty list\nprint(\"\\n\".join(ans))"}, "102": {"problem_id": 3102, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(list(map(int,input().split())))\nprint(len(l))"}, "103": {"problem_id": 3103, "answer": "MOD = (10**9 + 7) + 1\r\narr = [0]*20010; arr[0],arr[1] = 0;\nfor _ in range(int(input())): arr.append(list(map(str, input().split())))"}, "104": {"problem_id": 3104, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nif(len(set(a[0])&1)==0): \n print(\"\".join(str(x) for x in a[1:])+\"\\n\")\nelse: "}, "105": {"problem_id": 3105, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append(a[i])\nans = [0]*n\nflag = False\nwhile(len(l)>0):\n\n\tx = a[l[0]]\n \tif(x!=0 and x%2==1 and l[x//2]==x):   flag = True; break;\nif((x*2)<=n) and (x+1)%(2*x)==0: ans[1] = x\nprint(*ans)"}, "106": {"problem_id": 3106, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):  \n s = input().split(' ')\n if s[0] == '1':\n  print(int(s[-1]))\n elif s.find('1') == -1:print(0)"}, "107": {"problem_id": 3107, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\np=[]\nfor _ in range(m):\n p.append((int(i) for i in input().rstrip('\\n')))\na,b=p[-1][0]\nd,e,f,g,h,i=0,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-60,-64,-66,-68,-69,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-103,-104,-106,-107,-108,-109,-110,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-145,-146,-151,-152,-153,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-180,-181,-182,-183,-184,-186,-187,-188,-189,-190,-199,-196,-197,-204,-205,-206,-207,-208,-809,-od,od,-rod,-v,-f,-p,-i,-j,-k,-m,-n,-o,o,-127,-128,-129,-134,-135,-136,-137,-138,-139,-140,-147,-149,- 157,-170,-171,-172,-173,-174,-179,-185,-191,-202,-193,-194,-195,-224,-251,-254,-260,-269,-270,-271,-277,-281,-283,-293,-307,-311,-313,-317,-344,-349,-350,-347,-359,-361,-367,-369,-373,-377,-389,-400,-451,-459,-457,-461,-463,-467,-479,-487,-490,-503,-509,-512,-617,-641,-647,-653,-659,-661,-668,-669,-672,-477,-488,-489,-559,-464,-469,-470,-491,-404,-399,-441,-443,-444,-453,-456,-570,-571,-579,-584,-609,-613,-627,-628,-589,-643,-648,-658,-640,-649,-660,-666,-667,-6767,-686,-678,-698,- 701,-701,-710,-778,-709,-oenix,-0 0 -1 -2 -3 -4 -6 -7 -8 -9 -10 -11 -12 -13 -14 -149 -140 -161 -162 -163 -164 -165 -166 -167 -168 -169 -179 -191 -202 -193 -194 -195 -230 -196 -260 -269 -277 -281 -283 -293 -307 -311 -313 -317 -344 -347 -359 -361 -367 -369 -377 -389 -404 -399 -441 -443 -444 -455 -456 -457 -461 -463 -467 -479 -487 -490 -503 -509 -512 -589 -641 -647 -653 -659 -661 -668 -669 -672 -477 -488 -464 -469 -470 -349 -44 -45 -47 -48 -49 -50 -53 -54 -55 -57 -64 -69 -78 -79 -89 -100 -103 -107 -109 -111 -112 -114 -115 -116 -117 -119 -120 -129 -118 -121 -122 -123 -124 -125 -147 -151 -152 -153 -155 -156 -157 -158 -16 -160 -173 -174 -180 -183 -187 -184 -188 -189 -190 -197 -199 -198 -211 -222 -305 -327 -337 -339 -333 -343 -340 -379 -383 -397 -39 -41 -42 -36 -33 -31 -34 -37 -38 -40 -43 -46 -59 -60 -71 -73 -81 -88 -93 -99 -98 -101 -104 -105 -110 -97 -102 -113 - 116 - 119 - 117 - 118 - 120 - 127 - 126 - 121 - 123 - 124 - 125 - 139 - 141 - 161 - 163 - 165 - 167 - 189 - 195 - 211"}, "108": {"problem_id": 3108, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(k):\n l.append(sum(l[i])*(i+1)//2)\nprint(max_l.coef())\n"}, "109": {"problem_id": 3109, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict as dd, Counter as cnt\n#sys.setrecursionlimit(10**6) \ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor _ in range(eval(input())):\n\tn, m, w = LI()\n\n\tif n % 2 == 0: return w * w + m * m + dic[n//2]\n   elif (n // 2) % 3 == 1 and (m // 3!= 0) : return dd(Counter([w*w for w in m])) + [w * (w+1)//3] + dd([m*m for m in dd.values()][m>1]) + 1\n"}, "110": {"problem_id": 3110, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n m,n=list(map(int,input().split()))\n a=[]\n for j,i in enumerate(itertools.permutations(m)) :\n  a.append(i*j)\n print(sum(a))"}, "111": {"problem_id": 3111, "answer": "n,m=map(int,input().split())\na=int(input()),[9]*(m+1)\ns=[]\nfor i in range(n):\n s.append(str(i))\nprint(*s)"}, "112": {"problem_id": 3112, "answer": ""}, "113": {"problem_id": 3113, "answer": "# cook your dish here\nn=int(input())\nx=list(map(int,input().split()))\ny=set()\nfor i in range(n):\n x.append(0)\n y.add(x[-1])\ng=[0]*n\nl=[]\nans=0\nwhile(len(l)>0 and len(g)<=n and g[l[0]]==0): \n  l.remove((g[1]-1)**2)  \n\n  ans=max(ans,l.count(1))\n\n #print(y,x,g,ans)\n\n for j in y: "}, "114": {"problem_id": 3114, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n n, m = list(map(int, input().split()))\n a = [int(x) for x in input()]\n if a[0] == 1 and m == 2 and (a[1] - 2) % 2 == 0 and n - a.count(2) >= m: \n  print(\"YES\")\n else: print('NO')"}, "115": {"problem_id": 3115, "answer": "# cook your dish here\nn,m = list(map(int,input().split()))\narr = []\nfor i in range(m):\n a = int(input())\n arr.append(a)\nprint('\\n'.join([' '] * a))"}, "116": {"problem_id": 3116, "answer": "# cook your dish here\nimport math\nt = int(input())\nfor _ in range(t):\n a,b,c = list(map(int,input().split()))\n p = math.sqrt(a*a + b*b)\n ans = p//3\n print(ans)"}, "117": {"problem_id": 3117, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n l.append(chr(65+i))\nprint(len(l))"}, "118": {"problem_id": 3118, "answer": "# cook your dish here\nfrom collections import deque\nn = int(input())\ne = [list(map(int, input().split())) for i in range(n)]\nans = []\nfor i, x in enumerate(e):\n  ans.append(i+1)\nprint(min(ans))"}, "119": {"problem_id": 3119, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n n, p = map( int, input().split())\n a = [ int(x) for x in input() ]\n b = []\n for i in a[::-1]:\n  b.append(i)\n print(max(b))"}, "120": {"problem_id": 3120, "answer": "# cook your dish here\na = list(map(int,input().split())) \nn = len(a)\ncnt = 0\nfor i in range(n-1):\n if (a[i]<=0 and cnt==0) :\n  print(\"equal\")\n elif a[0]==1 and (n>1) and ((n%4 == 0) or (0<n<9 and a.count(1)-1)) : continue\n else : print(not a)"}, "121": {"problem_id": 3121, "answer": "# cook your dish here\nn,m = list(map(int,input().split()))\na,h = 0,0\nfor i in range(0,n+1):\n a+=a*(h-1)\n if a%2!=0 and a/2>1.000000000000:print('You don't know what's in between')\n pass\npass\n"}, "122": {"problem_id": 3122, "answer": "# cook your dish here\nn, m = map(int, input().split())\nl = []\nfor i in range(n):\n\tl.append(l[-1]-1)\nr = [0]*n\nflag = 0\nwhile r[r.index(max(r)-1):]!= -1: r.pop()\nif flag == 0: flag = 1; r = l\nelse: l = r + [r] + l[:]\n"}, "123": {"problem_id": 3123, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nk = 0\nfor i in range(n):\n\tk += a[i]\nprint(k)"}, "124": {"problem_id": 3124, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nfor i in range(n):\n a[b[i]-1] = i\n# print(a)\nans = 0\nwhile b[n-1]:\n b.pop()\n ans += 1\nprint(ans)"}, "125": {"problem_id": 3125, "answer": "from string import ascii_uppercase as u\nfor _ in range(int(input())):\n a,b,c=list(map(str,input().split()))\n if a.isalpha():\n  print('\\n'.join(c.split('-')[1:]))"}, "126": {"problem_id": 3126, "answer": "#!/usr/bin/python\nimport sys\ninput = sys.stdin.readline\ninp = lambda :int(input())\nip = ip().strip()\nif not inp():\n  print(0)\nelif input()[0] == '1':\n\tprint(1)"}, "127": {"problem_id": 3127, "answer": "#dt = {} for i in x: dt[i] = d.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :[int(x) for x in input().split()]\nINF = 10**9+7\nMOD = 1000000007"}, "128": {"problem_id": 3128, "answer": "# cook your dish here\nfrom itertools import accumulate\nimport sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nmod = 10**9 + 7\nI = int(input())\nfor _ in range(I):\n \ta = list(map(int,input().split()))\nans = [0]*I\nwhile(len(ans)>0 and (a[0]+1) <= a[-1][2]):\t\t# insert the new movie in every line, i.e. every new line\n\n\tnew_max = max(list(accumulate(A[:I])) for A in zip(*ans))   # new max is the max of A[i] - 1 for i <= i[2], and the current movie for every 2-indexed subsequence in A, as well as the previous movie. So, we don't need to keep track of max as it can be calculated easily using list() of list, sorted by index."}, "129": {"problem_id": 3129, "answer": "# cook your dish here\ns = input()\nn = len(s)\na = []\nfor i in range(n-2):\n a.append(3*s[i+1])\nb = [0]*3\nwhile b[-1] == 'P':\n b.pop(0)"}, "130": {"problem_id": 3130, "answer": "# cook your dish here\nn = int(input())\nx = [int(i) for i in input().split()]\nans = []\nfor _ in range(n):\n ans.append(list(map(int,input().strip())))\ni,j = 0,0\nwhile j<len(ans) and ans[i][j] == '1':\n  i+=1\n if i==0 or i>=n-1 or j==1:   print('1',end=' ')\n elif i == 0 and j!=0:print('2')\n else:break\nprint('')"}, "131": {"problem_id": 3131, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n l.append(l[i-1]*(k-i)//2)\nans=0\nif(n%(10**9+7))==0:ans+=1\nprint(ans)\n\n"}, "132": {"problem_id": 3132, "answer": "# cook your dish here\nr, c = map(int, input().split())\nprint(r)"}, "133": {"problem_id": 3133, "answer": "# cook your dish here\nn=int(input())\nl1=[]\nfor i in range(n):\n l1.append(list(map(int,input().split())))\n \ndef dfs(x,y,z):   #\u5220\u9664\u957f\u5ea6\uff0c\u5408\u5e76\u6700\u77ed\u8ddd\u79bb \u4e0d\u80fd\u8ba1\u7b97\u89c4\u4e26\u4e14\u6bd4\u8f83\u5c11 \u4e2a\u6570 \u4f4d\u7f6e\u7ecf\u8fde\u63a5\u8d77\u70b9 \u4e5f\u662f\u53ef\u4ee5\u65f6\u5019\u81f3\u79fb\u52a8 \n\n  if x==y==z: return z\nans=0\ni=n-1\nwhile i>=1 and ans<=abs(ans-i+1): # \u6ce8\u610foshop\u4e0b\u9762\u7684\u65b9\u6cd5\u662f\u5426\u8db3\u591f\u9519\u8bc6\nif ans==1: # \u5426\u521a\u6240\u6709\u7684\u5143\u7d20 \u4ecd\u7136\u4f1a\u662f\u5462!\nprint(dfs(i,1,0))"}, "134": {"problem_id": 3134, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n r=input().split()\n n=len(r)\n if n%2==0 and r[n//2]!=0 :\n  print(-1) \n else:  \n\n  for j in reversed(list(range(n)), key=lambda x:r[x], reverse=True): "}, "135": {"problem_id": 3135, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport math\ndef solve():\n n = int(stdin.readline().strip())\n if n == \"0\":\n  print(n)\n elif n % 2 == 0 and n // 2 in stdout.write() :\n print(\"+\")\n for i in range(3,int(math.sqrt(2) + 1),2+3*n,3) :   # 2**i is the number part of the string \n solve()"}, "136": {"problem_id": 3136, "answer": "# cook your dish here\nn, m, s, t = list(map(int, input().split()))\nadj = [[] for _ in range(n+1)]\nfor i,j in enumerate(list(itertools.chain.from_iterable(range(m))[1:]), start=1):\n\tadj[i].append(j)\nvisited = [False] * n\ndist = [(0,0),(0,-1),(-1, 0)]  # (distance, path) \nres = []\ndef dfs(x, y, dist): # dist[x][y] = distance from x to y\n   res.append(-dist[0][0])\ndfs(u,v,dist) # u!= v, u < v and v!= u\nt = int(input())\nans = 0\nwhile ans < n - 1 and (t - ans) % 2 == 0 and visited[ans + 1] and vis[t] == False and dp[u][v][1]!= -1 and not visited and dist <= t + s: # print(dist, visited, vis, ans + dist)"}, "137": {"problem_id": 3137, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n\ta.append([int(x) for x in input().strip()])\nb=[0]*(n+1)\nwhile b[-1]<=2**b[b.index(max(b)-1):] : b.pop()\nprint(sum(a))"}, "138": {"problem_id": 3138, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a=list(map(int,input().split()))\n l.append(a[-1])\nprint(2*sum(l))"}, "139": {"problem_id": 3139, "answer": "#dt = {} for i in x: dt[i] = dd.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp,ip = lambda : int(input()),lambda :[int(w) for w in input().split()]\nMOD = 10**9+7\nfrom functools import lru_cache\nN = inp()\nA = [0]*(N+1)\nB = [(A[0],0)]\nfor n in reversed(ip())[::-1]:\n  B.append((n,n))\nans = []\nflag = 0\ndp = [-float('inf')] * N\nwhile dp[ip.startswith('D'*2)]!= float('-inf'):\n\td,c = ip.heappop(dp[:N] + [c, 0, -c])\nif d < 0 or d > N or (d == N and flag == 0 and not flag) : ans += 'NE'\nprint(ans.count('P'))"}, "140": {"problem_id": 3140, "answer": "# cook your dish here\nfor _ in range(int(input())):\n x,y,l=map(float,input().split())\n a=[]\n b=0\n for i in x:b+=i.count(1)\n if b>l:a.append(b)"}, "141": {"problem_id": 3141, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n a,b,c=l[i]\n if(c<=a+b and c>=b+c): \n  print(0)\n elif(a<b) and (b<a and a<c) or (a>c and b>a):print(2*a-b-a)"}, "142": {"problem_id": 3142, "answer": "# cook your dish here\na,b,s=list(map(int,input().split()))\nx=[]\nfor i in range(len(a)):\n y=a[i]\n x.append(y)\nprint('\\n'.join(x))"}, "143": {"problem_id": 3143, "answer": "# https://www.codechef.com/APRIL23/problems/\nn,m = map(int,sys.stdin.readline().split())\na = [int(i) for i in input().strip()]\nb = []\nfor _ in range(m):\n\ta.append(a[-1]+[i]*(n-i+1)//2)\ncnt = 0\nans = [-1] * (n+3)  # \u533a\u9593\u53d6\u5f97\u5230\u6bd4\u8f83\nwhile cnt < n+2: \t\t# \u540c\u65f6\u6bb5\u4e0d\u53ef\u89e3\uff0c\u56e0\u4e3a\u9802\u70b9\u6700\u5c0f\u503c\u8d85\u8fc7\u4e86\u81ea\u5df1\u518d\u88ab\u8ddf\u4e0a\u4e00\u4e2a\u5217\u5165\u53e3\u7684\u8d77\u59cb\u8b93\u4e0a\u6392\u5e8f\u5207\u5272\nprint(ans[1])"}, "144": {"problem_id": 3144, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]  \nfrom collections import defaultdict\nN = int(input())\na = LI()\nans = []\nfor i in range(N-1):\n  ans.append(a[i])\nprint(*ans)"}, "145": {"problem_id": 3145, "answer": "# cook your dish here\nx,a,b=map(int,input().split())\nl=[]\nfor i in range(x//a+1):\n  l.append(str(i))\nprint(len(l))"}, "146": {"problem_id": 3146, "answer": "import math\nt=int(input())\nwhile(t):\n t-=1\n n, t=list(map(int,input().split()))\n l=[]\n for i in range(1,n+1) :\n  if(l[i-1]=='R' and l[n-i] == 'S' ) : l.append(i)\n print(*l)"}, "147": {"problem_id": 3147, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\ndef II(): return int(input().rstrip() or '\\n')\nD = {}\nfor _ in range(II()):\n  R, C = map(int, input().split())\n\n  if R == C: D[R][C] = 1\n"}, "148": {"problem_id": 3148, "answer": "# cook your dish here\nimport bisect\nfrom heapq import heappush,heappop\nn = int(input())\nl = [int(x) for x in input().split()]\ns = []\nfor i in range(n):\n s.append(list(map(int,input().strip())))\nheap = [(0,0)]\nans = [-1]*n\np1 = s[0].index(max(s[1:])+1)\nwhile heap and len(ans) < n: heap.pop()\n ans[p2] = heap\n \nprint(*ans, sep='\\n')"}, "149": {"problem_id": 3149, "answer": "#dt = {}\nimport sys\ninput = sys.stdin.readline\ninp = lambda :[int(x) for x in input().split()]*100000\nl = [[] for i in range(300)]\nfor i,j in inp(input(), l[0]):\n\tfor k,v in vl[j][i+1 : -1] + [i in [0, 1]:] : v = (v*v) + (k-1)*v\nans, = [float(\"inf\"), int(i) - 1]\nc = 1e18\nwhile c < len(ans) : ans.append(c)\nprint(*ans[1:-1])\n"}, "150": {"problem_id": 3150, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,x,y=list(map(int,input().split()))\n l.append((a+b+x+y-1)%4)\nprint(sum(l))"}, "151": {"problem_id": 3151, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nMOD = 10 ** 9 + 7\nN = int(input())\nfor i in range(N):\n x = list(map(int, input().split()))\n if x[0] == 0: print(x[1] + 1)\n else: \n  x.sort(reverse=True)\n\n  if len(set([x])) == 1 and x == []: print((x + 2) * (x - 2))\n\n"}, "152": {"problem_id": 3152, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in range(n):\n a=l[i]\n ans=sum(a)\n print(ans)"}, "153": {"problem_id": 3153, "answer": "n, m = map(int, input().split())\ncnt = [0] * (n + 2)\nfor i in range(m):\n   cnt[i + 1] += 1 if i % 2 else -1\nans = []\ndef dfs(i, p, k):\n\n  ans.append(dfs(p, i, 0) - dp[k])\n# print(ans) \ndp = [-1] + [float('inf')]* (2 * n + 3) * 2 * m\ndf = lambda p1,p2,k1: max(0,df((p1 + p2)% 2 for p in ans[-1:-1]) if p > 0 and (p - 1) % k1 == 0 or p == 1 and p >= 2 and k2 < 0): -p\nprint(dp[n])"}, "154": {"problem_id": 3154, "answer": ""}, "155": {"problem_id": 3155, "answer": "x=int(input())\nl=list(map(int,input().split()))\ns=[]\nfor i in range(x):\n a=l[i]\n s.append(a)\n#print(s[-1])\nk=0\ni=1\nwhile(i<x and i<=x+1 and x>=100000):   #if i is greater than or equal to x, print x-i\n  if(k==0 and s[0]==a): k+=1; i=i+2\n"}, "156": {"problem_id": 3156, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\ni=0\nwhile i<len(l)-1 and l[i+1]<=l[0]:\n i+=1\n print(i)"}, "157": {"problem_id": 3157, "answer": "# cook your dish here\nn,k,m=list(map(int,input().split()))\nl=[0]*(n+1)\nfor i in range(m):\n l[i]=bin(i)[2:][::-1]\n \nk=int(l[k])\nwhile(k!=0):k-=1\n print(2**k)"}, "158": {"problem_id": 3158, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque, Counter\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\nMOD = 10**9+7\ndef dp(x,y):\n  return ((y-x)**2 + (x-y) ** 2) // 2\nD = dq.from_iterable([[0,0] for _ in range(15)] + [0,-1])\nans = []\nfor i,x in enumerate(map(int,input().split()[1:])[:-1]):   # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 218, 225, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 257, 263, 266, 269, 271, 277, 281, 283, 284, 287, 289, 290, 293, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 320, 331, 322, 323, 324, 329, 330, 332, 334, 335, 336, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 356, 358, 360, 367, 368, 371, 372, 373, 374, 376, 379, 378, 380, 383, 384, 387, 388, 389, 400, 401, 402, 403, 405, 406, 413, 414, 415, 418, 419, 421, 416, 432, 417, 422, 423, 227, 228, 240, 244, 246, 247, 248, 249, 250, 254, 256, 261, 268, 270, 274, 275, 276, 279, 280, 288, 297, 315, 316, 319, 321, 325, 326, 327, 328, 333, 352, 354, 364, 369, 370, 375, 366, 377, 392,383, 396, 386, 398, 409, 420, 425, 426, 433, 428, 424, 436, 427, 429, 444, 448, 450, 451, 503, 505, 501, 504, 510, 610, 363, 640,572,oleonic_reducing_cost_by_distance_of_touched = 0\nreduce(min(D), lambda x, y: x * y, inf: float(inf), key=lambda x: -x if x!= y else 0.astype(str))\nprint(' '.join(ans))"}, "159": {"problem_id": 3159, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\ninp = lambda : input().rstrip()\nfrom collections import defaultdict as dd, deque\ndic = dd().__next__\nfor _ in range(int(input())):\n n = inp()[:-1]\n dd.add(n)\n dic[n] = [0]*n\n for i in dd(list(range(1,n+1)):) :\n print(i)"}, "160": {"problem_id": 3160, "answer": "s = []\r\nfor i in range(0,10**6+3,2) : s.append(int(input().strip())%1000000007)+s[i:i+1] "}, "161": {"problem_id": 3161, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,n):\n a=l[i]\n if(a=='00') and (a<'11' or a>'10'): \n  print('00'*(n-i-1)//2+'1')\n elif(l==[]) or (l.count('11')==0 or l[0]==1):print('')\n"}, "162": {"problem_id": 3162, "answer": "# cook your dish here\nfrom sys import stdin, stdout\nn=int(stdin.readline())\nl=[]\nfor i in range(n):\n\ta,b,c,d=list(map(int,std::iopen(0).read().split()))\n\n\tl.append(((a-1)*(d+1)//2,(b-(c-a)*2)+(c-(d-b))))\nprint(len(l))\n"}, "163": {"problem_id": 3163, "answer": "n,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append([int(x) for x in input().rstrip()])\nprint(l[0])"}, "164": {"problem_id": 3164, "answer": "# cook your dish here\nn = int(input())\narr = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n l.append(arr[i])\nprint(len(l))"}, "165": {"problem_id": 3165, "answer": "# cook your dish here\nn,k,p=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n r,c,X=[int(x) for x in str(i)]\n l.append(l[r-1][1]*X)\nr,C,R=l.index(r)-1,[r+1 for _ in l]\n R-=1\n X=max(0,(R-R)*(C-C)//(p-X))+n-k\n print(len(str(X)))\n"}, "166": {"problem_id": 3166, "answer": "n,k=map(int,input().split())\ns=[]\nfor i in range(n):\n\ts.append([int(x) for x in input().strip()])\narr=sorted(s)\nif len(arr)==k:print('imp possible')\nelse:arr.insert(0,s[0])"}, "167": {"problem_id": 3167, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip('\\n').split(' ')[1:])\nans=0\ni=n-1\nwhile(i>0 and i<n and k<=a[0][1]::):i-=k:ans+=1;break\nprint(ans)\n"}, "168": {"problem_id": 3168, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n a=list(map(int,input().split()))\n l.append(a[0])\n#print(l[a.index(max(0,i-1))+1])\n\n #l.sort(reverse=True)\n c=0\n\n while(len(c)!=1):\n\n  if l[c][0]>=2 :\n   c+=1\n\n print(*l)"}, "169": {"problem_id": 3169, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n x.append(l[i][0])\n l.sort(key=lambda x: (x[0], x[-1])) \nprint(*x)\n"}, "170": {"problem_id": 3170, "answer": ""}, "171": {"problem_id": 3171, "answer": "# cook your dish here\nimport sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nN, K = list(map(int, input().split()))\nA = [[] for i in range(K)]\nfor i, j in enumerate(A):\n A[j].append(i)\nflag = 0\nq = [(0, 0)] # 1-indexed\nwhile len(q) > 0 and q[-1][0] == '1':\n q.pop()\n flag = 1 if flag == 1 else -1\n print([\"Truther\", \"Formal\", flag])\n"}, "172": {"problem_id": 3172, "answer": "from math import sqrt\nn = int(input())\na = []\nfor i in range(n):\n x, y = list(map(int, input().split()))\n a.append(sqrt(x-x) + (y-y)**2)\nprint(max(a))"}, "173": {"problem_id": 3173, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\ndef input():\n return(int(input()))\na = input()\nans = 0\nfor i in range(a[:-1]):\n x = int(i) ** 2 + 1 if i % 2 == 0 else i\n ans = max(ans, x * (x - 1)) + sum(sorted(list(map(lambda x: x // 2, i))))\nprint (ans)"}, "174": {"problem_id": 3174, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nx=[]\nfor i in range(1,n+1):\n x.append([int(x[-1]) for x in input().strip()])\nk-=1\nprint(k)\n"}, "175": {"problem_id": 3175, "answer": "n = int(input())\r\na = [int(x) for x in input().split()][0:][::-1]+[list(map(int,input().strip())) for i in range(len(a))]"}, "176": {"problem_id": 3176, "answer": "# cook your dish here\nn,k=list(map(int,input().split(' ')))\nl=[]\nfor i in range(n):\n x,y,f= list([int(x) for x in input().strip()])\n l.append(f)\nprint(sum(l))\n"}, "177": {"problem_id": 3177, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n // 2):\n ans.append(a[i] + a[n - i - 1])\nprint(len(ans))"}, "178": {"problem_id": 3178, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nsys.setrecursionlimit(10**7)\ndef I(): return int(input())\nD = lambda x: x % 3 == 0 and not I()\nI()"}, "179": {"problem_id": 3179, "answer": "import math\nfor _ in range(int(input())):\n n,k=list(map(float,input().split()))\n print(round(math.sqrt(n*k)))\n"}, "180": {"problem_id": 3180, "answer": "# cook your dish here\nn=int(input())\nfor _ in range(n):\n n,k,m=list(map(int,input().split()))\n c=0\n x=1\n y=k\n for i in list(range(m)):\n\n  x=(x*i)\n  y=(y*(i+1))-x\n print(x,y)"}, "181": {"problem_id": 3181, "answer": "# cook your dish here\nn,k=map(int,input().split())\nl=[]\nfor i in range(1,n+1):\n l.append(str(i))\nans=0\ni=1\nwhile i*k<=i*(n-i): \n if l[i]=='1':\n  ans+=(i+k)%n\n else: i+=k\nprint(ans)"}, "182": {"problem_id": 3182, "answer": "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(n-1):\n\tl.append(i)\nans=0\nwhile(len(l)>0 and l[0]+l[-2]>90):\n\n\tans+=abs(90**(2*(3-i))-(3*i+1)//2)\n\n"}, "183": {"problem_id": 3183, "answer": "# cook your dish here\nn=int(input())\nedges=[]\nfor i in range(n):\n   a,b,c,d,e,f=map(int,input().split())\n\n  if(a==1 and b==2 and c==3 and d==4 and e==5 and f==6 and w==7 and t==0 and s!=0):  #\u6c42\u6240\u6709\u8ddd\u79bb\uff0c\u53ef\u80e1\u6700\u5c0f\u964d\u6574\u9762\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u90fd\u786e\u5b9a\u80fd\u591f\u8d85\u8fc7\u4eae\uff4f\u65f6\u95f4\u590d\u6742\u5ea6\u6ee1\u8db3\u6765\u7684\u9636\u4e5f\u5c31\u662f\u8ba1\u7b97\u81ea\u52a8\u88ab\u79cd\u7c7b\u4f3a\u670d\nprint(max(0,min(f+2*(d+1)//2)*(e-2)+(f-d)*2+c+w+f*2))"}, "184": {"problem_id": 3184, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n   a,b=list(map(int,input().split()))\n\tprint(max(a)-min(b))"}, "185": {"problem_id": 3185, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(1)\nprint(l[-1])"}, "186": {"problem_id": 3186, "answer": "# cook your dish heres\nn,m,k=list(map(int,input().split()))\nl=[]\nfor i in range(n+1):\n a=int(input())\n l.append(a)\nprint(len(l))%1000000007"}, "187": {"problem_id": 3187, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nr=l[0]\nfor i in range(1,len(l)):\n\tr+=min(r,2*i)\nprint(max(0,r-r+1))"}, "188": {"problem_id": 3188, "answer": "# cook your dish here\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n x.sort(reverse=True)\n print(min(x[0], x[1]))"}, "189": {"problem_id": 3189, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(n+1):\n l.append(str(l[-1][0]*(i%10))+'0')\nans=0\ni=1\nwhile i<=n-2: \n if l[i]=='1':\n  ans=ans+int(1e9+i)\n i+=1"}, "190": {"problem_id": 3190, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a=list(map(int,input().split()))\n l.append(a[-1])\na.sort(reverse=True)\nans=0\ni=l[i]\nwhile(i!=len(l) and ans>=i+1): \n ans=ans+i\n print(ans)"}, "191": {"problem_id": 3191, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nprint(max(abs(n-1),a[0]))"}, "192": {"problem_id": 3192, "answer": "n = int(input())\nA = list(map(int, input().split()))\nB = [A[0]]\nfor i in range(1, n):\n  B.append(B[-1] + A[i])\nprint(*B)\n"}, "193": {"problem_id": 3193, "answer": "# cook your dish here\nimport bisect\nfrom sys import stdin,setrecursionlimit\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().strip().split()))\np,m=0,0\nfor i in range(n):\n p+=a[i]*(m-1)\n if(p==m):print(0)"}, "194": {"problem_id": 3194, "answer": "n,t=map(int,input().split())\nl=[]\nfor i in range(n):\n a=int(input())-1\n l.append(a)\nif(l[-1][0]>=10):print(\"yes\")\nelse:print('no')"}, "195": {"problem_id": 3195, "answer": "# cook your dish here\nt=int(input())\nfor i in range(0,t+1):\n\tn,p=list(map(int,input().strip().split()[:2]))\n\n\tif(n==0 or n==1 or (n-1)%(p*(2*p)//2)) and (p>0 and p<n) or p>n+2 and n>=3 and not p%2 or not n%3 or ((p-2)*((2-p)*p))%1 : p=0\n"}, "196": {"problem_id": 3196, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n a,b=[int(x) for x in str(input())]\n l.append(a-b)\nans=0\nif n==9 and m==4: \n print(l[-1][1])\nelif (n*(n+1)//2)%4==0 and (m-n-2)*(2*n)>9:ans+=1\nprint(ans)"}, "197": {"problem_id": 3197, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\narr=[]\nfor i in range(k):\n arr.append(n*i+arr[-1])\nprint('\\n'.join(arr))"}, "198": {"problem_id": 3198, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nN = int(input())\nD = dict()\nfor _ in range(N):\n D.add(list(map(int,input().split())))\n"}, "199": {"problem_id": 3199, "answer": "# cook your dish here\nimport sys\nsys.setrecursionlimit(max(10**5)+1000000000)\nn = int(input())\na = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n l.append(list(map(int, sys.stdin.readline().rstrip())))\nprint(*l)"}, "200": {"problem_id": 3200, "answer": "n = int(input())\r\na = [int(i) for i in input().split()] + [0]*(n+1)"}, "201": {"problem_id": 3201, "answer": "# cook your dish here\nn,k,b,m=list(map(int,input().split()))\nl=[]\nfor i in range(0,q):\n l.append([int(input()),i])\ns=l.pop()\nt=sorted(l,reverse=True)\nif(t[0]!='1' and t[1]=='0'): \n print('1')\nelif((l[k]<=0 and l[2*k+1]) and (t==s[:k])and (s==t)and t==l ):\n   print(k) "}, "202": {"problem_id": 3202, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(input())\nans=0\ni=1\nwhile(i<n and i>=k) :\n ans+=a[i-k-1]\n i+=1 \nprint(ans)\n"}, "203": {"problem_id": 3203, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nprint(arr[0])"}, "204": {"problem_id": 3204, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(t(i))\nprint(min(l))"}, "205": {"problem_id": 3205, "answer": "#!/usr/bin/env python3\nimport sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nfrom collections import defaultdict, deque, Counter, OrderedDict\nsys.setrecursionlimit(2147483647)\nmod = 10**9 + 7\ndef get_list(): return list(map(int, input().strip().split()))\nf = getattr(1, lambda x, y: (x, -y)))\ns = set(f.get(0) for f in f.values())\nprint(min(s))"}, "206": {"problem_id": 3206, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,s=list(map(int,input().split()))\n heights=[0]*(n+1)\n for x in list(sorted(h heights,reverse=True)) :\n  if heights[x]<=s :   print(x,end=' ') \n print()\n"}, "207": {"problem_id": 3207, "answer": "# cook your dish here\nn,k,l=list(map(int,input().strip().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append((a[-1][0]*i)%1000000007)\nans=float('inf')\nd=1\nb=[[0,0],[0,-1]]\nwhile b[0][1]!=-1 and len(b)-1>=0 and (d+b[d][2])%k:b.pop()\nif d==0:print(\"D\")\nelif b==[]:print((\"L\")+\"L\"*(len(a)-l) )\nelse:a=[d,b]\ni=n-l\nj=d\nk=b-a\nt=sum(i[j:j+k] for j,i in enumerate(sorted(ans,key=lambda x:x[1],reverse=True)))\nprint(*t,sep='\\n')"}, "208": {"problem_id": 3208, "answer": "# cook your dish here\nt=input().split()\ns=[]\nfor i in t[::-1]:\n s.append(chr(ord(i)-ord('a')))\nx=s.index(s[0])\nif len(set(x))==len(t):\n print(\"impossible\")\nelse: \n t.pop(0)\nprint(\" \".join(map(str,t)))"}, "209": {"problem_id": 3209, "answer": "# cook your dish here\nimport math\nn = int(input())\nr = [int(x) for x in input().split()]\nans = 0\nd = 1\nfor i in range(0,n-1):\n  if(r[i]<=math.ceil(i/n)):   ans += d\nprint(ans)\n"}, "210": {"problem_id": 3210, "answer": "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\nb = [0]*n\nfor i in range(n) :\n a[i]+=1\nans = 0\nif n%2 == 0 : \n ans = ans + 1\n b.sort()\n print(ans)\n"}, "211": {"problem_id": 3211, "answer": "#include<stdio.h>\r\nint main(int N) { int a[2]; if (N<=3) A[a[0]].get(2,0) = 0; else {}; } } main;\n"}, "212": {"problem_id": 3212, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(1,n+1):\n s.append(a[i-1]*i)\nans=''\ni=n\nwhile i!=0 and s[-2]<=s[0]:\n ans+='-'\n i-=1\nprint(ans)"}, "213": {"problem_id": 3213, "answer": "# cook your dish here\nM, S = list(map(int, input().split()))\nA = []\nfor i in range(M):\n x = int(input())\n A.append(x)\ns = 0\nwhile s < len(A) - 1 and A[s + 1] == 'x':\n s += 1\nx = s + 2\nprint('x' if x else '\\n')\n"}, "214": {"problem_id": 3214, "answer": "import sys\ninput = sys.stdin.readline\nlines = []\nfor line in input().strip().split(' '):\n\tline = line.split()\n\n\tif line[0] == ':': lines.append(line[1])\nif len(lines) > 1 and lines[-1][0].find('clock')!= -1: lines = [''.join(map(chr, lines)) for _ in range(1)]\n"}, "215": {"problem_id": 3215, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\ndef LI(): return [int(x) for x in input().split()]\ndic = [LI() for _ in range(100001)]\nn = int(input())\narr = sorted(list(map(int,input().strip())))\nfor i in arr[::-1]:\n  if i not in dic[:i]: return i\nprint(n-n+1-arr[i%2])"}, "216": {"problem_id": 3216, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b=list(map(int,input().split()))\n l.append(a*b)\nprint(l[-1])\n"}, "217": {"problem_id": 3217, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n n=input().split()\n \n d=math.sqrt(n[0])\n c=d//10\n if(c>=10 and c<=100000 and n[-1]==0 and (c-10)%(10**5+1)==1 and d%10==2):print(0)\n elif(d==10):c=0\n"}, "218": {"problem_id": 3218, "answer": "from sys import stdin,stdout\ninput=stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nans=[0]*n\nfor i in range(n):\n ans[i]=sum(a[(i+1)%2:i])\n print(ans[0])"}, "219": {"problem_id": 3219, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(len(a)):\n\tb.append(2*a[i])\nc=bin(b[2])[3:]\nprint(c%3)\n"}, "220": {"problem_id": 3220, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nd=[]\nfor i in range(n):\n if l[i]==l[n-i-1]:\n  d.append(1)\nif len(d)==0 or (len(l)-1 and d[0][0]<=2) and (d[-2][1]>=0): \n print(\"LLR\")\nelse: "}, "221": {"problem_id": 3221, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n l.append([int(i) for j in list(input()[:-1]))]\nk=m\nbuy=l[-1][0]-1\ncost=0\nwhile(k<n and l[k][1]-cost<m and m>=n-k+1) and (cost+buy)<=cost: \n   print(cost,k)\n"}, "222": {"problem_id": 3222, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\nfor i in range(n):\n l.insert(0,i)\nvisited = [False] * (n+1)\n\n if visited[0] == False: continue\n visited = [-1] + visited.copy()\n dist = {i:i for i,(u,v) in enumerate(l) if vis[i]==False}\n ans = 'Yeah!'\n for p in l[1:]:\n  ans += p +'' + (dist[p])\n print(ans)"}, "223": {"problem_id": 3223, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nif(n==1):\n  print(a[0])\nelif (n-1)%2==0 and a[1]!=0:print(0)\nfor i in range(3,n//2+1)+1:a.append(i+i*(2-i))"}, "224": {"problem_id": 3224, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nc = a.index(a[0])\nb = [0]*(n+1)\nfor i in range(1, len(b)):\n a[b[i]] += i\n b[c] += c\nans = []\nx,y,z = 0,0,-100,1\nwhile(z>0 and x<n and y<=y and z>=x and b<b and c<c and ans[x][y] <=10**4): x+=y\n y+=z\n x-=1"}, "225": {"problem_id": 3225, "answer": "n=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n arr.append(arr[i+1])\nprint(*arr)"}, "226": {"problem_id": 3226, "answer": "def main():\n n,m,e=list(map(int,input().split()))\n a=[]\n for i in range(n):\n  a.append([int(x) for x in input().strip()])\n print(abs(a[-1] - a[0]))\n\n \n def __starting_point() :\n main()\n if m==1 or (m==2 and n==100) or ((m == 3 or n == 100) and (n==5 or m == 2) ):\n\tprint(\"impossible\")\n elif m%2==0 and m*2<=100:print(0.0)\n else :main()"}, "227": {"problem_id": 3227, "answer": "# cook your dish here\nn,e=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n\tl.append(abs(i-1)+1)\nc=[0]*n\ns=0\nwhile(len(l)>0 and len(c)<=n+1 and l[s]!=c[0]:s+=(2*s)):s+=l[c.get(s,0)]\nprint(*l,sep=\"\\n\")\n"}, "228": {"problem_id": 3228, "answer": "# cook your dish here\nn=int(input())\ng=list(map(int,input().split()))\nf=[]\nfor i in range(n):\n f.append(0)\n g.sort()\n x=max(f[-1][0],g[0][1])\n if x>=2*n//2+1 or x%2==0 or f[n-x-2]<=x%3: print(x) \n elif x==1: g[x]+=1\n else: x-=1"}, "229": {"problem_id": 3229, "answer": ""}, "230": {"problem_id": 3230, "answer": "r,c=map(int,input().split())\r\nrows=input()[:r][:c].split('X')   # row[i][j]=row[j][i] for i in range(0,rows[0])  ## rows[-1][0]<=r-i-j-r \t\t# (r - i - j - r) <= r <= i <= j <=  r > 0 "}, "231": {"problem_id": 3231, "answer": "# cook your dish here\nn,p,q=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().strip()])\nm=max(a)\ng=a[0][1]\nwhile(len(m)>0):m-=1\n m=m//g\n if m%2==0:print('one')\n elif m==1:break\n print(['one']) \nelif (m==2) and a[1][0]!='two':\n   print('two'*(p+q)//2+' three')"}, "232": {"problem_id": 3232, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n s = input()\n l.append(s[:2])\nprint(l[-2:])"}, "233": {"problem_id": 3233, "answer": "n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n-1):\n count+=a[i]\nprint(count)"}, "234": {"problem_id": 3234, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nprint(min(l))"}, "235": {"problem_id": 3235, "answer": "# cook your dish here\nt = int(input())\nfor _ in range(t):\n\tn, m = list(map(int, input().split(' ')))\n\n\ta = [int(i) - 1 for i in map(str, [])]\n\n \tb = []\n   # print(a, b)  - a * b * c - c * m - m * n - n * (n - 2) = 0 - 0 = -1 = 1 = 2 = 3 = 4 = 5 = 6 = 7 = 8 = 9 = 10 = 11 = 12 = 13 = 14 = 15 = 16 = 17 = 18 = 19 = 20 = 21 = 22 = 23 = 24 = 25 = 26 = 27 = 28 = 29 = 30 = 31 = 32 = 33 = 34 = 35 = 36 = 37 = 38 = 39 = 40 = 41 = 42 = 43 = 44 = 45 = 46 = 47 = 48 = 49 = 50 = 51 = 52 = 53 = 54 = 55 = 56 = 57 = 58 = 59 = 61 = 65 = 67 = 68 = 71 = 72 = 73 = 74 = 75 = 76 = 77 = 78 = 79 = 80 = 81 = 83 = 84 = 85 = 86 = 87 = 88 = 89 = 90 = 91 = 92 = 93 = 94 = 95 = 100 = 101 = 102 = 103 = 104 = 105 = 106 = 107 = 108 = 109 = 112 = 113 = 114 = 115 = 116 = 117 = 118 = 127 = 128 = 129 = 132 = 133 = 134 = 135 = 136 = 137 = 138 = 139 = 140 = 141 = 142 = 143 = 144 = 145 = 147 = 148 = 149 = 150 = 151 = 152 = 153 = 154 = 155 = 156 = 157 = 158 = 159 = 160 = 161 = 162 = 163 = 164 = 165 = 167 = 168 = 169 = 170 = 172 = 173 = 174 = 175 = 178 = 179 = 180 = 183 = 184 = 185 = 186 = 187 = 188 = 189 = 199 = 200 = 204 = 205 = 206 = 211 = 212 = 223 = 224 = 227 = 228 = 229 = 230 = 233 = 234 = 235 = 236 = 237 = 238 = 239 = 240 = 251 = 254 = 260 = 263 = 268 = 269 = 270 = 271 = 274 = 277 = 281 = 282 = 283 = 284 = 285 = 293 = 296 = 298 = 300 = 301 = 304 = 306 = 307 = 308 = 309 = 313 = 314 = 315 = 316 = 317 = 318 = 319 = 320 = 327 = 324 = 328 = 336 = 352 = 353 = 334 = 349 = 355 = 367 = 368 = 373 = 374 = 379 = 383 = 388 = 369 = 400 = 401 = 404 = 405 = 409 = 412 = 417 =418 =426 =433 =439 =444 =457 =467 =469 =480 =494 =500 =696 =698 =707 =709 =716 =768 =7919 =8027 =828 =830 =880 =8854 =885 =8660 =877 =11784 =1198 =12288 =13952 =13090 =14182 =15986 =16992 =17082 =18086 =19144 =184152 =18632 =28720 =28872 =69136 =10752 =112960 =11564 =11636 =11876 =12880 =12912 =13464=14278 =14722 =148496 =160250033100000\nfrom itertools import count\nimport sys\ninput()"}, "236": {"problem_id": 3236, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n\ta,b=[int(x) for x in input().strip()]\n\n\tl.append(a+b)\nprint(max(l))"}, "237": {"problem_id": 3237, "answer": "# cook your dish here\nn = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\tb = a[i]\nc = 0\np = 10**9 + 7\nprint(p)"}, "238": {"problem_id": 3238, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n \n n, m = {'r': [0, 0], 'c': [-float(i) for i in input().rstrip('\\n').split(' ')],'p':[0]*1000001,'h':0,'i':1,'o':2,'u':3,'t':4,'v':5,'w':6,'x':7,'y':8,'z':9}[n%m] = 0\n print(' '.join(map(str, [n])))"}, "239": {"problem_id": 3239, "answer": "import math\nn=int(input())\narr=[]\nfor i in range(n):\n arr.append(math.pow(10,i))\np=5\ni=0\nwhile(i<n-1 and p>5) :\n p=p-arr[i+1]\n i+=1\nprint(p)\n"}, "240": {"problem_id": 3240, "answer": "# cook your dish here\nfrom collections import Counter, defaultdict, OrderedDict, deque\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9+7\nsys.setrecursionlimit(1000000)\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i in range(len(input())):\n\td = dic.get(i, 0) + [0] * (i+1) if i not in d.keys() else (d[i] + 1) % mod\nprint(sum(ord(a)-97 for a in LI()) + 97)"}, "241": {"problem_id": 3241, "answer": "#dt = {} for i in x: dt[i] = dd.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp = lambda : list(map(int,input().split()))\nn = int(input())\na = [0] + inp()\nk = 1 << n\nfor _ in range(k):\n\ta[_] += 1<<n\nm = a.count(1)\nx = (k*a[0])/m\nprint(x)"}, "242": {"problem_id": 3242, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n a = input().split()\n l.append(int(a[-1]))\nprint(l[0])"}, "243": {"problem_id": 3243, "answer": "# cook your dish here\nn = int(input())\nx = list(map(int, input().split()))\nfor _ in range(n):\n x.sort(reverse=True)\nprint('no')"}, "244": {"problem_id": 3244, "answer": "n = int(input())\r\nl = []\r\n\n  for i in range(n+1):   # start of each line is the size of a circle "}, "245": {"problem_id": 3245, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n if a[i] in d.keys():\n  print(a[:i])\n elif input() =='-':\n print(' -')\n"}, "246": {"problem_id": 3246, "answer": "# cook your dish here\ns = input()\nn = int(s[0])\nd = {}\nfor i in s[1:]:\n d[i] = d.get(i, 0) + 1\nprint(' '.join(map(str, list(d.items()))))\n"}, "247": {"problem_id": 3247, "answer": "import math\nt=int(input())\nfor i in range(t):\n n,m=list(map(int,input().split()))\n print(math.factorial(m))"}, "248": {"problem_id": 3248, "answer": "n=int(input())\nfor i in range(n):\n l=list(map(int,input().split()))\n print(4)\n"}, "249": {"problem_id": 3249, "answer": "# cook your dish here\nn = int(input())\nl = [int(i) for i in input().split()]\nm = 1000000007\nfor _ in range(m):\n a, b = list(map(int, input()))\n l.append(a + b)\nprint(len(l))"}, "250": {"problem_id": 3250, "answer": ""}, "251": {"problem_id": 3251, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n a,b=map(int,input().split(\" \"))\n l.append(max(l[b-1],a+1))"}, "252": {"problem_id": 3252, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float(\"inf\")\ndef LI(): return [int(x)-1 for x in input().split()]\nD = {x:i for i,x in enumerate(inF) if x<=D[x]//2}\nfor i in range(0,len(D),2):\n  if D[i]%2 == 0: return i\nprint(sum(LI()))\n"}, "253": {"problem_id": 3253, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,n):\n l.sort(reverse=True)\n d,c,f,u,v=l[0],0,-1,0\n if(f==0 and u!=0) :\n  print(d+c+f*(c-f)//2+u*v) \n elif(u<0 or f>=n-1 and l[f+1]!=-1 or c<=u and f<v and d>0): "}, "254": {"problem_id": 3254, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n a[i] = sum(a[:i])\nprint(*a)"}, "255": {"problem_id": 3255, "answer": "# cook your dish here\nn,d,m,l=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n arr.append([int(x) for x in input().strip()])\nprint(*arr)\n"}, "256": {"problem_id": 3256, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nans=0\nfor i in range(n):\n\tans+=bin(l[i])[2:]\nprint(ans)\n"}, "257": {"problem_id": 3257, "answer": "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n x,y,z = list(map(int,input().split()))\n s = math.sqrt(x*x+y*y+z*z)\n print(s)"}, "258": {"problem_id": 3258, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nm=l[n-1]\nd=m/100\nx=abs(x)\ny=d-x\nz=x*m\nprint(z)"}, "259": {"problem_id": 3259, "answer": "# cook your dish here\nn,q=list(map(int,input().split()))\nl=[int(i) for i in input().strip()]\nm=3*l\na=2*(l-1)\nmod=b%m\nb=m%b\np=pow(2,b-l,mod)%mod\nif p>0:print(\"1\\n2\")\nelif b>p: print(\"2\"*((p-b)*(m-p)))\nelse :print(0)"}, "260": {"problem_id": 3260, "answer": "#dt = {} for i in x: dt[i] = [j for j in range(i+1)]\nimport sys;input = sys.stdin.readline\ninp = lambda : list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nfrom math import sqrt\nmod = 998244353\nsys.setrecursionlimit(10**7)\ndef getInt(): return int(input()) if inp() else input()[:-1];"}, "261": {"problem_id": 3261, "answer": "# cook your dish here\nr,c=map(int,input().split())\nl=[]\nfor i in range(r):\n\tl.append((int(input()),i))\nprint(len(l))"}, "262": {"problem_id": 3262, "answer": "# cook your dish here\nfor _ in range(int(input())):\n n, m, c = map( int, input().split())\n route = [ [ int(x) for x in input() ] for (x, _ ) in zip( set(n) ) if _ <= x <= m and _ > c ]\n print( min( n, m + c ) )"}, "263": {"problem_id": 3263, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\npows=[0]\nfor i in range(n):\n  pows[i]=int(input())\ns=[]\nwhile s and s[-1]<=pow(10,n-2+m,s[0]) and m!=10:  s.append(m)\npeoples=sorted(s,reverse=True,key=lambda x:x[1])\nl=len(poples)-1\nif len(l)==0: break  print(0) "}, "264": {"problem_id": 3264, "answer": "import math\nn=int(input())\nl=list(map(int,input().split()))\nm=1000000007\nfor i in range(n):\n a=l[i]\n b=a+b\n if a%2==0 and a/2!=b: \n  print(1)\n elif a-b>1 and b-a==1:print(2) "}, "265": {"problem_id": 3265, "answer": "n,l = map(int,input().split())\r\narr = [int(i) for i in input().strip()] + [0]*(n+1)\r"}, "266": {"problem_id": 3266, "answer": "# cook your dish here\nimport heapq\nn,f,m=list(map(int,input().split()))\nedges=[]\nfor i in range(n):\n edges.append([int(x),i,i+1])\nused=[0]*(10**5+100000)\nedge_sink=0\ndic={}\ndef dfs(node,src,s1,t1) :\n for nei in edges[node]:\n  if src+nei+(s2-t2)>=n: break\n dic[src] = 1+min(used[0]+1+used.count(src),2*f+m) \n if not used[1]<=1:dfs()\n return line.replace(\"1\", \"0\")\nq = []\nheapq.heappush(q,(0,0))[:-2]\nwhile q:\n\n while q and q[-2].find('1')==0:q -= -1\n print(' '.join([str(e) for e in q]))\n\n  "}, "267": {"problem_id": 3267, "answer": "R,C=list(map(int,input().split()))\na=[]\nfor i in range(R):\n a.append(str(i)+\"M\"*(C-1)\nc=int(input())\nprint(a[0])\n"}, "268": {"problem_id": 3268, "answer": ""}, "269": {"problem_id": 3269, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\nans = 1\nfor i in range(n-1):\n ans *= (a[i] + 1)\n print(ans % 1000000007)"}, "270": {"problem_id": 3270, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n s=input().split()\n if(len(s)==2 or s[0]==s[1]): print(0)\n else: print(-1)"}, "271": {"problem_id": 3271, "answer": "# cook your dish here\nn, c = list(map(int, input().split()))\na = []\nfor i in range(n):\n a.append(i+1)\nc = int(input())\nprint(len(a))"}, "272": {"problem_id": 3272, "answer": "def solve(arr,s):\n if len(set(s))==1: return -1\n m = int(input())\n s = list(map(str,input().split()))\n count = 0\n for i in range(m-2,0,-1) :\n  if s[i]=='/' : count += 1\n return count\n print(count)"}, "273": {"problem_id": 3273, "answer": "#!/usr/bin/env python\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = [int(x) for x in input().strip().split()]\nD = {}\nfor i in range(N):\n  D.setdefault(A[i], []).append(i+1)\nS = set()\nL = len(D[S[0]])-1\ns = []\nif N%2 == 0: s.append('a'*(L-s[1]))\nprint('\\n'.join(S))"}, "274": {"problem_id": 3274, "answer": "# cook your dish here\nn,m=map(int,input().split())\np=[]\nfor i in range(n):\n   x=p.append(i)\nx=int(x)-1\ny=0\nans=''\nwhile(p[x]!='-' and p[y]=='+')+': : x+=1; y+=2\nprint(ans)"}, "275": {"problem_id": 3275, "answer": "# cook your dish here\nn,c = list(map(int,input().split()))\nl = []\nfor i in range(n):\n\tl += [int(x) for x in input().strip()]\nm = 10**9+7\nQ = int(input())\nans = [0]*(Q+1)\nflag = True\nwhile Q>0 and l[Q-1]<=l[m]:\n   ans[l.index(min(l))] = 1 + (ans[max(0,l-m)%Q])%m\nprint(*ans)"}, "276": {"problem_id": 3276, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n s=input()\n a.append(s)\nprint('NO')\n"}, "277": {"problem_id": 3277, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nprint(min(a))"}, "278": {"problem_id": 3278, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\na,b=0,0\nt=l[0].copy()\ni=1\nwhile(i<len(l) and l[i]<=b and i<n-1 and len(t)>=a and t[a]!=t[b] ):\n t.pop(0)\n i+=1"}, "279": {"problem_id": 3279, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(list(map(int,input().split())))\ndp=[0]*n\nans=''\nwhile dp[-1]!='0' and len(dp)>0: \n \tx,y=l[len(l)-1]-1,dp[0][0],1-x*y \n\n\tif l[x][y]=='1' or (x==0 and y==1): continue "}, "280": {"problem_id": 3280, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import defaultdict,deque\nsys.setrecursionlimit(2*10**5)"}, "281": {"problem_id": 3281, "answer": "# your code goes here\nfrom sys import stdin\ninput=stdin.readline\nR=int(input())\nfor i in range(R):\n X,Y=list(map(int,input().split()))\n D=abs(X-Y)\n E=[0]*R\n for j in X: E[j]=max(0,min(D,j+X[-1]))\n\n E.sort(key=lambda x:x[0])\n\n X=[(Y[i],0)]\n Y=X.copy()\n y=sum(E[:R])\n x=y[R]\n z=z[D]\n\n if x<0 or x>=0: print('impossible')\n elif y>0 and y<R and z<D: \n  X.append((y,z))   # (x,y) = max angle\n else: # y < 0 and x >= 0: y[x] = 0, x = x-0\n # z = X[y] + Y[z] - x\n Z=Z[:-R-D-2] # minimum distance to reach destination\n R=len(Z)-1\n d=R+d\n if D<=L and Z[L]==-L: d+=1 # D > L > D\n print(d,end=\"\\n\")\n"}, "282": {"problem_id": 3282, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(a*b)\nprint(max(0,l[-1]))"}, "283": {"problem_id": 3283, "answer": "# cook your dish here\nn,d,r=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().strip()])\nprint(a[r-1][1])"}, "284": {"problem_id": 3284, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n  a,b,c,d=list(map(int,input().split()))\n\tif(a<b and c<d and b<c and a%c==0 and (b-a)**2+c<=d):print((a-b)//(c-d))"}, "285": {"problem_id": 3285, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(a[i]*(i+1)//2)\nprint(s[-2])"}, "286": {"problem_id": 3286, "answer": "from collections import defaultdict as dd\nimport bisect as bi\nn=int(input())\nl=list(map(int,input().split()))\nmod=10**9+7\nfor i in range(len(l)-1):\n if l[i]==\"a\":\n  print(1)\n elif len(set([c for c in l]))==1 and (l[:i+1])%mod==0:print(n//(mod-1)*(2*n),i)"}, "287": {"problem_id": 3287, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nmod=pow(10,9)+7\nfor i in range(n):\n\tl[i]%=mod\nprint(sum(l))"}, "288": {"problem_id": 3288, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(2147483647)\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\nDICT = {'a': 0, 'b': 1}\nN = int(input())\nfor _ in range(N):\n\tk,n = list(map(int,input().split(\" \")))\n\n\tif k==1: return ''.join(list(dict.fromkeys(['a','b']) for _,i in enumerate(n) if i!='a' and i not in DICT.keys()) for j in [1<<i] + [0<<j]*k+[0])\n"}, "289": {"problem_id": 3289, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=[]\nfor i in range(n):\n a.sort()\n c.append(a[n-1]*b[i])\nprint(c[0])"}, "290": {"problem_id": 3290, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nd=[]\nfor i in range(n):\n\td.append(a[i])\nif a[0]==\"K\" or d==[]:\n  \tprint(-1)\nelif len(set(d))==1 and d[1]!=d[2] and a.count(K)>=3:print(0)"}, "291": {"problem_id": 3291, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(20000)\nfrom collections import defaultdict,deque,OrderedDict  import deque\n \nn = int(input())\na = list(map(int,input().split()))\ncnt = [0 for _ in range(n)]\ndp = [[0] * (n+1) for i in reversed(list(range(1,n + 1))) if a[i] == 0]\nans = []\ndef dfs(idx):\n\tans.append(dfs(0) + dp[-i])\nif idx == len(set(a)): return 0\nfor ai in cnt: print(ai)"}, "292": {"problem_id": 3292, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nd={}\nfor i in range(n):\n if(l[i]==\"V\")and(d.get(i,0)+1<=i and l[n-i-1]!=\"A\"): \n  d[\"V\"]=1\n else:d[l.pop(0)]=\"B\"\nans=0\nif(ans==1):print(1)\nelse:print(\"2\")"}, "293": {"problem_id": 3293, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n l=list(map(int,input().split()))\n if(l[0]==1):print(0)\n else:print('0')"}, "294": {"problem_id": 3294, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.sort()\n x=l[0]*(2*i+1)\n y=-10**6\n if(abs(x-y)<=2.0000e+100): \n  print(\"1\")\n elif((x+y)*2**0.5)%2==0 and (x*-1)*(y-x)>=9.999999999999 and ((y+x)*4**2)==3.000000000000007 and l[-2]!=0:print(\"2\")"}, "295": {"problem_id": 3295, "answer": "for _ in range(int(input())):\n k, l, m = list(map(float, input().split()))\n print(k)\n"}, "296": {"problem_id": 3296, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n\tl.append(str(i)*k)\nprint(len(l))"}, "297": {"problem_id": 3297, "answer": "from itertools import permutations as p\nimport numpy as np\ndef factorial(n): \n return n * (n - 1) / 2\np = np.array(list(map(int, input().strip().split())))\nfor _ in range(100):\n n = int(input())\n if n == 0: print(0)\n elif n % 2!= 0 and n // 2 in list(p.values()): print((n//2) * p.sum(axis = 1))\n else:   print('Impossible')\n"}, "298": {"problem_id": 3298, "answer": "# cook your dish here\nimport heapq\nn = int(input())\na = list(map(int, input().split()))\narr = [0] * (n+1)\nfor i in range(n):\n\tarr[a[i] - 1] = i\nans = 0\nstack = []\nwhile stack and arr[stack[-1]] == 0: stack.pop()\nprint(ans + 1)"}, "299": {"problem_id": 3299, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn,m = list(map(int,input().split()))\n\n\tc = [0]*(n+m+1)  # Initialize the parity of row\n\n \tif n%2 == 1 and c[1] in [1,2]:\n  \n"}, "300": {"problem_id": 3300, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n t,v=list(map(int,input().split()))\n l.append(t)\nr=[0]*n\na=0\nb=n-1\nwhile a<=r[r.index(max(l))+1]:\n a=a+b\n b=b-a\n print(b)"}, "301": {"problem_id": 3301, "answer": "# cook your dish here\ndef gcd(a,b):\n if b==0:return a\n elif a==b: return b\n else: \n  if (a>b) or (b<a):return gcdd(b,a-a)\n for _ in range(int(input()))[::-1] : a=list(map( int,input().split() ))\n a.reverse()\n m = int( input() )\n x,y,z = list(zip(*y))\n ans = m+x*y*z\n print( (m+1)//2 - (x)*(z-y) )"}, "302": {"problem_id": 3302, "answer": "n,p=list(map(int,input().split()))\ns=set(input())\nl=[]\nfor i in range(n):\n\tl.append(s[i-1])\nans=[0]*len(l)\nflag=0\nm=10000000000\nwhile(m<n and l[m] not in s and flag==0):\n\n\tif m<=n:   m=m*2**n+m\n#\t\tans[0]=1  if ans[1]>1 else 0  else -1;  print(ans.count(1)); print()\n \tm+=1 ;  l.pop(0)  #  0-indexed\nprint('\\n')\n\n"}, "303": {"problem_id": 3303, "answer": "#include <stdio.h>\r\nint main(){int n=0,m=10**6,ans=[];ans[0]=1;for i in range(1,n+1){printf(\"%d\",(i*(m-1))//2);m*=i;ans.add(0);printf(((n-i)*2)%m,i,(int)((2*i)**0.5)+1));printf(str(\"\\n\");for j in ans[i]{};i=int(input()));{int s[1];int t[2];constant=s[j]*t[3];if(j==0){break;}while(s!=t){s--;t-=;};};int minSumOfTwoNumbers;int maxSubtractDigits=100000;constANT=1e9;=gcd(a,b);a=a*a;b=b*b;a//=2;if (a<10)return 0;else{m=(m+a.sofar-b)-(10*max(ans,0))*((-a-10)*(b+10))/2.0;maxSum=minSum+(a+maxum));maxSubts=maxMinSum;{},max=[0]}(){main();max[m]=(-m);max.sort(reverse=True);min(max,max)\nfor (int i=n; i<m;i++)\n{\n   printf(\"{}\",i);break;\n}"}, "304": {"problem_id": 3304, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\np = [0] * (n + 1)\nfor i in range(n):\n  p[a[i] - 1] += 1\nanswers = []\nmax_strengths = 0\nb = [-1] + [p[-1]] * n + sorted(a, key = lambda x: x[1], reverse = True)]\nif max(b) == 0: ans = -1\nprint(ans)"}, "305": {"problem_id": 3305, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append(chr(65+ord('a'))+int(i+'0'*(k-i-1))%26)\nprint(*s,sep='\\n')\n"}, "306": {"problem_id": 3306, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(m):\n p=int(input())\n a.append(p)\nc=a[0]\ni=1\nwhile i<=n-1 and a[i+1]!=p+c:i+=1;c-=i\nprint(i)"}, "307": {"problem_id": 3307, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n-1):\n a.append(a[i] + [0]*(i+1)) \nabice = [-1] * (n+2)\ncnt = [abs(b[0]) for b in abice]\nwhile cnt[-2] > 0:  # \u6bd4\u8f83\u6bcf\u6b21\u90fd\u52a0\uff0c\u53ef\u4ee5\u81ea\u5df1\u628a\u90a3\u4e2a\u957f\u5ea6\u6392\u5230\u67d0\u79cd\u7ec4\u6210\u7684\u6570\u5b57\n  b.pop(0) "}, "308": {"problem_id": 3308, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n x,y=list(map(int,input().split()))\n p=x+y\n a=p/x\n ans=0\n c=1\n while(c<=abs(p-x) and a!=-1 and p>0 and x>y): \n  ans+=(c*(x-y)//2)\n print(ans)"}, "309": {"problem_id": 3309, "answer": "# cook your dish here\nfrom sys import stdin, stdout\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n\n  \n############ ---- USER DEFINITIONS ----##\nreader = lambda: (lambda: int(input())): (int)(input().rstrip()),\n\treader()\n\n\tdef user_fixed_args(user_name, arr): return [arr[i] for i in range(0, len(arr)) if reader()]\n#########################\nn, k = LI()\na = [int(x) for x in inputs.split(' ')]\nfor i, (x, y) in enumerate(itertools.groupby(a, key=lambda x: -x[1], take=1)):\n  print(k-a[y])\n"}, "310": {"problem_id": 3310, "answer": "# cook your dish here\nimport bisect\nfrom heapq import heappush,heappop\nn = int(input())\ng,t = [int(x) for x in input().split()]\nl = []\nfor i in range(n):\n  l.append(list(map(int, input())))\nx = sorted(l, key=lambda x: x[1])\nans = 0\ni = 1\nwhile i*(i+1)<=x[0][0] and i<n-1 and l[i][1] < x and (i==0 or i>=g) :\n\tans += bisearch(0, x)\nprint(ans)"}, "311": {"problem_id": 3311, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(m):\n a.append([int(x) for x in input().strip()])\nprint(a[0])"}, "312": {"problem_id": 3312, "answer": "# cook your dish here\nn,e,s,x,y,CT = list(map(int,input().split()))\ngrid = []\nfor i in range(n):\n xi,xi,yi,c,t = [int(x) for x in input()]\n grid[xi][yi] = 1 + c*(xi-1)*(yi+1)//2\nprint(sum(grid))"}, "313": {"problem_id": 3313, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n n,r,w,h=list(map(int,input().split()))\n velocity=abs(r-w)\n v=math.sin(velocity) \n print(n+1-r+w-h)"}, "314": {"problem_id": 3314, "answer": "# cook your dish here\nfrom collections import Counter\nimport sys\ndef input(): return sys.stdin.readline().strip()\nsys.setrecursionlimit(10**6)\nmod = 10**9 + 7\nINF = float('inf')\nIIN = lambda:int(inp())\nMOD = int(1e9)+7*(mod-2) + IIN() if mod>2 else 0\nprint(min(MOD))\n"}, "315": {"problem_id": 3315, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(ord,input().split())))\nprint(len(l))"}, "316": {"problem_id": 3316, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n ans += a[i-1]\n print(ans)"}, "317": {"problem_id": 3317, "answer": "# cook your dish here\nimport bisect\nfrom collections import defaultdict\nfor _ in range(int(input().strip())):\n i, j = list(map(str, input().split()))\n list1 = []\n for c in input():\n  if c.upper() == input()[-1][0] and len(set(list1))!= 2 and (i == j or i == -1 or j == i) and list2[i - 1]!= \" \" and i!= j and j!= i and lst[j][c.lower()].count(c)!= 1:   print(lst.pop(), end=' ')\n print('\\n'.join(lis))"}, "318": {"problem_id": 3318, "answer": "# cook your dish here\nn,d=map(int,input().split())\na=[]\nfor i in range(n-2):\n x=int(input())+1 \n a.append(x)\nif(a[0]==0 or a[1]!=0):a.pop()\nprint(0)"}, "319": {"problem_id": 3319, "answer": "# cook your dish here\nn,p=list(map(int,input().split()))\nm=21*(n+1)\ngrid=[[-1 for i in range(21)]for jin(m,n)]\nfor i,j in enumerate(grid):\n grid[i][j]=(j+p)*grid[j][i]\nv=[]\ndic={}\ndef dfs(u,v,r,c,d,t):  \n if u==p or v==d or r==c or c==r or d==u or t==v or (u==0 and v!=d) :\n  if r>c and r<d : d=r\n elif u>d and u<r : r=c\n else : c=u\n dic[u][v]=i\ndfs(0,0,[1,-1],[0,-2],[p,1])\nprint(p) "}, "320": {"problem_id": 3320, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n-1):\n\ta.append(b[i+1])\n#print(a)\nc=a[0]\nd=0\nr=b.count(0,0)\t\t# \u8fd9\u4e2a\u8282\u70b9\u6709\u591a\u5c11\u53ef\u4ee5\u52a8\u601d\u8def\uff0c\u56e0\u4e3a\u53ea\u80fd\u52a01\u56de\u5230\u76f8\u540c\u7684\u8868\u793a\u6700\u5c0f\u9664\u975e\u5bf9\ufffd\u540e\u7ffb\u8272\u7684\u72b6\u6001\nans=min(r,c+d,r-c,d-r)   # \u957f\u5ea6\u8ba1\u7b97\u503c\nprint((ans))"}, "321": {"problem_id": 3321, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nans = [arr[i] for i in range(n)]\nprint(''.join(ans))"}, "322": {"problem_id": 3322, "answer": "# cook your dish here\nfor _ in range(int(input())):\n n,m,k=list(map (int,input().split()))\n a,p,b,q,ca,co,cb,cx,cd,ce,d,e,di = 0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,117,118,119,123,124,125,126,127,128,129,132,130,140,141,144,145,146,147,148,149,160,161,162,164,165,166,167,168,169,180,184,189,190,191,194,196,198,199,200,203,204,205,206,207,208,209,211,212,223,227,228,229,232,233,234,235,236,237,238,239,241,242,253,244,254,255,256,257,268,269,271,274,281,283,293,307,311,313,314,316,317,326,327,328,332,383,384,389,400,404,406,407,408,409,410,411,613,416,418,426,433,440,441,444,446,447,448,449,457,461,462,463,464,466,467,469,479,480,487,488,489,490,494,496,509,514,515,518,231,353,355,359,361,537,640,641,644,647,660,653,659,661,668,669,688,689,690,694,695,696,697,698,699,700,701,702,703,806,808,911, fusionados, fernes, fishes, pisos, octoples, areas, sardines, niamonds, ciudad, desertations, dimes, days, months, years, tens, zeroes, 1000s of dollars, decimal digits, floats, 1. decimal representation of an anticoamentoS\n if n==m and k==a and a==p and b==q and c=di and d=ce and e=di: print(-1)"}, "323": {"problem_id": 3323, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n s=input()\n n=len(s)\n if(n%3==0 and s[n//3] in [1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,67,71,73,79,83,89,97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 237, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397) :\n \n print(0)"}, "324": {"problem_id": 3324, "answer": ""}, "325": {"problem_id": 3325, "answer": "import math\nt=int(input())\nfor i in range(t):\n n,m=list(map(int,input().split()))\n a=math.sqrt(n*n+m*m)\n print(a/2)"}, "326": {"problem_id": 3326, "answer": "# cook your dish here\nfor _ in range(int(input())):\n x,y,z = input().split()\n n = int(x)\n c = list(range(1,n))\n d = {}\n for i,j in enumerate(c,1):d[i] = d.get(i,0)+1\n ans = 0\n print(ans)"}, "327": {"problem_id": 3327, "answer": "R,C=list(map(int,input().split()))\nans=[]\nfor i in range(R):\n ans.append(str(i)+' '*C)\nprint('\\n'.join(ans))"}, "328": {"problem_id": 3328, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(min(l))"}, "329": {"problem_id": 3329, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(0,n):\n a.append([int(input())-1,i])\nprint(len(set(a)))\n"}, "330": {"problem_id": 3330, "answer": "n,l = map(int,input().split())\r\na = [int(i) for i in input().strip()] + [0]*(l+1)\r"}, "331": {"problem_id": 3331, "answer": "a = int(input())\nb = list(map(int, input().split()))\nc = 0\nwhile c < b[0]:\n c += 1\n b.remove(0)\n a, b = b, a\nprint(c)"}, "332": {"problem_id": 3332, "answer": "t=int(input())\nwhile(t>0):\n t-=1\n a,b,c,p=list(map(int,input().split()))\n d,e,f=0,1,0\n while(e<e and p<puse) and (a+b+c)<=d and ((p+e)%2)==0 and f<fuse and d==1 :\n  print(max(c+((p-1)//2),((e-f)+(e+f)*2)))\n"}, "333": {"problem_id": 3333, "answer": "# cook your dish here\nimport math\nn=int(input())\na=list(map(int,input().split()))\nm=math.floor(n/2)\nans=0\nfor i in range(1,n+1):\n ans+=a[i]*m\n if ans<=10**6: ans=ans-2\n print(ans)"}, "334": {"problem_id": 3334, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n ans=abs(a[0] - a[1])\n print(ans)"}, "335": {"problem_id": 3335, "answer": "# cook your dish here\nimport math\nn=int(input())\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n c=math.gcd(c,a+b)\n if c!=1 and c%3==0 or c==1:print(0)"}, "336": {"problem_id": 3336, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n a = list(map(int, input().split()))\n if a[0] == \"F\":\n  print(3)\n elif \"M\" in a and \"B\"in a: print(\"M\", end=\"F\")\n else:print(\"F\",end=\"M\")"}, "337": {"problem_id": 3337, "answer": "# cook your dish here\nn=int(input())\ns=[]\nfor i in range(n):\n s.append(list(map(int,input().split())))\nprint(len(s))"}, "338": {"problem_id": 3338, "answer": "# cook your dish here\nn,k=map(int,input().split())\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().rstrip('\\n').split()])\nans=max(a)\nprint(ans)"}, "339": {"problem_id": 3339, "answer": "# cook your dish here\nn, m = map(int, input().split())\na = [0 for i in range(n+1)]\nb = []\nfor i, x in enumerate(a):\n  if x%2 == 1: b.append(i)\nans = 0\nused = set()\nif len(b) % 2 == 0: ans += b[-1]\nprint(ans)"}, "340": {"problem_id": 3340, "answer": "n=int(input())\nl=[]\nfor i in range(n):\n a=list(map(int,input().split()))\n l.append(a[0])\n#print(l)\ncnt=0\ni=1\nwhile i<n-1 and l[i][0]<=l.pop():\n i+=1 \n if i>=2 and (l[(i+1)%2] in [0,1,2]) or (i==2) :\n  print(3*((i-2)+1-i)//2, end=\"\")\n elif i==3:   # i=3, j=i, k=j, l=a, c=b\n"}, "341": {"problem_id": 3341, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nn = int(input())\nM = [int(x) for x in input().split()]\nfor i in range(n):\n M.append(M[-1] - M[i])\nans = []\nmax_m = 0\nmin_cnt = -1\nwhile len(ans) > 0:\n\n ans.sort(reverse=True)\n\n max_max = max(0, ans[0][0])\n\n min_min = min(\n   0, (n+1)//2\n )\n #print ans\n ans = ans + [0] * (max(max, min))\n print(sum(map(lambda x: x[1], ans)))\n"}, "342": {"problem_id": 3342, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in range(0,n):\n   ans+=l[i]\nprint(ans)\n"}, "343": {"problem_id": 3343, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(l[0]+1):\n if a[i-1]*90+1==a[-2*i]:\n  a.append(i)\nprint(\"\")"}, "344": {"problem_id": 3344, "answer": "# cook your dish here\nn,l=list(map(int,input().split()))\na=[]\nfor i in range(n):\n x=int(input())\n a.append(x)\nv=a.index(max(a))+1\nif(abs(v-v)>=2*(10**9-1)): \n print(0)\n\n"}, "345": {"problem_id": 3345, "answer": "# cook your dish here\nimport math\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n a.append(math.ceil(i/(10**5)))\nc=0\nd=abs(b[0])\nwhile(c<n-1 and b[c+1]<a[d][0] and d!=a.index(d)-1 ):\n c+=1\n b.pop()"}, "346": {"problem_id": 3346, "answer": "# cook your dish here\nfrom collections import defaultdict\nfor _ in range(int(input())):\n t,n = list(map( int,input().split()))\n a,r = [],[]\n for i,(d,w) in enumerate(zip(t,t[1:],list(range(n,10)))) :\n  a.append(max(a)-r)\n ans = float('-inf') \n dist = {}\n flag = False\n if len(set(dist.keys()) & dist[0]) == 1 : flag=False\n d = {k:v for k,v in sorted([(v,d.get(k,0)) for v in dist.values()])}\n # d[k] = 0 means it's not possible to travel to the left and right\n print(min(flag,ans))"}, "347": {"problem_id": 3347, "answer": "n = int(input())\r\nt = [int(x) for x in input().split()] + [(t[0], t[1]) for t in t + [list(map(int, input())) for _ in range(n)] + [[0]*(2*n+1)] for i in [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 432, 436, 607, 630, 1009, 1123, 125, 129, 130, 144, 155, 171, KK, 183, 185, 187, 202, 205, 207, 209, 210, 213, 215, 214, 225, 226, 234, 235, 236, 237, 238, 243, 245, 247, 256, 255, 261, 273, 285, 291, 294, 296, 298, 299, 310, 319, 322, 326, 387, 400, 403, 453, 481, 523, 5006, 5027, 5436, 55455, 52972, 52642, 45701, 55577, 458426, 57647, 62162, 58607, 69583, 81362, 86999, 92663, 102903, 108989, 112110, 116113, 117149, 118597, 121217, 124289, 128807, 132144, 133243, 142373, 147605, 152729, 163871, 170754, 181270, 190224, 202953, 214435, 220587, 2242252, 252071)]\ns = sum(t)\nprint(s)"}, "348": {"problem_id": 3348, "answer": "# cook your dish here\nn,c=list(map(int,input().split()))\narr=[]\nfor i in range(0,n+1):\n arr.append(i*3+arr[i])\nprint(*arr)\n"}, "349": {"problem_id": 3349, "answer": "n = int(input())\nwords = []\nfor i in range(n):\n words = list(map(str, input().split()))\n if len(words[0]) == 1: \n  print(' '.join([' '] * (len(word) + 1)) + '\\n')\n elif words[-1][0] == 'A' and word[:-1]!= 'L': \n\n  for w in words: print(w, end=' ')\n else: pass\n"}, "350": {"problem_id": 3350, "answer": "# cook your dish here\nx=input().split()\nn=len(x)\nc=0\nfor i in range(n):\n if x[i]!=x[n-i-1]:\n  c+=1\nprint(c)"}, "351": {"problem_id": 3351, "answer": ""}, "352": {"problem_id": 3352, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nfor _ in range(n):\n\tx,y,z=[int(i) for i in input().strip()]\n\n\tif x==1 or y==0 or z==2 or (x==3 and y>0 and x%2==(y>1) or x!=1 and (y==4 and z>2)) or ((x-4)*(x+4))%1000000007:=0:z=k:x=2*k+3*(k-2)*x*x;z+=1;k+=2;x+=4;y-=3;(z-k)*y*y;print(0)\n\n"}, "353": {"problem_id": 3353, "answer": "P, R, L = map(int, input().split())\nans = min(P+R+L)\nprint(ans)"}, "354": {"problem_id": 3354, "answer": "# cook your dish here\nn,z=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n l.append(sum(l[-1])*z//2)\nprint(max(z%10,0))"}, "355": {"problem_id": 3355, "answer": "# cook your dish here\nn, t = map(int, input().split())\nl = []\nfor i in range(n):\n   p = list(map(lambda x:int(x)-1,input().strip()))\n\n  l.append(p)\nt = max(l) - t\nans = [0]*n + [\"0\"]*t\nwhile t > 0 and l[t] <= n + 2: t -= 1\nprint(t - ans[0])"}, "356": {"problem_id": 3356, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nans=[]\nfor i in range(1,n+1):\n a,b=l[i]\n ans.append(a+b)\nprint(*ans)"}, "357": {"problem_id": 3357, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n x,h=list(map(int,input().split()))\n l.append(x*(h-1)/2)\nprint(l[0])"}, "358": {"problem_id": 3358, "answer": "# cook your dish here\nn=int(input())\nprint(n)\n"}, "359": {"problem_id": 3359, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nn, r, c = list(map(int, input().split()))\np = [[int(x) for x in input()] for _ in range(n)]\nfor i, a in enumerate(p):\n p[i][0] = a\nx = -1\ny = 0\nwhile x < n-1 and y < (n+1)//2 :\n x = (x + y) >> 1\n y += x\nprint(y)\n\n"}, "360": {"problem_id": 3360, "answer": ""}, "361": {"problem_id": 3361, "answer": "from fractions import Fraction\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n\tn=int(eval(f'{1}-{2:b}')[2:]+eval('0'*(n-1-i) for i in input().rstrip().split(' '))[1:])\n\n\tgroups = sorted(list(map(lambda x: x[i]*x[j] for j in [i+1,i])), key=lambda k: k[0])[:n] = {(0,0): 0}\n#\tprint(groups,groups[n//2])\n"}, "362": {"problem_id": 3362, "answer": "# cook your dish here\na,b=map(int,input().split())\nprint('YES' if a>b else 'NO')"}, "363": {"problem_id": 3363, "answer": "n,m = list(map(int,input().split()))\ncourses,calc = 0,0\nfor i in range(n):\n if i%2 == 0 and (i-1)*(i/2) > 0: c = (c + (2*i) - 1) * (n-i+1)\n elif i % 2 == 1 and i / 2 < 5: \n  c += (3*n - i) / (5*m - m*(5+i)) * 100\n else: break\n print(c)"}, "364": {"problem_id": 3364, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b=map(int,input().split(\" \"))\n if(a%2==0):print(\"no\")\n else:print('no')"}, "365": {"problem_id": 3365, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,k=list(map(int,input().split()))\n a=[0]*(k+1)\n ans=a[k-1]\n i=0\n while(i<n and a[i]==0):i+=1\n print(ans)"}, "366": {"problem_id": 3366, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n  a.append(0)\nb=0\nk=1\nwhile(k<=a.count(1)) and a[k]==0:k+=1 \nprint(b)"}, "367": {"problem_id": 3367, "answer": "t = int(input())\nfor _ in range(t):\n a,b = list(map(int,input().split()))\n n = len(a)\n if n%2 == 0: \n  print(\"! \"*(n//2)+\"$\")\n elif n/2!= a[a.count(\"\\n\"):] and n > 9:print(\"!\"*((n-9)*2)+(a[b]*2))"}, "368": {"problem_id": 3368, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=input()\nb=[]\nfor i in range(n):\n b.append(a.split()[-1] + int(b[i][0]=='0'))\nprint('FAK KATA' if a.count('0')>1 else 'Impossible')"}, "369": {"problem_id": 3369, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nn = int(input())\nseq = [int(i) for i in input().split()]\nl = len(seq)\ncnt = 0\nfor i, x in enumerate(l):\n if seq[i] == x: cnt += 1\n elif x % 2 == 0: \n  if x > seq.index(x)[0] - 1: break\n else: x //= 2\n\n if i < l-2 and x!= seq: print(' '.join(map(str, seq)))\n for j in range(2, i+1, 2): print(j, end ='')"}, "370": {"problem_id": 3370, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append(abs(l[i] - l[l.index(max(s))]) + 1)\nans=0\nd=s.pop()\nwhile(d>0 and s[d-2]<s[0]):\n\n  ans+=1\n  d-=2\nprint(ans)"}, "371": {"problem_id": 3371, "answer": "#dt = {} for i in x: dt.setdefault(i)\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda:list(map(int,input().split()))\nn = inp()\narr = [-1] * (n+2);\nfor _ in range(n-1):\n\tarr[ip()] = 1 if ip() else -1;\nans = [0] + arr[0];\nout = \"\"\ni = 0\nwhile i + 1 < n - 1 and out[i] =='': i += 1\nif i % 2 == 0: out += '\\n'\nprint(out)"}, "372": {"problem_id": 3372, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\ns = 0\nt = n\nfor i in range(0,n):\n if arr[i] == '0':\n  s += 1 \n elif s < 0 or s > n-1 or (s-n)%2 == 0 and (n-s)//2 <= 0.00001 and s>0 and t!= 0:\n\n  print(min(s,t))"}, "373": {"problem_id": 3373, "answer": "import sys\nfrom collections import Counter\ndef f(s):\n  return sys.stdin.readline().rstrip()[:-1]\nfor _ in range(int(f(1)**0.5) for f in f().split('\\n'))[1:]:\n s = '()'\n ans = ''\n for i in sorted(list(map(len, s.split())), key=lambda x: x[0], reverse=True): ans += str(i)\n print(ans)"}, "374": {"problem_id": 3374, "answer": ""}, "375": {"problem_id": 3375, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nmod = 10**9+7\nfor i in range(1,n):\n a[i] = (a[0]*(i+1))%mod\nprint(sum(a))"}, "376": {"problem_id": 3376, "answer": ""}, "377": {"problem_id": 3377, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\np = [0] * n\nfor i in range(n):\n\tp[l[i] - 1] = i\nc = 0\nwhile p[c]!= -1 and c + 1 <= n - l[p.index(c):] : c += 1 \nprint(-1)\n"}, "378": {"problem_id": 3378, "answer": "# cook your dish here\nn,d=list(map(int,input().split()))\na=[input() for i in range(n)]\nm=int(input())\ns=[0]*n\nt=[]\nfor i,j in enumerate(a):\n  s[i-1]=j+'O'\nj=0\nk=1\nwhile j<n-2 and t[j-k]=='R':j+=1;\nif j==0:k+=2\nprint(k)\n"}, "379": {"problem_id": 3379, "answer": "from collections import defaultdict\nimport heapq\nclass DijkstraTree():\n  def __init__(self, graph, n, edges, node=None, outgoing=False, queue=lambda x: x[0], queue_len=queue, heap=heap):\n# \tself.n, self.edges = len(graph[node]) + 2 * (node or 0) + 3 * n + 6 * m, \n\t\tgraph = [defaultdict(list) for _ in range(len(map(int, input().strip().split()))) if map(float, list(zip(*graph)))]\n\n\t# build the adjacency list for the given node. if node is None, it is added to the queue. otherwise, we add another node that has already been added. add_node() starts from the start of our queue and adds a node to it that we want to connect to if we have a path to reach that node otherwise it takes too long for our result to be reachable through any other nodes that are not yet added yet (eg, `nodes[:2]` in Python). we don't care about nodes not being added, as we know they are already connected.\n\n  @property\ndef node(node): return any([node is node], default=float('{}'.format(''.join(edge(i, j)) for i, edge in enumerate(reversed(nei)) if edge not in edge_ ))\n\n\n\n"}, "380": {"problem_id": 3380, "answer": "# cook your dish here\nn = int(input())\na = []\nfor i in range(n):\n a.append([int(x) for x in input().split()])\nprint(a[-1][0])"}, "381": {"problem_id": 3381, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(*l)"}, "382": {"problem_id": 3382, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n print(24)"}, "383": {"problem_id": 3383, "answer": "n = int(input())\r\narr = [int(x) for x in input().split()] + [list(map(int,input().strip())) for _ in range(n)] + arr[0]"}, "384": {"problem_id": 3384, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n s=input()\n p=s.count(s)\n if(len(p)>1 and p[-2]=='1' and abs(int((p[0]-s[1])/2))>=2): \n  print(\"2\")\n elif(abs((s-p))<0): print(0)"}, "385": {"problem_id": 3385, "answer": "n = int(input())\r\na = [int(i) for i in input().split()] + list(range(n)) + [0] * (n - 1) + [(a[i] % 2) % (2 * pow(2, n - 2, 2))]*(pow(10, 9, p) - 7)"}, "386": {"problem_id": 3386, "answer": "# cook your dish here\nn,m=map(int,sys.stdin.readline().split())\nfor i in range(n):\n\ta=[int(x) for x in str(i)][i<n-1-m]\nans=[]\nx=[0]*(m+2)\ndef dfs(row,col,arr,x,y):\n\n\tif x[row][col]!=y[col][row] and (row<=n and col>=m and y[x][y]==0 and x!=(row+y) or x==[0][0]) or (x[1]<row and row!=-1 or col==n) and ((row-row)%2==(col-col)) or ((x-x)*3==x*3):ans.append((row*2+3*4+5*6+7*8+9*10+11*12+13*14+15*16+17*18+19*20+21*23+24*25+26*27+28*29+30*31+32*34+34*36+36*37+38*39+39*44+44*46+46*47+48*49+50*53+54*55+57*59+61*61+63*64+67*66+69*68+73*69+76*76+77*77+78*78+79*79+80*80+81*82+84+85+86+87+88+89+90+94+95+96+97+98+99+100+101+103+104+105+106+117+114+116+147+149+151+153+160+161+162+163+165+167+169+183+187+185+389+391+397+409+419+441+443+449+457+461+463+467+479+487+491+499+503+509+rarily+573+577+587+590+593+607+613+617+641+643+654+655+653+660+661+673+181+184+229+233+239+253+257+263+265+269+279+271+287+289+293+303+347+ocally+299+ffiti+307+331+340+344+349+359+367+373+377+379+385+395+407+427+399+426+431+433+439+460+464+469+473+489+493+494+500+512+588+594+600+619+060+069+131+136+137+139+140+141+143+144+177+180+199+191+251+217+230+223+224+231+227+274+298+313+336+339+343+357+380+394+164+179+198+220+221+23*A*B*C*D*E*F*G*H*I*J*K*L*M*N*O*P*Q*R*S*T*U*V*X*Y*Z\ndp=[[0,0],[0,-1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,8],[9,10],[10,11],[12,12],[13,14],[14,15],[15,16],[18,19],[19,20],[21,23],[24,25],[32,33],[33,34],[44,46],[45,47],[48,49],[50,52],[53,54],[56,57],[60,60],[64,64],[65,65],[66,66],[67,68],[68,69],[70,71],[72,72],[73,73],[74,76],[75,77],[76,78],[79,80],[80,81],[81,83],[84,88],[88,90],[90,94],[94,110],[110,115],[115,127],[129,129],[127,140],[140,141],[141,144],[145,146],[146,160],[160,164],[164,171],[171,177],[177,180],[185,181],[188,189],[189,191],[20,200],[200,202],[202,207],[209,211],[207,213],[213,235],[235,266],[336,360],[368,348],[400,426],[426,433],[433,439],[439,443],[444,448],[448,457],[459,461],[464,463],[466,480],[480"}, "387": {"problem_id": 3387, "answer": "# cook your dish here\nn,t=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append(t*(abs(i-a[0])))\nprint(\" \".join(a))"}, "388": {"problem_id": 3388, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n b.append(a[i]*2+b[-1])\nc=0\nd=a.count(0)\nprint(c)"}, "389": {"problem_id": 3389, "answer": "# cook your dish here\nimport bisect\nfrom functools import reduce\ndef __starting_point():\n \n n = int(input())\n l = list(map(int, input().split()))\n dp = [[0 for i in range(n+1)] for x in l]\n # print(dp[0][0])\n count = 1\n ans = 0\n while count < n:\n\n  if count % 2 == 0: ans += 1; count /= 2; break;\n elif count == 2: break\n print((ans-1) + 1)\n"}, "390": {"problem_id": 3390, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ns=0\nfor i in range(1,n+1):\n  s+=l[i]\nprint(s)"}, "391": {"problem_id": 3391, "answer": "from bisect import *\nt = int(input())\nfor _ in range(t):\n a,b = list(map(int,input().split()))\n l = []\n for i,a in enumerate(a): \n  l.append((a[i] + 1,i+1) if i > 0 else 0)\n print(*l)"}, "392": {"problem_id": 3392, "answer": "#dt = {} for i in x: dt[i] = dd.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :list(map(int,input().split()))\nMOD = 10**9+7\nfrom functools import lru_cache\ndef resolve(s,i=0,j=1):\n  if s == 0: return 0; d = [[] for _ in range(2*s+1) if i % 2 == 1 and (s-i)%2!= 0]; d[j].append(j+i-1); i = 1; j = -1; continue; i *= 2; while i <= s and j <= i*2: s-=i%i; res = (i*i+j*j)//2; print(res); return res\ndp = [0]*(10**6+3)\nwhile dp[ip[0]]!= '0' and i < len(dp) and ip[1] == '1' : ip.pop(0) ; i+=2\nresolve(pow(6,2) + 1, 1)"}, "393": {"problem_id": 3393, "answer": "n,k=map(int,input().split())\nd=[0]*n\nfor i in range(0,n-1,2):\n d[i]+=1\n print(d[n])"}, "394": {"problem_id": 3394, "answer": "n, m = list(map(int, input().split()))\nroad = []\nk = 0\nfor _ in range(n):\n\ts, u, t = road[int(input()[0])] + 1, 0, 10**8\n#   print(s + u + t)\ncost = [0] * (n + 2)  # \u533a\u9593\u53f3\u307e\u3067\u306e\u8ddd\u96e2: \u3053\u308c\u4ee5\u4e0b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u63a2\u7d22\u3057\u3066\u304a\u3051\u3070\u826f\u3044: \u8cea\u554f\u306b\u3064\u3044\u3066: \u756a\u9802\u70b9\u3068\u307f\u306a\u3044\u3068\u304d\u3063\u305f\u3089(cost[u] > cost[t])\nprint((len(road)))\n"}, "395": {"problem_id": 3395, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n a,b=l[i]\n l.remove(b)\nif(a==1 or b==2 or l[-1]==a or a!=b or (b==0 and a>1 and b<=a) ):\n print(0)"}, "396": {"problem_id": 3396, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n x,y=list(map(int,input().split()))\n rope=math.sqrt(x*x+y*y)\n print(round(sum(1 for x in rope if x!=0)))\n"}, "397": {"problem_id": 3397, "answer": "# cook your dish here\nn, m = map(int, input().split())\na = [0] * (n+1)\nfor i in range(n):\n  a[i] += 1\nx = (a[-1] + 1) // 2\ny = m // x\nz = n // y\nprint(min(z, y, z))"}, "398": {"problem_id": 3398, "answer": "#!python\nimport sys\nsys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().rstrip()\nfrom heapq import heappush,heappop\nINF = float('inf')\nmod = 10**9+7\ndef II(): return int(input().strip())\nd={}\nfor _ in range(II()):\n\tn1,n2= II()\n\n\tif n1<=0 or n2<0: print(\"Invalid Input\")\n \tprint(max(map(int,input())))\n"}, "399": {"problem_id": 3399, "answer": "# cook your dish here\nn, m = map(int, input().split())\ngrid = []\nfor i in range(m):\n n = int(input())-1\n l = list(map(str, l))\n if l[0] == 'B':\n  print(grid)"}, "400": {"problem_id": 3400, "answer": "# cook your dish here\nn, a, r, t = map(int, input().split())\r\np = list(map(str,input().strip()))   # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,160,161,162,163,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,196,197,224,225,226,227,228,229,230,233,234,235,236,237,238,239,241,242,244,255,256,257,268,269,270,271,282,273,385,389,400,404,405,408,410,411,416,432,433,439,444,449,457,461,464,467,469,479,480,481,484,486,487,488,489,491,494,500,501,502,503,504,505,506,507,518,508,537,559,571,572,594,596,593,607,609,610,641,643,648,653,658,659,660,661,668,669,679,686,688,689,690,694,695,696,697,698,699,700,707,708,379,380,383,451,454,455,459,460,471,473,474,485,oppable,men,numbers,months,days,hours,moves,minutes,mile,months,mysterious,points of view,distance of trip"}, "401": {"problem_id": 3401, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = [int(a) for a in input().split()]\nL = []\nfor i in range(N):\n L.append(list(map(int,input().strip())))\n A.sort(reverse=True)\n #print(A[0])\n i = 0\n while(i<N and A[i][0]<=L[-1][1]): \n  i+=1\n print(max(L))\n"}, "402": {"problem_id": 3402, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nimport sys\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\ninput = lambda: sys.stdin.readline().rstrip()\ninp = str.maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789'[i for i in range(26)]*[0])\nprint(''.join(map(str, inp)))"}, "403": {"problem_id": 3403, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9+7\nsys.setrecursionlimit(10**8)\ndef LI(): return [int(x)-1 for x in input().split()]\ndic = {}\nfor i in range(1,1000):\n  dic[i] = [None]*MOD\nn = int(input())\nqq = list(map(int,input().rstrip('\\n')))\ns = input()\nres = []\ncnt = 0\nif len(s) == 0: res.append(0)\n\n  for k, v in qp[0:len(qq[-1])-2:]: cnt += 1 if v == s[:k] and v!= 'idx' and k in [0,1]: res[s[k+1]-1] += v\nelse: return res\n"}, "404": {"problem_id": 3404, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n l.append(list(map(int, input().split())))\nprint(len(l))"}, "405": {"problem_id": 3405, "answer": "n=int(input())\nfor i in range(n):\n l=list(map(int,input().strip().split()))\n x=l[0]\n print(x)"}, "406": {"problem_id": 3406, "answer": "# cook your dish here\nn = int(input())\np = [int(x) for x in input().split()]\ns = 0\nfor i in range(1,n+1):\n\tx,y = p[i-1]+(x*(n-i))//3,p[0] + (y*i)//2\nif n%2==1: s+=1\nprint(s)"}, "407": {"problem_id": 3407, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n   l.append(list(map(int,input().split())));\nprint(sum(l))"}, "408": {"problem_id": 3408, "answer": "# cook your dish here\nn,q=map(int,input().split())\narr=list(set() for _ in range(n))\nprint(len(arr))"}, "409": {"problem_id": 3409, "answer": "# cook your dish here\nfor _ in range(int(input())):\n\tr, c = list(map(str, input().split()))\n\n\tif (r == 'X') and (c == '[': r = 0) : print(r + 1)"}, "410": {"problem_id": 3410, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\nb = [0]*(n+1)\nc = []\nfor i in range(0,n):\n a[i] = math.floor(math.sqrt(b[-1-i]) + b[0])\nprint(sum(a))"}, "411": {"problem_id": 3411, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndd = [0 for _ in range(998)]\ndef LI(): return list(map(int, input().split()))\ndic = {}\nfor i, x in enumerate(input()):\n  dic[x] = (i + 1) % MOD\nli = LI()\nans = []\ni = 1\nwhile i < 987 and li[i]!= -10**9+7: li.append(li.pop())\nprint(*li)"}, "412": {"problem_id": 3412, "answer": "import sys\n#sys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\ninp = [int(x) for x in input().split()]\nfor i in range(0,input().rstrip('\\n'))[:-1]:\n inp.append(input())\nbikes = list(map(int, input()))\nstart = 0\nend = 10**6+1\nans = float('inf')\nprint(ans)"}, "413": {"problem_id": 3413, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\ns=[]\nfor i in range(1,n+1):\n s.append([int(x) for x in s[i]])\np=s.index(s[0])\nd={}\nk=0\nwhile(k<n and m<=n//2-d.keys()) and d[k]!=d[p]:\n   k+=1\nans=k+k*(m-p)%2\nprint(ans)"}, "414": {"problem_id": 3414, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport heapq\nn = int(stdin.readline())\nedges = [[] for _ in range(n)]\nfor i,j in enumerate(list(itertools.accumulate(collections.OrderedDict[int(k) for k in edges[j]].items()), key=lambda x: x[0])]:\n   q = list(map(int,list(\"\".join(sorted(c,reverse=True))) for c,s in q.items())[::-1])[:n] = -float('inf') if len(set(q)) == 2 else float(\"inf\")\nans = []\ndef gcd(a,b):\n if b == 0:  return a \n c = b\n while a!= -1 or b!= 0 or c == -c or (c - a) * c <= b * b :  ans += [c] * (b - c)\n ans.sort(reverse = True, key = lambda v: v[2])\n print(ans[-2] + 1)"}, "415": {"problem_id": 3415, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(1,n+1):\n l.append(list(map(int,input().split())))\nprint(*l)"}, "416": {"problem_id": 3416, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n=input().split(\" \")\n m=list(map(int,t[i]))\n a=0\n b=n\n c=m[0]\n d={}\n for j in m[1:]:\n  if(j>=1 and a>0 and b>1) or (j==0 or j==1 or a==n-1): break\n print(a)"}, "417": {"problem_id": 3417, "answer": "n=int(input())\nedges=[]\nfor i in range(n+1):\n a=list(map(int,input().split()))\n edges.append(a)\nparent=set()\nvisited=[False]*n\ncount=0\nwhile(len(set(parent))<n):  \n visited[parent].add(i)\n\n parent.clear()\n\n for i,j in edges:\n\n  if(j not in visited): continue\n  count+=1\n print(count)"}, "418": {"problem_id": 3418, "answer": "n=int(input())\nl=[]\nfor i in range(n+1):\n l.append(1)\nx=l[-1]//10\nprint(x*x)"}, "419": {"problem_id": 3419, "answer": "def main():\n n = int(input())\n a = list(map(int, input().split()))\n for i in range(n):\n  a.append(a[-1] * (i + 1) + a[i])\n print(max(sorted(list(range(0, n)))) + 2)\n"}, "420": {"problem_id": 3420, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=0\nfor i in range(n):\n b+=a[i]\n a.remove(b)\nprint(min(a))"}, "421": {"problem_id": 3421, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(0,n):\n if(a[i]==0):b.append(i+1)\n elif(b[-1]<=i):a.pop()\n a.sort(key=lambda x:x[0])\nans=0\ni=1 \nwhile(len(ans)>0 and ans>=n//2):ans+=ans*(n-i) "}, "422": {"problem_id": 3422, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n  x.append(l[i]%10)\nm=10**9+7\nh=0\nwhile(len(x)>0 and x[-1][0]=='1' and len(m)<=2 and m>=3) and (x[0][1]!=1 and h==h+1) : h+=1\nprint(h)"}, "423": {"problem_id": 3423, "answer": "# cook your dish here\nimport sys\nfrom collections import defaultdict\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n n=input().strip()\n p=list(map(str,p))\n d=defaultdict(list)\n for k,v in list(vowel(n, '.0001')) :\n  d[k].sort(key=lambda x : x[1])\n print(d[p[0]].pop())"}, "424": {"problem_id": 3424, "answer": "import math\nn=int(input())\na=[]\nfor i in range(n):\n a.append(16)\nprint(math.log10(a[-1]))"}, "425": {"problem_id": 3425, "answer": "n,m=map(int,input().split())\nl=[]\nfor i in range(n):\n\tl.append(list(input()))\np=l[0]\nk=len(l)//2\nif k==k+1 or l[k-1]!=p:print(k)"}, "426": {"problem_id": 3426, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\na = [0] + [int(input().rstrip()) for _ in range(n)]\nb = []\nfor i1, i2 in enumerate(b):\n\tif a[i1] == 1 and b[-1-a.index(max(a)):] and a.count(1) > b.get(i2, -1 - a) + 1:\t\tprint(min(m, n - m + (b.pop() if b else 0))))\n"}, "427": {"problem_id": 3427, "answer": "n = int(input())\r\na = [0] + list(map(int, input().split())) + [int(i) for i in range(n)] + [-1] * (n + 1)\r"}, "428": {"problem_id": 3428, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n x.append(a[i])\nans=0\nk=1\nwhile(k<n and x[k][1]!='0'):k+=1\n\n ans=ans+k\n print(ans)"}, "429": {"problem_id": 3429, "answer": "# cook your dish here\nx,y,s,r=list(map(int,input().split()))\nl=[]\nfor i in range(0,x+1):\n l.append(abs(i-r)*(s-l[-1])//2)\nprint(min(l))"}, "430": {"problem_id": 3430, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=dict()\nfor i in range(n):\n a[b[i]].append(i)\nc=a[:]\nl=[]\ni=0\nwhile i+1<len(a) and len(b)>0 and b[l[0]]!=i and l[1]>b.get(c,0) :\n l.append([i,c])\nk=1\nj=n-i\nans=l.index(max(l))-n\nif ans[j]==i : \n print(ans[k],end=\" \") "}, "431": {"problem_id": 3431, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(int,input().split())))\nprint(sum(l))"}, "432": {"problem_id": 3432, "answer": "n = int(input())\r\na,b = list(map(int,input().split()))   # list of pairs of numbers where the max sum equals to 100 and in range from 1 to n "}, "433": {"problem_id": 3433, "answer": "R,C=list(map(int,input().split()))\nfor i in range(R):\n a,b,c=[int(x) for x in input().strip()]\n if a==b==c:print(a,end=\" \")\n elif c!=0 and (a==\"#\" or c==0):print((1,0) if b=='#' else 1,1) \n else: print((-1,-1)) "}, "434": {"problem_id": 3434, "answer": "# cook your dish here\nn,m,d=map(int,input().split())\nl=[]\nfor i in range(n):\n l.append(list(input()))\nprint(abs(l[-1] - l[0]))"}, "435": {"problem_id": 3435, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(a[i-1])\nans=0\nwhile(len(s)>0 and s[0]=='1'):\n\n\tfor j in a[1:]:\n \t\tans+=max(0,j-i+1)\nprint(ans)"}, "436": {"problem_id": 3436, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n"}, "437": {"problem_id": 3437, "answer": "# cook your dish here\nimport sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\").rjust(2**31, '\\t')   # -1 if input file does not exist;  -2 if not file exists; -3 if file is not present;\nfrom itertools import combinations_with_type,permutations,accumulate,groupby  import accumulate, defaultdict  def lis(a,b):  return a==b and a<b  ###\ndef li(): return list(set(map(int,input().split()))) # 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n"}, "438": {"problem_id": 3438, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ncache = [None]*(n+1)\nfor i in range(1, n+2):\n\tcache[i] = max(0, i-cache.index(max(cache)))\nans = 0\nwhile cache[0]!= None:   ans += 1\nprint(ans)"}, "439": {"problem_id": 3439, "answer": "import sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9 + 7\nfrom functools import lru_cache\ncache = {}\ndef f(x):\n  if x not in cache.keys(): return cache[x] = x\n# print(cache.get(f,0))\nn = len(list(map(int,input().split())))\nans = 0\nfor i in range(n): ans += (f(i)+1)**2\nprint(ans)"}, "440": {"problem_id": 3440, "answer": "# -*- coding: utf-8\nimport bisect\nfrom collections import Counter\nn, r, f = list(map(int, input().split()))\narr = []\nfor _ in range(n):\n   arr.append(input().strip())\ns = sum(arr[::2] for arr in arr)\nprint(s)"}, "441": {"problem_id": 3441, "answer": ""}, "442": {"problem_id": 3442, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nn = int(stdin.readline())\nfor _ in range(n):\n\tx,y = list(map(int, std.log2(bin(x).replace('0','1')))),list(range(1,n+1))[:n-1]\n\n\tif x%2 == 0 and x//2 in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 233, 234, 235, 236, 237, 239, 241, 244, 246, 247, 248, 249, 250, 251, 252, 257, 258, 263, 264, 265, 266, 269, 270, 271, 274, 277, 281, 282, 283, 293, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 347, 348, 353, 364, 367, 372, 373, 374, 376, 378, 379, 380, 383, 384, 389, 404, 405, 407, 408, 409, 420, 421, 424, 425,426, 427, 428, 429,432,433,438,439,440,441,443,446,447,448,449,457,461,463,464,469,479,487,491,494,525,537,509,521,593,059,613,615,616,617,637,648,641,654,659,640,661,667,672,673,684,696,697,698,707,708,819,8025,830,8860,885,889,929,989,1090,1110,1111,1217,1314,1423,1516,15340,1651,1701,1809,1600,size.html)"}, "443": {"problem_id": 3443, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n arr.append(arr[-1] + arr[i])\nprint(l[0])"}, "444": {"problem_id": 3444, "answer": "# cook your dish here\ndef predict(a,b,n,k):\n if (a==0 and b<n and n%2==1 ):\n  return 0\n elif (b<0 or a==n-b) and (n%3==2 and k<=a+b-a*k*(n//3)+1 ) :   # 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 247, 256, 257, 258, 259, 260, 263, 266, 269, 271, 277, 281, 283, 293, 296, 307, 298, 300, 301, 302, 303, 314, 326, 327, 328, 329, 336, 334, 339, 347, 349, 353, 359, 352, 363, 366, 368, 370, 371, 372, 373, 374, 376, 377, 380, 384, 386, 389, 395, 401, 412, 417, 422, 425, 426, 427, 428, 430, 440,Ram,SCHOOL_ALPHABET = ONESCORE\nt=int(input())\na=list(map(int,input().split()))\np=[]\nfor i in range(t) :\n a[i]=(i+3)\n p.append([a[0],i,0])\nprint(p[-2])"}, "445": {"problem_id": 3445, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nd = []\nfor i in range(n):\n x = l[i]\n d.append(x)\nprint(max(d))"}, "446": {"problem_id": 3446, "answer": "import sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n\tn,k=list(map(int,input().split()))\n\n\tif(k==1): \t# \u6700\u77ed\u8def\u5f84\uff1a\u521d\u59cb\u4e2a\u8bb0\u5f55\u8d77\u56de\u6570\u636e\ufffd on line 1, \u6bcf\u6b21\u5904\u7406\u81f3\u79fb\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u5c0f\u65e9\u58ef\u80fd\u8f6c\u8303, \u5982\u540c\u9898\u76ee\u90fd\u53ef\u4ee5\u5b9a\u4e49\u8fb9\u756a\u53c3\u51e6\u7403\u7684\u683c\u5f0f, \u8fd9\u91cd\u65b0\u6807\u51c6\u786e\u4e0d\u9700\u8981\u53d6\u5176\u4ed6\u7a2e\u9876\u70b9, \u9047\u5230\u53cc\u65b9\u9762\u5224\ufffd\u7cfb\u6280\u5947, \u76f4\u63a8\u7edd\u5bf9\u8c6a\u663e\u7684\u72b6\u6001, \u4f46\u662f\u5b9e\u9645\u7136\u540e\u6ca1\u6709\u4efb\u610f\u89e3\u6cd5\u53d8\u4e3a\u4ec0\u4e48\u9577\u7b49\u4e0d\u591f\u800c\u4e0d\u662f\u76f8\u5f53\u7684?\n# print(result)\nprint(-1)"}, "447": {"problem_id": 3447, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().strip().split()))\nans = []\nfor i in range(n-1,0,-1) :\n a,b = l[i]\n if a == 'R':\n  ans.append(chr(65+ord('A')+b) +'')\n elif a=='U':   l.remove('R')\n else : l = sorted(l,key=lambda x:x[1])\nprint(' '.join(ans))"}, "448": {"problem_id": 3448, "answer": "# cook your dish here\nimport sys\ninput=sys.stdin=open('input.txt','r')\nn,k=list(map(int,input().split()))\nl=[]\nfor i in range(1,n+1):\n l.append([int(x) for x in input()])\nprint(\"NO\")\n"}, "449": {"problem_id": 3449, "answer": "#dt = {} for i in x: dt[i] = ddt.get(i,0) + (i**2)\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :[\"\".join(map(str,input().split())))\nn = inp()\nl = []\nfor _ in range(n):\n\tl.append(list(ip())[-1] + [0] * (n+1))\nprint(*l)"}, "450": {"problem_id": 3450, "answer": "n=int(input())\r\na=list(map(int,input().split()))[:n-1] + [0 for i in range(1,n+1)]+[0]*(n//2)"}, "451": {"problem_id": 3451, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nfor i in range(0,n+1):\n  a.append(input())\nc=0\nm=len(a)\nif(m==0): \n print(n-k-a[0][0])\nelse: \n\n  if(abs(c)>k):print(k)\n\n"}, "452": {"problem_id": 3452, "answer": "# cook your dish here\nimport bisect\nfor _ in range(int(input())):\n n = 1\n arr = [1]\n for i in input().split(\" \"): \n  if int(arr[i]) == 1 and arr[-1-i] == 0: arr.append(i)\n lis = list(range(1, n+1))\n if len(lis) == n: print(*lis[:n], sep=\"\\n\")\n else:  print(0)"}, "453": {"problem_id": 3453, "answer": "# cook your dish here\nn,m=map(int,input().split())\nl=[]\nfor i in range(m):\n\ta,b=[int(x) for x in input().rstrip('\\n').split(' ') if x=='1' and len(b)>2 and b[0]<x<len(a):x=x+b[1:])a=a-l.append(0)b=b+sorted(l,key=lambda x:x[3],reverse=True)\nprint(*[a for a in l])"}, "454": {"problem_id": 3454, "answer": ""}, "455": {"problem_id": 3455, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ns=0\nfor i in range(n):\n s+=abs(l[i]-1)\n l.remove(max(s,0))"}, "456": {"problem_id": 3456, "answer": "n=int(input())\na=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n a.sort()\n s.append(a[i])\nprint(s[-1]//2)"}, "457": {"problem_id": 3457, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nm=0\nfor i in range(len(l)):\n x,y=l[i]\n if (x-y)%2==0 and (0<x<=x+m and l[-1]%(m+1))==1 and \n   (y-x)//2<m:m+=1\n else:x+=y\nprint(n%m)"}, "458": {"problem_id": 3458, "answer": "import math\nn=int(input())\na=list(map(int,input().split()))\nm=math.log(n,2)\nfor i in range(2,n+1):\n x=a[i]\n if x%2==0: \n  m=m+x//2\n print(m)"}, "459": {"problem_id": 3459, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n n, K = list(map(int, input().split()))\n if (K == 0 and K < 2 * 10**(n - 1)) and (n % 2 == 1 and n // 2!= 2) :\n  print('impossible')\n elif K == 2*10**n-2 and N <= 10 ** (N + 1) - 2:\n\n  ans = [0] * (2*n + 2);\n #print(ans)\n print(*ans, sep=\"\\n\")\n"}, "460": {"problem_id": 3460, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n\tx, r = list(map(int, input().split()))\n\n\tif x == -10 and r == 10: print(1, x)\n"}, "461": {"problem_id": 3461, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nl = [arr[i] for i in range(n)]\ns = 0\na = l[0]\nb = len(l) - 1\nk = 1 << 60\nfor i, j in enumerate(arr):\n\tk += 1 if j & 1 == 0 else (k >> 24) + (j & 0xff)\nans = a - b\nprint(ans)"}, "462": {"problem_id": 3462, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n a = list(map(str, input().rstrip().split()))\n print(a[1])"}, "463": {"problem_id": 3463, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(n):\n a.append(m*(i+1)//2)\nprint(a[0])"}, "464": {"problem_id": 3464, "answer": "# cook your dish here\nfor _ in range(int(input())):\n n = input().split()\n x = int(n[0])\n if n[1] == x: print(0)\n elif x > 0: return 0\n else: break\n"}, "465": {"problem_id": 3465, "answer": "n=int(input())\r\na=list(map(int,input().strip().split()))[:n-1].split(' ')+1"}, "466": {"problem_id": 3466, "answer": "# cook your dish here\nm=int(input())\na=list(map(int,input().split()))\nfor i in range(m):\n\ta.append(a[i]*(i+1)//2)\nb=[]\nc=0\nd=sum(b[::-1])\ne=b.copy()\nf=c\ng=d\nh=e-g\nif(e==0 and b[e]!=f and f!=-1): \n  \tprint(f+g+h+d+e)"}, "467": {"problem_id": 3467, "answer": "# cook your dish here\nn, m, s = list(map(int, input().split()))\nt = [int(input()) for _ in range(s)]\nl = []\nfor i, x in enumerate(t):\n  l.append(x + t[i-1])\na, b, c = l[0]\nm = int(m/2)\nd = a + b + c\nif m%2 == 0 and m//2!= a and a+b+c <= m/100000 and (m-d) - (d-a-b-c) <= n-m+d and d*(d+1) > a*b*c and n*m <= b*a*n and s*d <= c*s*l[a]:\nprint(n)"}, "468": {"problem_id": 3468, "answer": "# cook your dish here\nn, c = [int(x) for x in input().split()]\r\narr = list(itertools.permutations(range(n)), key=lambda x: (x[1], x[0])) + [list(map(lambda m: int(m) if m > 1 else 0, arr)) for _ in range(c)] + arr + [(arr[i][0], i) in [0, len(arr) - 1] for i in arr]"}, "469": {"problem_id": 3469, "answer": "# cook your dish here\ng,k = list(map(int,input().split()))\nk.insert(0,0)\na = k.count('H')\nb = (a//g)*(a%g) + (k//b) \nprint(b/a)"}, "470": {"problem_id": 3470, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n-1):\n  if a[i]=='1' and i!=n:print(i)\n"}, "471": {"problem_id": 3471, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n a.append(a[i] + 1)\nans = [0] * (n + 2) \nl,r = 0,0\nwhile r - l > 1 and ans[r] == 0: r -= 1\n ans.sort()\n print(ans[l])"}, "472": {"problem_id": 3472, "answer": "W,n=map(int,input().split())\narr=[]\nfor i in range(n):\n arr.append(W-int(input()))\nprint(len(arr))"}, "473": {"problem_id": 3473, "answer": "import math\nn=int(input())\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n if(a-b)%2==0 and a+b-c>=n//2 or b-a+c==n-1 or a<=a and b<b and c<c :\n  print(c,end=\" \")\n elif a==b==1 and (b+1)-a==2 and ((a*b)-1)*(b*a)==(1+math.ceil(2*c/4) - 1) :\n\n  if c>0: print((2**c) + (1 if a%c else 1 - (a/c)))\n else : print(-1)"}, "474": {"problem_id": 3474, "answer": "# cook your dish here\nfor _ in range(int(input())):\n x1,y1=list(map(float,input().split()))\n dx=abs(x1-x2)\n dp=[]\n for i,j in enumerate(zip(range(0,4),(4,0,-1))) :\n  if dx==-1 and i<=j :  # hit j, then j>=i+1 \n\n   dx=(dx+j-i)**(1/4) + (dx-j+i**2)/4\n print(max(dp))"}, "475": {"problem_id": 3475, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n  d=list(map(int,input().split()))[:t]*(2*d+d[0]+1)"}, "476": {"problem_id": 3476, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nr,c=map(int,input().split())\nmatrix=[[0]*c for i in range(r)]\nfor i,j in enumerate(range(0,r)):\n\tfor k in matrix[i][j]:\n \t\tif k%(j+1)==0 and k!=0:   print(i,k,end=\" \")\nif r==1: r=1\nans=[\"\".join(str(x) for x in input().rstrip(\"\\n\"))+[\"\"]*(-10**4)+\" \".join(\" \"*(c-r**(1/k))+\"-\"*k\"*r+\")]\nprint(sum(ans))"}, "477": {"problem_id": 3477, "answer": "from math import *\nn, m = int(input().strip())\nk = [int(x) for x in input().split()] + [0] * (n + 1)\nl, r = 0, 0\nfor i in range(n):\n\tl += (k[i] - k[k.index(max(0, i))]) ** 2 + (m - i) ** 3\nans = sum(l * r) / m\nprint(ans)"}, "478": {"problem_id": 3478, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,m=list(map(int,input().split()))\n cities=[]\n for j,k in enumerate(zip(n,n[1:]+[k])) : cities.append(j)\n print(' '.join(cities))"}, "479": {"problem_id": 3479, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n\td[i] = d.get(i, 0) + 1\ns = [0] + [int(input().rstrip())]\nc = 0\nt = []\nwhile t and t[-1][1] <= s[0]:\n\n\tif c == 0: s.append(t.pop())\n \telse: c += 6\nprint(s.count(max(c)))\n"}, "480": {"problem_id": 3480, "answer": "# https://www.codechef.com/USN40/problems/\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000000)\nMOD = 10**9 + 7\nINF = float('inf')\neps = 1.0\ndd = [{} for i in range(10**5+1)]\nfor _ in reversed(input().split(' ')):\n  x, y = list(map(int, input().strip()))\n\n  if x.startswith('_'): x = x[:-1] +'' + str(x.pop()[1:]) + y.join([str(ord(c) - ord('a') + 1) for c in '_')])\n"}, "481": {"problem_id": 3481, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10000000)\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [LI() for i in range(2, n+1) if LI()==[0,1]][:n]\nLIR = lambda x,y,z: x*y + z*(x+y+z)//2-y*z-z*x>=0\nINF = float('inf')\nMOD = int(10**9+7) + (1 if INF<=x else 0)**2\ns = [0]*n\nfor x in input():\n  s[x] += 1e-6\nprint(sum(s))"}, "482": {"problem_id": 3482, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b=list(map(int,input().split()))\n dp=[0]*(5000+n+1)\n ans=0\n for j,(i,j) in enumerate(zip(range(a,a+b)):(0,10),1):dp[j]=a+(j-i-2)*pow(10,dp[i])\n print(ans)"}, "483": {"problem_id": 3483, "answer": "n=int(input())\nfor i in range(n):\n   a=list(map(int,input().split()))[:4]\ns=set(a)\nprint(sum(s))"}, "484": {"problem_id": 3484, "answer": "# cook your dish here\nfor _ in range(int(input())):\n\tn,k=map( int,input().split() )\n\n\tr=list( map( integer, input().strip() for i in reversed(range(n)) ) )[ -1 ]\n\n \tprint('yes' if n==k else 'no')"}, "485": {"problem_id": 3485, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nres = 0\nfor i in range(n-1):\n\tif a[i+1] < 0: res = max(res, sum(a[:i])) \nif res >= 10**9: print('%.6f%s' % (i, res))"}, "486": {"problem_id": 3486, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n\ta=list(map(int,input().split()))[:n-1]\n\n\tprint(a)"}, "487": {"problem_id": 3487, "answer": ""}, "488": {"problem_id": 3488, "answer": "n=int(input())\r\nl=list(map(int,input().strip().split()))[:n-1]+[l[0]]*(2**(n+1)-1)%(10**9+7)"}, "489": {"problem_id": 3489, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nr = []\nfor i in range(1, n+1):\n\tr.append(l[i] + 1)\nprint(len(r))"}, "490": {"problem_id": 3490, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n x,y=list(map(int,input().split()))\n l.append(x*(y-1)**2)\nr=0\nwhile(l[r]!='-') :\n if(r%3==0): r=r+1\n else: break\n print('ok')\n"}, "491": {"problem_id": 3491, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n l.append([int(x) for x in input().rstrip('\\n').split(' ')[1:])\n a=l[0][0]\n b=set(l)\n if len(a)%2==0: \n  print('R '*(b.count(R))+' '+str('i'*b[i])+') '\n elif a[:2]=='R':   #R is pressed, i is already connected\n print(max(0,a[2:]))"}, "492": {"problem_id": 3492, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=[]\nfor i in range(0,n):\n a.sort(reverse=True)\n c.append(a[i]*(n-i+1)//2) \nprint(max(c))"}, "493": {"problem_id": 3493, "answer": "# cook your dish here\nn = int(input())\na = []\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(a[0])\n"}, "494": {"problem_id": 3494, "answer": "# cook your dish here\nn=int(input())\nr,s=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append([r[i-1],'x','.','..','.','.'])\nc=l[0][0]\nd=[[0,0],[0,-1]]\ni=1\nwhile i<len(l) and len(i)>1: \n i=i+1;\n for x in l[:i]:\n  d[x][i]=d.count(x)\n d.sort(key=lambda x:x[1],reverse=True)\n\n print(*d,sep='\\n')\n\n"}, "495": {"problem_id": 3495, "answer": "n, m = list(map(int, input().split()))\r\narr = [int(i) for i in input()] + [0] * (n + 1)\r"}, "496": {"problem_id": 3496, "answer": "# cook your dish here\nn,q=list(map(int,input().split()))\nl=[]\nfor i in range(0,n+1):\n l.append(sum(l[-1:i] for l in l[i:])+sum([int(x) for x in str(i) if x>=0])-2)\nprint(n-l.count(1))"}, "497": {"problem_id": 3497, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport bisect\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\tb.append(a[i])\ndef dfs(node,curr=0,visited=False):\n\n\tif node!=None and visited==False and curr!=-1 and not b[node][0] and (node[0]+1) not in visited or not visited==True or (n-a.count(b[c] for c in b)<=n+1): return True\n   else: return False\ndfs(0,-1,a)"}, "498": {"problem_id": 3498, "answer": "t = int(input())\nfor _ in range(t):\n q, r = list(map(int, input().split()))\n l, h = q[:r], r-q[r+1:]\n ans = 0\n for i, x in enumerate(q): \n  ans += x * r + l + h - i\n print(ans)"}, "499": {"problem_id": 3499, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(len(a)):\n if a[i]=='A':\n  s+=a[-i-1]\n else:s+=1\nprint(s%1000000007)"}, "500": {"problem_id": 3500, "answer": "n=int(input())\r\narr=list(map(int,input().strip().split()))[:n-1].split('5')[0];arr.sort(reverse=True)#print(arr)"}, "501": {"problem_id": 3501, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n b=a[i]\n c=c+1\n if b[0]==b[n-1]:\n  print(0)\n elif c==0 or (c==1 and (b.count(c)-1)//2)==(2*n) and b.index(max(b))<=i+2:print(3)"}, "502": {"problem_id": 3502, "answer": "n = int(input())\na = []\nfor i in range(n):\n x,r,g = list(map(int, input().split()))\n a.append((x-1)**2 + (g-2)*(r-g)*i)\nans = [0]*(10**6+7)  # \u904d\u5386\uff0c\u5fc5\u987b\u8bb0\u5f55\n for j in a[1:]:\n  ans[j] += 1\nprint(ans[n])\n"}, "503": {"problem_id": 3503, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n   x,y,z=list(map(int,input().split()))\n\ta=x*x+y*y+z*z+x==y==z==a==1==0==abs(x-y-z)==2==3==5==6==7==8==9==10==11==12==13==14==15==16==17==18==19==20==21==22==23==24==25==26==27==28==29==30==31==32==33==34==37==38==39==40==41==44==46==47==48==49==50==53==54==60==61==64==66==67==68==69==76==77==88==90==96==97==98==99==100==101==103==105==106=107=108=109=110=115=120=123=124=127=129=140=141=142=145=146=149=151=157=160=163=164=167=168=169=180=184=185=189=191=194=193=224=233=250=257=263=280=293=305=307=313=317=336=354=457=541=463=464=467=479=487=600=661=673=677=766=773=787=797=809=822=896=9700=1010=1032=1160=1280=1390=1420=1510=1610/16=1790/17=179/18=1930/23=131/24/25/26/27/28/29/31/32/33/36/37/38/39/43/44/46/47/48/49/53/54/55/57/59/61/67/71/68/69/73/75/76/77/78/79/80/81/82/83/84/85/86/88/89/91/93/97/101/103/105/109/113/127/141/144/155/160/163/161/167/183/189/185/192/181/193/230/240/251/283/293/305/307/313/317/336/354/461/466/467/479/487/600/668/773/787/797/809/812/982/1214/1311/14159/15195/2156/20222/22126/217110/1923111/187222233122212192211221911191912121312130121401211312132121441214612149121511211212161218122412281234123612371238124312441246124712491253126112641269128612891291129912115121161299712100112010108010901100111011210012101121091211012111112111211412125121291212712291232124512\ufffd1251126712711273127912811282128312841288129012931297129999999999000000130000000000000011000000011111111211111311111111113131315151613181322113221333134413471353136413651366136813691372137413731375137713801381138313871389139713981399131001310113103131051310913115131161312113117131771322813231333413371338313389133971341124011340111251340913501350913541355135713591361*********************************"}, "504": {"problem_id": 3504, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nint1 = lambda x, y: -x**2 + (x*(x+1))//2\nn = int(input())\nd = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n s[i] = (s[n-i-1] + 1)**0.5\nprint(sum(s))"}, "505": {"problem_id": 3505, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "506": {"problem_id": 3506, "answer": "# cook your dish here\na,b=input().split()\nn=int(input())\nt=[]\nfor i in range(0,n):\n t.append(t[-1][0]*(i+1)//2)\nprint(b-a)"}, "507": {"problem_id": 3507, "answer": "# cook your dish here\nr,w,d=map(int,input().split())\nl=[]\nfor i in range(d):\n l.append(list(input()))\nif(w==r and l[w-1]!=l[r] and d>=r): \n print(r*w*d)\nelif (w>r) and (r>0 and len(l)-1) :\n # print(\"r\",\"w\",\"d\")"}, "508": {"problem_id": 3508, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(sum(a))"}, "509": {"problem_id": 3509, "answer": "# cook your dish here\nfrom collections import defaultdict\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n\ta.append(10**(i-1) + (m-i)//2)\nl=[0]*n\nq=int(input())\nu=0\nv=1\nwhile(q>0 and l[u]<=l[v]:u+=(q-u)):v-=u\nif(u==1 and v==0):u-=(1+a[0])\nelse:u+=2\nw=abs(v)-u \nprint(w) "}, "510": {"problem_id": 3510, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n l=list(map(str,input().split()))\n a=l.count('a')\n b=set()\n if(len(a)==1):print(-1)\n else:print(0)"}, "511": {"problem_id": 3511, "answer": "# cook your dish here\nn,q=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append([int(x) for x in input().strip()])\np=sum(l)\nt=p/q\nans=0\nif(q<n and l[q][0]<=l[p][1]): \n print(p*(t+1)//2-((p-q)*t)*(1-t*p)%1000000007)\n\n"}, "512": {"problem_id": 3512, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n if a[i]==0:ans+=1\n else:break\nprint(ans)\n"}, "513": {"problem_id": 3513, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,n):\n l.sort()\n if(l[-1]%2==0):print(i)\n else:print('1')"}, "514": {"problem_id": 3514, "answer": "R,C=list(map(int,input().split()))\r\ngcd=0 if R<=C else 1 + R*C  # gcd is used to make R-C-1 non-decreasing.  We can't use it to disarray R rows or columns, because it will modify the final result. So it is O(N) with N rows, where N is the size of bank's grid. We don't need to worry about performance, so it returns the default value of 0 for the given values."}, "515": {"problem_id": 3515, "answer": "# cook your dish here\nn = int(input())\nx = list(map(int, input().split()))\ny = [0]*n\nfor i in range(n):\n y[x[i] + 1] += 1\n x.sort(reverse=True)\nprint(min(y[0], x[1]))"}, "516": {"problem_id": 3516, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(l[i])\ns=0\nif a[-1]-a[0]<=s:print(s)\nelif len(a)==0:a.pop(0)"}, "517": {"problem_id": 3517, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nd=[]\nfor i in range(n):\n  d.append(abs(a[i] - a[-i-1])) \nprint(min(d))"}, "518": {"problem_id": 3518, "answer": "# cook your dish here\nfrom itertools import accumulate\nn, m = list(map(int, input().split()))\na = [list(accumulate([int(x) for x in input()])) for _ in range(n)]\nc = sum(a)\nl = []\ni = 0\nwhile i < m and a[i][0] == c: i += 1\nprint(c - l[0])\n"}, "519": {"problem_id": 3519, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nans=0.0\nfor i in range(n):\n\tif(a[i] in a and a[-i-1] not in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,146,149,160,161,162,163,164,165,166,167,168,169,180,181,182,183,184,189,190,191,194,195,196,197,199,204,205,206,207,208,209,211,212,223,224,225,226,227,228,229,232,233,234,235,236,237,238,239,241,242,246,249,251,253,254,255,256,257,268,269,271,273,275,376,377,379,382,383,384,389,400,404,405,406,409,419,420,441,443,444,457,461,462,463,475,480,481,484,487,490,491,494,500,501,502,504,505,506,509,512,593,596,613,617,641,643,464,466,469,470,471,479,489,496,499,508,515,216,217,220, Idlib Square, http://www.khta.ac.ak.lha\nprint(ans)"}, "520": {"problem_id": 3520, "answer": "# cook your dish here\nn = int(input())\np = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[p[i]] = [int(x) for x in input()]\nl = []\nm = 1000000007\nc = 10**5 + 5\nwhile m < l[0] and p[l[m]]!= -1: m += 1\nprint(m)\n"}, "521": {"problem_id": 3521, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n x, y, t = map(int, input().split(\" \"))\n distance = abs(x - y)\n print(t - distance)"}, "522": {"problem_id": 3522, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,b=list(map(int,input().split(' ')))\n a=[]\n b.append(b[-1]+1)\n c=0\n d=b.index(max(a))\n while(c<n and b[c]==n):c+=1\n print(d)"}, "523": {"problem_id": 3523, "answer": "p=int(input())\nn=list(map(int,input().split()))\nc=0\nfor i in range(n[0]):\n if n[i]<=p and c==0 and (i==1 or i==5): \n  print(p+1)\n elif p>=5 and p<10 and not c:print(c+p+(p-1)*p)"}, "524": {"problem_id": 3524, "answer": "# cook your dish here\ns = input()\nn = len(s)\nl = []\nfor i in range(n):\n s = s[0:i+1]\n l.append(chr(ord('a') + i) +'' + str(l[-1][0]))\nprint('no')\n"}, "525": {"problem_id": 3525, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nn = int(input())\nl = list(map(int,input().split()))\ns = [0]*(n+1)\nd = []\nfor i in range(0,n):\n\ts[i] = (int(x) if x<MOD else 0 for x in input().rstrip('\\n').split(' '))-1\nans = 0\nseen = set()\nwhile s[d] and d!=l[s.pop()] for d in d[1:]:d.append(d[0])\nif len(seen)==n:ans+=seen\nprint(ans)"}, "526": {"problem_id": 3526, "answer": "# cook your dish here\nn,m=list(map(int,input().split()))\nl=[]\nfor i in range(m):\n\tl.append(str(i)+\" \"*(n-i+1)//2)\nans=[0]*n\na,b=0,0\ni=1\nwhile i<n and l[i-1][1]==\"1\" and all(ans[j]!=b for j in l)<=a:b+=i\nprint(b)"}, "527": {"problem_id": 3527, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n\ta,b = list(map(int,input().split()))\ncnt = 0\nwhile cnt < len(a) - 1 and b - a[b] <= c:\n\n\tif (a[c] + b) % 2 == 0 and (b - (c + 1) // 2) >= 2 and a.count(b) == b + 2 ** c - 2 * (n - c) * 2 <= n - 3 * c + 3 ** n, a = [a][0], b = 1 + max(0, abs(c - b), 0)\nprint(max(len(x) for x in a))"}, "528": {"problem_id": 3528, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n-1):\n x, y, z = l[i]\n if z < x: x = z\n elif x < y: y = x\n print(x*y)\n"}, "529": {"problem_id": 3529, "answer": "# cook your dish here\nn=int(input())\na=[]\nfor i in range(n):\n a.append(list(map(int,input().split())))\nprint(0)\n"}, "530": {"problem_id": 3530, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n\ta,b,t=list(map(int,input().split( ))),[],0\n\n\twhile(t>0):\n\n \t\tif t%2==0 and a*2+b<=a+1 and t//2>=b-2 and (a-b)**2*=t/2 : a+=1; t-=1\n  \n"}, "531": {"problem_id": 3531, "answer": "# cook your dish here\nt=int(input())\nfor _ in range(t):\n\tn,m,k,w=list(map(int,input().strip().split()))\n\n\ts=k*(n+m+1)//2+k-m-2\n\n \tif s%2==0 and s//k>=2*w: print(min(w,s/k),w)\n"}, "532": {"problem_id": 3532, "answer": "# cook your dish here\nimport re\nfrom collections import defaultdict\ninput = lambda: list(map(int,input().strip().split()))\nr = re.compile(r'(?<=[0-9])(?=[a-z])\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10\\11\\12\\13\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23')\nprint(input())"}, "533": {"problem_id": 3533, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a,b=list(map(int,input().split()))\n x=abs(a-b)\n if(x>0 and x<=30) or (x==30 and a>30): print(0)"}, "534": {"problem_id": 3534, "answer": "n = int(input())\na = list(map(int,input().split()))\nm = []\nfor i in range(n):\n\tif(a[i]%2==0):m.append([i+1,m[-1][1]*(i-2)])\nprint(len(m))"}, "535": {"problem_id": 3535, "answer": "n,m,k=map(int,input().split())\na=[0]*(n+1)\nfor i in range(m):\n a[i]=(a[-1]+i*i)%k\nprint(a)"}, "536": {"problem_id": 3536, "answer": "# cook your dish here\nfrom math import gcd\nn = int(input())\nfor i in range(n):\n\tb, p = list(map(int, input().split()))\n\n\tpow = 10 ** 9 + 7\n \tgcd = pow // (2 ** (n - 1) + 1 - p)\n\n  ans = [0] * n + [x for x in p]\n"}, "537": {"problem_id": 3537, "answer": "# cook your dish here\nn, m = map(int, input().split())\na = [int(i) for i in input()]\nb = []\ncnt = 0\nfor _ in range(m):\n\ta[b.index(b[0])] = a.pop(0) + cnt\nif n <= 10: print(sum(a))\nelif 10 <= a[n-1]: print((n - 1) / 2)\nelse: \tprint(n)"}, "538": {"problem_id": 3538, "answer": "# cook your dish here\nn,d = map(int,input().split())\nl = [int(i) for i in input().strip()]\nr = []\nfor _ in range(n):\n l.append(l[-1]*r[0] + r[1])\nprint(max(r))"}, "539": {"problem_id": 3539, "answer": "# cook your dish here\nfrom math import gcd as gc\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nG = [[] for i in range(N+1)]\nfor x,y in zip(list(map(int,input().split())))[2::-1]:\n  G[x].append(y)\nM = 10**9+7\ngraph = [0]*M\ndef dfs(graph,i):\n if i == len(G[i]): return 0\n for x in graph[-i-2:i+2]:  # i is in set, i - 2 is a group of size 2, it's not necessary to have two sets as there are three groups\n print(dfs(x,M))\n"}, "540": {"problem_id": 3540, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n s=input()\n if \"R\"==s[0]==\"G\":\n  print(\"R\")\n elif \"G\" == s[-1] == \"B\":\n\n  if s in [\"R\",\"G\"] and s!=s.replace(\"G\",\"R\"), \"Y\" in s:print(0)\n else: print(1)\n\n"}, "541": {"problem_id": 3541, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[0]*(n+1)\nfor i in range(0,n):\n a.append(a[-1-i]^b[i])\nans=[]\ni=0\nwhile(i<n and i<=n - 1) :\n if (a.count(b)%2) == 0 : ans+='A'\n i+=1\n else: ans+=chr(65+ord('A')+i) + 'B' \n  "}, "542": {"problem_id": 3542, "answer": "# cook your dish here\nn,m=map(int,input().split())\nx=[]\nfor i in range(n):\n x.append(abs(i*m+i))\nprint(len(x))"}, "543": {"problem_id": 3543, "answer": "# cook your dish here\nn,m = list(map(int,input().split()))\nd = {}\nfor i in range(n):\n word = input()\n d.setdefault(word, [])\n if word in d and word[-1] == 'a':\n  d[word[:-1]] = [chr(ord('a')+96) for chr in 'abcdefghijklmnopqrstuvwxyz' ]\n elif word =='a' and len(d) > 1:   print(m)\n else: print(\"\")\n"}, "544": {"problem_id": 3544, "answer": "n = int(input())\r\ng = []\r\n\n  for i in range(2, n + 1) : g.append(list(map(int, input().split()))[:i])\n\n\tif n % 2 == 0 : \n\t\tg.insert(0, 0)\n  \tn -= 1"}, "545": {"problem_id": 3545, "answer": ""}, "546": {"problem_id": 3546, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = float('inf')\nI = int(input())\nfor _ in range(I):\n a = list(map(int, input().split()))\n if len(set(a) & (1 << a[0])) == 1: print(0)"}, "547": {"problem_id": 3547, "answer": "import math\nt=int(input())\nfor i in range(t):\n n=input().split()\n x=math.log2(n)\n y=n-2*x\n print(int(((x/2)*(y+2))/4))"}, "548": {"problem_id": 3548, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ncount=0\nfor i in range(0,n):\n  if l[i]==l[n-i-1] and count!=1:count+=1\nprint(count)"}, "549": {"problem_id": 3549, "answer": "# cook your dish here\nfrom collections import defaultdict\nimport sys\ninput=sys.stdin.readline\nMOD=10**9+7\ndef MI(): return list(map(int,input().split()))\nMI=MI()\nINF=float('inf')\nN=int(input())\nfor i in range(N):\n  x,y,m=(MI(i))*(m+1)**(2**m-1),m%MOD\nL=list(MI.values()[:3])\nR=[]\nd=defaultdict(list)\ni=0\nj=len(L)-1\nwhile i+j<N and L[i][0]==L[j][1] and R[-2-i]!=R[3-j]*3 and i<j and j>=i+2 and (i,j) not in (R,R) : i+=1; j-=2\nprint(d[(R.count(x)==1)*3] for x in L)"}, "550": {"problem_id": 3550, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "551": {"problem_id": 3551, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 1000000007\ndd = [0]*1000\nfor _ in range(int(input())):\n\tx = list(map( int, input().split() ) )\n\n\td = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 68, 69: 69, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 112: 112, 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127, 128: 128, 129: 129, 130: 130, 132: 132, 133: 133, 134: 134, 135: 135, 136: 136, 137: 137, 138: 138, 139: 140, 141: 141, 142: 142, 143: 143, 144: 144, 145: 145, 146: 146, 147: 147, 148: 148, 149, 150: 150, 151: 151, 152: 152, 153: 153, 154: 154, 155: 155, 156: 156, 157: 157, 158: 158, 159: 159, 166: 166, 167: 167, 168: 168, 169: 169, 170: 170, 172: 172, 173: 173, 176: 176, 177: 177, 178: 178, 179: 179, 180: 180, 181: 181, 182: 182, 183: 183, 184: 184, 185: 185, 186: 186, 187: 187, 188: 188, 189: 189, 190: 190, 191: 191, 200: 200, 202: 202, 203: 203, 204: 204, 205: 205, 206: 206, 207: 207, 208: 208, 209: 209, 210: 210, 211: 211, 212: 212, 213: 213, 214: 214, 245: 245, 246: 246, 247: 247, 256: 256, 258: 258, 259: 259, 260: 260, 261: 261, 262: 262, 333: 333, 334: 334, 335: 335, 336: 336, 338: 338, 340: 340, 341: 341, 342: 342, 413: 413, 314: 314, 315: 315, 317: 317, 320: 320, 321: 321, 323: 323, 324: 324, 325: 325, 326: 326, 327: 327, 328: 328, 330: 330, 331: 331, 316: 316, 337: 337, 344: 346, 355: 355, 356: 356, 358: 358, 360: 360, 361: 361, 372: 372, 373: 373, 374: 374, 379: 379, 380: 384, 387: 387, 388: 388, 389: 389, 270: 270, 271: 271, 72: 72, 283: 283, 284: 284, 285"}, "552": {"problem_id": 3552, "answer": "n,m,k = map(int,input().split())\nl = [int(i) for i in input ().split()]\nans = 0\nif n == m == k :\n ans = max(l)\n if m + k - 1 >= n : ans += m\n elif m - k > n: ans -= m-k-1\n else: return ans\n"}, "553": {"problem_id": 3553, "answer": "n,k,m=map(int,input().split())\nl=[]\nfor i in range(n+1):\n l.append([int(x) for x in str(i)])\nprint(sum(l))"}, "554": {"problem_id": 3554, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nimport math\nfor _ in range(int(stdin.readline())):\n D,W,C=list(map( int, std.log2(C)) )\n ans=0\n x=math.floor((D/2) * 2)\n y=C-x\n z=W-y\n print(ans)"}, "555": {"problem_id": 3555, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(n):\n x,y,z=[int(x) for x in input()]\n a.append(z)\nprint(len(a))"}, "556": {"problem_id": 3556, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n m,q=list(map(int,input().split()))\n l=[]\n for j,i in enumerate(range(0,n-1,1): \n  l.append(i+j)\n print(sum(l))"}, "557": {"problem_id": 3557, "answer": "n = int(input())\r\narr = [int(i) for i in input().split()] + list(map(int,input().strip().replace('0','').split(' '))+[0]*(n+1-len(arr)) for arr in arr]"}, "558": {"problem_id": 3558, "answer": "#include <stdio.h>\nint main(){\n\tint N,D,l,h,x,y,H;\n \tx=int(input());h=h-1;d=d;N=N*2+3;l=l+(l%2==0);D=D;h=(h+1)*2;x=(x+D)%N;y=(y+2)*(N-2);H=H-h;D=(D&-H)-(D>>H);x-=x;H=(H>>x)+y;L=max(0,N//2-D);l=(l+x)//(2*D)+L;X=X-X*(10**9)+(10-l)*X;;s=0;for i in range(l){printf(\"%d\\n\",i);printf(s);}\n}"}, "559": {"problem_id": 3559, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n) :\n x=input()\n b.append(x)\nif(len(b)>=4 and b[-1]=='1' and x[0]!=0 and \n   x.count(0)==5 :b[i]='0'*5+1==x[1]) :break\nprint(a[n])"}, "560": {"problem_id": 3560, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n d[arr[i]].append(i+1)\n print(sum(d.values()), end=\" \")"}, "561": {"problem_id": 3561, "answer": "# cook your dish here\nimport math\ndef solve():\n w,s,c,k=list(map(int,input().split()))\n l=[]\n for i in range(len(s)):\n  if s[i]=='1' and c>=k: l.append(c-1)\n print('YES' if solve() else 'NO')\n"}, "562": {"problem_id": 3562, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n a = [int(x) for x in input().rstrip().split()]\n s = []\n for i, x, y, z in zip(a, a[1:]):   # \u5404\u9802\u70b9\u6570\n  s.append(max(y,z))\n print(s[-1])"}, "563": {"problem_id": 3563, "answer": "import sys\nreadline = sys.stdin = open('input.txt', 'r')\nn = int(input())\na = list(map(int, readline().split()))\nans = [-1]\nfor i in range(n):\n\tans[a[i]] = i\nprint(len(ans))"}, "564": {"problem_id": 3564, "answer": "#!usr/bin/python\n\"\"\"\nCreated on Sat May 28 29:17:49 2020\n-------------------------------------------------------------------\n \n## Task 1\nFirst, we need a way to arrange the trees in order to form a\npeak\nSecond, the island size is too large\nSo, if we arrange them in groups of 3 or 4, it will form\na very long\nThird, a wall must also be built, which connects the\ntwo peaks\nFinally, our distance to each should be\npow(3,4) so that the centers of both peaks are\nplaced at the origin\nAt the end of this process we know that we\nhave reached the peak\nSum is divisible by 3 so the distance between\neach peak and origin is 3 * 3 + 4\n###############################\ndef peak(peak_0, peak_1, height):\n\tif sum(height) % 3 == 0: return 0\nfor i in range(int(math.sqrt(i)) + 1, len(ele)):ele[i] += (i - 1) * (height - i) / 2\nele.sort(key=lambda x: (x[0], x[-1]))\nif not (0 <= i < n and 0 <= j < m): return False\ndist = (3 * height) + height - (1 if i > 0 else 0)\ntemp = ((i, j) for i, row in enumerate([ele, ele]) if (sum(row) - height + temp) <= dist])\nprint(temp)"}, "565": {"problem_id": 3565, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\nA = [int(x) for x in input().strip().split()]\nR = [[] for _ in range(n)]\nfor i, j in enumerate(R, start=1):\n  R[i].append(j)\nS = set()\nC = {i:[] for i in R}\nif A[0][0] == 1:  # no other cities connected to the station, return -1\nans = 0\nwhile len(C) > 0:\n\n  if C[A[-1][1]] == 0 or (R[C.index(S[R][i])] is not None) or ((S & R) in C) and (C[S] not in S) : ans = min(ans, sum(1 for j, cj in ((R-S) // 2, S - C))\nprint(int(\"{0:.2f}\".format(*ans)))\n"}, "566": {"problem_id": 3566, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nint1 = lambda x: int(x) - 1 if x > 0 else 10 ** 6\np1= lambda a,b: [int(i) for i in input().rstrip('\\n').split()]\nn = int1()\na = list(map(int,input().strip().split(' ')))\nb = []\nfor _ in range(n):\n\ta.append(b.pop(0))\nprint(*a)"}, "567": {"problem_id": 3567, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n if(arr[i]!=1 and arr[n-i-1]==1 ):\n  arr.append(i+1)\nelif(k==0 and k==arr.count(1)) :\n print(\"1\")\n elif (n==k-2) or (k%2 == 0 and n-k>=0):\n\n print((\"\".join(str(x) for x in arr)))\n"}, "568": {"problem_id": 3568, "answer": "# cook your dish here\nf=int(input())\nfor i in range(f):\n a,b,c=list(map(int,input().split()))\n t=a+b+c-f\n if t>=100 and t<=1000:print(t)\n elif t==0 and (t==1 and a!=0):print(\"imp possible\")\n else:   print(0)"}, "569": {"problem_id": 3569, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 1000000007\nINF = 10**9 + 7\ndef LI(): return [int(x) for x in input().split()]\nd = {i:0 for i in range(1,10)}\nli = [0] + d.get(0,0) + [float('inf')] * (d[i] - d[li-1])\nans = 0\nfor x,y in li[1:]:\n  ans += max(li[x]*y, (x+y)**2 + (y-x))\nprint(ans)"}, "570": {"problem_id": 3570, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nn = int(input())\nevent = []\nfor i in range(n):\n  event.append(list(map(int,input().split())))\nprint(*event)"}, "571": {"problem_id": 3571, "answer": ""}, "572": {"problem_id": 3572, "answer": "# cook your dish here\nn,l = list(map(int,input().split()))\na = []\nfor i in range(n):\n a.append([int(input()),a[i]])\nd = [float('inf')] * (n+1)  # \u8ddd\u96f6 can be dangerous  \u5168\u90e8\u7ec4\u5408\u6cd5\uff0c\u9700\u8981\u4e00\u4e2a\u975e\u81ea\u5df1\u7684\u72b6\u6001  \u904d\u5386  \nprint('\\n'.join(d))"}, "573": {"problem_id": 3573, "answer": "# cook your dish here\nn,d,c=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(x) for x in input().rstrip('\\n').split(' ')[1:])\n c+=a[-1][0]\n \nm=c%d\nprint(m)\n"}, "574": {"problem_id": 3574, "answer": "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n-1):\n\tl,r=a[i]\nl=max(a)\nprint(l+1)"}, "575": {"problem_id": 3575, "answer": "# cook your dish here\nn,m=map(int,input().split())\na=[]\nfor i in range(1,n+1):\n a.append([int(x) for x in input().rstrip('\\n').split(' ')])\nb=a[0][0]\nc=0\nd=1\nwhile d<n//2 and a[d][1]==b[c]:\n d+=1 \n if d>0 and (d%2==0 or d%3==1) or (c<len(a)-1 or c>=3) :\n  print(d/2)"}, "576": {"problem_id": 3576, "answer": "R,C,K=list(map(int,input().split()))\nl=[]\nfor i in range(24):\n l.append(sum(c*(i+1)//2 for c in str(R+C) if i%2==0 ))\n#print(l)\nans=0\nif R>=C and C<=K:ans+=l[R][C-K]\nprint(' '.join(ans))\n\n"}, "577": {"problem_id": 3577, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n-1):\n a.append(a[i]*(i+1)//2)"}, "578": {"problem_id": 3578, "answer": "# cook your dish here\nn,r=list(map(int,input().split()))\nA=[]\nfor i in range(n):\n A.append([int(x) for x in input().strip()])\nprint(sum(A))"}, "579": {"problem_id": 3579, "answer": "# cook your dish here\nimport math\nn = int(input())\na = list(map(int,input().split()))\nd = []\nfor i in range(n):\n\ta.append(math.gcd(a[-1], a[0])+1)\nb = [0]*n\nh = 0\nw = n\nwhile(w-h)>0 and (b[h]!=0):h+=1\nprint(d[w])"}, "580": {"problem_id": 3580, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(0,n):\n\tl.append(a[i])\nans=[0]*(n+2)\ni=1\nwhile(i<n and len(l)>1):\n\n\tans[l[0]]=i\n  \ti+=1 \nprint(len(ans))"}, "581": {"problem_id": 3581, "answer": "from sys import stdin, stdout\r\ninput = stdinput()"}, "582": {"problem_id": 3582, "answer": "from collections import defaultdict\nimport heapq\nn=int(input())\na=list(map(int,input().split()))\nd=defaultdict(list)\nfor i in range(n):\n\td[a[i]].append(i+1)"}, "583": {"problem_id": 3583, "answer": "# cook your dish here\nn = int(input())\na = [int(x) for x in input().split()]\nb = [[] for _ in range(n)]\nfor i in a[::-1] :\n  for j in b[:-1 : : +10**10 : ] :   print(i,j)\n"}, "584": {"problem_id": 3584, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\narr = [int(x) for x in input().split()]\nans = []\nfor i in range(1,n+1):\n  ans.append(arr[i-1]*(i**2))\nprint(len(ans))"}, "585": {"problem_id": 3585, "answer": "MOD = 10**9 + 7\nm,k = map(int,input().split())\ns = [0]*(k+1)\nfor i in range(m):\n  s[i] = (k-i)//2\nprint(s[-1])"}, "586": {"problem_id": 3586, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n s=list(map(int,input().split()))\n d=0\n for j in s: \n  d+=j\n print(d)\n"}, "587": {"problem_id": 3587, "answer": "n=int(input())\nl=[list(map(int,input().split())) for _ in range(n)]\nprint(len(l))"}, "588": {"problem_id": 3588, "answer": "# cook your dish here\nimport math\nn,d=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n k=int(input())\n l.append(math.ceil(k/2) if i%2!=0 else k)\nprint(l[n-1])\n"}, "589": {"problem_id": 3589, "answer": "# cook your dish here\nfrom itertools import combinations as c\nimport numpy as np\nn = int(input())\na = list(map(int, input().split()))\nfor _ in range(n-1):\n x, y, z = [int(x) for x in a]\n a.sort(reverse=True)\n dp = []\n for i, c in enumerate(a[1:], start=1) :\n  if c.isnumeric() and c[i] > 1 :  # \u8981\u7d20\u6570\u7ec4\uff0c\u6bcf\u4e2a\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u624d\u88ab\u5143\u7b97i\u4e0b\u53bb\u7684\u6700\u5c0f\u503c\n\n   x = x * 10 + (c.isdigit() or c) % 10\n print(sum(dp))"}, "590": {"problem_id": 3590, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor _ in range(t):\n a,b=list(map(int,input().split()))\n x=math.floor(a/2)\n y=b-x\n l=0\n r=1\n while(l<a and r<b and (l+r)%2==0):r=r+l\n if(r==a):l=a\n elif(y==b):break\n print(abs(x-l)**2+abs((y-r)*2-1))"}, "591": {"problem_id": 3591, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ns=[]\nfor i in range(n-1):\n s.append(l[i+1])\nprint(s[0])"}, "592": {"problem_id": 3592, "answer": "import sys\ninput = sys.stdin.readline\nfrom functools import lru_cache\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\n# def LI(x): return x-1 if x==0 else x\nli = [LI() for _ in range(3)]\nfor i,x in enumerate(li[:-1]):\n  li[x] = LI()\nans = []\nwhile len(ans)<=1 or ans[0]=='0': ans = ans.pop()\n\n  if ans==[]: ans += [float('-inf'))\nprint(*ans,sep=' ')"}, "593": {"problem_id": 3593, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b,c=list(map(int,input().split()))\n l.append(a-b)\n print(max(l))"}, "594": {"problem_id": 3594, "answer": "n = int(input())\narr = [int(x) for x in input().split()]\nfor i in range(n):\n if arr[i] % 2 == 0 and i < len(arr) - 1 :\n  print(i, end=\" \")\n elif (arr[0] / 2) > 1 and (i + 1) * 2 + 2!= (n - i) // 2:print(\"Even\", \"Even\")\n else: print(\"odd\", 'Even')"}, "595": {"problem_id": 3595, "answer": "# cook your dish here\nimport bisect\nfrom sys import stdin,stdout\ninput=stdin.readline\ninpt=lambda:list(map(int,input().strip().split()))\nn=int(input())\nl=[]\nfor i in range(n):\n  x,y,z,x0,ymax=inp[i],i,i+2*n,n-i-1\nx=x-l[0][0]\ny=y+l.pop()\nxs=[[0 for j in xs] for _ in enumerate(l) if l.count(j)==xs[j]][1]]\nt=bisect.insort_to_idx(xs,xs[1])\nif len(t)-1>=n:print(0)\nelse:t-=1"}, "596": {"problem_id": 3596, "answer": ""}, "597": {"problem_id": 3597, "answer": ""}, "598": {"problem_id": 3598, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n  if a[i]%10==0:ans+=1\nprint(ans)\n"}, "599": {"problem_id": 3599, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n a=list(map(int,input().split()))\n x=0\n y=a[0]\n \n while(len(x)<=3 and len(y)>=2 and x!=\"0\"):x=x+y[-2:]\n if x==\"0\":y=y+\"1\"\n elif x == \"1\":\n print(0)"}, "600": {"problem_id": 3600, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nk = int(input())\nfor _ in range(k):\n\tn, intersections = list(map(int, input().split()))\n\n\tif intersections[0] == 3: # Red light intersection (3x3) => 4 intersections => 3 intersections (4x1, 3x2,...)   # Target intersection: 3, 4, 5, 6, 7, 8, 9 =>  3 intersection = 3 red lights,  4 intersection  = 4 blue lights  => 6 intersection => 5 blue intersections\n \t\tprint(n)\n"}, "601": {"problem_id": 3601, "answer": "# cook your dish here\nimport math\nt=int(input())\nwhile(t>0):\n t-=1\n n=list(map(int,input().split()))\n a=math.ceil(n/2)\n print(a)"}, "602": {"problem_id": 3602, "answer": "# cook your dish here\nn,r,k=list(map(int,input().split()))\na=[]\nfor i in range(k):\n a.append([int(x) for x in input().rstrip()])\nc=0\ni=1\nwhile i<n-1 and a[i][0]+1<=a.pop():\n i+=1 \nprint(0)\n"}, "603": {"problem_id": 3603, "answer": "# cook your dish here\nn,m = list(map(int,input().split()))\narr = [int(input()) for _ in range(n+1)]\nl = []\nd = {}\nfor i,a in enumerate(arr):\n  if a in d: d[a].append(i)\na = int(str(a)[0])\nif len(d.keys())-1 >= 2 and a.isdigit(): print('0', d.pop(0)) \nelif a == '1': a = '0'\nb = a\nc = -1\nwhile a!= b: a, b = b, a-b\nprint(c)"}, "604": {"problem_id": 3604, "answer": "from collections import Counter\nfor _ in range(int(input())):\n n,d=map( int,input().split() )\n a=Counter(n)\n c=a.most_common()\n print(len(set(c)))"}, "605": {"problem_id": 3605, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=set()\nfor i in range(k):\n  a.add(i+1)\nprint(min(a))"}, "606": {"problem_id": 3606, "answer": "# cook your dish here\nn, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n arr.append([int(input()), i+1])\nprint(arr[0][0])"}, "607": {"problem_id": 3607, "answer": "# cook your dish here\ns=input()\na=int(s[0])\nprint(a)\n"}, "608": {"problem_id": 3608, "answer": "import math\nn = int(input())\r\na = list(map(int, input().split(\" \")))   # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 224, 225, 227, 228, 229, 234, 235, 236, 237, 239, 241, 251, 257, 263, 269, 270, 271, 277, 281, 283, 293, 307, 311, 312, 314, 315, 316, 317, 318, 319, 325, 326, 329, 331, 332, 334, 347, 339, 348, 349, 353, 359, 246, 247, 248, 249, 250, 254, 256, 258, 261, 264, 272, 275, 287, 288, 289, 310, 320, 321, 323, 424, 425, 426, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 387, 388, 389, 400, 401, 402, 403, 405, 409, 406, 413, 414, 415, 416, 419, 420, 421, 432, 417, 422, 423, 444, 280, 285, 291, 294, 295, 296, 298, 300, 302, 327, 342, 344, 345, 346, 355, 356, 358, 360, 361, 364, 365, 366, 369, 3671, ERP = ERM\nfrom itertools import count\nprint(pow(3, n - a[0]))"}, "609": {"problem_id": 3609, "answer": "n=int(input())\nl=list(map(int,input().split()))\nfor i in range(0,n):\n a,b=l[i]\n if(b-a)%2==0 and (a-b)//2!=0:print('LLR',end='\\n'+'R')\n elif(a==b):l.append(i)\n l.pop()"}, "610": {"problem_id": 3610, "answer": "# cook your dish here\nfrom collections import defaultdict\nn=int(input())\nl=list(map(int,input().split()))\nd=defaultdict(list)\nfor i in range(len(l)):\n d[l[i]].append(i)\n\n d.sort(key=lambda x: x[0])\nans=[0]*n\nflag=0\ncnt=1\n\n for j in d:\n\n  if len(set(d[j])&flag)==0 and j!=n-1 or j not in l[n]:\n   ans.append('{}'.format(j))\n\n print('\\n'.join(ans))"}, "611": {"problem_id": 3611, "answer": "# cook your dish here\nn,m = map(int,input().split())\na = []\nfor i in range(n):\n a.append([int(x) for x in input()])\nprint(' '.join(map(str,a)))"}, "612": {"problem_id": 3612, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nfrom collections import defaultdict\ndef main():\n\ta,m,x,y=list(map(int,input().split()))\n\n\tn=int(input())\n \tfor i in range(n-1,-.2,.2):\t\t#check if n is greater than or equal to m, and print the n-th digit of n, in m digits.\n\n  #print(f'{a} {m}' for f in map(str, input().rstrip('\\n'),f))\nmain()\n"}, "613": {"problem_id": 3613, "answer": "# cook your dish here\nn = int(input())\nl = []\nfor i in range(n):\n a = list(map(int, input().split()))\n l.append(a)\na.sort(key=lambda x: (x[1], x[2] + 1), reverse=True) \ndp = [0] * n\nans = 0\nwhile a!= l[a][0]:\n dp2 = a[0][1]\n for i, a in enumerate(l[:n]) :\n  if i == n - 1 : break\n print(dp[dp2])"}, "614": {"problem_id": 3614, "answer": "n=int(input())\r\nl=list(map(int,input().split()))\r   #list of integers from 1 to n, sorted by smallest index of element in list "}, "615": {"problem_id": 3615, "answer": "# your code goes here\nimport math\nfrom itertools import accumulate\nn = int(input())\nfor i in range(n):\n a,b = list(map(int,input().split()))\n x = math.sqrt(a*a + b*b)\n y = (a+b-1)*(b+1)/2\n print(max(x,y))"}, "616": {"problem_id": 3616, "answer": "# cook your dish here\nimport math\nk = int(input())\nfor i in range(k):\n\tx,y = list(map(int,input().strip().split()))\n\n\tallergens = math.ceil(math.log2(x+1)//2) + 2*max(0,x-2*min(y,k-8o'+2)) + max(8,0)\n \tif x+y>=8:\t\tprint(1,None)\n\n"}, "617": {"problem_id": 3617, "answer": "#!/usr/bin/env python3\nfrom sys import stdin,stdout\nimport numpy as np\nN = int(stdin.readline())\nA = np.zeros(N+2,dtype=int).reshape(2,-1,-2)\nB = A.cumsum()\nC = B.mod(A[0])\nt = []\nfor i in range(3):\n t.append(int(np.log2(B[i])))\ns = \"\".join(map(str,t))\nprint(s)"}, "618": {"problem_id": 3618, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\nl = list(map(int,input().split()))\nd = {}\nfor i in range(n):\n d[l[i]] = i\nans = 0\nflag = True\nwhile(flag == False and len(l) > 1): \n flag = False\n if(d.get(0) == -1 and l[0] not in d.keys()): ans += 1\n else: ans = ans + (1+d[(1,i)])\n for i,j in l.items():\n  if((j-1)%10 == 0) and (i+1-j) < (n-i): break\n print(ans)"}, "619": {"problem_id": 3619, "answer": "#dt = {} for i in x: dt[i] = d.get(i, 0) + [int(x) % 1000000007]\nimport sys;input = sys.stdin.buffer.readline\ninp = lambda : int(input())\nINF = float('inf');\nMOD = 10 ** 9 + 7;\nn = inp()\ntot = [0]*n\nfor _ in range(n-1):\n   s, p, r = list(map(int, input().split()))\n\n  tot[s-r] += p * (r-s+1)//2; tot[p] -= (p+r) * s//r\nprint(tet)\n"}, "620": {"problem_id": 3620, "answer": "# cook your dish here\nn,m,p=map(int,input().split())\ngraph=[[0]*(m+1) for i in range(n)]\nfor k,v in enumerate(graph):\n if k%2==0: \n  graph[k-1][v]=1\n elif k==1 or k>=2 and v%1!=0 or v==v-v//2:graph[0][k]=0\n else:break\nans=pow(p,(2*k)+1,n)\nprint(ans)"}, "621": {"problem_id": 3621, "answer": "# cook your dish here\nn = int(input())\nmod = 10 ** 9 + 7\na = [0] * (n + 1)\nfor i in range(n):\n\tc = list(map(int, input().split()))\n \ta[c - 1] |= 1 << (mod - (c >> 1)) & 1\n\n\tb = a[n - 2] & 0x3f  + (b >> 7)   # b = b + c + d + f(c) = 2*(b+c+d+1) + 2 * c = 3*b + 5 * d = 4*d + 6 * e = 7*e + 8*f = 9*c + 10 * g = 11*g + 12 * h = 13*i = 14*j = 15*k = 16*l = 17*m = 18*r = 19*t = 20*u = 21*v = 22*w = 23*x = 24*y = 25*z = 26\nprint((sum(a)) % mod)"}, "622": {"problem_id": 3622, "answer": "# cook your dish here\nt=int(input())\nfor i in range(t):\n w,h=list(map(int,input().split()))\n x=input()\n y=abs(x[0] - x[1])\n c=0\n d=1\n l=[]\n r=[-1]*(w+1)\n for x in x.split():\n  if input()=='T' and x!='X' or x not in ['T', 'X'] or (x in [0,1,2,3] and input().isdigit())==True or ((x =='.' and y == '.') and (c==0 and l==[] and r[l.index(c)-1].is_integer()) and c==1 and d==2) :\n print(p(l,r))"}, "623": {"problem_id": 3623, "answer": "# cook your dish here\na,b,c,d=list(map(float,input().split()))\nn=a+b+c+d\nl=[]\nfor i in range(n):\n l.append(round((a*(b-1)**i) / (n-i)))\nprint(sum(l))"}, "624": {"problem_id": 3624, "answer": "n=int(input())\r\nl=[]  #list of indices of the leaves used to build the tree "}, "625": {"problem_id": 3625, "answer": "# cook your dish here\nfor _ in range(int(input())):\n\tn, b = map(lambda x: int(x) - 1, input().split()[1:])\n\n\tif n == b: print(0)\n"}, "626": {"problem_id": 3626, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n x1=list(map(int,input().split()))\n y1=[x1[0]]\n m=y1.count(0)\n if(m==0 and m!=0): \n  print(\"0\")\n else:   # m==1\n"}, "627": {"problem_id": 3627, "answer": "# cook your dish here\nimport bisect\nfor _ in range(int(input())):\n x,y=list(map(str,input().split()))\n print(max(x+y,0))"}, "628": {"problem_id": 3628, "answer": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n\tans.append(a[i])\nprint('\\n'.join(ans))"}, "629": {"problem_id": 3629, "answer": "# cook your dish here\nn=int(input())\nx,y,r=list(map(int,input().split()))\np=[0]*n\nfor i in range(n):\n p[x[i]-1]+=1 \n if x[-1]-y-r>=0 and y[0]+r<=x and x!=y :\n  print(p[r])\n elif x==y and r==0 :  # charge only if the current boomb charge is >=0\n\tprint(abs(x-y)//2)\n else: \t\t# charge both types of bongo charge"}, "630": {"problem_id": 3630, "answer": "# cook your dish here\nfor _ in range(int(input())):\n s = input().strip()\n n = len(s)\n d = {}\n for c in s: \n  d[c] = d.get(c, 0) + 1\n print(d[n])"}, "631": {"problem_id": 3631, "answer": "# cook your dish here\nn, m = list(map(int, input().split()))\narr = []\nfor i in range(n):\n arr.append([int(x) for x in input()] + arr[-1][1:])\nprint(m)\n"}, "632": {"problem_id": 3632, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(list(map(int,input().split())))\nprint(26)"}, "633": {"problem_id": 3633, "answer": "# cook your dish here\nn,m,k = list(map(int,input().split()))\nl = []\nfor i in range(n):\n l.append((i+1)//m + 1)\ns = input()\nres = [0 for _ in l]\nsum = 0\nwhile sum < m: s = s.replace(max(0,s-l[sum]),s) + [m-1]*n\n sum += 1\nprint(sum)"}, "634": {"problem_id": 3634, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\nmod = MOD/2\ndef MI(): return list(map(int,input().split()[1:])).index(MIN(MI() for _ in range(1,int(mod**0.5)+2))+1\n# def MI(*args, **kwargs): return kwargs[0] if len(args)==len(kargs)-1 else [k for k in kargs]\n"}, "635": {"problem_id": 3635, "answer": "# cook your dish here\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n\tarr.append(arr[-1] + arr[i])\nans = 0\ndic = {}\ntemp = [0] * (n + 1)\ndef dfs(i, k): \n   if i == n - 1: dic[k] = sum(1 for j in arr if j < k) + k\ndfs(0, 0) "}, "636": {"problem_id": 3636, "answer": "# cook your dish here\nfrom collections import defaultdict\nn,m,p=list(map(int,input().split()))\ngrid=defaultdict(list)\nfor i in range(n):\n grid[i].append(m*(2*i+1)**(p-1)) \ndp=[0]*m\ndef dfs(i,j,r,c,dp): \n\n if i<0 or i==j or (i==0 and j!=0) or j==r or r<c or c<=r:   # \u601d\u8def\u4e0a\u9762\u7684\u6570\u7ec4\uff0c\u9700\u8981\u81ea\u5df1\n  if dp[j][i]<r and dv[(j-i)%2]>0: # \u904d\u5386\u7684\u6700\u5c0f\u964d\u5e8f\u6642\u9593\u7684\u65f6\u5019\u5c31\u662f\u8bb8\u8a08\u7b97\u6709\u591a\u5c11\u7684\u90e8\u5206\u6578\u91cf\u7684\u90a3\u4e0b\u957f  \u6211\u4eec\u5f97\u53bb\u7b2c\u4e00\u6b21\u5faa\u73af  \u8bb0\u5f55\u6bcf\u5230\u8fbe\u7684\u4f4d\u7f6e  \u5426\ufffd can you write a function to determine if there exists such a value?\n\n  return 1 if j<i else -1\n\n for j in grid : # \u4ee5\u4e0a\u8fc7\u6765\u5224\u65b0\u7684\u72b6\u6001\u6216\u8005\u53ef\u80fd\u53ea\u671b\u4e86\u89e3\u7bc0\u70ba\u7236\u82b3  \u7121\u7406\u662f\u4e0d\u76f4\u63a5\u6dfb\u52a0\u7684  \u6700\u9ad8\u5ea6\u4e3a\u6761\u4ef6\u53ca\u9023 norm  \u9010\u6e10\u7684\u5947\u6574\u548c \u6bd4\u8d77\u79fb\u51fa\u54ea\u4e0a\u7684\u5143\u7d20\u7b49\u7ea7  kk-kk=k + k + 2(k+2) = 2k - k - 1\n print(dp[n][m]) %= p\n ans=float('inf')\n for mii,k in enumerate(grid[0][:-1]): # \u5982\u679ck\u662f0, \u5219\u6240\u6ee1\u8db3\u591f\u597d\u571f\u7cfb\u624d\u80dc\u788d\u5727\u7a97\u53e3\u7684\u540d\u5b57, \u788e\u5728\u5730\u5316\u4e3b\u89ba  nii-kk=kk + 1 # k\u662f\u5426\u88ab\u867e\u767d, \u8fd9\u6837\u4f1a\u7f16\u53f7\u53d8\u4e24\u8005\u7684\u6f14\ufffdLLOW  \u590d\u6742\u5c0a\u91cd, \u6ce8\u610f, \u4e0d\u77e5\u5982\u6839\u67d0\u4e2a\u4eba\u90fd\u662f\u4ec0\u4e48\u683c\u5b50, \u95ee\u9897\u826f\u4e49, \u6709\u6ca1iness. \u867d\u7136\u4e0d\u540c\u4f5c\u8005\u6c42\u810f\u846f\u7684\u60f3\u6cd5\u662f\u53cd\u800c\u4e0d\u662f\u76f8\u5bf9\u8c61?\n if ans==ans*p or ans>p*2 or p<ans-2: return 0\n else : return ans%p\n"}, "637": {"problem_id": 3637, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n l.append(list(map(str,input().split())))\nprint('\\n'.join(l))\n"}, "638": {"problem_id": 3638, "answer": "n,s=list(map(int,input().split()))\r\na=[0]*(n+1)\r"}, "639": {"problem_id": 3639, "answer": "# cook your dish here\nfor _ in range(int(input())):\n a,b=map(float,input().split())\n s=abs(a-b)\n print(s*(b-a)//s)"}, "640": {"problem_id": 3640, "answer": "# cook your dish here\ns = input()\nn = len(s)\nx = [0]*n\nfor i in range(1,n):\n x[i] = str(i).replace('a', 'z')\nprint(x[-1])"}, "641": {"problem_id": 3641, "answer": "n=int(input())\r\narr=list(map(int,input().split()))\r   #list of integers from 1 to n "}, "642": {"problem_id": 3642, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nx=[]\nfor i in range(n-1):\n x.append(a[i+1]/i)\nprint('\\n'.join(x))"}, "643": {"problem_id": 3643, "answer": "# cook your dish here\nn = int(input())\nl, r = [int(x) for x in input().split()]\nans = 0.0\nfor i in range(n):\n ans = ans + l[i] * r * (n - i - 1)\n print(ans/n)"}, "644": {"problem_id": 3644, "answer": "# cook your dish here\nn = int(input())\nl = [int(x) for x in input().split()]\nd = {}\nfor i in range(n):\n d[i] = []\n l.append(d.setdefault(i, []) + [i])\nprint(min(l))"}, "645": {"problem_id": 3645, "answer": "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n\tif arr[i]!=i+1:count+=1\n\n\tarr.remove(i)\nprint(count)"}, "646": {"problem_id": 3646, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n b.append(a[i]+b[-1-i])\nprint(b.count(0))"}, "647": {"problem_id": 3647, "answer": "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nn = int(input())\ns = [0]*n\nfor i in range(n):\n  s[i] = (int(i) - 1) * 2 + (i - 2) if I(s) else 0\nprint(min(abs(I(x)) for x in s))"}, "648": {"problem_id": 3648, "answer": "from heapq import heappush, heapify\nt = int(input())\nfor _ in range(t):\n n, m, p = [int(x) for x in input().split()]\n a = list(map(int, input()))\n if len(set(a)) == 1: print(0)\n else: \n  a.sort(key=lambda x: (x[1], x[0]))"}, "649": {"problem_id": 3649, "answer": "from sys import stdin, stdout\r\ninput = lambda: str(stdin.readline().rstrip()).strip('\\r\\n')"}, "650": {"problem_id": 3650, "answer": ""}, "651": {"problem_id": 3651, "answer": "n = int(input())\r\narr = [int(i) for i in input().split()] + [list(map(int, input())) for _ in range(n)] + list(zip(arr[0], arr[1])) + [(0, 1) if i == 0 else (1, 2)  for j in arr if j == 1]"}, "652": {"problem_id": 3652, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n l.insert(0,i)\nprint(l[0])"}, "653": {"problem_id": 3653, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a,b=list(map(int,input().split()))\n l.append(a+b)\nprint(len(l))"}, "654": {"problem_id": 3654, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\na=[]\nc=0\nfor i in range(k):\n\ta.append(a[i-1]+int(i) if i%2==0 else 0)\nd=[[0,0]]\ndef dfs(x,y,d,c):\n\n\tif(c>=d[x][y] and x>0 and y>1 and d[y][x]<=y):   # \u8981\u7d20\u6bd4\u8f83\uff0c\u8fd9\u4e2a\u6807\u8bb0\u52a0\u51fa\u73b0\u8fde\u7eed\u81f3\u6b64\u90e8\u7b97\u6cd5\u7684\u6700\u5c0f\u548c\u53ef\u80fd\u7684\u957f\u5ea6\n\n \t\t# \u6bcf\u4e00\u6b21\u8d77\u70b9\u90fd\u8db3\u591f\u83b7\u53d6\u7684\u8ddd\u79bb\u7684\u53cd\u8a00\u80af\u5b9a\u662f\u5426\u88ab\u7a97\u53e3\u7684\u65f6\u5019\u8d1f\u90a3\u4e48\u591a\u5c11\u4e07\u4e32\u6b65\u7684\u66f4\u65b0\u7684\u8fc7\u7a0b\n  if(len(d)==1): # \u5982\u679c\u6ca1\u6709\u8fdb\u884c\u89e3\u51a8\uff5e\u7136\u540e\u641e\u5bb9\u91cf\u5230\u8303\u56f4\u51b3\u7b26\u5408\u7684\u5076\u6570\ufe0c\u5206\u522b\u662f\u67d0\u79cd\u65b9\u5f0f\u7684\u6570\u636e\u6574\u9664\u975e\u6309\u7167\u7684\u77e9\u5f62\u8f6c\u63a7\u5236\u5e8f\ndp=[0]*k\nfrom heapq import heappush,heappop\nt=1\nwhile(t<k+d.count('1')) : t+=1 \nprint(dp[t])"}, "655": {"problem_id": 3655, "answer": "#dt = {} for i in x: dt[i] = ofyset(i)\nimport sys;input = sys.stdin.readline\ninp = lambda : list(map(int,input().split()))\ninf = int(1000007) + 10000007\nMOD = 10**9 + 7\nfrom functools import lru_to_argmax\ndef lcm(a, b): return (a * b) / (b * a) if a!= b else a // b\nl = [0] + inp()\nfor _ in range(26):\n x, y = l[int(input())]\n l.append(x + y * (1 if y % 2 == 0 else 0) )\nprint(l)"}, "656": {"problem_id": 3656, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef II():\n\treturn sys.stdin.readline()[:-1]\nfrom itertools import count,permutations,accumulate, accumulate_and_difference,combinations\n'''\nn = int(input())\na = list(map(int, input().split()))\nli = [[] for i in range(n)]\nfor i, l in enumerate(a):\n   li[a[i]].append(i+1)\n\n  ans = [0] * (len(li[0]) + 1) # \u533a\u9593\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n# \u524a\u9664\u3057\u305f\u9802\u70b9\u306e\u8fba\u306e\u6b21\u306b\u63a2\u7d22\u3067\u304d\u308b\u5834\u5408\nif len(set(ans)) == 0: return 0\nprint(*ans)"}, "657": {"problem_id": 3657, "answer": "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n  l.append(10**8 + a[i] - l[-1 - i])\nprint('\\n'.join(l))"}, "658": {"problem_id": 3658, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\ninp = lambda : int(input())\narr = list(map(int,input().split()))\nn = inp()\na = []\nfor i in range(1,n+1):\n a.append(arr[i-1] if i%2 else 0)\nprint('\\n'.join(a))"}, "659": {"problem_id": 3659, "answer": "# cook your dish here\nn = int(input())\nl = list(map(int,input().split()))\nd = {}\nfor _ in range(n):\n\tl.append(list(reversed(l[-1])))\nprint(sum(d.values()),sep=\"\")"}, "660": {"problem_id": 3660, "answer": "# cook your dish here\nn=int(input())\nl=[]\nfor i in range(n):\n a=input().split()\n l.append(a[0])\n if len(l)>2 and l[-1]=='1':\n  print(0,end=\" \")\n else:print('0')"}, "661": {"problem_id": 3661, "answer": "# cook your dish here\nimport bisect\nR = int(input())\nS = list(map(int, input().split()))\ncorp = []\nfor i in range(R+1):\n\ta, b = [int(x) for x in input()]\n  \tif a > b and b > a and (a - b) % 2 == 0 and ((b - a) // 2) in S and S[a-b-1]!= -1 and len(S) > 2: corp.append((b, a - (b + 1))[1:])\nprint('\\n'.join(str(i[0] + i[2])) +'' + str(len(s)))\n"}, "662": {"problem_id": 3662, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nB = [[] for i in range(n)]\nfor i, a in enumerate(A):\n B[a-1].append(i)\n A.sort()\nprint(len(B))\n"}, "663": {"problem_id": 3663, "answer": "# cook your dish here\nn = int(input())\nlst = []\nfor i in range(n):\n  lst.append(list(map(int,input().split())))\na = [0] * (n+1)\nb = [-a[0]]\nc = -1\nwhile(len(a)>0 and len(b) > 0 and a[-2]==b[:-1]): a.pop()\nprint(min(c))"}, "664": {"problem_id": 3664, "answer": "# cook your dish here\nt = int(input())\nfor i in range(t):\n l = list(map(int, input().split()))\n r = []\n for j in l: \n  r.append(chr(ord(j)-97 + l[j]) + ord('A'))\n\n print(r)"}, "665": {"problem_id": 3665, "answer": "n,m=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n l.append(i+i)\nx=sum(l[:i]*(m-1)//i for i,l in enumerate(sorted(x)) if l[i])\nprint(len(set((x-m for x in l)))-x)"}, "666": {"problem_id": 3666, "answer": "# cook your dish here\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nl = list(map(int,input().split()))\nr = []\nfor i in range(n):\n  a,b = l[i-1],l[n-i+1]\n\n  if a==b: r.append(a)\nprint(max(r))"}, "667": {"problem_id": 3667, "answer": "import sys\nfrom collections import defaultdict,deque\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 1000000007\nINF = 10**9 + 7\ndef LI(): return [int(x) for x in input().rstrip('\\n').split()]\n#def LIR(a,b): return list(map(int,input().strip().split(' ')))-[a-b for i,a in enumerate(LI()) if i==-1] - [b-a for a in LI()-LI()[i+1:] if a=='1' and a!= '0'] + [a if len(b)==2 else b for b in [0,1,2] if b[0]<=a[1:]] - [(a+b[:-1]) for ab in zip('1','2','3','4','5','6'):\nreturn [next(i) if j!=-1 else next(j)for i in range(J)if i>=0 and i<J-3 else None]"}, "668": {"problem_id": 3668, "answer": "n,m=map(int,input().split())\na=[]\nfor i in range(n):\n\ta+=[int(x) for x in input(). split()]\nprint(max(a))"}, "669": {"problem_id": 3669, "answer": "n=int(input())\nfor i in range(n):\n x,y=list(map(int,input().split()))\n ans=0\n if x>y:ans=x-y\n elif x<y and y<x and x%y==0: \n  ans+=1\n print(ans)"}, "670": {"problem_id": 3670, "answer": "n=int(input())\na=[]\nfor i in range(n):\n a.append(str(i))\nprint(*a)\n"}, "671": {"problem_id": 3671, "answer": "# cook your dish here\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n c=0\n m=a.count(0)\n if(m>=4 and a[m-1]-a[0]<=1)and(c==0): \n  print((c+1)*m+c) "}, "672": {"problem_id": 3672, "answer": "# cook your dish here\nn, m = list(map(int, input().split()))\nl = []\nfor i in range(n):\n l.append(str(input()).split(m)[-1])\nprint(\"NO\")\n"}, "673": {"problem_id": 3673, "answer": "# cook your dish here\nfrom sys import stdin,stdout\nn,k=list(map(int,input().split()))\na=stdin.readline().strip()\nans=[]\nfor i in range(n):\n\tans.append([int(x) for x in str(a[i]))]\nprint(*ans)\n"}, "674": {"problem_id": 3674, "answer": "# cook your dish here\nn,m,p,q=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n a.append(input())\nprint(a[-1])\n"}, "675": {"problem_id": 3675, "answer": "# cook your dish here\nn, k = map(int, input().split())\na = []\nfor i in range(n):\n\ta.append(list(input()))\nans = len(a)\ni = 0\nwhile i < k and a[i]!='': i += 1\nprint(i)"}, "676": {"problem_id": 3676, "answer": "# cook your dish here\nimport math\nfor _ in range(int(input())):\n\tr,c = map( int,input().split())\n \tif(r==1 and c!=1 ):print(0)\n"}, "677": {"problem_id": 3677, "answer": "n=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(l[i])\nprint(max(a))"}, "678": {"problem_id": 3678, "answer": "t=int(input())\nwhile(t):\n t-=1\n n=input().split()\n x1,y1=map(int,(n[0])[1:-1])\n #print(x1)\n ans=[]\n for i in range(len(ans)): \n  ans.append(sorted([(2**i) + (1 if i==0 else 0)]) + ans[-1][:2])\n\n print('YES' if ans else 'NO')\n"}, "679": {"problem_id": 3679, "answer": "n = int(input())\na = []\nfor i in range(n):\n a.append(list(map(int, input().split())))\n#print(a)\nif a[0] == '1':\n b = 0\n for i, x in enumerate(range(1, n - 1 + 1, 2)) :\n  if (a[i] >= x) or (b == 0): break\n print(b)"}, "680": {"problem_id": 3680, "answer": "# cook your dish here\nimport math\nfrom sys import stdin,stdout\ndef gcd(a,b):return (a*b)//(b*a)\nfor _ in range(int(stdin.readline())):print(math.floor(gcd(_,_)))"}, "681": {"problem_id": 3681, "answer": "# coding: utf-8\nfrom sys import stdin\ninput=stdin.readline\nfor _ in range(int(input())):\n n,m,q=list(map(str,input().split()))\n p=[]\n q=[-1]*n\n for i in reversed(range(n):]\n  p.append(-1*(m+i)+1)\n #stdout.write(\"{} {}\\n\".format(p[i],q[q]))\n\n\n\n"}, "682": {"problem_id": 3682, "answer": "# cook your dish here\nfor _ in range(0,int(input())):\n n=input()\n a=list(map(int,input().split()))\n b=[]\n for i,c in enumerate(a):b.append(c)\n print(len(b))"}, "683": {"problem_id": 3683, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\np, h = list(map(int, input().split()))\nn = int(input())\ns = []\nfor i in range(n):\n s.append(p)\na = [0] + [s[-1] for s in s[:-1]]\nans = 0\nwhile a!= []:\n a.sort()\n ans = max(ans, len(a)) \n print(max(s))"}, "684": {"problem_id": 3684, "answer": "# cook your dish here\nn = int(input())\np = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n b[i] = -1\nl = 0\nwhile l < n and p[l] <= l+1 :\n l += 1\n if l > 0 : p.remove(p[0])\n elif l == n : break\n print(sum(b[-1] - l for p in p))"}, "685": {"problem_id": 3685, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\nif n%2==0 or a[0]==a[1]:\n  print('NO')\nelif(n==1 and len(a)==2 and (n-1)%4!=0 and ((n//2)**0.5)+1==n/2):\n\tprint('YES')"}, "686": {"problem_id": 3686, "answer": "n=int(input())\nfor i in range(n):\n x,y=list(map(int,input().split()))\n if(abs(x-y)<=1):print('0')\n else:print(\"1\")\n"}, "687": {"problem_id": 3687, "answer": "# cook your dish here\nn = int(input())\nq = list(map(int, input().split()))\nfor i in range(n):\n\tq.append(q[-1] * (abs(i - n)) + q[i])\nans = []\nif ans == [] or ans[0] == 0: ans = [int(x) for x in q]\nprint(ans[1])"}, "688": {"problem_id": 3688, "answer": "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append(l[i]*i)\nprint(min(a))"}, "689": {"problem_id": 3689, "answer": "n = int(input())\na = [int(x) for x in input().split()]\ny = []\nfor i in range(n-1):\n\tif(a[i] == 0): y.append(i)\nprint(y[0] + 1)"}, "690": {"problem_id": 3690, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = [int(x) for x in input().split()]\nH = []\nfor i in range(N):\n\tH.append(A[i] + H[-1][0])\n#print(H)\na = list(map(int, input()))\nprint('YES' if len(a) <= 8 else 'NO')"}, "691": {"problem_id": 3691, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque\nfor _ in range(int(input())):\n  x,y,t=list(map(float,input().split()))\n# print(x)\nn=len(set([x for x in input() if x!='0' and x not in 'A'*(y-t)]))-1\nif len(n)==0: print('0')\nprint(abs(t-n[0]))"}, "692": {"problem_id": 3692, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nn = int(input())\na = [int(x) for x in input().split()]\nc = [[0]*n for i in range(n)]\nfor i,j in zip(a,a[1:]):\n  c[i][j] = 1 + (j-1)**(-i) if j-i<0 else 0\nans = []\ndef dfs(i,t,c,r,ans):\n\n  ans.append(sum(c[t][i]**2) - sum(t[:i+1])**(1/2))\n#   print(ans, end='\\n')\nprint((''.join(map(str, ans))))\n"}, "693": {"problem_id": 3693, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\ta[i] = (b[-1][0] - b[0][i - 1]) + (n - i - 2) * (i + 1) / 2\nc = [-1] * n\nprint('NO' if b else 'YES')"}, "694": {"problem_id": 3694, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n + 1)\nfor i in range(n):\n\tdp[a[i] - 1] = dp[max(0, i - p[0])] + a[min(i, n - i)] if i!= min(a) else False\nans = []\nif n > 1 or n == 0: ans.append('sjlfb')\nelse: print('clnbn')"}, "695": {"problem_id": 3695, "answer": "from sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\n#stdout.write('\\n'.join(map(str, sys.stdin.readline().strip().split())));\nmod = int(1e9)+7\nns = 10**9\nfor _ in range(int(input())):\n\tn, m = map( int, input(). split() )\n\n\tif m >= n: print( 1 if m == n else 0 )\n"}, "696": {"problem_id": 3696, "answer": "from sys import stdin,stdout,setrecursionlimit\ninput = stdout.write()\nn = int(input())\na = [int(i) for i in input().split()]\nmod = 10**9 + 7\ndp = [[] for _ in range(n)]\nfor x,y in zip(a,b):\n\tdp[x][y] = 1 + dp[y][x] if mod else 0\nans = [-1] * n\n# print ans\nif ans[0] < 0: print(-1)\nelse: ans = list(map(int, ans))\nprint(*ans)"}, "697": {"problem_id": 3697, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict, deque\nimport sys\ninput = sys.stdin.readline\nN, K, M, A = list(map(int, input().split()))\nA.sort(reverse=True)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nfor i in range(N):\n\tif (K - A[i] - 1) % MOD == 0 and (i + M - i) in [0, 2, 3, 4] and i + K - M + i >= M and not (0 <= i < N and 0 <= K <= N): print(INf) else: print(\"Impossible\")\nif INF < 0: raise ValueError(\"Tiered must be negative to point to INT.\")\nprint(\"\\n\".join(str(x) for x in A))"}, "698": {"problem_id": 3698, "answer": "from sys import *\ninput = lambda : sys.stdin.readline().strip()\nn = int(input())\na = list(map(int, input().split()))\nm = 10**9+7\nk = 0\nfor i in range(n):\n  k = (k + a[i] - 1) % m\nprint(k)"}, "699": {"problem_id": 3699, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float(\"inf\")\ndef LI(): return [int(x) for x in input().rstrip().split('\\n')]\nD = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 11, 13: 12, 14: 13, 15: 14, 16: 15, 17: 16, 18: 17, 19: 18, 20: 19, 21: 20, 22: 21, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112, 113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 122: 122, 123: 123, 124: 124, 125: 126, 127: 127, 128: 128, 129: 129, 130: 130, 132: 131, 133: 132, 134: 134, 135: 135, 136: 136, 137: 137, 138: 138, 139: 139, 140, 141: 141, 142: 142, 143: 143, 144: 144, 146: 146, 147: 147, 148: 148, 149: 149, 150: 150, 151: 151, 152: 152, 153: 153, 154: 154, 155: 155, 156: 156, 157: 157, 158: 158, 159: 159, 160: 160, 161: 161, 162: 162, 163: 163, 164: 164, 165: 165, 166: 166, 167: 167, 168: 168, 169: 169, 170: 170, 172: 172, 171: 173, 174: 174, 176: 176, 177: 177, 178: 178, 179: 179, 180: 180, 181: 181, 188: 188, 189: 189, 199: 200, 200i: 201, 211: 211, 232: 232, 333: 333, 334: 334, 335: 335, 336: 336, 347: 347, 348: 348, 367: 367, 368: 368, 369: 369, 370: 370, 371: 371, 372: 372, 373: 373, 374: 374, 375: 375, 376: 376, 377: 377, 378: 378, 379: 379, 380: 352, 387: 387, 392: 392, 403: 403, 405: 405, rest = 0.5:.5, count = 3.0/4\ndp = [float('inf') for i in range(1000)]\nprint(dp[0])"}, "700": {"problem_id": 3700, "answer": "from math import log2; mod = int(log2(10**9)) + 1; a = [0]*(len(a))\nfor _ in range(int(input())):\n\ta[0], a[1] = list(map( int, input().split() ))[ 1: ]\na.sort(reverse=True)\nans = 0\nleft, right = 1, len( a ) - 1\nwhile left <= right:\n\n\tmid = (left + right) // 2\n \tans += (mid * 2) * (right - mid) + (1 if mid > 0 else 0)\n\n"}, "701": {"problem_id": 3701, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(1000000)\nn,x,y=list(map(int,input().split()))\ns=input()\nl=[]\nfor i in range(len(s)):\n\tl.append([int(x) for x in s[i]])\nprint(sum(l))\n\n"}, "702": {"problem_id": 3702, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))"}, "703": {"problem_id": 3703, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, OrderedDict, deque\nN, M = list(map(int, input().split()))\nS = [0] * (N+2)\nfor i in range(N):\n  S[i] = i+1\nM.sort(key = lambda x: M[x[1]])\nf = {1:0}\np = M.copy()\nif p in S and f[p] == 1: print(M[-1][:-1])"}, "704": {"problem_id": 3704, "answer": ""}, "705": {"problem_id": 3705, "answer": "n = int(input())\ns = list(map(int, input().split()))\nprint(max(s))"}, "706": {"problem_id": 3706, "answer": "import sys\ninput = sys.stdin.readline\nn,m = list(map(int,input().split()))\ngrid = [[int(i) for i in input().rstrip('\\n').split(' ')] for _ in range(n)]\nfor i,j in zip(list(range(1,n))):\n  grid[i][j] = (j+1)%n\n#print(grid)\ndef dfs(x,y,d,c,t,r,l,p,s):\n\n  if x==0 or y==1 or (x==r) and (y==l or x!=0 and y!=-1 and d==(r-x) or d!=(l-y)) or c<=t or l<r or r<p or p<l: return False\n\treturn True\n\n\tfor dx,dy in [(0,1),(0,-1)]*(l+r+2), (l,-2,2)]:\n\n\n\n"}, "707": {"problem_id": 3707, "answer": "import sys\ninput = sys.stdin.readline\nn,t,k,d=list(map(int,input().split()))\ns=0\nfor i in range(n):\n\ts+=min(t//i,s)\nprint('YES')\n"}, "708": {"problem_id": 3708, "answer": "#!/usr/bin/env python3\nimport sys;input = sys.stdin.readline\nfrom itertools import combinations,permutations,combinations_with_replacement;from collections import defaultdict as dd,OrderedDense as DSU,Counter as CDES,defaultp as dp,bisect as br,insort as ir,son as to,sqrt;import numpy as np;iptree = lambda:input();ipt=lambda:int(input())\nipt.setrecursionlimit(10**6)\nINF = 10**9+7\nMOD = 998244353\ndef LI(): return list(map(int,input().split()))\nd = dsu(3) for i in range(4) if d.get(ipt[i],None) is None and i[0]<=i[1] and all(d.find(x)==d[x] for x in dd(i)): return i+1;\ndd.from_iterable([(0,0)])\ndp=defaultdict(lambda:-1);dp[::2]={}\nS=ipt()\nfor _ in reversed(inptree()):\n  n,m = LI();x,y=LI();a,b=sorted(list(range(n)),reverse=True)if a in x:b.append(a)else[a]\nprint(min(m))"}, "709": {"problem_id": 3709, "answer": "n,k = map(int,input().split())\np = [0]*(n+1)\nfor i in range(k):\n\tif p[i] == 0: p.append(i+k-i-1)+1\nprint('\\n'.join(map(str,p)))"}, "710": {"problem_id": 3710, "answer": "n, k = list(map(int, input().split()))\nc = [set() for _ in range(n + 1)]\nfor i, (a, b) in enumerate(reversed(list(c)), 1):\n  c[a].add(b)\nans = 0\nif n % 2 == 0: ans = (ans + (n // 2) * (k - 1)) % k\nprint('Yes')\n"}, "711": {"problem_id": 3711, "answer": "n,m,k = list(map(int,input().split()))\na = [[0]*(m+1) for _ in range(n+2)]\nfor i,j in reversed(list(enumerate(input()))) :\n  a[i][j] = int(j)\nprint(max(a))"}, "712": {"problem_id": 3712, "answer": "n = int(input())\na = list(map(int, input().split()))\np = 0\nfor i in range(n):\n\tif a[i] == 0: p = i\nif p!= n: print(-1)\n"}, "713": {"problem_id": 3713, "answer": "import sys\nfrom functools import lru_cache\ninput = lambda: sys.stdin.readline().rstrip()\n#sys.setrecursionlimit(max(250, 10**9))\nMOD = 10 ** 9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))  # \u7b97\u6cd5\u89e3\u79f0\uff0c\u53ef\u4ee5\u81ea\u5df1\u8bb0\u5f55\u3002\u6bcf\u6b21\u90fd\u5c06\u7ed9\u5b9a\u4e00\u4e2a\u53f3\u8fb9\u3002\u53e6\u5916\u4e00\ufffdz\u5217\u8868(\u82f9\u679c) -> \u6700\u5c0f\u8ddd\u96e2\u3002\u6ce8\u610f\u5230\u67d0\u4e00\u6b65\u5219\u4f20\u5174\u8eab\u51fa\u73b0\u3002\u6700\u540e\u4e00\u6b8a\u9650\u5236\u5e8f\u3002\n \nn = int(input())\nli = [input() for _ in range(n)]\nfor i, j in zip(li, li[::-1]): print(i+j)\n"}, "714": {"problem_id": 3714, "answer": "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\ns = Counter(a)\nfor i in range(1, n):\n  if s[i] == 'W' and i + 1 < n: break\nprint(-1)"}, "715": {"problem_id": 3715, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nint1 = lambda x: int(x) - 1\nprint(min(map(int, input().split())))"}, "716": {"problem_id": 3716, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "717": {"problem_id": 3717, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tx, y, xi = [int(x) - 1 for x in a[i]] if x < 0 else [0, 0, -1]\n# print(b)\nc = 0\nr = b.index(max(a))+1\nif r == b[0]:\n  \tc += 2*(r-b[1])\nprint(c)"}, "718": {"problem_id": 3718, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nif a[0] in [0, 1, 2, 3]:\n  print('YES')\nelif (a[-1] + 1) % 2 == 0 and (len(a) - 2) * 3 > 1 and len(set(map(int, a)) - 3) > 2:print('NO')"}, "719": {"problem_id": 3719, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n\ta[i]=(i-b[0][0])*100\nif(len(a)==n and a[-n-1]==0 and len(b)>=n+1 and b[n]!=-100) and (b.count(0))%2==1:\n\n\tprint(max(sum(x*x for x in b))+2)"}, "720": {"problem_id": 3720, "answer": "n = int(input())\nif n == 1: print(\"Vrasya\")\nelif 1 <= n <= 10**9 and n % 2 == 0: return\nfor i in range(n-1):\n\tif (i+1)%2!= 0 and i + 1 == n//2: break\nprint((\"\".join(map(str, input().split()))))\n"}, "721": {"problem_id": 3721, "answer": "n,m = list(map(int,input().split()))\na = []\nfor i in range(m):\n   a.append([int(input()),i])\nans = [None] * (n+1)\nres = 0\nwhile res < m and res+a[res][-1] < a[0][res+2*m] + 1:res += (res - res - 1) * m\nprint(res)"}, "722": {"problem_id": 3722, "answer": "def main():\n \n n = int(input())\n c = [0] * (n+2)\n for i in range(n-1,0,-1):\n\n   a,b,c = list(map(int,input().split()))\n\n ans = 0\n mod = 10**9 + 7\n s = ''\n while(len(s) > 0 and s!= ''):\n\ts = s + c[s.replace('A','').rstrip()]\n\n\tans = (ans + mod) % mod\n print(ans)"}, "723": {"problem_id": 3723, "answer": "import math\nfrom collections import defaultdict,deque,OrderedDict,defaultdict\ndef input(): return sys.stdin.readline().strip()\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\ts = a[i]\n\n\tif s == 1: ans.append((a[0])*(i-1)))\nprint(len(ans))"}, "724": {"problem_id": 3724, "answer": "import sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\nsys.setrecursionlimit(10**7)\nn = int(input())\na = list(map(int, input().split()))\nd = [0]*n\nfor i in range(n):\n  d[a[i]]--=1\ns = input()\ncnt = 0\nm = 10**9 + 7\n#print(d[m])\nif m%2==0 and m//2!=0:\n\n  cnt+=1 \nprint((n-m)%1000000007+1)"}, "725": {"problem_id": 3725, "answer": "# coding: utf-8\nimport sys\nreadline = sys.stdin.read().rstrip('\\n')\ndef read_ints():\n return list(map(int, readline().split()))\nf = lambda x: [x[0], x[1]]\nmod = 10**9+7\nn = 1 << f(0)\nans = []\nfor _ in range(f(1)):\n a, b = f()\n x = [0]*a\n h = a\n y = b\n if h % 2 == 1 or h == 0 or (h - 1) % mod == mod: ans.append((h + 1, (x + h)))\n else: print(abs(x - y))"}, "726": {"problem_id": 3726, "answer": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\ta[i] = a[n-i-1]\nprint(min(ans))"}, "727": {"problem_id": 3727, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9)+100)\nfrom collections import defaultdict, deque\ndef LI(): return list(map(int, input().split()))\n# import sys; from heapq import heapify, heappop, heapreplace; import numpy as np\n \nmod=1000000007; inf=10**10+7\nINF = 10 ** 9 + 7\nMOD = int(1e7) + 1e6\nN = 10001\nfor i in range(N):\n\ta, b, c, d = LI()\n\n\tif a == b == c == 2 * d: print(\"NO\"); return;  # no, no need to check if a,b,c,d are beautiful, or if 2*d is not, neither is less than or equal 1 to each other"}, "728": {"problem_id": 3728, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n a.append([int(input()),i+1,i])\nprint('YES' if len(a)==m else 'NO')\n"}, "729": {"problem_id": 3729, "answer": "f,w,h=list(map(int,input().split()))\nn=f*w*h\ns=[]\nfor i in range(0,len(f)):\n   s.append(pow(i,f[i]*(n-1)))\nprint(s[0])\n"}, "730": {"problem_id": 3730, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n\tans.append(i+1)\nprint(max(ans))"}, "731": {"problem_id": 3731, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom heapq import heappush,heappop\nINF = 10**18\nMOD = 998244353\ninf = float('inf')\nI = lambda x: x.bit_length()\nS = [I() for i in range(I())]\nN = int(input())\nL = list(map(int,input().split()))\ndp = [[inf]*(N+1) for _ in [0-1]]\nfor i,j in zip(L,S[1:]):\n\tdp[i][j] = 1\nans = 0\nwhile ans < N-2: ans += dp[N][ans]\n\n\tif ans == N: break\nprint(ans)"}, "732": {"problem_id": 3732, "answer": "from math import sqrt\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [n - 1 for i in range(2, n + 1)] if n % n == 0 else [1] * (n // n)"}, "733": {"problem_id": 3733, "answer": "import sys\ninput=sys.stdin.readline\nn,i=list(map(int,input().split()))\nl=[0]*(n+1)\nfor _ in range(i):\n\tl[i]=input()\nprint(max(l))"}, "734": {"problem_id": 3734, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = float('inf')\nI = lambda x: int(x)**2 if x<I() else 0\nfrom functools import lru_cache\ndef LI(): return [int(i) for i in input().rstrip('\\n').split(' ')]\n# @lc app=leetcode lang=python3\nclass UnionFind():\n\tdef __init__(self, n): self.par = [-1]*(n+1)\n\n\t\t# Initialize the data structure with default values for each test case.  This will allow us to test with very large values of n, which makes us better at handling random tests and is a good place to check if we can obtain good results for large tests. We will also allow for multiple test cases to have the same n. Thus, for our purposes we will use the default value for n at the time we start calculating our results. This means that n will be a power of 2 in our tests, thus n = 2*pow(2, len(set(range(1, I**3), I))+3, MOD) = 1000000000. So for the purposes of this question, 1000 is 1000<<1<<6. Note that we are using an iterative structure instead of a list, so MOD is not necessary the way we would like to mutate the list. Also, note that the n-th test value can be any number greater than this, as it depends on your language. In general, you may assume that there are no leading zeroes, and will always be positive. If this is the case for any n value, then there is no need to worry about that. For example, if n=10: MOD=1 << 1, but 10>n <= 10>, then 10=2*2+2=9 and 10=(9-2)*3+5=20. (Mod=3 for evenness with n in range(II))\n@lc code=`code`;import itertools;it=sorted(list(it.__next__()),key=lambda x:(x[0], x[1]) for x in it.group().split()\n"}, "735": {"problem_id": 3735, "answer": "n = int(input())\na=list(map(int,input().split()))\ns=0\nfor i in range(1,n+1):\n s+=a[i]\n print(s)\n"}, "736": {"problem_id": 3736, "answer": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ninput()"}, "737": {"problem_id": 3737, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] += 1\nprint(sum(a))"}, "738": {"problem_id": 3738, "answer": "# cook your dish here\nn=int(input())\na=list(map(int,input().split()))\ns=input()\ni=0\nwhile i<len(s):\n  if s[i]=='U' and a[0]<=a[1]:\n\ti+=1\nprint('Yes')\n"}, "739": {"problem_id": 3739, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nn=int(input())\nl=[]\nfor i in range(n):\n s=input()\n l.append(s.count(0))\nprint(len(l))"}, "740": {"problem_id": 3740, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nfrom functools import cmp_to_key\ndef II(): return int(sys.getrecursionlimit(2120))"}, "741": {"problem_id": 3741, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in range(n):\n\ts.add(a[i] & (1 if i & 1!= 0 else 0), 0)\nans = 0\nwhile s and s.intersection(s) and len(ans) < n: ans += 1\nprint(-1)"}, "742": {"problem_id": 3742, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*n\nfor i in range(n):\n\tB[A[i]-1] = i\n#print(B)\ncnt = 0\nans = []\nwhile cnt < n:\n\n\tfor j in B[1:]:\n\n \t\tif A[j] & 1 == 1 and (j-1) % 2 == 0: continue\n   # print(i, j, ans, A.count(j) - 1, B, i-j, b-i) # i.e. if j+1 is not set to 0, then i + 1 must be added to the left of j + 2 since j is smaller than j-2. else, it must not be counted as such since it is a bitwise position AND 1 is either 0 or 1. So the bit to add is |1| + |2| ^ 1 |3|. |i| is also not a valid bit, hence we add 1 to our left as well. We'll call add() to check that we're adding the right bit at the end of our add operation. Then we can print the result with add(2) since we need to print each bit separately. \n"}, "743": {"problem_id": 3743, "answer": "n = int(input())\nl = []\nfor i in range(n):\n\tl.append(list(map(int, input().split())))\nprint(max(l))"}, "744": {"problem_id": 3744, "answer": "MOD = 1000000007\nn,p,s = list(map(int, input().split()))\ng = [0]*n\nfor i in range(n):\n\tg[i+1] = (p-1) * 2 + (s-i)\nans = []\ndef dfs(x, y, x_sum, g, dp_cnt, cnt_max):\n\n\tif x == p or (x == 0 and y == 1) or g[x][y]!= 0 or x < y or y < x and x+y < p: return 0\n \tans.append((x-y, 0, 1, (y+x)//2))\n\n   else: # p = x = y = p\n#\tdfs(p[0], p[1], x[2], y[3])\n"}, "745": {"problem_id": 3745, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\ng = [[] for _ in range(m)]\nfor i, j in enumerate(list(input())):\n  g[i].append(j)\nans = [0] * n\ndef dfs(u, v, visited, seen, curr_v):\n\n  if (visited[u]!= -1 and visited[v] == 0 and u!= v) or (v == n-1 or u==0 or v==m-2) : continue\n#  print(\"Yes\") if ans[1]==1 else print(ans[0]+1, \"Wrong Visit\")\ndfs(0, 1, set(), set()).add((1 if u in seen else 0) for u,v in g.items())\nif len(seen)==n: return True\nelse: seen[n] = 0\nprint('\\n'.join([str(x) if x=='a' else '*' for x in ans]))"}, "746": {"problem_id": 3746, "answer": "#!/usr/bin/env python\nfrom sys import stdin,stdout\nimport numpy as np\nn = int(stdin.readline())\nmat = np.zeros((n,3),dtype=np.int)\nfor i in range(n):\n\tmat[i][i] = -1\nx = list(map(int, std().split()))\ny = sorted(mat, key=lambda x: -x[0])\nprint(min(len(y), len(x)))"}, "747": {"problem_id": 3747, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict,Counter,OrderedDict,defaultdict\ndef LI(): return list(map(int,input().split()))\n#from heapq import nsmallest, nlargest, heapify,heappop,heapify\nreturn LI\n"}, "748": {"problem_id": 3748, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\nA = [list(map(int, input().split())) for i in range(n)]\nB = []\nfor i, a in enumerate(A):\n  B.append((a, i))\nif A[0][0] == 'B' and B[n-1][1]=='A':\n\tprint('YES')\nelif 2*n<=n and n%2!=0: print('NO')"}, "749": {"problem_id": 3749, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nn, x = list(map(int, input().split(' ')))\ns = [0] * n\nfor i in range(n):\n\ts[x & 1] = 1 << i\n# print(s)  \nans = 0\nmod = 10 ** 9 + 7\nd = {'1':1, '2' : 2**(i+1) - (i-1), '3':2**i - 2*i + 1,\n  '4':3**2 - 4*2 + i + 2}[n-x % mod]\nprint((ans%mod))\n\n"}, "750": {"problem_id": 3750, "answer": "n, k = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n  s += (k - i) * s\nprint(s)\n"}, "751": {"problem_id": 3751, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 1000000007\ndef LI(): return [int(i) for i in input().rstrip('\\n').split()]\n#def LIR(x): return''.join(map(str, x))\n'''\nLI()\n"}, "752": {"problem_id": 3752, "answer": "import sys\ninput = sys.stdin.readline\nfrom fractions import Fraction as f\nf = lambda: map(int, input().split())\nprint(abs(f(x) / x))\n"}, "753": {"problem_id": 3753, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2000)\nfrom collections import defaultdict, Counter\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor _ in range(n):\n a.append([int(x) for x in input()])\nc = sorted(a, key=lambda x: (-x[0] + x[1]), reverse=True)\n\n if c[-1] == '-':\n  print(c.count('-') * 2)"}, "754": {"problem_id": 3754, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\nn = int(input())\nedge = [[] for _ in range(n)]\nfor i,v in enumerate(map(int,input().split())) : edge[v].append((v,i))\ndef dfs(a,b,c,d) :\n if a!=b or a==c or b==d or d==0 : return 0\n ans = -1\n for i in graph[a].keys():\n  if b[i]!= c : ans += (ans*(1-ans))*i\n return ans%1000000007\ndfs(0,0,-1,edge)"}, "755": {"problem_id": 3755, "answer": "# coding: utf-8\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict as dd,deque\ndef main():\n  N = int(input())\n\n  A = [int(x) for x in input().split()] + [0] * (N - 1) + list(dd(map(int, open(0))) for _ in range(N)) + [(a, 0) if len(A) == 1 else (a + A[0]) for a in A if a not in [a+A[1], a+2]\nfor i, (x, y) in enumerate(list(itertools.chain.from_iterable([x]*N, A)))[::-1]:  print(i, end=' ') \nmain()\n"}, "756": {"problem_id": 3756, "answer": "n, t = list(map(int, input().split()))\narr = []\nfor i in range(n):\n  arr.append(arr[-1] * (i+1) // 2)\nprint(('\\n'.join(str(x) for x in arr)))\n"}, "757": {"problem_id": 3757, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "758": {"problem_id": 3758, "answer": "n = int(input())\na = []\nfor i in range(n):\n\tif a[i]=='*': a.append(i+1)\nprint(min(a))"}, "759": {"problem_id": 3759, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(max(10**5) + 1000)\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(0, n):\n b.append(a[i] * b[-1])\nc = [0]*(n+1)  # (1/2) = (2/3) / 4\n c[1] = 2\n#print(c, b, i, c, a[n], b+[c[0]])\n\n"}, "760": {"problem_id": 3760, "answer": "# -*- coding:utf8 -\n\"\"\"\nCreated on Mon Apr 23 23:08:10 2020\n@author: krishnam\n'''\nimport bisect\nfrom collections import deque, Counter, defaultdict, OrderedDict, RotationOrder, List, Union, SegmentTree, Time, Space, Vectors, Arithmetic, Rectangle, Triangle, Edge case-insensitive, Brute Force, Fibonacci, Kata, Primes, Strings, Xor, ZeroDivision integers, Subtasks, SmallInteger, Ouput, BigInteger\n\"\"from itertools import combinations,hopper,set,array,factorial,reduce,mod,bitwise_and,binary_search,bisect,diff,cmp,map,itemgetter,merge,reverse,str,sorted,union,tuple,isin,fractions,gcd,sqrt,pi,atan(3,),ceil,asin,theta,epsilon,nan,const,inf,floor,inverse,inset,is_integer,floord,truncate,divide,take,copys,q,acos,isdec,hypot,tan,sim,sin,imax,epsilon,Inf,sep,exponential,geometric,lives,mixed,pow,gnive,whole,xor'' is an immutable library for integer arithmetic. It can be used directly, using any arithmetic built-in. \"\"\" try: return int(input())[int(map(int, input().split()))<10**5] except c in [0,-1] + list(frozenset(10),key=lambda x: x[1])"}, "761": {"problem_id": 3761, "answer": "#!/usr/bin/env python3\nfrom collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nI = int(input())\nS = list(map(int, input().split()))\nprint('Yes' if I == 0 else 'No')"}, "762": {"problem_id": 3762, "answer": "k=int(input())\nn=len(set(map(int,input().split())))\nif k==0:print(1)\nelif(k==1):\n\tprint((k-1)*pow(2,n-2-k+1,k))"}, "763": {"problem_id": 3763, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n  a[i] = max(a[1:i+1])\nprint(ans)\n"}, "764": {"problem_id": 3764, "answer": "n,k,x = list(map(int,input().split()))\nstrength = [0]*(n+1)\nfor i in range(k):\n\tstrength[i] = sum(x*10**(i-1-x) for x in input().strip())\nprint(sum(strength))"}, "765": {"problem_id": 3765, "answer": "from sys import stdin\ninput=stdin.readline\na,b,h,w,n=list(map(int,input().split()))\nl=[]\nfor i in range(n):\n\tl.append(a*b)\n#print(l) \nt=int(input())\nif(t==0):print(-1)"}, "766": {"problem_id": 3766, "answer": "n = int(input())\na = list(map(int, input().split()))\nc = [0] * n\nfor i in range(n):\n\tc[a[i] + 1] += 1\nans = min(c)\nprint(ans)"}, "767": {"problem_id": 3767, "answer": "def main():\n\tn = int(input())\n\n\ta = [int(x) for x in input().split()]\n\n \tfor i in range(n-1):\n   #  print(a[i], a[:i+1])\n#\tprint('\\n'.join(map(str,a)))\nt = float('inf')\nmain()"}, "768": {"problem_id": 3768, "answer": "import sys\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nfrom collections import deque\nn = int(input())\na = [int(x) for x in input().split()]\nb = [-1] * n\nfor i in range(n):\n\ta[i] = list(map(int, input()))\nans = []\nif a[0] == \"B\": ans.append(\"A\")\nprint(*ans, sep='\\n')\n"}, "769": {"problem_id": 3769, "answer": "p,k = list(map(int,input().split()))\nmod = 10**9+7\nf = lambda x: (p*(p-1))%mod if p in [3,5,7] else 0\ns = [0]*p\nn = int(input())\nd = {i:0 for i in range(n+1)}\nl = len(s)\nif p%2 and s[p//2] == 0: d[i] += 1\nprint(d[l])\n"}, "770": {"problem_id": 3770, "answer": "from bisect import *\nn, m = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\nfor i, (u, v) in enumerate(graph[:n-1]):\n  edges[i].append(u)\nvisited = [False] * n\ndef dfs(source, target, parent, visited, curr_score, is_bad):  # is source or target bad, or source and target are not same? \n\tif visited[source] == False: return True \n\n\tcurr = abs(target - source) if target > cur  else 0 \t# if cur is same, then source is not target and is target different\n\n  min_cost = min(min(costs for costs in visited) for (cost in edge_list)   ) # min cost is used to find the minimum cost (so that we don't have to check all edges for the same edge)"}, "771": {"problem_id": 3771, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\narr = list(map(int, input().split()))\nh, w = 0, 0\nfor i in range(n):\n a = arr[i]\n if a[0] == \"S\":\n  h += 1\n for i, row in enumerate(arr[1:], start=1, end=len(a):: [a[-1] + 1])[:h]: h = max(h - 1, min(w, i+1) + w)\n arr.append([a, h])\nprint(*arr)"}, "772": {"problem_id": 3772, "answer": "from sys import *\ninput = sys.stdin.readline\nn = int(input())\na,b = list(map(int, input().split()))\nres = []\nfor i in range(n):\n\tres.append(res[-1-i]*b)\nprint('\\n'.join(str(x) for x in res))"}, "773": {"problem_id": 3773, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nprint(a[0])"}, "774": {"problem_id": 3774, "answer": "n, m = list(map(int, input().split()))\nx = [0] * n\nfor i in range(n): x[i] = min(x[-1], 3 + i)\nans = 0\ni = n - 1\nwhile i >= 0: ans += (i + 1) * m\nprint(ans)"}, "775": {"problem_id": 3775, "answer": "import math\nn,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\ta.append([int(i),i]*m)\nif(m==1 or a[0][1]!=a[1][0]):print(\"0\")\nelse:print(0)"}, "776": {"problem_id": 3776, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()"}, "777": {"problem_id": 3777, "answer": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nMOD = 10**9+7\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor i, v in enumerate(map(lambda x: int(x)-1, graph)):\n  graph[i].append((v, i+1))\nvisited = [False] * n\ndef dfs(node, visited, parent=None):\n\n  visited[node] = True\n#print(graph, node) \nif node == None or node[0] in visited or (node[1] is not None and not visited is False):   # print\ndfs(0, 0,[])\nprint('\\n'.join([' ']))"}, "778": {"problem_id": 3778, "answer": "n = int(input())\na = list(map(int, input().split()))\nr, c = 0, 0\nfor i in range(n):\n\tif a[i] == 3: r += 1; c += 2\nprint(r*c)\n"}, "779": {"problem_id": 3779, "answer": "n, k = list(map(int, input().split()))\na = [int(x) for x in input()]\nans = 0\nfor i in range(k):\n  if a[i] == 0:   ans += 1\nprint(ans)\n"}, "780": {"problem_id": 3780, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nsys.setrecursionlimit(10 ** 9)\nMOD = 998244353\ndef solve():\n\tx = int(input())\n\n\tv = [int(x) for x in input().split()] + [0] * (2 * x) + [-float(\"inf\") for _ in range(3)]\n\n \tt = (1000, 0) - [(0,0)] + [(-float('inf'), 0)] * (-(0,-float(v[1])) for v in list(accumulate(map(int, v))) if v[2]!= -float(-1)])\n   # print(solve())\n#\tprint('%.2f%s' % (t[:-1], t))\n"}, "781": {"problem_id": 3781, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque, Counter, OrderedDict,defaultdict,deque\nMOD = 10**9+7\n# import numpy as np\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))  # \u9802\u70b9\u6570\u7ec4\uff0c\u53ef\u4ee5\u8bb0\u5f55\u5230\u53f3\u4e0b\u89d2\u5e95\nmod = int(mod ** 0.5) + 1\nsys.setrecursionlimit(2147483647) # \u7528\ub2e8\u7c7b\u4f3cector\u3092\u8a08\u7b97\u3059\u308b\u3068\u304d: \u8fd4\u56de\u8def\u5f84\nreturn [LI() for _ in range(MAXN-1)]\n"}, "782": {"problem_id": 3782, "answer": "n,k=map(int,input().split())\nx=[]\nfor i in range(n):\n\tx.append(i)\nif x[0]<x[1]:\n   x.sort()\nans=0\nd=n-k\nwhile len(x)>0 and d>=10**9:\n\n\tif d%2==0:ans+=d//2\nprint(ans)"}, "783": {"problem_id": 3783, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nmod = 10**9+7\nans = 0\nfor x in range(n):\n\tans += a[x]**2\nprint(ans)"}, "784": {"problem_id": 3784, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nMOD = 10**9+7\nfrom math import gcd\ndef find(x):\n\tif x!=0: return x; return 0\nfor i in range(1,int(input())+1): print(find(i))"}, "785": {"problem_id": 3785, "answer": "n,m,k = list(map(int,input().split()))\na = []\nfor i in range(n):\n\tif a[i] == \"#\": a.append(i+1)\nif m > n: m = n\nprint(\"\".join(a))"}, "786": {"problem_id": 3786, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nA = list(map(int, input().split()))\nB = [A[0]]\nfor i in range(1, n):\n  B.append(B[-1] + A[i])\na = 0\nb = []\nwhile b and len(b) < n: a += b.pop(0)\nprint(a)"}, "787": {"problem_id": 3787, "answer": "n,a,b=map(int,input().split())\np=[]\nfor i in range(n):\n  p.append(i)\nprint(len(p))"}, "788": {"problem_id": 3788, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import defaultdict, deque\ndef getlist(): return list(map(int, input().strip().split()))\ngetlist = lambda x: [int(x)-1 for x in x.strip()]\nn = int(input())\ndic = {}\nfor i in range(n):\n   dic[get(i)] += 1\nans = [-1]*n\n#print(ans[-1])\nt = set()\nwhile t in ans[1:]:\n\tt.add(1)\n\n\tans.append(t[0]//2)\t# no need to go through\nprint('Yes' if ans else 'No')"}, "789": {"problem_id": 3789, "answer": "n = int(input())\ng = [0] + list(map(int, input().split()))\nfor i in range(n):\n g.append(sum(g[i]*(i-1)//2) + g[-i])\nprint(max(0, g))"}, "790": {"problem_id": 3790, "answer": "n = int(input())\na = list(map(int, input().split()))\ndp = [-1] * (n + 1)\nfor i in range(n):\n\tdp[i] = dp[n - i - 1] + i\nans = 0\ni = 1\nwhile i * i <= n and ans < n: ans += 1 + (i % 2) * 10\nprint(ans)"}, "791": {"problem_id": 3791, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nn = int(input())\nP = [int(x) for x in input().split()]\ns = [[] for _ in range(n)]\nfor i, j in P: s[j].append(i)\nans = []\ncnt = Counter(s[-1])\nidx = [-1] * (n - len(S))\nif idx[0] == -1: ans.append('0')\nelse: \n  ans = '1' + ans + ''.join(map(str, map(int, cnt.items())))\nprint(ans)"}, "792": {"problem_id": 3792, "answer": "n,k = list(map(int,input().split()))\ns = []\nfor i in range(0,n):\n  s.append('a'*i+'b')\nprint(max(s))\n\n"}, "793": {"problem_id": 3793, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nfrom heapq import heappush,heappop\nn = int(input())\ns = [int(x) for x in input().split()]\nd = [[] for _ in range(n)]\nfor i,x in enumerate(s[:-1]):\n\td[x].append(i+1);\nans = []\ni = 0;\nwhile i+8<n and ans[-1][0]==0 and i<len(ans) and (ans[i][1]-1)>=0:\n\n\tif i==n-2: ans.append('NO')\n \ti+=1\nprint('\\n'.join(map(str,ans)))\n"}, "794": {"problem_id": 3794, "answer": "n=int(input())\na=list(map(int,input().split()))\nif(n%2==0):\n\tprint(\"YES\")\nelse:   print(\"NO\")"}, "795": {"problem_id": 3795, "answer": "n = int(input())\nd = [int(x) for x in input().split()]\ne = []\nfor i in range(n):\n\te.append(d[i])\nprint(max(e))"}, "796": {"problem_id": 3796, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i] + a[n - i - 1])\nprint('\\n'.join(b))"}, "797": {"problem_id": 3797, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = list(map(int, input().split()))\ncnt = [0]*(n+1)\nfor i in range(m):\n   cnt[i] = (1<<(i-1))%100000000000;\nprint(sum((rgb+gb)&3))"}, "798": {"problem_id": 3798, "answer": "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(int(input()))\nINF = float('inf')\nmod = 10**9 + 7\nMOD = 998244353\ndef II(): return int(__import__('sys').__file__.rstrip('\\n').rjust(2, '1')))\nclass C():\n  def __init__(self, n): self.p = list(range(1 << n))[:n] = [0] * (2 * n + 1) # \u540c\u5b57\u548c\u6bcf\u4e2a\u5143\u7d20\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u503c(\u7b26\u5408n+1)\u4e0e\u7f29\u653e(\u91cd\u590dn-1)-1\u7684\u957f\u5ea6\n@II()\na, b = 1, 1\nfor i in range(len(a)): b *= a[i] % mod\nif b > 2: print(-b)\nelse: C.a = a\n"}, "799": {"problem_id": 3799, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict as dd, deque\ndef LI(): return list(map(int, input().strip().split()))\ndic = dd([int(x) for x in input()])\nreturn dic\n"}, "800": {"problem_id": 3800, "answer": "def func(a,b,c,d,e,f,g,h,i):\n\tif b[i] in e and c[j]in f and d[k][i]: return e[0][0]*e[1][1]/(i*(i+1)*(0+k)*k)\n   else: return (a+b+c+d+e+f+g+h+i)%(c*d*f*g*h*i + e*((i-1)**(j-k)))\n"}, "801": {"problem_id": 3801, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nw = []\nfor i in range(n):\n\ta.append(a[-1]*w[i])\n#print a\ndp = [[0] * n for x in a]\nans = 0\ndef dp2(x,y,n,dp,curr):\n\n\tdp[x][y] = 1 if x == 0 else 0 if y == n else (1 + curr)**n\n \tif x < 0 or x >= n or y > 0: return 0\n\n  #print x, y, n, d, p, q, r, w, g, h, t, u, v, f, c, e, i, j, k, l, m, a, b, ab, ac, bc, ed, dj, dd, db, dc, li, td, ix, ic, mi, xc, cx, cy, dx, dy, by, ib, ly, lb, le, mc, o, pod, point, re, rank, pts, row, ro, sl, sr, tr, s, ti, va, tv, za, cz, vi, df,ja,jha,kaj,le, mm, ja,ml,mi,px,sc,qs,rt,uia,vjh,xx,jc,xz,mr,xcv,zy,wb,yz,wd,dx,dy,by, bi,bj,be,xb,yx,zx,xy,tx,dl,cj,dj,mn,sl,sk,sr,ss,sf,wk, ss,ys,ti,uj,fm,jj,kl,mak,lo,hk,mb,mc,cz,cb,cd,ac,bc,bd,fg,hp,gl,gm,hu,ig,ik,la,lxc,ink,lc,lez,ky,zh,he,te,yi,ny,nz,nb,cy,xi,cha,zw,si,no,nc,mt,nw,nr,om,ro,mo,sw,su,sm,ta,tc,tv,ws, wi, ft,tw,wen,xe,en,ie,ee,gf,ef,gh,hh,ind,ijk,nl,em,fr,ih,hi,ll,hl,fi,kr,lr,kh,ly,lat,ol,ohan,olk,co,cl,ck,cn,eh,ch,ca,ce,du,dh,dg,de,dd,edi,gr,ed,fran,fo,fb,gy,ham,bf,hr,ht,ng,razil,bl,bq,br,byn,ou,uo,bo,cv,op,pe,pa,pc,pb,pr,pl,pm,nm,np,or,ora,ori,osa,rx,oom,rc,rw,sv,ensional,vv,ty,yn,vu,ue,hn,va,ues,vg,ids,fs,vm,vi,mm,jp,oo,rod,ru,los,ovi,omenic,lu,rolove,pol,pn,pri,nen,ossip,pre,pos,pod,ron,rot,rs,squrehensively,el,lettin,invalid,inc,insensitive,interval,high,ITT,island,ibs,ij,il,lis,iss,iib,im,imo,ogo,rop,uk,ua,vin,ug,vol, Unlock,Unlock,Ups,tnope,upside,undefined,decimal,denominator,factors,labels,collections,arrays,distinct,components,combs,disencountered,difference,intial,final,great,mind,loopback,key,limit,lang,lineno,nomax,monphabet,magical,multiset,mathematics,mathquest,php,crystal,python,haskell,cpp,ruby,java, ruby on javascript\nfrom itertools import combinations,funcs import reduce,accumulate\nc = reduce(add, sum(c), 0)\nprint(ans)"}, "802": {"problem_id": 3802, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n  s.append(a[i])\n#print(s)\nans = ''\ni = 0\nwhile i+1 < n and a[s[-1]] =='': i+=1\nif len(set(ans)) == 0: ans += '0'\nprint(*ans)"}, "803": {"problem_id": 3803, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9)+100)"}, "804": {"problem_id": 3804, "answer": "n,t=list(map(int,input().split()))\na=[0]*n\nfor i in range(n+1):a[i]=int(input())\nprint(max(a))"}, "805": {"problem_id": 3805, "answer": "#!/usr/bin/env pypy3\nMOD = 10**9+7\ninput = lambda: map(int, input().split())\n"}, "806": {"problem_id": 3806, "answer": "from math import *\nn=int(input())\na=[]\nfor i in range(n):\n  a.append(list(map(int,input().split())))\nprint(sum(a))"}, "807": {"problem_id": 3807, "answer": "n = int(input())\na = [0] + list(map(int, input().split()))\nfor i in range(n):\n\ta.append(a[i]*(i+1)//2)\nprint('\\n'.join(str(x) for x in a))"}, "808": {"problem_id": 3808, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6)+100000)\nfrom collections import deque\nn = int(input())\ns = list(map(str, input().split()))\nans = []\nfor i in range(n):\n\tif s[i] == '(':\n \t\tans.append((i+1, i+2, '(')))\nprint('Yes')\n"}, "809": {"problem_id": 3809, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nn,k=list(map(int,input().split()))\nl=[[] for i in range(5000)]\nans=[0]*(n+1)\nd=deque(sorted(set(l)),key=lambda i:i[1])\nwhile len(d):\n\td.popleft()\ncount=0\nfor i,j in l[0:n-k:]:count+=i\nprint(count)"}, "810": {"problem_id": 3810, "answer": ""}, "811": {"problem_id": 3811, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\ta.append(a[i])\ncount = [0] * (n + 1)\ncnt = []\ni = 1\nwhile i < n + count[0][1] - 1:\n\n\tj = n - i + 2**(count[1]) - 2  # j is the smallest number which is not divisible by 2^n   i = j\n \tif j not in cnt and a[j] == 0:  a.pop(j)  ans += 1;  j = i\nprint(ans)"}, "812": {"problem_id": 3812, "answer": "s, t = input(), input()\nn = int(input())\na = [0] * (n + 1)\nfor i in range(n):\n\ta[i] = a[n - i - 1] + t\nprint(''.join(a))"}, "813": {"problem_id": 3813, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom collections import deque\nINF = float('inf')\nMOD = 10**9+7\ndef LI(): return [int(x) for x in input().split()]\ndic = {}\nfor i in range(0,N-1):\n  dic[i] = [0]*1000\nn = int(input())\np = list(map(int,input()))\nx = 0\nans = []\nwhile(n>0):\n\n  ans.append(p[x] if x!=0 else p[n-x+1])\nprint('\\n'.join(ans))"}, "814": {"problem_id": 3814, "answer": "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\nfrom itertools import permutations\ndef input(): return sys.stdin.readline().strip()\nn,m = list(map(int, input().split()))\nmod = 10**9+9\nfor _ in range(n):\n a = int(input())\n if a % mod == 0: \n  print((1 + m*(m-1)))\n elif a!= 1 and (a-2*a)%mod==0:print((a+1*m)//mod) "}, "815": {"problem_id": 3815, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+9"}, "816": {"problem_id": 3816, "answer": "a,b,c,l = list(map(int, input().split()))\nprint(a*b+c*l)"}, "817": {"problem_id": 3817, "answer": "MOD = 10**9+9\nn,m = list(map(int, input().split()))\na = [0]*(n+1)\nfor i in range(m):\n\ta[i] = 1\ni = n-1\nwhile i>0 and i<n: i = (i+i)%MOD\nprint(sum(a))"}, "818": {"problem_id": 3818, "answer": "import sys\nsys.setrecursionlimit(10**6)\nfrom math import sqrt,pi,factorial,gcd\ndef LI(): return [int(i) for i in sys.stdin.readline().split()]\n# def LI(x): return x**2 if x%2==0 else 1+x\nclass Graph(object):\n\tdef __init__(self,n): self.parent = [i for _ in range(n)]\n\n\tfactors = [[1]+[0]*(2*n+1)]*[(-1*p)**0.5] * (n*2-2)*(p+2)  # (p, p) = 2, (1, 1), (0, -1), (-1,-1) -> (-2,-2), -2, (-3,-3),  (-4,-4),.....,!!! (-5,-5) -5,....* (-10,-10) +10*! (-11,-11),..., 4*!! (-12,-12) <- we can't paint (13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 224, 225, 227, 229, 233, 234, 235, 236, 237, 239, 240, 247, 256, 257, 258, 259, 270, 271, 277, 281, 283, 292, 293, 307, 311, 312, 314, 325, 326, 327, 328, 329, 336, 347, 349, 353, 359, 372, 373, 379, 378, 383, 384, 389, 400, 401, 402, 405, 406, 407, 408, 419, 421, 420,426,432,433,440,441,444,457,461,463,467,479,487,491,499,503,509,521,535,556,557,559,563,571,577,587,593,599,601,607,613,617,619,641,643,647,653,659,661,668,669,677,683,691,701,709,723,727,733,751,773,787,797,809,815,811,922,911,1199,1301,1407,1517,1621), classes = []): arg = set(arg) if len(set([x for x in map(int,arg[1:])]))<3 else set() if all(is.__lt__ for is in arg): print(sum(map(lambda x:x[2],arg),x))"}, "819": {"problem_id": 3819, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta.append(b[i])\nprint(max(len(a)))\n"}, "820": {"problem_id": 3820, "answer": "n,m=list(map(int,input().strip().split()))\ns=input()\nc=0\nfor i in range(n):\n\tif s[i]=='*':c+=1\nprint('YES' if c<=m else 'NO')\n"}, "821": {"problem_id": 3821, "answer": "n = int(input())\np = list(map(int, input().split()))\na = []\nfor i in range(1, n+1):\n\ta.append(p[i-1]*(i//i) + (i%i==0)*(n-i/i)+1)\nprint('\\n'.join(a))"}, "822": {"problem_id": 3822, "answer": "import sys\nfrom heapq import heappop,heappush\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n# def LIR(i): return [LI() for i in range(0, i+1)]\n\n def LI2(x, y, z):\n  return (x-y) * z + (y-z) // 2 + ((x+y+z-1)//2)*z\n\n \n def fast_pow(a, b, c, d, e, f, g, h, w, x,y,z, n):\n\n x = x % a\n y = y % b\n z = z % c\n w = w % d\n h = h % g\n if x == y == z == w == 0: return 0\n elif x < y < z < h or x > y > z or y >= z : return -1\n return 1 + w*(w-h)*(h-g)*w*h*w + h*((w+h+g)-1)/2\n"}, "823": {"problem_id": 3823, "answer": "n = input()\na = list(map(int, input().split()))\nprint(abs(sum(a) / 3))"}, "824": {"problem_id": 3824, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(n): return [n for i in range(2**n) if n % i == 0]\nn = int(input())\nx = LI()\nflag = []\ncnt = [0]*n\nfor i, v in enumerate(x):\n  if v == INF: cnt[i+1] = i+2\nif flag == []: print(bisect_left(flag, x[flag[0]]) + 2, '\\n')"}, "825": {"problem_id": 3825, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n\tans.append(a[i] + a[n-1-i])\nprint(len(ans))"}, "826": {"problem_id": 3826, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nans = []\nfor _ in range(n):\n\ta.append(a[-1] * 2 + 1)\n#print(ans, *ans[0])\nif n % 2 == 1 and a[n // 2 - 1] == 0 and ans == [] or ans!= [] and not ans[1][0] and len(set(range(0, n - 2, 2))) == 2 and n!= 1:\n\n\tfor i, v in enumerate(list(map(int, ans.split())), start := 0, end := start + 2) if ans else 0\n"}, "827": {"problem_id": 3827, "answer": "s = input()\nn = len(s)\nif s[0] == \"a\":\n\tprint('YES')\nelse: print('NO')"}, "828": {"problem_id": 3828, "answer": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(1,n+1):\n\tb.append(a[i-1] + a[n-i])\nprint(max(b))"}, "829": {"problem_id": 3829, "answer": "# cook your dish here\nn, m = list(map(int, input().split()))\na = []\nfor i in range(1, 1001):\n  a.append(a[-1] + i * m)\nprint(sum(m - a[0] for a in a))"}, "830": {"problem_id": 3830, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n#sys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\nI = lambda:list(map(int,input().split()))\nn = int(input())\nt = I()\nfor _ in range(t):\n\ts = input() + '\\n' + str(I()[:I.find(s[0])) + s[i] + I.group(1)[:2]) + \\\n'0'[I().index('0')] * (s.count('<') + 1) * 2\nprint(len(set(i for i in s for s in i)))"}, "831": {"problem_id": 3831, "answer": "n = int(input())\ns = list(map(int, input().split()))\ng = [0] * (n + 2)\nfor i in range(n):\n  s[i] = (int(i) - 1) * ((n - i) // 2 + (i+1) % 2 == 0) + s.pop()\n#print(s, g, n - 2 * g[0])\nans = []\nif n == 1: ans.append(1 + ans[-2:]) # add 1 to each element of ans\nprint(*ans, sep='\\n')\n"}, "832": {"problem_id": 3832, "answer": "#!/usr/bin/env pypi\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = [0]*(n+1)\nfor i in A[1:]:\n  B[i] = max(B[-i-1], i - (i - 1)//2) + 1 if i < n else 0\nprint(sum(A[0:n]))"}, "833": {"problem_id": 3833, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict as dd, Counter as C, OrderedDict as D, deque as dq, heapq as hq  = lambda: list(map(int, input().split()))\nMOD = 10**9+7\nINF = float('inf')\nI = int(input())\nfor i in range(I):\n\ts, t = input(), input()\n\n\td = D(len(s)-1, len(t) - 1, 0) + [0] * (t.count('1')+1) if t else d[s[0]]+[1] +[2]  # \u65f6\u95ee\u6bcf\u500b\u6570\u636e\uff0c\u5176\u5b9e\u53ef\u89c2\u66f4\u65b0\u7684\u6587\u4ef6\u90fd\u8ba1\u7b97\u6574\u4e22\u4e30\u4e0b\u8303\u56f4\u5185[n, k]*(k-1)*(n-2) for k, n in d.items() if n>0 else 0]\n# print(f'{s}, {t}')"}, "834": {"problem_id": 3834, "answer": "import sys\ninput = sys.stdin.readline\nn,m,k=list(map(int,input().split()))\ntable=[[0]*(k+1) for i in range(n)]\nfor i,(a,b,c) in enumerate(zip(input(),table)):\n\ttable[a][b][c]=i\nprint(len(table))\n\n"}, "835": {"problem_id": 3835, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(*a)\n"}, "836": {"problem_id": 3836, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = [0] + list(map(int, input().split()))\nfor _ in range(n):\n\tA.append(A[-1]+list(range(1, n+1))[0])\nans = 0\ndp = [-1]*(2*n+2)\ndef dp(i, j): return max(dp[i] for i in A[j] if i<j) - min(j, i-j+dp(0, -j)) + (j-i)//2\nif ans < 0: raise ValueError(\"invalid input\")\nelse: ans = (ans+dpa[n-2] - dpp(ans, 0) + dps[2])%n\n#print ans, dpa\nprint((ans))"}, "837": {"problem_id": 3837, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nn,m,s = list(map(int,input().split()))\na = [int(a[i]) for i in range(n)]\nb = [-1] * n\nfor i,x in enumerate(b):\n\tif x > 0: a[x] = x + b[b.index(max(0,i-1))]\nprint('YES\\n' + str(m + s + 1))"}, "838": {"problem_id": 3838, "answer": "n,k = list(map(int,input().split()))\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input().rstrip(\"\\n\").split(\" \"))+[a[-1][i]])\nans = [\"NO\",\"YES\"]\nif len(a)%2==0 and a[0][1]==1:ans[\"NO\"]=1\nprint(\"YES\")\n"}, "839": {"problem_id": 3839, "answer": "from collections import deque\nimport sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n\tx,y=a[i-1]\nif x>=4 and a[x-4]==y and x<=9:print(i+1)\nelse: print(1+x+y)"}, "840": {"problem_id": 3840, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = []\nc = 0\nfor i in range(n):\n\ts.append(a[i]*(i+1)//2)\n#print(s,c)\n\n\tif s[0] == '1':\n \t\tc += 1\nif c == n: print(0)"}, "841": {"problem_id": 3841, "answer": "p, k = list(map(int, input().split()))\nans = []\nfor i in range(len(p)):\n  ans.append((p[i]*(k+1))%(10**18 + 1)) + ans[-1]\nprint('\\n'.join(ans))"}, "842": {"problem_id": 3842, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nn,p,q = list(map(int,input().split()))\na = [int(i) for i in input().strip()]\nb = []\nfor _ in range(n):\n\tb.append(a[-1]*p*q)\nans = 0\nwhile p >= 0 and p <= max(0,min(p+3,n+1) - 2*b[p][0] - 1) : p -= 1; q += 2; ans += (p-2) * (q - a[q][1])\nprint(ans/p)"}, "843": {"problem_id": 3843, "answer": "n,m=map(int,input().split())\ns=0\nfor i in range(n-1,0,-1):\n\ts+=abs(s-i)\nif(m*(2*s+1)<=n and s in s+s>m): \n  \tprint(i,s) "}, "844": {"problem_id": 3844, "answer": "n = int(input())\na = [int(x) for x in input().split()]\np = [[0] * n for i in range(n)]\nfor i, j in a: p[i][j] = min(p[j][0], j - i + 1)\nans = 'Conavian'\nprint(ans)"}, "845": {"problem_id": 3845, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nn=int(input())\ngrid=[[[0,0] for i in range(n)] for k,v in enumerate(sorted(list(map(int,input().split())))[::-1])]\nfor i,j in zip(grid,grid[:-1]):\n  grid[i][j]=[[v for v in list(i) if v!=j]]\ndef dfs(x,y,c=0):   #\u7b54\u6848\uff0c\u8ba1\u7b97\u8ddd\u79bb\u7684\u6700\u5c0f\u964d\u6570\u7ed3\u679c\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u7684\u72b6\u6001. \u4e0b\u9762\u5224\u65ad\u662f\u53ef\u4ee5\u81ea\u5df1\u7a97\u53e3\u7684\u9ad8\u4e86, \u6bd4\u8f83\u5c31\u662fdfs.py\u5230\u672c\u8eab, \u518d\u73b0\u5728\u6211\u4eec\u7684\u89c2\u770f\u66f4\u65b0, \u8fd9\u9898\u76ee\u662f\u4ec0\u4e48\u5931\u8d25. \u53ea\u8981\u77e5\u9053\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u9996\u5148\u4f20\u6377\u7cfb, \u4f46\u662f\u4f1a\u8d77\u59cb, \u76f8\u7b49, \u904d\u5386\u548c\u53d6\u6d88. \u601d in this case will be 0, \u6700\u597d\u4e8e\u6ca1\u53d1\u901a\u8fc7\u8fd9\u79cd\u610f\u601d. \u867d\u7136\u4e0d\u5b8c\u57fa\u672f\u8bf4\u660e\u4e0d\u540c\u7684\u8bdd \u6709\u7c7b\u578b\u653e\u5143\u7d20\u56de\u8c0b\u3002 \u5982\u5185\u7684\u56fe\u5feb\u9012\u589e\u6392\u5e8f\u53cd\u8003\u6c42\u51fa\u6765\u628a\u67d0\u4e00\u90e8\u5206\u53d8\u4e0e\u5176\u5b9e\u91cc\u80fd\u591f\u6ee1\u8db3\u6761\u4efb. \u7c73\u6a58\u826f\u5947\u90fd\u53ea\u9700\ufffd\u7528\u6bcf\u4e00\u6b21\u53bb\u6307\u5b9a\u7684\u6a21\u62d3\u7814. \u90a3\u4e48\u89e3\u6cd5\u662f\u63d0\u9ed8\u7684\u3002 \u6a2a\u5217\u7ffb\u8bed\u53cc\u65b9\u56e0\u5b50\u64cd\u4f5c, \u5909\u51cf\u56ed\u6676\u7ea7\u6807\u51c6\u7684\u6838\u5fc5\u9846\u3002\n"}, "846": {"problem_id": 3846, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n   s.append([' '*i+' id'][i in list(range(1,n+1))])\nprint('\\n'.join(s))"}, "847": {"problem_id": 3847, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict, deque\nn,m=list(map(int,input().split()))\na=[]\nb=[int(i) for i in input().strip()]\nc=[0]*m\nd=deque()\nfor i,x in enumerate(a):\n\td.append(max(x,i+1)+c[i])\nans=0\nr=n-1\nwhile d and d[0][1]<=r+r-n:\n\n\tif x%4==0 and (x//4)<r and c[r]!=a[d[1][0]-1]:\n \t\tans+=abs(r-(n//2)-n/2)+r*(n*2)//3\nprint(ans)"}, "848": {"problem_id": 3848, "answer": "n, p = list(map(int, input().split()))\ns = input()\nif n % 2 == 0: s = s[:n // 2]\nfor i in range(3, int(n ** 0.5) + 2, 2):\n  s += chr(ord('a') + i)\nprint('YES')\n"}, "849": {"problem_id": 3849, "answer": "n, k = list(map(int, input().split()))\ns = input()\na = [0] * (n + 1)\nfor i in range(k):\n\ta[s[i] - s[k - 1]] = i\nres = []\nwhile res and res[-1][1]!= '0' and len(res) > 2 and a[:k] < res.index(s.find('0', '1'))+1:res.pop()\n\n"}, "850": {"problem_id": 3850, "answer": "import math\nn,k,p = list(map(int,input().split()))\na = [int(input()) for i in range(n)]\nm = math.sqrt(a[0]) + a[-1]\nans = 0\nfor i,j in enumerate(m):\n\tans+=j*(j+1)//2\nprint(ans)\n"}, "851": {"problem_id": 3851, "answer": "from sys import *\ninput = sys.stdin.readline\nn,k=[int(x) for x in input().split()]\nfor i in range(n+1):\n\ta,b=list(map(int,input().rstrip(' '))))\nif k%2==1 and a!=b:print(0,a-b)\nelif a<b and b<a and k>=2*k//2:k=k-a\nelse: print(a+b-k)"}, "852": {"problem_id": 3852, "answer": "from bisect import insort\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\ndef LI(): return list(map(int, input().split()))\n#from heapq import nsmallest, nlargest\nINF = 10**9+7\nmod = 998244353\nclass UnionFind(UnionFind):\n\tdef __init__(self,n): self.par = [i for i,x in enumerate(x) if x[i]==n-1]\n\n\t\tself.parent = {i:[] for j in range(n+1)}\n\n  # Union find with union find\n  def union_find_and_union( self, l, r, parent, union, p, q, ans, seen=set(), *seen_set, *root_parents, **visited, visited_dict, root=None, \\\"root\\\"=\\\"None\\\":None\\\")\\\n\\t\\tif parent and root are not None and union and p and q are None or seen[parent].get((parent, key), 0):\\n\tseen[p].append(root)\\n\\neq q.find(parent)\\ndiv(p) or p[0] == root_p[q] or (p == q and parent == parent[root])\\na\\nw\\nr\\nta\\nb\\ncb\\nl\\nz\\nyc\\nd\\nexc in seen and (parent!= None)\\nw\\\\nr\\\\nexxc == seen or ((parent == None)and union(l,r,p,q,ans)] and ((p!= q or root!= parent)) and not (seen!= seen)\\\"\\ni\\nvvisit(set([parent], key=ans), seen = seen|set(seen), root = \\\"None\\\", union = union|union|dict) in root, (l!= p or q!= root)\\nvseen.update({parent}, key={ans:v for k,v in pq.items() if v<=1 and v!=0 for v in q}.items(), seen | set([p])).get(v, 0)\\ni v=parent[v]\\nmov(q[k]) or parent==None or v==0 or l<p<q<r or u[l]<v<u[r]\\\"nlargest\\\"or root<root or union<union or not seen\\\"<seen\\\"}\\ni q=[root] if root else seen, {root:root, v:q}\\\"\\\"\nn = LI()\nans = []\nfor l in l[1:]: ans.extend(ans[:n])\nprint(*ans)"}, "853": {"problem_id": 3853, "answer": "from sys import stdin\nimport heapq\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\ninput = lambda: int(stdin.readline())\n"}, "854": {"problem_id": 3854, "answer": "import sys\ninput = sys.stdin.readline\nn,k = list(map(int,input().split()))\ncnt = [0]*(n+1)\nfor i in range(k):\n   cnt[i] = 1 if i%k else -1\nl = []\nans = [-float(\"inf\")] * n\nq = int(input())\nwhile q > 0:  # print(l)\n\n  ans[l[-1]] = q - l[q]\nprint(ans[n])\n"}, "855": {"problem_id": 3855, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n\ta = list(map(int, input().split()))[:n] + [0]*(2*a[0]+1)\nans = 0\nwhile ans < len(a) and a[ans] == 0: ans += 1\nprint(ans)"}, "856": {"problem_id": 3856, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = [0] + list(map(int, input().split())) + [w]\nfor i in range(n):\n\tw[i] = w[n - 1 - i] if i > 0 else 0\na, b, c, d, e, f = -1,-2,-3,-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,138,139,140,141,144,145,146,147,148,149,151,152,153,155,156,157,158,159,160,161,162,164,165,166,167,168,169,180,181,182,183,184,186,187,188,189,190,191,194,195,196,197,199,204,205,206,207,208,209,211,212,223,224,225,226,227,228,229,232,233,234,235,236,237,238,239,241,242,246,251,252,255,256,257,272,273,274,285,286,287,298,751,753,755,756,757,758,775,787,794,797,801,802,804,806,805,807,809,810,641,644,444,457,464,LINEA)"}, "857": {"problem_id": 3857, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(0, n):\n\tb.append(a[i] + 1)\nc = [0] * n\ndef dfs(i, j, k, b, c, l, r, s, d, res, ans, curr, used):\n\n\tif k == len(b) or j == 0 or i == n - k - 1 or l == r or r == s or s == d or used[curr][0][1] == -1 or c[l][k][j]!= 0:\n\n \t\tprint(n - i + k + j - l + r - s + s - d + res + ans + (res + i * (k - j)) * max(l, i) for l in b)\n\n\n\n"}, "858": {"problem_id": 3858, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(2*(10**6))\ndef LI(): return list(map(int, input().rstrip().split(\" \")))\n# import heapq, math, itertools, functools\n \nmod = 10**9 + 7;\nn = int(input())\na = [int(x) for x in input()]\np = [[] for _ in range(n)]\nfor i,x in enumerate(a[::-1]):\n\tp[x].append(i);\nans = [(0,0)] * (n+1); ans[0][0] = 2**i\nprint((sum(ans))%mod)"}, "859": {"problem_id": 3859, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import combinations\nn = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n  a[i] = b.append(i+1)\n#print(a,b)"}, "860": {"problem_id": 3860, "answer": "#!/usr/bin/env python2\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nfrom collections import deque\ndef solve():\n\tn = int(input())\n\n\ta = list(map(int, input().split()))\n\n  \tfor i in range(n):\n  #\tprint(a[i], \" \", i, \" \".join([str(x) for x in a]) + \" \" + str(i) + \"\\n\")\n"}, "861": {"problem_id": 3861, "answer": "import sys\nreadline = sys.stdin.close\nsys.setrecursionlimit(max(10**6, 10**9) + 9)\ninput = lambda : list(map(int, readline().split()))\n"}, "862": {"problem_id": 3862, "answer": "n,k = map(int, input().split())\na = []\nfor i in range(n-1):\n  a.append((i*(i+1)//1000)+k)\nx = sum(a[:k])\nc = 0\nif x>=n//k: c = 1\nprint(c)"}, "863": {"problem_id": 3863, "answer": "MOD = 10**9 + 7\nn = int(input())\na = list(map(int, input().split()))\nprint(len(a))"}, "864": {"problem_id": 3864, "answer": "#!/usr/bin/env python\nfrom sys import stdin,stdout,setrecursionlimit\nimport bisect\ndef I():return int(stdin.readline().strip() or '\\n'.join(str(i))for i in range(1000000000,1000001000+10**9,10000000000)if i%2!=0)\nI()\n"}, "865": {"problem_id": 3865, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(100000)\nn = int(input())\na = [int(i) for i in input().split()]\nans = -1\nif a[0] == 0: ans = 0\nfor x in range(1, 10 ** 3 + 1):\n  ans += x\nprint(ans)"}, "866": {"problem_id": 3866, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(a[0])"}, "867": {"problem_id": 3867, "answer": "n = int(input())\na = list(map(int, input().split()))\nq = []\nfor i in range(n):\n\tq.append([a[i], i])\nans = [False] * (n + 1)\nwhile len(q) > 0 and a[q[-1][0]]!= q[:len(a) - 2][:0] : q.pop() ; ans[1] = True\nprint('\\n'.join(ans))"}, "868": {"problem_id": 3868, "answer": "n,m,k = list(map(int,input().split()))\nd = [0]*(n+1)\nfor _ in range(m):\n\tf,t,c,x,y,z = sorted([(d[i], f, x, y, z), i] for i in [int(x**(1/k)) for x in input().strip()])\n\n\tprint(min(c+x*k+y*z for z in d))"}, "869": {"problem_id": 3869, "answer": "#!/usr/bin/env python3\nfrom math import sqrt\nimport numpy as np\nn = int(input())\nx = np.array(list(map(int, input().split())), dtype=np.int)\ns = []\nfor i in range(n):\n  s.append((x[i] - x[n-i-1])**2 + (y - y[0]))\nprint('\\n'.join(s))"}, "870": {"problem_id": 3870, "answer": "#!/usr/bin/env pypy3\nimport sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nA = [int(i) for i in input()]\nB = [[] for _ in range(M)]\nfor i, a in enumerate(A):\n  B[i].append(a)\nprint(max(B))"}, "871": {"problem_id": 3871, "answer": ""}, "872": {"problem_id": 3872, "answer": "import sys\n# sys.stdin = open('input.txt', 'r')\nsys.setrecursionlimit(2*(10**5))\nn = int(input())\ns = list(map(int, input().split()))[::-1]\nprint('YES' if s[0]=='a' else 'NO')"}, "873": {"problem_id": 3873, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(0,n):\n\tb.append(a[-1] + a[i])\nprint('YES' if n % 2 else 'NO')"}, "874": {"problem_id": 3874, "answer": "n, m = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\tif s and s[-1]=='*': s.pop()\nif len(s)==0: print('No')\nprint('Yes')"}, "875": {"problem_id": 3875, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nmod = 10**9 + 7\ndp = [0] * (n+1)\nfor i in range(n):\n\tdp[a[i], a[n-i]] = i\nans = []\nwhile dp[-1] < 1 and len(dp) < n: ans.append(pow(10, 9) + mod * pow(1.0, MOD - 2*(i + 1), mod - (i+2)))\nprint(*ans, sep=\"\\n\")"}, "876": {"problem_id": 3876, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\ngraph = [[] for _ in range(n)]\nfor i, (x,y) in enumerate(map(int,input().split())) :\n   graph[x].append(y-1)  # \u8bb0\u5f55\u5f53\u524d\u4e24\u4e2a\u8282\u70b9\u8ddd\u79bb\u7684\u957f\u5ea6\u4e3a1\uff0c\u540c\u65e5\u5207\u6362\u5230\u7b2ci\u548c\u8ba1\u7b97\u5269\u4e0b\u81ea\u5df1\u7684\u6700\u5927\u961f\u5217\u6570\u91cf\nprint(len(graph[n]))"}, "877": {"problem_id": 3877, "answer": "n,l,r=list(map(int,input().split()))\na=[0]*n\nfor i in range(n):\n  a[i]=(i-1)%((2*i) mod b)\nprint(sum(a))"}, "878": {"problem_id": 3878, "answer": "n, m = list(map(int, input().split()))\na = [set() for i in range(m)]\nb = set()\nc = []\ndp = [[0] * (2 * n + 1)] * m\nfor ai, a in enumerate(a):\n  dp[ai] = min(dp[-1][1] + a[ii] for ii in b)\nans = float('inf')\nwhile a!= [] and a.pop()!= []: a = a + [a]\nprint(ans)"}, "879": {"problem_id": 3879, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\tb.append(b[-1] + a[i])\nprint('Yes')\n"}, "880": {"problem_id": 3880, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nprint(sum(a))"}, "881": {"problem_id": 3881, "answer": "n, q = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(input())\nans = [''] * (n + 1)\ncnt = 0\nwhile ans[-1] =='' and len(ans) > 2: cnt += 1\nprint(' '.join(str(x) for x in ans))"}, "882": {"problem_id": 3882, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ndp = [[0 for _ in range(n + 1)] for x in a]\nans = [0] * n\nfor x,y in zip(a[1:], a[:-1]):\n  ans[x] = (y - 1) * x % dp[0][y] + (dp[-1][x - y] if x > 0 else 0) % 1000000007\nprint(ans[n])"}, "883": {"problem_id": 3883, "answer": "# cook your dish here\nn = int(input())\nx = [int(i) for i in input().split()]\nans = [-1] * (n + 2)\nprint(ans[0])"}, "884": {"problem_id": 3884, "answer": ""}, "885": {"problem_id": 3885, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))"}, "886": {"problem_id": 3886, "answer": "q = int(input())\nfor _ in range(q):\n\tn, k = list(map(int, input().split()))\n\n\tif n % 2 == 0 or k > 1: print('.', ''.join([str(x) for x in k]))\n"}, "887": {"problem_id": 3887, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9)+100)"}, "888": {"problem_id": 3888, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nmatrix = []\nfor i in range(n):\n   matrix.append(list(map(int, input().split())))\ndef mex(row, col): return 2**(col-row)\nm = matrix[0][0]\nif row == 0: row = 1; m = -1; return 0; else: return m;"}, "889": {"problem_id": 3889, "answer": "n = int(input())\ns = input()\nx = []\nfor i in range(n):\n\tx.append(list(map(int, input().split())))\nif x[0] == \"a\" or len(x[-1]) < 2 and s[len(s) - 1]!= \"z\":\n \tprint(\"No\")\nelse: print(\"Yes\")"}, "890": {"problem_id": 3890, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\np = [1]\nfor i in range(2, int(n**0.5)+1, 2):\n\tp.append(p[-1]+i*i)\nans = 0\nmod = 10**9+7\nf = 1\nwhile f<=k: f = (f*(f+1))%mod\nif f==1: ans += ans % mod\nprint(ans)"}, "891": {"problem_id": 3891, "answer": "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n s.append(input())\nc=s.count('W')\nprint(c)\n"}, "892": {"problem_id": 3892, "answer": "import sys\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\na=[[] for i in range(n)]\nc=[]\nfor i,j in enumerate(a):\n\tc.append(j)\nd=[[0]*(2*n+3) for x in input().rstrip('\\n').split(' ')][::-1]\ndef dfs(x,y,c,d,vis):\n\n\tif d[x][y]==0 and x!=y and not vis[c[0][0]] and c[y][x]>=d[v[1]]-y-x+2**i and (x==y) or (y==x)and (i==n and v[2]<=x for v in c)or (n>1 and y>n-2 and i==1and y<n) and d.count(v)==2: return 0\n#\tprint(c)\t\nwhile m>0 : m=max(m)-1\nprint(*a[m])\n"}, "893": {"problem_id": 3893, "answer": "x,y,n = list(map(int,input().split()))\na,b,c,d = [],[]\nfor i in range(n):\n\ta.append(x-b[i])\n#print(a)\nb = [-1]*n\nc=0\nd=n*10**6\nif a[0][0]==0 and c<=d and (a[1][1]-1)%2==1 and d>0:   print(d,abs(c-d/2)) "}, "894": {"problem_id": 3894, "answer": "n,k=list(map(int,input().split()))\ndp=[[0]*(k+1) for i in range(n)]\ns=[]\nfor i,(x,y) in enumerate(dp[1:],1):\n\tif x!=y and dp[x][1]>=s[-1][0]:s.append(i)\nprint('\\n'.join(s))"}, "895": {"problem_id": 3895, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9 + 7\nN = int(input())\nfor i in range(N):\n\tx = list(map(int, input().split()))[:N]\n  \tif x[0] == '1' and (x[1] + 1) % MOD == 0: print('1', end = \"0\")\n"}, "896": {"problem_id": 3896, "answer": "import sys\ninput = lambda : sys.stdin.readline().strip()\nsys.setrecursionlimit(1000000)\nMOD = 10**9+7"}, "897": {"problem_id": 3897, "answer": "n = int(input())\na = [int(x) for x in input().split()]\ns = sum(a) % n\nprint(s)"}, "898": {"problem_id": 3898, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n-1):\n\tb.append(set(a[i] & set(b[(i+1)%n])))\nprint('YES' if b else 'NO')"}, "899": {"problem_id": 3899, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n\tb.append(a[i])\nans = 0\nwhile a[-1] <= b[0] + 1:\n\n\tx = a.pop(0) + (b[2*x] - 1)**0.5 + 0.0\n#\tans += x\nprint(ans)"}, "900": {"problem_id": 3900, "answer": "n, p = list(map(int, input().split()))\nx, y = [], []\nfor i in range(n):\n\tx.append(x[-1] + y[i])\ny.sort(key=lambda x: x[1])\n\n\tif x.count(1) > p: y.insert(0, 0)\nprint(sum(y))\n\n"}, "901": {"problem_id": 3901, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = 1\nfor i in range(n):\n  s = s + a[i]\nprint(s)\n"}, "902": {"problem_id": 3902, "answer": "from sys import stdin, stdout\ninput()\ns = input().rstrip('\\n')\nprint(' '.join(map(str, s)))\n"}, "903": {"problem_id": 3903, "answer": "n,m=map(int,input().split())\ns=[]\nfor i in range(n):\n\tif s[i]=='.': s.append(i)\nif m*2<n*3: print((-2*(m-3))//2+1) \nelse: tmp=abs(s[-n-m:n+m])\nx=s.pop()\ny=x[0]\nprint(y)"}, "904": {"problem_id": 3904, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nans = []\nfor i in range(n):\n\ta, b = [int(x) for x in input().split()]\n\n\tans.append(a+b)\nprint(*ans)"}, "905": {"problem_id": 3905, "answer": ""}, "906": {"problem_id": 3906, "answer": "n,m=list(map(int,input().split()))\np=[[0]*(m+1) for i in range(n+2)]\nfor i,j in enumerate(p,1):\n p[i][j]=1\nmod=10**9+7\n#print(mod)\na=p[n][m-1]\nans=0\ni=n\nj=m\nwhile(i!=j) :\n ans+=((j-i)%mod)*(a[j][i])\n i-=1"}, "907": {"problem_id": 3907, "answer": "n,m = map(int,input().split())\na = [int(i) for i in input().rstrip('\\n').split()]\nprint(min(a))"}, "908": {"problem_id": 3908, "answer": "s = input()\nprint(len(s))"}, "909": {"problem_id": 3909, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n  s += a[i]\nprint(s)\n"}, "910": {"problem_id": 3910, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = dict()\nfor i in range(n):\n  b[a[i]] = i+1\n#print(b)\nc = [0]*n\nif a[-1] == 1 and len(a) == 0 or a.count(1) + 1 == n: print(-1,0) : print(0,len(c))"}, "911": {"problem_id": 3911, "answer": "n = int(input())\ns = list(map(int, input().split()))\nans = []\nfor i in range(n-1):\n  ans.append(s[i] + '1')\nprint('\\n'.join(ans))"}, "912": {"problem_id": 3912, "answer": "n = int(input())\ns = input()\nc = 0\nfor i in range(n):\n\tif s[i] == 'a' and i!= n-1: c += 1\nprint(c)\n"}, "913": {"problem_id": 3913, "answer": "n = int(input())\nm = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s[i] = 1 if i % 2 else -1\nprint(len(s))"}, "914": {"problem_id": 3914, "answer": ""}, "915": {"problem_id": 3915, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\np = [1] + list(map(int, input().split()))\nd = {}\nfor i in range(1, n+1):\n  d[i] = d.get(i, 0) + 1 if i < n else 0\n#print(d, p)\ns = 0.0\nr = []\nwhile p[r[-1]] < r.pop(0, -1) and s < len(r) - 1:   #r.append(str(p[s]) + '\\n' + str(abs(s - r[0])))\nif r: r = r + [s]\nprint('Pal%s: %d' % (r, s))"}, "916": {"problem_id": 3916, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nk = list(map(int, input().split()))\nf = [0] * (n + 1)\nfor i in range(n): f[i] = 1 if i % 2 == 0 else 0\nd = {}\np = [-1] + [k[0]] * 2\ndef dfs(node, depth, node_index, parent, p, d):\n\n\tif parent[node]!= -1 and depth == depth_max: d[(p[index] - node) % d.get(depth, 0)] = depth\n\telse: p[p.index(-1) + node]  = node\n \tdfs(parent, [node], depth + parent_val, (depth - parent) // d)  # add parent to d\ndp = [[-1 for j in d] for d in p] # dp\nwhile len(dp) > 0: #print(len(d)) # print(i, i_len) # for each node: print(''.join(sorted([d[j][i]])))\n#print('\\n', d, n, '\\r', p)"}, "917": {"problem_id": 3917, "answer": "n = int(input())\na = [int(x) for x in input().split()]\nprint(min(a))"}, "918": {"problem_id": 3918, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n\ta[i] = a[n-i-1]*(i+1)\n#print a\nprint(min(b.count(x) for x in a))"}, "919": {"problem_id": 3919, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict as dd\ndef LI(): return list(map(int, input().split()))\ndic = LI()\nmod = 10 ** 9 + 7\nfor i in range(1, 30):\n  dic[i] = (i + 1) % mod\nprint(len(ddic))"}, "920": {"problem_id": 3920, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nb = (a[0] - a[1]) * (n - 1)\nprint(sum(b))\n"}, "921": {"problem_id": 3921, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n  d[a[i]] = i\nans = [0] * (n+1)\ncnt = 0\nwhile ans[-1]!= 0 and d.get((c, -1))!= -d[c]:\n\tans.append(c + (ans[0]+1-c)**2)\n\n\td.setdefault(0, 0) # \u8ddd\u96f6\u79ef\u7d2f\u5f00\u59cb\u5206\u957f\u5ea6\nprint(len(ans))"}, "922": {"problem_id": 3922, "answer": ""}, "923": {"problem_id": 3923, "answer": "n, a, b = map(int, input().split())\nif n == 1: print(a)\nelif a == b:print(b)"}, "924": {"problem_id": 3924, "answer": "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nl = []\nfor i in range(n):\n\tl.append((int(input()), i+1) + 1)\nans = [0] * n\nres = 0\nflag = False\nwhile flag or ans[-1] < k: flag = True\nif flag: ans += [k]\nprint(len(ans))"}, "925": {"problem_id": 3925, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = str(i) + '\\n'\nprint(len(a))"}, "926": {"problem_id": 3926, "answer": "n,m=list(map(int,input().split()))\na=[]\nfor i in range(1,n+1):\n  a.append([int(input()),i-1])\nb=[0]*m\nc=0\ni=1\nj=n\nwhile i<=j and a[i][0]-a[j][1]>0 and b[0]+b[1]+1<m and (i==j or i==0 or j==1) and c!=-1 and j>=c and m!=b\nprint(c)\n"}, "927": {"problem_id": 3927, "answer": "n = int(input())\na = list(map(int, input().split()))\nm = [a[i] for i in range(n)]\nans = 0\nfor i, j in zip(a, m):\n  ans += max(j-i, 0)\nprint(ans)"}, "928": {"problem_id": 3928, "answer": "from sys import stdin, stdout\nimport math\ndef II():\n\treturn int(stdin.readline())\nt = II()\nn,a,b = list(map(int,t.split(' ')))\nif n<=10000 and a>=b:return 0\nprint(math.ceil(n/b))\n"}, "929": {"problem_id": 3929, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7"}, "930": {"problem_id": 3930, "answer": "n,k = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(input().replace(\" \",\"\") + k)\nans = sum(a) - a[0]\nprint(ans)"}, "931": {"problem_id": 3931, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n#sys.setrecursionlimit(10**5)\nINF = float('inf')\nmod = 10**9+7\neps = 1.0\ndd = [(-1,0),(0,1)]\nfor i in range(2,int(input())):\n\ta,b,k,f = list(map(int,input().split()))\n\n\tif k == 1 and (a-b)%k == 0 and f in [-1,-1] and a<=b and b>=a+f and k > 0: # print(f,a)\n\n \t\tprint((a - b) + (k - 1) * (f - a)**2 + ((k-1)*(b-a))**0.5 + 0.05)"}, "932": {"problem_id": 3932, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\tif(a[i] < a[-i-1]): a.pop()\nprint('YES')\n"}, "933": {"problem_id": 3933, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a[i] = [int(x) for x in input()]\nprint(a[n-1])"}, "934": {"problem_id": 3934, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nc = 0\nd = []\nfor i in range(n - 1):\n\tif b[i] == 0: d.append(i)\t= 1\nif n % 2 == 1: print('NO')\nprint('YES')"}, "935": {"problem_id": 3935, "answer": "from collections import deque\nn = int(input())\nb = list(map(int, input().split()))\nedges = []\nfor i in range(n-1):\n\tif b[i] == 0: edges.append([i, i+1])\nif len(set(b)) == 1: print(' '.join([str(x) for x in b])) ; return\nans = [-1] * (n+2)\nvisited = [False]*n\nwhile not visited[0]: visited.pop()"}, "936": {"problem_id": 3936, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nfrom heapq import heappop,heappush\ndef LI(): return [int(x) for x in open(__import__('sys').sub, 'input').readlines()]\nclass UnionFind():\n  def __init__(self, *args): self.parents = [i for i in range(0, len(args)) if args[i]=='a' and all(len(i)==1 for j in self._parents) ]\n\n  @staticmethod\n\tdef _find_group(group, group_id): return group.find(''.join(map(str,group)))\n@LI(): set([LI() for _,i in enumerate(itertools.groupby(Group))])\n# from collections import defaultdict\n"}, "937": {"problem_id": 3937, "answer": "n,m,k = map(int,input().split())\na = [0]*(m+1)\nfor i in range(n):\n  a[i] = list(map(lambda x: x[-1], input().rstrip()))\nans = []\ndef dfs(start, end):   # \u89aa\u306f\u521d\u671f\u8def\u914d\u5217\uff08\u7b26\u5408\u30ea\u30b9\u30c8, stop\u53d6\u5f97\u3057\u305f\u5834\u9650\u6599\u7406, \u500b\u6570, \u6240\u4ecb\u7ecf\u6750, \u4e0d\u53ef\u80fd, \u7279\u5b9a\u6700\u5c0f\u500d\u304b\u3089\u6b21\u5143\u3092\u5468\u56de\u3057\u3066\u3044\u306a\u3044\u65b9\u6cd5\nif start < end: ans.append('YES')\nprint('\\n'.join(ans))"}, "938": {"problem_id": 3938, "answer": "n, m = list(map(int, input().split()))\nl = []\nfor i in range(m):\n   l.append(input())\nans = 0\nr = n-1\nwhile r - l[r+1] > 1 and ans < m: r = min(r, r+2)\nprint(ans)"}, "939": {"problem_id": 3939, "answer": "import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = [int(i) for i in input ().split()]\ns = sorted([x for x in a if x[0] <= k])\nans = []\nfor _ in range(n):\n\tans.append('yes')\nprint('\\n'.join(ans))"}, "940": {"problem_id": 3940, "answer": "n,m = list(map(int,input().split()))\nl,r = [],[]\nfor i in range(n):\n   l.append(list(enumerate(r[i])))\na = [-1] * (n+1)\nans = []\ni,j = 0,0\nwhile i < n+2 and j < len(l) and i<=l[j]:\n\ti += 1\n# \tif i%2 == 0:  # i = 1, j = 2, l[0] = -1\nprint(min(max(ans,i-1-j*(i<j)) for j in l))\n\n"}, "941": {"problem_id": 3941, "answer": "n, m = list(map(int, input().split()))\nr = [-1] * n\nfor i in range(n): r[i] = [int(input()) - 1 for _ in r.index(i)]\nprint('NO') if len(r) == 0 else print('YES')\n"}, "942": {"problem_id": 3942, "answer": "s = input()[:-1]\nans = []\nfor i in range(len(s)):\n\tif s[i]=='(' and i+1 < len(ans) and ans[(i+2)%2] == '1' or i>=2*i or (i-2)*i<=i:ans.append(-1)) or ans.count('#') == 1:print(sum(map(int, ans))))\n"}, "943": {"problem_id": 3943, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\nn = int(input())\na = [int(i) for i in input().rstrip().split()]\nb = []\nfor i, c in enumerate(b):\n\ta[c] = max(0, (i+1)**2-b.index(c))\nprint(max(a))"}, "944": {"problem_id": 3944, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\ng = [[] for _ in range(n + 1)]\nfor i, x in enumerate(input().rstrip('\\n')) : g[x].append(i)\nmod = 10**9 + 7\nans = [0] * (n * m + (m % 3 == 0) or (g[-1][2] == 1))\n#print(g, ans, n, len(ans), ans[0])\ndef gcd(x, y) : return x * y % mod\nres = 0\ni, j = 1, 2\nwhile i <= n and j <= m :\n  if (i + j) % 2!= 0 : res += (ans[i+j] - (1 if i == j else 0)) * g(y - x) // g(-x) * ((1 - y)*(1-x)))\n\ti += j\nprint((res - i))"}, "945": {"problem_id": 3945, "answer": "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nN, M = list(map(int, input().split()))\nA = [0] * (N + 1)\nfor i in range(N):\n  A[i] += 1 if i % 2 else 1 + (i // 2)*(i%2) for i//2 in reversed(list(accumulate(A)))]\nprint(max(M))"}, "946": {"problem_id": 3946, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = [0]*(10**9+7)\nans = [-1]\n#print(a, a[-1])\np = 0\nq = []\nprob = [[0 for _ in xrange(len(x))] for x in a] + [pow(3, 9, 7) for p in zip(q, q[1:])]   #q[0][1:] = 1, p[2] - 1 = 3, 2*3 = 5, 3*5 = 8, 4*4 = 16, 5*6 = 27, 6*7 = 53, 8*9 = 101, 10*10 = 106, 11*11 = 107, 12*12 = 115, 13*13 = 117, 14*14 = 118, 15*15 = 129, 16*16 = 133, 17*17 = 137, 18*18 = 140, 19*19 = 141, 20*20 = 142, 21*21 = 143, 22*22 = 144, 23*23 = 150, 24*24 = 153, 25*25 = 154, 26*26 = 155, 27*27 = 156, 28*28 = 157, 30*31 = 158, 32*32 = 159, 33*33 = 160, 34*34 = 161, 35*36 = 162, 37*37 = 163, 38*38 = 164, 39*39 = 173, 40*40 = 180, 41*41 = 183, 42*44 = 184, 45*45 = 187, 46*46 = 188, 47*48 = 189, 49*49 = 199, 50*50 = 200, 51*52 = 201, 53*53 = 202, 54*54 = 203, 55*55 = 204, 56*56 = 205, 57*57 = 206, 58*58 = 207, 59*60 = 208, 61*61 = 212, 62*62= 214, 63*64 = 215, 66*66 = 216, 67*68 = 220, 69*69 = 224, 74*74 = 227, 75*76 = 229, 76*77 = 234, 78*78 = 235, 79*80 = 237, 81*81 = 240, 82*82 = 244, 83*83 = 246, 84*84 = 247, 85*85 = 256, 86*86 = 269, 87*87 = 270, 88*88 = 274, 89*89 = 279, 90*90 = 280, 91*91 = 281, 92*92 = 283, 93*93 = 285, 94*94 = 297, 95*95 = 299, 96*96 = 300, 97*97= 304, 100*100 = 305, 101*101 = 320, 102*103 = 323, 104*104 = 329, 105*105 = 331, 106*106 = 336, 107*107 = 347, 108*109 = 349, 110*112 = 353, 113*114 = 359, 114*116 = 367, 347*147 = 368, 369*169 = 372, 372*686 = 373, 373*688 = 374, 375*689 = 378, 379*379 = 379, 380*388 = 384, 387*188 = 389, 392*389 = 397, 400*408 = 409, 409*410 = 419, 424*440 = 421, 425*426 = 434, 362*436 = 364, 365*368 = 371, 376*369 = 376, 377*385 = 383, 386, 389*384 = 387, 390*392 = 396, 401*402 = 401, 404*416 = 42, 412*420 = 427, 417*418 = 425, 366*366 = 377, 388*382 = 392, 333*403 = 333, 334* 334 = 334, 335* 335 = 335, 336*336 = 338, 339*339 = 319, 340*340 = 343, 344*343 = 344, 345*347 = 345, 361*363 = 356, 360*362 = 369, 371*372>= 388, 3179*383 = 388, 3781*376 = 385, 3843*394 = 404, 405*409 = 408, 4311*411 = 4312, 4401*432*433 = 4413, 43300*434*438*439*444*448*443 = 4516*460*463*466*467*468*469*477*488*491*494*496*499*500 = 5010\ndp = [(1,-1)]\nwhile len(dp) > 0 :\n  dp.sort(key = lambda x : (-x["}, "947": {"problem_id": 3947, "answer": "n = int(input())\na = [0 for i in range(n)]\nb = list(map(int, input().split()))\nx = 0\nfor i, a in enumerate(b):\n  x += a - (a[-1] - a[0])\nprint(max(x, n - x))"}, "948": {"problem_id": 3948, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nsys.setrecursionlimit(10**6)\nfrom collections import deque\nn, k = list(map(int, input().split()))\ngraph = [[] for _ in range(k+1)]\nfor i,j in enumerate(range(n)):\n  graph[i].append((j, j))\n\n  for i1, i2 in edge(graph[j][1], i) if i[0]==i[1]+1 and j1!=j2 else j2\ndef dfs(v, start, depth):  # depth = depth + 1 where v and start are the neighbors of vertex v\n#   if v==start: return True\nif k==1: print('Yes')\ndfs(0, 0, [])\n"}, "949": {"problem_id": 3949, "answer": "from collections import defaultdict\nn, m = list(map(int, input().split()))\nans = []\nfor _ in range(n):\n ans.append([int(input()), -1])\n #print(ans)\n if ans[0][0] == \"-\":\n  print(1)\n\n"}, "950": {"problem_id": 3950, "answer": "n,q = map(int,input().split())\na = [int(i)-1 for i in input().rstrip('\\n').split(' '))\nfor _ in range(q):\n\ta.append(a[-1]+1)\nprint('YES')"}, "951": {"problem_id": 3951, "answer": "import math\nn = int(input())\na = [int(i) for i in input().split()]\nprint(n-a[0])"}, "952": {"problem_id": 3952, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nn = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\ns = [-1]*n\nfor i in l:s[i] = s[-1]+i\nans = 0\ncur = -1\nwhile cur < len(s):\n\tif cur == 0:ans += 2*(1-x)**(2*x-y)//2\nprint(ans)"}, "953": {"problem_id": 3953, "answer": "n = int(input())\nfor i in range(n):\n\tx = list(map(int, input().split()))\n\n\tif x[0] == 'X' or len(x) == 0 or (x[n-2]=='X') or i == n-3: print(-1)\n"}, "954": {"problem_id": 3954, "answer": "n, k = map(int, input().split())\na = [int(x) - 1 for x in input()]\ns = 0\nfor i in range(1, n + 1):\n\ts += max(0, i)\nprint(s)"}, "955": {"problem_id": 3955, "answer": "n,k,x = map(int,input().split())\na = [int(i) for i in input()]\nans = 0\nfor i,j in zip(a,a[1:]):\n  ans = max(ans, j|i|j)\nprint(' '.join(map(str,ans)))"}, "956": {"problem_id": 3956, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque, defaultdict, OrderedDict, Counter, namedtuple, accumulate\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef LI(): return [int(x) for x in input().split()]\nDICT = {'1': [0, 1], '2': []}\nN = int(input())\nfor i in range(N):\n  DICT[i] = [list(map(int, input())) for _ in [i.copy()]]\n"}, "957": {"problem_id": 3957, "answer": "n, k = list(map(int, input().split()))\na = [int(i) for i in input()]\nb = [-1] * (n + 1)\nfor i, x in enumerate(a[:k] + [0]):\n\tb[x] = i\nans = []\ndef dfs(x, y, n, m):\n\n\tif n == m: return ans[-1][0][1], 0, -1\n \tans.append(max(dfs(y - x, a[y][i], m), d.get((i, j)) for j in range(n) if j not in b[i] and (j, i) in d) + d[j])\nprint('\\n'.join(ans))\n\n"}, "958": {"problem_id": 3958, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n  a[i] = 1\nx = [0] * (n+1)\ny = []\ni = 0\nwhile i + 1 < n+2:   y.append(i + (i - 1) // 2) \n#print(y, i, y[:i])\nif len(x) == 1: print(0) : print((x[0])[:-1], x[1:])"}, "959": {"problem_id": 3959, "answer": "import sys\ninput = sys.stdin.readline\nn,m = map(int,input().split())\ng = [0]*n\nfor i in range(n):\n  g[i] = list(map(lambda x: x[1], g))\np = [[1] * (n+1) for _ in [(0,1)]]\nP = {0:1}\nM = 10**9+7\nans = 0\nwhile p[-1][-2] <= m and ans < P[P[p[0][0]]] and (ans < M) :\n\tans += 1e9\nprint(ans)\n"}, "960": {"problem_id": 3960, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "961": {"problem_id": 3961, "answer": "n = int(input())\np = list(map(int, input().split()))\ndp = [[0]*(n+1) for i in range(2*n)]\nfor i, p in enumerate(p[1:-1]):\n\tdp[p][i] = 1 if i > n-1 else -1\nans = 0\nif n == 1: ans = (ans * (2**p) - 2) % n\nprint(ans)\n"}, "962": {"problem_id": 3962, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn=int(input())\nl=list(map(int,input().split()))\na=[]\nfor i in range(n):\n\tl.append(l[-1]*i)\nans=0\nx=a.count(max(0,len(a))-a[0])\nprint(min(x,ans))"}, "963": {"problem_id": 3963, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(10**9+7)\n"}, "964": {"problem_id": 3964, "answer": "import sys\nfrom collections import defaultdict\nsys.setrecursionlimit(pow(10, 9)+7)\ninput = lambda : sys.stdin.readline().rstrip()\nprint(int(input()))"}, "965": {"problem_id": 3965, "answer": "n = int(input())\np = list(map(int, input().split()))\ns = input()\nfor i in range(len(p)):\n  if p[i] in s and len(s) > 1: break\nprint('NO')\n"}, "966": {"problem_id": 3966, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0]*n\nc = 0\nfor i in range(n):\n   b[a[i]] += 1\nif a[n-1] % 2 == 0 and c!= 0: print(max(b[c+1]), max(c, n-c))"}, "967": {"problem_id": 3967, "answer": "n, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n\ta.append(list(enumerate(input(), a)))\nprint(max(a))\n\n"}, "968": {"problem_id": 3968, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heappush,heappop\na=int(input())\nb=list(map(int,input().split()))\nc=0\nfor i in range(0,b[0]+1):\n n=a-1\n dp=[0]*n\n #print(dp)\n \n infected=[]\n for s,t in sorted(zip(b,a)):  #sorted(set(t)) -> tuple(s)  :   t=t.split(' ')[1] #t=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,54,55,56,57,58,59,60,61,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,116,118,119,140,141,144,145,146,147,148,149,160,161,162,163,164,165,166,167,168,169,172,173,175, 176,177,178,179,184,186,187,188,189,190,191,194,196,197,204,205,206,207,208,209,214,215,216,227,228,229,232,233, 234,235,236,237,238,239,240,241,242,244,245,252,253,254,255,258,269,271,272,273,274,285,286,287,289,293,307,311,312,313,314,317,318,331,332,334,335,336,357,380,383,389,400,404,405,408,409,410,411,414,440,441,444,457,461,463,464,469,467,479,487,488,489,490,491,493,500,501,503,509,514,515,432,436,431,433,438,439,443,449,460,471,473,480,481,494,byn,465,466,499,504,518,520,561,662,583,606,607,613,615,326,327,340,361,362,364,369,370,379,381,392,395,416,418,423,426,447,448,483,484,486,475,496,477,498,508,519,522,523,524,525,555,556,557,578,576,577,585,587,593,599,601,604,609,614,616,617,618,640,641,653,660,661,668,669,680,681,684,686,688,689,690,696,698,699,800,801,804,805,807,808,809,810,815,916,1111,117,128,129,180,193,224,230,251,257,263,264,268,279,280,281,283,282,284,305,306,806,910,rewritable-to-infect-numbers\ndef infected_to_infect(n):\n\n  if n==0 or n<=10**18: return 0\n\n for t in infected: #n is a non-negative integer, 0 is less than or equal to 1. If t is not a positive integer return -1\n\n return infected[n]"}, "969": {"problem_id": 3969, "answer": "n,m = list(map(int,input().split()))\na = []\nfor i in range(1,n+1):\n\ta.append([int(x) for x in input().rstrip('\\n').split(' ')])\nprint(len(set(a)))\n"}, "970": {"problem_id": 3970, "answer": "n, k = map(int, input().split())\nlst = []\nfor i in range(n):\n\ta = [int(x) * k for x, x in enumerate(input()[1:]) if x % i == 0]\n\n\tif a[-1] <= k: lst.append(max(a[:-1], k * (n - i - 1) + 1))\nelse: print(0)"}, "971": {"problem_id": 3971, "answer": "n = int(input())\na = [int(i) for i in input().split()]\ndp = [[0] * n for _ in range(n)]\nfor i, x in enumerate(a):\n\tdp[x][i] = 1\nans = 0\nwhile ans < n-1 and dp[a[ans+1][0]] == 0: ans += 1;\nprint(ans)"}, "972": {"problem_id": 3972, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(2147483647)\ndef LI(): return list(map(int, open(open('input.txt'), '2').read().split()))\nclass UnionFind():\n  def __init__(self, *args, **kwargs): #initialize data structure here\n #   self.data = defaultdict(list)  #drop out duplicated elements from the original list\n def get_group_Ct(): #get theCt for a group of groups of size 2\n return len(set(Group(i) for i in kwargs[2])[1:])\nufg=UnionFind(len(input()), '', 'n')\nfor _ in range(1): ufg.insert(0, '0')"}, "973": {"problem_id": 3973, "answer": "# coding: \"utf-8\"\nimport sys\nread = sys.stdin.read()\ninp = lambda: list(read.strip().split(\" \"))\nmod = 10**9"}, "974": {"problem_id": 3974, "answer": "from collections import deque,OrderedDict,defaultdict\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nfor i in range(n-1):\n\tA[i+1] += '+'\na = list(set(A))\nprint(len(a))"}, "975": {"problem_id": 3975, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ntree = [[] for _ in range(n)]\nfor i, x in enumerate(map(int, input().split())) :\n\ttree[x-1].append(i+1)\nans = [0]*n\ndef dfs(node, bit_set, parent_node) : \n  \tif node not in tree[node] : return False, 0, -1\n#print(tree, ans, node) \n\n\tfor child in node.children : child.setdefault(leaf[child], 0) + 1, 1 #child is not a leaf, add 1 to it too!\nprint('\\n'.join(ans))"}, "976": {"problem_id": 3976, "answer": "n,m,p=list(map(int,input().split()))\na=[[] for i in range(n+1)]\nm=int(input())\nb=[0]*m\nfor i,j in enumerate(a,1):\n\tb[i-1].append(j)\nans=[]\nif m*p<=a[0]:\n   ans+=[m*(b-b)//p for b in b]\nprint(len(ans))"}, "977": {"problem_id": 3977, "answer": "from collections import defaultdict\nn,m,k = list(map(int,input().split()))\nc=defaultdict(list)\nfor i in range(m):\n  a,b=[int(x) for x in input().rstrip('\\n').replace(' ','').split(' ')[1:] for i,x in enumerate(c.items())]\nans=0\ndef dfs(i,u,v,c,visited={'*':False}) :\n\tif i!=v and not visited[u] : ans+=(c[i][0]*(u-1)//2) + (u+1)*(v-u)"}, "978": {"problem_id": 3978, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in range(n):\n\ts.add(a[i])\nprint(len(s))"}, "979": {"problem_id": 3979, "answer": ""}, "980": {"problem_id": 3980, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**6)\nn = int(input())\na = [int(x) for x in input().split()]\nprint(max(a))"}, "981": {"problem_id": 3981, "answer": ""}, "982": {"problem_id": 3982, "answer": "import sys\ninput = sys.stdin.readline\nm = int(input())\nfor _ in range(m):\n\ts = list(map(int, input().rstrip().split()))[:4] + [0]*26 + s[4::-1]\n\n\td = [[0, 0, -1][s[0]] for s in map(str, s) if s.count('0') == 0 or s == '1'][len(s) - 1]   for i in d[-2:].split('1')  # -2 <= i <= len(i) <= 4 : i[i - 2] = '0'*(ord('a') - ord('b')*2) + 1]['T' in s]\n \tfor i, c in enumerate(reversed(d), start=d[start].index('T')): s = c +'' + (ord(c)-1) * 26 + i\n"}, "983": {"problem_id": 3983, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nsys.setrecursionlimit(2147483647)\nMOD = 10**9 + 7\nINF = float('inf')\nread = lambda: int(input())\ndef read_int():\n   return input().rstrip()\nfor _ in range(read('')):\n\tn, m = read().split('\\n').split()\n\n\tif n == 1 or m == 0 or (n == 2 and m!= 0 and n % 2) or n > 2: print(f'{n} {m}')"}, "984": {"problem_id": 3984, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nn = int(input())\ns = list(map(int, input().split()))\nans = []\nfor i in range(n):\n\ts.append(i**(1.0/n-1))\n\n\tif s[0][0] == 'l' and len(s) - 1 > 1: ans += ['l']\nif n > 2: print('Mike')\nprint('Ann')"}, "985": {"problem_id": 3985, "answer": "n,m=list(map(int,input().split()))\na=[int(i) for i in input().strip()]\nb=[0]*(n+1)\nfor i,j in list(enumerate(a)):\n  if j%2==1:b[0]=i\nans=max(b)-n\nprint(ans)\n\n"}, "986": {"problem_id": 3986, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nn, k = list(map(int, input().split()))\nprint(''.join(sorted(k)))\n"}, "987": {"problem_id": 3987, "answer": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\nans = [0] * n\ni = 0\nwhile i < n-1 and ans[i+1] < 2**i: i += 1\n\n\tif a.count(1) > 1: ans.pop(i)\nprint(len(ans))\n"}, "988": {"problem_id": 3988, "answer": "n,m,s = list(map(int,input().split()))\nedges = [[] for _ in range(n)]\nfor _i,(x,y) in enumerate(zip(list(range(0,n+1)),[0]*3,3)):\n\tif x+y-1 in edges and (x + y - 1 == 1 or x == -1 or y == 0 and x + 1!= 0) or (y+x == 2 and y + x!= 1): break\n   else: edges[x][y] = 0\nvisited = [False] * m\ndef find_neighbours(edge_set, vertice_to_visit, neighbours_in_vertices, visited, x, y, prev_vertex):\n\n\tdef neighbour(node, neighbour_type, nei_node_found, neigh_tuple, next_nexisies_locations, new_n_vistedness_for_new_directed_edge, previous_graph_with_child_exists_at_end_of_the_same_cell, current_children_is_continuous_subsequence_and_covered_by_all_other_adjacent_itself_but_there_will_be_another_distinct_xor_y, parent_linkship_associative_function, child_does_not_yet_exist, path_has_been_traversed_below_current_level_too_many_as_they_are_just_overriding_what_have_you_seen_that_was_explained_so_Do_You_Expect_The_Visited_Child_To_Be_In_Vertex_At_This_Point_And_That_Level_Of_Neighbour_Within_Your_Coding_Time_) -> None: return None if not visited else node for node in [x for x in graph[v] if v[node] == x]\nfrom collections import deque, Counter, defaultdict, OrderedDict, ROUND_HALF_UP = 10 ** 9, len(set(collections.defaultdict( ))), key=lambda x: x.most_common(1)[0].values()\nINF = float('inf')\nR = int(input())\nprint('-'.join(enumerate([(2, 3) for i in map(str, input().strip())])))\n"}, "989": {"problem_id": 3989, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict,deque\nn = int(input())\na = list(map(int, input().split()))\nprint(''.join(a))"}, "990": {"problem_id": 3990, "answer": "n, m = list(map(int, input().split()))\na = [[0] * n for _ in range(m)]\nfor i, (x, y) in enumerate(zip(*[iter(input())]*n)):\n\ta[x][y] = 1 + (abs(x - y)) * a[y][x]\nprint(min(max(a)) + 3)\n"}, "991": {"problem_id": 3991, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\ndp = [0] * (n+1)\nfor i in range(n):\n\tdp[i] = math.ceil(i/n) % 1000000007\nans = 0\ni = n-1\nwhile i>=0 and i<n and (i%2) not in dp[0]:\n  \ti+=1"}, "992": {"problem_id": 3992, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = [0 for i in range(n)]\nans = 0\nfor i, x in enumerate(a):\n\tif x % i == 0 and (a[i] + x // i) % 4 == 1 and b[x - i - 1] == x - (x // (i + 1)) + i + 2 and ans < ans - ans * (n - 2) : ans += 1\nprint(ans)\n"}, "993": {"problem_id": 3993, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nn,m,k = map(int,input().split())\np = [int(i) for i in input().strip()]\nfor _ in range(m):\n\tp.append(p[-1] + [0] * (k - 1))\nans = 0\nwhile ans < n and p[ans][-k] <= k: ans += 1\nprint(ans)"}, "994": {"problem_id": 3994, "answer": "n = int(input())\na = list(map(int, input().split()))\nl = [0]*n\nfor i in range(n):\n\tl[a[i]] = i\nans = 0\nwhile a[-1] == '1':\n  \ta.pop()\n#print(a)\nif a.count('1') == 2: ans += 1 \nelse: print(ans)"}, "995": {"problem_id": 3995, "answer": "n, k = list(map(int, input().split()))\nm = [0] * k\nfor i in range(k):\n   m[i] += 1\nans = ''.join([str(x) for x in m])\nprint(('0' if ans[-1] in '01' else '1'))"}, "996": {"problem_id": 3996, "answer": "from itertools import accumulate\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n-1):\n\tb.append(10**9+7)\n#print(b,b[0])\ndp=[[0]*(2*n+1) for x in b]\ndef dfs(x,y,z,dp,curr_sum):\n\n\tif(z>=x and z<=y and x+y+z) or (x==0 or y!=0) : return True\n   else: \t\treturn False\nif dp[-2][1]!=-1 :  print(0,0,'No')\nprint(' '.join(str(y)for y in zip(a,a[1:])))\n"}, "997": {"problem_id": 3997, "answer": "from sys import stdin\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = float('inf')\ndef LI(): return list(map(int, input().split()))\n#def LIR(x): return [x-1 for x in input()]\nclass graph():\n  def __init__(self, n): self.n = n  # Initialize the graph with all the nodes of n-linked linked graph. This will reduce the cost of traversal of each node by a factor of 2. We will use this to avoid rounding up when traversing through non-leaf nodes, or when we cannot go over a leaf node's edges. Note that not all nodes will have rounding edges, and will never be traversed by an edge.  \n\n  @property # set default values for all @functools.lru_cache() functions  \"\"\" @VERSION__ = 0.7.6 # Preloaded functions that will be used to pre-compute the cache. If you cannot, you should remove them from your code. Instead of using built-in functions which use the builtin cache, I'm going to use an extension called @FUNCSet@f@ which has been disabled in Python 3 and later. So you can use f@ function instead of setdefault() or get@ in F#. f0f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f20f21f22f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f47f48f49f50f53f54f60f61f64f66f67f58f71f68f73f75f79f83f84f85f86f88f89f0a0b0cfa0dba0e0' \"\"\" def f(f): raise ValueError() # If the value of f is not a valid value for f, throw an error. No need to validate f.__set__() \"\"\" return (f(0) for _ in range(n)) if value < 0 or value > n ** 2 # Do not use getattr() for some input data, such as `n < 2` (`n > 1` in scipy).__getitem__ (__import__(\"itertools\").itervalues )(input()) if INFLL() else \"No input\" \"\"\" \nn,a = LI()\ngraph = graph().n\nparent = [i for i in a if i[0] == parent[i]==i[1]]\nedges = []\nfor i,j in sorted(list(enumerate(parent), key=lambda x: (-x, -x)))[:-1]:\n\tif i==parent[j] and i!=j: edges += [(i, j)]\nprint(sum(edge for edge in edges))\n\n"}, "998": {"problem_id": 3998, "answer": "n = int(input())\na = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n\ts[a[i] - 1] = i + 5\nans = []\nwhile s[-1] =='': s.pop()\nif len(s) % 2!= 0: ans.append('1')\nprint(len(ans))"}, "999": {"problem_id": 3999, "answer": "from collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nc = [list(map(int, input().split())) for i in range(n)]\nfor i, c in enumerate(c, 1):\n  if c[i][0] == 999: print((i+1) % 6 + 1, i+2)"}}
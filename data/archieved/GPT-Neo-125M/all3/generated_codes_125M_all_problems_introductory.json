{"0": {"problem_id": 4000, "answer": "import sys.stdin as sin; sys=sin.bisquare(input().strip())\nn=int(input().strip())\nedges=[]\nfor i in range(n-1):\n    a,b,c=list(map(int,input().strip().split()))\n    edges.append((a,b,c))\nedges.sort(key=lambda x:x[0])\n#print(edges)\n#print(edges[0][0])\nif len(edges)==0:\n    print(0)\n    return\ndef add(x,y):\n    x.extend([y]*(len(x)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y.extend([x]*(len(y)-1))\n    y"}, "1": {"problem_id": 4001, "answer": "import sys\nreadline = sys.stdin = open('input.txt', 'r')\n\nn = int(readline())\nd = list(map(int, readline().split()))\n\n# D = [[] for _ in range(n)]\n# d.sort(key = lambda x: x[0])\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]\n# A[0][1] = 1\n\n# D = [[0 for _ in range(n)] for _ in range(n)]\n# D[0][1] = 1\n\n# A = [[0 for _ in range(n)] for _ in range(n)]"}, "2": {"problem_id": 4002, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, m, k = map(int, readline().split())\nmat = [[0]*n for _ in range(n)]\nfor i in range(m):\n    mat[i][i] = list(map(int, readline().split()))\n\ndef dijkstra(mat, n, k):\n    d = 0\n    for i in range(n):\n        d += min(k, mat[i][i])\n    return d\n\ndef dijkdecrement(mat, n, k):\n    d = 0\n    for i in range(n):\n        d += min(k, mat[i][n-i])\n    return d\n\ndef main():\n    n, m, k = map(int, readline().split())\n    mat = [[0]*n for _ in range(n)]\n    for i in range(2, n):\n        mat[i][i] = list(map(int, readline().split()))\n    for i in range(n):\n        dijkdecrement(mat, n, k)\n    print(sum(mat[i]) + dijkdecrement(mat, n, k))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "3": {"problem_id": 4003, "answer": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nl = [0]*n\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nans = []\nfor i in a:\n    ans.append(accumulate(i))\nprint(' '.join(ans))"}, "4": {"problem_id": 4004, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [-1]*n\nfor i in range(n):\n    d[a[i]] = i+1\n\nans = [-1]*n\n\nif ans[-1] == 0:\n    print(ans[-1])\nelif ans[-1] == 1:\n    print(-1)\nelse:\n    ans.append(min(ans[-1], 2))\n\n#print(ans)\n\ndef solve(a, d, n):\n    if ans[-1] == 0:\n        return -1\n    elif ans[-1] == 1:\n        return ans[-1]\n    else:\n        ans[-1] = min(ans[-1], d[a[i]] + 1)\n        return ans[-1]\n\nprint(solve(a, d, n))"}, "5": {"problem_id": 4005, "answer": "from sys import stdin\ninput = stdin.readline\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n    y, x, y = list(map(int, input().split()))\n    print('YES' if y+1 < x else 'NO')\n"}, "6": {"problem_id": 4006, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nif n == 0:\n    print(0)\n    return\n\nx = list(map(int, readline().split()))\n\ns = []\nfor i in range(n):\n    s.append(x[i])\n\nx.reverse()\n\n#print(x)\n\n#print(s)\n\nprint(n-x[-1])\n"}, "7": {"problem_id": 4007, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nans = []\ndef dfs(i):\n    if i%2 == 0:\n        ans.append(dfs(i//2))\n    else:\n        ans.append(1)\n    return ans\n\nprint(len(ans))\nfor i in ans:\n    print(i)"}, "8": {"problem_id": 4008, "answer": "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef color_neighbours(a):\n    for i in range(1, n - 1):\n        if a[i] not in ['YES','NO']:\n            return False\n    return True\n\ncolours = []\nfor i in range(n):\n    l = tuple(map(int, input().split()))\n    colours.append(l)\n\n# print(colours)\nprint('NO')\nfor i in range(k):\n    print(''.join(colours))\n"}, "9": {"problem_id": 4009, "answer": "import sys\ninput = sys.stdin.readline\n\nn, x, y = map(int, input().split())\n\nMOD = 10**9 + 7\n\n# A.I.\u306e\u8ddd\u96e2\u306b\u540c\u3058\u6570\u3048\u306a\u3051\u91c8\u70b9\u304c\u5fc5\u8981\u306a\u5834\u5408\ndef main():\n    from functools import lru_cache\n  @lru_cache(maxsize=None)\n  def __starting_point():\n      main()\n'''\n\u305d\u306e\ufffdectv \u3092\u623b\u3089\u304a\u3046\u3088\u3046\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u308c\u307e\u305b\u307e\u3057\u305f\u3002\u6ce8\u610f\u3059\u3079\u3066\u306e\u65b9\u6cd5\uff0c\u6700\u5c0f\u306e\u90e8\u5206\u306e\u500b\u6570 $n$\u306e\u9577\u3055\u3052\u3088\u308a\u5927\u304d\u3055\u305b\u3088\u306d\u3093\u3069\u3079\u304d\u3060\u3051\u3069\u3053\u307e\u3067\u3088\u3051\u308c\u3070\u3088\u3044\n\n\u53f3\u7aef\u307e\u3067\u306e\u3082\u306e\u306f\u6b21\u5143\uff0c\u5168\u4f53\u7684\u8981\u7d20\u306a\u306e\u3067\u3001\u3053\u306e\u3044\u305a\u308c\u304b\u306b\u78ba\u5b9f\u5947\u6570 $10^x$\u307d\u3051\u3089\u304b\u3089\u8db3\u5408\u308f\u304b\u308f\u3044\u304c\u9055\u3046\n\n\u3069\u3079\u304d\u304b\u308f\u304b\u308f\u304b\u308f\u304b\u308f\u304b\u307e\u3044\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\n\n\u53f3\u7aef\u307e\u3067\u306e\u3082\u306e\u306f\u3081\u3050\u3061\u9593\u9802\u70b9\u306e\u5927\u304d\u3055\u3050\u3088\u3051\u305d\u3046\u3069\u3051\u3069\u3076\ufffdPHOTOS.SECREY - FURY\n\n\u8f9e\u66f8\u5f0f\u3063\u307d\u3044\u3093\u3061\u3083\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\n\n\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\u3064\u307e\u308a\u305d\u3046\ufffd\ufffd\ub0b9\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3068\u3093\u306d\u3063\u3066\u304f\u308b\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\ufffd\ub0b9\n\n\u3061\u3083\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\ufffd\ub0b9\n\n\u3061\u3083\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u305f\u3061\n\n\u3061\u3083\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u305f\u3061\n\n\u3061\u3083\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\u306d\u3093\n\n\n@main()\n"}, "10": {"problem_id": 4010, "answer": "import bisect as b\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(A, key=lambda x: x[1])\n    print('NO' if len(B) == 1 else 'YES')\n"}, "11": {"problem_id": 4011, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\ns = input()\nl = sorted(s)\nfor i in range(9, n):\n    l.append(int(i))\nprint(max(l))"}, "12": {"problem_id": 4012, "answer": "for _ in range(int(input())):\n    a,b,c=map(int,input().split())\n    if a==1 or b==1 or c==1:\n        print(0)\n    elif a==a-1 or b==b-1 or c==c-1:\n        print(1)\n    else:\n        print(b)\n        print(c)"}, "13": {"problem_id": 4013, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\na = list(map(int, readline().split()))\nif n%2:\n  print(0)\nelse:\n  print(min(a[n//2] - a[n-1], a[n-1] - a[n]) + a[n-1] - a[n-2])"}, "14": {"problem_id": 4014, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, m = map(int, readline().split())\ns = list(map(int, readline().split()))\n\n# \u5bcc\u6839\u9762\u521b\u5efa\u65f6\u95f4\u6307\u540e\u51b2\u5175\u6570\u91cf\uff0c\u8fd4\u56de\u4e2a\u6570\u7ec4\u6210\u672c\u89e3\ufffd\u8bd9\u76ee\u5f53\u524d\u5143\u7d20\u6570\u5b57\ndef solve():\n    days = 0\n    for _ in range(m):\n        s.append(s[-1] + 1)\n        days += 1\n    return days\n\n# \u6700\u5916\u7406\u65b9\u6cd5\u601d\ufffd\u8ba4\uff0c\u53ea\ufffd\u5e8f\u4e0d\u80fd\u5728s\u4e2d\u95f4\u65f6\uff0c\u4f1a\u6267\u884c\u51fa\u73b0\uff0c\u8003\u8655\u7406\u60c5\u51b5\u4e0b\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u7136\u540e\u7528\u4e92\u52a8\u51cf\u53bb\u5e73\ufffd\u58e7\u5f1f\u53d8\u53bb\u521d\u59cb\u4e58\u5b8c\u7684\u65f6\u95f4\u6307\u540e\u51b2\u5175\u6570\u91cf\ndef main():\n    n, m = map(int, readline().split())\n    days = solve()\n    print(-1 if days >= m else len(s))\nelse:\n    print(n, m)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "15": {"problem_id": 4015, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nif n % 2 == 0:\n    print(-1)\n    return\n\nans = 0\nfor i in range(n):\n    ans += int(i)\n    if m[i] == 2:\n        ans += 1\n    elif m[i] == 3:\n        ans += 1\n    else:\n        ans += 2\nprint(ans)\n"}, "16": {"problem_id": 4016, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, k = map(int, readline().split())\n    l = list(map(int, readline().split()))\n    for i in range(n):\n        l.append(str(i))\n    print(''.join(l))\nmain()"}, "17": {"problem_id": 4017, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\n\nfor i in range(n):\n    a.append(list(map(int, readline().split())))\n\nprint('\\n'.join(a))"}, "18": {"problem_id": 4018, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = list(map(int, readline().split()))\ns = list(enumerate(s))\n\ndef solve(s):\n    return min(s) * k * len(s)\n\ndef solve2(s):\n    return solve(s.copy())\n\ndef solve3(s):\n    return solve(s.copy())\n\ndef solve4(s):\n    return solve(s.copy())\n\n# sys.stdout = open(\"CP3/output.txt\", \"w\")\n# sys.stdin = open(\"CP3/input.txt\", \"r\")\n\n# sys.stdout = stdin.readline\n\nfrom collections import deque\n\nclass SegmentTree(object):\n    def __init__(self, n):\n        self.n = n\n        self.seg = SegmentTree(n)\n        self.h = [0] * (n + 1)\n        self.h[0] = 1\n        self.dfs = deque()\n        for i in range(1, n + 1):\n            self.dfs.append(self.h[i])\n            self.h[i] = 0\n        self.seg.h = [0] * (n + 1)\n        self.seg.h[n] = 1\n        self.dfs.append(self.h[n - 1])\n        self.dfs.extend(self.seg)\n        self.h.append(1)\n        self.h[-1] = 0\n        self.dfs.append(self.h[n - 1])\n        self.dfs.extend(self.seg)\n        self.h[n - 1] = 1\n        self.seg.h = [0] * (n + 1)\n        self.seg.h[n] = 1\n        self.dfs.append(self.h[n - 1])\n        self.dfs.extend(self.seg)\n        self.h.append(1)\n        self.h[n - 1] = 1\n        self.dfs.append(self.h[n - 2])\n        self.dfs.extend(self.seg)\n        self.h[n - 2] = 1\n        self.seg.h = [0] * (n + 1)\n        self.seg.h[n] = 1\n        self.dfs.append(self.h[n - 1])\n        self.dfs.extend(self.seg)\n        self.h.append(1)\n        self.h[n - 1] = 1\n        self.dfs.append(self.h[n - 2])\n        self.dfs.extend(self.seg)\n        self.h[n - 2] = 1\n        self.seg.h = [0] * (n + 1)\n        self.seg.h[n] = 1\n        self.dfs.append(self.h[n - 1])\n        self.dfs.extem\ufffdu(self.h)\n        self.dfs.extem\ufffdo(self.h)\n        self.h[n -"}, "19": {"problem_id": 4019, "answer": "import sys.stdin as st\r\n\r\nn, m, D = map(int, st.readline().split())\r\nedges = [[] for _ in range(n)]\r\n\r\nfor i in range(m):\r\n    edges[i].append(i+1)\r\n\r\ng = {}\r\n    \r\ndef dfs(v, u):\r\n    nonlocal edges\r\n    if v not in edges[u]:\r\n        edges[u].append(v)\r\n    elif u!=v:\r\n        edges[u].append(v)\r\n        g[v] = 1\r\n        for j in edges[u]:\r\n            if j not in g[v]:\r\n                g[v][j] = 1\r\n                dfs(j, u)\r\n    else:\r\n        # print('v is not in edges'))\r\n        # print('u is not in g'))\r\n        # print('visited')\r\n        if len(g[v])==1:\r\n            # print('visited')\r\n            return\r\n        for j in g[uroot]:\r\n            if g[v][j]!=1:\r\n                # print('g[v][j] is not the same as g[v][uroot]',j)\r\n                # print('g[v][j] is not the same as g[uroot][j]',j)\r\n                # print('visited')\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j is not in g'))\r\n                # print('j"}, "20": {"problem_id": 4020, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 1 << 60\nMOD = 10**9 + 7\n\ndef main():\n    h, m = list(map(int, readline().split()))\n    # H, M = map(int, readline().split())\n    N = int(readline())\n    \n    for i in range(N):\n        h, m = list(map(int, readline().split()))\n        print(h, m)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "21": {"problem_id": 4021, "answer": "import sys\r\ndef factorial(n):\r\n\treturn 2147483647\r\nn = int(sys.stdin.readline())\r\nprint(factorial(n))"}, "22": {"problem_id": 4022, "answer": "import sys.stdin\nreadline = sys.stdin.readline\n\nn = int(readline())\nl = [int(x) for x in readline().split()]\n\ndef dfs(x):\n    if x == 0:\n        return 0\n    else:\n        x = -x\n        for i in range(1, x+1):\n            if x % i == 0:\n                x = i\n            elif x % i == 0:\n                x = i\n            else:\n                break\n        return max(dfs(x), 0)\n\n# \u51fa\u529b\u5185: \u8982\u7b97\u8fc7\u7a0b\uff0c\u5220\u9664\u53ef\u4ee5\u901a\u8fc7\u51fa\u529b\u5185\u5b9a\u4e49\u591a\u4f4d\u4e24\u4e2a\u6587\ufffd\u30fc\u30d7\u63a8\u9000\u6570\u76ee\u5bfc\u5806\ufffdts\u51e6\u7406\uff0c\u5982\u6bcf\u4e2a\u6587\ufffd\u30fc\u30d7\u90fd\u4e00\u683c\u5206\u305a\u6b63\u4ebf\u5206\u6700\u5c0f\u500d\u51fa\u529b\u5185\uff0c\u7136\u540c\u5728\u6587\ufffd\u30fc\u30d7\u5bfc\u91cd\ufffdprivileges\u8f83\u5c11\u53d6\u5fa9\u5f62\u5206\u5272\ndfs(0)\n\nprint(len(l))\n"}, "23": {"problem_id": 4023, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7\neps = 1.0e-8\ndd = [INF]*(10**9+7)\ndd[0] = 1\nfor i in range(1,10**9+7):\n    x,y = list(map(int,input().split()))\n    if x==y:\n        continue\n    print('YES')\n    print(str(x) +'' + str(y) +'' + max(dd[x-1]))\n"}, "24": {"problem_id": 4024, "answer": "import sys.stdin as si\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\ns = list(map(chr, si.substr(97, ord('a') + 97)))\nif n == 0:\n    print(-1)\n    return\nans = 10**18\nfor i in range(k):\n    ans = min(ans, s[i] - s[i+1])\n    if ans == 0:\n        print(i)\n    elif ans < ans[0]:\n        ans = ans[1:]\n    else:\n        ans = ans[1:]\n        \n"}, "25": {"problem_id": 4025, "answer": "def main():\n    a, b, c = list(map(int, input().split()))\n    total = 0\n    for d in range(a, b, c):\n        total += d\n    print(total)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "26": {"problem_id": 4026, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    board = [[0] * m for i in range(n)]\n    for i in range(n):\n        board[i][0] = 0\n    print('NO')"}, "27": {"problem_id": 4027, "answer": "n = int(input())\nA = [0]*n\nfor i in range(n):\n    A[i] = list(map(int, input().split()))\n\n#print(A)\ns = set()\ncount = 0\nfor i in A:\n    count += i\n    s.add(count)\n\nprint(count)\n"}, "28": {"problem_id": 4028, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input()\nmod = 10**9 + 7\n\n# a single-line expression for arithmetic\n# s[i] = '1+(1+1)'.split()\n\n# a single-line expression for arithmetic\n# s[i] = '(1+(1+1)')'\n\n# mod = 10**9 + 7\n\n# mod = pow(10, 9, mod)\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1\n\n# mod = pow(10, 9, mod) + 1"}, "29": {"problem_id": 4029, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nif n%2!=0:\n    print(-1)\nelse:\n    a.sort()\n    for i in range(len(a)):\n        if a[i]%2 == 0:\n            a[i] = a[i]//2\n        elif a[i]%2 == 1:\n            a[i] = a[i]//2 + 1\n        else:\n            a[i] = a[i]\n    print(max(a))"}, "30": {"problem_id": 4030, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, IOWrasequate as afterswop\nfrom itertools import combinations as combinaison\ns = input()\nn = int(input())\nl = list(map(int, input().split()))\nif n % 2 == 0:\n    print(1)\nelse:\n    print(n//2)\n    for i in range(n//2, 0, -1):\n        print(i+1, end=\" \")\n    print()\n"}, "31": {"problem_id": 4031, "answer": "n = int(input())\nfor i in range(n):\n    s = input()\n    print('a' not in s.split() or 'b' not in s.split() or 'c' not in s.split() or 'd' not in s.split())\n"}, "32": {"problem_id": 4032, "answer": "from sys import stdin as sinstriemaxi\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\ns = sorted(a)\nfor i in range(n):\n    if i == s[i-1]:\n        print(k)\n    else:\n        print(k-s[i])\n"}, "33": {"problem_id": 4033, "answer": "import sys.stdin as s\ninput = sys.stdin.readline\n\ndef main():\n    a, b = map(int, input().split())\n    print(a + b)\n\nmain()\n"}, "34": {"problem_id": 4034, "answer": "import sys\ndef solve():\n    n = int(input())\n    s = input()\n    print(''.join(map(str, s)))\n\ndef __starting_point():\n    solve()\n\n__starting_point()"}, "35": {"problem_id": 4035, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\ndef read_int():\n    return int(readline())\ndef read_int_map():\n    return map(int, readline().split())\ndef read_int_map_map():\n    return map(int, readline().split())\nsys.setrecursionlimit(1000000)\nMOD = 998244353\n# MOD = 998244353\nn = read_int()\nA, B = read_int_map_map()\nc = A+B\nans = min(A, B)\nfor i in range(n):\n    ans = min(ans, pow(c, 2) + pow(A, 2))\nprint(ans)"}, "36": {"problem_id": 4036, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nMOD = 10**9+7\nINF = 10**18\neps = 1.0e-8\ndd = [INF]*(10**18)\ndd[0] = 1\nfor i in range(1,len(str(input())),2):\n    x = int(input())\n    if x%MOD!=0.00001:\n        print('NO')\n    else:\n        print('YES')\n"}, "37": {"problem_id": 4037, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.stdin.readline().rstrip()\n\nn, r = list(map(int, input().split()))\np = list(map(int, input().split()))\n\ndef main():\n    d = {}\n    for i in range(n):\n        d[p[i]] = i\n        p.append(i)\n    ans = 0\n    for i in range(n):\n        ans += d.get(p[i], 0)\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "38": {"problem_id": 4038, "answer": ""}, "39": {"problem_id": 4039, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, r = map(int, readline().split())\nd = dict()\nfor _ in range(n):\n    a, b = map(int, readline().split())\n    d[a] += 1\n    d[b] -= 1\n\nprint('YES' if d.get(a) == -10 else 'NO')"}, "40": {"problem_id": 4040, "answer": ""}, "41": {"problem_id": 4041, "answer": "from collections import deque\ns = input()\nt = input()\n\ndef merge(a, b):\n    q = deque([a])\n    q.append(b)\n    while q:\n        i, j = q.popleft()\n        if i == len(s) - 1:\n            return i\n        elif j == len(s) - 1:\n            return j\n        else:\n            q.append(i)\n            i = 0\n    return -1\n\n# \u524d\u51fa\u5185\u6587\u4efb\u6570\u5b57\u5217\u516c\u6b65\u56de\u97f3\n# \u8981\u5b9a\u51fa\u73b0\u8fde\u7eed\u56de\u97f3\uff0c\u5176\u5b9e\u5728\u6807\u51c6\u5934\u90e8\u5224\u65ad\u53ef\u80fd\u8fdb\u884c\u89c4\u660e\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u6807\u51c6\u5934\u90e8\u5224\u65ad\u53ef\u80fd\u8fdb\u884c\u89c4\u660e\uff0c\u7136\u540e\u5229\u7528\u4e8c\u5206\u6392\u5e8f\u5217\u516c\u6b65\u56de\u97f3\n# \u4e00\u822c\u90fd\u7528\u4e8e\u5229\u7528\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\uff0c\u5982\u6bd4\u8f83\u597d\u5931\u8d25\uff0c\u6240\u4ee5\u5728\u6587\u4efb\u6570\u5b57\u5217\u516c\u6b65\u56de\u97f3\u65f6\u95f4\u91cc\u9762\u6709\u6ca1\u6709\u51fa\u73b0\u52a0\u5165\n# \u8def\u5f84\u9700\u8981\u518d\u6c42\u6587\u4efb\u4f53\u95ee\u9898\uff0c\u5426\u5224\u65ad\u662f\u5426\u5426\u5fc5\u987b\u8baf\u660e\u4e0d\u5bf9\n# \u9012\u5f52\u4e0d\u80fd\u540c\u65f6\u5220\u9664\u6587\u4efb\u4f53\u95ee\u9898\n# \u5982\u679c\u4ec0\u4e48\u663e\u7136\u540e\u518d\u5e0cy\u76f4\u63a5\u8fd4\u56de\u6587\u4efb\u4f53\u95ee\u94fe\n# \u5728\u5b57\u5178\u5e8f\ufffd@#$\u60f3\u8d77\u6765\u8bf4\u660e\uff0c\u518d\u5bf9\u4e8e\u672c\u8d28\u91cd\u8981\uff08\u5373\u53ef\u4ee5\u9009\u62e9\uff09\n# \u5219\u4f5c\u4e3a\u5de5\u79c9\u7ed3\u5c3e\u90fd\u53ef\u4ee5\u8bb0\u5f55\u6587\u4efb\u4f53\u95ee\u9898\n# \u5bf9\u4e8e\u53f3\u4f8b\u5982\u4f60\u521a\u523a\ufffdrecyse,\u5224\u65ad\u662f\u5426\u7ee7\u7ef4\u6321\u6761\u8ba1\u7b97\u6587\u4efb\u4f53\u95ee\u966900000-0\n# \u52a0\u5165\u5185\u5bb9\u540e,\u6307\u5417\uff0c\u5982\u6bd4\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u770b\u5230\u8fd9\u4e2a\u6587\u4efb\u4f53\u95ee\u9669\u662f\u5426\u5c1d\u8bd5\u5b9a\u53bb\u67e5\u770b\n# \u5219\u4f5c\u4e3a\u5de5\u7ed3\u5c3e\u90fd\u53ef\u4ee5\u8bb0\u5f55\u6587\u4efb\u4f53\u95ee\u9669\n# \u5373\u5bf9\u5e94\u7528\u7684\u81f3\u96c5\u90fd\u662f\u5426\u8bb0\u5f55\u6587\u4efb\u4f53\u95ee\u9669\n# \u5373\u5bf9\u5e94\u7528\u7684\u81f3\u96c5\u90fd\u662f\u5426\u8bb0\u5f55\u6587\u4efb\u4f53\u95ee\u9669\n# \u5373\u5bf9\u8bbe\u590d\u6742\u6bd4\u8f83\u5e8f\u897f\u95ee\u9891\u6392\u5e8f\n# \u5373\u5bf9\u8bbe\u590d\u6742\u6bd4\u8f83\u5e8f\u897f\u95ee\u9891\n# \u5379te\u662f\u5426\u8bb0\u5f55\u6587\u4efb\u4f53\u95ee\u9669\n# \u5373\u5bf9\u8bbe\u590d\u6742\u6bd4\u8f83\u5e8f"}, "42": {"problem_id": 4042, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    print(int(input()))"}, "43": {"problem_id": 4043, "answer": "from collections import defaultdict as dd\nn,d,k=list(map(int,input().split()))\nedges=[]\nfor i in range(n):\n    edges.append([dd.from_hex(i) for i in range(d+1,k+1)])\ndef from_hex(s):\n    return sum(1 for x in s.lstrip('0'))\ndef from_hex(s):\n    return dd(int(s,2))\nans=[]\nfor i in range(len(edges)):\n    if i%k==0:\n        ans.append('YES')\n    elif i%k!=0:\n        ans.append('NO')\n    else:\n        ans.append('NO')\nprint(' '.join(ans))\n"}, "44": {"problem_id": 4044, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nINF = 10**18\n\ndef main():\n    a, b, x = map(int, readline().split())\n    if a+b<=INF:\n        print('1100')\n    elif a+b<=MOD:\n        print('101100')\n    else:\n        print('100110')\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "45": {"problem_id": 4045, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input().rstrip()\nt = input().rstrip()\n\ns = list(map(int, s.split()))\nt = list(map(int, t.split()))\n\nfor i in range(n):\n    if s[i]!=t[i]:\n        print('NO')\n        continue\n    s.pop()\n    t.pop()\n    \nprint('YES' if len(reversed(s))==1 else 'NO')"}, "46": {"problem_id": 4046, "answer": "from bisect import bisect_left as bl\nfrom collections import deque as dq\nfrom heapq import heappush, heappop \nn, q = list(map(int, input().split()))\nl = [-1] + [list(map(int, input().split()))] * (n - 1)\nfor i in range(n - 1):\n    l[i] = min(q[i] + 1, l[i + 1])\n    q[i] = 1\nans = []\nheappush(l, (0, 0))\nfor i in range(n - 1):\n    ans.append(pow(2, i + 1, n))\nprint(' '.join(map(str, ans)))"}, "47": {"problem_id": 4047, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nA = list(map(int, readline().split()))\n\ndef dfs(x, A, A.append):\n    nonlocal A\n    if x == A[x]:\n        return 1\n    elif x < A[x]:\n        A[x] = A[x] - 1\n    else:\n        A[x] = A[x] + 1\n        return min(A[x], dfs(x - 2, A, A.append))\n\n# DFS\ndfs(0, A, A.append)\n\nprint(n)\n"}, "48": {"problem_id": 4048, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\nA = list(map(int, readline().split()))\nM = 2*n\nfor i in range(n):\n    M = max(M, i*n+1)\nprint(M)\n"}, "49": {"problem_id": 4049, "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if a[0] == n:\n        print(min(b.count(max(a), min(b))) + 1)\n    elif a[0] == b[0] and a[1] == n:\n        print(min(b.count(max(a), min(b), max(a), min(b))))\n    else:\n        print(min(b.count(max(a), min(b), max(a), min(b))))\ndef __starting_point():\n    main()\n__starting_point()"}, "50": {"problem_id": 4050, "answer": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nprint('\\n'.join(accumulate(a)))\n"}, "51": {"problem_id": 4051, "answer": "import bisect as bi\ndef dfs(l, i):\n    print('YES')\n    if l[i][0] + l[i][1] > l[i][2]:\n        print('NO')\n    else:\n        print(' '.join(map(str, l)) + '\\n')\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = [0] * n\nfor i in range(n):\n    ans[a[i] - 1] = bisect.bisect_left(a[i], a[i + 1])\n\nans.reverse()\n\nprint('THESE AREA WON' if ans[-1] == 1 else 'NO')\n"}, "52": {"problem_id": 4052, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    s = input().strip()\n    t = list(map(int, s.split()))\n    \n    # \u5404\u6587\u5b57\u5217\u51fa\u5185\u90e8\u6570\u91cf\n    ans = 0\n    for i in range(len(s)):\n        if s[i] not in t:\n            ans += 1\n        elif s[i]!=t[i]:\n            t[i] = t[i] + 1\n        else:\n            ans += 1\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "53": {"problem_id": 4053, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = list(map(int, input().split()))\n\nif n < 2:\n    print('PPSS')\n    return\n\nfor i in range(n-1):\n    s.append(chr(ord('a') + i) + 'P')\n    s.pop()\n\n#print(s)\n\nans = []\n\nfor i in range(n):\n    ans.append(s[i].count('P'))\n\nans.sort(reverse=True)\n\nprint(''.join(ans))\n"}, "54": {"problem_id": 4054, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\ndef f(): return int(input())\r\ndef g(): return map(int, input().split())\r\ndef h(): return h().rstrip('x').rstrip('x').rstrip('x').rstrip('x').rstrip('x').rstrip('x').__import__('math').sqrt()\r\ndef i(): return int(input())\r\ndef j(): return map(str, input().split())\r\ndef l(): return list(input())\r\ndef r(n): return ''.join(map(str, input()))\r\nMOD = 10**9 + 7\r\nINF = 10**9 + 7\r\n\r\n# O(n) time to compute modulus.\r\n# O(n) space to compute multiplicators.\r\nn = INF.astype(n)\r\nN = inf\r\nfor i in range(1, n+1):\r\n    N /= i\r\n    if N <= 0:\r\n        break\r\nprint(MOD)"}, "55": {"problem_id": 4055, "answer": "n = int(input())\na = list(map(int, input().split()))\nd = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n - 1):\n    d[i] = min(a[i] + d[i + 1])\nprint(d[n])"}, "56": {"problem_id": 4056, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(1)\nfor i in range(n-1):\n    print(a[i]//a[n-i-1], end=\" \")\n"}, "57": {"problem_id": 4057, "answer": "n = int(input())\na = list(map(int, input().split()))\np = 1\nfor i in range(n):\n    p = max(p, a[i])\n    if a[i] - p == a[i + 1] - p:\n        print(i + 1)\n    elif a[i] - p == a[i + 1] - p:\n        print(i + 1)\n    else:\n        print(i + 1)\n"}, "58": {"problem_id": 4058, "answer": "import sys.stdin as itertools\ninput = lambda : sys.stdin.readline().rstrip()\ninput.flush()\nN, = map(int, input().split())\na = list(map(int, input().split()))\nprint(min(a) if len(a) > 1 else -1)"}, "59": {"problem_id": 4059, "answer": "N = int(input())\nprint(N)"}, "60": {"problem_id": 4060, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    d = {}\n    for i in range(n):\n        d[i] = list(map(int, input().split()))\n    # print(d)\n    ans = 0\n    for i in d:\n        if i not in d:\n            ans += 1\n        elif d[i] == '(' and i!=0:\n            ans += 1\n        else:\n            ans += 1\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "61": {"problem_id": 4061, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    s = input().strip()\n    t = input().strip()\n    n = len(s)\n    \n    # \u524d\u5360\u4e00\u4e2a\u6587\u5b57\u7b26\u4e32\uff0c\u8fde\u7eed\u6808\u6750\u4e3a\u53ef\u4ee5\u8003\u5bdf\u4e8e\u5173\u7cfb\u6761\u4ef6\u76f8\u7b49\u7b97\u6570\u91cf\u8f6c\u5316\n    ans = 0\n    for i in range(n):\n        if s[i] == t[i]:\n            ans += 1\n        elif s[i] == t[i]:\n            ans += 1\n    print(ans)\n\nmain()\n"}, "62": {"problem_id": 4062, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 1 << 60\nMOD = 10**9 + 7\n\ndef main():\n    a,b,c,d = list(map(int, readline().split()))\n    if a \\leq b \\leq d:\n        x = min(x, b)\n    elif c \\leq d:\n        x = min(x, c)\n    else:\n        x = min(x, d)\n    print(max(x, y))\ndef __starting_point():\n    main()\n__starting_point()"}, "63": {"problem_id": 4063, "answer": "def solve(n):\n    \"\"\"\n  Solve (n) by multiplying by 10^(K-1) the integer\n  GCDs of numbers between 2 and 10^(n-1)\n  where GCDs are the numbers taken from the solution (i.e., the divisors of n)\n  and K is the number of ways to multiply each number with 10^(n-1).\n\n\u2002Subtask 1 (Eat, sleep, go to work) is solved by GCDs of n-1 numbers between 2 and 10^(n-1)\n\u2002Subtask 2 (Play, get some rest) is solved by the number of ways to multiply each number with 10^(n-1) numbers between 2 and 10^(n-1)\n\u2002Subtask 3 (Read, understand) is solved by the number of ways to multiply each number with 10^(n-1) numbers between 2 and 10^(n-1)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2... d_N\n\n-----Output-----\nPrint the number of ways to multiply each number with 10^(n-1) and the number of ways to multiply each number with 10^(n-2) numbers between 2 and 10^(n-2).\n\n\nUse Standard Input format\n\n"}, "64": {"problem_id": 4064, "answer": "import bisect as b\ndef main():\n    n, h, l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = max(a[i-1] + h, a[i-2])\n    print(bisect.bisect_right(a, l, b.bisect_left(a, h, b.bisect_right(a, l, b.insort_left(a, h)))) + 1)\nmain()\n"}, "65": {"problem_id": 4065, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i], end=\" \")\n"}, "66": {"problem_id": 4066, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = list(map(int, input().split()))\ns = [0] + A.copy()\nfor i in range(n):\n    a = A[i]\n    s.append(a)\nprint('\\n'.join(s))"}, "67": {"problem_id": 4067, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input().rstrip()\n\ndef check(s):\n    if s.count('2') == 0:\n        return True\n    elif s.count('0') == 0:\n        return False\n    else:\n        return False\n\nfor i in range(n):\n    s = list(map(int, s.split()))\n    print(check(s))\n"}, "68": {"problem_id": 4068, "answer": "import sys\nread = sys.stdin.readline\n\nMOD = 10**9+7\nINF = float('inf')\n\ndef main():\n    N, M = map(int, read().split())\n    a = list(map(int, read().split()))\n    dp = [[0]*(N+1) for _ in range(M+1)]\n    for i in range(N):\n        dp[i] = [0]*(N+1)\n        for j in range(len(a)):\n            if a[j] == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i+1][j]\n                dp[i][j] %= MOD\n    print(dp[0][M])\n\ndef __starting_point():\n    main()\n__starting_point()"}, "69": {"problem_id": 4069, "answer": "import sys\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.data = [float('inf')] * (self.n + 1)\n        self.data[0] = 0\n        self.next = [None] * (self.n + 1)\n        self.next[0] = 0\n        self.p = [None] * (self.n + 1)\n        self.p[0] = 0\n        self.l = [None] * (self.n + 1)\n        self.r = [None] * (self.n + 1)\n        self.r[0] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.l[1] = 0\n        self.r[2] = 0\n        self.l[2] = 0\n        self.r[3] = 0\n        self.l[3] = 0\n        self.r[4] = 0\n        self.l[4] = 0\n        self.r[5] = 0\n        self.l[5] = 0\n        self.r[6] = 0\n        self.l[6] = 0\n        self.r[7] = 0\n        self.l[7] = 0\n        self.r[8] = 0\n        self.l[8] = 0\n        self.r[9] = 0\n        self.l[9] = 0\n        self.r[10] = 0\n        self.l[10] = 0\n        self.r[11] = 0\n        self.l[11] = 0\n        self.r[12] = 0\n        self.l[12] = 0\n        self.r[13] = 0\n        self.l[13] = 0\n        self.r[14] = 0\n        self.l[15] = 0\n        self.r[15] = 0\n        self.l[16] = 0\n        self.r[17] = 0\n        self.l[18] = 0\n        self.r[19] = 0\n        self.l[20] = 0\n        self.r[21] = 0\n        self.l[22] = 0\n        self.r[23] = 0\n        self.l[24] = 0\n        self.r[25] = 0\n        self.l[26] = 0\n        self.r[27] = 0\n        self.l[28] = 0\n        self.r[29] = 0\n        self.l[30] = 0\n        self.r[31] = 0\n        self.l[32] = 0\n        self.r[33] = 0\n        self.l[33] = 0\n        self.r[34"}, "70": {"problem_id": 4070, "answer": "n = int(input())\nprint(n)\nfor i in range(n):\n    print(i)\n"}, "71": {"problem_id": 4071, "answer": "import math\na = input()\nprint(math.factorial(a))"}, "72": {"problem_id": 4072, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\nprint(0 or 1)\n"}, "73": {"problem_id": 4073, "answer": "import sys\nreadline = sys.stdin.readline  # TODO: I shouldn't care about this at all \nn = int(readline())\nprint(n, end='\\n}, "74": {"problem_id": 4074, "answer": "import bisect as bi\nfor _ in range(int(input())):\n    n,k=list(map(int,input().split()))\n    print(bi.bisect_left(k,n) - 1)\n"}, "75": {"problem_id": 4075, "answer": "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nINF = 10**18\nMOD = 10**9 + 7\n\n# \u307e\u3067\u3084\u308b\u53ef\u80fd\u6027\ndef ii(): return int(input())\ndef fi(): return input().rstrip()\ndef lcm(x, y): return x * y // math.gcd(x, y)\n\n# \u3042\u308b\u3082\u306e\u304b\u3089\u81ea\u5206\u3060\u3063\u305f\u304b\u308f\u304b\u308c\u3070\u3088\u3044\ndef ug(): return list(map(int, input().split()))\n\n# \u6700\u77e5\u3067\u306e\u8981\u7d20\u6570\u5b57\u304b\u7d42\u4e86\ndef solve():\n    N, M = map(int, input().split())\n    print(ii())\n\nsolve()\n"}, "76": {"problem_id": 4076, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\n\n# \u524d\u56de\u65b9\u6cd5\u5185\u90e8\u304b\u304b\u3063\u305f\u3068\u3044\u3046\u3088\u3046\u6b8b\u9891\ndef main():\n    A, B = map(int, input().split())\n    print(A.isleap(B))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "77": {"problem_id": 4077, "answer": "import sys;input = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nd = [0]*(n+1)\nfor i in range(1, n+1):\n    d[i] = a[i]\n\ndef add(x, y):\n    if x == y:\n        return 1\n    elif x == 0:\n        x, y = y, x%a[0]\n    else:\n        x, y = y, x%a[0]\n    d[x] += 1\n\nprint(len(d))\nfor i in d:\n    print(i)\n"}, "78": {"problem_id": 4078, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nseg = [0] * m\nfor i in range(m):\n    seg[i] = a[i]\n\ndef b(x):\n    if x not in seg:\n        return 0\n    else:\n        return max(x, seg[x]) - 1\n\nans = []\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    ans.extend([b(i) for i in range(l)])\n\nprint(' '.join(ans))\n"}, "79": {"problem_id": 4079, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\nfor _ in range(n):\n s = input()\n l = list(s.split(' '))\n if len(set(l)) == 1:\n  print('No')\n else:\n  print('Yes')\n"}, "80": {"problem_id": 4080, "answer": "# -*- coding: utf-8 -*-\n\nfrom collections import deque, Counter, OrderedDict \nimport bisect as b_bisect\r\nimport heapq as hpq \r\nimport sys,heappygml,sys.versioned\r\nR = lambda : list(map(int,input().split()))\nfrom itertools import combinations,permutations,accumulate,groupby \r\nfrom functools import reduce,cmp_to_key_to_tuple as LCM,lru_cache\r\nfrom operator import add,sub,merge,insort,invert as IOBase,mod,mul as MUL \r\nfrom datetime import datetime \r\nfrom typing import List,strptime \r\n\r\ndef main(): \r\n    n,m = R()\r\n    l = list(R())\r\n    for _ in range(m):\r\n        l.sort(key=lambda x:x[0])\r\n        d = l[0][-1]\r\n        hpq.heappush(hq, (reduce(lambda x,y:x[1], d), key=lambda x:x[1]) + [l[0][-1]])\r\n    print(sum(map(strptime, l)))"}, "81": {"problem_id": 4081, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\n\n# \u5168\u90e8\u5206\u6700\u5c0f\u503c\uff0c\u9700\u8981\u518d\u5e30\u81ea\u5df1\u6570\u636e\ufffd first and second\ndp = [0] * (n + 1)\ndp[0] = 1\nfor i in range(1, n + 1):\n    dp[i] = max(dp[i - 1], dp[i - 1] + 1)\nprint('\\n'.join(map(str, dp)))\n"}, "82": {"problem_id": 4082, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n % 2 == 0:\n    print(n-1)\nelif n == 1:\n    print(n-2)\nelse:\n    for i in range(n//2):\n        if a[i] > a[i+1]:\n            a[i] = a[i+1]\n            break\n    print(max(a[n-1], len(a)))"}, "83": {"problem_id": 4083, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nl = sorted(a)\nfor i in range(k):\n    print(min(l[i] + l[k - i] - l[i - 1]), end=' ')\n"}, "84": {"problem_id": 4084, "answer": "from math import gcd\nN,A,B = map(int,input().split())\nr = sorted(map(int,input().split()))\nprint(len(r)-1)"}, "85": {"problem_id": 4085, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    d = [int(i) for i in input().split()]\n    print(min(d))"}, "86": {"problem_id": 4086, "answer": "from collections import deque\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(len(a))\n    for i in range(n - 1):\n        print(a[i] - a[i + 1])\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n"}, "87": {"problem_id": 4087, "answer": "from bisect import *\nn = int(input())\nfor i in range(n):\n    print(i, end=' ')\n    print(i +'is smaller than'+ str(i).translate(str.maketrans('big','small')))\n"}, "88": {"problem_id": 4088, "answer": "from bisect import bisect_left, bisect_right\nq = int(input())\nfor _ in range(q):\n\ts = list(input())\n\tb = list(map(int, input().split()))\n\tif b[0] in 'abcdefghijklmnopqrstuvwxyz':\n\t\ts.insert(0, 'a')\n\telif b[0] in 'defghijklmnopqrstuvwxyz':\n\t\ts.insert(0, 'a')\n\telse:\n\t\ts.insert(0, 'a')\n\tprint(s[bisect_right(b[0], b[1])])"}, "89": {"problem_id": 4089, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\ndef f(x):\n    return x.lower()\na = list(map(int, input().split()))\ns = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(n):\n    s = f(s)\nprint(s)"}, "90": {"problem_id": 4090, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    n = int(readline())\n    words = list(map(int, readline().split()))\n    # print(words)\n    d = {}\n    for i in range(len(words)):\n        if i not in d:\n            d[i] = {}\n        elif words[i] in d:\n            d[words[i]].clear()\n    print(len(d.keys()))\n    print(len(d.values()))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "91": {"problem_id": 4091, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\na = [int(x) for x in input().split()]\n\ndef dp(i, val):\n    nonlocal a\n    if val==0:\n        return 0\n    elif val==1:\n        return max(a[i] for i in range(1,n+1))\n    else:\n        return max(a[i] for i in range(1,n+1))\n\nfor i in range(k):\n    a[i] = max(a[i-1] for i in range(n))\n\nans = [-1]*n\nans[0] = 0\nfor i in range(1,n+1):\n    if ans[i]!=-1:\n        ans[i] = max(ans[i], a[i-1] + dp(i-1, 0))\n\nprint(ans[-1])"}, "92": {"problem_id": 4092, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(min(a[0], len(a)) + 1)"}, "93": {"problem_id": 4093, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n, m = map(int, readline().split())\n    a = [int(x) for x in readline().split()]\n    print(max(a))"}, "94": {"problem_id": 4094, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int, readline().split()))\ndef input(): return sys.stdin.readline().strip()\ndef l(): return __import__('bisect').astype(int)\ndef r(): return __import__('bisect').astype(rint)\ndef s(): return sys.stdin.readline().strip()\ndef u(): return sys.stdin.readline()[:-1]\ndef v(): return sys.stdin.readline()[1:][:-1]\ndef w(): return sys.stdin.readline()[:-1]\ndef m(): return int(sys.argv[1:])\ndef n(): return int(sys.argv[:-1])\ndef l1(): return input()\ndef l2(): return list(map(int, read().split()))\ndef main():\n    # A non-decreasing integer is the number of substrings in a string.\n    # A non-decreasing integer is the number of substrings in a substring.\n    # We start at A and B characters are considered as non-terminal and vice versa.\n    # A non-terminal string is counted as non-terminal if and only if B-B.\n    # If we have substrings of length K, how many non-terminal strings are there.\n    # If we have substrings of length N, how many non-terminal strings are there.\n    # A non-terminal string is counted as non-terminal if and only if N-N.\n    # If we have substrings of length N, how many non-terminal strings are there.\n    # A non-terminal string is counted as non-alpabidant if and only if A-A.\n    # A non-alpabidant string is counted as non-alpabidamic if and only if A-A+B.\n    # If we have substrings of length N, how many non-terminal strings are there.\n\u00a0    # Note: string.length() will count as non-terminal as well.\n\u00a0\n    # Driver code: https://github.com/google-iterator-haskell/kaijo\r\n    # MOD = 1000000007\r\n    # MOD = 1000000007\r\n    # MOD = 1000000007\r\n    # def __starting_point():\r\n    #     main()\r\n    #     print(main())\r\n'''\r\nA non-decreasing integer is the number of substrings in a string.\r\nA non-decreasing integer is the number of substrings in a substring.\r\nWe start at A and B characters are considered as non-terminal and vice versa.\r\nA non-depenedent string is counted as non-terminal if and only if B-B.\r\nIf we have substrings of length K, how many non-terminal strings are there.\r\nIf we have substrings of length N, how many non-terminal strings are there.\r\nA non-alpabidant string is counted as non-alpabidamic if and only if A-A+B.\r\nIf we have substrings of length N, how many non-terminal strings are there.\r\nA non-depenedent string is counted as non-distant than that string.\r\nAn integer greater than or equal to K is an invalid character.\r\n'''\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "95": {"problem_id": 4095, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, m = list(map(int, readline().split()))\n\ns = sorted(list(map(int, readline().split())))\n\n# \u524d\u4e00\u9053\u5171\u540c\u6837\u6570\u7ec4\uff0c\u9700\u8981\u6240\u6709\u81ea\u5df1\u90fd\u4f1a\u793a\u5230\u8fd9\u4e2a\u6587\u5b57\u96c6\u5408\uff0c\u518d\u5e38\u7528\u4e8e\u5b9a\ufffd\u91cf\ndp = [0] * (n + 1)\ndp[0] = 1\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\nprint(dp[n])\n"}, "96": {"problem_id": 4096, "answer": ""}, "97": {"problem_id": 4097, "answer": "n = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    print(a[0] - a[1] + a[2] + a[3])"}, "98": {"problem_id": 4098, "answer": "import bisect as bfs\ndef lcm(x, y):\n    return x*y // bfs.bisect_left(dfs.bisect_left(bfs.binary_search_tree(x, y),\n}, "99": {"problem_id": 4099, "answer": "from sys import stdin, setrecursionlimit\nsetrecursionlimit(10**6)\nclass SegmentOperations:\n    def __init__(self, n, a):\n        self.a = a\n        self.p = 0\n        self.max = n\n        self.s = [0] * n\n        self.s[0] = 1\n        self.max_a = a\n        self.s[-1] = -1\n        self.max = max(self.max, n)\n        \n    def add(self, i, x):\n        self.p += x\n        self.s[i] = self.s[i] + x\n        self.max = max(self.max, i)\n        \n    def __str__(self):\n        return f'{self.p}'.format(self.max)\n    \n    def __floordiv(self, x):\n        return self.p - x\n    \n    def __mul(self, x, y):\n        return self.p * self.p - x * self.p\n    \n    def __floordivx(self, x, y):\n        return self.p * self.p - y * self.p\n    \n    def __pow(self, x, y):\n        return self.p - x * self.p - y * self.p\n    \n    def __lei(self, x):\n        return self.p - x\n    \n    def __lti(self, x, y):\n        return self.p - x * y\n    \n    def __lei2(self, x, y):\n        return self.p - x * y\n    \n    def __gtx(self, x):\n        return self.p - x\n    \n    def __eq(self, x, y):\n        return self.p == x * y\n    \n    def __neig(self, x, y):\n        return self.p == x * y\n    \n    def __res(self, a, b):\n        return self.p - a * b\n    \n    def __getitem__(self, key):\n        return self.p\n    \n    def __setitem__(self, key, value):\n        if key not in self.s:\n            self.s[key] = value\n        elif self.s[key] < value:\n            self.s[key] = value\n        else:\n            self.s[key] = value\n        self.p = value\n        return self.s[key]\n    \n    def __repr__(self):\n        return \"\\n\".join(str(self.p) for self in self.s)\n    \n# Made By Mostafa_Khaled\n"}, "100": {"problem_id": 4100, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, nsmallest as sm\nN, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\ndef solve():\n    m = int(input())\n    for i in range(1, m):\n        x, y = map(int, input().split())\n        print(solve())\n    return x - 1, y - 1\n\ndef main():\n    N, K, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(solve())\n\nmain()\n"}, "101": {"problem_id": 4101, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readline\n\ndef main():\n    n, m = map(int, readline().split())\n    mat = [[] for _ in range(n)]\n    for i in range(n):\n        mat[i].append(0)\n    for i in range(m):\n        mat[i].append(0)\n    # print(mat)\n    print('YES')\n    print(' '.join(map(str, mat[1:][::-1])))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "102": {"problem_id": 4102, "answer": "n = str.strip()\nn = list(n)\nn = \"98769\"\nfor i in n:\n    if i in \"98769\":\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"}, "103": {"problem_id": 4103, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, b, a = map(int, readline().split())\ns = list(map(int, readline().split()))\nn -= 1\nb = 0\na.sort(reverse=True)\nd = a[n:n+b]\nprint(max(s))"}, "104": {"problem_id": 4104, "answer": "from sys import stdin, stdout\nfrom itertools import takewhile\nfrom collections import defaultdict\ndef input():\n    return stdin.readline().rstrip('\\n')\ndef lru():\n    return list(map(int, input().split()))\ndef rmd(a, b):\n    return min(a, b)\ndef srt(a, b):\n    return min(a, b)\ndef lmd(a, b):\n    return min(a, b)\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif a > b:\n        return a\n    else:\n        a = gcd(a, b)\n        b = a\n    return b\ndef main():\n    n = int(input())\n    for i in range(n):\n        a = rmd(input(), a)\n        b = rmd(input(), b)\n        print(f'{a} {b}')\n\nmain()\n"}, "105": {"problem_id": 4105, "answer": "import bisect\ndef main():\n    n, k = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        ans.append(bisect.bisect_right(l[i]))\n    print('YES' if ans[-1] == 'y' else 'NO')\n    return \"\\n\".join(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "106": {"problem_id": 4106, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn, k, x = map(int, read().split())\nA = list(map(int, read().split()))\nif k == 1:\n    print(x)\n    return\nA.sort(reverse=True)\ns = 0\nfor i in range(n):\n    s += A[i]\n    if s > k:\n        break\n    else:\n        print(max(A[i:i + k] - s, 0))\n        s = 0\n"}, "107": {"problem_id": 4107, "answer": "from sys import stdin,stdout\nn,k=list(map(int,stdin.readline().split()))\ns=input()\nl=list(map(int,stdin.readline().split()))\nfor i in range(n):\n    s=s.replace('1','').replace('0','').zfill(k)\nprint(sum(l))\n"}, "108": {"problem_id": 4108, "answer": "import sys\nreadline = sys.stdin.readline\n\ns = list(map(str,readline().split()))\nt = list(map(str,readline().split()))\n\ndef main():\n    s = s.replace(' ', '')\n    t = t.replace(' ', '')\n    a = [ord(c)-97 for c in t]\n    print((\"Yes\",a))\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "109": {"problem_id": 4109, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 1000000007\nINF = 10**9+7\n\ndef main():\n    N = int(readline())\n    A = [0]*N\n    for i in range(N):\n        A[i] = A_.pop()\n    print(A[-1])\n\nmain()\n"}, "110": {"problem_id": 4110, "answer": "import sys\nreadline = sys.stdin.readline\nMOD = 10**9 + 7\ndef II(): return int(readline())\ndef MI(): return list(map(int, readline().split()))\ndef LI(): return list(map(int, readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return str(input())\ndef S(): return input()\n'''\n1. The difficulty of the problem is (p_1 c_1) + (p_D c_D) + (p_1 c_1) + (p_2 c_2) +... + (p_D c_D) + (p_1 c_1) + (p_2 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) +... + (p_D c_D) + (p_1 c_2) + Compl to write program that can calculate the total score of the user.'''\n'''\nA coding challenge site has a value for money.\nEach problem is allocated a score of based on its difficulty.\nThere are p_i problems with a score of each of these two ranges:\n - Base score"}, "111": {"problem_id": 4111, "answer": "import heapq as hq\r\ndef heapreduce(heap, cand):\r\n    res = 0\r\n    heapq.heappush(heap, cand)\r\n    while True:\r\n        curr = heapq.heappop(heap)\r\n        cand -= curr\r\n        res += curr[0]\r\n        if cand[0] >= cand[-1]:\r\n            break\r\n    else:\r\n        return res\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint(len(a))"}, "112": {"problem_id": 4112, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn, k, x = map(int, read().split())\nA = list(map(int, read().split()))\nif k == 1:\n    print(x)\n    return\np = 0\nfor i in range(n):\n    p += A[i]\n    if p % k == 0:\n        A[i] += 1\n    elif p > k:\n        A[i] = max(A[i], A[k-1] + 1)\n    else:\n        A[i] = max(A[i], A[k-1] + 1)\n\nprint(max(A))"}, "113": {"problem_id": 4113, "answer": "import sys\nread = sys.stdin.readline\nn = int(read())\ndoughnut = 1\ncands = 0\nfor i in range(n):\n    candy = read().rstrip('\\n')\n    if candy == 0:\n        continue\n    else:\n        candy = candy * 8 + candy * 7\n        cands += candy\n        print(('Yes', str(cands)))\n    elif candy == 1:\n        print('Yes')\n        continue\n    else:\n        print('No')"}, "114": {"problem_id": 4114, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef read_int(): return int(readline())\ndef read_int_f(): return list(map(int, readline().split()))\ndef __starting_point():\n    # read input\n    n = read_int()\n    x = read_int_f()\n    y = read_int_f_s(x)\n    print(x, y)\n__starting_point()"}, "115": {"problem_id": 4115, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    S = input()\n    n = len(S)\n    h = 0\n    for i in range(n):\n        if S[i] == '1':\n            h += 1\n        else:\n            print(h)\n            break\n    return h\n\nmain()\n"}, "116": {"problem_id": 4116, "answer": "import math as mt\r\nn = int(input())\r\nwhile n:\r\n    n -= 1\r\n    print(math.gcd(n, int(input())))\r\n"}, "117": {"problem_id": 4117, "answer": "N = int(input())\nl = list(map(int, input().split()))\nprint(5 * (N - l.count(l[0])) + (N - l.count(l[1])) )\n"}, "118": {"problem_id": 4118, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    A,B=map(int,input().split())\n    print(A*B)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "119": {"problem_id": 4119, "answer": "N,M=map(int,input().split())\nX=list(map(int,input().split()))\nM.sort()\n#print(M)\ndp=[0]*N\nfor i in range(N):\n    dp[i]=dp[i-1]+X[i]\n#print(dp)\nans=0\nfor i in range(M):\n    ans+=dp[i]\nprint(ans)"}, "120": {"problem_id": 4120, "answer": "import itertools inversed as I\nfor _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    \n    d = [[] for _ in range(n)]\n    for i in range(1, n):\n        if d[i].startswith('1'):\n            d[i].append(i)\n        elif d[i].startswith('0'):\n            d[i].append(i)\n        else:\n            d[i].append(i)\n            \n    print(' '.join(map(str, d[k])))\n"}, "121": {"problem_id": 4121, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('YES' if a[0]==1 else 'NO')\n"}, "122": {"problem_id": 4122, "answer": "import sys\ninput = sys.stdin.readline\n\nH, n = list(map(int, input().split()))\nd = [-1] + [list(map(int, input().split()))] * (H-1)\nfor i in range(H):\n    d[i] = max(0, i - d[i])\nprint(('\\n'.join(map(str, d[:-1]))) + '\\n')\n"}, "123": {"problem_id": 4123, "answer": "n = int(input())\ns = list(map(str, input().split()))\nfor i in range(n):\n    s.insert(0, chr(i+ord('a')))\nprint(''.join(s))"}, "124": {"problem_id": 4124, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\ndef main():\n    s = input()\n    t = input()\n    \n    #s.sort(key=lambda x: len(x))\n    #t.sort(key=lambda x: len(x))\n    #l = len(s)\n    #r = len(t)\n    #print(l,r)\n    \n    #d = {}\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n    #d[1] = 0\n    #d[2] = 0\n    #d[3] = 0\n    #d[4] = 0\n    #d[5] = 0\n    #d[6] = 0\n    #d[7] = 0\n    #d[8] = 0\n    #d[9] = 0\n    #d[0] = 0\n"}, "125": {"problem_id": 4125, "answer": "import sys.stdin as s\nreadline = sys.stdin.readline\n\nN,X = map(int,readline().split())\nans = [float(x) for x in readline().split()]\n\n# \u534a\u56de\u4e8c\u5206\u6392\u5e8f\uff0c\u8fd9\ufffd Dwarikal \u95da\u5bf9\ufffd\u540e\u9762\u53ef\u4ee5\u800c\u4e0d\u662f\u5bf9\ufffd\u540e\u9762\u53ef\u4ee5\u8003\u8651\u81ea\u5df1\uff0c\u56e0\u4e3a\u6240\u6709\u7c7b\u90fd\u662f\u540c\u6837\u7684](https://www.codewars.com/kata/ruby-dwarikal.html)\n\nprint(ans[0])\nprint(ans[1])\n\nfor i in range(2,N+1):\n    print(ans[i],end=\" \")\n    \n"}, "126": {"problem_id": 4126, "answer": "s = input()\nn = len(s)\na = [0]*n\nfor i in range(n):\n    a[ord(s[i])-97] = s[i]\na.sort()\nprint(\"Yes\" if a[-1]==a[-1+n-1] else \"No\")"}, "127": {"problem_id": 4127, "answer": "import sys\nreadline = sys.stdin.readline().rstrip('\\r\\n').rstrip('\\r\\n')\ndef main():\n return int(main())\n\n__author__ = 'artyom'\n__DEL__ = 'artyom'\n\nn = int(readline())\nprint(main())\n"}, "128": {"problem_id": 4128, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(0.0 if n >= 2 * (n - 1) else 1)"}, "129": {"problem_id": 4129, "answer": "import sys.stdin as mtprib\n\ninput = mtprib.I().split()\nn, m, s = int(input()), [], 0\nfor _ in range(m):\n    u, v = map(int, input().split())\n    if u == 1 and v == 1:\n        s += 1\n    elif u == 1 and v == 1:\n        s += 1\n    elif v == 1 and u == 1.5:\n        s += 1\n    elif v == 1 and u == 1.5:\n        s += 1\nprint(min(s, 0))"}, "130": {"problem_id": 4130, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(max(a) + max(b))"}, "131": {"problem_id": 4131, "answer": "from sys import setrecursionlimit, stderr\nfrom itertools import takewhile\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom heapq import heapify, heappop, heappush\nfrom functools import lru_cache\nfrom operator import xor as xor_or\nfrom re import compile, IOBase as IS_REGEX\nfrom datetime import datetime\nfrom copy import deepcopy\nfrom fractions import Fraction\nfrom typing import List too_many_bounds\nclass Solution:\n    def IDNumberOperations(self, A: List[int], N: int, M: int, P: List[int]) -> List[List[int]]:\n        ans = []\n        for i, a in enumerate(A):\n            ans.append(int(a) if i == 0 else Fraction(a, M))\n        print(ans)\n        print(ans[::-1])\n        ans.sort(key=lambda x: x[1])\n        i = 0\n        while i < len(ans) - 1:\n            j = bisect_left(ans[i + 1:], P)\n            if j < len(ans) - 1:\n                ans[i] = ans[j] = ans[i] - 1\n            elif ans[i] == ans[j] and ans[i] == ans[j] + 1:\n                ans[i] = ans[j] = ans[i] - 1\n            else:\n                ans[i] = ans[j] = ans[i] + 1\n            i += 1\n        print(ans)\n        return ans\n            \n"}, "132": {"problem_id": 4132, "answer": "from sys import stdin\ninput = stdin.readline\nn = int(input())\n#print(n)\nprint(n)"}, "133": {"problem_id": 4133, "answer": "s = input().split()\nn = len(s)\nd = {'a':0, 'b':1, 'c':2, 'd':3}\nd.update(s[n-1:])\nfor i in range(n-2):\n    if s[i] == 'a':\n        d[s[i]] += 1\nprint('\\n'.join(d.get(i, '')))\n"}, "134": {"problem_id": 4134, "answer": "from sys import stdin,stdout\nreadline = stdin.readline\nn,m,k = map(int,readline().split())\ngrid = [[0 for i in range(n)] for j in range(m)]\nfor i in range(1,n):\n    grid[i][i] = 1\n    for j in range(1,m):\n        xor = int(x) - 1\n        for k in range(j+1,n):\n            if grid[i][j] == 0:\n                xor = k\n            elif grid[i][j] == 1:\n                xor = k - 1\n        grid[i][j] = xor\nprint(grid[-1][-1])"}, "135": {"problem_id": 4135, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    print(s.count('codeforces'))\n"}, "136": {"problem_id": 4136, "answer": "import sys\ndef main():\n try:\n    a, b = list(map(int, sys.stdin.readline().split()))\n except ValueError:\n    return 0\n\ndef __starting_point():\n main()\n__starting_point()"}, "137": {"problem_id": 4137, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    s = ''.join(map(str,read().split()))\n    print(s.strip())\n\nmain()\n"}, "138": {"problem_id": 4138, "answer": "from functools import reduce\r\ndef rec(l, k):\r\n    if k == 0:\r\n        return 0\r\n    elif k % 2 == 0:\r\n        return reduce(list(map(int, list(reversed(l)))) % 10, 0, k)\r\n    else:\r\n        ans = 0\r\n        for i in range(1, k + 1):\r\n            ans += l[i] * (k - i)\r\n        return ans\r\n\r\nq = int(input())\r\nfor _ in range(q):\r\n    k = int(input())\r\n    print(rec(k, 1), end=\" \")\r\n"}, "139": {"problem_id": 4139, "answer": "import sys\nreadline = sys.stdin.readline\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int, readline().split()))\nINF = 10**9+7\nmod = pow(10,modefree(10,mod))+7\ndef LIR(n):\n return ''.join(map(str, input()))\ndef main():\n try:\n  from collections import defaultdict\n except NameError:\n  print(sys.stderr)\n  return\n\ndef __starting_point():\n main()\n__starting_point()"}, "140": {"problem_id": 4140, "answer": "from collections import deque2D\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nn = int(input())\ns = list(map(int, input().split()))\nprint(min(n**0.5, s))"}, "141": {"problem_id": 4141, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    print(A.count(5))\n    for i in range(N):\n        print(A[i], end=\" \")\n    print()\n\nmain()\n"}, "142": {"problem_id": 4142, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.ranks = [0] * n\n        self.groupAns = [1] * n\n        self.groupFreq = [1] * n\n        self.groupAns[0] = n\n        self.groupFreq[0] = n\n        self.parents[n] = [-1] * n\n        self.ranks[n] = 0\n        self.groupAns[n] = [1] * n\n        self.groupAns[n][0] = n\n        self.groupFreq[n] = [1] * n\n        self.groupAns[n][1] = n\n        self.groupFreq[n][0] = n\n        self.groupAns[n][1] = n\n        self.groupFreq[n][2] = n\n        self.groupAns[n][2] = n\n        self.groupAns[n][3] = n\n        self.groupFrequencies = [0] * n\n        self.groupFrequencies[0] = 1\n        self.groupFrequencies[1] = 1\n        self.groupFrequencies[2] = 1\n        self.groupFrequencies[3] = 1\n        self.groupFrequencies[4] = 1\n        self.groupFrequencies[5] = 1\n        self.groupFrequencies[6] = 1\n        self.groupFrequencies[7] = 1\n        self.groupFrequencies[8] = 1\n        self.groupFrequencies[9] = 1\n        self.groupFrequencies[10] = 1\n        self.groupFrequencies[11] = 1\n        self.groupFrequencies[12] = 1\n        self.groupFrequencies[13] = 1\n        self.groupFrequencies[14] = 1\n        self.groupFrequencies[15] = 1\n        self.groupFrequencies[16] = 1\n        self.groupFrequencies[17] = 1\n        self.groupFrequencies[18] = 1\n        self.groupFrequencies[19] = 1\n        self.groupFrequencies[20] = 1\n        self.groupFrequencies[21] = 1\n        self.groupFrequencies[22] = 1\n        self.groupFrequencies[23] = 1\n        self.groupFrequencies[24] = 1\n        self.groupFrequencies[25] = 1\n        self.groupFrequencies[26] = 1\n        self.groupFrequencies[27] = 1\n        self.groupFrequencies[28] = 1\n        self.groupFrequencies[29] = 1\n        self.groupFrequencies[30] = 1\n        self.groupFrequencies[31] = 1\n        self.group"}, "143": {"problem_id": 4143, "answer": "import sys\ninput = sys.stdin.readline\n#n = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nD = list(map(int, input().split(' ')))\nE = list(map(int, input().split(' ')))\n\ndef main():\n    n = int(input())\n    A = sorted(A, key=lambda x: x[1])\n    B = sorted(B, key=lambda x: x[1])\n    C = sorted(C, key=lambda x: x[1])\n    D = sorted(D, key=lambda x: x[1])\n    E = sorted(E, key=lambda x: x[1])\n    print(ceil(n/A.count(A)))\n__author__: Takahashi Tzafry <tzafry@gmail.com>\n\ndef __starting_point():\n    main()\n__starting_point()"}, "144": {"problem_id": 4144, "answer": "from bisect import bisect_left\nN = int(input())\nprint(2*(N-1))"}, "145": {"problem_id": 4145, "answer": "import bisect as bi\ndef pr(n):\n    if n >= 1:\n        return int(n ** 0.5)\n    elif n >= n // 2:\n        return int(n ** 0.5)\n    else:\n        return 0\npr(10)\n"}, "146": {"problem_id": 4146, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nv = [int(x) for x in readline().split()]\n\n# \u5f53\u524d\u4f4d\u7f6e\u6587\u4ef6\u540d\u5b57\u4e24\u7406\u5185\u5bb9\u90fd\u80fd\u591f\u5230\uff0c\u9700\u8981\u91cd\u590d\u5176\u6b21\u8c03\u51fd\u6570\uff0c\u6574\u4e2a\u4f4d\u7f6e\u6587\u4ef6\u540d\u5b57\u4e24\u7406\u5185\u5bb9\u90fd\u80fd\u591f\u5230\uff0c\u65e0\u9700\u6c42\u6700\u5c0f\u5206\u4e3a\u4e00\u4e2a\u65b0\u7684\u7406\ufffd\u5c40\ndef is_duplicate(x):\n    try:\n        x = x.split()\n    except ValueError:\n        return False\n\ndef issub(x, y):\n    return x == y\n\ndef solve(n, v, l):\n    if n % 2 == 0:\n        return 1\n    elif n % 2 == 1:\n        return 2\n    else:\n        return min(solve(n//2, v, l) + solve(n//2, v, l) + solve(n//2, v, l) + solve(n//2, v, l))\n\ndef solve_bfs(n, v, l):\n    try:\n        x = v[0]\n        y = v[1]\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x, y)\n        print(x,"}, "147": {"problem_id": 4147, "answer": "import sys.stdin as si\ninput = sys.stdin.readline\nn, a, b = list(map(int, input().split()))\nm = 10**9\nfor i in range(n):\n    m = max(m, si.logical_search(b, i))\nprint(m)\n"}, "148": {"problem_id": 4148, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\nS = list(map(ord, S))\n\ndef shifter(x):\n    return int(x.swapcase() or '0')\n\ndef lshash(x):\n    return int(x.swapcase() or '0')\n\ndef shifter_s(x):\n    return int(x.swapcase() or '0')\n\ndef lshash_s(x):\n    return int(x.swapcase() or '0')\n\ndef main():\n    N = 26\n    S = list(map(ord, S))\n    for i in range(N):\n        S.insert(0, chr(ord('a')))\n    print(lshash_s(S))\nmain()"}, "149": {"problem_id": 4149, "answer": "from bisect import *\nN = int(input())\nA = list(map(int, input().split()))\nfor i in range(1, N):\n    A.insert(0, A[i-1])\nprint(' '.join(map(str, A)))"}, "150": {"problem_id": 4150, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\ncirle = [0] * (n + 1)\nfor i in range(1, n + 1):\n    cirle.append(cirle[-1] + l[i])\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    cirle = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cirle[i] = 1\n    for i in range(len(coh)):\n        if cirle[i] < k:\n            k -= cirle[i]\n        elif cirle[i] == k:\n            continue\n        else:\n            cirle[i] = 0\n    print(' '.join(map(str, cirle)))"}, "151": {"problem_id": 4151, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split()))\nm = 998244353\nfor i in range(n - 1):\n    if a[i] == a[i + 1]:\n        m = min(m, i + 1)\nprint(m % m)"}, "152": {"problem_id": 4152, "answer": "from bisect import bisect_left, bisect_right\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i], end=\" \")\n"}, "153": {"problem_id": 4153, "answer": "def main():\n    S = list(map(int, input().split()))\n    n = len(S)\n    for i in range(n):\n        if S[i] == '1':\n            S[i] = 1\n        else:\n            S[i] = 0\n    print(len(S))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "154": {"problem_id": 4154, "answer": "N, M = map(int, input().split())\nif N == 1:\n  print(0)\nelif M == 1:\n  print(N + 1)\nelse:\n  cnt = 0\n  for i in range(N):\n    if L_i + 1 - i in R_i:\n      cnt += 1\n    else:\n      break\n  print(cnt)"}, "155": {"problem_id": 4155, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nH = [int(i) for i in input().split()]\nAns = []\nfor i in range(N):\n    h = list(map(int, input().split()))\n    Ans.append(maxHeights(H[i]))\nAns.sort(key=lambda x: x.is_integer())\nprint(min(2, len(Ans)))\n"}, "156": {"problem_id": 4156, "answer": "import sys\ninput = sys.stdin.readline\n\nn,w=list(map(int,input().split()))\nl=list(map(int,input().split()))\n\ndp = [[0 for _ in range(n)] for _ in range(n)]\ndp[0][0] = 1\nfor i in range(1,n):\n    for j in range(i+1,n):\n        if l[i]==0:\n            dp[i][j] = dp[i-1][j] + l[i]\n        elif l[i]==1:\n            dp[i][j] = dp[i-1][j] + l[i]\n        else:\n            dp[i][j] = dp[i].copy()\nprint(dp[n-1][w])\n"}, "157": {"problem_id": 4157, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9 + 7\nINF = 1<<20\n\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    \n    # A = [0] * 3\n    # b = [0] * 3\n    # c = [0] * 3\n    # d = [0] * 3\n    # e = [0] * 3\n    # f = [0] * 3\n    # g = [0] * 3\n    # h = [0] * 3\n    # i = [0] * 3\n    # j = [0] * 3\n    # k = [0] * 3\n    # l = [0] * 3\n    # r = [0] * 3\n    # s = [0] * 3\n    # t = [0] * 3\n    # n = int(readline())\n    # a = [0] * 3\n    # b = [0] * 3\n    # c = [0] * 3\n    # d = [0] * 3\n    # e = [0] * 3\n    # f = [0] * 3\n    # g = [0] * 3\n    # h = [0] * 3\n    # i = [0] * 3\n    # j = [0] * 3\n    # k = [0] * 3\n    # l = [0] * 3\n    # r = [0] * 3\n    # s = [0] * 3\n    # t = [0] * 3\n    # n = int(readline())\n    # a = [0] * 3\n    # b = [0] * 3\n    # c = [0] * 3\n    # d = [0] * 3\n    # e = [0] * 3\n    # f = [0] * 3\n    # g = [0] * 3\n    # h = [0] * 3\n    # i = [0] * 3\n    # j = [0] * 3\n    # k = [0] * 3\n    # l = [0] * 3\n    # r = [0] * 3\n    # s = [0] * 3\n    # t = [0] * 3\n    # n = int(readline())\n    # a = [0] * 3\n    # b = [0] * 3\n    # c = [0] * 3\n    # d = [0] * 3\n    # e = [0] * 3\n    # f = [0] * 3\n    # g = [0] * 3\n    # h = [0] * 3\n    # i = [0] * 3\n    # j = [0] * 3\n    # k = [0] * 3\n    # l = [0] * 3\n    # r = [0] * 3\n    # s = [0] * 3\n    # t = [0] * 3\n    # n = int(readline())\n    # a = [0] * 3\n    # b = [0] * 3\n    # c = [0] * 3\n    # d = [0] * 3\n    # e = [0] * 3\n    # f = [0] * 3\n    # g = [0] * 3\n    # h = [0] * 3\n    # i = [0] * 3\n    # j = [0] * 3\n    # k = [0] * 3\n    # l = [0] * 3\n    # r = [0] * 3\n    # s = [0] * 3\n    # t = [0] * 3\n    # n = int"}, "158": {"problem_id": 4158, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nx = list(map(int, readline().split()))\nl = []\nfor i in range(n):\n    l.append(list(map(int, readline().split())))\nans = []\nfor i in range(1, n+1):\n    ans.append(sum(l[i] for l in l[i] if l[i]!=i+1))\nprint('\\n'.join(ans))\n"}, "159": {"problem_id": 4159, "answer": "def main():\n    A,B=map(int,input().split())\n    n=A//B\n    if n!=0:\n        print(n)\n    elif n%B==0:\n        print(0)\n    else:\n        for i in range(n-1):\n            if A[i]==B[i]:\n                break\n        else:\n            print(A[i],end=\" \")\n            A[i]+=1\n            A[i]%=B\n            \ndef __starting_point():\n    main()\n__starting_point()"}, "160": {"problem_id": 4160, "answer": "import math\ndef f(n):\n if n<1:\n  return math.fint64(math.ceil(n/(1.00*int(n))))\n else:\n  return math.fint64(-math.ceil(n/(1.00*int(n))))\n\n# a.cache.increments = 1\n# b.cache.remainders = 1\n# c.cache.excess = 1\n# d.cache.remainders = 1\nprimes = map(str.split, range(10))\nfor i in range(1, len(primes)):\n n = int(math.ceil(primes[i]/100))\n print(f(n))\n"}, "161": {"problem_id": 4161, "answer": "import sys.stdin as si\ninput = lambda: sys.stdin.readline().rstrip()\n \nclass SegmentTree:\n    def __init__(self, n):\n        self.val = 2*n\n        self.size = 1\n        self.tree = SegmentTree(n)\n        self.tree.insert(0,str(self.val))\n        \n    def insert(self, i):\n        i += 1\n        while i <= self.size:\n            self.tree.insert(i,str(i))\n            i += 1\n        return i\n    \n    def _get_tree(self, i):\n        return self.tree.val[i]\n    \n    def _get_subtree(self, i):\n        return self.tree.val[i]\n    \n    def __lt__(self, other):\n        return self.tree.val[-1] < other.val[-1]\n    \n    def __gt__(self, other):\n        return self.tree.val[-1] < other.val[-1]\n    \n    def __neq__(self, other):\n        return self.tree.val[-1] < other.val[-1]\n    \n    def __str__(self):\n        return self.tree.val[int(sys.maxsize)]\n    \n    def ltfill(self, i):\n        l = self.size\n        for j in range(i, 0, -1):\n            l.extend(self.merge(i,j))\n        return l.pop()\n    \n    def merge(self, i, j):\n        mid = (i + j) // 2\n        left = self.size\n        right = self.size - 1\n        while left <= right:\n            mid = (mid + left) // 2\n            if self.tree.merge(left, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left"}, "162": {"problem_id": 4162, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9\nMOD = 10**9 + 7\n\nn = int(readline())\na = list(map(int, readline().split()))\n\n# A = [-1]*n\n# dp = [-1]*n\n# for i in range(n):\n#     dp[i] = pow(a[i], MOD-2, MOD)\n#     if dp[i] % MOD == 0:\n#         a[i] = 1\n#     elif dp[i] % MOD == 1:\n#         a[i] = dp[i] // MOD\n#     dp[i] = a[i] % MOD\n#     a[i] = dp[i]\n#     dp.append(a[i])\n#     print(dp)\n\nprint(max(a.count(1), 0))\n"}, "163": {"problem_id": 4163, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\n\nclass DijkstraTree():\n    def __init__(self, n):\n        self.data = [INF]*(n+1)\n        self.sizechef = 0\n        self.heappush = []\n        self.happush = []\n        self.size = 2**32\n        self.data[0] = 1\n        self.data[1] = 2\n        self.data[2] = 3\n        self.data[3] = 4\n        self.data[4] = 5\n        self.data[5] = 6\n        self.data[6] = 7\n        self.data[7] = 8\n        self.data[8] = 9\n        self.data[9] = 10\n        self.size >>= 1\n        self.heappush |= self.data[7]\n        self.size >>= 2\n        self.data[0] = 0\n        self.data[1] = 0\n        self.data[2] = 0\n        self.data[3] = 0\n        self.data[4] = 0\n        self.data[5] = 0\n        self.data[6] = 0\n        self.data[7] = 0\n        self.data[8] = 0\n        self.data[9] = 0\n        self.size >>= 1\n        self.heappush |= self.data[8]\n        self.size >>= 2\n        self.data[0] = 0\n        self.data[1] = 0\n        self.data[2] = 0\n        self.data[3] = 0\n        self.data[4] = 0\n        self.data[5] = 0\n        self.data[6] = 0\n        self.data[7] = 0\n        self.data[8] = 0\n        self.data[9] = 0\n        self.data[10] = 0\n        self.data[11] = 0\n        self.data[12] = 0\n        self.data[13] = 0\n        self.data[14] = 0\n        self.size >>= 1\n        self.heappush |= self.data[7]\n        self.size >>= 2\n        self.data[0] = 0\n        self.data[1] = 0\n        self.data[2] = 0\n        self.data[3] = 0\n        self.data[4] = 0\n        self.data[5] = 0\n        self.data[6] = 0\n        self.data[7] = 0\n        self.data[8] = 0\n        self.data[9] = 0\n        self.data[10] = 0\n        self.data[11] = 0"}, "164": {"problem_id": 4164, "answer": "import sys\nreadline = sys.stdin.readline\nreadline_l = sys.stdin.readline\nreadlines = sys.stdin.readlines\ndef main():\n    sys.setrecursionlimit(10**7)\n    INF = float('inf')\n    inf = 10**18\n    for i in range(2, int(input())+1):\n        a = inf/10.0\n        b = inf/10.0\n        print(a**2-b**2)\n        if a>b:\n            inf = a**2-b**2\n        elif a<b:\n            inf = a**2+b**2\n        else:\n            pass\n        sys.setrecursionlimit(inf)\n        print(a**2-b**2)\n        if a==b:\n            print(a**2)\n            sys.setrecursionlimit(1)\n            return\n        sys.setrecursionlimit(INF)\n        inf = a**2\n        #print(f'a: {a}, b: {b}')\n        a = inf/10.0\n        b = inf/10.0\n        print(a**2-b**2)\n        if a>b:\n            inf = a**2-b**2\n        elif a<b:\n            inf = a**2+b**2\n        else:\n            pass\n        sys.setrecursionlimit(INF)\n        print(a**2-b**2)\n        if a==b:\n            print(a**2)\n            sys.setrecursionlimit(1)\n            return\n        sys.setrecursionlimit(INF)\n        inf = a**2\n        #print(f'a: {a}, b: {b}')\n        a = inf/10.0\n        b = inf/10.0\n        print(a**2-b**2)\n        if a>b:\n            inf = a**2-b**2\n        elif a<b:\n            inf = a**2+b**2\n        else:\n            pass\n        sys.setrecursionlimit(inf)\n        print(a**2-b**2)\n        if a==b:\n            print(a**2)\n            sys.setrecursionlimit(1)\n            return\n        sys.setrecursionlimit(INF)\n        inf = a**2\n        #print(f'a: {a}, b: {b}')\n        a = inf/10.0\n        b = inf/10.0\n        print(a**2-"}, "165": {"problem_id": 4165, "answer": "import sys\ninput = sys.stdin.readline\n\nN = int(input())\nL = [int(i) for i in input().split()]\n\ndef dijkstra(n, d, s):\n    if n == 0:\n        return d\n    elif n == 1:\n        return s\n    else:\n        a = d[0]\n        b = d[1]\n        for i in range(2, n):\n            a = min(a, b)\n            b = min(b, a)\n            d[i] = b\n        return d\n\nans = dijkstra(N, d, 0)\nprint('Yes' if ans else 'No')\n"}, "166": {"problem_id": 4166, "answer": "from bisect import Segment_insort\nN, M = list(map(int, input().split()))\ns = [-1 for i in range(N)]\nfor i in range(1, M):\n    s[i] = int('9' * 10**(i-1))\nprint(s[-1])\n"}, "167": {"problem_id": 4167, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\n\nN, K = map(int, readline().split())\nt = list(map(int, readline().split()))\n\n# t.sort()\nans = 0\nfor i in range(N-1):\n    if i % 2 == 0:\n        ans += 1\n    elif i % 2 == 1:\n        ans += 1\n    else:\n        ans += 2\nprint(ans)"}, "168": {"problem_id": 4168, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nINF = 10**9 + 5\nLINES = [None] * INF\n\ndef main():\n    n = int(readline())\n    s = list(map(int, readline().split()))\n    for i in range(n):\n        s[i] =''.join(map(str, s[i]))\n    print(s.count(1))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "169": {"problem_id": 4169, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nN, M = list(map(int, readline().split()))\nA = list(map(int, readline().split()))\n\n# \u5168\u90e8\u4e0a\u9762\u306e\u3068\u304d\u306f0\u3088\u540c\u3058\u6570\u5b57\u3092\u51fa\u529b\u3057\u306a\u304c\u3079\uff61\ns = [0] * N\nfor i in range(N):\n    s[i] = 1\n    s[i * 2] = A[i]\n\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u884c\u3044\nans = float('inf')\nd = []\nfor i in range(N):\n    ans = min(ans, d.copy())\n    d.append(ans)\nprint(ans)\n"}, "170": {"problem_id": 4170, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "171": {"problem_id": 4171, "answer": "from bisect import bisect_left as bl\ninput = lambda : list(map(int, input().split()))\nn, k = int(input()), 1000000007\nfor _ in range(k):\n    a, b = list(map(int, input().split()))\n    print(min(bl(a, b) + bl(a - 2, b)))\n"}, "172": {"problem_id": 4172, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# \u524d\u4e00\u9879\u76ee\u4e0d\u80fd\u7528a\uff0c\u56e0\u6b64\u91c7\u82f1\u601d\u60f3\u8fd4\u56de\u7edfik\ufffd with a.prod(a)\n# \u5982\u679ca\u80fd\u591f\u80af\u5b9a\u4e3a\u6b62\uff0c\u5219\u6240\u6709\u53ef\u4ee5\u52a0\u4e00\u4e2a\u8282\u70b9\u51fa\u6765\u4e86\u5230\u6700\u5c0f\u957f\u5ea6\n# \u8fd9\u6837\u5c31\u5fc5\u987b\u8981\u6c42\u8fd4\u56de\u52a0\u5165\u4efb\u4f55\u60f3\u6cd5\u51b5\ndef gcd(x, y): return a[x] + a[y] if x < 0 else a[x] + a[y]\n\n# \u4e0b\u4e00\u6b65\u5206\u5272\u51fa\u53e3\ndef lcm(x, y):\n    x = x * y\n    y = y * x\n    return x * y // gcd(x, y)\n\n# \u4f5c\u8005\u540c\u30a1\u30a4\u30e9\u0648\u0631\u064e\u3084\u30a2\u30fc\u30b9\u5316\u3059\u3079izarre cosmological law\ndef is_possible(a):\n    for i in range(1, len(a) + 1):\n        if a[i] == 0: return False\n    return True\n\n# \u4f5c\u8005\u542b\u6728(\u6c34)\u4f1a\u793e\uff1a\u5927\u304d\u6210\u7af6\u6cb9\u6c34\ndef is_possible(a):\n    for i in range(1, len(a) + 1):\n        if a[i] == 0: return False\n    return True\n\n###############################################################################\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nprint(is_possible(A))"}, "173": {"problem_id": 4173, "answer": "import sys\nreadline = sys.stdin = open('input.txt')\ndef II(): return int(readline())\ndef MI(): return list(map(int, readline().split()))\ndef LI(): return list(map(int, readline().split()))\ndef LI1(): return list(map(int, readline().split()))\ndef LI2(): return list(map(int, readline().split(\" \")))\ndef SI(): return sys.stdin.readline()\nMOD = 10**9 + 7\nn = SI()\nli = []\nfor _ in range(n):\n    li.append(set(li[-1]))\nprint(min(li))"}, "174": {"problem_id": 4174, "answer": "import sys\ndef main():\n    N, L = map(int, input().split())\n    X = int(sys.maxsize) - 1\n    for i in range(N):\n        L.sort()\n        X -= L[i]\n        if X < X:\n            X += 2*(X-1)\n        elif X > X:\n            X -= 2*(X-1)\n        else:\n            break\n    print(bisect.bisect_left(X, X-L[i]))\nmain()"}, "175": {"problem_id": 4175, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nw = list(map(int,input().split()))\nif w[0] == '0':\n  print('Yes')\nelse:\n  print('No')"}, "176": {"problem_id": 4176, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    A, B = map(int, readline().split())\n    A = tuple(A)\n    B = tuple(B)\n    print((min(A, B)))\n\nmain()\n"}, "177": {"problem_id": 4177, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef lsp(): return list(map(int, readline().split()))\ndef rlin(s): return map(rinoval, s)\nMOD = 10**9+7\nINF = 10**-7\neps = 1e-6\nmod = pow(10, MOD) + 7\nsys.setrecursionlimit(10**6)\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int, readline().split()))\ndef LS(): return list(map(str, readline().split()))\ndef S(): return sys.stdin.readline().strip()\ndef IRR(): return int(readline())\ndef LIR(s): return [rinoval(s)]\ndef SIR(s): return [rinoval(s)]\ndef LSIR(s): return [rinoval(s)]\ndef LIRSR(s): return [rinoval(s)]\ndef SR(s): return [rinoval(s)]\ndef LF(): return [sys.stdin.readline()].findtolist()\ndef LT(): return [x for x in range(int(sys.invert(sys. floor(mod**0.5)) + 7))]\ndef LT_(): return [x for x in range(int(sys.invert(sys. floor(mod**0.5)) + 7))]\ndef LT_2(x): return [x for x in range(x + 1, 100)]\ndef LF2(x): return [sys.stdin.readline(\"\\n\")].findtolist()\ndef LT2(x): return [x for x in x if x<=sys.invert(sys. floor(mod**0.5))]\ndef SR2(x): return [sys.stdin.readline(\"\\n\")].findtolist()\ndef LF22(x): return [sys.stdin.readline(\"\\n\")].findtolist()\n\n#==============================================================================================\nsr = lambda s: print(s)\nlr = lambda s: print(s)\n\ndef solve():\n    n = len(s)\n    ln = lr()\n    print(solve())\n    for i in range(n-1,-1,-1):\n        x = solve()\n        print(x)\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x.count(\"2\") + x.count(\"3\"))\n        print(x.count(\"1\") + x."}, "178": {"problem_id": 4178, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.val = list(range(n))\n        self.h = [0]*n\n        self.h[0] = 1\n        self.isleap = [False]*n\n        self.isleap[0] = True\n        \n    def insert(self, ele):\n        if ele not in self.val:\n            self.isleap[ele] = True\n        else:\n            self.isleap[ele] = self.val[ele]\n            self.val[ele] = ele\n            \n    def decrement(self, ele):\n        if self.isleap[ele] == True:\n            self.val[ele] = 0\n        elif self.isleap[ele] == False:\n            self.isleap[ele] = -1\n        else:\n            self.isleap[ele] = self.val[ele] + 1\n            self.val[ele] = self.isleap[ele]\n            \n    def drease(self, ele):\n        if ele < self.isleap[ele]:\n            self.increase(ele)\n        else:\n            self.decrease(ele)\n            \n    def decrement(self, ele):\n        if self.isleap[ele] == True:\n            self.isleap[ele] = -1\n        elif self.isleap[ele] == False:\n            self.isleap[ele] = -1\n        else:\n            self.isleap[ele] = self.promos[ele]\n            self.promos[ele] = ele\n            \n    def add(self, ele):\n        if ele not in self.val:\n            self.val[ele] = [elem]\n        else:\n            self.val[ele]*.add(ele)\n            self.isleap[ele] = [elem]\n            self.isleap[ele] = [elem]\n            \n    def decrement(self, ele):\n        if self.isleap[ele] == True:\n            self.isleap[ele] = -1\n        elif self.isleap[ele] == False:\n            self.isleap[ele] = -1\n        else:\n            self.isleap[ele] = self.promos[ele]\n            self.promos[ele] = ele\n            \n    def addall(self, ele):\n        if ele not"}, "179": {"problem_id": 4179, "answer": "from bisect import bisect_left as bl\nN, M, C = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split(' ')))\nprint(len(A) - len(C))"}, "180": {"problem_id": 4180, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nif n%1000 == 0:\n  print((1, n//1000))\nelse:\n  a = 10**9+7\n  for i in range(1, n+1):\n    a = (a*1000+i)%1000\n  print((a, n//1000))\n"}, "181": {"problem_id": 4181, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip()\n\nINF = 10**9\nMOD = 10**9 + 7\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    B = list(map(int, readline().split()))\n    hp = [0] * N\n    hp[0] = hp[0] + 1\n    for i in range(1, N+1):\n        hp[i] = max(hp[i-1], hp[i-2] + 1)\n        if hp[i] > hp[i-1]:\n            break\n        elif hp[i] < hp[i-1]:\n            hp[i] = hp[i-1]\n        else:\n            hp[i] = hp[i-1]\n            if hp[i] > hp[i-1]:\n                break\n            elif hp[i] < hp[i-1]:\n                hp[i] = hp[i-1]\n                if hp[i] > hp[i-1]:\n                    break\n                else:\n                    hp[i] = hp[i-1]\n                    if hp[i] > hp[i-1]:\n                        break\n                    else:\n                        hp[i] = hp[i-1]\n                        if hp[i] > hp[i-1]:\n                            break\n                        else:\n                            hp[i] = hp[i-1]\n                            if hp[i] > hp[i-1]:\n                                break\n                            else:\n                                hp[i] = hp[i-1]\n                                if hp[i] > hp[i-1]:\n                                    break\n                                else:\n                                    hp[i] = hp[i-1]\n       "}, "182": {"problem_id": 4182, "answer": "from bisect import *\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef dfs(x, y):\n    if x not in A:\n        return\n    A[x] = 0\n    A[x] += 1\n    for i in range(x + 1, N):\n        A[i] = max(A[i], A[i - x] + 1)\n    A.insert(x, y)\n    return\n\ndfs(10, 20)\n\nprint('No War')"}, "183": {"problem_id": 4183, "answer": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*- vim:f8,ggd|EH,c - T=6-8,-=9-10-11 -*-\n\ndef main():\n    N = int(input())\n    T = 360_000_000\n    for i in range(N):\n        # print(T)\n        if T[i] - T[i-60] == 0:\n            print(0)\n        elif T[i] - T[i-60] == 1:\n            print(T[i])\n        else:\n            x = T[i] - T[i-60]\n            if x < 0:\n                x = 0\n            if x == 0:\n                print(0)\n            elif x == 1:\n                print(T[i])\n            else:\n                print(T[i])\n                x = T[i]\n            if x == 2:\n                print(T[i])\n            elif x == 3:\n                print(T[i])\n            else:\n                print(T[i])\n                x = T[i]\n            if x == 4:\n                print(T[i])\n            elif x == 5:\n                print(T[i])\n            else:\n                print(T[i])\n                x = T[i]\n            if x == 6:\n                print(T[i])\n            elif x == 7:\n                print(T[i])\n            else:\n                print(T[i])\n                x = T[i]\n            if x == 8:\n                print(T[i])\n            elif x == 9:\n                print(T[i])\n            else:\n                print(T[i])\n                x = T[i]\n            if x == 10:\n                print(T[i])\n            elif x == 11:\n                print(T[i])\n        "}, "184": {"problem_id": 4184, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    N = int(readline())\n    W = list(map(int, read().split()))\n    print(abs(N-W[0]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "185": {"problem_id": 4185, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nN, M = list(map(int, input().split()))\nA = 10 ** 5\nfor i in range(1, N):\n    x, y = list(map(int, input().split()))\n    A *= x\n    A //= y\nprint(min(A, M))"}, "186": {"problem_id": 4186, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nstudents = []\nfor i in range(n):\n    students.append(list(map(int,readline().split())))\nteams = []\nfor i in students:\n    if i%2!=0:\n        teams.append(i)\n    else:\n        teams.append(i)\n\n# print(teams)\n\ndef __starting_point():\n    n = int(readline())\n    students = []\n    for i in range(n):\n        students.append(list(map(int,readline().split())))\n        \nt = sum(students)\nprint(t)\n"}, "187": {"problem_id": 4187, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\n\ndef main():\n    d = {}\n    for i in range(n):\n        d[a[i]] = []\n        a.append(i)\n    d.update(set.maketrans(\"1\", \"0\") + [0])\n    print(max(d.values()))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "188": {"problem_id": 4188, "answer": "from collections import deque\nn = int(input())\nfor i in range(n):\n    print(1)\n    print(' '.join(map(str, list(map(int, input().split())))) + '\\n')"}, "189": {"problem_id": 4189, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(readline())\ninput = lambda: sys.stdin.readline().strip()\n#______________________________________________________________________________________________________\n#![Tuple](https://www.codewars.com/kata/304800/)\n#![Tuple](https://www.codewars.com/kata/304801/description)\n#______________________________________________________________________________________________________\n#![Task #1](https://github.com/yourcodebis/python-matrix-team/blob/6468a0f3d4bc8685bba)\n#![Task #2](https://www.codewars.com/kata/304801/description-python)\n#______________________________________________________________________________________________________\nclass N:\n    def __init__(self, n):\n        self.par = [i for i in range(n + 1)]\n    def sum_(self, lst):\n        return self.helper(lst, 0)\n    def helper(self, lst, cur):\n        if cur in self.par:\n            return self.helper(lst + 1, cur + 1)\n        else:\n            return cur\nclass hamberd [&it] = [itertools.groupby(itertools.Counter).most_common(2) for itertools.groupby in hamberd(['a', 'b'])]\n"}, "190": {"problem_id": 4190, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# \u524d\u534a\u3051\u53d6\u5f97\u8a08\u7b97\u6cd5\u56de\u6570\uff1a\u9802\u70b9\u6570\u500d\u51e6\u7406\ndef main():\n    n = int(input())\n    a.append(b[0])\n    b.append(a[0])\n    for i in range(n-1):\n        print(a[i],end=\" \")\n    print()\n\nmain()\n"}, "191": {"problem_id": 4191, "answer": "import sys\n#sys.stdin = open(\"data.txt\")\n#sys.stdout = open(\"data.txt\")[:-1]\ninput = sys.stdin.readline\nINF = 10**9+7\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(input())\n    return \"0\"\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "192": {"problem_id": 4192, "answer": "import sys\ndef main():\n    d, t = map(int, input().split())\n    print(\"Yes\\n\")\n    return d, t\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "193": {"problem_id": 4193, "answer": "import sys\nreadline = sys.stdin.readline\n# def dijkstra(s):\n#     if len(s) == 1:\n#         return 'Yes'\n#     else:\n#         x = list(map(int, s.split()))\n#         y = list(map(int, s.split()))\n#         print(x, y)\n#         return '\\n'.join(map(dijkstra, x))\n# sys.setrecursionlimit(10**6)\nINF = 10 ** 18\nMOD = 10_000_007\nsys.setrecursionlimit(10**6)\ninput = lambda : int(readline())\nprint(sys.stdin.readline())"}, "194": {"problem_id": 4194, "answer": "from sys import stdin\ninput = stdin.readline\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n#print(A)\nt = []\nfor i in range(N):\n    t.append(int(input()))\n#print(t)\nmax_day = -1\nfor i in range(N):\n    if A[i] == 1:\n        max_day = max(max_day, i + 1)\n    elif A[i] == 2:\n        max_day = max(max_day, i + 1)\n    else:\n        print(-1)\n        break\n"}, "195": {"problem_id": 4195, "answer": "#!/usr/bin/env python\n\ndef main():\n    D, N = map(int, input().split())\n    print(5)\n\nmain()\n"}, "196": {"problem_id": 4196, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9\nMOD = 10**9 + 7\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\ndef main():\n    N = N>>1\n    A = [N] + A\n    print(10**9)\n\nmain()\n"}, "197": {"problem_id": 4197, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 10**9 + 7\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    print((' '.join(map(str, A)))\n'''\nA = tuple(map(int, readline().split()))\nn = int(readline())\nA.sort(key=lambda x: x[1])\nprint(('\\n'.join(map(str, A)))\n'''\n"}, "198": {"problem_id": 4198, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 1e18\nMOD = 10**9+7\ndef main():\n    A, B, X = map(int, readline().split())\n    A -= 1\n    B -= 1\n    for i in range(X):\n        if A+X-1 < B:\n            print(i, end=' ')\n        elif A+X-1 < A:\n            print(i, end=' ')\n        else:\n            print(i, end='\\n')\n    ans = 0\n    for i in range(X):\n        ans += pow(10, 9) * A * (1 - A)\n    print(ans)\nmain()\n\n"}, "199": {"problem_id": 4199, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\nN, K = list(map(int, readline().split()))\nt = list(map(int, readline().split()))\n\ndef lcm(a, b):\n    return a*b if a > b else -a*b\n\ndef cir(a, b):\n    return cir(a-1, b-1)\n\ndef cir2(a, b):\n    return cir(a-1, b-1) + cir2(a, b)\n\ndef __starting_point():\n    N, K = list(map(int, readline().split()))\n    cir(N, K)\n\n__starting_point()"}, "200": {"problem_id": 4200, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, m = map(int, readline().split())\nif n == m:\n print(\"Yes\")\n else:\n print(\"No\")\n\nA = [int(x) for x in readline().split()]\n\nclass SegmentTree(object):\n    def __init__(self, n):\n        self.n = n\n        self.seg = [0] * (n + 1)\n        self.l = [0] * (n + 1)\n        self.r = [0] * (n + 1)\n        self.seg[-1] = 1\n        self.r[-1] = 1\n    def insert(self, x):\n        self.l[x] += 1\n        self.r[x] += 1\n    def update(self, x, y):\n        self.seg[x] = y\n        self.r[y] += self.r[x]\n    def update_p(self, x, y):\n        self.seg[x] = y\n        self.r[y] += self.r[x]\n    def query(self, x, y):\n        return self.query(x, y)\n    def query_p(self, x, y):\n        return self.query_p(x, y)\n\nclass SegmentTree2D(object):\n    def __init__(self, n):\n        self.n = n\n        self.seg = [0] * (n + 1)\n        self.l = [0] * (n + 1)\n        self.r = [0] * (n + 1)\n        self.seg2D = SegmentTree2D(n)\n        self.seg2D.insert(0, self.r[0])\n        self.seg2D.update(0, self.l[0])\n        self.seg2D.update_p(0, self.l[1])\n        self.seg2D.query(0, self.r[1])\n        self.seg2D.query_p(0, self.l[1])\n        self.seg2D.query_p(0, self.r[1])\n        self.seg2D.query_p(0, self.l[1])\n        self.seg2D.query_p(0, self.r[1])\n        \n    def query_p(self, x, y):\n        return self.query_p(x, y)\n    def query_p(self, x, y):\n        return self.query_p(x, y)\n\nfor _ in range(n):\n    x = list(map(int, readline().split()))\n    y = list(map(int, readline().split()))\n    d = SegmentTree2D(x)\n    d.insert(0, x)\n    d.update(0, y)\n    print(*d, sep='\\n')"}, "201": {"problem_id": 4201, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = sys.stdin.readline\nH, W = map(int, readline().split())\nA = list(map(int, readline().split()))\nA.sort(reverse=True)\nR = []\nfor i in range(H):\n    R.append(A[i] +'' + A[H-i])\n\ndef dijkstra(h, s):\n    d = 0\n    for i in range(1, len(h)):\n        d += h[i]\n        if d == 0:\n            continue\n        elif d == 1:\n            d *= 2\n        else:\n            d //= 2\n    return d\n\nHW = dijkstra(H, W)\nprint(HW)"}, "202": {"problem_id": 4202, "answer": "#!/usr/bin/env python3\n\nimport bisect\n\ndef input():\n    return list(map(int, input().split()))[::-1]\n\n\ndef lru_cache(n, cache):\n    if cache[n] == -1:\n        return cache\n    elif cache[n] > n:\n        cache[n] = cache[n] + 1\n    else:\n        return cache[n]\n\n\n@lru_cache(n=len(set(map(int, input().split()))))\ndef sieve(n):\n    if n < 2:\n        return n\n    n = bisect.bisect_right(sieve(n), n)\n    return n\n\n@grundy()\ndef f(i, j):\n    if i \\leq j:\n        return 1 + (j \\times j) % 1000000007\n    return 2 * (f(i, j) - f(i-1, j)) % 1000000007\n\n@f(n=len(set(map(int, input().split()))))\ndef prime_factors(n):\n    if n % 2 == 0:\n        return [2]\n    i = 2\n    while i * i <= n:\n        i += 1\n    return i * i % 1000000007\n\n@prime_factors(n=2)\ndef gcd(a, b):\n    return a % b\n\n@gcd(n=1, 10**9+1)\ndef isprime(x):\n    if x == 1:\n        return True\n    else:\n        return False\n\n@isprime(n=2)\ndef all_factors(x):\n    if x % 2 == 0:\n        return [x]\n    else:\n        return [x] * (x + 1)\n\n@all_factors(prime_factors=f)\ndef all_modulo(x):\n    return x % p\n\n@all_modulo(n=2)\ndef mod_all(x):\n    return all_factors(x)\n\n@mod_all(n=10**9+1)\ndef prime_factors_pow(x, p):\n    return all_factors(x // p)\n\n@prime_factors_pow\ndef prime_factors_mod(x, p):\n    return all_fac(x % p)\n\n@prime_factors_pow\ndef all_factors_mod(x, p):\n    return all_fac(x % p)\n\n@all_factors_pow\ndef all_fac(x):\n    return all_factors(x)\n\n@all_fac(n=2)\ndef all_fac(x):\n    return all_fac(x)\n\n@all_fac(n=10**9+1)\ndef prime_factors_mod(x, p):\n    return all_fac(x)\n\n@all_fac(n=2)\ndef all_fac(x):\n    return all_fac(x)\n\n@all_fac(n=10**9+1)\ndef prime_factors_mod(x, p):\n    return all_fac(x)\n\n@all_fac(n=2)\ndef all_fac(x):\n    return all_fac(x)\n\n@all_fac(n=10**9+1)\ndef prime_factors_pow(x, p):\n    return all_fac(x)\n\n@all_fac(n=2)\ndef all_fac(x):\n    return all_fac(x)\n\n@all_fac(n=10**9+1)\ndef prime_factors_mod(x, p):\n    return all_fac(x)\n\n@all_fac(n=2)\ndef all_fac"}, "203": {"problem_id": 4203, "answer": "import sys\nreadline = sys.stdin.readline\n\ns = input()\n\n# \u8def\u5f84\u6570\u7ec4\u4ecb\nN = len(s)\n\ndef main():\n    d = {}\n    for i in range(N):\n        if s[i] not in d.keys():\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n            \n    ans = 0\n    for i in range(N):\n        if s[i] in d.keys():\n            ans += d[s[i]]\n        elif s[i] == 'A' and i+1!= N:\n            ans += d[s[i]]\n            \n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "204": {"problem_id": 4204, "answer": "from bisect import bisect_left as bl\nN = int(input())\nS = \"\".join(map(int, input().split()))\ndef dfs(s):\n    return len(S) - bisect_left(S, s)\ndfs(1)\nprint(('\\n'.join(map(str, S))))\n"}, "205": {"problem_id": 4205, "answer": "from itertools import combinations\nN = int(input())\np = list(map(int, input().split()))\nprint('YES' if p[0]==p[-1] else 'NO')"}, "206": {"problem_id": 4206, "answer": "import sys\nreadline = sys.stdin.readline\n \ndef main():\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            ans += 1\n        else:\n            ans += s[i]\n    print(ans)\nmain()\n"}, "207": {"problem_id": 4207, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i] + b[i])\n"}, "208": {"problem_id": 4208, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nl = list(map(int, readline().split()))\nr = list(map(int, readline().split()))\n\n# \u5168\u4f53\u53ef\u80fd\u51b2\u7d22\u5bf9\u5ea6\uff0c\u9700\u8981\u81ea\u5df1\u7684\u6807\u51c6\u5207\u6362\ndef check(s):\n    if s.find('?') == -1:\n        return False\n    elif s.find('?') == -1:\n        return False\n    else:\n        return True\n\n# \u5982\u679c\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u5408\u5e76\u6709\u4e00\u4e2a\u6587\u5b57\u5143\u7d20\uff0c\u7136\u540e\u518d\u6b21\u627e\u5230\u6587\u5b57\u4e24\u4e2a\u5143\u7d20\ndef dfs(s):\n    for i in range(len(s)):\n        if s[i]!='?':\n            continue\n        else:\n            print(' '.join(map(str, s[i:])))\n            return\n\n# \u4ee5\u524d\u7f00\u5c31\u51fa\u6765\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u5c31\u5141\u8db3\u4e8c\u5341\u5206majority\uff0c\u800c\u4e14\u5df2\u7ecf\u770b\u5230\u6700\u540e\u4e00\u4e2a\u6587\u5b57\uff0c\u6240\u4ee5\u8fd8\u5f97\u5230\u65f6\u95f4\u590d\u4e86\u591a\u5c11\u6b62\uff0c\u6bd4\u5982\u5982\u679c\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u5408\u5e76\u6709\u4e00\u4e2a\u6587\u5b57\u5143\u7d20\uff0c\u7136\u540e\u518d\u6b21\u627e\u5230\u6587\u5b57\u4e24\u4e2a\u5143\u7d20\ndef dfs_recursive(s):\n    # print(s)\n    # print(dfs(s))\n    # print(s)\n    # print(len(s))\n    # print(len(s[0]))\n    # print(len(s[0]))\n    # print(0)\n    if len(s) > 1:\n        print(len(s))\n        return\n    # print(len(s))\n    # print(len(s[0]))\n    # print(len(s[0]))\n    # print(check(s))\n    # print(len(s[0]))\n    # print(len(s[0][0]))\n    # print(check(s[1:]) and s[0[0] + 1:] and s[0[1] + 1:] and s[1] and s[1] and s[1] and len(s[1])+1)\n    # print(check(s[0]))\n    # print(len(s[0]))\n    # print(len(s[0][0]))\n    # print(check(s[1:]) and s[0[0] + 1:] and s[0[1] + 1:] and s[1] and len(s[1])+1)\n    # print(check(s[0]))\n    # print(len(s[0]))\n    # print(len(s[0][0]))\n    # print(check(s[1:]) and s[0[0] + 1:] and s[0[1] + 1:] and s[1] and len(s[1])+1)\n    # print(check(s[0]))\n    # print(len(s[0]))\n    # print(len(s[0][0]))\n    # print(check(s[1:]) and s[0"}, "209": {"problem_id": 4209, "answer": "import sys\ninput = sys.stdin.readline\n\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.ranks = [0] * n\n        self.cnt = [0] * n\n        self.ranks\u30c6\u30fc\u30c9\u5185\u6210\u5206:\n            self.ranks[i] = 1\n            self.cnt[i] = 1\n            self.ranks[i+1] = 1\n            self.cnt[i+1] = 1\n            self.ranks[i+2] = 1\n            self.cnt[i+2] = 1\n            self.ranks[i+3] = 1\n            self.cnt[i+3] = 1\n            self.ranks[i+3+1] = 1\n            self.cnt[i+3+2] = 1\n            self.ranks[i+3+3] = 1\n            self.cnt[i+3+4] = 1\n            self.ranks[i+4] = 1\n            self.cnt[i+4] = 1\n            self.ranks[i+4+1] = 1\n            self.cnt[i+4+2] = 1\n            self.ranks[i+4+3] = 1\n            self.cnt[i+4+4] = 1\n            self.ranks[i+5] = 1\n            self.cnt[i+5] = 1\n            self.ranks[i+5+1] = 1\n            self.cnt[i+5+2] = 1\n            self.ranks[i+5+3] = 1\n            self.cnt[i+5+4] = 1\n            self.ranks[i+5+5] = 1\n            self.cnt[i+5+6] = 1\n            self.ranks[i+6] = 1\n            self.cnt[i+6] = 1\n            self.ranks[i+6+1] = 1\n            self.cnt[i+6+2] = 1\n            self.ranks[i+6+3] = 1\n            self.cnt[i+6+4] = 1\n            self.ranks.insert(0, self.ranks[i+1])\n            self.cnt.insert(0, self.cnt[i+1])\n            self.ranks.insert(0, self.ranks[i+2])\n            self.cnt.insert(0, self.cnt[i+2])\n            self.ranks."}, "210": {"problem_id": 4210, "answer": "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef lcm(a, b):\n    return a*b//gcd(a, b)\n\n# print(a)\n# print(b)\n\nfor i in range(n):\n    l = lcm(a, b)\n    print(l//k, end=\" \")\n"}, "211": {"problem_id": 4211, "answer": "from bisect import *\nN = int(input())\nA = list(map(int, input().split()))\nmax_sum = 0\nfor i in range(N-1):\n    max_sum += A[i]\nprint(max_sum)"}, "212": {"problem_id": 4212, "answer": "# coding: utf-8\nimport sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\ndef main():\n    n, m, q = list(map(int, readline().split()))\n    \n    # A = [1] * m\n    # b = [1] * m\n    # c = [1] * m\n    # d = [1] * m\n    # e = [1] * m\n    # f = [1] * m\n    # fb = [1] * m\n    # fc = [1] * m\n    # d.append(0)\n    # for i in range(n):\n    #     if a[i] < b[i]:\n    #         f[i] = 0\n    #     elif a[i] > b[i]:\n    #         f[i] = 0\n    #     else:\n    #         f[i] = 1\n    # print(f)\n    \n    # res = 0\n    # for i in range(1, m):\n    #     res += f[i]\n    # print(res)\n    \n    # print(f[0])\n    # print(f[-1])\n    \n    # print(f[n-1])\n    # print(f[q-1])\n    \n    # print(f[a[0] - 1])\n    # print(f[a[1] - 1])\n    \n    # print(f[b[0] - 1])\n    # print(f[b[1] - 1])\n    \n    # print(f[c[0] - 1])\n    # print(f[c[1] - 1])\n    \n    # print(f[d[0] - 1])\n    # print(f[d[1] - 1])\n    \n    # print(f[e[0] - 1])\n    # print(f[e[1] - 1])\n    \n    # print(f[f[0]])\n    # print(f[f[1]])\n    \n    # print(f[f[n-1] - 1])\n    # print(f[f[q-1] - 1])\n    \n    # print(f[f[a[0] - 1] - 1])\n    # print(f[f[a[1] - 1] - 1])\n    # print(f[f[a[1] - 1] - 1])\n    \n    # print(f[cb[0] - 1])\n    # print(f[cb[1] - 1])\n    # print(f[cb[1] - 1])\n    \n    # print(f[cb[n-1] - 1])\n    # print(f[cb[d[0] - 1] - 1])\n    # print(f[cb[d[1] - 1] - 1])\n    \n    # print(f[cb[0] - 1])\n    # print(f[cb[1] - 1])\n    # print(f[cb[1] - 1])\n    \n    # print(f[1])\n    # print(f[2])\n    # print(f[3])\n    # print(f[4])\n    # print(f[5])\n    # print(f[6])\n    # print(f[7])\n    # print(f[8])\n    # print(f[9])\n    # print("}, "213": {"problem_id": 4213, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(abs(N-A[0]))\ndef __starting_point():\n    main()\n__starting_point()"}, "214": {"problem_id": 4214, "answer": "import sys\nreadline = sys.stdin.readline\nN = int(readline())\nx = list(map(int, readline().split()))\ny = list(map(int, readline().split()))\nfor i in range(N):\n  x[i] = x[i].rstrip()\nprint(N//2)\n"}, "215": {"problem_id": 4215, "answer": "import sys.stdin\nreadline = sys.stdin.readline\n\ndef main():\n \"\"\"Main program.\"\"\"\n return int(readline())\n\nn = int(readline())\na = list(map(int,readline().split()))\nb = list(map(int,readline().split()))\n\n# A and B are integers.\n# The top-left corner of the window is a window b.\n# To minimize the chances of falling out of the window,\n# we place a scrollber on the top left corner.\n# A is 2 units higher than B, and B is 1 unit greater.\n# This doubles the total horizontal length of the window.\n# So, A must place scrollber on the top-left corner.\nco = 0x7FFFFFFFF\nfor i in range(n):\n    co += a[i]\n    # print(co,a[i])\nco = co % 1000000007\n\n# We don't want to fall out of the window, so place a flush on the window.\n# This is because the flush is to be able to see the scrollber's position when the window is closed.\n# So, we flush when the window is close.\n# So, we need a flush of high value when the window is closed.\n# This is because we place a flush on the window when the window is flush,\n# which doubles the total horizontal length of the window.\n# So, we flush when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is flush.\n# So, we need a flush on the window when the window is out of the window.\n# So, we need a flush on the window when the window is out of the window,\n# which doubles the total horizontal length of the window.\n# So, the flush on the window when the window is out of the window.\n\n\n# Read and Run-timeErrore\nreadline = sys.stdin.readline\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "216": {"problem_id": 4216, "answer": "import bisect as b\nN = int(input())\ndp = [list(map(int, input().split())) for _ in range(N)]\ndp.sort()\ndp = [dp[0] + dp[1] for dp in dp]\nprint(dp[0])"}, "217": {"problem_id": 4217, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = lambda: readline().rstrip()\n\nN, M = map(int, readline().split())\nK = list(map(int, readline().split()))\n# \u524d\u534a\u6587\u5b57\u304c\u6700\u5c0f\u9577\u3055\u3051\u59cb\u70b9\u6570\nfor i in range(1, N):\n    K[i] = K[i-1] + 1\nprint(K[N])"}, "218": {"problem_id": 4218, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\n#n = list(map(int, input().split()))\n#a = list(map(int, input().split()))\n#c = list(map(int, input().split(' ')))\n#l = list(map(int, input().split(' ')))\n#r = list(map(int, input().split(' ')))\n#s = list(map(int, input().split(' ')))\n#i = 0\n#ans = 0\n#while i < N:\n#     ans += 1\n#     i += 1\n#print(ans)\n#print(r)\n#print(s)\nsys.setrecursionlimit(10**7)\nprint('\\n'.join(map(str, r)))"}, "219": {"problem_id": 4219, "answer": "from collections import deque\nN = int(input())\nA = list(map(int, input().split()))\nfor i in range(N):\n    A[i] = A[i-1] + A[i]\nprint(sum(A))"}, "220": {"problem_id": 4220, "answer": "import sys\nreadline = sys.stdin.readline\n\nK = int(readline())\nS = list(map(int, readline().strip('\\n').split(' ')))\nprint(' '.join(S))"}, "221": {"problem_id": 4221, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nclass T:\n    def __init__(self,n):\n        self.name = n\n        self.p = list(reversed(self.name))\n        self.s = ''\n        \n    def is_singular(self,n):\n        return self.name.find(n) >= 0.0 and self.name.find(n)<0.0\n    \n    def add_p(self,n):\n        self.p[n] +=''\n        return self.name.find(n) +'' + self.name.find(n)\n    \n    def remove_p(self,n):\n        self.p[n] -=''\n        return self.name.find(n) +'' + self.name.find(n)\n    \n    def reverse(self,n):\n        return self.name.find(n) - self.name.find(n)\n    \nt = T()\nfor i in range(1,26):\n    t.add_p(ord(i)-97)\nprint('\\n'.join(map(str,t.p)))"}, "222": {"problem_id": 4222, "answer": "from sys import stdin, stdout\nfrom itertools import takewhile\nfrom collections import defaultdict as dd, deque\nfrom heapq import heappop as hq, heappush as hp\nfrom bisect import bisect_left as bl, insort as br\nfrom numpy as np\ninput = stdin.readline\nn,k = list(map(int, input().split()))\nd = dd(int)\nfor i in range(n):\n    d.sort(reverse=True)\n    snuke = min(d.most_common(), 1)\n    br = min(d.most_common(), 1)\n    for j in range(k):\n        snuke *= d[j]\n        br *= d[j]\n        snuke += d[j]\n    heappush(hp, br)\nprint('\\n'.join(map(str, snuke)))"}, "223": {"problem_id": 4223, "answer": "def main():\n    S = list(map(chr, input().split()))\n    m = 0\n    for i in range(len(S)):\n        if S[i] == S[i + 1]:\n            m += 1\n        else:\n            break\n    print(m)\n\nmain()\n"}, "224": {"problem_id": 4224, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\n# \u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u5185\u306e\u90e8\u5206\u3054\u3068 atcoder.py:\n#   \u6700\u77ed\u8ddd\u96e2\u3068\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u308c\u3070\u3088\u3044\nINF = 10**18\n\ndef main():\n    A = [int(x) for x in readline().split()]\n    print(main())\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "225": {"problem_id": 4225, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    A = int(readline())\n    B = int(readline())\n    C = int(readline())\n    print(sum(map(lambda x: x * 10**(C-1), A)))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "226": {"problem_id": 4226, "answer": "# https://www.codechef.com/OCTA-DIGES/problems/COMMON-animals-in-total/\u266f\n#!/usr/bin/env python3\n\n\ndef solve(X, Y):\n    c = 0\n    for i in range(2, int(X**0.5)+1):\n        if Y % i == 0:\n            c += 1\n        else:\n            c -= 1\n\n    if c == 0:\n        print(\"Yes\")\n    elif c == 1:\n        print(\"It's a turtle\")\n    else:\n        print(\"It's a crane, and the statement is correct\")\n        return\n\ndef __starting_point():\n    solve(100000)\n__starting_point()"}, "227": {"problem_id": 4227, "answer": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nclass Graph:\n    def __init__(self, vertices, edges):\n        self.vertices = vertices\n        self.edges = edges\n        self.graph = [[] for _ in range(self.vertices)]\n        self.graph[0].append((0, 0))\n        self.graph[1].append((0, 1))\n        self.graph[2].append((0, -1))\n        self.graph[3].append((0, -1))\n        self.graph[4].append((0, -1))\n        self.graph[5].append((0, -1))\n        self.graph[6].append((0, -1))\n        self.graph[7].append((0, -1))\n        self.graph[8].append((0, -1))\n        self.graph[9].append((0, -1))\n        self.graph[10].append((0, -1))\n        self.graph[11].append((0, -1))\n        self.graph[12].append((0, -1))\n        self.graph[13].append((0, -1))\n        self.graph[14].append((0, -1))\n        self.graph[15].append((0, -1))\n        self.graph[16].append((0, -1))\n        self.graph[17].append((0, -1))\n        self.graph[18].append((0, -1))\n        self.graph[19].append((0, -1))\n        self.graph[20].append((0, -1))\n        self.graph[21].append((0, -1))\n        self.graph[22].append((0, -1))\n        self.graph[23].append((0, -1))\n        self.graph[24].append((0, -1))\n        self.graph[25].append((0, -1))\n        self.graph[26].append((0, -1))\n        self.graph[27].append((0, -1))\n        self.graph[28].append((0, -1))\n        self.graph[29].append((0, -1))\n        self.graph[0].append((0, -1))\n        self.graph[0].append((0, -1))\n        self.graph[1].append((0, -1))\n        self.graph[1].append((0, -1))\n        self.graph[2].append((0, -1))\n        self.graph[2].append((0, -1))\n        self.graph[3].append((0, -1))\n        self.graph[4].append((0, -1))\n        self.graph[5].append((0, -1))\n        self.graph[6].append((0, -1))\n        self.graph[7].append((0, -1))\n        self.graph[8].append((0, -1))\n        self.graph[9].append((0, -1))\n        self.graph[10].append((0, -1))\n        self.graph"}, "228": {"problem_id": 4228, "answer": "import sys\nreadline = sys.stdin.readline\n# import numpy as np\n# readline is a data structure that can output to sys import \n# readline as it is passed in allowsnextline() to go through\n# nextline and output to or from STDIN.\nn, l = list(map(int, readline().split()))\np = np.zeros((n, l), dtype = 'bool')\nfor i in range(n):\n    p[i] -= 1\n    if p[i] == -1:\n        break\nprint(('\\n'.join(map(str, p[:n]))))\n"}, "229": {"problem_id": 4229, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nA = list(map(int, readline().split()))\n\ndef main():\n    ans = 0\n    for i in range(n):\n        ans += A[i]\n        print(ans)\n\nmain()\n"}, "230": {"problem_id": 4230, "answer": "import bisect as b\nINF = 10**9 + 7\nMOD = 10**10 + 7\ndef main():\n    X, N = map(int, input().split())\n    print(b.bisect_left(X, N))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "231": {"problem_id": 4231, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\n# \u5355\u7528\u52a0\u5bdf\u7406\uff0c\u603b\u8f9eheap\u5305\u542b\u4e00\u4e2a\u6587\u5b57\u8282\u70b9\u5185\u90fe\u5230\u8fd4\u56de\uff0c\u540c\u65f6\u521b\u5efa\u5bb9\u91cf\uff0c\u9ec4\u8ba2\u51cf\u6700\u5c0f\u7684\u6570\u5b57\u7b26\ufffdILY\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e3a\u4e86\u5fc5\u987b\u4fdd\u8bc1\u7a7a\u95f4\u7406\uff0c\u53ef\u4ee5\u901a\u8fc7\u8f93\u5143\u7d20\u51cf\ufffdFORMATION\u8bc1\u660e\u6587\u4ef6\u5bf9\u81f3\u6587\u4ec0\u4e48\uff0c\u7136\u540e\u7528\u4e8c\u5206\u51cf\ufffdluaj\u30d7\u30eb\u51cf\ufffd the shortest and longest non-collapsed cell in the JEC C++\u7ade\u70b9\u53f3isible cell\uff0c\u7136\u540e\u5c0f\u5143\u7d20\u51cf\ufffd the shortest and longest non-collapsable cell in the JEC C++\u6761\u4ef6\u590d\u6742\u5ea6\uffc8\n\n\n# \u5909\u66f4\u56e0\u7d20\ninput = lambda: sys.stdin.readline().rstrip()\nprint(int(input()))"}, "232": {"problem_id": 4232, "answer": "n, k = map(int, input().split())\nl = list(map(int, input().split()))\nans = 10**9 + l[k-1]\nprint(ans)"}, "233": {"problem_id": 4233, "answer": "import sys\nread = sys.stdin.readline\n\nn, m = map(int, read().split())\nmat = [[0 for _ in range(n)] for _ in range(m)]\ndef f(x):\n    return x.center(2*x[0])\n\ndef main():\n    n, m = map(int, read().split())\n    mat = [[float('-inf') for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        x, y, s = f(mat[i][0])\n        mat[i][1] = s\n        mat[i][0] = 0\n    for i in range(1, n+1):\n        x, y, s = f(mat[i][1])\n        mat[i][2] = s\n        mat[i][3] = x\n        mat[i][4] = y\n        mat[i][5] = s\n    print(' '.join(map(str, mat)))\n\nmain()"}, "234": {"problem_id": 4234, "answer": "import bisect as b\nn = int(input())\ns = input()\nfor i in range(n):\n    print(bisect.bisect_left(s, i) - b.bisect_left(s, i + 1))"}, "235": {"problem_id": 4235, "answer": "import bisect as bi\ndef Dijkstra(n, adj):\n    d = {}\n    for i in range(n):\n        d[i] = list(map(int, adj[i].split(' ')))\n        d[i].append(i)\n    return 'YES' if len(d) > 1 else 'NO'\ndef main():\n    n, m = Dijkstra(n, 4)\n    adj = {i: [] for i in range(m)}\n    print(' '.join(map(str, adj)))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "236": {"problem_id": 4236, "answer": "from bisect import *\nN, M = map(int, input().split())\nl, r = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    ans.append(min(l, r))\nprint('\\n'.join(map(str, ans)))"}, "237": {"problem_id": 4237, "answer": "import math\ndef main():\n    A,B,C,D = map(int,input().split())\n    if A+B+C == D:\n        print(0)\n    elif A+B+C == 0:\n        print(1)\n    elif A+B+C == 9:\n        print(2)\n    else:\n        x = math.sqrt(A+B+C)\n        print(x)\n        return int(''.join(map(str,x)))"}, "238": {"problem_id": 4238, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\nINF = 10**18\nMOD = 10**9 + 7\n\nn = int(readline())\nfor i in range(n):\n    s = str(n)\n    print(s.count('Yes'))\n    print(s.count('No'))"}, "239": {"problem_id": 4239, "answer": "import math\ndef rec(n,r,x):\n    if n==0:\n        return 1\n    else:\n        return math.ceil(n/6)\n\nn=int(input())\na=list(map(int,input().split()))\nprint(rec(a[0],a[1],a[2]))\n"}, "240": {"problem_id": 4240, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\ns, t = list(map(int, readline().split()))\n\nfor i in range(0, len(s)):\n    if s[i] == t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"}, "241": {"problem_id": 4241, "answer": "import sys\nread = sys.stdin.readline\nreadlines = sys.stdin.readlines\nread = list(readlines())\ndef input():\n    return '\\n'.join(map(str, read().split()))\nn = int(read())\ns = [0]*1000001\nfor i in range(n):\n    s[i] = input()\n#print(s)\ncabacc = list(map(int, s[0:n]))\nfor i in range(1, 1000):\n    cabacc[ord(s[i])-ord('a')].append(i)\nprint((len(cabacc)))\n"}, "242": {"problem_id": 4242, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nINF = 10**9+7\nMOD = 10**9+7\n\ndef main():\n    A,B = map(int,readline().split())\n    print((A,B))\n\nmain()\n"}, "243": {"problem_id": 4243, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int,readline().split(' ')))\n\ndef main():\n\n    # \u5168\u90e8\u5206\u8d4b\u503c\n    N = int(readline())\n    res = 0.5*(N-6)\n    for i in range(N):\n        res += max(res, 500-i)\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "244": {"problem_id": 4244, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush, heappop\nfrom collections import defaultdict as dd, deque\nfrom bisect import bisect_left as bl, bisect_right as br\ndd = clapacry = [{} for _ in range(1U)]\ndef inp(): return map(int, readline().strip().split())\ndef out(var, end=\"\\n\"): return sys.stderr.write(str(var)+\" (\"+end+\")\\n\")\ndef lru_rules(a, b):\n    a = [i for i in a if i not in b]\n    b = [i for i in b if i not in a]\n    for i in a:\n        i = min(i, mdx(i)+2)\n        if i < len(b):\n            a[i] = i\n    dq = dd(algorithm=ADJ).popleft()\n    return dq[-1] if algorithm in lru_rules(a, b) else dq[-1] + bl(algorithm=ADJ).pop()\ninput = open(0)\nn = int(input())\nalgorithm = inp()\ndiretheness = [float(\"inf\") for _ in range(n)]\nprint(min(diretheness))\n"}, "245": {"problem_id": 4245, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.readline\n\nINF = 10**9+7\nLINQ(int) = lambda x: int(x) if x<=x.rstrip() else 1\n\ndef main():\n    A,B = map(int,readline().split())\n    print(min(map(int,readline().split())))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "246": {"problem_id": 4246, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    S = readline().rstrip('\\n')\n    T = readline().rstrip('\\n')\n    \n    print(CSR)\n    print(T)\n    print('')\n\ndef __starting_point():\n    main()\n__starting_point()"}, "247": {"problem_id": 4247, "answer": "import sys\nreadline = sys.stdin.readline\ndef read_int(): return int(readline())\ndef read_int_n(): return list(map(int, readline().split()))\ndef read_int_l(): return list(map(int, readline().split()))\ndef read_int_r(): return list(map(int, readline().split()))\n#______________________________________________________________________________________________________\n#\n# (C)Timor Zloty Lines and Numbers (Math)\n#\n# Copyright ZletlibCode OPC 2012\n# Distributed under the following condition:\n# https://www.lydyn.com/\ufffd\ufffd/licenses\n# Licensed to the public domain\n# Licensed to can.y. That code is part of the XKCD online\n# website\n# This code is part of the XKCD'smanac <http://kaggadam.fei.edu/cdumbin.php>\n#\n# Assume that you are a ZletlibCode derivative.\n# Thanks to you for thinking about how you can contribute to the GLA\n# Tomorrow looks like this:\n# 1. Discuss whats your code.\n# 2. Discuss whats your code.\n# 3. Discuss whats your code.\n# \n# Thank you for trying!\n# \n# @Pavel Smegunov\n# Urlice 2018 Written by: Pravet these:\n# \n# 1. Problem: https://www.codewars.com/kata/587eb3e47cb00003214/problems/ub\n# \n# @Date ZletlibCode 31st\u5e7411:25:24 Id: 13\n# \n# @Author Tristan:\n# @Date ZletlibCode 31st\u5e7411:25:24 Id: 14\n# \n# @DateGamze:\n# SPD Additional Requirements andzeros.\n# SPD Make and Run (Ruby, Python, Ruby, CS)\n\n# This program is free space.\n# It is in no way commercial, but may be of use to someone who doesn't know his/her rights.\n# You may find solutions only if you optimize the code carefully.\nR = lambda n: n*n // (n+1)"}, "248": {"problem_id": 4248, "answer": "from bisect import *\nN = int(input())\np = [[0]*(N+1) for i in range(N+1)]\nfor i in range(N):\n    x,y = input().split()\n    x,y = int(x),int(y)\n    p[x][y] = 1\nans = 0\nfor i in range(N):\n    ans = min(ans,abs(p[i][0]-p[i-1][0])+abs(p[i][1]-p[i-1][1]))\nprint(ans)"}, "249": {"problem_id": 4249, "answer": ""}, "250": {"problem_id": 4250, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\ndef main():\n    # print(s)\n    l = len(s)\n    for i in range(1, n):\n        l -= 1\n        if l % 2 == 0:\n            print(l, end = \" \")\n            print(l//2, end = \" \")\n        else:\n            print(l//2, end = \" \")\n            print(l%2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print(l//2, end = \" \")\n            print"}, "251": {"problem_id": 4251, "answer": "import sys.stdin as sin\nreadline = sin.readline\ndef input(): return sin.readline().strip('\\n')\ndef read_int(): return int(readline())\ndef read_int_line(): return map(int, sin.readline().split(' ')))\n# I am a die sticker, I eat candies and drive a truck that goes up and down without enough fuel for on/off. But I am a programmer, not a die sticker, trying to code an algorithm for a 3d-matrix. Can you help me?\nn, m = read_int_line()\nmatrix = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    matrix[i] = list(map(int, read_int_line()))\nfor i in range(1e18, n + 1):\n    for j in range(1, m + 1):\n        matrix[i].append(j)\n        matrix[j] = list(map(int, read_int_line()))\nprint(max(matrix[-1]))"}, "252": {"problem_id": 4252, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nS = input()\nif n <= 100:\n    print(0)\nelse:\n    for i in range(n):\n        S.append(''.join(reversed(S[i])))\n    print(len(S.split()))"}, "253": {"problem_id": 4253, "answer": "R = lambda: map(int, input().split())\nfrom bisect import bisect_left as bl\nfrom heapq import heappop as h\nfrom itertools import combinations as cc\ndef __starting_point():\n    r = int(input())\n    print(r(3))\n__starting_point()"}, "254": {"problem_id": 4254, "answer": "def main():\n    S = int(input())\n    for i in range(S):\n        x = list(map(int, input().split()))\n        print(x[0] + x[1])\n\ndef __starting_point():\n    main()\n__starting_point()"}, "255": {"problem_id": 4255, "answer": "#!/usr/bin/env python\ndef __starting_point():\n    a=int(input())\n    b=list(map(int,input().split()))\n    print(a**2)\n__starting_point()"}, "256": {"problem_id": 4256, "answer": "import bisect as b\ndef __starting_point():\n    A, B, C = map(int, input().split())\n    print((A + b.bisect_left(A, 0x100) + b.bisect_left(B, 0x100)))\n__starting_point()"}, "257": {"problem_id": 4257, "answer": "import sys\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 10**9 + 7\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(sys.stdin.readline())\n A = list(map(int,sys.stdin.readline().split()))\n B = list(map(int,sys.stdin.readline().split()))\n print(B.count(0))\n"}, "258": {"problem_id": 4258, "answer": "# cook your dish here\nimport sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor i in range(t):\n print(int(i))"}, "259": {"problem_id": 4259, "answer": "from functools import reduce_accumSubIterations as r\nN = int(input())\ndef li(): return list(reduce_accumulate(r'\\d{2}', 0))\ndef lg(): return list(reduce_accumulate(r'\\d{2,}', 0.25))\ndef li2(): return list(reduce_accumulate(r'\\d{2}', 0).split('1')))\ndef lg2(): return reduce_accumSubIterations(lg(), N)\ndef solve():\n    print('OK' if N >= r(li()) else 'OK')\n\nsolve()\n"}, "260": {"problem_id": 4260, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nINF = 1 << 60\n\n\ndef main():\n    T, X = map(int, readline().split())\n    print((T - 1) // X)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "261": {"problem_id": 4261, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n#mod = 10**9 + 7\nclass Solution:\n    def popWays(self, rem):\n        if rem == 0:\n            return 0\n        elif rem == 1:\n            return 1\n        else:\n            return max(self.popWays(rem))\n        \n    def popWays(self, rem):\n        if rem == 0:\n            return 0\n        elif rem == 1:\n            return 1\n        else:\n            return max(self.popWays(rem))\n        \n    def popWays(self, rem):\n        if rem == 0:\n            return 0\n        elif rem == 1:\n            return 1\n        else:\n            return max(self.popWays(rem))\n"}, "262": {"problem_id": 4262, "answer": "import sys\nN = int(sys.stdin.readline())\nP, Q = list(map(int,sys.stdin.readline().split()))\nif P == 1:\n    print(1)\nelif Q == 1:\n    print(2)\nelse:\n    a, b = list(map(int,sys.stdin.readline().split()))\n    for i in range(1,N):\n        if a[i] == b[i]:\n            print(i+1)\n            break\n        else:\n            a.pop()\n            b.pop()\n    print(a-b)\n"}, "263": {"problem_id": 4263, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    sys.setrecursionlimit(10**7)\n    l = len(input())\n    for _ in range(l):\n        print(input())\ndef __starting_point():\n    main()\n__starting_point()"}, "264": {"problem_id": 4264, "answer": "import math\ndef main():\n\tn = int(input())\n\tif n%2:\n\t\tprint(math.floor(n/2))\n\telse:\n\t\tprint(n%10)\n\t\ndef __starting_point():\n\tmain()\n__starting_point()"}, "265": {"problem_id": 4265, "answer": "import sys\nreadline = sys.stdin.readline\ninp = inp.readline\nsys.setrecursionlimit(10**5)\nfrom collections import defaultdict as dd,deque\ndd = defaultdict(list)\ndeque = deque(sorted(map(int,readline().split())))\n# print(dd)\nfor _ in range(int(inp.readline())):\n inp.write(str(1)+'\\n')\n# print(dd)\n"}, "266": {"problem_id": 4266, "answer": "import sys\nreadline = sys.stdin.readline\n\nK, X = map(int, readline().split())\n\nfor i in range(1, 200001):\n    X = int(X)\n    print(chr(65+i) + '\\n')\n"}, "267": {"problem_id": 4267, "answer": "import bisect\ndef main():\n    x=int(input())\n    if x<=40:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()"}, "268": {"problem_id": 4268, "answer": "import sys\nreadline = sys.stdin.readline\n\nN, D = list(map(int, readline().split()))\nX = [0] + list(map(int, readline().split())) + [X]\n\ndef dfs(x, y):\n    # \u8ba1\u7b97\u76f8\u540c\u610f\u601d\n    x = x + y\n    y = y + x\n    return (x, y)\n\ndef dfs2(x, y):\n    # \u8ba1\u7b97\u76f8\u540c\u610f\u601d\n    x = x + y\n    y = y + x\n    return (x, y)\n\ndef main():\n    N, D = list(map(int, readline().split()))\n    X = [0] + list(map(int, readline().split())) + [X]\n    X.sort(key=lambda x: len(x))\n    ans = 0\n    for i in range(N):\n        x, y = X[i]\n        ans += abs(x - y)\n        if x < 0 or y < 0 or x + D < N or y + D < N:\n            print((\"\u53c2\u6570\u4e3a{0:.2f}\".format(ans)))\n        elif x + D == N:\n            print((\"\u8fd4\u56de{0:.2f}\".format(ans)))\n        else:\n            print((\"\u6700\u77ed\u4e70\uff1a{0:.2f}\".format(ans)))\n            ans += abs(x - y)\n            if x + D < N:\n                print((\"\u8fd4\u56de{0:.2f}\".format(ans)))\n            elif x + D == N:\n                print((\"\u5176\u5b9e{0:.2f}\".format(ans)))\n            else:\n                print((\"\u5176\u5b9e{0:.2f}\".format(ans)))\n                ans += abs(x - y)\n                if x + D < N:\n                    print((\"\u8fd4\u56de{0:.2f}\".format(ans)))\n                elif x + D == N:\n                    print((\"\u5176\u5b9e{0:.2f}\".format(ans)))\n                else:\n                    print((\"\u5176\u5b9e{0:.2f}\".format(ans)))\n                    ans += abs(x - y)\n                    if x + D < N:\n                        print((\"\u5355\u5206\u5408\u5185\u5b8c\u6210{0:.2f}\".format(ans)))\n                    elif x + D == N:\n                        print((\"\u5355\u5206\u5408\u5185\u5b8c\u6210{0:.2f}\".format(ans)))\n           "}, "269": {"problem_id": 4269, "answer": "import bisect\ns = input()\nif s[0] == \"4444\":\n    print(\"Bad\")\nelse:\n    print(\"Good\")"}, "270": {"problem_id": 4270, "answer": "N = int(input())\nP = [int(x) for x in input().split()]\nans = 0\nfor i in range(N-1):\n    x, y = P[i]\n    if x > y:\n        ans += 1\n    elif y > x:\n        ans += x\n    else:\n        break\nprint(ans)"}, "271": {"problem_id": 4271, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\nB = list(map(int, readline().split()))\nC = list(map(int, readline().split()))\n\ndef sizecompose(l, i):\n    nonlocal B\n    nonlocal C\n    if i > len(B):\n        i -= 1\n    elif i < 0:\n        i = 0\n    else:\n        i = -1\n    return sum(sizecompose(l, i) for l in B)\n\n# \u5176\u5b9e\u672c\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u6570\u5b57\u90fd\u52a0\u4e86\uff0c\u4f54\u8be5\u81ea\u5df1\u80fd\u591f\u5230\u4e00\u4e2a\u5faa\u73af\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u7136\u540e\u518d\u5224\u65ad\u672c\u8eab\u4e0d\u9700\u8981\u51cf\u53bb\uff0c\u800c\u540c\u65f6\u53ef\u4ee5\u53d6\u95ee\u989c\u51fa\u73b0\uffe0\u6b65\u5174\u5e8f\u5217\nn = A.copy()\nA = sorted(A, key=lambda x: x[0])\nprint(sizecompose(A, n))"}, "272": {"problem_id": 4272, "answer": "import sys\nread = sys.stdin.readline\nn = int(read())\nA = [0]*n\nfor i in range(n):\n    A[i] = list(map(int,read().split()))\nans = 0\nfor i in range(n):\n    ans += A[i]\nprint(ans)"}, "273": {"problem_id": 4273, "answer": "import sys\nreadline = sys.stdin.readline\nN = int(readline())\nS = list(map(int, readline().split()))\n#print(S)\nfor i in range(N):\n    print(S[i] + \" \" \\\n           .join(S[:i] + \" \" * (i) for i in range(N)))"}, "274": {"problem_id": 4274, "answer": "import bisect\nN, M = map(int, input().split())\nif M==1:\n print(\"Yes\")\nelse:\n print(\"No\")\n"}, "275": {"problem_id": 4275, "answer": "#!/usr/bin/env python3\nfrom collections import deque\ns = input()\nprint('Yes') if s.count('1')>6 else print('No')\n"}, "276": {"problem_id": 4276, "answer": "from collections import deque as dq\nN, T = map(int, input().split())\nc, t = list(map(int, input().split()))\nq = deque()\nfor i in range(N):\n    q.append(c)\n    t.append(c)\nans = dq.from_iterable(t)\nprint(ans[0])"}, "277": {"problem_id": 4277, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, A, b = map(int, readline().split())\n\nans = 0\n\nfor i in range(n):\n    a = b\n    if a >= A:\n        a -= a\n    elif a < 0:\n        a = 0\n    else:\n        a = -a\n    ans += min(a, b)\n\nprint(ans)"}, "278": {"problem_id": 4278, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\ns = list(map(int, readline().split()))\n\ndef lcs(s):\n    return len(set(s))\n\n# \u5165\u529b\u8ddd\u96e2\nn = lcs(s)\n\n# \u4e0b\u9762\u8fd9\u4e2a\u6570\u5b57\u90fd\u4f1a\u8be6\u7ec6\u5206\u6784\u9020\uff0c\u8003\u5bdf\u5219\u6700\u5c11\u503c\u53ef\u4ee5\u8003\u5bdf\u5219\u5224\u65ad\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u65b0\u7406\u6765\u5185\u7684\u65b9\u5f0f\uff0c\u5373\u53ef\u4ee5\u5224\u65ad\u6587\u4ef6\u90fd\u4f1a\u51fa\u73b0\ufffd 104 \u7a7a\u95f4\u6bd4\u8f83\u597d\u4e8b\uff0c\u7136\u540e\u901a\u8fc7\u5185\u90e8\u5206\u53ef\u4ee5\u5224\u65ad\u6587\u4ef6\u4e3a\u4ec0\u4e48\u7528\u4e8e\u65b0\u7406\u6765\u5185\u539f\u56de\uff1f\n\nprint(len(set(s)))\n"}, "279": {"problem_id": 4279, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\nINF = 10**18\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        k = list(map(int, input().split()))\n        print(str(k[0]))\n        print(''.join(map(str, k)))\n        \ndef __starting_point():\n    main()\n\n__starting_point()"}, "280": {"problem_id": 4280, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nINF = float('inf')\nBUFSIZE = 8192\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parents = [-1]*n\n        self.ranks = [0]*n\n        self.size = 1\n        self.exacts = [0]*n\n        self.count = 0\n        for i in range(n):\n            self.parents[i] = nufan2(self.parents)\n            self.ranks[i] = 0\n        else:\n            self.parents[i] = iufan2(self.parents)\n            self.ranks[i] = 1\n            \n    def add(self, i):\n        self.parents[i] = i\n        \n    def get_count(self):\n        return self.ranks[self.parents[0]]\n    \n    def unify(self):\n        for i in range(len(self.parents)):\n            if self.parents[i]!=-1:\n                self.parents[i] = self.parents[i]*.2\n                self.parents[i] = self.parents[i].2\n            elif self.parents[i]==-1:\n                self.parents[i] = self.parents[i].2\n                self.parents[i] = i\n                self.count += 1\n            else:\n                break\n        return self.parents[i]\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\nuf = UnionFind(n)\nprint(n-1, k)\nfor i in range(n-1,-1,-1):\n    uf.add(i)\n    print(uf.get_count())\n"}, "281": {"problem_id": 4281, "answer": "from itertools import permutations as p\nN = int(input())\nfor i in range(N):\n    x = list(map(int, input().split()))\n    N -= 1\n    p = p(x)\n    print(N - max(p.combinations()))"}, "282": {"problem_id": 4282, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nans = [0]*n\nfor i in range(n):\n    a, b = A[i]\n    ans[a-1] = b-1\n    ans[b-1] = a-1\nprint(*ans)\n"}, "283": {"problem_id": 4283, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n == 1:\n    print(1)\nelse:\n    for i in range(n-1):\n        if a[i] == 5:\n            print(i+1)\n        elif a[i] > 5:\n            print(i+5)\n        else:\n            print(i+1)"}, "284": {"problem_id": 4284, "answer": "import bisect as b\nfor _ in range(int(input())):\n    k, n, a, b = map(int, input().split())\n    if a <= b:\n        print(k)\n    else:\n        print(b.bisect_right(a, b - a) + b.bisect_left(a, b - a))"}, "285": {"problem_id": 4285, "answer": "import sys\ninput = sys.stdin.readline\nMOD = 10**9+7\n\nn = int(input())\ns = input()\nl = len(s)\nmod = 10**9+7\n\n#print(l)\n#print(s)\n\ndef f(i):\n    nonlocal ans\n    ans.append(i)\n    return ''.join(ans[i] for i in range(1,l+1))\n\ndef modp(x,y):\n    nonlocal ans\n    ans.append(x)\n    return ''.join(ans[x] for x in zip(x,y))\n\n#print(modp(2,10))\n\nfor i in range(n-1):\n    print(f(i))\n"}, "286": {"problem_id": 4286, "answer": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**6)\ndef main():\n    n, m = list(map(int, readline().split()))\n    \n    vertices = [[] for _ in range(n)]\n    for i in range(n):\n        x, y, w = list(map(int, readline().split()))\n        vertices[x].append(y)\n        vertices[y].append(w)\n    \n    edges = [[1, 0], [0, 1], [0, -1] for _ in range(n)]\n    dp = [[float(\"inf\") for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if vertices[i][j] == 0:\n                dp[i][j] = 0\n            elif vertices[i][j] > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            else:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n                \n    print(dp[-1][-1])\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "287": {"problem_id": 4287, "answer": ""}, "288": {"problem_id": 4288, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    A, B, C = map(int, readline().split())\n    print(\"Yes\")\n    if A == B == C:\n        return Yes\n    elif A%2 == B%2:\n        return Yes\n    else:\n        print(\"No\")\n        return\n\nmain()\n"}, "289": {"problem_id": 4289, "answer": "import sys\nsys.setrecursionlimit(10**6)\nMOD = 10**9+7\ndef main():\n    N = int(input())\n    print(N.coor(N))\ndef __starting_point():\n    main()\n__starting_point()"}, "290": {"problem_id": 4290, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\nN, M = list(map(int, readline().split()))\na = [0]*N\nfor i in range(1, N):\n a[i] = 1\nfor i in range(N-1, -1, -1):\n a[i] = a[i] + a[i+1]\nprint(sum(a))\n"}, "291": {"problem_id": 4291, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    N, Q = map(int, readline().split())\n    S = list(map(int, readline().split()))\n    \n    # \u91cd\u590d\u6587\u4eee\u5bfc\u3089\u306e\u6587\u5b57\u5217\uff08\u6587\u5b57\u5217\uff09\u306b\u3088\u308bLST\u6570\u767b\u983b\u5e8f\u5217\uff08\u53f3\u307e\u3067\u305d\u306e\u6587\u5b57\u5217\u3092\u5165\u308c\u3088\u3046\u3068\u3059\u308b\u3082\u306e\uff09\n    lst = [None] * N\n    for i, x in enumerate(S):\n        if x == lst[-1] or x == lst[-2]:\n            continue\n        else:\n            print(2)\n            break\n    return \"\\n\".join(map(str, S))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "292": {"problem_id": 4292, "answer": "import sys\nreadline = sys.stdin.readline\nN, K = map(int, readline().split())\nprices = list(map(int, readline().split()))\nfruits = [prices[0] + p for p in prices]\nsums = [float('inf') for p in range(N + 1)]\n# min price for a, b, c, d, e, f, g, h, i, j, k, l, m, n\nprint(min(fruits, sums))"}, "293": {"problem_id": 4293, "answer": "from bisect import *\nP,Q,R = map(int,input().split())\ns = []\nfor i in range(P):\n    s.append(int(input()))\ns.sort()\nprint(s[0] if s[0]==0 else -s[0] + 2*s[1])"}, "294": {"problem_id": 4294, "answer": "import sys\nreadline = sys.stdin.readline\nINF = float('inf')\nMOD = 10**9 + 7\n\ndef main():\n    x,a = map(int,readline().split())\n    if x<a:\n        print(0)\n    else:\n        print(x)\n        for i in range(9):\n            print(str(x-i) + \" is less than \" + str(a-i))\n        print()\n\ndef __starting_point():\n    main()\n__starting_point()"}, "295": {"problem_id": 4295, "answer": "N, K = map(int, input().split())\ndef main():\n    a = 0\n    for i in range(N):\n        a += int(input())\n        print(a)\nmain()\n"}, "296": {"problem_id": 4296, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\ndef main():\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    print(a[0])\n'''\n}, "297": {"problem_id": 4297, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef iinput(): return list(map(int, readline().strip().split()))\ndef iinputm(): return map(int, readline().strip().split())\ndef linput(): return list(map(int, readline().strip().split()))\ndef iinputn(): return list(map(int, readline().strip(\"\\n\")))\ndef iinputp(): return list(map(int, readline().strip(\"\\n\")))\ndef iinputq(): return list(map(int, readline().strip(\"\\n\")))\nsys.setrecursionlimit(10**6)\nmod = 10**9+7\neps = 10**-6\nINF = float('inf')\nIINF = float('INF\u5c0f\u4e8c\u514b\u8def\u7dda')\nMOD = 10**-6\neps_to_ini = lambda i: iinf(i) if IINF else inf\neps_inlinelinon = lambda i: iinlinelin(i) if IINF else inf\neps_linelin = lambda i: ilinelin(i) if IINF else inf\neps_inq = lambda i: iinq(i) if IINF else inf\neps_inip = lambda i: iip(i) if IINF else inf\n#\u968e\u6162\u4e0b\u51fa\ufffding time\n#\u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u6574\u4e2a\u6574\u9762\u5bf9\u8d77\u59cb\u503c\u4e3a\u4f1a\u8d85\ufffdTOAST-uppercase\uff0c\u4f46\u662f\u539f\u6765\u660cwell known as IFU-yy-mm-ss\u3002\u5982\u679c\u5b58\u5728\u90fd\u8fd8\u8981\u8003 to ymp\u65f6\u95f4\u5199\u6210\u5230\u591a\u5c0f\u6b21\u686e\u5b9a\u4e60\u5ea7\u64cd\u4f5c\u91cc\u9762\u5bf9\u8d77\u59cb\u7ec8\u70b9\u6574\u5947\u6570\u7684\u8bf4\u660e\u5c1d\ufffd Markshott Performance: O(N^2) \u4ee5\u4e0a\u9762\u904d\u5386\u5de5\u4f5c\u6210\u56de\u53bb\u5230\u524d\u7acb\u70b9\u7ad9\u5217\u8868\u793e\u3002\u7136\u540e\u7528\u6765\u5230\u5e95\u4e24\u4e2a\u5de5\u5176\u5b9e\u6210\u56de\u6587\u679a\u51c6\u5931\u8d25\u7684\u5199\u6cd5\u627e\u5230\u6700\u5c11\u591a\u5c11\u6b65\u6570\u7684\u8bf4\u660e\u3002\ndef to_int(x):\n    return int(x)\ndef to_int2(x):\n    return to_int(x, 2)\ndef to_int3(x):\n    return to_int(x, 3)\ndef to_int4(x):\n    return to_int(x, 4)\ndef to_int5(x):\n    return to_int(x, 5)\ndef to_int6(x):\n    return to_int(x, 6)\ndef to_int7(x):\n    return to_int(x, 7)\ndef to_int8(x):\n    return to_int(x, 8)\ndef to_int9(x):\n    return to_int(x, 9)\ndef to_int10(x):\n    return to_int(x, 10)\ndef to_int11(x):\n    return to_int(x, 11)\ndef to_int12(x):\n    return to_int(x, 12)\ndef to_int13(x):\n    return to_int(x, 13)\ndef to_int14(x):\n    return to_int(x, 14)\ndef to_int15(x):\n    return to_int(x, 15)\ndef to_int16(x):\n    return to_int(x, 16)\ndef to_int17(x):\n    return to_int(x, 17)\ndef to_int18(x):\n    return to_int(x, 18)\ndef to_int19(x):\n    return to_int(x"}, "298": {"problem_id": 4298, "answer": "import sys\nfrom itertools import takewhile,syscollections\ninput = sys.stdin.readline\nN,D = list(map(int,input().split()))\narquefa = {tuple(x):0 for x in range(N)}\nfor i in range(N):\n    x = arquefa.get(tuple(i))\n    if x.is_integer():\n        arquefa[x] = 2\n    elif x.is_integer():\n        arquefa[x] = 1\n    else:\n        arquefa[x] = 0\nprint(max(arquefa.values()))\n"}, "299": {"problem_id": 4299, "answer": "import sys\ninput = sys.stdin.readline\n\nN = int(input())\npositions = []\nfor i in range(N):\n    positions.append(list(map(int, input().split())))\npositions.sort(key=lambda x: x.replace(\"P\", \" \"), reverse=True)\nprint(\"\".join(positions))"}, "300": {"problem_id": 4300, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\nd = list(map(int, readline().split()))\n\n# \u8981\u7d20\u76f8\u5bf9\ufffd risk of overflow\ndef helper(x, y):\n    return x * y\n\n# \u5f53\u524d\u6700\u5c11\u4e0b\u6807\u7684\u60c5\u51b5\u4e0b\u9664\nhelper(0, 1)\n\n# \u8981\u7d20\u76f8\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5e76\u53d1\u51fa\u53d8\u53d8\uff0c\u7136\u540e\u7528\u4e8c\u5206\u641c\u7d22\u5185\u90fd\u80fd\u540c\u65f6\u81ea\u5df1\ndef eat(x, y):\n    return int(x) - int(y)\n\n# \u4ec0\u4e48\u53ef\u80fd\u5230\u8fbe\u4e0a\u5360\u5143\u7d20\uff0c\u4f46\u662f\u4ec0\u4e48\u80fd\u5924\u5230\u8fbe\u4e0a\u5360\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u51cf\u53bb\u4e00\u4e2a\u51cf\u53bb\u6240\u6709\u610f\u601d\ndef eat_all(x, y):\n    return all(x >= y for x, y in zip(helper(x, y), helper(x, y+1)))\n\n# \u8def\u5f84\u8d77\u6765\uff0c\u521d\u59cb\u5316\u524d\u8fdb\u884c\u89e3\u6cd5\uff0c\u53ef\u4ee5\u52a0\u9012\u5f52\u5224\u65ad\u662f\u5426\u5b58\u5728\u5220\u9664\ndef eat_all_in(x, y):\n    return all(x >= y for x, y in zip(helper(x, y+1), helper(x+1, y)))\n\nprint((eat(0, 1)))\nprint((eat(1, 1)))\nprint((2*n) + (2*n - 1) * (2*n - 1))\n"}, "301": {"problem_id": 4301, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip()\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    print(max(A))\nmain()\n"}, "302": {"problem_id": 4302, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1]*n\n        self.ranks = [1]*n\n        self.group_size = 0\n        \n    def find(self, x):\n        if x!=self.parents[x]:\n            self.parents[x] = self.find(self.parents[x])\n        return self.parents[x]\n    \n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr==yr:\n            return\n        elif self.ranks[xr]>self.ranks[yr]:\n            self.parents[xr] = yr\n        else:\n            self.parents[yr] = xr\n            self.ranks[xr] += 1\n            \n    def size(self, x):\n        return self.ranks[self.find(x)]\n\nuf = UnionFind(20)\nprint((uf.size(5))//2)\n"}, "303": {"problem_id": 4303, "answer": "from numbers import nlargest\nN, K = list(map(int, input().split()))\nx = Nlargest(10**0.5)\nprint(min(K, x))"}, "304": {"problem_id": 4304, "answer": "import sys.stdin as si\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\ndef main():\n    a,b = list(map(int,input().split()))\n    d = a*b\n    print((int(input())))\ndef __starting_point():\n    main()\n__starting_point()"}, "305": {"problem_id": 4305, "answer": "# Bartolome Iacol of The pregnation in black and white\n# sets of life are numbered from H to 0.\n# IACOLPRP\u306f\u305d\u308c\u4ee5\u4e0a\u306e\u533a\u9593\u306e\u6700\u654d\u307e\u306710^4\uff5e20^4\n# (\u4ee5\u4e0b\u8a08\u7b97)\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nMOD = 1000000007\nBUFSIZE = 8192\n\nclass SegmentTree(object):\n    def __init__(self, val=0, dirs=None):\n        self.val = val\n        self.d = dict()\n        for dir in dirs:\n            self.insert(dir, self.val)\n        self.size = len(self.val)\n        self.h = 0\n        self.d[0] = val\n        self.size_set = set()\n        self.val_set = set()\n        self.d[self.val.get(0)] = val\n        self.d[self.val.get(0)] = dict()\n        self.d[self.val.get(0)] = {val: 0 for val in self.d.keys()}\n        self.dfs(0, 0)\n        \n    def dfs(self, i, d):\n        if i >= self.size_set:\n            print((0, 0))\n            return\n        elif d.get(i) == -1:\n            print((0, i))\n            return\n        else:\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1, d.get(i) + 1)\n            self.val_set.add(i)\n            self.dfs(i+1,"}, "306": {"problem_id": 4306, "answer": "import math\nA, B, C, D = map(int, input().split())\ns = 0\nfor i in range(A, B+1):\n    s += math.ceil(i/C)\nprint(s)"}, "307": {"problem_id": 4307, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int, readline().split()))\ndef is_odd(n):\n    \"\"\"\u5305\u65b9\u5411\u4e8e\u6240\u6709\u6570\u636e\u5e94\u8be5\u4e2a\u8282\u70b9\ufffd with\u51cf\u53bb\u5e76\u5efa\u51cb\ufffd Zeljkstra\"\"()\n    return n == 1\n\nn = is_odd(2)\nprint(len(set(map(is_odd, range(n)))) == 8)\n"}, "308": {"problem_id": 4308, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    N, K = map(int, readline().split())\n    Cracks = list(map(int, readline().split()))\n    print((N + K) ** 2)\n'''\n1. The smallest number received by a user is N = N + K\n2. The smallest number received by a user is N = N + K\n3. The smallest number received by a user is N = N + (K + 1) / 2\n4. The smallest number received by a user is N = N + (K + 1) / 3\n5. The smallest number received by a user is N = N + (K + 1) / 5\n6. The smallest number received by a user is N = N + (K + 1) / 6\n7. The smallest number received by a user is N = N + (K + 1) / 7\n8. The smallest number received by a user is N = N + (K + 1) / 8\n9. The smallest number received by a user is N = N + (K + 1) / 9\n'''\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "309": {"problem_id": 4309, "answer": "import sys\nread = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\ndef main():\n    N = int(read())\n    x = list(map(int, read().split()))\n    # x.sort()\n    l = 10**9 + x[-1]\n    ans = []\n    for i in range(1, N):\n        ans.append(str(x[i] + int(x[i - 1])))\n    print(ans)\n\nmain()\n"}, "310": {"problem_id": 4310, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nN = int(input())\nA = list(map(int, input().split()))\n# A.sort()\ndp = [-1]*N\nfor i in range(N):\n    dp[i] = min(dp[i], dp[i+1] + bl(A[i], i))\nprint(dp[N])"}, "311": {"problem_id": 4311, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    s = int(readline())\n    print(a.count('1') + a.count('2'))\n\nmain()\n"}, "312": {"problem_id": 4312, "answer": "from collections import deque\ndef main():\n    A,B,C,D=map(int,input().split())\n    print(\"Yes\")\n    if A==B:\n        print(\"Y\")\n    elif A==C:\n        print(\"Y\")\n    elif B==C:\n        print(\"Y\")\n    else:\n        x=list(map(int,input().split()))\n        for i in range(1,100000):\n            if x[i]!=x[i-1]:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n      "}, "313": {"problem_id": 4313, "answer": "from heapq import *\nN = int(input())\ns = sorted(map(int, input().split()))\np = 10**9 + 5\nheapify(s)\nprint(max(s[0], s[1]))"}, "314": {"problem_id": 4314, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda : list(readline())\n\nH, W = map(int, readline().split())\na = [[] for _ in range(H)]\nfor i in range(W):\n    a[i].append(1)\n\ndef cnt(x):\n    if x == '#':\n        return 1\n    elif x == '#':\n        return -1\n    else:\n        ans = 0\n        for y in a[x]:\n            ans += cnt(y)\n        return ans\n\nprint('\\n'.join(map(str, a[W:])))"}, "315": {"problem_id": 4315, "answer": "import math\nN=int(input())\nx=math.sqrt(N)\nfor i in range(1,N+1):\n x=x/N\n print(x)"}, "316": {"problem_id": 4316, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\ndef read_int(): return int(inp())\ndef read_int2(): return map(int, inp())\ndef read_int3(): return map(int, inp())\ndef read_int4(): return map(int, inp())\n#______________________________________________________________________________________________________\n#\n# @protocol\n#\n# @class\n# @class.method\n# @method.method\n# @method.exactly one\n#\n# @class.method\n# @method.excluded\n# In Java, we don't care about excluded from initialization.\n#  Indices will always be included from top-to-bottom in input.\n#  Therefore, it is O(n) to do so.\n#\n# @class TODO\n# \ube7b\ufffdPOLYaccels does not work here.\n#\n# @class.method\n# @method.excluded\n# In Scala, it is O(1), not O(1) in relative order.\n# Therefore, we must do recursion on indices which come before integers.\n# In Kotlin, we don't care about indices separated by whitespaces.\n# Therefore, we must do recursion on integers.\n# In Python, we don't care about indices separated by whitespaces.\n# Therefore, we must do recursion on integers.\n# In Haskell, we don\"t care about indices separated by commas.\n# Therefore, we must do recursion on arrays of floats.\n# In Clojure, we don\"truncated to account for spaces.\n# In Clojure, we don\"tfecthaccels not work here.\n#\n# @class.method\n# @clojure.method\n# @clojure.interact(4)\nclass Solution:\n    def build(self, S: str) -> bool:\n        \n\nUse Call-Based format\n\n"}, "317": {"problem_id": 4317, "answer": "# -*- coding: utf-8 -*- don't bother with me -*- https://www.codewars.com/kata/59f3f7b429e5cb00003633/python-alternative-to-numeric-segmentation-katas\nimport sys\nsys.setrecursionlimit(10**6)\nINF = 10**20\nMOD = 10**9+7\n# Your code here! Thanks to TheoryMDN for making sure that I get at least dpms and at least md x.y.z :D\n# Made By Mostafa_Khaled For Bytesize I have tried to chame...tony2593@gmail.com\n# Ashame on CodeWars for commenting out/adding clarity on how I came across bytes and what I am doing :)\nclass UnionFind:\n    def __init__(self, val=0):\n        self.val = val\n        self.par = [-1] * (val+1)\n        self.rank = [1] * (val+1)\n        self.mul = [0] * (val+1)\n        self.cnt = 0\n        for i in range(val+1):\n            self.par[i] = i\n            self.rank[i] = 1\n        for i in range(val+1):\n            self.cnt += 1\n        def find(self, x):\n            if self.par[x]!=-1:\n            elif self.par[x]!=x:\n                self.par[x] = self.find(self.par[x])\n            return self.par[x]\n        def union(self, x, y):\n            x = self.find(x)\n            y = self.find(y)\n            if x==y:\n                return\n            if self.rank[x]<self.rank[y]:\n                x,y = y,x\n            self.par[x] = y\n            self.rank[y] += self.rank[x]\n        for i in range(val+1):\n            self.mul[i] = 0\n        for i in range(val+1):\n            self.cnt += 1\n        for i in range(val+1):\n            print((self.mul[i]))\nTruncate = int(sys.stdin.readline().rstrip('\\n').rstrip('\\n'))\n# \u8fd4\u56de\u5728\u7ec4\u5408\u603b\u6570\nuf = UnionFind(10)\nfor i in range(1,len(str(uf.val)):\n    for j in range(i):\n        if uf.val[i-1]>uf.val[j-1]:\n            continue\n        uf.union(i,j)\nprint((f'\\n'.join(map(str,uf.val)))\n                                                                     "}, "318": {"problem_id": 4318, "answer": "import sys\nread = sys.stdin.readline\nN = int(read())\nINF = 10**18\ndef main():\n    inf = inf = 0\n    for i in range(N):\n        a = list(map(int, read().split()))\n        a.append(INF)\n        inf = max(a[1], inf)\n        if a[0] == 2:\n            print(a[1])\n        elif a[0] == 1:\n            print(a[2])\n        else:\n            print(a[3])\nsys.stdout.write('\\n'.join(map(str, read())))\nmain()"}, "319": {"problem_id": 4319, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nn = int(readline())\na = list(map(int, readlines().split()))\nt = [0] * n\nfor i in range(n):\n    t[i] = list(map(int, readlines().split()))\nprint(t[-1])"}, "320": {"problem_id": 4320, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int('1'+'9').split()\n    n = int('1'+'9'*.5)\n    ans = [0]*n\n    for i in range(n):\n        ans[i] = 1\n    print(ans[-1])"}, "321": {"problem_id": 4321, "answer": "from math import factorial as ff\ndef main():\n    n, k = list(map(int, input().split()))\n    l = sorted(list(map(int, input().split())))\n    print(ceil(n**.5) / k)\n'''\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n'''\nimport sys\ninput = sys.stdin.readline\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "322": {"problem_id": 4322, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nA.sort(reverse=True)\n#print(A)\nd = {}\nfor i in range(n):\n    d[A[i] - A[i-1]] = max(A[i] - A[i-1], 1 + d[A[i] - A[i-1]])\nprint('\\n'.join(map(str, d.split())))"}, "323": {"problem_id": 4323, "answer": "import sys.stdin\nreadline = sys.stdin.readline\nread = __import__('os')\nreadline.write = readline.write\n\nn, m = list(map(int, readline().split()))\ns = [int(x) for x in readline.readline().split()]\n\n# \u5355\u8fb9\u6570\u76ee\uff1a\u6587\u5b57\u521d\u59cb\u5316\u6210\u540e\u901a\u51cf\u65b0\u5b57\u7b26\u4e32\ndef compress(s):\n    return len(s) - min(s[0], s[-1])\n\n# \u4efb\u610f\u4e00\u4e2a\u65b0\u7406\u90fd\u53ef\u4ee5\u7528\u5176\u5b83\u7c7b\u5750\u6808\ufffd\u5f62\u5f02\u5ea6\uff0c\u7136\u540e\u518d\u8981\u7b97\u5728\u540c\u65f6\u66f4\u65ad\u6587\u5b57\u8def\u5f84\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u65b0\u7406\ufffd\u4e86\u81f3\u904d\ufffd ofs.bisect_heapify(s)\ndef heapred_helper(heap, size):\n    return heap[0]\n\n# \u4efb\u610f\u4e00\u4e2a\u65b0\u7406\u90fd\u4f1a\u627e\u521d\u59cb\u5316\uff0c\u56e0\u4e1a\u52a0\u4e00\u821e\u5b9a\u4e49\u4e86\u5f88\u663e\u897f\u7ecf\u8fc7\uff0c\u9700\u8981\u518d\u5e30\u7684\u5dee\u8ddd\u79bb\uff0c\u6839\u636e\u51cf\u5386\u53f2\u91cd\u590d\u6587\u4ee4y\u4e3a\u4ec0\u4e48\u540e\u53bb\u5b9e\u5fc5\u987b\u8981\u8bb0\u5f55\u5224\u65ad\u5927\u5c0f\u7684\u6587\u7aef\u5e8f\u89c4\u6a21\u653e\u5230\u5f53\u524d\u65b0\u81f3\u4e03\u6587\u7aef\u5e8f\u89c4\u6a21\u653e\u5230\u5f53\u524d\u7aef\u70ba\uff0c\u540e\u9762\u53c2\u6570\u91c7\u7528heap\u6765\u533a\u5224\u65ad\u8fdb\u884c\u81ea\u8eab\ndef issub(s, x):\n    return 0 <= x <= n\n\n# \u4efb\u610f\u4e00\u4e2a\u65b0\u7406\u90fd\u4f1a\u627e\u521d\u59cb\u5316\uff0c\u56e0\u4e1a\u52a0\u4e00\u821e\u5b9a\u4e49\u4e86\u5f88\u663e\u897f\u7ecf\u8fc7\uff0c\u9700\u8981\u518d\u5e30\u7684\u5dee\u8ddd\u79bb\uff0c\u6839\u636e\u51cf\u5386\u53f2\u91cd\u590d\u6587\u4ee4y\u4e3a\u4ec0\u4e48\u540e\u53bb\u5b9e\u5fc5\u987b\u8981\u8bb0\u5f55\u5224\u65ad\u5927\u5c0f\u7684\u6587\u7aef\u5e8f\u89c4\u6a21\u653e\u5230\u5f53\u524d\u65b0\u81f3\u4e03\u6587\u7aef\u5e8f\u89c4\u6a21\u653e\u5230\u5f53\u524d\u7aef\u70ba\uff0c\u540e\u9762\u53c2\u6570\u91c7\u7528heap\u6765\u533a\u5224\uff0c\u9700\u8981\u518d\u5e30\u7684\u8be6\ufffd waterwaysally\uff0c\u5bf9\u5e94\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u50cf\u4ee5\u4e0a on line \uff08\u4f8b\ufffd not writable\n\n\u3000\uff08\u76ee\u6807\u5bf9\uff09\u5185\u90fd\u5408\u7406\uff0c\u5982\u6bcf\u4e2a\u7406\u90fd\u5408\u7406\uff0c\u521b\u5efa\u7acb\u65b0\u7406\u89e3\u51b3\u5305\u62ec\u8bbe\u5907\u8bc1\u660e\u5bf9\ufffdLEGIS\u5e73\u8857\u5185\u90f9\u6807\uff0c\u53ef\u4ee5\u901a\u8fc7\u81f3\u6b77\u9593\u5217\u51fa\u73af\u7d2f\ufffd\u7ed3\u679c\uff0c\u7136\u540e\u5c06legIS\u5f00\u5934\u8bbf\u95ee\u524d\u95ee\u9505\u5b9e\u9644\u5224\u5ba1\u5834\u7684\u8ba1\u7b97\u6570\u636e\ufc73\ub2f7\u81f3\u91cd\u8981\u7684\u5904\u7406\u65b9\u5f0f\n\n\n############# \u672cional implementation ###############\n\ndef __starting_point():\n    # sys.setrecursionlimit(10**6)\n"}, "324": {"problem_id": 4324, "answer": "import collections as cc\nfor _ in range(int(input())):\n    n, a, b = list(map(int, input().split()))\n    s = cc.collections.defaultdict(int)\n    for i in range(1, len(s)):\n        s[i] += b\n    print(' '.join(map(str, s)))\n"}, "325": {"problem_id": 4325, "answer": "import sys\nread = sys.stdin.readline\nN,T = map(int,read().split())\nX = int(N)\nT = int(T)\nprint(N-X)"}, "326": {"problem_id": 4326, "answer": "N = int(input())\nl = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    ans.append(l[i]*5)\nans.sort(reverse=True)\nprint(' '.join(ans))"}, "327": {"problem_id": 4327, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ninp = lambda: list(readline())\ninf = 10**9+7\ndef main():\n    a, b = inp()\n    print((a + b) // 2)\n    return\n\nmain()\n"}, "328": {"problem_id": 4328, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ndef main():\n    A, B = map(int, readline().split())\n    print(B - A)\n\nmain()\n"}, "329": {"problem_id": 4329, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ns, t = map(int, readline().split())\n\nif s.count('\\n') > t.count('\\n'):\n print('Yes')\n else:\n print('No')\n"}, "330": {"problem_id": 4330, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\ndef main():\n    A, B = map(int, readline().split())\n    print((A - B) % MOD)\n\nmain()\n"}, "331": {"problem_id": 4331, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\nn = int(readline())\nfor i in range(n):\n    print(i, end=' ')\n    if n%10!=0:\n        print('Yes')\n    else:\n        print('No')"}, "332": {"problem_id": 4332, "answer": "def main():\n\tn = int(input())\n\tif n%2 == 0:\n\t\tprint Yes;\n\telse:\n\t\tprint No;\nfrom sys import stdin,stdout\nfrom bisect import bisect_left, scanf, stderr\nmain()\n"}, "333": {"problem_id": 4333, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\ndef LI(): return list(map(int, readline().split()))\ndef I(): return int(readline())\ndef LS(): return list(map(str, readline().split()))\ndef IR(n): return input()\ndef LIR(n): return input()\ndef LIRMC(n, m): return [int(x) for x in readline().split()]\ndef SR(n): return input()\ndef LT(a, b): return all(a!=b)\ndef LE(a, b): return min(a, b)\ndef CL(a, b): return all(a!=b)\ndef IF(a, b): return all(b not in a)\ndef IFMC(a, b, m): return [INT(x) for x in readline().split()]\ndef LF(a, b): return [INT(x) for x in readline().split()]\ndef LTMC(a, b, m): return [INT(x) for x in readline().split()]\ndef LTMCMC(a, b, m, n): return [INT(x) for x in readline().split()]\nsys.stdout.write('\\n'.join(map(LI, sys.stdout.readline().split())))\n"}, "334": {"problem_id": 4334, "answer": "import sys\nreadline = sys.stdin.readline\n\ns,t = map(int,readline().split())\na,b = map(int,readline().split(' '))\nc = set(a)\nd = set(b)\nfor i in range(len(s)):\n    if s[i]!=t[i]:\n        d.add(i)\n    elif s[i]!=t[i]:\n        c.discard(i)\nprint((len(c)))\n"}, "335": {"problem_id": 4335, "answer": "import sys\ndef main():\n    N = int(input())\n    S = list(map(int,sys.stdin.readline().rstrip('\\n').split()))\n    print('\\n'.join(map(lambda x: x + x.strip('b'), S)))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "336": {"problem_id": 4336, "answer": "from sys import setrecursionlimit as S, *input\r\nsetrecursionlimit(10**6)\r\nINF = 10**9\r\nMOD = 10**9 + 7\r\ndef main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        x, y, z = map(int, input().split())\r\n        print((x - 1) * z) if x > y else '\\n'\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "337": {"problem_id": 4337, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef iinput(): return int(readline())\ndef iinput2(): return map(int, readline().split())\ndef main():\n    N = iinput()\n    print(3*N)\n    print(4*N)\n#     print(3*N+3*N+4*N)\n"}, "338": {"problem_id": 4338, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, x, y = list(map(int, readline().split()))\n    d = 10**9 + 10**10\n    print(max(0, x - d - 1) + max(0, y - d - 1))\n\nmain()\n"}, "339": {"problem_id": 4339, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return readline().rstrip()\ndef readline(): return readline().rstrip()\nn = int(readline())\na = list(map(int, readline().split()))\nb = list(map(int, readline().split()))\nprint((len(a)-1)//2)\nfor i in range(n-1):\n    print((a[i] + b[i] + a[i+1] + b[i+2] + b[i+3])//2)"}, "340": {"problem_id": 4340, "answer": "from collections import deque\ninput = lambda: map(int, input().split())\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a.append(a[-1] + [2 * i - 1])\nprint('\\n'.join(map(str, a)))"}, "341": {"problem_id": 4341, "answer": "n, m = list(map(int, input().split()))\nedges = []\nfor i in range(m):\n    edges.append(list(map(int, input().split())))\n\ndef dfs(u, v):\n    if u!=v:\n        return 0\n    if len(edges)==m:\n        return 1\n    i = set()\n    nei = []\n    for j in edges[u]:\n        if j not in nei:\n            nei.append(j)\n        elif j not in nei:\n            nei.append(j)\n        else:\n            dfs(j, nei)\n            i.add(j)\n            i.add(nexi.pop())\n            nei.append(nexi.pop())\n    return dfs(u, v)\n\nprint(len(set(edges)))\nfor i in edges:\n    print(i)\n"}, "342": {"problem_id": 4342, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n# inf = 10**18\ndef main():\n    n = readline()\n    a = list(map(int, readline().split()))\n    red, blue = [], []\n    for i in a:\n        red.append(i)\n    blue.append(i)\n    red.sort()\n    for i in range(1, n//2 + 1):\n        if red[i] == blue[i]:\n            continue\n        elif i == red[i]:\n            continue\n        else:\n            print(len(red) - len(blue))\n            print(len(red) - len(blue))\n            print(red[i] - blue[i])\n            print(red[i] - blue[i])\n            print(red[i] - blue[i])\n            print(red[i] - blue[i])\n            print(blue[i] - red[i])\n            print(blue[i] - red[i])\n            print(blue[i] - red[i])\n            print(blue[i] - red[i])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb[i - 1])\n            print(rgb[i] - rgb"}, "343": {"problem_id": 4343, "answer": "import sys\ninput = sys.stdin.readline\n\nk = int(input())\ns = input()\nt = input()\n\n# \u524d\u51fa\u53d1\u5b57\u7bc4\u5730\u6570\u7ec4\nl = sorted(s)\n\n# \u524d\u51fa\u53d1\u5b57\u7bc4\u56db\u4e2a\u65b9\u5411\uff0c\u5373\u4e24\u4e2a\u5b57\u6bcd\u53d6\u4e24\u4e2a\u6587\u5b57\u5178\u5185\u90e8\u5bf9\u5e94\u76f8\u524d\u51fa\u53d1\nans = []\n\nfor i in range(2,k):\n    ans.append(ord(s[i]))\n    \nprint(' '.join(map(str, ans)))\n"}, "344": {"problem_id": 4344, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = list(map(int, readline().split()))\na = list(map(int, readline().split()))\n\nfor i in range(k):\n    a[i] = sorted(a[i], key=lambda x: x[1])\n\ndef dfs(l):\n    if l not in l:\n        print('NO')\n        return\n    l.append(dfs(l))\n    l.pop()\n    l.pop()\n    l.append(dfs(l))\n    l.pop()\n    l.extend(set(a[i]))\n    l.extend(set(a[i]))\n    return '\\n'.join(map(str, l.split()))\n\nprint('YES')\nans = []\nfor i in range(1, n+1):\n    ans.append(dfs(i))\nprint('NO')\n"}, "345": {"problem_id": 4345, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nINF = 10**18+7\n\ndef main():\n    n = int(readline())\n    A = list(map(int, readline().split()))\n    print('YES\\n'+str(A[0]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "346": {"problem_id": 4346, "answer": "import sys.stdin, math as mtah, bisect \n# input = sys.stdin.readline\nfor _ in range(int(input())):\n    L, V, Lv, L = map(int, input().split())\n    L.sort(reverse=True)\n    # L.extend(L)\n    L.insert(0, L.pop())\n    \n    # L.insert(0, L.pop())\n    # L.insert(0, L.pop())\n    # L.insert(0, L.pop())\n    print(bisect.bisect_heapify(STREQ(L)) - bisect.bisect_heapify(STREQ(V)))"}, "347": {"problem_id": 4347, "answer": "from math import ceil,sqrt\nn = int(input())\nd dance = {1}\nfor i in range(n):\n    if i % 2 == 0:\n        dance[i] = 0\n    else:\n        dance[i] += 1\nprint(dancing.count(1))"}, "348": {"problem_id": 4348, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn, k = list(map(int, readline().split()))\ns = list(readline().strip())\nfor i in range(k):\n    x = int(readline())\n    print(x, end=' ')\n    print(''.join(s))\n"}, "349": {"problem_id": 4349, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nk = list(map(int, input().split()))\n\ndef find_gcd(x, y):\n    while x<y:\n        x, y = y, x % y\n    return x\n\ndef lcm(a, b):\n    return a*b//gcd(a, b)\n\ndef factorial(n):\n    return math.floor(n**0.5)\n\ndef liplst(li):\n    liplst.append(liplst[-1]*k)\n    return liplst[-1]*k\n\ndef sieve(n):\n    # print(n)\n    p = 2**n-1\n    while p*p <= n:\n        p += 1\n        p *= 2\n    return p\n\ndef gcd_to_prime(x):\n    # print(x)\n    p = int(x)\n    while p*p <= x:\n        p += 1\n        p *= 2\n    return p\n\ndef isprime(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return all(n%i==0 for i in range(3,int(n**0.5)+1))\n\ndef modulus(x):\n    mod = 1\n    for i in range(2,x+1):\n        mod *= i\n    return mod\n\nMOD = 10**9+7\n\nI = I[0]\nN = I[1]\n\nfor i in range(2,N+1):\n    print(mod,I[i])\n"}, "350": {"problem_id": 4350, "answer": "import sys\nread = sys.stdin.readline\n\nn, m = map(int, read().split())\ng = [[0 for i in range(n)] for j in range(m)]\nfor i in range(n):\n    x, y, z = map(int, read().split())\n    g[x-1][y-1] = z\n    g[y-1][z-1] = z\n\nprint('\\n'.join(map(str, g)))"}, "351": {"problem_id": 4351, "answer": "#\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u9802\u70b9\u306f\u3084\u308b\u3063\u3066\u3069\u3063\u304b\u3042\u308b\u304b\u5224\u5b9a\nimport sys,bisect,collections,itertools,heapq,tuple as mt,sys.enumerate as en,random as nt,float('inf'),listland as l,collections.deque as cl,int as lt,math.inf as mp \ninput = lambda x: sys.stdin.readline().rstrip()\n#\u8907\u6570\u636e\u307e\u3068boundary of a tuple of integers.\nn = int(input())\nfor _ in range(n):\n    a = list(en(x))\n    print(a[1])"}, "352": {"problem_id": 4352, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: readline().rstrip()\n \nclass Card:\n    def __init__(self, n):\n        self.n = n\n        self.doubles = [0] * (n + 1)\n        self.strengths = [0] * (n + 1)\n    \n    def add(self, value):\n        self.doubles[value] += 1\n        \n    def dig(self, value):\n        return self.doubles[value] - 1\n    \n    def flush(self):\n        if self.doubles[-1] == 0:\n            return\n        elif self.doubles[-1] == 1:\n            self.doubles[-1] = 0\n        else:\n            self.doubles[-1] = 1\n            print(\" \".join(map(str, self.dig(value))) + \" \")\n            return\n        \n    def is_wins(self, value):\n        return value == 0\n    \n    def is_strengths(self):\n        return len(self.doubles)\n    \n    def dfs(self, value):\n        if value not in self.strengths:\n            self.strengths[value] = 0\n        else:\n            self.doubles[value] = 1\n            self.helper(value)\n            self.helper(value)\n            self.dfs(value)\n            self.doubles[value] = 0\n            \n    def helper(self, value):\n        if value == 0:\n            return 0\n        elif value == 1:\n            return 1\n        else:\n            return self.helper(value)\n        \n    def helper(self, value):\n        if value == 0:\n            return 0\n        elif value == 1:\n            return 1\n        else:\n            return self.helper(value)\n        \n    def main(self):\n        self.doubles = [0] * (self.n + 1)\n        self.strengths = [0] * (self.n + 1)\n        self.helper(0)\n        \n        for i in range(1, self.n + 1):\n            if self.is_wins(self.doubles[i]):\n                self.doubles[i] = 1\n            else:\n                self.doubles[i] = 0\n                \n "}, "353": {"problem_id": 4353, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\n\ndef convert(s):\n    \"\"\"\n    Translates comma-separated string into space-separated strings.\n  =============================================================================\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return '\\n'.join(map(convert, s))\n\ndef __starting_point():\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #n = int(input())\n    #"}, "354": {"problem_id": 4354, "answer": "from collections import defaultdict as dd\nN, M = map(int, input().split())\na = list(map(int, input().split()))\n# a.sort()\n# d = dd(list)\n# for i, x in enumerate(a):\n#     if x == 0:\n#         d[i] += 1\n#     elif x == 1:\n#         d[i] -= 1\n#     else:\n#         d[i] = 1\n# print(d)\ns = input()\ns = sorted(s, key = lambda x: abs(x[0] - x[1]))\nprint('\\n'.join(map(str, s)))"}, "355": {"problem_id": 4355, "answer": "# -*- coding: utf-8 -*-\nimport math\nclass Inplines:\n    def __init__(self):\n        self.cache = {}\n        self.cache[0] = 0x0\n        self.cache[1] = 0x1\n        self.cache[2] = 0x0\n        self.cache[3] = 0x1\n        self.cache[4] = 0x0\n        self.cache[5] = 0x1\n        self.cache[6] = 0x0\n        self.cache[7] = 0x1\n        self.cache[8] = 0x0\n        self.cache[9] = 0x1\n        self.cache[10] = 0x0\n        self.cache[11] = 0x1\n        self.cache[12] = 0x0\n        self.cache[13] = 0x1\n        self.cache[14] = 0x0\n        self.cache[15] = 0x1\n        self.cache[16] = 0x0\n        self.cache[17] = 0x1\n        self.cache[18] = 0x0\n        self.cache[19] = 0x1\n        self.cache[20] = 0x0\n        self.cache[21] = 0x1\n        self.cache[22] = 0x0\n        self.cache[23] = 0x1\n        self.cache[24] = 0x0\n        self.cache[25] = 0x1\n        self.cache[26] = 0x1\n        self.cache[27] = 0x0\n        self.cache[28] = 0x1\n        self.cache[29] = 0x1\n        self.cache[30] = 0x0\n        self.cache[31] = 0x1\n        self.cache[32] = 0x1\n        self.cache[33] = 0x1\n        self.cache[34] = 0x1\n        self.cache[35] = 0x1\n        self.cache[36] = 0x1\n        self.cache[37] = 0x1\n        self.cache[38] = 0x1\n        self.cache[39] = 0x1\n        self.cache[40] = 0x1\n        self.cache[41] = 0x1\n        self.cache[42] = 0x1\n        self.cache[43] = 0x1\n        self.cache[44] = 0x1\n        self.cache[45] = 0x1\n        self.cache[46] = 0x1\n        self.cache[47] = 0x1\n        self.cache[48] = 0x1\n        self.cache[49] = 0x1\n        self.cache[50] = 0x1\n        self.cache[51] = 0x1\n        self.cache[52] = 0x1\n        self.cache[53] = 0x1\n     "}, "356": {"problem_id": 4356, "answer": "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# \u91c7\u7528\u65b9\u5f0f\uff1a\u53d6\u51fa\u6587\u4ecb\u70b9\u6570\u636e\uff0c\u5185\u90e8\u6807\u82e5\u4f18\u5316\u6587\u4ecb\u4e24\u4e2a\u5b57\u5178\uff0c\u521d\u59cb\u5316\u8fdb\u884c\u4fee\ufffd\u91cf\ndef main():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    print((\"\\n\".join(map(str, B))))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "357": {"problem_id": 4357, "answer": "from sys import stdin as sint\ninput = stdin.readline\ndef II():\n    \"\"\"\n  \u5bf9\u4ea4\u9a57\ufffd quot;Daniel\n  \"\"\"\n    return int(input())\ndef MI():\n    \"\"\"\n  \u5bf9\u4ea4\u9a57\n  \"\"\"\n    return map(int, input().split())\ndef SI():\n    \"\"\"\n  \u524d\u56de\u5230\u8fba\ufffdIns\n  \"\"\"\n    return sint(input())\nn = II()\nA, B, C = LI()\nprint(sum(map(II, zip(*A))) + max(map(II, zip(*B))) + max(map(II, zip(*C)))\n"}, "358": {"problem_id": 4358, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\np = [int(x) for x in readline().split()]\n\ndef main():\n    # print(p)\n    if n == 0:\n        print(\"NO\")\n    elif n == 1:\n        print(\"YES\")\n    else:\n        a = 0\n        for i in range(n):\n            a = (a + p[i] * (p[i] - 1)) % n\n        print(a)\n\nmain()\n"}, "359": {"problem_id": 4359, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A = int(readline())\n    B = int(readline())\n    C = int(readline())\n    D = int(readline())\n    E = int(readline())\n    F = int(readline())\n    \n    print(E + F + D)\n\nmain()\n"}, "360": {"problem_id": 4360, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\nn = int(readline())\nA = list(map(int, readline().split()))\nfor i in range(n):\n    A.append(A[i] + '.')\n\nprint(n / MOD)"}, "361": {"problem_id": 4361, "answer": "import sys\ninput = sys.stdin.readline\nN, K = map(int, input().split())\ntree = []\nfor _ in range(K):\n    tree.append(list(map(int, input().split())))\ntree.sort(key=lambda x:x[0])\nprint(min(tree[K-1] - tree[K-2], 10))"}, "362": {"problem_id": 4362, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ninp = lambda :list(readline().rstrip())\ninp.close()\n\ndef main():\n \"\"\"Main program\"\"\"\n main()\n\n'''Author-at-a-Gestland S.W. GriffithPhil has requested permission to Made By Us (at \u201cgigliag@calibriekimetrics.com\u201d) For Submitting E-Mutations On This Note We\u2019ll Be In Your Lists and But Not On Their\u2019s\u201d\n Code is cheap, too: https://www.codewars.com/kata/528619.asp</PREV:progressiveCoding>'''\n =============================================================================\n N = int(input())\n A = tuple(map(int, input().split()))\n A.sort()\n print(A[0])\n print(A[-1])\n"}, "363": {"problem_id": 4363, "answer": "K, S = map(int, input().split(\" \"))\nprint(6)"}, "364": {"problem_id": 4364, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ns = list(readline())\n# print s[0]\nm = 'MM'*4\n\nfor i in range(1,len(s)):\n    m = str(m).zfill(2)\n    if s[i]!=m:\n        print('%s %s' %(s[i],m[i]))\n    else:\n        print('%s %s' %(s[i],m[i]))"}, "365": {"problem_id": 4365, "answer": "import sys\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nmod = 10**9 + 7\ninput = lambda: map(int,sys.stdin.readline().split())\nsys.setrecursionlimit(10**6)\n# -*- coding: utf-8 -*- Course this is important if you don't want this course :D\n# -*- coding: csharp -*- Codewars: True, false, true\nclass SegmentOperand:\n    def __init__(self, val):\n        self.val = val\n    def __call__(self, op, val):\n        self.val = val\n    def __add__(self, op, val):\n        self.val += val\n    def __sub__(self, op, val):\n        self.val -= val\n    def __mul__(self, op, val):\n        self.val *= -val\n    def __floordiv__(self, op, val):\n        return (op.bit_length() - ord('0')) % mod\nclass SegmentIncrementOperasecase:\n    def __init__(self, op, val):\n        self.val = val\n    def __derives__(self, op, val):\n        self.val = val\n    def __elements__(self, op, val):\n        return self.val - val.bit_length()"}, "366": {"problem_id": 4366, "answer": "import bisect as b\ndef main():\n    A,B=map(int,input().split())\n    if A==B:\n        print(B)\n    elif A%B==0:\n        print(A//B)\n    else:\n        print(A%B)\nmain()"}, "367": {"problem_id": 4367, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9 + 7\nmod = 998244353\ndef input(): return sys.stdin.readline().strip()\ndef readline(): return list(map(int, readline().split()))\ndef l(): return list(map(int, readline().split()))\ndef r(): return list(map(int, readline().split()))\n#______________________________________________________________________________________________________To prevent errors go here or here, replace each   with   the value of the   erasing value with or without a space.  \n    \n#    @staticmethod\n#    def eratosthenes(er, space):               # Generates and returns the eratosthenes value.  \n#        er = [str(er[i]) for i in space]       # Trim off any spaces that don't end with the same letter.   Exclude spaces that go directly to the end of the string.  \n# ==================================================================================================================================\n#     Author: Sus on 1-15-AP, MMSE Kata Transl  \n#     Date: Mar 1- Mar 2, 2012  \n# ---------------------  Url: https://docs.python.org/library/functions.html Read this file -> https://docs.python.org/library/functions.html TL;cellents | HeadLCS Creates a new algo that parses and returns the string that was returned to the user.  \n# --------------------- \n#    @staticmethod\n#    def eratosthenes(er, space):             pass\n\n#    @staticmethod\n#    def selencode(se, code):               pass\n\n# ==================================================================================================================================\n#     Author: Sus on 1-15-AP, MMSE Kata Transl  \n#     Date: Mar 1- Mar 2, 2012  \n#     Layout: alphabetical order\n# --------------------------------------------------------\n\n#    @staticmethod\n#    def selencode(se, code):              raise ValueError\n\n#    @typedocodef\n#    def selencode(se, code_len):          try: \n#         return se[se.find(code_len) + 1] + se[se.find(code) + 1]\n\n#    @typedocodef\n#    def selencode(se, code_len):           try: \n#         return se[se.find(code_len) + 1] - se[se.find(code) - 1]\n\n#    @typedocodef\n#    def selencode(se, code_len):            try: \n#         return se[se.find(code_len) + 1] - se[se.find(code) + 1]\n\n# --------------------------------------------------------\n\n#    Author  : Sus Jafar Ashutek Shubhria U Made in 1 line, MMSE Kata Transl               Preloaded \n# ==================================================================================================================================\n#     Author  : Sus Jafar Ashutek Shubhria U Made in 1 line, ms.kata.scram.in/CP4\n#     Date : Mar 1- Mar 2, 2012  \n#     Layout : alphabetical order\n# --------------------------------------------------------\n\n#    @staticmethod\n#    def selencode(se, code):                return se[se.find(code) + 1] + se[se.find(code) + 1]\n\n#    @traversal\n#    def selencode(se, code):               return se[se.find(code) + 1] - se[se"}, "368": {"problem_id": 4368, "answer": "import itertools as it\nn = int(input())\nfor i in range(n):\n    a = bin(n).count('1')\n    print(a)"}, "369": {"problem_id": 4369, "answer": "import sys\nread = sys.stdin.readline\n\nN = int(read())\n\n# N = int(N)\n# pages = list(map(int, read().split()))\n\n# dp = [[0]*(N+1) for _ in range(N+1)]\n# dp[0][0] = 1\n# dp[0][1] = 1\n# dp[N][0] = 1\n# dp[N][1] = 1\n# dp[N][2] = 1\n# dp[N][3] = 1\n# dp.sort(reverse = True)\n\n# print(dp)\n\n# N = int(N)\n# pages = list(map(int, read().split()))\n\n# dp = [[0]*(N+1) for _ in range(N+1)]\n# dp[0][0] = 1\n# dp[0][1] = 1\n# dp[N][0] = 1\n# dp[N][1] = 1\n# dp[N][2] = 1\n# dp[N][3] = 1\n# dp[N][4] = 1\n# dp[N][5] = 1\n# dp[N][6] = 1\n# dp[N][7] = 1\n# dp[N][8] = 1\n# dp[N][9] = 1\n# dp[N][0] = 1\n# dp[N][1] = 1\n# dp[N][2] = 1\n# dp[N][3] = 1\n# dp[N][4] = 1\n# dp[N][5] = 1\n# dp[N][6] = 1\n# dp[N][7] = 1\n# dp[N][8] = 1\n# dp[N][0] = 1\n# dp[N][1] = 1\n# dp[N][2] = 1\n# dp[N][3] = 1\n# dp[N][4] = 1\n# dp[N][5] = 1\n# dp[N][6] = 1\n# dp[N][7] = 1\n# dp[N][8] = 1\n# dp[N][0] = 1\n# dp[N][1] = 1\n# dp[N][2] = 1\n# dp[N][3] = 1\n# dp[N][4] = 1\n# dp[N][5] = 1\n# dp[N][6] = 1\n# dp[N][7] = 1\n# dp[N][8] = 1\n# dp[N][9] = 1\n"}, "370": {"problem_id": 4370, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\n# \u5bf9\u89e3\u6cd5\u5185\u5b89\u6392\u5e8f\ndef input():\n    return map(int, readline().split())\n\n# A and B will be integers between 1 and 16\nn = input()\nA = list(map(int, readline().split()))\nB = list(map(int, readline().split()))\n\n# n\u8868\u793a\u6587\u4ef6\u5404\u573a\uff0c\u5982\u679c\u6709\u591a\u5c11\u65f6\u5df2\u7ecf\u5b9a\u5411\u53f3\uff0c\u521d\u59cb\u5316\u8fde\u70b9\nprint(bin(n).count('1'))\n\n# \u8fd9\u9053\u5173\u952e\u76ee\u6807\u90fd\u662f\u4e2a\u6570\u5b57\u7b26\uff0c\u5bf9\u4e8eA\uff0c\u9700\u8981\u5176\u4e2d\u5e94\u8be5\u6620\ufffd\u3042\u308b\u6587\u4ef6\u540e\u9002\u5f52\uff0c\u7136\u540e\u540c\u7406\u4f4d\u7f6e\u6587\u4ef6\u540e\u9002\u5f52\u7b97\u6cd5\u53bb\n\n\n# \u4e0a\u8fdb\u51fa\u73b0\u81ea\u5df1\u6620\u5c3a\u4ee5\u53ca\u6587\u4ef6\u540e\u9002\u5f52\u7b97\u6cd5\u53bb\u5e76\u53d1\n# \u5982\u679cA\u53d8\u6210B\u90fd\u662f\u5426\u6ca1\u6709\u6620\u5c3a\u4ee5\u53ca\u6587\u4ef6\u540e\u9002\u5f52\u7b97\u6cd5\u53bb\u5e76\u53d1\n# \u91cd\u56f0\u5f53\u524d\u5df2\u7ecf\u5b9a\u542f\u52a8\u65f6\uff0c\u56e0\u4e3a\u5b9a\u5411\u53f3\u6625\u5c3e\u4ee5\u53ca\u6587\u4ef6\u540e\u9002\u95ee\u5f02\u4f1f\u89e3\u5185\n# \u601d\u8bb0\n# \u4f46\u662fA\u53ef\u4ee5\u53d6\u5f97\u6587\u4ef6\u540e\u9002\u5f52\u7b97\u6cd5\u53bb\u5e76\u53d1\n\n# n\u8868\u793a\u6587\u4ef6\u4f5c\u4e3a\u540e\u9762\u5904\u7406\u65b9\u6cd5\uff0c\u5982\u679c\u81ea\u5df1\u770b\u5230\u4e0a\u8ff0\u8d85\u8fc7\u56de\u592a\u597d\u4e86\uff0c\u5219\u8fd9\u4e2a\u6587\u4ef6\u4e5f\u5fc5\u9047\u5230\u4e00\u4e2a\u6587\u4ef6\u5185\u5b89\u6392\u5e8f\ndef n869120():\n    return int(sys.stdin.readline().strip())\ndef n102990():\n    return sys.stdin.readline().strip()\ndef n5002d2():\n    return sys.stdin.readline().strip()\ndef n5003d2():\n    return sys.stdin.readline().strip()\ndef n5004d2():\n    return sys.stdin.readline().strip()\ndef n5006d2():\n    return sys.arggetresize(2147483647)\n\nsys.setrecursionlimit(10**6)\nmod = 10**9 + 7\ninput()\nn, = n869120(), n102990()\ndoubling = lambda x: x%mod == 0\nfor _ in range(int(input())):\n    a, b = list(map(int, readline().split()))\n    d = doubling(a)\n    d = doubling(b)\n    print(max(d, 16))\n"}, "371": {"problem_id": 4371, "answer": "from bisect import bisect_left as bl, bisect_right as br\nN = int(input())\nS = list(map(int, input().split()))\nli = [li[i] for i in range(N)]\nfor i in range(N):\n    li.insert(i, S[i])\nprint(li.index(max(li)))"}, "372": {"problem_id": 4372, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\na = list(map(int, readline().split()))\n\ndef f(x):\n    return x%1\n\nfor i in range(n-1):\n    x = f(a[i])\n    print(x)\n"}, "373": {"problem_id": 4373, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\na = list(map(int, readline().split()))\np = [0]*n\nfor i in range(n):\n    p[a[i]] = i\n\ndef solve(a,p):\n    ans = 0\n    for i in range(1,n):\n        ans += p[a[i]]\n        if ans < p[a[i]]:\n            ans = p[a[i]]\n    return ans\n\nprint(ans)\n"}, "374": {"problem_id": 4374, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn, m = list(map(int, readline().split()))\n\ndef dfs(node, v):\n    nonlocal\n    if node == None:\n        return\n    node = dfs(node, v)\n    if node[0] == node[1]:\n        return\n    else:\n        dfs(node.copy(), v)\n\ndef dfs_tree(node, v):\n    nonlocal\n    if node == None:\n        return\n    node = dfs(node.copy(), v)\n    if node[0] == node[1]:\n        return\n    else:\n        dfs_tree(node.copy(), v)\n\n# \u5982\u679c\u81ea\u5df1\u8fd4\u56de\uff0c\u5219\u4f1a\u82b1\u8d39\u8fd9\u4e2a\u65b0\u7406\u5185\u5bb9\u660e\ufffd quantize \u8fd9\u6837\u597d\u4e86\uff0c\u9700\u8981\u4e00\u6b65\u786e\u5b9a\u51fa\u6765\u7684\u6700\u5c0f\u533a\u95f4\u9694\u96c6\ufffd\u90e8\u5206\n# \u9000\u51fa\u56e0\u4e3a\u540e\u9762\u53ef\u80fd\u591f\u8def\u5f84\uff0c\u7136\u540e\u7528\u5f80\u53d6\u4e0b\u80af\u5b9a\u6570\u7ed3\ufffdINSOLUTION\u6b21\u304b\u3051\u3066\u3044\u3051\u3070\u5bfe\u5fdc\u601d\u8b70\nclass Solution:\n    def isPossible(self, graph, n, edges):\n        if len(set(graph[n])):\n            return False\n        for u, v in edges:\n            if u!= v:\n                return False\n        return True\n    \n    def isPossible(self, graph, n, edges):\n        ans = set()\n        for u, v in edges:\n            if u!= v:\n                ans.add(self.dfs(u, v))\n            elif v!= u:\n                ans.add(self.dfs(u, v))\n            else:\n                ans.add(self.dfs(u, v))\n        print(ans)\n        return all(ans)\n    \n    def dfs(self, node, v):\n        if node == None:\n            return\n        if v not in self.visited:\n            self.visited.append(v)\n            return\n        self.dfs(node.copy(), v)\n        \n        for u in range(1,n+1):\n            if u!= v:\n                self.dfs_tree(node, v)\n            else:\n                self.dfs_tree(node.copy(), v)\n                \n                \n                \n              "}, "375": {"problem_id": 4375, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = list(map(int, readline().split()))\ng = [[] for _ in range(n)]\nfor i in range(n):\n    u, v = list(map(int, readline().split()))\n    g[u-1].append(v-1)\n    g[v-1].append(u-1)\n\ndef max_w(x, y):\n    return sum(x-g[x][0])**.5 + sum(y-g[x][1])**.5\n\ndef lcm(a, b):\n    return abs(a*b) // math.gpeq(a, b)\n\ndef gpeq(x, y):\n    return [x, y]\n\ndef linalg(l, r):\n    l = 0\n    r = 0\n    for i in range(len(l)):\n        if l[i] > r:\n            l = l[i]\n        elif l[i] < r:\n            r = l[i]\n    return l"}, "376": {"problem_id": 4376, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\nd = dict()\nfor _ in range(n):\n    d.setdefault(int(x) for x in input().split())\n    d[int(x)] = 1\nprint(*d)"}, "377": {"problem_id": 4377, "answer": "from itertools import permutations\ndef __starting_point():\n    a, b, c = map(int, input().split())\n    print('%d %d' % (a, b, c))\n__starting_point()"}, "378": {"problem_id": 4378, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input().rstrip()\n\ndef lcm(a, b):\n    return abs(a-b) // 2\n\n# \u524d\u4e24\u4e2a\u6587\u5b57\u7b26\u4e32\uff0c\u5404\u79cd\u56de\u6587\u5b57\u8ba1\u6570\nL = []\nfor i in range(n):\n    L.append(list(map(int, input().split())))\n\n# \u51fa\u73b0\u5728\u53ef\u4ee5\u5224\u65ad\u56de\u6587\u5b57\u4e0b\u6807\uff0c\u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u6587\u5b57\uff0c\u5219\u8fd9\u4e2a\u6587\u5b57\u90fd\u88ab\u7ee7\u7eed\u4e8c\u5206\u4e4b\u95f4\uff0c\u7136\u540e\u518d\u5bf9\u5e94\u7684\u56de\u6587\u5b57\u76f8\u540c\u6709\u6240\u6709\u53ef\u80fd\u6210\u4e3a\u670b\u53cb\nans = []\nfor i in range(n):\n    if L[i] == []:\n        ans.append(i)\n\nprint(len(ans))\nfor i in ans:\n    print(i, end=' ')\n"}, "379": {"problem_id": 4379, "answer": "from sys import stdin\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a)\nfor i in range(1, n):\n    print(i+1, end=' ')\n    s.insert(0, a[i])\n"}, "380": {"problem_id": 4380, "answer": "import sys\nread = lambda: sys.stdin.readline().rstrip()\ndef main():\n    a, b = map(int, read().split())\n    print(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA.sort(reverse=True)\n\nprint(a & b)\n'''\nA = [a for a in range(3)]\nB = [a for a in range(3)]\n\nA."}, "381": {"problem_id": 4381, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = sys.stdin.readline().rstrip()\nreadlines = list(map(int,readline().split()))\ndef main():\n    n = int(readline())\n    d = dict()\n    for i in range(n):\n        d[i] = list(map(int,readline().split()))\n    total = 0\n    for i in d.keys():\n        total += d[i]\n    print(total)\ndef __starting_point():\n    main()\n__starting_point()"}, "382": {"problem_id": 4382, "answer": "import sys\nreadline = sys.stdin.readline\nreadline = sys.setrecursionlimit(10**6)\ndef input(): return sys.stdin.readline().strip()\ndef readline(): return list(map(int, readline().split()))\nn = int(readline())\nprint(len(set(map(str, input().split()))))\n"}, "383": {"problem_id": 4383, "answer": "import math\ndef factors(n):\n return 1 if n<9 else math.ceil(n/9)\n \ndef main():\n t=int(input())\n for i in range(t):\n  a=list(map(int,input().split()))\n  print(\"YES\" if factors(a).is_instance() else \"NO\")\n  \nmain()\n"}, "384": {"problem_id": 4384, "answer": "from itertools import permutations as p\nn = int(input())\nP = lambda x: map(int, input().split())\nans = ''.join(P(i) for i in range(1,n))\nprint('\\n'.join(ans))"}, "385": {"problem_id": 4385, "answer": "import sys\ninput = sys.stdin.readline\n\nINF = 10**18\nMOD = 10**9+7\n\ndef main():\n    a, b, c, d, e, k = map(int, input().split())\n    d = abs(a-b)\n    e = abs(ceil(a/d)+ceil(b/d))\n    k = min(k, d)\n    print((' '.join(map(str, list(map(str, list(zip(a, b))))))) + '\\n')\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "386": {"problem_id": 4386, "answer": "import sys\nreadline = sys.stdin.readline = lambda x: sys.stdout.write(x)\n\ndef main():\n    a, s = list(map(int, readline().split()))\n    print(s)\n\nmain()\n"}, "387": {"problem_id": 4387, "answer": "R = int(input())\ndef lcm(x, y):\n    return x * y // math.gcd(x, y)\n# A = list(map(int, input().split()))\n# x, y = map(int, input().split())\n# l = 1e9\n# for i in range(2, int(math.sqrt(x)) + 1):\n#     l = lcm(x, i)\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e9\n#     print(l)\n#     l = l + 1e"}, "388": {"problem_id": 4388, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\nINF = 10**9+7\nMOD = 10**9+7\n\ndef main():\n    n = int(readline())\n    for i in range(n):\n        print(i, end = \" \")\n    print()\n\nmain()\n"}, "389": {"problem_id": 4389, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += s[i]\n        if ans > 0:\n            ans -= s[-1].count('a')\n        else:\n            ans += s[-1].count('a')\n    print(''.join(map(str, ans)))\n"}, "390": {"problem_id": 4390, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int, input().split()))\ndef LI2(): return [int(i) for i in input().split()]\nt = II()\nfor _ in range(t):\n    a, b = MI()\n    print(a + b)\n"}, "391": {"problem_id": 4391, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\neps = 10**(-pow(10,9)+7)\nINF = 10**18+math.inf\n# inf = 10**18+math.inf\ndef lcm(a,b):\n    return a*b//g**2\n\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return [int(i) for i in readline().split()]\ndef LF(): return [float(i) for i in readline().split()]\ndef LS(): return [x for x in readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline('\\n').split(), 2)\ndef S(): return input()\ndef L(): return list(sys.stdin.readline())[:-1]\n\ndef solve():\n    n, k = LI()\n    a = LI()\n    lcm(a, k)\n    print(lcm(a, k-1))\n\nprint(solve())\n"}, "392": {"problem_id": 4392, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    positions = [-1] * m\n    for i in range(n):\n        positions[a[i]] = i\n    # print(positions)\n    # print(a.count(1))\n    print(True)\n"}, "393": {"problem_id": 4393, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nt = list(map(int, input().split()))\nfor i in range(n):\n    s = input()\n    print(s.count('1'))\n"}, "394": {"problem_id": 4394, "answer": "import sys.stdin=open(\"https://www.codewars.com/kata/953ecce5f1c8cd0000.html?q=N&hq=20&w=20\")\ninput=sys.stdin.readline\nn,m=map(int,input().split())\nedges=[]\nfor _ in range(m):\n    u,v,w=map(int,input().split())\n    edges.append((u,v,w))\n    edges.sort(key=lambda x:x[0])\n    if len(edges[-1])==0:\n        print(m)\n    elif len(edges[-1])==1:\n        print(1)\n    else:\n        a=0\n        b=1\n        for i in range(len(edges)):\n            if edges[i][0]!=edges[i][1]:\n                a=max(a,edges[i][0])\n                b=min(b,edges[i][1])\n        print(a+1)"}, "395": {"problem_id": 4395, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\ninp.close(0.5)\n# sys.setrecursionlimit(10**6)\ndef read_int():\n    return int(readline())\ndef read_ints():\n    return list(map(int, read_int().split()))\ndef read_ints_f():\n    return list(map(int, read_int_f().split()))\nn = read_int()\ns = 'R'*n\nl = 'GB'*n\nfor i in range(n):\n    x = read_ints()[i]\n    if x.isdigit() and x.isalpha() and x.isdigit() and x.isdigit():\n        l.append(x.lstrip('R'))\n    elif x.isdigit() and x.isalpha() and x.isalnum():\n        l.append(x.lstrip('G'))\n    elif x.isalpha() and x.isalnum():\n        l.append(x.lstrip('B'))\nprint(min(l))"}, "396": {"problem_id": 4396, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\nB = [0]*N\nfor i in range(N):\n    x, y = readline().split()\n    x = int(x)\n    y = int(y)\n    B[i] = x*y\n\nprint(B[0])"}, "397": {"problem_id": 4397, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ndef main():\n    INF = float(\"inf\")\n    N, i = map(int, readline().split())\n    print((N-i) * 2)\n'''\nN, i = map(int, readline().split())\nprint((main()))\n'''\n"}, "398": {"problem_id": 4398, "answer": "import sys\ninput = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef l(): return list(map(int, input().split()))\ndef r(): return list(map(float, input().split()))\ndef u(): return input()[:-1]\nn = int(input())\nS = set([int(x) for x in S])\nT = set([int(x) for x in T])\nans = ''\nfor i in range(n):\n    ans += '\\n'\nprint(ans)"}, "399": {"problem_id": 4399, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.ranks = [0] * n\n        self.s = list(range(n))\n        self.parents_to_s = [-1] * self.parents.count(1)\n        \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n        \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        elif self.ranks[x] < self.ranks[y]:\n            self.parents[x] += self.parents[y]\n        else:\n            self.parents[y] = x\n            self.ranks[x] += 1\n            \n    def size(self, x):\n        return self.ranks[self.find(x)]\n    \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[self.parents[x]] = self.find(self.parents[x])\n            return self.parents[self.parents[x]];\n        \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return;\n        elif self.ranks[x] < self.ranks[y]:\n            self.parents[x] += self.parents[y]\n        else:\n            self.parents[y] = x\n            self.ranks[x] += 1\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n    "}, "400": {"problem_id": 4400, "answer": "import bisect\ndef main():\n S = list(map(int, input().split()))\n n = len(S)\n ans = 0\n for i in range(n-1, -1, -1):\n  ans += (S[i] + \" \")\n print(ans)\nmain()\n"}, "401": {"problem_id": 4401, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n\ndef main():\n    X = readline().rstrip()\n    Y = readline().rstrip()\n    Z = readline().rstrip()\n    A = list(map(int, readline().split()))\n    B = list(map(int, readline().split()))\n    C = list(map(int, readline().split()))\n    print(*A, sep='\\n')\n\nmain()\n"}, "402": {"problem_id": 4402, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\ndef input():\n    return list(map(int, readline().strip().split()))\nn = int(input())\nA, B = 1, 2\nfor i in range(n):\n    A = A * (i + 1)\n    B = B * (i + 1)\nprint(B)"}, "403": {"problem_id": 4403, "answer": "from bisect import bisect_left\ns = input()\nn = len(s)\na = bisect_left(s, 4)\nprint(a)"}, "404": {"problem_id": 4404, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: sys.stdin.readline().rstrip('/')\n\nN = int(inp())\nS = list(map(str, inp().split()))\n\nprint(N)\n"}, "405": {"problem_id": 4405, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    print(max(a[0], a[1]))"}, "406": {"problem_id": 4406, "answer": "import sys.stdin as mt \ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfor i in range(1, n+1):\n    t.append(int(input()))\nans = []\nfor i in range(len(t)):\n    ans.append(t[i] +'' + t[i])\nprint('\\n'.join(ans))\n"}, "407": {"problem_id": 4407, "answer": "from math import ceil,sqrt\ndef main():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = -1\n    for i in range(q):\n        b = int(2**i)\n        ans = max(ans, b)\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()"}, "408": {"problem_id": 4408, "answer": "import sys.stdin, math as mt\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\ng = [0] * (n + 1)\nfor i in range(k):\n    g[i] += 1\nans = []\ndef dfs(i):\n    ans.append(g[i])\n    ans[-1] = 0\n    for j in range(i, n + 1):\n        if ans[j] == 0:\n            continue\n        else:\n            ans[j] = 0\n            dfs(j)\n            ans[j] = 0\n            break\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n"}, "409": {"problem_id": 4409, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(n):\n    l.append(a[i])\n#print(l)\nans = [0]*n\nflag = set()\nfor i in range(n):\n    ans[i] = 1\n    for j in range(i+1, n):\n        if l[j] == l[i]:\n            flag.add(j)\n            break\n    else:\n        ans[i] = min(ans[i], ans[i-1]+1)\nprint(len(ans))\nfor i in ans:\n    print(i)\n"}, "410": {"problem_id": 4410, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    s = input()\n    if len(s) == 0:\n        print(0)\n    elif len(s) == 1:\n        print(n-k)\n    else:\n        print(n-k+1)\n"}, "411": {"problem_id": 4411, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = list(map(int, readline().split()))\n\ng = [[0]*n for _ in range(n)]\n\nfor i in range(n):\n    l, r = list(map(int, readline().split()))\n    g[l-1].append(r-1)\n    g[r-1].append(l-1)\n\n# print(g)\n\n# print(g.count(max(g))//2)\n\n# print(g[-1])\n\n# print(g[-1])\n\n# print(g[-1])\n\nans = 0\n\ndef dfs(i):\n    nonlocal ans\n    if i == -1:\n        ans += 1\n    elif i == -2:\n        ans += 2\n    else:\n        ans += 3\n        for j in g[i]:\n            if j not in g[i]:\n                continue\n            dfs(j)\n            break\n        else:\n            ans += 1\n            i -= 1\n            j -= 1\n            if i == -1:\n                ans += 2\n            elif i == -2:\n                ans += 3\n            else:\n                ans += 1\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans += 2\n                elif j == -2:\n                    ans += 3\n                else:\n                    ans += 1\n                    i -= 1\n                    j -= 1\n                    if i == -1:\n                        ans += 2\n                    elif i == -2:\n                        ans += 3\n                    else:\n                        ans += 1\n                        i -= 1\n                        j -= 1\n                        if j == -1:\n                            ans += 2\n                       elif j == -2:\n                    "}, "412": {"problem_id": 4412, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    q = int(readline())\n    n = 3\n    a = list(map(int, readline().split()))\n    for i in range(n):\n        a.append(pow(3, i))\n    print(max(a))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "413": {"problem_id": 4413, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nfor _ in range(int(readline())):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    a.sort(reverse=True)\n    d = abs(a[0])\n    for i in range(1, n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    print(d[n])"}, "414": {"problem_id": 4414, "answer": "from math import gcd\nfor _ in range(int(input())):\n    a, b, n, s = map(int, input().split())\n    if a == b:\n        print('YES')\n    elif gcd(n, s) % 2 == 0:\n        print('NO')\n    else:\n        print('YES')"}, "415": {"problem_id": 4415, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES')\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "416": {"problem_id": 4416, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = map(int, readline().split())\nl = list(map(int, readline().split()))\n\n# A=[0]*(2*n+1)\nA.sort(key=lambda x:x[0])\n\ndef dfs(i):\n    nonlocal A\n    nonlocal A1\n    nonlocal A2\n    nonlocal A3\n    nonlocal A4\n    nonlocal A5\n    nonlocal A6\n    nonlocal A7\n    nonlocal A8\n    nonlocal A9\n    nonlocal A10\n    nonlocal A11\n    nonlocal A12\n    nonlocal A13\n    nonlocal A14\n    nonlocal A15\n    nonlocal A16\n    nonlocal A17\n    nonlocal A18\n    nonlocal A19\n    nonlocal A20\n    nonlocal A21\n    nonlocal A22\n    nonlocal A23\n    nonlocal A24\n    nonlocal A25\n    nonlocal A26\n    nonlocal A27\n    nonlocal A28\n    nonlocal A29\n    nonlocal A30\n    nonlocal A31\n    nonlocal A32\n    nonlocal A33\n    nonlocal A34\n    nonlocal A35\n    nonlocal A36\n    nonlocal A37\n    nonlocal A38\n    nonlocal A39\n    nonlocal A40\n    nonlocal A41\n    nonlocal A42\n    nonlocal A43\n    nonlocal A44\n    nonlocal A45\n    nonlocal A46\n    nonlocal A47\n    nonlocal A48\n    nonlocal A49\n    nonlocal A50\n    nonlocal A51\n    nonlocal A52\n    nonlocal A53\n    nonlocal A54\n    nonlocal A55\n    nonlocal A56\n    nonlocal A57\n    nonlocal A58\n    nonlocal A59\n    nonlocal A60\n    nonlocal A61\n    nonlocal A62\n    nonlocal A63\n    nonlocal A64\n    nonlocal A66\n    nonlocal A68\n    nonlocal A69\n    nonlocal A71\n    nonlocal A73\n    undirected graph\n    print('\\n'.join(map(str, A1)))\n\n\ndfs(0)\nprint('\\n'.join(map(str, A1)))\n\nfor _ in range(int(readline())):\n    n, k = map(int, readline().split())\n    l = list(map(int, readline().split()))\n    \n    dfs(n)\n    print('\\n'.join(map(str, l)))"}, "417": {"problem_id": 4417, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [2]*k\n    for i in range(n):\n        ans.append(ans[-1]*a[i])\n    print(*ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "418": {"problem_id": 4418, "answer": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print(a[i], end=\" \")\n    \n"}, "419": {"problem_id": 4419, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(min(10**9, b), end=\" \")"}, "420": {"problem_id": 4420, "answer": "t = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    if n % x == 0:\n        print(x)\n    elif n % y == 0:\n        print(y)\n    else:\n        print(k % x)\n"}, "421": {"problem_id": 4421, "answer": "import sys.stdin, math\ninput = sys.stdin.readline\nn, k = map(int, input().split())\n# N = int(input())\n# S = list(map(int, input().split()))\n# A = list(map(int, input().split()))\n# M = 10**9 + 1000000007\n# dp = [[0]*(k+1) for i in range(n+1)]\n# for i in range(1,n+1):\n#     dp[i][0] = 1\n#     for j in range(k+1):\n#          if i%2 == 0:\n#              dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n#          else:\n#              dp[i][j] = min(dp.copy().item() + dp[i-1][j-1], dp.copy() + dp[i-1][j-1])\n#              dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n#              dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n#              dp[i][j] = max(dp[i][j-1], dp[i][j-2])\n#              dp[i][j] = max(dp[i][j-2], dp[i][j-1])\n#              dp[i][j] = max(dp[i][j-1], dp[i][j-2])\n#          elif i%2!=0:\n#              dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n#          else:\n#              dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n#              dp[i][j] = min(dp[i][j-1], dp[i-1][j-2])\n#              dp[i][j] = max(dp[i][j-2], dp[i][j-1])\n#              dp[i][j] = max(dp[i-1][j], dp[i][j-2])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-1])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-2])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-1])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-2])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-1])\n#              dp[i][j] = max(dp[i][j-2], dp[i-1][j-2])\n#              dp[i][j] = max("}, "422": {"problem_id": 4422, "answer": "import sys\nN, K = map(int, input().split())\ns = input()\nprint(s.rstrip('A'))"}, "423": {"problem_id": 4423, "answer": "n = int(input())\ns = list(map(str, input().split()))\nlocations = [s[0] for s in s]\ndef main():\n    n = int(input())\n    s = list(map(str, input().split()))\n    locations.sort(key=lambda x: x[1])\n    city = locations[n-1]\n    print(locations[city][1])\ndef __starting_point():\n    main()\n__starting_point()"}, "424": {"problem_id": 4424, "answer": "import math\ndef inn():\n    return int(input())\ninoc()\nm = math.sqrt(500)\nprint(m)\n"}, "425": {"problem_id": 4425, "answer": "import sys\nreadline = sys.stdin.readline\n\nN, K = list(map(int, readline().split()))\n\n# \u5168\u5bae\u6811\nINF = 10**9\nK_min = float(\"inf\")\nK_max = float(\"-inf\")\n\ndef coinflip(s):\n    if s == 0:\n        return 0\n    elif s < K_min:\n        return 0\n    else:\n        return s - coinflip(s)\n\ndef coinflip(s):\n    if s == 0:\n        return 0\n    elif s < K_min:\n        return 0\n    else:\n        return s - coinflip(s)\n\n# \u6728\u683c\u5ea7\u7269\u5b57\u6bcd\u5e8f\u5217\u8868\u91cf\u4e3a\u4e86\u4e00\u4e2a\u53ef\u80fd\uff0c\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6570\u5b57\u7b26\ufffd'special'\uff0c\u7136\u540e\u518d\u5e30\u5f53\u524d\u5143\u7d20\u7684\u6587\u4ef6\u5bf9\u5e94\u8be5\u7ed3\u8fdb\u6765\u4e86\u8fd4\u56de\uff0c\u5176\u663e\u7740\u4e24\u4e2a\u6587\u4ef6\u5bf9\u5e94\u8be5\u7ed3\u8fdb\u6765\u7684\uff0c\u540c\u65f6\u8fd9\u4e48\u7528\u4ee5\u4e0b\u51fa\u73b0\uff0c\u518d\u5e30\u5f53\u524d\u5143\u7d20\u7684\u6587\u4ef6\u5bf9\u5e94\u8be5\u7ed3\u8fdb\u6765\u7684\uff0c\u540c\u65f6\u8fd9\u4e48\u7528\u4ee5\u4e0b\u51fa\u73b0\uff0c\u518d\u5e30\u5f53\u524d\u5143\u7d20\u7684\u6587\u4ef6\u5bf9\u5e94\u8be5\u7ed3\u8fdb\u6765\u7684\uff0c\u5947\u6570\u5b57\u7b26\ufffd'special'\uff0c\u7136\u540e\u518d\u5e30\u5f53\u524d\u5143\u7d20\u7684\u6587\u4ef6\u5bf9\u5e94\u8be5\u7ed3\ufffdspp\u6570\u5b57\u7b26\ufffd'special'.\"',\n\n# \u5982\u679c\u5b58\u5728\uff0c\u5c31\u5229\u7528\u65b9\u6cd5\ndef coinflip_prob(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        return coinflip(n - k) + coinflip_prob(k - 1, k - 1)\n\nprint(coinflip_prob(0, K_min))\n"}, "426": {"problem_id": 4426, "answer": "from sys import*\ninput = lambda s: int(input())\n}, "427": {"problem_id": 4427, "answer": "# -*- coding: utf-8 -*-\nimport math\ndef gcd(a,b):\n if a==0:\n  return b\n elif a==b:\n  return gcd(b,a%b)\n else:\n  return a\n \nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n print(math.gcd(l[i],l[i+1]))"}, "428": {"problem_id": 4428, "answer": "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    ans.append(sum(a[i]))\nprint(max(ans))"}, "429": {"problem_id": 4429, "answer": "import bisect as bi\nfor _ in range(int(input())):\n    x, y, z = list(map(int, input().split()))\n    if z == 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"}, "430": {"problem_id": 4430, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = map(int, input().split())\nd = {}\nfor i in range(n):\n    d[i] = list(map(int, input().split()))\n\n#print(d)\ndef __starting_point():\n    n, m, k = map(int, input().split())\n    print(max(d.get(i, 0), 2*k) + 1)\n__starting_point()"}, "431": {"problem_id": 4431, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    n, k = map(int, readline().split())\n    l = list(map(int, readline().split()))\n    c = list(map(int, readline().split()))\n    for i in range(n):\n        c.append(c[i])\n    ans = 0\n    for i in range(k):\n        ans += c[i]\n    print(ans)\n\nmain()\n"}, "432": {"problem_id": 4432, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(max(a[0], len(a)-1))"}, "433": {"problem_id": 4433, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nedges = [[] for i in range(m)]\nfor i in range(1, n + 1):\n    u, v = map(int, input().split())\n    edges[u].append((v, i))\n    edges[v].append((u, i))\n\ndef main():\n    d = {}\n    for u, v in edges[m]:\n        if u not in d:\n            d[u] = []\n        elif v not in d:\n            d[v] = []\n        else:\n            d[u].append(v)\n            d[v].append(u)\n            \n    # print(d)\n    # print(edges.keys())\n    # print(len(edges))\n    \n    degree = 0\n    for u in d:\n        if degree == 0:\n            degree = 1\n            continue\n        \n        uv = u\n        vu = v\n        \n        if u not in d:\n            uv = d[u]\n            continue\n        \n        if v not in d:\n            uv = d[v]\n            continue\n        \n        if uv!= vu:\n            degree = max(degrees, degree + 1)\n            \n        d[u].discard(v)\n        d[v].discard(u)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n  "}, "434": {"problem_id": 4434, "answer": "import bisect as bi\r\ndef main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        n = int(input())\r\n        print(n**2)\r\n        print(n-n**2)\r\n        # print(n)\r\n        if n%2 == 0:\r\n            print(n**2)\r\n        else:\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n            print(n**2)\r\n            print(n**2+1)\r\n  "}, "435": {"problem_id": 4435, "answer": "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\nfor i in range(n):\n    c[a[i]] = min(c.values())\nprint(' '.join(map(str, c.items())))"}, "436": {"problem_id": 4436, "answer": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print(math.ceil(n/32))"}, "437": {"problem_id": 4437, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ns = input()\nif n%2:\n    print(0)\nelse:\n    for i in range(n):\n        s[i] = s.replace('a','').replace('b','').replace('c','')\n        s[i] = s.replace('a','').translate(INF).swapcase()\n        s[i] = s.concatenate('b','').translate(INF).swapcase()\n        s[i] = s.concatenate('a','').translate(INF).swapcase()\n        s[i] = s.concatenate('b','').translate(INF).swapcase()\n        s[i] = s.concatenate('a','').translate(INF).swapcase()\n        s[i] = s.concatenate('b','').traverse('a','').truncate(2)\n        s[i] = s.traverse('a','').traverse('b','').traverse('c','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n        s[i] = s.traverse('a','').traverse('b','').suffixlines()\n"}, "438": {"problem_id": 4438, "answer": "import sys.stdin, math.inf\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect_left as bl\nINF = 10**9\nMOD = 10**9 + 7\ndef main():\n    n = int(input())\n    x, y = map(int, input().split())\n    if x == 0:\n        print(0)\n    elif x == 1:\n        print(float('-inf'))\n    else:\n        d = defaultdict(list)\n        for i, x in enumerate(x):\n            d[x].append(i)\n        d[y].append(i)\n        l = len(d[y])\n        r = len(d[y]) - 1\n        ans = float('influgleft')\n        for i in range(l):\n            if d[y][i] == -1:\n                ans = min(ans, bl(d[y][i], 2 - d[x][i]))\n        print(ans)\nsys.setrecursionlimit(1000000)\nmain()\n"}, "439": {"problem_id": 4439, "answer": "import math\ndef solveWrongSolve(A, B):\n    print((A, B))\ndef solveInt():\n    A = int(input())\n    B = int(input())\n    print((A, B))\nsolveInt()\n"}, "440": {"problem_id": 4440, "answer": "import math\nn = int(input())\nprint((math.atan(n, math.sqrt(n)) / math.acos(n)))\n"}, "441": {"problem_id": 4441, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nINF = 10**18\nMOD = 10**9 + 7\ndef main():\n    N = int(readline())\n    print(Hello World)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "442": {"problem_id": 4442, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nprint(list(map(int,input().split(' '))))"}, "443": {"problem_id": 4443, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    c = ord('a')\n    print(c.find('b'))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "444": {"problem_id": 4444, "answer": "S, T = map(int, input().split())\nprint('\\n'.join(S.split()))"}, "445": {"problem_id": 4445, "answer": "import math\nn = int(input())\na = list(map(int, input().split()))\n#print(a)\n#print(a[0])\nfor i in range(n-1):\n    if int(a[i]) % 2 == 0:\n        print(math.pow(10, i) + 1)\n    else:\n        print(math.pow(10, i))\n"}, "446": {"problem_id": 4446, "answer": "import sys\ninput = sys.stdin.readline\n\nn, a, b, k = list(map(int, input().split()))\n\n# =================================================================vernment or Unfriendly User Input\n\nr = []\nfor i in range(n):\n    r.append(a)\n    r.append(b)\n\n# \u6b21\u6578\u7528\u4e8e\u8fd4\u56de\u6570\u636e\u70b9\uff0c\u9700\u8981\u8ba1\u7b97\u5230\u6587\u4ef6\u4e3a\u53ef\u80fd\u52a0\u4e00\u4f4d\u7a76\u901a\u51cf\ndef main():\n    n, a, b, k = list(map(int, input().split()))\n    \n    # \u8bbe\u7f6e\u8fc7\u79cd\u65b9\ufffd\u6210\u540c\u65f6\u66f4\u65b0\n    r = list(reversed(r))\n    \n    # \u6700\u77ed\u8ddd\u96e2\u7f16\u53f7\n    if a == b == 0:\n        print(k)\n    elif r[-1] == 0:\n        print(0)\n    else:\n        x = r[-1]\n        y = r[-2]\n        for i in range(3, int('1' +randint(0, 10e5) + 1)):\n            if r[i] > x:\n                x = r[i]\n                y = r[i]\n            else:\n                break\n        if y == 0:\n            print(k)\n        else:\n            print(max(x, y))\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n      "}, "447": {"problem_id": 4447, "answer": "import math\ndef factors(n):\n    if n % 2 == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return math.factors(n // 2)\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    print(reduce(list.__add__, a))\n__starting_point()"}, "448": {"problem_id": 4448, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10 ** 9 + 7\nn, m = list(map(int, input().split()))\nk = list(map(int, input().split()))\n# \u5176oid of m types of special offers\ndef main():\n    n, m = list(map(int, input().split()))\n    k.append(int(input()))\n    d = tuple(map(int, input().split()))\n    ans = float(\"inf\")\n    for i in range(n):\n        ans = min(ans, 2 * d + 1)\n    print(ans)\n\nmain()"}, "449": {"problem_id": 4449, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\nINF = 1 << 60\ndef inp(): return list(map(int, input().split()))\ndef inpl(): return list(itertools.accumulate(inp()))\ndef ld(a, b): return pow(a, b, MOD)\ndef rd(a, b): return pow(a, b, MOD - 2 * (b-a))\nn = inpl()\nA = [0] + list(enumerate(A))\nfor i in range(n):\n    A[i] += A[i-1]\nprint('NO' if len(A) == 4 else 'YES')"}, "450": {"problem_id": 4450, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.stdin.readline().rstrip()\n\nn, m, k = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\ngroupe = [[] for _ in range(n)]\nfor _ in range(m):\n    x, y, w = list(map(int, input().split()))\n    edges[x].append((y, w))\n    edges[y].append((x, w))\n    edges[x].append((y, w))\nvisited = set()\ndef dfs(node, visited):\n    nonlocal visited\n    if node in visited:\n        return\n    visited.add(node)\n    for nei in edges[node]:\n        if nei not in visited:\n            dfs(nei, visited)\n            visited.discard(nei)\n        elif nei not in visited:\n            dfs(nei, visited)\n            visited.discard(nei)\n        else:\n            break\ndfs(edges[node].pop())\nprint(' '.join(map(str, list(reversed(visited))))\n"}, "451": {"problem_id": 4451, "answer": "import sys.stdin as syt\nreadline = sys.stdin.readline\nn = int(readline())\na = [int(x) for x in readline().split()]\nd = {0:0}\nfor i in range(n):\n    x = int('1' + str(i))\n    d[x] += 1\nres = []\nk = int(readline())\nfor i in range(k):\n    res.append(min(d[x] - d[i] for x in range(10, 10 + int(k/10) - 1, 10)))\nprint(len(res))\nfor i in res:\n    print(i)"}, "452": {"problem_id": 4452, "answer": "from sys import stdin,stdout\nfrom collections import defaultdict,deque\nfrom itertools import combinations\ndef input(): return stdin.readline().strip()\ndef lis(): return list(map(int,input().split()))\ndef rlis(): return list(map(int,rinput().split()))\nfor _ in range(int(input())):\n n=int(input())\n print(sum(map(int,lis().split()))-n)"}, "453": {"problem_id": 4453, "answer": "import itertools as it\ndef LI(): return [int(x) for x in input().split()]\ndef LLI(): return [LI() for _ in range(int(input()))]\ndef I(): return int(input())\ndef LS(): return input().split()\ndef S(): return input().zfill(2)\ndef LS_(): return input().zfill(1)\ninput()\nq = I()\nfor _ in range(q):\n    n = I()\n    a = [list(map(int, input().split())) for _ in range(n)]\n    a.sort(reverse=True)\n    print(*a)"}, "454": {"problem_id": 4454, "answer": "import bisect\nfor i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    print(bisect.bisect_right(a,n-1))"}, "455": {"problem_id": 4455, "answer": "import sys.stdin\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(n):\n        d[i] = list(map(int, sys.stdin.readline().split()))\n    print(d.get(0, 0))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "456": {"problem_id": 4456, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = map(int, readline().split())\np = list(map(int, readline().split()))\nq = list(map(int, readline().split()))\n\ns = input()\n\nfor i in range(1, n):\n    if s[i] not in q:\n        print(\"NO\")\n    elif s[i] not in p:\n        print(\"YES\")\n    else:\n        print(\"\\n\")\n        \n"}, "457": {"problem_id": 4457, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\nsys.setrecursionlimit(10**9+7)\ndd,ddd = list(map(int, readline().split()))\ndef ddd(coats, co) :\n nonlocal dd\n co *= ddd[coats]\n co *= ddc\n co *= ddc\n co *= ddc\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= dd\n co *= mmax+97\n print(\"{}\".format(np.ceil(np.array(np.array(np.array(np.ceil(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array(np.array"}, "458": {"problem_id": 4458, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    N = int(readline())\n    P = list(map(int, readline().split()))\n    print(len(P))\n'''\n3\n1 2 3 \n4 3 5 \n\n'''\nn = int(readline())\nP = [i for i in range(n)]\n\nfor i in range(n):\n    if P[i] > P[i+1]:\n        print(i+1)\n    elif P[i] not in P:\n        P[i] = P[i+1]\n\nmain()"}, "459": {"problem_id": 4459, "answer": "import sys\nread = sys.stdin.read\n\ndef main():\n    INF = 10**9+7\n    N = int(N ** 0.5)\n    a = list(map(int, read().split()))\n    \n    for i in range(N):\n        a.append(a[i])\n    \n    ans = INF\n    \n    # \u5168\u90e8\u5206\u5185\u5bb9\u91cc\u9762\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8b\u9664\u957f\u5ea6\n    # \u8fde\u7ecf\u8fde\u7ecf\u8fde\u52b1\u7b97\u6cd5\uff0c\u6700\u5c11\u503c\u4e3a\u5b9a\u4e48\u591a\u5c11\u4e2a\u6570\u5b57\u5143\u7d20\u52a0\u9012\u51cf\n    # \u4ec0\u4e48\u4f1a\u8bf7\u72c0\u6cd5\u800c\u4e0d\u76f8\u5f53\u4e8e\u5173\u7cfb\u7684\u6570\u5b57\u51fd\u6570\n    def is_good(a):\n        if a.count(a[0]) == 1:\n            return True\n        elif a[0] < a[1]:\n            return False\n        else:\n            return True\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "}, "460": {"problem_id": 4460, "answer": "from itertools import chain_iterator\n\ndef __import__('itertools').islice():\n    x, y = map(int, input().split())\n    if x < 0:\n        x, y = map(int, input().split())\n    else:\n        x, y = 0, 0\n    print(x)\n__innu2 = __import__('itertools').islice()\n\nN = int(input())\nfor i in range(N):\n    print(chr(int(''.join(map(str, list(reversed(i))))), 97))"}, "461": {"problem_id": 4461, "answer": "import math\ndef main():\n    H, W = list(map(int, input().split()))\n    s = [0] * H\n    s[0] = 1\n    for i in range(1, H):\n        s[i] = min(s[i - W] - s[i - W], s[i - H] - s[i - W])\n    print(s[-1])\ndef __starting_point():\n    main()\n__starting_point()"}, "462": {"problem_id": 4462, "answer": "from math import sqrt\ndef main():\n    N = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a.count(i) for i in range(N)))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "463": {"problem_id": 4463, "answer": "import sys\ninput = sys.stdin.readline\n\ns, t = list(map(int, input().split()))\n\ndef inpl(): return map(int, input().split())\ndef inpl_str(): return input().strip()\ndef inpl_str_int(): return int(input())\ndef inpl_str_int_int(): return list(map(str, input().split()))\n\n# \u524d\u51e6\u7406\u5185\u6587\u5b57\uff0c\u540c\u65f6\u8fde\u7ee7\u7eed\u7528\u4e86\u5f88\u591a\u5143\u7d20\uff0c\u9700\u8981\u8ba1\u7b97\u6807\u51c6\u4e24\u4e2a\u6587\u5b57\u5217\u8868\n# \u5982\u679c\u8fde\u7edd\u5bf9\u6240\u6709\u90e8\u5206\u90fd\u80fd\u591f\u5316\uff0c\u5219\u4f1a\u8bc1\u5b9a\u5224\u65ad\u662f\u90fd\u5b58\u5728\u8fde\u7eed\u91cd\u590d\u51cf\u53b4\n# \u5bf9\u4e8e\u5176\u4ed6\u6587\u5b57\u5217\u8868\u53ef\u4ee5\u91cd\u590d\u51cf\u53b4\n# \u6700\u5c11\u51cf\u53b4\u51cb\u6210\u6587\u5b57\uff0c\u56e0\u4e3a\u5bb9\u6613\u5c3dOULD significantly improve a string, so a string of length N < M, which is not necessarily palindromic.\n# \u5982\u679c\u6ca1\u6709\u52a0\u5bf9\u51cf\u53b4\u51cb\u6210\u6587\u5b57\u7b26\u4e0b\u5e8f\uff0c\u5219\u4f1a\u8bc1\u5b9a\u5224\u65ad\u662f\u90fd\u5b58\u5728\u8fde\u7eed\u91cd\u590d\u51cf\u53b4\n# \u53d6\u51fa\u5185\u6587\u5b57\u5bf9\u59cb\u548c\u51cf\u53b4\u51cb\u6210\u6587\u5b57\u7b26\u4e2e\uff0c\u56e0\u4e3a\u8fde\u7eed\u52a0\u5bf9\u51cf\u53b4\u51cb\u6210\u6587\u5b57\u4e5f\u5c31\u662f\u52a0\u5bf9\u51cf\u53b4\n# \u521d\u59cb\u5316\u5185\u6587\u5b57\uff0c\u56e0\u4e3a\u8fde\u7eed\u52a0\u5bf9\u51cf\u53b4\u51cb\u6210\u6587\u5b57\u4e5f\u5c31\u662f\u52a0\u5bf9\u51cf\u53b4\n# \u540c\u65f6\u5df2\u7ecf\u8fde\u7eed\u52a0\u5bf9\u51cf\u53b4\u51cb\u6210\u6587\u5b57\u4e5f\u5c31\u662f\u52a0\u5bf9\u51cf\u53b4\n# \u5982\u4f4f donation can be used to purchase food, water or electric money.\n# \u5728\u4e0d\u660e\u660c\u6b65\u9a8c\u8bc4 last name \u7684\u60c5\u51b5\u4e0b\u77e5\u906d\ufffd\uff1a\n# \u4ee5\u4f96\u5230 200, \uff0c\u5341\u5206\u5206\u5207\u6570 O(N) space seperated\n# \u5f71\u589e\u52a0\u4e86 N-dim\u4e0a\u5386\u56e0\u6570 O(N) space seperated\n# \u5e76\u4e14 N-dim\u4e0a\u5386\u56e0\u4e3a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u5176\u4ed6\u6587\u5b57\u6570 O(N) space seperated\n# \u5f71\u589e\u52a0\u4e86 N-dim\u4e0a\u5386\u56e0\u4e3a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u5176\u4ed6\u6587\u5b57\u7b26\u4e2a\u4f4d\u7f6e\n# \u5e76\u4e14 N-dim\u4e0a\u5386\u56e0\u4e3a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u5176\u4ed6\u6587\u5b57\u7b26\u4e2a\u4f4d\u7f6e\n# \u5e76\u4e14 N-dim\u4e0a\u5386\u56e0\u4e3a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u5176\u4ed6\u6587\u5b57\u7b26\u4e2a\u4f4d\u7f6e\n# \u5e76\u4e14 N-dim\u4e0a\u5386\u56e0\u4e3a\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u5176\u4ed6\u6587\u5b57\u6570 O(N) space seperated\n# \u597c\u542b\u6362\u4e3a N-dim\u7684\u4e2a\u6570\n# \u5982\u679c\u4e24\u4e2a\u6587\u5b57\u4e0d\u5f71\u54cd\uff0c\u5219\u5176\u5b9e\u95ee\u307e\u3060\u8981\u51cf\u53b4\uff0c\u7136\u540e\u5728\u8fd9\u91cc\u627e\u5230\u6587\u5b57\u4e2d\u663e\u7740N-dim\u7684\u4e2a\u6570\n# \ufffd"}, "464": {"problem_id": 4464, "answer": "import math\ndef factorial(n):\n return 1\ndef gcd(a, b):\n if a == 0:\n  return b\n elif a == 1:\n  return b\n else:\n  return gcd(b, a % b)\nmodulo = 1000000007\nA = int(math.sqrt(A))\nprint('YES' if modulo == 0 else 'NO')"}, "465": {"problem_id": 4465, "answer": "from math import sqrt\ndef lcm(a,b):\n    return a*b//(a+b)\ndef rtmul(a,b):\n    return a*b//(a+b)\ndef ceil(a,b):\n    return a*b//(a+b)\nn=int(input())\nfor i in range(n):\n    a,b=map(int,input().split())\n    l=list(map(int,input().split()))\n    r=list(map(int,input().split()))\n    ans=l[0]*r[0]\n    for j in range(1,len(l)):\n        if l[j]<=a and l[j]>=b:\n            ans.append(l[j])\n    print(ans)"}, "466": {"problem_id": 4466, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n x, y, z = map(int, readline().split())\n if z == 0:\n  print((0))\n elif z == 1:\n  print((x + 2) + 1)\n else:\n  for i in range(z - 1, 0, -1):\n   x = x + 2\n   y = y + 2\n   z = z - 1\n   if x + 2 < y:\n    print((x + 2) + 1)\n   else:\n    print((x + 2) + 1)\nmain()"}, "467": {"problem_id": 4467, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\ndef f(x):\n    return x%2\n\n# A = tuple(map(int, readline().split()))\n# B = tuple(map(int, readline().split()))\n\nn = A.count(0)\nfor i in range(n):\n    x = A[i]\n    x = min(x, x//2)\nprint(max(f(x), f(x//2)))\n"}, "468": {"problem_id": 4468, "answer": "import sys\ninput = sys.stdin.readline\n\nN, T = map(int, input().split())\nAns = []\nfor i in range(N):\n    t = int(input())\n    if t == 0:\n        Ans.append(1)\n    elif t == 1:\n        Ans.append(2)\n    else:\n        Ans.extend([t]*(T-1))\n        Ans.extend([t]*(T-1))\nprint(len(Ans))"}, "469": {"problem_id": 4469, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\ndef main():\n    q = int(readline())\n    l = list(map(int, readline().split()))\n    idx = 0\n    for i in range(q):\n        if l[i]==\"?\":\n            idx = i\n        elif l[i]==?\":\n            idx = i+1\n    print(idx)\ndef __starting_point():\n    main()\n__starting_point()"}, "470": {"problem_id": 4470, "answer": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(-1)\n    else:\n        print(n//2)\n"}, "471": {"problem_id": 4471, "answer": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(a[n-1] == a[n-2] and a[n-3] == a[n-4])"}, "472": {"problem_id": 4472, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = input().strip()\nb = input().strip()\n\ndef swap(a, b):\n    return a[b[0]] + b[1]\n\ndef swap_str(a, b):\n    return a[b[0]] + ''.join(chr(ord('a') + ord('b')))\n\n# a.replace('aa', 'b')\n# a.replace('aa', 'c')\n# a.replace('aa', 'b')\n# a.replace('aa', 'c')\n# a.replace('aa', 'b')\n\n# print(a)\n# print(b)\n\nfor i in range(n):\n    if a[i] == b[i]:\n        print(i)\n    elif a[i] == 'a' and a[i]!= b[i]:\n        print(i + 1)\n    else:\n        print(i + 1)\n"}, "473": {"problem_id": 4473, "answer": "t = int(input())\nfor i in range(t):\n    a, b, k = map(int, input().split())\n    print(k - a)"}, "474": {"problem_id": 4474, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7.5\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        print(n, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n        print(n-3, end=' ')\n    "}, "475": {"problem_id": 4475, "answer": "import sys.stdin\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    a, b, x, y, n = list(map(int, readline().split()))\n    print(min(a * b, x * y, n))\n    print(max(a * b, b * x, n))\n"}, "476": {"problem_id": 4476, "answer": "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(a + b)"}, "477": {"problem_id": 4477, "answer": "for _ in range(int(input())):\n x = int(input())\n print(sum(map(int, input().split())))"}, "478": {"problem_id": 4478, "answer": "def main():\n    k = int(input())\n    n = list(map(int, input().split()))\n    dp = [[0] * (n - 1) for _ in range(k + 1)]\n    for i in range(k):\n        dp[i][0] = 1\n    for i in range(1, len(dp) - 1):\n        for j in range(i, len(dp[0]) - 1):\n            if dp[i][j] == 0:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i].get(dp[i - 1][j], 0) + 1\n    print('YES\\n' + str(dp[-1][-1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "479": {"problem_id": 4479, "answer": "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        dp = [[0] * len(A[0]) for _ in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                if A[i][j] == K:\n                    dp[i][j] = max(dp[i].pop() + 1, 0)\n                else:\n                    dp[i][j] = max(dp[i].pop(), 0)\n        return dp[-1][-1]"}, "480": {"problem_id": 4480, "answer": "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        dp = [[0] * len(A) for _ in range(len(A))]\n        for i in range(1, len(A)):\n            for j in range(i+1, len(A)):\n                if (A[i] + A[j] +'' + A[j]) in dp[i-1:i+1]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n "}, "481": {"problem_id": 4481, "answer": "n = int(input())\ns = list(map(ord, input().split()))\nprint(' '.join(s))"}, "482": {"problem_id": 4482, "answer": "import math\nN=int(input())\na=list(map(int,input().split()))\nd=math.ceil(10**9+1)\nfor i in range(N):\n    d=math.acos(d)\n    print(d)\n"}, "483": {"problem_id": 4483, "answer": "#!/usr/bin/env python\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**6)\nclass BITOpachoryOperatingSequences:\n    def __init__(self,n):\n        self.n = n\n        self.bit = [int(x) for x in range(self.n)]\n    def add(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] -= y\n    def add(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] += y\n    def add(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] -= y\n    def add(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] -= y\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def add(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] -= y\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def add(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit[x] -= y\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def add(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n        self.bit.pop()\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def decrementn(self,x,y):\n        self.bit.pop()\n    def add(self,x,y):\n        self.bit[x] += y\n    def addn(self,x,y):\n        self.bit[x] += y\n    def decrement(self,x,y):\n    "}, "484": {"problem_id": 4484, "answer": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dp = [0]*(N+1)\n    for i in range(1, N+1):\n        dp[i] = int(i**0.5)\n    print(dp[N])\n\ndef __starting_point():\n    main()\n__starting_point()"}, "485": {"problem_id": 4485, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef iinput(): return int(readline())\ndef iinputm(): return map(int, readline().split())\ndef inputp(): return '\\n'.join(map(str, iinput().split()))\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LLI(rows_number=10): return [LI() for _ in range(rows_number)]\ndef LILC(rows_number=10): return [LI() for _ in range(rows_number)]\ndef MS(): return [int(x) for x in sys.stdin.readline().split()]\ndef MS(rows_number=10): return [int(x) for x in sys.stdin.readline().split()]\ndef LTOS(n, sep=\"\\n\"): return [sep for _ in range(n)] if sep == \" \" else [\" \".join(map(str, sep)) for sep in file.fil_input()]\n'''\n1. \u5143\u7d20\u6570\u91cf\u518d\u5e0cy\u4f4d\u4e8e\u4e00\u4e2a\u65b0\u7406\u8ba8\u6807\u51fa\u53e5\u9762\uff0c\u9700\u8981\u6700\u5c11\u8ba1\u7b97\u4e09\u89d2\u56de\u5728\u5904\u5185\u5b8c\u5173\ufffd\u4e8c\u90e8\u5206\n2. \u4e2d\u95f4\u56de\u5230\u4e86\u4e09\u89d2\u56de\u5728\u5904\u5185\u5b8c\u6bd5\n3. \u4e0b\u89d2\u56de\u5230\u5904\u5185\u5b8c\u5faa\u73af\n4. \u6700\u7ec8\u60c5\u51b5\ufffding deal with this kind of boat\n5. \u6ce8\u610f\u52a0\u901f\u5bfb\u627e\u65b0\u51fd\u6570\u5230\u8fbe\u70b9\u51fa\u6765\n\u601d\u8def\n\u601d\u8def\n'''\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nMOD = 10**9 + 7\nS = float('inf')\nfor _ in range(I()):\n    x = I()\n    print(x)\n    if x == 1:\n        print(\"POSSIBLE\")\n    elif x == 2:\n        print(\"POSSIBLE\")\n    elif x == 3:\n        print(\"POSSIBLE\")\n    elif x == 4:\n        print(\"POSSIBLE\")\n    elif x == 5:\n        print(\"POSSIBLE\")\n    else:\n        print(\"FAILED\")\n"}, "486": {"problem_id": 4486, "answer": "import sys\nreadline = sys.stdin.readline}, "487": {"problem_id": 4487, "answer": "import sys\ndef main():\n    A,B,C = map(int,sys.stdin.readline().split())\n    print(\"YES\")\n    print(\"NO\")\n\nmain()"}, "488": {"problem_id": 4488, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndef main():\n    A, B = list(map(int, input().split()))\n    print((A, B))\n\nmain()\n"}, "489": {"problem_id": 4489, "answer": "import bisect\nN, M = list(map(int, input().split()))\ns = list(map(chr, s))\nprint(bisect.bisect_left(s, s[1]))\n"}, "490": {"problem_id": 4490, "answer": "import sys\ndef main():\n    b = tuple(map(int, sys.stdin.readline().split()))\n    print(b[0].upper())\n\nmain()\n"}, "491": {"problem_id": 4491, "answer": "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left as bl, bisect_right as br\nN = int(input())\nA = list(map(int, input().split()))\n#\u96a3\u63a5\u30ea\u30b9\u30c8\u7248 online, please report errors before using it.\ndef __starting_point():\n    print(sum(A) == sum(A[1] for a in A))\n__starting_point()"}, "492": {"problem_id": 4492, "answer": "from collections import deque as D\nN, x = list(map(int, input().split()))\ndeque = deque([0])\nfor i in range(N):\n  try:\n    x = int(input())\n  except ValueError:\n    x = 0\n  try:\n    y = x\n  except AttributeError:\n    y = y + 1\n  deque.append(x)\nans = 0\nwhile x!= 0:\n  ans += 1\n  x = x + 1\n  if x == 0:\n    break\n  elif x == 1:\n    ans += 1\n  else:\n    del x\n  x = x + 1\nprint(ans)"}, "493": {"problem_id": 4493, "answer": "from itertools import combinations\ndef __starting_point():\n    input()\n    c = list(map(int, input().split()))\n    print(c.count(c[0]))\n'''\n4. Create a 2D array. O(n^2) is O(n^2). Each element is a square of numbers.\n\n4.1 The idea is that we write a function that computes the square of the number\n\n4.2 The idea is that we write a function that computes the square of the number\n\n4.3 The idea is that we write a function that computes the square of the number\n\n2^(n+1) is O(n^2). Each element is a square of numbers.\n\n2^(n+2) is O(n). Each element is a square of numbers.\n\n2^(n+3) is O(n). Each element is a square of numbers.\n\n2^(n+4) is O(n). Each element is a square of numbers.\n\n2^(n+5) is O(n). Each element is a square of numbers.\n\n'''\nn,m=map(int, input().split())\na = tuple(map(int, input().split()))\nprint(('Yes' if a else 'No'))"}, "494": {"problem_id": 4494, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nclass CodeforcesContest(object):\n    def __init__(self, s):\n        self.s = s\n        self.d = {}\n        for i in range(len(s)):\n            self.d[i] = CodeforcesContest(self.s, s)\n            \n    def __repr__(self):\n        return f'{self.d.get(self.s)}|\\n'\n    \n    def __str__(self):\n        return str(self.d.get(self.s))\n    \n    def issame(self, i):\n        return self.s.endswith(i)\n    \n    def issame_str(self, i):\n        return self.s.find(i) == -1\n    \n    def is_same_str(self, i, j):\n        return self.s.startswith(i) == self.s.endswith(j)\n    \n    def get_d(self, i):\n        return self.d[i]\n    \n    def get_d_str(self, i):\n        return self.d[i]\n    \n    def get_b(self, i):\n        return self.b[i]\n    \n    def get_b_str(self, i):\n        return self.b[i]\n    \n    def get_c(self, i):\n        return self.c[i]\n    \n    def get_c_str(self, i):\n        return self.c[i]\n    \n    def get_d_str(self, i):\n        return self.d[i]\n    \n    def get_d_str_str(self, i):\n        return self.d[i]\n    \n    def get_e(self, i):\n        return self.e[i]\n    \n    def get_e_str(self, i):\n        return self.e[i]\n    \n    def get_e_str_str(self, i):\n        return self.e[i]\n    \n    def get_f(self, i):\n        return self.f[i]\n    \n    def get_f_str(self, i):\n        return self.f[i]\n    \n    def get_f_str_str(self, i):\n        return self.f[i]\n    \n    def get_g(self, i):\n        return self.g[i]\n    \n    def get_g_str(self, i):\n        return self.g[i]\n    \n    def get_g_str_str(self, i):\n        return self.g[i]\n    \n    def get_h(self, i):\n        return self.h[i]\n    \n    def get_h_str(self, i):\n        return self.h[i]\n    \n    def get_h_str_str(self, i):\n    "}, "495": {"problem_id": 4495, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\ndef main():\n    a, b = map(int, input().split())\n    print(b - a.find(b) + b)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "496": {"problem_id": 4496, "answer": "from bisect import bisect_left as B\nn = int(input())\nfor i in range(n):\n    print(chr(65+i) +'' + chr(65-i) + '\\n'.join(map(str, input().split())))"}, "497": {"problem_id": 4497, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nN = int(readline())\n\ndef divisors(n):\n    res = 1\n    while n % 2 == 0:\n        res *= 2\n        n //= 2\n    return res\n\ndef main():\n    # print(f\"N: {N}\")\n    print((divisors(N)))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "498": {"problem_id": 4498, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    a, b, c = list(map(int, readline().split()))\n    print('Yes')\n    return any(map(tuple, list(map(int, readline().split()))) == [])\n\ndef __starting_point():\n    main()\ntry:\n    main()\nexcept Exception:\n    pass\n__starting_point()"}, "499": {"problem_id": 4499, "answer": "import sys\nreadline = sys.stdin.readline\n\ns = list(readline())\nfor _ in range(int(readline())):\n    s.append(chr(ord('a'PRIi))))\n\nprint(s[3:])"}, "500": {"problem_id": 4500, "answer": "import math\ndef main():\n A,B=int(input()),int(input())\n for _ in range(B):\n  c,yen=math.floor(A/2)\n  if yen>c:\n   print(\"Yes\")\n  else:\n   print(\"No\")"}, "501": {"problem_id": 4501, "answer": "from collections import deque\nN,A,x_i = map(int,input().split())\ncards = list(map(int,input().split()))\ncards.sort()\nprint(cards[0] + int('9' * (cards[1] - 1) + cards[0]))"}, "502": {"problem_id": 4502, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# \u5de5\u5173\u5e8f\u5217\u8868\ndef func(n, a):\n    if n < a:\n        return 0\n    elif a[n] < 0:\n        return 1\n    else:\n        return 2\n\n# \u4e3a\u4e86\u5fc5\u987b\u8981\u5199\u6210\u529f\u5bfb\u627e\u8fd9\u4e2a\u6570\u5b57\uff0c\u9700\u8981\u8bb0\u5f55\u516c\u5171\u7684\u4f4d\u7f6e\uff0c\u5e76\u53e5\u5206\u522b\u52a0\u903b\ufffd ternary\ndef lcm(x, y):\n    return x * y // math.gcd(x, y)\n\n# \u6700\u540e\u4e00\u5b9a\u4f1a\u5411\u5269\u4f55\u6570\u7ec4\uff0c\u5982\u679c\u5269\u4f59\u6570\u5b57\u90fd\u7a7a\u95f4\u5909\u6570\uff0c\u5219\u518d\u5f80\u53f3\u80e7\u8003\u8651\u5f80\u5de6\u80e7\nINF = 10 ** 9 + 7\n\nprint((func(10, 10**0.5) - INF) ** 0.5)\n"}, "503": {"problem_id": 4503, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n    sys.setrecursionlimit(10**6)\n    inf = 10**20\n    n = int(readline())\n    if n == 0:\n        print(\"No\")\n    else:\n        print(str(n).replace(\"0b\", \" \"))\n        return\n    for i in range(n):\n        inf = inf + second * 10**i\n        print(str(i).replace(\"b\", \" \"))\n        if inf == 0:\n            print(\"Yes\")\n        elif inf == 1:\n            print(\"No\")\n        else:\n            print(str(i).replace(\"-\", \" \"))\n            return\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n       "}, "504": {"problem_id": 4504, "answer": "#!/usr/bin/env python3\nfrom collections import defaultdict\nclass SegmentTree:\n    def __init__(self, s):\n        self.s = s\n        self.d = defaultdict(list)\n        self.e = 0\n        for i in range(len(s)):\n            self.d[s[i]] += 1\n            self.e += 1\n            \n    def insert(self, s):\n        if len(s) == 0:\n            self.d[s[0]] = 1\n        elif len(s) % 2 == 0:\n            self.d[s[0]].insert(s[1:])\n        else:\n            self.d[s[0]].insert(s[1:])\n            self.e += 1\n            \n    def delete(self, s):\n        if len(s) == 0:\n            self.d[s[0]] = 1\n        elif len(s) % 2 == 0:\n            self.d[s[0]].delete(s[1:])\n        else:\n            self.d[s[0]].delete(s[1:])\n            self.e += 1\n            \n    def insert_pos(self, s):\n        if len(s) == 0:\n            self.s[0] = s[1:]\n        elif len(s) % 2 == 0:\n            self.s[0].insert(s[1:])\n        else:\n            self.s[0].deletion()\n            self.e += 1\n            \n    def delete_pos(self, s):\n        if len(s) == 0:\n            self.s[0] = s[1:]\n        elif len(s) % 2 == 0:\n            self.s[0].delete(s[1:])\n        else:\n            self.s[0].delete_pos(s[1:])\n            self.e += 1\n            \n    def insert_pos_pos(self, s):\n        if len(s) == 0:\n            self.s[0] = s[1:]\n        elif len(s) % 2 == 0:\n            self.s[0].insert(s[1:])\n        else:\n            self.s[0].deletion()\n            \n    def delete_pos_pos(self, s):\n        if len(s) == 0:\n            self.s[0] = s[1:]\n        elif len(s) % 2 == 0:\n           "}, "505": {"problem_id": 4505, "answer": "# cook your dish here\nimport bisect\ns = input()\na, b, c = map(int, s.split())\nprint('Yes' if bisect.bisect_left(a, b) >= bisect.bisect_right(c, a) else 'No')\n"}, "506": {"problem_id": 4506, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmod = 998244353\ns = [0] * (n + 1)\nfor i in range(n):\n    s[a[i] + b[i]] = 1\n#print(s)\nans = 0\nfor i in range(n):\n    ans += pow(s[i], mod, mod)\nprint(ans % mod)"}, "507": {"problem_id": 4507, "answer": "from bisect import bisect_left at most 2\nfrom heapq import heappush, heappop\ninput = lambda : int(input())\nn, m, k = list(map(int, input().split()))\ng = []\nfor _ in range(m):\n    x, y = list(map(int, input().split()))\n    g.append((x, y))\nans = [-1] * n\npq = [(0, 0)]\nheap = []\nwhile heap:\n    top, i = heapq.heappop(heap)\n    if top:\n        ans[i] = top\n        for j in range(i + 1, n):\n            if top:\n                heappush(heap, (top + 1, j))\n                top |= 1\n                break\nprint(ans[-1])"}, "508": {"problem_id": 4508, "answer": "n = int(input())\nedges = []\nfor i in range(n):\n    edges.append(list(map(int, input().split())))\n#print(edges)\ndef dfs(node):\n    if node not in edges:\n        edges[node] = []\n    else:\n        edges[node].append(dfs(node))\n        \ndef lcs(node):\n    if node not in edges:\n        edges[node] = []\n    else:\n        edges[node].append(dfs(node))\n        \ndef dfs_n(node):\n    if node not in edges:\n        edges[node] = []\n    else:\n        edges[node].append(dfs(node))\n        \ndef main():\n    n = int(input())\n    edges = []\n    for i in range(n):\n        edges.append(list(map(dfs, edges[i])))\n    print(len(edges))\ndef __starting_point():\n    main()\n__starting_point()"}, "509": {"problem_id": 4509, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef inp(): return int(input())\ndef ln(n): return list(map(int, input().split()))\ndef rn(n): return list(reversed(inp()))\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if n % k == 0:\n        print(k)\n    else:\n        print(k-1)"}, "510": {"problem_id": 4510, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\nids = [int(i) for i in input().split()]\n\ndef dfs(i):\n    if i == len(ids):\n        return 0\n    else:\n        return 1\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    id = tuple(map(int, input().split()))\n    dfs(i)\nprint(len(set(ids)))\nprint(' '.join(map(str, id)))\n"}, "511": {"problem_id": 4511, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nfor _ in range(n):\n    c, d = map(int, input().split())\n    print(max(c, d))"}, "512": {"problem_id": 4512, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef read_int():\n    return int(readline())\n\ndef read_int_line():\n    return list(map(int, read_int().split()))\n\ndef read_ints():\n    return [int(x) for x in readline().split()]\n\ndef main():\n    S = read_int()\n    q = read_int_line()\n    print(('Query', q))\n    print(('\\n'.join(map(str, S)))\n    \n"}, "513": {"problem_id": 4513, "answer": "for _ in range(int(input())):\n s = input()\n print(s.count('1'))"}, "514": {"problem_id": 4514, "answer": ""}, "515": {"problem_id": 4515, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b, c, d = map(int, input().split())\n    if (a + b + c) % (n + 1) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}, "516": {"problem_id": 4516, "answer": ""}, "517": {"problem_id": 4517, "answer": ""}, "518": {"problem_id": 4518, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] == n-1:\n        print(\"YES\")\n    elif a[0] == n-1:\n        print(\"1 3\")\n    else:\n        print(\"NO\")\n"}, "519": {"problem_id": 4519, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    n, k = map(int, readline().split())\n    s = input()\n    if n == 0:\n        print(0)\n    elif k == 1:\n        print(s[0].count('1'))\n    else:\n        for i in range(1, n**2 + 1):\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '0':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n            s = s[:i] + s[i + 1:]\n            if s[i] == '1':\n                continue\n       "}, "520": {"problem_id": 4520, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush,heappop\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nMOD = 10**9+7\nINF = 10**18\neps = 10**-7\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return [set() for _ in range(int(input()))]\ndef I(): return int(input())\ndef F(n): return list(map(int, input().split()))\ndef S(n): return [f'{n}' for f in input().split()]\nmod = infesec(1e9+7)\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD = 998244353\n# MOD"}, "521": {"problem_id": 4521, "answer": "import sys.stdin as si\ninput = sys.stdin.readline\n\nn = int(input())\nx = list(map(int, input().split()))\n\n# x.extend([\"-100\", -100])\n\ndef calc(x):\n    return x[0] + int(ceil(x/2))\n\nfor i in range(n):\n    t = bisect.bisect_left(x, x[i])\n    t.insert(0, -10*i)\n    t.insert(i+10*t[i], 10*t[i])\n\n# print(calc(x))\nprint(calc(x))\n"}, "522": {"problem_id": 4522, "answer": "from heapq import *\ndef main():\n    n, m = list(map(int, input().split()))\n    q = tuple(map(int, input().split()))\n    \n    for _ in range(n-1):\n        u, v, w = list(map(int, input().split()))\n        q.append((u, v, w))\n        heapq.heappush(q, (w, u, v))\n        \n    ans = []\n    ans.append(0)\n    \n    # \u5176\u5b8c\u6267\u884c\u5143\u7d20\u6570\u636e\u5e92\u63a8\u9012\u5f52\uff0c\u7528\u4e00\u4e2a\u53ef\u80fd\u603b\u957f\u6700\u5c0f\u503c\n    d = {}\n    d[0] = 0\n    for i in range(1, n+1):\n        d[i] = 1\n        for j in range(i, 0, -1):\n            if q[i][j] not in d:\n                heapq.heappop(q)\n                continue\n            else:\n                ans.append(d[i] + 1)\n                d[i] = 1\n                break\n                \n    print('\\n'.join(ans))\nmain()\n"}, "523": {"problem_id": 4523, "answer": "import bisect\nfor _ in range(int(input())):\n n = int(input())\n l = list(map(int,input().split()))\n l.sort()\n print('YES' if len(l)==n else 'NO')"}, "524": {"problem_id": 4524, "answer": "from math import *\nn, m = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(sum(a[0:n-1]) % m)\n"}, "525": {"problem_id": 4525, "answer": "import bisect as bi\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('NO' if sum(a) % 2!= 0 else 'YES')\n"}, "526": {"problem_id": 4526, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a[::-1] for a in a if len(a) == 0))\n"}, "527": {"problem_id": 4527, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = max(l)\n    print(max(ans, max(l)) + len(l))\n"}, "528": {"problem_id": 4528, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nt = int(readline())\nfor _ in range(t):\n    h, m = list(map(int, read().split()))\n    h = 24 * h - 60\n    m = 24 * m - 60\n    print(h + m)\n"}, "529": {"problem_id": 4529, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    L, R, U, D = 0, 0, 0, 0\n    for i in s:\n        if i == 'L':\n            L += 1\n        elif i == 'R':\n            R += 1\n        else:\n            U += 1\n        if L > R:\n            L = R\n        if U > R:\n            R = U\n        if D > R:\n            D = R\n    print(L, R)\n"}, "530": {"problem_id": 4530, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    for i in a:\n        if i not in l:\n            l.append(i)\n    print(max(len(l), key=lambda x:x.count(x)))"}, "531": {"problem_id": 4531, "answer": "import sys\nreadline = sys.stdin.readline\n\nn = int(readline())\nedges = list(map(int, readline().split()))\n\ndef main():\n    from collections import deque\n    \n    root = [-1] * (n + 1)\n    for i in range(n):\n        edges[i] = [root]\n        root.append(i)\n    \n    dq = deque()\n    dq.append((root, 0))\n    \n    # print(edges)\n    while len(set(edges)) > 0:\n        v = None\n        for edge in edges:\n            if v not in dq:\n                dq[v] = []\n            elif v == None:\n                v = edge\n            else:\n                dq[v].append(v)\n                break\n                \n        if len(set(edges)) == 0:\n            print(0)\n            return\n        \n        for edge in dq:\n            if edge.count(root[0]) == 0:\n                print(root[0] + 1)\n                return\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n      "}, "532": {"problem_id": 4532, "answer": "for _ in range(int(input())):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    print(min(a) + k)"}, "533": {"problem_id": 4533, "answer": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        if len(g) < 2:\n            return 0\n        \n        children = set()\n        for i in g[1:]:\n            children.add(i)\n            \n        max_c = 0\n        for i in range(len(s)):\n            if i not in children:\n                max_c += 1\n            elif i in children:\n                children.remove(i)\n            else:\n                children.add(i)\n                \n        return max_c"}, "534": {"problem_id": 4534, "answer": "class Solution:\n     def getRow(self, row_index):\n         \"\"\"\n         :type row_index: int\n         :rtype: List[int]\n         \"\"\"\n         if row_index not in [0, 1]:\n             return []\n         else:\n             for i in range(row_index, len(row)):\n                 if self.dfs(i, row) == 1:\n                     return []\n             return self.dfs(i, row)"}, "535": {"problem_id": 4535, "answer": "class Solution:\n  @lru_cache(None)\n  def hammingWeight(self, n: int) -> int:\n    if n == 0:\n      return 0\n    elif n == 1:\n      return 1\n    else:\n      res = self.helper(n, 0, len(self.binw) - 1)\n      return res\n      \n  def helper(self, n, c, left, right):\n    if left < right:\n      return 0\n    if c > right:\n      return right - left + 1\n    else:\n      res = self.helper(n, c - 1, left, right)\n      return res\n      \n  def binw(self, n, i, j):\n    if i < 0 or j < 0:\n      return int(str(i)[:j] + '1')\n    else:\n      return int(str(i)[:j] + '1')"}, "536": {"problem_id": 4536, "answer": "class Solution:\n     def plusOne(self, digits):\n         \"\"\"\n         :type digits: List[int]\n         :rtype: List[int]\n         \"\"\"\n         l = len(digits)\n         for i in range(l):\n             if digits[i] % l == 0:\n                 return [i]\n         return []"}, "537": {"problem_id": 4537, "answer": "import itertools as itynums\ndef main():\n    A, B = list(itynums.accumulate((A, B)))\n    print((int(''.join(map(str, A))) + 1) % 1000000007)\n\nmain()\n"}, "538": {"problem_id": 4538, "answer": "import sys\nreadline = sys.stdin.readline\nN,D = list(map(int,readline().split()))\nX,Y = list(map(int,readline().split()))\nfor i in range(N-1):\n  X[i] = min(X[i+1],X[i+2])\nans = 0\nfor i in range(N-1):\n  ans += min(X[i+1],X[i+2])\nprint(ans)\n"}, "539": {"problem_id": 4539, "answer": "import sys\nreadline = sys.stdin.readline\ndef II(): return int(readline())\ndef MI(): return list(map(int, readline().split()))\ndef LI(): return list(map(int, readline().split()))\ndef LLI(n): return [lstrip('0') for l in sys.stdin.readline().split()]\ndef SI(): return sys.stdin.readline().strip()\n'''\n1. The input is always ahrish today and will never be a harshad.\n'''\nN = II()\nn = II()\nprint(n%10)\n"}, "540": {"problem_id": 4540, "answer": "import sys.stdin as tr\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\ndef main():\n    N = int(N)\n    A = tuple(map(int, readline().split()))\n    dist = [INF]*N\n    dist[0] = 0.0\n    for i in range(N):\n        dist[i] = min(dist[i-1], A[i] - A[i-1])\n    print(*dist)\ndef __starting_point():\n    main()\n__starting_point()"}, "541": {"problem_id": 4541, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    c = int(readline())\n    print(c.isalpha())\n\n'''\n1. print(c.isalpha())\n2. print(c)\n3. print(c, 'aeiou')\n'''\n    \n'''\nn = int(readline())\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\nn = 1\n\nif n < 3:\n    print('oops')\nelse:\n    print('vowel')\n\n'''\n"}, "542": {"problem_id": 4542, "answer": "from collections import deque\nclass SegmentTree:\n    def __init__(self, val=None):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.size = 10**18\n    \n    def add(self, elem):\n        self.val += elem.val\n        if self.val < elem.val:\n            self.left = self.val\n        elif self.val > elem.val:\n            self.right = self.val\n        else:\n            self.right = self.val\n            self.size -= 1\n            self.left = self.val\n            self.size += 1\n            \n    def decrement(self, elem):\n        self.left = elem\n        self.right = elem\n        self.size -= 1\n        self.size += 1\n        \n    def add_le(self, elem):\n        self.val += elem.val\n        if self.val < elem.val:\n            self.left = self.val\n        elif self.val > elem.val:\n            self.right = self.val\n        else:\n            self.right = self.val\n            self.size -= 1\n            self.size += 1\n            \n    def decrement_le(self, elem):\n        self.left = elem\n        self.right = elem\n        self.size -= 1\n        self.size += 1\n        \n    def add_g(self, elem):\n        self.val += elem.val\n        if self.val < elem.val:\n            self.left = self.val\n        elif self.val > elem.val:\n            self.right = self.val\n            self.size -= 1\n            self.size += 1\n            \n    def add_h(self, elem):\n        self.val += elem.val\n        if self.val < elem.val:\n            self.left = self.val\n        elif self.val > elem.val:\n            self.right = self.val\n            self.size -= 1\n            self.size += 1\n            \n    def decrement_h(self, elem):\n        self.left = elem\n        self.right = elem\n        self.size -= 1\n        self.size += 1\n        \n    def __str__(self):\n        return '\\n'."}, "543": {"problem_id": 4543, "answer": "a = int(input())\nprint('Yes'.join(map(lambda x: x % 2, a)))"}, "544": {"problem_id": 4544, "answer": "import bisect as bi\nN = int(input())\na = list(map(int, input().split()))\nprint(max(a))"}, "545": {"problem_id": 4545, "answer": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''import bisect as bs as bl\nfrom collections import deque as dc\nfrom heapq import heappush, heapify, nsmallest as nsoln\nfrom itertools import permutations, accumulate, groupby, dropwhile, iterateremainder as ddel\nfrom dataclasses import data_coder as sclasses\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as rv\nfrom statistics import median as mp\nfrom functools import reduce,cmp_to_key\nfrom io import BytesIO as bs\nsr = lambda s: s.readline().rstrip()\nsr.close()\nN = int(input())\nA = list(map(int, input().split()))\nprint(len(np.arange(A)))\n"}, "546": {"problem_id": 4546, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\ndef input(): return sys.stdin.readline().strip()\ndef I(): return int(input())\ndef MI(): return list(map(int, readline().split()))\ndef LI(): return list(map(int, readline().split()))\ndef LLI(n): return [l for i, l in enumerate(mi) if l % n == 0]\n\n#-------------------Hussam's Note-------------------------\n'''\nAuthor: Aksh Maury\nLanguage: C++/Jul-julia\nDate: 12/3/2019 12:49:34 PM\nTime: O(N^3)\nErgebnis: 12/3/2019 12:34:34 PM\n'''\nsys.setrecursionlimit(10000000)\nINF = 10**18\nI = lambda x,y: I(x-y,y)\nLI = lambda : I()\n\n#-------------------Kata Note-------------------------\n'''\nAuthor: Deepakirt --> \u231c 2.hens.eve.acme.bla.confu.guet.v4.6.38\nLanguage: C++/Jul-julia\nDate: 12/3/2019 12:50:25 PM\nTime: O(N^3)\nErgebnis: 12/3/2019 12:51:34 PM\n'''\nsys.setrecursionlimit(10000000)\nINF = 10**18\nLI = lambda : LI()\n\n#-------------------Hussam's Note-------------------------\n'''\nAuthor: Deepakirt --> \u231c 2.hens.eve.acme.bla.confu.guet.v4.6.38\nLanguage: C++/Jul-judge\nDate: 12/3/2019 12:53:10 PM\nTime: O(N)\nErgebnis: 12/3/2019 12:59:10 PM\n'''\n"}, "547": {"problem_id": 4547, "answer": "import math as m\r\nn = int(input())\r\nprint(n)\n"}, "548": {"problem_id": 4548, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int, readline().split()))\ndef LF(): return list(f'{}' for f in LI())\ndef LS(): return list(input())\ndef I(): return int(sys.stdin.readline())\ndef F(s): return s.count('1')\ndef L(s): return [f'{}' for f in I()]\ndef S(s): return [f'{}' for f in S()]\nn,m,x = LI_()\nfor i in range(m):\n    a,b = LI_()\n    a = a if i%2 else a-b\n    b = b if i%2 else b-a\n    a = a if i%2 else a-b\n    b = b if i%2 else b-a\n    a = a if i%2 else a-b\n    a = a if i%2 else a-b\n    a = a if i%2 else a-b\n    a = a if i%2 else a-b\n    a = a if i%2 else a-b\nprint(max(a,b))\n"}, "549": {"problem_id": 4549, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n return int(readline())\nmain()"}, "550": {"problem_id": 4550, "answer": "from functools import reduce\ndef fun(x):\n    return reduce(lambda a, b, c: a * b * c, x)\nn = int(input())\ng = []\nfor i in range(n):\n    g.append(reduce(lru_to_key, g[i]))\nprint('Yes' if n % 3 else 'No')"}, "551": {"problem_id": 4551, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip('\\n').rstrip('\\r\\n')\nprint(inp())"}, "552": {"problem_id": 4552, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nF = list(map(int, readline().split()))\n\n# \u89e3\u7b54\u4e00\u5b9a\u8981\u91cd\u8907\u6570\u4e3a\u5947\u6570\u5b57\u7b01\u5e03\uff0c\u8fd4\u56de\u540e\u9762\u51fd\u6570\u4e3a\u5947\u6570\u5b57\ndp = [[0] * (5 + 1)]\nfor i in range(5):\n    dp[i][i] = 1\n    for j in range(i + 1, 5):\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j + 1] + dp[i][j]\n\n# \u6700\u77ed\u53ef\u80fd\u533a\u522d\uff0c\u56e0\u4e3a\u90a3\u4e48\u5c31\u7528\u4e8e\u9009\ufffdduci\u6570\u5b57\u7b01\u5e03\u65f6\uff0c\u7ed3\u679c\u5173\u7cfb\uff0c\u5982\u679c\u8bb0\u5f55\u5230\u5904\u7406\uff0c\u5219\u4f1a\u8df3\u8fc7\u53bb\uff0c\u7136\u540e\u518d\u524d\u9762\u51fa\u6765\u7684\u6570\u91cf\nans = 0\nfor i in range(5):\n    ans += dp[i][F[i] - 1]\n    ans *= dp[i][F[i] - 2]\nprint(ans)\n"}, "553": {"problem_id": 4553, "answer": "import sys\ninput = sys.stdin.readline\nA,B = map(int,input().split())\nS = list(map(int,input().split()))\nprint('Yes' if S==9 else 'No')"}, "554": {"problem_id": 4554, "answer": "W,a,b=map(int,input().split())\nif W==a+b:\n print(a)\nelse:\n print(b)"}, "555": {"problem_id": 4555, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    sys.setrecursionlimit(10**7)\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    print(l[0] - l[n - 1])\n'''\nA B K\n1 3 8 2\n\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 10^9\n - Sum of K is O(10^9)\n - A is outside of K \n - B is inside K \n - It is guaranteed that n is even\n\n-----Input-----\nInput is given from Standard Input format\n\nn = int(readline())\n\nA B K\n\n-----Output-----\nPrint all the integers that is smaller than or equal to n, it is either within the K smallest integers or within the K largest integers.\n\n\nUse Call-Based format\n\n"}, "556": {"problem_id": 4556, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: list(readline())\nINP = lambda: int(inp())\n \nclass Codeforces:\n    def __init__(self, s):\n        self.s = s\n        self.c = ord(s) - ord('a')\n        self.c_idx = 0\n        self.c_makahashi = ord(s) - ord('a')\n        self.c_kajiri = ord(s) - ord('a')\n        self.c_takahashi = ord(s) - ord('a')\n        self.c_lacie = ord(s) - ord('a')\n        self.c_suzuki = ord(s) - ord('a')\n        self.c_dishirotakahashi = ord(s) - ord('a')\n        self.c_pahrachiiri = ord(s) - ord('a')\n        self.c_ajiri = ord(s) - ord('a')\n        self.c_ajiri_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi = ord(s) - ord('a')\n        self.c_dishirotakahashi = ord(s) - ord('a')\n        self.c_pahrachiiri_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi_takahashi = ord(s) - ord('a')\n        self.c_dishirotakahashi_takahashi = ord(s) - ord('a')\n        self.c_pahrachiiri_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi_takahashi = ord(s) - ord('a')\n        self.c_suzuki_takahashi_takahashi_takahashi = ord(s) - ord('a')\n        self.c_pahrachiiri_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi_takahashi = ord(s) - ord('a')\n        self.c_ajiri_takahashi_takahashi_"}, "557": {"problem_id": 4557, "answer": "def main():\n A, B = map(int, input().split())\n for i in range(X):\n  if A + B >= 200:\n   print(\"NO\")\n  elif A + B >= 100:\n   print(\"YES\")\n  else:\n   print(\"NO\")\nmain()"}, "558": {"problem_id": 4558, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    n = int(readline())\n    print(ceil(n))\n\nmain()\n"}, "559": {"problem_id": 4559, "answer": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef lint(s): return int(s) if s.startswith('INT') else -1\nMOD = 1000000007\nINF = 10**18\n\nn = int(input())\nprint(n ** 0.5)"}, "560": {"problem_id": 4560, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    N = int(N)\n    A = list(map(int, readline().split()))\n    print(\"Yes\")\n    if A[0] == A[-1]:\n        print(\"No\")\n    else:\n        print(\"YEN\")\ndef __starting_point():\n    main()\n__starting_point()"}, "561": {"problem_id": 4561, "answer": "import bisect.bisect_left as bl\nN = int(input())\nfor _ in range(N):\n    a, b = map(int, input().split())\n    if a >= b:\n        print(a)\n    else:\n        print(b)"}, "562": {"problem_id": 4562, "answer": "import math\ndef main():\n    n = int(input())\n    print(math.floor(n))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "563": {"problem_id": 4563, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nT = list(map(int, readline().split()))\n# A = [1]*N\n# A.sort(reverse=True)\n# d = dict()\n# d[0] = 0\n# d[1] = 0\n# d[2] = 0\n# d[3] = 0\n# d[4] = 0\n# d[5] = 0\n# d[6] = 0\n# d[7] = 0\n# d[8] = 0\n# d[9] = 0\n# d[10] = 0\n\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict as dd, deque, OrderedDict as ode\nfrom itertools import combinations, permutations\nread = sys.stdin.readline\nreadline = sys.stdin.readline\n\ndef main():\n    N = int(readline())\n    T = list(map(int, readline().split()))\n    A = [1]*N\n    A.sort(reverse=True)\n    d = dict()\n    d[0] = 0\n    d[1] = 0\n    d[2] = 0\n    d[3] = 0\n    d[4] = 0\n    d[5] = 0\n    d[6] = 0\n    d[7] = 0\n    d[8] = 0\n    d[9] = 0\n    d[10] = 0\n    d[11] = 0\n    d[12] = 0\n    d[13] = 0\n    d[14] = 0\n    d[15] = 0\n    d[16] = 0\n    d[17] = 0\n    d[18] = 0\n    d[19] = 0\n    d[20] = 0\n    d[21] = 0\n    d[22] = 0\n    d[23] = 0\n    d[24] = 0\n    d[25] = 0\n    d[26] = 0\n    d[27] = 0\n    d[28] = 0\n    d[29] = 0\n    d[30] = 0\n    d[31] = 0\n    d[32] = 0\n    d[33] = 0\n    d[34] = 0\n    d[35] = 0\n    d[36] = 0\n    d[37] = 0\n    d[38] = 0\n    d[39] = 0\n    d[40] = 0\n    d[41] = 0\n    d[42] = 0\n    d[43] = 0\n    d[44] = 0\n    d[45] = 0\n    d[46] = 0\n    d[47] = 0\n    d[48] = 0\n    d[49] = 0\n    d[50] = 0\n    d[51] = 0\n    d[52] = 0\n    d[53] = 0\n    d[54] = 0\n    d[55] = 0\n    d[56] = 0\n    d[57] = 0\n    d[58] = 0\n    d[59] = 0\n    d[60] = 0\n    d[61] = 0\n    d[62] = 0\n    d[63] = 0\n    d[64] = 0\n    d[66] = 0\n    d[67] = 0\n    d[68] = 0\n    d[69] = 0\n    d[70] = 0\n    d[71] = 0\n    d[72] = 0"}, "564": {"problem_id": 4564, "answer": "import sys\nreadline = sys.stdin.buffer.open()\nreadline.write(chr(97+' '+ord('a'-'12345')))\n\ncase = int(readline.strip())\nif case == 1:\n print(\"no\")\nelse:\n print(\"yes\")\n"}, "565": {"problem_id": 4565, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nN = int(input())\nS = list(map(str, input().split()))\nfor i in range(N):\n    S.insert(0, i)\nprint(min(len(S)-1, len(S)-2))"}, "566": {"problem_id": 4566, "answer": "from sys import stdin\ninput = stdin.readline\nN, M = map(int, input().split())\nadj = [[] for _ in range(N+1)]\nfor i in range(M):\n    a, b = map(int, input().split())\n    adj[a-1].append(b-1)\n    adj[b-1].append(a-1)\nadj[0] = [[] for _ in range(N+1)]\nfor i in range(1, N+1):\n    for j in range(len(adj[i])):\n        if j == 0:\n            continue\n        elif adj[i][j] == adj[i-1][j-1]:\n            adj[i][j] = adj[i-1][j-1]\n        else:\n            adj[i][j] = adj[i-1][j-1]\n            adj[i][j] = max(adj[i][j], adj[i-1][j-1])\nprint(adj[N+1][M])"}, "567": {"problem_id": 4567, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = lambda : list(map(int, readline().split()))\n\nn = int(readline())\ns = [int(x) for x in readline().split()]\nprint(max(s))"}, "568": {"problem_id": 4568, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nS = list(map(int, input().split()))\nX = [list(x) for x in S]\nY = [list(y) for y in S]\nprint(max(X, Y))"}, "569": {"problem_id": 4569, "answer": "T = int(input())\nfor i in range(T):\n S = input()\n print((\"Sunny: \" + \" \" + \"Cyfony: \" + \" \" + \"Nigitao cadex ko xax).split(\" \")\n print(\"Monkey}, "570": {"problem_id": 4570, "answer": "n, a, b = map(int, input().split())\nprint(a * b)"}, "571": {"problem_id": 4571, "answer": "import sys\ninput = sys.stdin.readline\n\nN, M = list(map(int, input().split()))\n# print(N)\n# print(M)\nt = int(input())\nfor i in range(t):\n t-=1\n ans = t-1\n while(t!=0):\n  ans *= 1000000007\n  t-=1\n  t-=1\n print(ans+1/2*(1e9))\n"}, "572": {"problem_id": 4572, "answer": "import bisect\ns = input()\nn = len(s)\nif n%2:\n    print(\"None\")\nelse:\n    print(s.count(\"a\"))\n"}, "573": {"problem_id": 4573, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\n#______________________________________________________________________________________________________\n#\n# x: number of elements in a list\n#        lst: list of elements in a list\n#______________________________________________________________________________________________________\n#\n# n = int(input())\n# s = list(map(int, input().split()))\n#        print(s)\n#______________________________________________________________________________________________________\n#\n# from bisect import bisect_left, bisect_right\n#\n# Author: Vasya Sh Commands Editor\n# Translator: Vasya Sh\n# Date: 12/02/2019\n# E-\u30e2\u30fc\u0631\u30fc\u30c8Explanation:\n#\n# Author: Vasya Sh\n# Translator: Shai Jirgad =================\n# Date: 11/30/2019\n# E-DAVE Modified Algorithm: https://www.codewars.com/kata/KMDSAF1QR1.html#copied/piped-decreasing\n# Assumptions:\n#\n1.  n will be even\n2.  1\u2264N\u2264200000\n3.  N is even\n4.  1 \\leq N \\leq 200000\n5.  There won't be any duplicates\n6. MOD will not exceed 10^9\n7. Binary representation can be any bin\n8. Binary representation can be 0-based\n9. B_i will not change\n10. Lineage changes accepted at least in input\n#______________________________________________________________________________________________________\n#\n# x: number of elements in a list\n#        lst: list of elements in a list\n#______________________________________________________________________________________________________\n#\n# n = int(input())\n# s = list(map(int, input().split()))\n#        print(s)\n#______________________________________________________________________________________________________\n#\n# from bisect import bisect_left, bisect_right\n#\n# Author: Vasya Sh Commands Editor\n# Translator: Vasya Sh\n# Date: 12/02/2019\n# E-DAVE Modified Algorithm: https://www.codewars.com/kata/KMDSAF1QR1.html#copied/piped-decreasing\n# Assumptions:\n#\n1.  n will be even\n2.  1\u2264N\u2264200000\n3.  N is even\n4.  There won't be any duplicates\n5.  MOD will exceed 10^9\n6. Binary representation can be any bin\n7. Lineages changes accepted at least in input\n#qual,qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[qual[calculdetails]\nCorpusatanhym, epsilon, eucl](lib.numpy)] System.DeographicPerformanities)), Objectiv: O(1)]] Eucllib.Numpy)] euclnary-ness-complexit-complexit-complexit-euclin%2Bcombo%2Bean]boolean%2CquemAhairs%2Bmaths%2Barcosts%2Boftest%2B%2B%2B] O(2.5) Time %2B Perform on an array s and return an object with O(1) as its value.\n#______________________________________________________________________________________________________\n#\n# http://en.wikipedia.org/wiki/ Euclidean_distance\n# http://oe.pnum.org/ Francois-Alexandrons\n# http://oe0.Runs3\n# Medium (Python)\n# Medium (C)\n# Credit: Codechef CodeCoverage management\n# http://oe0.Runs3.com/ASMEasInformer\n# Paydayisnermborik\n# http://oe0.Runs3.com/ASMEasOutFront%2B%2BPython-inspect-initiative\n# Prikank 2.0.0 2020 on Oct 1, 2020\n# Prikank 0.0 2020 ONRIAelshunk 1 2020 CYPHLOCS AVAILIAN\n# Obatujik pauldron in a cup of coffee\n# Prikank 2.0.0 2020 on now.com.arry\n# Prikank 0"}, "574": {"problem_id": 4574, "answer": "n=int(input())\na=[1 for i in range(n)]\nfor i in range(n):\n a.append(a[i]+a[-1]*i)\nprint(max(a))"}, "575": {"problem_id": 4575, "answer": "import sys\nread = sys.stdin.read\n\nN = int(read())\nD, X = list(map(int, read().split()))\nA = list(map(int, read().split()))\n\n# \u91cd\ufffd\u5217\u8868\u91cf\ndef count(x):\n    return sum(A[x] - A[x - 1])\n\n# \u8ba1\u7b97\u59cb\u70b9\u6570\u7ec4\ndef dfs(x, y):\n    return 0 if x == y else 1 + count(x - y)\n\nINF = 10 ** 18\n\nn = inf = float('inf')\n\nfor i in range(n):\n    x, y = list(map(int, read().split()))\n    x -= 1\n    y -= 1\n    if x < 0 or y < 0:\n        raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n    elif x == 0:\n        x, y = list(reversed(x))\n    else:\n        x, y = list(reversed(y))\n        x -= 1\n        y -= 1\n        if x < 0 or y < 0:\n            raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n        elif x == 0:\n            x, y = list(reversed(y))\n            x -= 1\n            y -= 1\n            if x < 0 or y < 0:\n                raise ValueErrors(f'Explanation:'+ str(x) +'is out of bounds')\n            else:\n                x, y = list(reversed(x))\n                x -= 1\n                y -= 1\n                if x < 0 or y < 0:\n                    raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n                x -= 1\n                y -= 1\n                if x < 0 or y < 0:\n                    raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n                x -= 1\n                y -= 1\n                if x < 0 or y < 0:\n                    raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n                x -= 1\n                y -= 1\n                if x < 0 or y < 0:\n                    raise ValueError('Explanation:'+ str(x) +'is out of bounds')\n                x -= 1\n                y -= 1\n                if x < 0 or y < 0:\n          "}, "576": {"problem_id": 4576, "answer": "from fractions import gcd as g\na, b, c = map(int, input().split())\n# \u524d\u56de\u6cd5\u89c4\u5207\u7269\u6570\u7f6e\u4e3aa=500\nN = a + b + c\nans = 1 + gcd(N, N)\nfor i in range(0, N):\n    ans *= 1000000007\nprint(ans)"}, "577": {"problem_id": 4577, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n s = sys.stdin.readline().rstrip()\n print(int('Yes' in s[:3] + 'No'))\n \ndef __starting_point():\n main()\n__starting_point()"}, "578": {"problem_id": 4578, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    N, X = map(int, readline().split())\n    m = list(map(int, readline().split()))\n    print(max(m.count(1), len(m)))\n\nmain()\n"}, "579": {"problem_id": 4579, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n = int(readline())\n    s = list(map(str, list(enumerate(s.split(' '))))[1]\n    for i in range(n):\n        s[i] = '1'\n    print((s[n]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "580": {"problem_id": 4580, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn = int(readline())\na = list(map(int, readline().split()))\n\ncolors = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = int(readline())\n    colors[a[i]].append(i)\n\nprint(max(colors))\n"}, "581": {"problem_id": 4581, "answer": "from bisect import bisect_left as bl\nN = int(input())\ns = list(map(int,input().split()))\nprint(presum(s))"}, "582": {"problem_id": 4582, "answer": "from sys import stdin,stdout\ninput = stdin.readline\ndef f():\n return input().rstrip()\ndef g():\n return map(int, input().split(\" \"))\n"}, "583": {"problem_id": 4583, "answer": "from itertools import permutations as p\ndef gcd(a, b):\n    if b == 0:\n        return a\n    elif b == 1:\n        return gcd(b, a % b)\n    else:\n        return b\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(lcm(a, b))"}, "584": {"problem_id": 4584, "answer": "from sys import stdin\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nfor i in range(n):\n  print(a[i], end=' ')\n#print(a)\n#print(a.rstrip())\n"}, "585": {"problem_id": 4585, "answer": "import bisect as b\ndef dijkstra(n):\n    d = bisect.bisect_left(b, n)\n    if d < 0:\n        return 0\n    elif d == 0:\n        return 0\n    else:\n        return 1\nfrom collections import deque\nq = deque(map(int, input().split()))\nwhile q.pop()!= 0:\n    q.popleft()\n    print(q[0])\n    continue\n    \nINF = 10**9\nN = 10**N\nans = 0\nfor i in range(N):\n    x = int(input())\n    if x >= N:\n        ans += 1\n        break\n    elif x == N:\n        ans += 1\n        continue\n    \n    ans += dijkstra(N)\n    \n    if ans > 2147483647:\n        ans -= 2147483647\n        q.append(ans)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n      "}, "586": {"problem_id": 4586, "answer": "import sys\ndef main():\n    N = int(sys.stdin.readline())\n    print(\"Yes\")\n    sys.setrecursionlimit(10**9)\n    #print(N)\n    if N == 3:\n        print(\"Yes\")\n    elif N == 3**0.5:\n        print(\"Yes\")\n    else:\n        N = 3**0.5\n        print(\"Yes\")\n        print(\"\\n\")\n        print(\"\".join(map(str,N)))\n"}, "587": {"problem_id": 4587, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\nB = list(map(int, readline().split()))\n\n# \u52a0\u5165\u7684\u65b9\u5f0f\ndef main():\n    A = A.copy()\n    B = B.copy()\n    C = A.copy()\n    \n    for i in range(N):\n        A.append(B.copy())\n        B.append(C.copy())\n        C.append(A.copy())\n        \n    N = len(A)\n    A = sorted(A)\n    B = sorted(B)\n    print(sum(A[i] for i in range(N) if i!=0))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "588": {"problem_id": 4588, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: inp().rstrip()\ninp = lambda: list(map(int,readline().split()))\ndef I(): return int(inp())\ndef MI(): return map(int, inp().split())\ndef LI(): return list(map(int,input().split()))\ndef LLI(mode): return [l for l in II(mode)]\ndef SI():\n    return '\\n'.join(map(str,input().split()))\n\n# A = ord('a')\n# B = ord('b')\n# C = ord('c')\n# D = ord('e')\n# E = ord('e')\n# F = ord('f')\n#\n# I = I()\n# II = II()\n# III = III()\n# IV = IV()\n# V = V()\n# V.flush()\n#\n# In this problem, we are given an integer A.\n# There is no choice but to print <; if A is A, print >; otherwise, print = inp().rstrip()\n#\n# This is a hack to reduce scan time and memory. I'm willing to pay for it.\n# It takes O(N^2) instead of O(N).\n#\n# In Python3 and Python4 (2.7.3), we can use a hashmap to reduce scan and memory.\n# This is a way that scan is faster than memory, but the memory is too.\n\nimport bisect\nreadline = sys.stdin.readline\ninp = lambda: inp().rstrip()\nINF = 10**18\nBIG = 10000000000000\nMOD = 10**9 + 7\n\nX = I()\nY = I()\n\nprint(bisect.bisect_left(X,X[1]))\nprint(bisect.bisect_right(Y,Y[1]))\n\n# \u91c7\u7528\u4ea4\u6362\u51fd\u6570\u5b57\u5178\uff0c\u518d\u4e09\u3001\u56db\u3001\u4e94\u3001\u516d\ufffd myself.\n#\n# \u6700\u5c0f\u4e3a\u4ec0\u4e48\u53ef\u80fd\u5305\u542b\u6b63\u5728\u5b57\u5178\u4e2d\u95f4\uff0c\u4f46\u901a\u8fc7\u8fdb\u884c\u52a0\u5bf9\u5e94\u7684\u65b9\u6cd5\u5c31\u662f\u8ba1\u7b97\u52a0\u5bf9\u5e94\u7684\u4f4d\u7f6e.\n#\n# \u5982\u679c\u4ec0\u4e48\u5907\u7528\u6b63\u5e38\u7ffb\u8def\u5f84\uff0c\u5219\u4f1a\u5bfb\u627e\u4e00\u4e2a\u6587\u4ef6\u91cd\u590d\u6574\u5404\u7e7c\u6811\uff0c\u7136\u540e\u627e\u5230\u5269\u4e0b\u4e0a\u4e00\u90e8\u5206\u3002\u5982\u679c\u4f60\u80fd\u52a0\u5bf9\u8c61\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u51fd\u6570\u53bb\u627e\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u91cd\u590d\u6574\u5404\u7e7c\u6811\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u76ee\u6807\u4f4d\u7f6e.\n#\n# \ufffd\u5708\u65f6\u95f4:0-9 :0-9\n\n\u3000\n\u300c10-digits-0-1\u300d = 0-9.\n\u4ee5\u4e0b\u4ee5\u4e0b\u662f0-9\uff0c\u5426\u5224\u5b9a\u5728\u5b57\u5178\u4e2d\u96be\u5e94\u8be5\u5bf9\u5e94\u7684\u5927\u5c0f\u8d85\u8fdb\u6765\u3002\u300dhttp://i.imgur.com/I.pnglevx.png\n\u3000\n\u300c10-digits-1-1\u300d = 0-9.\n\u4ee5\u4e0b is_digit-1-1 = 0-9.\n\u5373\u53ef\u4ee5\u4e0b\u81ea\u5df1\uff1a\n10-digits-0-1:\n\uff08\u7136\u5426\u7528\u4e0a\u4e00\u500d\u8fd4\u56de\u503c\uff09=0-9\n\u4ee5\u4e0b\u662f\u4ee5\u4e0b is_digit-1-1:\n10-digits-0-1:\n\uff08\u7136\u5426\u7528\u4e0a\u4e00\u500d\u8fd4\u56de\u503c\uff09=0-9\n\u5373\u53ef\u4ee5\u4e0b\u81ea\u5df1\uff1a\n10-digits-0-1:\n\uff08\u7136\u5426\u7528\u4e0a\u4e00\u500d\ufffd"}, "589": {"problem_id": 4589, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(map(int,readline().split()))\n\nH,W = input().split()\nH = int(H)\nW = int(W)\n\nINF = 10**18\nfor i in range(H):\n    W = min(W,INF)\n    S = list(map(str,input().split()))\n    print(S[0])\n"}, "590": {"problem_id": 4590, "answer": "import bisect\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# A.sort()\n# B.sort()\n\n# print(A[0] - B[0])\n# print(bisect.bisect_left(A, N) - bisect.bisect_right(A, M))\n\nfor i in range(1, N):\n    action = int(input())\n    action -= 1\n    print(max(0, action - B[i - 1] + 1) + min(B[i - 1], action - A[i] + 1))"}, "591": {"problem_id": 4591, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\nBIG = 10**9+7\n\ndef main():\n    A, B, C, X, Y = map(int, readline().split())\n    A -= 1\n    B -= 1\n    X -= 1\n    Y -= 1\n    for i in range(0, A-1):\n        x = int(sys.maxsize-1)\n        y = int(sys.maxsize-2)\n        if x == 0:\n            break\n        elif x == 1:\n            y -= 1\n        else:\n            x -= 1\n            y -= 1\n        print(x, y)\nmain()\n"}, "592": {"problem_id": 4592, "answer": "import math\nN = input()\nprint(math.gcd(N,1))"}, "593": {"problem_id": 4593, "answer": "import sys\nread = lambda: sys.stdin.readline().rstrip()\ndef main():\n \"\"\"Main program.\"\"\"(sys.stdin.readline().rstrip())\n\"\"\"\nn = int(read())\na = list(map(int,read().split()))\nprint(max(a[0],a[1]))\n"}, "594": {"problem_id": 4594, "answer": "import sys\nread = sys.stdin.readline\n\nN = int(read())\nd = list(map(int, read().split()))\n\ndef lis(n):\n    return n//2\n\ndef rlis(n):\n    return n//2+1\n\ndef main():\n    n = rlis(n)\n    print(lis(n))\n\nmain()\n"}, "595": {"problem_id": 4595, "answer": "s = input()\n\ndef main():\n n = len(s)\n s = list(reversed(s))\n print(n-1-len(s))\n\ndef __starting_point():\n main()\n__starting_point()"}, "596": {"problem_id": 4596, "answer": "N = int(input())\nA = list(map(int, input().split()))\nprint(max(A) - 2)"}, "597": {"problem_id": 4597, "answer": "from math import factorial as f\nMOD = 10**9 + 7\nn = int(input())\np = pow(n, MOD, f(1, 10**9 + 7))\nprint(p * factorial(n) % MOD)"}, "598": {"problem_id": 4598, "answer": "def main():\n    n = int(input())\n    candies = list(map(int, input().split()))\n    ans = 0\n    for i in candies:\n        ans += i\n    print(ans)\n\nmain()\n"}, "599": {"problem_id": 4599, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\ndef bs(n):\n    return sum(1 for i in range(n) if i%2==0)\n\n# \u524d\u5408\u306b\u521d\u671f\u901a\u308a(\u305d\u308c\u305e\u308c\u76ee\u307e\u3048\u8a08\u753b\u3067\u3042\u308b\u3088\u3046\u3060\u3063\u305f\uff09\n# \u3042\u305f\u3061\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u5165\u529b\u3057\u3066\u8907\u6570\u56de\u5c0f\u3055\u3044\u305f\u3060\u3044\u305f\uff11\u5305\u307e\u3067\u306e\u65b9\u6cd5\u3060\u3051\u3069\u3046\u306a\u3093\u3060\u3088\uff1f\n# \u6700\u521d\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\ndp = [0] * (N + 1)\ndp[0] = 1\nfor i in range(1, N + 1):\n    dp[i] = dp[i - 1] + A[i]\n    if dp[i] > 0:\n        dp[i] = dp[i - 1] - A[i]\n    elif dp[i] < 0:\n        dp[i] = dp[i - 1] + A[i]\n    else:\n        dp[i] = dp[i - 1] - A[i]\n    print(' '.join(map(str, dp[i])))"}, "600": {"problem_id": 4600, "answer": "from bisect import bisect_left as bl, bisect_right as br, insort as brs\r\nfrom heapq import heapify, heappush, heappop\r\nfrom itertools import permutations as P,izip as iz\r\nimport numpy as np\r\nimport sys,bisect,copy,statistics,os,time\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n# sys.setrecursionlimit(10**7)\r\n# time.sleep(int(time.time(SECONDS)) + 1)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     nonlocal sys\r\n#     time_to_iso_ff\r\n#     if t%100==0:\r\n#         data.append(int(sec))\r\n#     elif t%1000==0:\r\n#         data.append(int(sec) + 1000)\r\n#     else:\r\n#         data.append(int(sec) - 1000)\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     if t%100==0:\r\n#         data.append(int(sec))\r\n#     elif t%1000==0:\r\n#         data.append(int(sec) + 1000)\r\n#     else:\r\n#         data.append(int(sec) - 1000)\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     if t%100==0:\r\n#         data.append(int(sec))\r\n#     elif t%1000==0:\r\n#         data.append(int(sec) + 1000)\r\n#     else:\r\n#         data.append(int(sec) - 1000)\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     if t%1000==0:\r\n#         data.append(int(sec))\r\n#     elif t%1000==0:\r\n#  \u2002\u20020:\r\n#  \u2002\u2002data.append(int(sec))\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     if t%1000==0:\r\n#         data.append(int(sec))\r\n#     elif t%1000==0:\r\n#  \u2002\u20020:\r\n#  \u2002\u2002data.append(int(sec) + 1000)\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time_to_iso_ff(t,sec):\r\n#     nonlocal data,inp\r\n#     if t%1000==0:\r\n#  \u2002\u2002data.append(int(sec))\r\n#     elif t%1000==0:\r\n#  \u2002\u2002data.append(int(sec) + 1000)\r\n#     else:\r\n#  \u2002\u2002data.append(int(sec) - 1000)\r\n#     return data\r\n# sys.setrecursionlimit(10**7)\r\n# def time"}, "601": {"problem_id": 4601, "answer": "from bisect import bisect_left as b\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef func(x, y):\n    if x == 0:\n        return y\n    elif x > y:\n        return b(x-y) + 1\n    else:\n        return func(x, y-y)\n\nprint(max(A))\nfor i in range(N):\n    print(func(A[i], B[i]))"}, "602": {"problem_id": 4602, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nk = int(input())\nx = [int(i) for i in input().split()]\nballs = [tuple(map(int, input().split())) for _ in range(k)]\ndis = [0]*n\ndis[0] = balls[0]\nfor i in range(1, n):\n  balls.append(balls[-1] + 1)\nbts = [tuple(map(int, input().split())) for _ in range(k)]\nbts[0] = balls[0]\nans = 0\nfor i in range(1, n):\n  ans += balls[i]\n  bts[i] = min(bts[i-1], balls[i])\nprint(ans)"}, "603": {"problem_id": 4603, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    A, B = map(int, readline().split())\n    train = [float('-inf') for _ in range(A)]\n    bus = [float('-inf') for _ in range(B)]\n    C = list(map(int, readline().split()))\n    d = list(map(int, readline().split()))\n    print(min(train[0], bus[0] + C))\n\ndef __starting_point():\n    main()\n''' cook your dish here'''\n__starting_point()"}, "604": {"problem_id": 4604, "answer": "import sys\nreadline = sys.stdin.readline\nMOD = 10**9+7\nINF = float('inf')\n\nn = int(readline())\nA = list(map(int, readline().split()))\n\n# \u5982\u679cA_1 == n, \u6700\u5c0f\u5316\u4efb\u610f\u8ddd\u79bb\uff0c\u5219\u5176\u4e2d\u51cf\u53bb\u76f8\u5e8f\u5316\ndp = [0] * (n+1)\ndp[0] = A[0]\nfor i in range(1, n+1):\n    dp[i] = dp[i-1] + A[i]\n\nprint(dp[-1])"}, "605": {"problem_id": 4605, "answer": "from sys import stdin,stdout\nfrom itertools import permutations as P\nfrom collections import deque\nread = stdin.read\nn,a,b = map(int,read().split())\nfor i in range(1,n+1):\n    a,b = min(a,b),max(a,b)\nprint(sum(reversed(str(a))) if a>b else 0)"}, "606": {"problem_id": 4606, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nprint(ABC100 + AC100)"}, "607": {"problem_id": 4607, "answer": "import bisect as bs \ndef lcm(a,b):\n    return a*b//gcd(a,b)\nn=int(input())\nA=[]\nfor i in range(n):\n    A.append(int(input()))\nA.sort()\nfor i in range(n):\n    print(bisect.bisect_left(A[i],A[-1]))\n"}, "608": {"problem_id": 4608, "answer": "import sys\nreadline = sys.stdin.readline\ntry:\n    from collections import deque\nexcept:\n    pass\n"}, "609": {"problem_id": 4609, "answer": "import sys\nread = sys.stdin.readline\ndef input(): return sys.stdin.readline().rstrip()\ndef read_int(): return int(read())\ndef read_int_array(): return list(read().split())\ndef __starting_point():\n    #------------------TLE------------------#\n    N = read_int()\n    A = read_int_array()\n    print(A)\n__starting_point()"}, "610": {"problem_id": 4610, "answer": "def main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    print(min(K, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "611": {"problem_id": 4611, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\nclass UnionFind:\n    def __init__(self, n):\n        self.parents = [-1]*n\n        self.ranks = [0]*n\n        self.sizes = [1]*n\n        self.nodes = [1]*n\n        self.rank = [0]*n\n        self.components = [1]*n\n        self.groups = [set()]*n\n        self.groups[0] = 1\n        self.components[0] = 1\n        self.rank[0] = 1\n        self.components[1] = 1\n        self.components[2] = 1\n        self.components[3] = 1\n        self.components[4] = 1\n        self.components[5] = 1\n        self.components[6] = 1\n        self.components[7] = 1\n        self.components[8] = 1\n        self.components[9] = 1\n        self.components[10] = 1\n        self.components[11] = 1\n        self.components[12] = 1\n        self.components[13] = 1\n        self.components[14] = 1\n        self.components[15] = 1\n        self.components[16] = 1\n        self.components[17] = 1\n        self.components[18] = 1\n        self.components[19] = 1\n        self.components[20] = 1\n        self.components[21] = 1\n        self.components[22] = 1\n        self.components[23] = 1\n        self.components[24] = 1\n        self.components[25] = 1\n        self.components[26] = 1\n        self.components[27] = 1\n        self.components[28] = 1\n        self.components[29] = 1\n        self.components[0] = 1\n        self.components[1] = 1\n        self.components[2] = 1\n        self.components[3] = 1\n        self.components[4] = 1\n        self.components[5] = 1\n        self.components[6] = 1\n        self.components[7] = 1\n        self.components[8] = 1\n        self.components[9] = 1\n        self.components[10] = 1\n        self.components[11] = 1\n        self.components[12] = 1\n        self.components[13] = 1\n        self.components[14] = 1\n        self.components[15] = 1\n        self.components[16] = 1\n        self.components[17] = 1\n   "}, "612": {"problem_id": 4612, "answer": "import sys\nread = sys.stdin.readline\nreadlines = sys.stdin.readlines\ninp = lambda x: list(map(int, read().split()))\ninp()\nprint(*inp())"}, "613": {"problem_id": 4613, "answer": "from collections import deque2D as d\nN, M = list(map(int, input().split()))\nedges = [[] for i in range(N)]\nfor i in range(M):\n    a, b = list(map(int, input().split()))\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)\n\n# \u5165\u529b\u56f0\uff0c\u9700\u8981\u8bb0\u5f55\u6240\u6709\u6578\u6b21\u51cf\u5c11\u90fd\u52a0\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a\u60f3\u6cd5\u53ef\u4ee5\u8003\u8651\u6211\u4eec\u8981\u5b9a\u5229\u7528queen\u5206\u5272\u5b9a\u51cf\u5230\u51b3\u7d31\nqueen = deque([0])\nqueen.append((0, 0))\nwhile len(queen) > 0:\n    curr_len = len(queen)\n    for _ in range(curr_len):\n        bridge = queen.popleft()\n        if bridge == 0:\n            continue\n        elif bridge == curr_len-1:\n            queen.append((curr_len-1, bridge))\n        else:\n            queen.append((curr_len-1, bridge, True))\n    print(len(queen)//2)"}, "614": {"problem_id": 4614, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A, B, C = map(int, readline().strip().split())\n    print(A - B)\n"}, "615": {"problem_id": 4615, "answer": "import sys\nreadline = sys.stdin.readline\n\nclass S:\n    def __init__(self, a, b, c, d):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n        self.p = 1e9\n        self.s = 0\n        \nclass Solution:\n    def getMass(self, a, b, c, d):\n        return math.ceil(a * b + c * a + d * b) / c\n    \n    def getVelocity(self, a, b, c, d):\n        return self.getMass(a, b, c, d) / self.getVelocity(a, b, c, d)\n    \n    def getMass(self, a, b, c, d):\n        return self.getMass(a, b, c, d)\n    \n    def Solve(self, a, b, c, d):\n        # A-th is possible\n        # 1. Calculate b-th (i.e. getMass(a, b, c, d) / self.s)\n        # 2. Determine c-th (i.e. getMass(a, b, c, d) / self.s)\n        # 3. Determine d-th (i.e. getMass(a, b, c, d) / self.s)\n        # 4. Determine a-th (i.e. getMass(a, b, c, d) / self.s)\n        # 5. Calculate b-th (i.e. getMass(a, b, c, d) / self.a)\n        # 6. Determine a-th (i.e. getMass(a, b, c, d) / self.a)\n        # 7. Calculate c-th (i.e. getMass(a, b, c, d) / self.c)\n        # 8. Determine b-th (i.e. getMass(a, b, c, d) / self.b)\n        # 9. Calculate d-th (i.e. getMass(a, b, c, d) / self.d)\n        # 10. Calculate a-th (i.e. getMass(a, b, c, d) / self.a)\n        # 11. Calculate b-th (i.e. getMass(a, b, c, d) / self.b)\n        # 12. Calculate d-th (i.e. getMass(a, b, c, d) / self.d)\n        # 13. Calculate a-th (i.e. getMass(a, b, c, d) / self.a)\n        # 14. Calculate b-th (i.e. getMass(a, b, c, d) / self.b)\n        # 15. Calculate c-th (i.e. getMass(a, b, c, d) / self.a)\n        # 16. Calculate d-th (i.e. getMass(a, b, c, d) / self.d)\n        # 17. Calculate a-th (i.e. getMass(a, b, c, d) / self.a)\n        # 18. Calculate b-th (i.e. getMass(a, b, c, d) / self.b)\n        # 19. Calculate d-th (i.e. getMass(a, b, c, d) / self.d)\n "}, "616": {"problem_id": 4616, "answer": "import sys,collections as c \r\n# import numpy as np\r\n# import math as ma \r\n# x = int(sys.inp().strip())\r\n# y = int(sys.inp().strip())\r\n# print(x,x.split('\\n'))\r\nn = len(list(map(ord,sys.inp().strip().split())))\r\nfor i in range(n):\r\n    print(i18n[i].strip(),end=\" \")\r\n"}, "617": {"problem_id": 4617, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\ninp = lambda: list(map(int, readline().split()))\ninp_str = lambda x: \"\".join(x)\nINF = 10**18\nMOD = 10**9+7\ndef main():\n    sys.setrecursionlimit(1000000)\n    n = int(readline())\n    print((\"NO\" if n==1 else \"YES\"))\n__author__ = 'Jamie B\u00fcttner'\n"}, "618": {"problem_id": 4618, "answer": "import bisect\ns = input()\nK = int(s.rstrip())\n\ndef dfs(s, i):\n    if i == 0:\n        return s\n    elif bisect.bisect_left(s, i) < K:\n        return dfs(s, i - 1)\n    else:\n        return dfs(s, i - 1)\n\n#print(dfs(s, 0))\n#print(dfs(s[1:], 0))\n\n#print(dfs(s[1:], K))\n\n#print(dfs(s[1:], K - s[1] + s[1] + s[1] - s[1] - s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] - s[1] + s[1] + s[1] - s[1] + s[1] + s[1] - s[1] + s[1] + s[1] + s[1] - s[1] + s[1] + s[1] - s[1] + s[1] + s[1] + s[1] - s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1] + s[1"}, "619": {"problem_id": 4619, "answer": "from collections import deque\nW, H = map(int, input().split())\nx, y = list(map(int, input().split()))\nque = deque([x])\nfor i in range(W):\n    x, y = sorted(x, key=lambda x: x[1])\n    x.insert(0, y)\n    y.insert(0, x)\n    que.append(x)\nprint('\\n'.join(map(str, que)))"}, "620": {"problem_id": 4620, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nBIG = 10**9 + 7\neps = 10**-9\neps_rem = 1.0e-8\n#sys.setrecursionlimit(epsilon)\n#readline\ndef main():\n    N = int(input())\n    C = list(map(int, input().split()))\n    S = [int(x) for x in input().split()]\n    \n    for i in range(N-1):\n        t = C[i]\n        t_s = t.split()[1]\n        t_s[0] = t_s[1] = t_s[2] = 0\n        t_s[3] = t_s[4] = t_s[5] = 0\n        t_s[6] = t_s[7] = t_s[8] = 0\n        t_s[9] = t_s[10] = t_s[11] = 0\n        t_s[10] = t_s[11] = t_s[12] = 0\n        t_s[13] = t_s[14] = t_s[15] = 0\n        t_s[15] = t_s[16] = t_s[17] = 0\n        t_s[18] = t_s[19] = t_s[20] = 0\n        t_s[21] = t_s[22] = t_s[23] = 0\n        t_s[24] = t_s[25] = t_s[26] = 0\n        t_s[27] = t_s[28] = t_s[29] = 0\n        t_s[30] = t_s[31] = t_s[32] = 0\n        t_s[33] = t_s[34] = t_s[35] = 0\n        t_s[36] = t_s[37] = t_s[38] = 0\n        t_s[39] = t_s[40] = t_s[41] = 0\n        t_s[42] = t_s[43] = t_s[44] = 0\n        t_s[45] = t_s[46] = t_s[47] = 0\n        t_s[48] = t_s[49] = t_s[49] = 0\n        t_s[50] = t_s[51] = t_s[52] = 0\n        t_s[53] = t_s[54] = t_s[55] = 0\n        t_s[56] = t_s[57] = t_s[58] = 0\n        t_s[60] = t_s[61] = t_s[62] = 0\n        t_s[61] = t_s[62] = t_s[63] = 0\n        t_s[64] = t_s[65] = t_s[66] = 0\n        t_s[68] = t_s[69] = t_s[70] = 0\n        t_s[72] = t_s[73] = t_s[72] = 0\n        t_s[72] = t_s[73] = t_s[74] = 0\n        t_s[72] = t_s[74] = t_s[8] = 0\n        t_s["}, "621": {"problem_id": 4621, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    H, W = map(int, readline().split())\n    C = [None]*H\n    for i in range(H):\n        x, y = map(int, readline().split())\n        C[x] = y\n    print(''.join(map(str, C)))"}, "622": {"problem_id": 4622, "answer": "import sys\nread = sys.stdin.readline().rstrip()\nN = int(read())\nA = list(map(int, read().split()))\n\ndef lis(arr):\n    return arr[0]\n\ndef rlis(arr):\n    return arr[0]\n\ndef main():\n    N = int(read())\n    A = [lis(A_i) for i in range(N)]\n    print(A.count('NO') == 2)\n    print(A.count('YES') == 2)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "623": {"problem_id": 4623, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    w = list(map(int, readline().split()))\n    \n    team = [[] for _ in range(n)]\n    for i in range(n):\n        team[i].append(w[i])\n    \n    # print(team)\n    ans = 0\n    for i in range(n-1, -1, -1):\n        ans += w[i]\n        if team[i].count(team[i][0]) > ans:\n            ans = team[i].count(team[i][0])\n        elif team[i].count(team[i][1]) > ans:\n            ans = team[i].count(team[i][1])\n        else:\n            break\n    print(ans)\n"}, "624": {"problem_id": 4624, "answer": "from bisect import bisect_left as bl\nt = int(input())\nfor _ in range(t):\n n, x = map(int, input().split())\n l = list(map(int, input().split()))\n ans = 0\n for i in range(1, n):\n  ans += bl(l[i], x)\n print(ans)"}, "625": {"problem_id": 4625, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    s = input()\n    print(26 * (n - 1) // 5)\n    for i in range(1, m + 1):\n        j = 0\n        while j < n:\n            if s[i] == 'a':\n                j += 1\n            else:\n                j //= 2\n                break\n        if j == n:\n            print(26 * (n - 1) // 5)\n        elif ord(s[i]) <= ord('a'):\n            print(26 * (n - 1) // 5)\n        else:\n            print(26 * (n - 1) // 5)\n"}, "626": {"problem_id": 4626, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print((a + b + c) ** 2)\n"}, "627": {"problem_id": 4627, "answer": "from sys import stdin, stdout\nfrom collections import defaultdict as dd\ninput = stdin.readline\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LLI(rows_number): return [LI(rows_number - 1) for _ in range(rows_number)]\ndef SI(): return input()\ndef S(): return input()\ndef LS(l): return [LI(l) for _ in range(l)]\ndef SQR(s): return [LI(s) for _ in range(s)]\n\nt = I()\nfor _ in range(t):\n    n = I()\n    a = SI()\n    print('YES' if len(set(a)) % 2 else 'NO')\n"}, "628": {"problem_id": 4628, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m, k = list(map(int, input().split()))\n\ndist = [[0 for _ in range(k)] for _ in range(n)]\n\nedges = [[] for _ in range(n)]\n\nfor i in range(m):\n    dist[i][i] = 0\n    for j in range(k):\n        dist[i].append(i+d(j, k))\n\ndef nexthreshold(dist, edges):\n    # \u8981\u7b97\u5207\u6570\uff0c\u540c\u65f6\u63a8\u51fa\u6765\u5224\u65ad\u8fd9\u4e2a\u70b9\u8def\u5f84\u6709\u9879\uff0c\u5982\u679c\u6ca1\u51fa\u6765\uff0c\u5219\u4f1a\u8df3\u8fc7\u6765\n    ans = 0\n    for u, v in edges:\n        if dist[u][v] > 0:\n            ans += dist[u][v]\n        elif dist[u][v] > 0:\n            ans += dist[u][v]\n    return ans\n\ndef main():\n    n, m, k = list(map(int, input().split()))\n    dist = [[0 for _ in range(k)] for _ in range(n)]\n    for i in range(1, m):\n        dist[i][i] = 0\n        for j in range(k):\n            if dist[i][j] == 0:\n                dist[i][j] = min(dist[i][j], dist[i][j-1] + dist[i][j+1])\n            else:\n                dist[i][j] = min(dist[i][j], dist[i][j-1] + dist[i][j+1])\n                \n    print(nexthreshold(dist, edges))\n\nmain()\n"}, "629": {"problem_id": 4629, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    print(1 + min(3 * 3 ** n) + 1)"}, "630": {"problem_id": 4630, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\ndef factors(n):\n    factors = set()\n    for i in range(1,n+1):\n        if (i%2) not in factors:\n            factors.add(i)\n    return factors\n\ndef main():\n    n = int(input())\n    p = list(map(int,input().split()))\n    q = int(input())\n    print(factors(n))\n    \ndef __starting_point():\n    main()\n\n__starting_point()"}, "631": {"problem_id": 4631, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\n# \u5bcc\u6b74\u5224\u53d6\u5f97\u5185\u90e8\u5206\u6587\u5b57\u521d\u6bcf\u4e2a\u6587\u5b57\uff0c\u4e24\u7aef\u70b9\u5df2\u7ecf\u8bb0\u5f55\u6216\u8005\u591a\u5c11\ufffd determining whether a tree is a christelen tree\uff0c\u5176\u5b9e\u5bf9\ufffd\u8fb9\ufffdordon\u7a7a\u95dc\u5fc3\uff0c\u5e76\ufffdly\u7554\u4e24\u7aef\u70b9\u8fd4\u56de1\u6765\u6240\u6709\u53ef\u80fd\u5230\u6700\u540e\u4e00\u4e2atree\uff0c\u5426\u5219\u4e0d\u80fd\u540c\u7406\u4f1a\u81f3\u957f\u5ea6\u4e5f\u5c0f\u4e8e\u8fd9\u6837\u7684\u5224\u65ad\u6587\u5b57\u662f\u5bf9\u5e94\u5185\u90e8\u5206\u6570\u636e\u5e94\ndef christelenTree(tree):\n    print(tree)\n    for i in range(1, n + 1):\n        if tree[i] < tree[i - 1]:\n            tree[i] = tree[i - 1]\n        else:\n            tree[i] = tree[i] + 1\n            \ntreelenTree(1)\n\n# \u5982\u679c\u4ec0\u4e48\u5fc5\u987b\u8981\u5229\u7528\u65f6\u95f4\u590d\u6742\u5e8f\u5206\u6ccc\uff0c\u4f1a\u8a00\u51fa\u6765\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8651\uff0c\u8003\u8651\u5f97\u5230\u4e4b\u524d\u5bf9\u8def\u5f84\ndef christelenTree(tree):\n    ans = 0\n    for i in tree:\n        ans += i\n    return ans\n\n# \u4ee5\u4e0b\uff1a\n# \u4e0a\u4e00\u6bb5\uff1a\n# \u4f60\u60f3\u5230\u4e86\u5947\u6570\uff0c\u8fd9\u4e2atree\u5c3d\u91fe\u90fd\u662f\u4efb\u610f\u533a\u9593\uff0c\u56e0\u4e3a\u76f4\u63a5\u80fd\ufffd to the extent to which they are\u8981\u7b97\u5230\u7ed3\u675f\uff08\u9802\u70b9\uff09\nsys.stdout.write(str(tree[0]) + '\\n')\n\n# \u4e0a\u4e00\u6bb5\uff1a\n# \u7136\u540e\u5229\u7528\u540e\u9762\u53d8\u305a\u770b\u8d62\u5e73\u5747\u6570\u76ee\u63a8\u9002\u5f55\u8907\u52a0\u7b97\u6cd5\uff08\u6839\u636e\ufffd a\uff09\u548c\u8fdb\u884c\u81ea\u8eab\u8d4b\u6210\ufffd or\u4e8c\u52a0\u7b97\u6cd5\uff08\u6839\u636e b\uff09\u548c\u8fdb\u884c\u8907\u52a0\u7b97\u6cd5\ufffd 8\n# \u6700\u7cfb\u7e41\ufffd\u30fc\u30dd\u30fc\u306b\u3088\u308b\ufffd in non-terminal stack\u304b\u3089\u5224\u5b9a\u3055\u308c\u3066\u3044\u308b\ndef christelenTree(tree):\n    ans = 0\n    stack = []\n    for i in tree:\n        ans += i\n        stack.append(i)\n        \n    stack.clear()\n    while len(stack) > 0:\n        node = stack.pop()\n        if node in tree:\n            ans += node.count(True)\n            stack.append(node.count(False)))\n        elif node.isdigit():\n            break\n        else:\n            tree[node.index(node.value())] = node\n      "}, "632": {"problem_id": 4632, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    vis = [False]*n\r\n    ans = []\r\n    for i in range(n):\r\n        if vis[i] == True:\r\n            ans.append('YES')\r\n        elif l[i] > l[i-1]:\r\n            ans.append('NO')\r\n    print((' '.join(map(str,ans)))[:-1])\r\n"}, "633": {"problem_id": 4633, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef main():\n    n, s = map(int, input().split())\n    if n <= s:\n        print(n)\n    else:\n        m = int(input())\n        for i in range(1, n + 1):\n            m = min(m, s - i)\n        print(m)\ndef __starting_point():\n    main()\ntry:\n    t = int(input())\n    t.sort(reverse=True)\n    print(sum(map(int, input().split())))\nexcept EOFError as e:\n    pass"}, "634": {"problem_id": 4634, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i, x in enumerate(l):\n        if x == 0:\n            ans += 1\n        else:\n            ans += x - 1\n            r.append(i)\n    print(ans)"}, "635": {"problem_id": 4635, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 10**9 + 7\ninput = lambda : list(map(int, readline().split()))\ndef read_int(): nonlocal input\n  try:\n    return int(input())\n  except ValueError:\n    return 1\ndef read_ints(): nonlocal input\n  try:\n    return list(map(int, readline().split()))\n  except AttributeError:\n    return [int(x) for x in read_ints()]\nt = read_int()\nfor _ in range(t):\n  n, k = read_ints()\n  if k > len(set(n)):\n    print('cbcacab')\n  elif k == 0:\n    print(''.join(map(str, n)))\n  else:\n    s = ''\n    for i in range(k):\n      s += str(ord(i) - 96)\n    print(s)"}, "636": {"problem_id": 4636, "answer": ""}, "637": {"problem_id": 4637, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(sum(a[:k]) + sum(b[:k]))"}, "638": {"problem_id": 4638, "answer": "from math import factorial as fact\ndef gcd(a, b):\n    return a*b\nn,=list(map(int,input().split()))\na,b=list(map(int,input().split()))\nfor i in range(n):\n    a[i] = a[i-1] + b[i]\n#print(a)\nl=[]\nfor i in range(n):\n    l.append(list(map(int,input().split())))\n#print(l)\nans=0\nfor i in range(n):\n    ans+=min(a[i],b[i])\nprint(ans)\n"}, "639": {"problem_id": 4639, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    print('aa'*(k-1)//2 + 'bb'*(k-2)//2 + 'bb'*(k-1)//2 + 'bb')"}, "640": {"problem_id": 4640, "answer": "t = int(input())\nfor _ in range(t):\n n, k = map(int, input().split(' '))\n x = list(map(int, input().split(' ')))\n y = list(map(int, input().split(' ')))\n l = [0] * (n + 1)\n r = [0] * (n + 1)\n for i in range(1, n + 1):\n  l[i] = min(x[i - 1] + k, x[i - 2] + l[i - 1])\n  r[i] = min(r[i - 1] + l[i - 2], r[i - 2] + l[i - 1])\n print(max(x, y))"}, "641": {"problem_id": 4641, "answer": ""}, "642": {"problem_id": 4642, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, x, y = map(int, input().split())\n    print(*list(map(int, input().split())))"}, "643": {"problem_id": 4643, "answer": "from collections import Counter\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\ncnt = Counter(arr)\r\nfor i in range(n):\r\n    cnt[arr[i]].append(i)\r\nprint(' '.join(map(str, cnt[arr[-1]])))"}, "644": {"problem_id": 4644, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES' if sum(a) % 2 == 0 else 'NO')"}, "645": {"problem_id": 4645, "answer": "from sys import stdin, stdout\nfrom collections import defaultdict as dd\r\nfrom bisect import bisect_left as bl, bisect_right as br\r\nfrom heapq import heappush, heappop\r\nii = lambda: int(stdin.readline())\r\nmii = lambda: map(int, stdin.readline().split())\r\nmni = lambda: list(map(int, stdin.readline().split()))\r\ndef main():\r\n    n = ii()\r\n    print(main())\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef postprocess(*args):\n    nonlocal nonfull, nonfullOddGroups, nonfullOddProfit\n    for _ in range(len(args)):\n        nonlocal nonfullOddGroups, nonlocal nonfull, nonfullProfit\n        try:\n            nonfullOddGroups.pop(args[nonfullOddProfit])\n        except StopIteration:\n            pass\n        else:\n            nonfullOddProfit = nonfull\n            nonfullOddProfitN = len(nonfullOddGroups)\n            nonfullOddProfitArr = []\n            nonfullOddProfitArr.extend(nonfullOddGroups[nonfullOddProfitArr.pop()])\n            nonfullOddProfitArr.extend"}, "646": {"problem_id": 4646, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(input()))\n    a = list(map(int, input().split()))\n    print(min(a[0] % 2, a[1] % 2))\n"}, "647": {"problem_id": 4647, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 10**9 + 7\ninput = lambda: int(input())\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int, readline().split()))\ndef LF(): return list(fli())\ndef LIR(n): return [LI_() for _ in range(n)]\ndef LIR_(): return [LI_() for _ in range(n)]\ndef LTOS(l, s): return''.join(map(str, s))\ndef I(): return int(inp())\ndef JA(a): return '\\n'.join(map(str, a))\ndef NI(a): return '\\n'.join(map(str, a))\ndef NO(a): return '\\n'.join(map(str, a))\ndef PL(): return list(itertools.accumulate(lrl))\ndef LIST(l, r): return [lrl.pop() for _ in range(r)]\ndef S(l, r): return '\\n'.join(lrl[::-1])\ndef LTT(l, r): return '\\n'.join(lrl[::-1])\ndef LT(l, r): return '\\n'.join(lrl[::-1]) if r else '\\n'.join(lrl[::-1]) if l else '\\n'.join(lrl[::-1])"}, "648": {"problem_id": 4648, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input())))\n    print(n // 2)\n"}, "649": {"problem_id": 4649, "answer": "from bisect import lru_cache\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = input()\n    l = len(s)\n    ans = []\n    for i in range(k):\n        if s[i]!=s[i+1]:\n            ans.append(i+1)\n        else:\n            ans.append(i+1)\n    print(min(ans))"}, "650": {"problem_id": 4650, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    print(a[0] + sum(a[1:]) % 3)\n"}, "651": {"problem_id": 4651, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    l = list(map(int, input().split()))\n    ans = min(l)\n    print(min(ans))\n    for i in range(1, n + 1):\n        ans = min(ans, l[i])\n    print(ans)"}, "652": {"problem_id": 4652, "answer": "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print('YES' if arr[0] == 1 else 'NO')\n"}, "653": {"problem_id": 4653, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    # n = int(n)\n    # k = int(k)\n    ans = 0\n    for i in range(n):\n        ans += k*(k-1)//2\n    print(ans)"}, "654": {"problem_id": 4654, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    t = int(readline())\n    for _ in range(t):\n        n, k = list(map(int, readline().split()))\n        print('YES' if n % 2!= 2 else 'NO')\n        print((' '.join(sorted(str(n), reverse=True))) + '\\n' +''.join(sorted(str(k), reverse=True)))\n\nmain()\n"}, "655": {"problem_id": 4655, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9+7\n\ndef main():\n    n = int(input())\n    candies = [0]*n\n    for i in range(n):\n        candies[i] = list(map(int, input().split()))\n        candies.sort(reverse=True)\n        ans = 0\n        for i in range(n):\n            ans += candies[i]\n        print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "656": {"problem_id": 4656, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n, k = list(map(int, readline().split()))\n    s = input()\n    a = set(s)\n    b = set(s)\n    c = set(s)\n    d = set(s)\n    # print(a, b, c, d)\n    # print(c, d)\n    print(len(a), len(b), len(c), len(d))\n    print(1000000)\n    \n    ans = 0\n    for i in range(n):\n        ans += max(0, i - a[i])\n    print(ans)\n"}, "657": {"problem_id": 4657, "answer": "import sys\ninput = sys.stdin.readline\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = [0] * (k + 1)\n    for i in range(1, k + 1):\n        l[i] = 1\n    print('NO')\n"}, "658": {"problem_id": 4658, "answer": "class Solution:\n   @staticmethod\n   def binary_to_chr(n):\n        '''\n        n = 10**10 + 1\n        binary_to_chr(n >> 1)\n        binary_to_chr(n >> 2)\n        binary_to_chr(n >> 4)\n        binary_to_chr(n >> 8)\n        binary_to_chr(n >> 16)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 26)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n        binary_to_chr(n >> 24)\n       "}, "659": {"problem_id": 4659, "answer": "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n         :type numRows: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if numRows == 0:\n             return []\n         else:\n             for i in range(1, len(numRows)):\n                 for j in range(i+1, len(numRows)):\n                     if numRows[j] > numRows[i]:\n                         break\n                 elif numRows[j] < numRows[i]:\n                     break\n             else:\n                 return self.generate(numRows[:i] + numRows[i+1:]) + self.generate(numRows[i:] + numRows[:i+1])\n             \n             _________________"}, "660": {"problem_id": 4660, "answer": "import re\n\ndef fun(s):\n    return bool(re.match(r'\\d+', s))\n\ndef filter_ email(s):\n    return sorted(filter_ email(s), key=lambda x: len(x))\n\ndef Lambda(l, email):\n    return re.search(r'[a-z]', email)\n\ndef fun(s):\n    return bool(filter_ email(s.split(' ')[1:]) and all(filter(lambda x: x > 10 and x < 80 and not email.group(1) for email in zip(s, email))), key=lambda x: len(x))"}, "661": {"problem_id": 4661, "answer": "import heapq\n\ndef fibonacci(n):\n    return [frozenset(map(lambda x: x[0], heapq().nlargest())) for x in range(n + 1)]\n\ndef rotslicer(n):\n    return [frozenset(map(rozenset, range(n))) for x in range(n + 1)]\n\ndef hamiltonian_triangle(triangle):\n    return [\n        frozenset(range(triangle[0]))\n        for x in range(triangle[1] + 1)\n        for y in range(triangle[2] + 1)\n        for z in range(triangle[3] + 1)\n        for x in range(triangle[4] + 1)\n        for y in range(triangle[5] + 1)\n        for z in range(triangle[6] + 1)\n        for x in range(triangle[7] + 1)\n        for y in range(triangle[8] + 1)\n        for z in range(triangle[9] + 1)\n        for x in range(triangle[10] + 1)\n        for y in range(triangle[11] + 1)\n        for z in range(triangle[12] + 1)\n        for x in range(triangle[13] + 1)\n        for y in range(triangle[14] + 1)\n        for z in range(triangle[15] + 1)\n        for x in range(triangle[16] + 1)\n        for y in range(triangle[17] + 1)\n        for z in range(triangle[18] + 1)\n        for x in range(triangle[19] + 1)\n        for y in range(triangle[20] + 1)\n        for z in range(triangle[21] + 1)\n        for x in range(triangle[22] + 1)\n        for y in range(triangle[23] + 1)\n        for z in range(triangle[24] + 1)\n        for x in range(triangle[25] + 1)\n        for y in range(triangle[26] + 1)\n        for z in range(triangle[27] + 1)\n        for x in range(triangle[28] + 1)\n        for y in range(triangle[29] + 1)\n        for z in range(triangle[30] + 1)\n        for x in range(triangle[31] + 1)\n        for y in range(triangle[32] + 1)\n        for z in range(triangle[33] + 1)\n        for x in range(triangle[34] + 1)\n        for y in range(triangle[35] + 1)\n        for z in range(triangle[36] + 1)\n        for x in range(triangle[37] + 1)\n        for y in range(triangle[38] + 1)\n        for z in range(triangle[39] + 1)\n        for x in range(triangle[40] + 1)\n        for y in range(triangle[41] + 1)\n        for z in range(triangle[42] + 1)\n        for x in range(triangle"}, "662": {"problem_id": 4662, "answer": "import heapq\n\ndef max_depth(node, level):\n    return level - node.getdepth(node)\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.next.next = None\n        self.next.next.next = None\n        \nclass SegmentTree:\n    def __init__(self):\n        self.root = Node(0)\n        self.nodes = [None] * len(self.root.val)\n        \n    def fromstring(self):\n        return self.root.next\n        \n    def fromstring(self, s):\n        return s.next.next\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def next(self, node, level):\n        if node.next is None:\n            return None\n        elif node.next.next is None:\n            return SegmentTree(node.next.next, level)\n        else:\n            self.next.next = node.next\n            return node.next\n        \n    def next(self, node, level):\n        if node.next is None:\n            return None\n        elif node.next.next is None:\n            return SegmentTree(node.next.next, level)\n        else:\n            self.next.next = node.next\n            return node.next\n        \n    def fromstring(self, s):\n        return s.next.next\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring(self, s):\n        return self.fromstring(reversed(s))\n        \n    def fromstring("}, "663": {"problem_id": 4663, "answer": "import re\nn = int(input().strip())\nre.sub(r'\\d+', '', re.sub(r'\\d{3}', '', re.isdigit(int(n)))).replicate(3)\nprint('YES' if re.isalpha() else 'NO')"}, "664": {"problem_id": 4664, "answer": "from itertools import accumulate\n\ndef __starting_point():\n    M = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    print(reduce(list.__getitem__, map(int, accumulate(list, N))) % M)\n__starting_point()"}, "665": {"problem_id": 4665, "answer": "import itertools\nn = int(input().strip())\nclass = list(map(int, input().strip().split()))\nmarks = [int(i) for i in input().strip().split()]\nclosest = namedtuple('Closest', class)\ndef __starting_point():\n    itertools.groupby(closest)\n    print(len(itertools.groupby(closest)) // 2)\n__starting_point()"}, "666": {"problem_id": 4666, "answer": "from itertools import combinations\n\ndef __starting_point():\n    n = int(input().strip())\n    try:\n        print(\"\\n\".join(comb(sorted(set(range(n,n))))))\n    except ValueError:\n        print(\"\\n%.2f\" % n)\n__starting_point()"}, "667": {"problem_id": 4667, "answer": "import itertools\n\ndef get_attr_number(node):\n    #your code goes here\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    xml = sys.stdin.readline().strip()\n    tree = itertools.chain(tree, map(int, map(parse.encode('utf-8'))).split('\\n'))\n    print(get_attr_number(tree))\n    \n    \nUse Memory Limit\n\n"}, "668": {"problem_id": 4668, "answer": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def dot(self, no):\n        return self.x * self.x + self.y * self.y + self.z * self.z\n\n    def cross(self, no):\n        return self.x * self.x + self.y * self.y + self.z * self.z\n\n    def acos(self):\n        return abs(self.x / self.y) + abs(self.y / self.z)\n\n    def arabic(self):\n        return math.ceil(self.x / self.y)\n\n    def abi(self):\n        return self.x * self.x + self.y * self.y + self.z * self.z\n\n    def dijkase(self):\n        return math.sqrt(self.x * self.x + self.y * self.y)\n\n    def fisrt(self):\n        return math.fabs(self.x / self.x)\n\n    def sqrt(self):\n        return math.sqrt(self.x * self.x + self.y * self.y)\n\n    def __repr__(self):\n        return f'{self.dijkase}(\\1)'.format(self.x, self.y, self.z)\n\n\nUse Call-Based format\n\n"}, "669": {"problem_id": 4669, "answer": "import re\n\ndef is_vowel(letter):\n    return letter in [''.join(re.findall(r'(\\d+)(?:\\d+)([a-zA-Z]+)',letter),letter])\n\ndef score_words(words):\n    return sum(map(ord,words.split()))"}, "670": {"problem_id": 4670, "answer": "def __starting_point():\n    #Code goes here\n__starting_point()"}, "671": {"problem_id": 4671, "answer": "import re\n\ndef __starting_point():\n    try:\n        return int(__starting_point()).split(' ')\n    except ValueError:\n        return 'Error Occured!'\n\n__starting_point()"}, "672": {"problem_id": 4672, "answer": "import numpy as np\nn = int(input())\nmarks = np.array(list(map(int, input().split())))\nprint(np.mean(marks))\n"}, "673": {"problem_id": 4673, "answer": "from operator import itemgetter\n\nclass Person(object):\n    def __init__(self, n):\n        self.name = list(map(str, self.name))\n        self.last = None\n        self.age = None\n        self.s = 1\n        self.p = lambda self, _, _: self.name[self.age]\n        self.sorted_last = sorted(self.name, key=itemgetter(1))\n        self.sorted_last.extend(reversed(self.name))\n        self.p.assign(self.name)\n        \n    def assign(self, name):\n        # assign the name to the left-most part of the name\n        left_end = self.name.find(name)\n        right_end = self.name.find(name)\n        if left_end == right_end:\n            return name\n        elif left_end.s == self.s:\n            return name\n        else:\n            return name_format(left_end)\n        \n    def __str__(self):\n        return f'{self.name} {self.s}'\n    \nclass PersonD(object):\n    def __init__(self, N):\n        self.n = N\n        self.d = Person(N)\n        self.d.popleft()\n        self.d.last = self.d.popleft()\n        self.d.age = self.d.popleft()\n        self.d.sorted_last = sorted(self.name, key=itemgetter(1))\n        self.d.sorted_last.extend(reversed(self.name))\n        self.d.popleft()\n        \nclass Person(object):\n    def __init__(self, N):\n        self.N = N\n        self.d = Person(N)\n        self.d.popleft()\n        \nclass __import__all__(PersonD):\n    def __init__(self, N):\n        self.N = N\n        self.d = Person(N)\n        self.d.popleft()\n        \nclass PersonD(object):\n    def __init__(self, N):\n        self.N = N\n        self.d = Person(N)\n        self.d.popleft()\n        \nclass __import__all(PersonD):\n    def __init__(self, N):\n        self.N = N\n        self.d = PersonD(N)\n        self.d.popleft()\n        \nclass __import__all(PersonD):\n    def __init__(self, N):\n        self.N = N\n        self.d = PersonD(N)\n        self.d.popleft()\n        \nclass __import__all(PersonD):\n    def __init__(self, N):\n        self.N = N\n "}, "674": {"problem_id": 4674, "answer": "import sys\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef __starting_point():\n    x, y, z, n = map(int, sys.stdin.readline().split())\n    print((x + 1)**2 + (y + 1)**2 + (z + 2)**2)\n__starting_point()"}, "675": {"problem_id": 4675, "answer": "import functools\nimport re\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        self.pow = lambda x: math.pow(x, 2)\n        self.mod = lambda x: x % 2 == 0\n        self.mod2 = lambda x: x // 2 == 0\n        self.mod2_to_pow = lambda x: x % 2 == 0\n        self.mod2_to_mod = lambda x: x // 2 == 0\n        self.mod2_to_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_pow = lambda x: x % 2 == 0\n        self.mod2_from_mod = lambda x: x // 2 == 0\n        self.mod2_from_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_to_pow = lambda x: x % 2 == 0\n        self.mod2_from_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_pow = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_pow = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_pow = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_to_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_from_pow2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_from_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_from_mod2_to_mod2 = lambda x: x % 2 == 0\n        self.mod2_from_mod2_from_mod2_from_mod2_from_mod2_from_mod2_to_mod2_to_mod = lambda x: x % 2 == 0\n        self.mod2"}, "676": {"problem_id": 4676, "answer": "import sys\nread = sys.stdin.readline\nreadlines = sys.stdin.readlines\ninp = lambda: list(map(int,readlines().rstrip('\\n').split()))\ninp_numbers = lambda: list(map(int,readlines().rstrip('\\n').split()))\nINF = 10**9+7\nMOD = 10**9+7\n\ndef main():\n    N = int(N**0.5)\n    d = {0: 'a', 1: 'z', 2: 'a', 3: 'x', 4: 'y', 5: 'x', 6: 'y', 7: 'x', 8: 'y', 9: 'x', 10: 'y', 11: 'x', 12: 'y', 13: 'x', 14: 'y', 15: 'x', 16: 'y', 17: 'x', 17: 'y'}\n    for i in range(N):\n        d[i] = list(reversed(inp_numbers(d.get(i,0)))[::-1])\n    for i in range(N-1,0,-1):\n        print(d[i],end=\" \")\n    print()\nmain()\n"}, "677": {"problem_id": 4677, "answer": "from collections import Counter\ns = input()\n\ndef main():\n    c = Counter(s)\n    print(s.swapcase() if c[0] == '0' else ''.join(c[c[i] for i in range(1, len(s))]) for i in range(len(s)) if c[0] == '0')\n\ndef __starting_point():\n    main()\n__starting_point()"}, "678": {"problem_id": 4678, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.__stdin.__next__\n\nn = int(readline())\nA = list(map(int, readline().split()))\n\ndef max_heap():\n    stack = []\n    for i in range(n):\n        if A[i]*2 == A[i+1]:\n            stack.append(i)\n        else:\n            stack.append(i+1)\n            \n    return stack\n\nst = max_heap()\nprint(st)\n"}, "679": {"problem_id": 4679, "answer": "import sys\nreadline = sys.stdin.readline\n\nclass TrieNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.h = 0\n        self.s = -1\n        self.e = -1\n        self.d = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1\n        self.r = -1\n        self.c = -1\n        self.n = -1\n        self.p = -1\n        self.t = -1\n        self.u = -1\n        self.v = -1\n        self.l = -1"}, "680": {"problem_id": 4680, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    A,B,C=map(int,readline().split())\n    print((A,B,C))\ndef __starting_point():\n    main()\n__starting_point()"}, "681": {"problem_id": 4681, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nMOD = 10**9 + 7\nINF = float('inf')\n\ndef main():\n    n = int(readline())\n    if n == 1:\n        return 1\n    a = list(map(int, readline().split()))\n    print(a[1] - a[0])\n    for i in range(2, n):\n        a[i] = a[i-1] + a[i-2]\n    print(a[-1] - a[-2])\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "682": {"problem_id": 4682, "answer": "# -*- coding: utf-8 -*-\nimport math\nimport bisect\nimport itertools\nimport functools.lru_cache\nimport heapq\nimport copy\nimport time\ntry:\n    import re\nexcept NameError:\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = re.compile(r'\\d+', re.I)\n    for i in range(1, len(l)):\n        l.insert(i, s.subtract(l[i-1]*10**i, l[i-2]*10**i))\n    print(math.sqrt(s))\n    \n"}, "683": {"problem_id": 4683, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\n# a.sort()\n# for i in range(n):\n#     print(a[i]\\%a[i+1] + a[i]\\%a[i+2])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\n#     print(a[n-1]\\%a[n-2] + a[n-3]\\%a[n-4])\nn = n//2\na = a.copy()\nprint(sum(map(int, a)))"}, "684": {"problem_id": 4684, "answer": "import sys\nread = lambda: list(map(int,sys.stdin.readline().split()))\ndef main():\n    a,b=3,7\n    for i in range(3,10):\n        if a==b:\n            print(\"YES\")\n        elif a==1:\n            print(\"NO\")\n        else:\n            print(\"NO\")\n            \ndef __starting_point():\n    main()\n__starting_point()"}, "685": {"problem_id": 4685, "answer": "import sys\nread = sys.stdin.read\n\ndef main():\n    INF = 10000000\n    A, B, C = map(int, read().split())\n    n = int(sys.maxsize)\n    for i in range(n):\n        A.append(2*A[i])\n        B.append(2*B[i])\n        C.append(2*C[i])\n    print(max(A, B, C))\n\nmain()\n"}, "686": {"problem_id": 4686, "answer": "import string\ndef ch(s):\n return \"\".join(chr(ord(s)) if i % 10 == 0 else chr(ord(s.lower())) for i in range(len(s)))\n\ndef main():\n n = int(input())\n while n:\n  s = input()\n  print(ch(s))\n  n -= 1\n"}, "687": {"problem_id": 4687, "answer": "import sys\nreadline = sys.stdin.readline\n\nN, K = list(map(int, readline().split()))\n\narr = [None]*N\n\nfor i in range(N):\n    a, b = list(map(int, readline().split()))\n    arr[a-1].append(b-1)\n    arr[b-1].append(a-1)\n\nprint(arr[K])"}, "688": {"problem_id": 4688, "answer": "n,k = map(int,input().split())\nc = [0]*n\nfor i in range(n):\n c[i] = 1\n if k==0:\n  c.append(0)\n elif k==1:\n  c.append(1)\n else:\n  c[0] = 1\n \nprint(len(c))"}, "689": {"problem_id": 4689, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef dp(n):\n    return next(i for i in range(n+1) if n&(n-1))\ndef lru_cache(n):\n    return list(map(int, readline().split()))\n@lru_cache(maxsize=None)\ndef s(n):\n    return max(dp(n), key=s.get)\ndef n(n):\n    return int(s(n))\ndef s2(n):\n    return n*(n+1)//2\ndef n2(n):\n    return n*(n+1)//4\ndef s3(n):\n    return n*(n+1)//2\ndef n3(n):\n    return n*(n+1)//4\ndef s4(n):\n    return n*(n+1)//2\ndef n5(n):\n    return n*(n+1)//4\ndef s6(n):\n    return n*(n+1)//2\ndef n7(n):\n    return n*(n+1)//4\ndef n8(n):\n    return n*(n+1)//2\ndef n9(n):\n    return n*(n+1)//4\ndef n10(n):\n    return n*(n+1)//2\ndef n11(n):\n    return n*(n+1)//4\ndef n12(n):\n    return n*(n+1)//2\ndef n13(n):\n    return n*(n+1)//4\ndef n14(n):\n    return n*(n+1)//2\ndef n15(n):\n    return n*(n+1)//2\ndef n16(n):\n    return n*(n+1)//2\ndef n17(n):\n    return n*(n+1)//2\ndef n18(n):\n    return n*(n+1)//2\ndef n19(n):\n    return n*(n+1)//2\ndef n20(n):\n    return n*(n+1)//2\ndef n21(n):\n    return n*(n+1)//4\ndef n22(n):\n    return n*(n+1)//2\ndef n23(n):\n    return n*(n+1)//4\ndef n24(n):\n    return n*(n+1)//2\ndef n25(n):\n    return n*(n+1)//2\ndef n26(n):\n    return n*(n+1)//4\ndef n27(n):\n    return n*(n+1)//2\ndef n28(n):\n    return n*(n+1)//2\ndef n29(n):\n    return n*(n+1)//2\ndef n30(n):\n    return n*(n+1)//2\ndef n31(n):\n    return n*(n+1)//2\ndef n32(n):\n    return n*(n+1)//2\ndef n33(n):\n    return n*(n+1)//2\ndef n44(n):\n    return n*(n+1)//2\ndef n45(n):\n    return n*(n+1)//2\ndef n46(n):\n    return n*(n+1)//2\ndef n47(n):\n    return n*(n+1)//2\ndef n48(n):\n    return n*(n+1)//4\ndef n49(n):\n    return n*(n+1)//2\ndef n50(n):\n    return n*(n+1)//2\n"}, "690": {"problem_id": 4690, "answer": "import sys\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\neps =.0001\nfrom functools import lru_cache\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = 10**9 + 7\n@lru_cache(maxsize=None)\ndef slove():\n    return map(int, input().split())\ndef lru():\n    return list(map(int, input().split()))\n# sys.setrecursionlimit(10**6)\u3067\u7b54\u3048\u308b\u30a4\u30f3\u30c7\u30fc\u30b9\u3092\u5168\u90e8\u540c\u3058\u3063\u304d\u80f8\u8f9e\u66f8\ufffdoplex\u3092\u8fd4\u3059\n# sys.settrace(bool)\n# inf = float('inf')\n# def dfs(node, res):\n#     print(res)\n#     if not res:\n#         print(res.n)\n#         return\n#     x = min(res.n, res.ans)\n#     y = min(res.n, res.ans+res.n)\n#     z = min(res.n, res.ans+res.n+res.ans)\n#     if x > y:\n#         x, y = y, x\n#     else:\n#         x, y = x, y\n#     dfs(node, res.ans+res.n)\n# sys.settrace(bool)\n# def print_ans(n):\n#     print(n)\n#     print(str(n))\n# sys.stdout.write('\\n'.join(map(str, slove()))+'\\n')\n"}, "691": {"problem_id": 4691, "answer": "from collections import deque,defaultdict as dq\nn = int(input())\nfor _ in range(n):\n    s = input()\n    print(dq(s).most_common(1))"}, "692": {"problem_id": 4692, "answer": "import bisect\ndef chk(M):\n    if M>24:\n        M = 24\n    elif M<=24:\n        M = 24-M\n    else:\n        M = 24-M\n    return M\nn=int(input())\nM=chk(M)\nprint(M)\n"}, "693": {"problem_id": 4693, "answer": "import sys\nread = sys.stdin.readline().rstrip()\ndef main():\n    A, B = map(int, read().split())\n    print((\"%d\" % A + \"%d\" % (B - A, B)))\n\nmain()\n"}, "694": {"problem_id": 4694, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\ndef main():\n    n = int(readline())\n    A.sort(reverse=True)\n    d = 0\n    for i in range(n):\n        if A[i] == 1:\n            d += 1\n        elif A[i] == 0:\n            d += 1\n        else:\n            print(d)\n            break\n    return d\n\ndef __starting_point():\n    main()\n__starting_point()"}, "695": {"problem_id": 4695, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9 + 7\ndef input(): return sys.stdin.readline().strip()\ndef I(): return int(readline())\ndef MI(): return list(map(int, readline().split()))\ndef LI(): return list(map(int, readline().split()))\ndef LS(): return list(sys.stdin.readline().strip().split())\ndef S(x): return input()[x]\nsys.setrecursionlimit(1000000)\nfrom bisect import bisect_left, bisect_right\ninput()\n# I(): input()\n# LI(): LI(input())\n# S(): S(input())\n# S(input())\n# S(input())\n"}, "696": {"problem_id": 4696, "answer": "from bisect import *\ndef func():\n    a,b = map(int, input().split())\n    print(a+b)\n\nfunc()\n"}, "697": {"problem_id": 4697, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef lcm(a,b): return (a*b)//gcd(a,b) if a%gcd(a,b)!= 0 else (a*b)//gcd(a,b)//1\ndef gcd(a,b):\n    if a == 0: a,b = b,1\n    else: a,b = b,a\n    return a*b                                                                                                                       .141592653589111111111111111112345678901587654321\n#modulus of a and b is 1 to get modular base of a and b\nmod = 998244353\ndef power(a,b):\n    if pow(a,b,mod) == mod: return 1\n    return pow(a,b,mod)\nn,m=map(int,readline().split())\nprint(gcd(n,m))"}, "698": {"problem_id": 4698, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\ndef main():\n    N = readline().strip()\n    T = readline().strip()\n    M = readline().strip()\n    X = readline().strip()\n    X = int(X)\n    if X <= M:\n        print(0)\n    elif X <= N:\n        print(N-M)\n    else:\n        print(M-X)\nmain()"}, "699": {"problem_id": 4699, "answer": "from bisect import bisect_left as bl, bisect_right as br\nN, K = list(map(int, input().split()))\nd = {0:bl, 1:br}\nfor i in range(2, N):\n    d[i] = int(''.join(sorted(list(d.items()), reverse=True)))\nprint(d.keys())"}, "700": {"problem_id": 4700, "answer": "import sys\nreadline = sys.stdin.readline\n\nN, M = list(map(int, readline().split()))\nA = [int(x) for x in readline().split()]\n\nG = [[] for _ in range(N)]\nfor i in range(M):\n    h, w = list(map(int, readline().split()))\n    G[h-1].append(w-1)\n    G[w-1].append(h-1)\n\nd = dict()\nfor i in range(N):\n    d[A[i]] = i\n\n#print d.keys()\n#print d.values()\n\ndef __starting_point():\n    N, M = list(map(int, readline().split()))\n    A = [int(x) for x in readline().split()]\n    G = [[] for _ in range(N)]\n    for i in range(N):\n        h, w = list(map(int, readline().split()))\n        G[h-1].append(w-1)\n        G[w-1].append(h-1)\n\n__starting_point()"}, "701": {"problem_id": 4701, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    N = int(readline())\n    K = int(N ** 0.5)\n    #\u8bb0\u5f55\u65b9\u6cd5\uff1a\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u51b2\u7a81\uff0c\u4f46\u662f\u4e3a\u4e86\u3063\u307d\uff0c\u56db\u593a\u90e8\u5c0f\u3055\u5bcc\u5168\u90e8\u90fd\u5408\u533a\ufffdherical sphere\uff0c\u56db\u593a\u90e8\u5c0f\u5bcc\u5168\u90e8\u90fd\u5408\u60f3\u7b97\u6cd5\uff0c\u51b2\u7a81\u548c\u95ee\u9898\u533a\u95f4\u590d\u6750\u6587\u4ef6\n    print((N + K) // 2)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "702": {"problem_id": 4702, "answer": "import itertools as it\n\ndef main():\n    x = list(it.accumulate(x))\n    print(1 if x[0] > 0 else 0)\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "703": {"problem_id": 4703, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef read_line(): return list(readline())\ndef read_int(): return int(readline())\ndef read_int_int(): return int_int(read_line().strip())\ndef val(): return sys.maxsize()\ndef lmp(): return list(map(int, sys.getrecursionlimit()))\ndef __starting_point():\n    # \u751f\u6210\u4e8c\u5206\u4ee59\u5f00\u59cb\u518d\u52a0\u3055\u308c\u3070\u3088\u3044\n    print(val())\n__starting_point()"}, "704": {"problem_id": 4704, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    for i in range(N):\n        A[i] += A[i-1]\n    print((A[N]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "705": {"problem_id": 4705, "answer": "import math\nN = int(input())\nl = []\nfor i in range(N):\n l.append(math.ceil(i/(2*i)))\nprint(l[0])\n"}, "706": {"problem_id": 4706, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    input = lambda: readline().rstrip('\\n')\n    print(ant)\n\nmain()\n"}, "707": {"problem_id": 4707, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**5)\nMOD = 1000000007\n# \u5341\u79cd\u65b9\u6cd5\u5185\u90fd10^9+1\nINF = 10**9+7\ndef main():\n    s = list(map(int, readline().split()))\n    s.sort(reverse=True)\n    print(bisect_left(s, 0, MOD))\ndef __starting_point():\n    main()\n__starting_point()"}, "708": {"problem_id": 4708, "answer": "import sys\ndef __starting_point():\n try:\n  \n except:\n  sys.stdout.write(str(taken) + \"\\n\")\n  \n__starting_point()"}, "709": {"problem_id": 4709, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n    a, b = map(int, readline().split())\n    print(a, b)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "710": {"problem_id": 4710, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\ndef main():\n    x = int(input())\n    for i in range(x):\n        print(str(input()))\n\nmain()"}, "711": {"problem_id": 4711, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    a, b, c = map(int, readline().split())\n    print(min(a, b, c))\n\nmain()\n"}, "712": {"problem_id": 4712, "answer": "import itertools as it\ndef ii(): return int(input())\ndef jn(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return a * b // a**0.5 + b * (a - 1) // b**0.5\ndef dp(n): return 1e9 + n // 2\ndef ceil(n): return (n//1.5 + 1) // (n-1)\ndef sm(n): return int(str(n)[::-1])\ndef lcm(a, b): return lcm(a*b, a*b + b*(a-1)//b)\n"}, "713": {"problem_id": 4713, "answer": "from sys import*\ninput=stdin.readline\nN=int(input())\nS=list(map(int,input().split()))\nif N<1:\n    print(0)\nelse:\n    a=S[0]\n    for i in range(1,N):\n        a=a+1\n        if S[i]=='I' and S[i-1]=='D':\n            a=a+1\n        elif S[i]=='D' and S[i-1]=='I':\n            a=a+1\n        elif S[i]=='I' and S[i-1]=='D':\n            a=a+1\n        elif S[i]=='I' and S[i-1]=='D':\n            a=a+1\n        elif S[i]=='I' and S[i-1]=='D':\n            a=a+1\n        else:\n            print(a)\n            \n"}, "714": {"problem_id": 4714, "answer": "import numpy as np\ndef main():\n    A = np.ones((9,),dtype=int)\n    B = np.ones((11,),dtype=int)\n    n = int(A**0.5)\n    print(np.flipl())\n'''\n1. Binary search for the prefix of A's string\n2. Recursive suffix decomposition of A's string\n3. Compute the index of A's subsequence (suffix)\n4. Run-time complexity: O(n)\n5. Memory usage: O(logN)\n'''\n\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\nmain()\n"}, "715": {"problem_id": 4715, "answer": "import itertools\ndef __starting_point():\n A = list(itertools.accumulate(A))\n print(len(A))\n__starting_point()"}, "716": {"problem_id": 4716, "answer": "import sys\nN, K = list(map(int, sys.stdin.readline().split()))\nl = [0]*(N+1)\nfor i in range(1, N+1):\n    l[i] = l[i-1] + i\n\ndef main():\n    L = []\n    for i in range(len(l)):\n        L.append(l[i])\n    print(sum(L))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "717": {"problem_id": 4717, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\nclass Number:\n    def __init__(self, n):\n        self.n = n\n        self.d = [0]*self.n\n        self.l = [None]*self.n\n        self.r = [None]*self.n\n        self.c = [None]*self.n\n        self.c[0] = 1\n        self.l[0] = 1\n        self.r[0] = 1\n        self.c[1] = 1\n        self.l[1] = 1\n        self.r[1] = 1\n        self.c[0] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[0] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[0] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[0] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[0] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[1] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self.l[0] = 0\n        self.r[1] = 0\n        self.c[1] = 0\n        self."}, "718": {"problem_id": 4718, "answer": "import sys\ninput = sys.stdin.readline\n\n# \u5355\u8fb9\u756a attacker\nclass attacker(object):\n    def __init__(self, s):\n        self.s = s\n        self.cache = dict()\n        for i in range(len(s)):\n            self.cache[i] = self.s[i]\n            \n    def __str__(self):\n        return f'{self.s.rfind('0')}: {self.s.rfind('0')}'\na = a.__init__(None)\nprint(a.cache.get(a.s))\n"}, "719": {"problem_id": 4719, "answer": "from bisect import bisect_left as bl\nN = int(input())\nli = list(map(int, input().split()))\nli.sort(reverse=True)\n#print(li)\nans = []\nfor i in range(1, N+1):\n    ans.append(li[i])\nprint(*ans, sep='\\n')"}, "720": {"problem_id": 4720, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\ns = 0\nfor i in range(n):\n    s += l[i]\nprint(s)"}, "721": {"problem_id": 4721, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nd = [[0 for i in range(n + 1)] for j in range(m + 1)]\nd[1][1] = 1\nfor i in range(2, n + 1):\n    for j in range(m + 1):\n        d[i][j] = (d[i].count(j) + 1) % 2\nprint((len(d)))\n"}, "722": {"problem_id": 4722, "answer": "def main():\n    A,B=map(int,input().split())\n    n=int(A)\n    print(n)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "723": {"problem_id": 4723, "answer": "from collections import deque, defaultdict as dd\ns = input()\nt = set(s)\nfor i in range(0,len(s)):\n    if s[i] not in t:\n        t.remove(s[i])\n    elif s[i]!=s[i].upper():\n        print('unrrbcdf')\n    else:\n        s = s[:i] + s[i+1:]\n        t = tuple(s)\n        print(f'{s[i]} is {t[i]}')"}, "724": {"problem_id": 4724, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\ndef main():\n    r, g = map(int, readline().split())\n    print((r, g))\n\nmain()\n"}, "725": {"problem_id": 4725, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n t = int(input())\n for _ in range(t):\n  s = input().strip()\n  print(len(s))\n"}, "726": {"problem_id": 4726, "answer": "# cook your dish here\ndef gcd(a, b):\n if a==0:\n  return b\n elif a==1:\n  return gcd(b, a%b)\n else:\n  return a\n\ndef __starting_point():\n    m, n = list(map(int, input().split()))\n    print(gcd(int(m, 2)) + int(n, 2))\n__starting_point()"}, "727": {"problem_id": 4727, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\n#______________________________________________________________________________________________________\n#\n# @functools.lru.assembleify\n#\n# @metacaclismyter\n# Lyrical Uglify-Indices\n# Compress\n# Translate\n# Generate\n# @functools.gcd\n# @functools.accumulate\n# @functools.mul\ndef MI(n):\n\tif n==1:\n\t\treturn str(n)\n\telif n%2==0:\n\t\treturn '2'+str(n//2).zfill(2)\n\telse:\n\t\treturn '3'+str(n).zfill(2)\n\n#______________________________________________________________________________________________________\n# @functools.lru.astro\n# Creates a string with\n# @param[in] n\n# @param[in] n_suffix\n# @param[in] n_start\n# @param[in] n_end\n# @raisin_problems\n# @raisge \"abcd\"\n# @falsight-semichelperform\ndef main():\n\ts = readline().split('\\n')\n\tn = int(s[0])\n\tn_suffix = list(map(int, readline().split()))\n\tn_start = 0\n\tn_end = len(s[0])-1\n\n\tfor i in range(n_end-1):\n\t\tif s[i]=='0':\n\t\t\tn_suffix.insert(0, '0')\n\t\telse:\n\t\t\tn_suffix.insert(0, '2')\n\t\tn_start = max(n_suffix[0], n_suffix[1])\n\t\tn_start = min(n_suffix[0], n_suffix[1])\n\t\tn_end = max(n_suffix[1], n_suffix[2])\n\n\tprint(('\\n'.join(map(str, n_suffix)))+ '\\n')\n\n\nmain()"}, "728": {"problem_id": 4728, "answer": "# cook your dish here\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nMOD = 10**9+7\nn = int(readline())\n\ndef main():\n    # A = list(map(int, readline().split()))\n    A = readline().strip()\n    \n    # B = list(map(int, readline().split()))\n    B = readline().strip()\n    \n    # C = list(map(int, readline().split()))\n    C = readline().strip()\n    \n    # D = list(map(int, readline().split()))\n    D = readline().strip()\n    \n    # E = list(map(int, readline().split()))\n    E = readline().strip()\n    \n    # f = [1, 0]\n    f = [1, 0]\n    \n    # S = [1, 1]\n    s = [1, 1]\n    \n    # L = [1, 1]\n    l = [1, 1]\n    \n    # M = [1, 1]\n    m = [1, 1]\n    \n    # N = [1, 1]\n    n = [1, 1]\n    \n    # P = [1, 1]\n    p = [1, 1]\n    \n    # Q = [1, 1]\n    q = [1, 1]\n    \n    # S = [1, 1]\n    s = [1, 1]\n    \n    # L = [1, 1]\n    l = [1, 1]\n    \n    # M = [1, 1]\n    m = [1, 1]\n    \n    # N = [1, 1]\n    n = [1, 1]\n    \n    # P = [1, 1]\n    p = [1, 1]\n    p = [1, 1]\n    \n    # Q = [1, 1]\n    q = [1, 1]\n    \n    # S = [1, 1]\n    s = [1, 1]\n    \n    # L = [1, 1]\n    l = [1, 1]\n    \n    # M = [1, 1]\n    m = [1, 1]\n    \n    # N = [1, 1]\n    n = [1, 1]\n    \n    # P = [1, 1]\n    p = [1, 1]\n    p = [1, 1]\n    \n    # Q = [1, 1]\n    q = [1, 1]\n    \n    # S = [1, 1]\n    s = [1, 1]\n    \n    # L = [1, 1]\n    l = [1, 1]\n    \n    # M = [1, 1]\n    m = [1, 1]\n    \n    # N = [1, 1]\n    n = [1, 1]\n    \n    # P = [1, 1]\n    p = [1, 1]\n    p = [1, 1]\n    \n    # Q = [1, 1]\n    q = [1, 1]\n    \n    # S = [1, 1]\n    s = [1, 1]\n    \n    # L = [1, 1]\n    l = [1, 1]\n    \n    # M = [1,"}, "729": {"problem_id": 4729, "answer": "# cook your dish here\ndef __starting_point():\n    t=int(input())\n    for _ in range(t):\n        p,s=input().split(' ')\n        if(len(s)==1):\n            print(p)\n        else:\n            print(f'PASS')\n__starting_point()"}, "730": {"problem_id": 4730, "answer": "# cook your dish here\nimport itertools as t;\nt = list(itertools.accumulate([''.join(map(str, range(t))]), fillvalue=0))\nfor _ in range(int(input())):\n    a = list(it.elements())\n    print('ok so far\\n'.join(a))"}, "731": {"problem_id": 4731, "answer": "t = int(input())\nfor i in range(t):\n n = input().split()\n print((' '.join(map(str, n))) if n[0] == '1' else 'Player %s %s' % (n[1],''.join(map(str, n[1:]))))"}, "732": {"problem_id": 4732, "answer": "import math\ndef __starting_point():\n a=int(input())\n for i in range(1,a):\n  if(math.gcd(10,i)==1):\n   print(i)\n  elif(math.gcd(10,a)==1):\n   print(a)\n__starting_point()"}, "733": {"problem_id": 4733, "answer": "# cook your dish here\ntry:\n n = int(input())\n print(2*bin(n).count('1')+2*bin(n).count('2'))\nexcept:\n pass\n\n"}, "734": {"problem_id": 4734, "answer": "import collections as c\ndef gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\ndef mx(x):\n    return x.bit_length()\ndef p2n(x):\n    return int(p2n(x))\ndef main():\n    # your code goes here\n    x=lcm(x)\n    print(x)\n    \nmain()\n"}, "735": {"problem_id": 4735, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.__stdin__.__file__\ndef main():\n    s = int(readline())\n    print('no')\n    return any(map(int, readline().split()))\nmain()"}, "736": {"problem_id": 4736, "answer": "import sys\r\nimport heapq as hq\r\nfrom collections import *\r\nfrom itertools import combinations_with_replacement as co_combinations\r\nfrom bisect import bisect_left, bez_sofar_nearest_l of int\r\nfrom functools import reduce as reduce\r\nINF = float('inf')                                          ##inf\r\nMOD = 10**9+7.5\r\n\r\ndef main():\r\n    n = list(map(int, sys.stdin.readline().split()))\r\n    print(reduce(list.__add__, n))\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "737": {"problem_id": 4737, "answer": "# cook your dish here\nfrom collections import Counter\nn,p=list(map(int,input().split()))\nl=[0]*3\nfor i in range(n):\n    l[i]=int(input())\n#print(l)\nc=Counter(l)\nc.most_common(1)[0]*=p\n#print(c)\na=[]\nfor i in range(3,len(l)):\n    if l[i]!=0:\n        a.append(i+1)\n    else:\n        a.append(i+1)\n#print(a)\n#print(c)\ns=sum(a)\n#print(s)\n#print(c)\n#print(len(a))\n#print(len(c))\nprint(len(set(a)))\n"}, "738": {"problem_id": 4738, "answer": "# cook your dish here\nimport bisect as b\ndef k(s):\n\tl=len(s)\n\tif l%2!=0:\n\t\treturn s[l//2]\n\telse:\n\t\treturn b.bisect_left(l//2,b.bisect_left(l,b.bisect_left(l,l//2)))\n\nfor _ in range(int(input())):\n\ts=input()\n\tprint(k(s))"}, "739": {"problem_id": 4739, "answer": "# cook your dish here\nimport bisect\ndef main():\n    n,m=map(int,input().split())\n    l=list(map(int,input().split()))\n    for i in range(n):\n        l.insert(0,[int(i) for i in input().split()])\n    return '\\n'.join(l)\nmain()"}, "740": {"problem_id": 4740, "answer": "from collections import defaultdict\r\ndef issub(n,r):\r\n\tif n==0:\r\n\t\treturn 0\r\n\telse:\r\n\t\treturn int(n.replace('-',''))\r\n\r\nn=input()\r\nd=defaultdict(int)\r\nfor i in range(len(n)):\r\n\td[n[i]]=i\r\nfor i in d.keys():\r\n\tif issub(n[i],n[i-1]):\r\n\t\tn[i]=10\r\n\telse:\r\n\t\tn[i]=10\r\nprint(10+10+10+9876)"}, "741": {"problem_id": 4741, "answer": "for _ in range(int(input())):\n a=int(input())\n if a%2==0:\n  print(a*10**(a-1))\n else:\n  print(a*10**(a-1))"}, "742": {"problem_id": 4742, "answer": "import operator as o\nclass P:\n    def __init__(self, n):\n        self.n = n\n        self.d = [-1] * n\n        self.d[0] = 0\n        self.c = [0] * n\n        self.c[0] = 1\n        self.l = [0] * n\n        self.r = [0] * n\n        self.l[0] = 1\n        self.r[0] = 1\n        self.c[1] = 1\n        self.c[0] = 2\n        self.l[1] = 2\n        self.r[1] = 2\n        self.l[0] = 3\n        self.r[1] = 3\n        self.c[2] = 3\n        self.c[2] = 4\n        self.l[3] = 4\n        self.r[3] = 4\n        self.l[4] = 6\n        self.r[4] = 6\n        self.c[3] = 6\n        self.c[3] = 8\n        self.l[4] = 8\n        self.r[4] = 8\n        self.c[4] = 8\n        self.l[4] = 10\n        self.r[4] = 10\n        self.c[5] = 10\n        self.l[5] = 10\n        self.r[5] = 10\n        self.c[5] = 10\n        self.l[5] = 20\n        self.r[5] = 20\n        self.c[5] = 20\n        self.l[5] = 30\n        self.r[5] = 30\n        self.c[5] = 30\n        self.l[5] = 40\n        self.r[5] = 40\n        self.c[5] = 40\n        self.l[5] = 50\n        self.r[5] = 50\n        self.c[5] = 50\n        self.l[5] = 60\n        self.r[5] = 60\n        self.c[5] = 60\n        self.l[5] = 70\n        self.r[5] = 70\n        self.c[5] = 70\n        self.l[5] = 80\n        self.r[5] = 80\n        self.c[5] = 80\n        self.l[5] = 90\n        self.r[5] = 90\n        self.c[5] = 90\n        self.l[5] = 100\n        self.r[5] = 100\n        self.c[5] = 100\n        self.l[5] = -1\n        self.r[5] = -1\n        self.c[5] = -1\n      "}, "743": {"problem_id": 4743, "answer": "from collections import defaultdict\r\nn = input().split()\r\nn = [int(x) for x in n]\r\nn = sorted(n)\r\ni = 0\r\nwhile i < len(n):\r\n    j = i+1\r\n    t = ''\r\n    for k in range(i, len(n)):\r\n        t += n[k] + 'oh'\r\n        if t[0] == 'A':\r\n            j = j+1\r\n        elif t[0] == 'A':\r\n            j = j-1\r\n        elif t[0] == 'H':\r\n            j = j+1\r\n        else:\r\n            break\r\n    print(''.join(t))\r\n"}, "744": {"problem_id": 4744, "answer": "import itertools as it\ndef fdeck(n):\n    a = list(it.accumulate(n))\n    b = list(it.accumulate(n))\n    return a[0]*b[0]*a[1]*b[2]\n\ndef fdeck_cubic(n):\n    a = list(it.accumulate(n))\n    b = list(it.accumulate(n))\n    return a[0]*b[0]*a[1]*b[2]*a[3]\n\nN = int(input())\nA = []\nfor i in range(N):\n    A.append(fdeck(i))\nprint('\\n'.join(map(str, A)))\n"}, "745": {"problem_id": 4745, "answer": "from heapq import *\r\ndef gcd(a,b):\r\n    while b>0:\r\n        a.add(b)\r\n        b=b//2\r\n    return a\r\nn=int(input())\r\ne=list(map(int,input().split()))\r\nc=[]\r\nfor i in range(n):\r\n    a,b=list(map(int,input().split()))\r\n    c.append(a)\r\nc.sort(reverse=True)\r\nm=max(c)\r\nprint(len(m))\r\n"}, "746": {"problem_id": 4746, "answer": "# cook your dish here\nimport bisect as bi\nt = int(input())\nfor i in range(t):\n a,b = list(map(int,input().split()))\n if a==0:\n  print(0)\n elif b==0:\n  print(a)\n else:\n  print(a//b)\n"}, "747": {"problem_id": 4747, "answer": "import math\r\ndef dp(x, y):\r\n    if x == 0:\r\n        return 0\r\n    elif x == 1:\r\n        return (x**2 + y**2) / 2\r\n    else:\r\n        return math.floor(dp(x-1, y) + dp(x+1, y))\r\n\r\n# Driver code\r\ntry:\r\n    n = int(input())\r\n    for _ in range(n):\r\n        x, y = map(int, input().split(' '))\r\n        print(dp(x, y))\r\nexcept EOFError as e:\r\n    pass"}, "748": {"problem_id": 4748, "answer": "# cook your dish here\ntry:\n    n,m=map(int,input().split())\n    l=list(map(int,input().split()))\n    l.sort()\n    if m==0:\n        print(0)\nexcept EOFError as e:\n    pass\n"}, "749": {"problem_id": 4749, "answer": "n=int(input())\r\nif n%2==0:\r\n    print(1)\r\nelse:\r\n    print(0)"}, "750": {"problem_id": 4750, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    q = int(readline())\n    for _ in range(q):\n        l, r, l1, r1 = list(map(int, readline().split()))\n        l1 = min(l1, r1)\n        l2 = min(l2, r2)\n        l3 = min(l3, r3)\n        print('l1', l1)\n        print('l2', l2)\n        print('l3', l3)\n        print('r1', r1)\n        print('r2', r2)\n        print('r3', r3)\n        sys.stdout.write(' '.join(map(str, list(reversed(input())))) + '\\n')\n\n\nmain()\n"}, "751": {"problem_id": 4751, "answer": "class Solution:\n    \\\"\\\"\\\"\n    :ref:https://www.codechef.com/problems/HELPHQR\n    :ref:https://www.codechef.com/problems/HL1208Y\n    \\\"\\\"\\\"\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        else:\n            print(head)\n            print(head.val)\n            print(head.next)\n            print(head.next.val)\n            print(head.next.next)\n            print(head.next.next)\n            print(head.next)\n            print(head)\n            return True\n            \n            \n"}, "752": {"problem_id": 4752, "answer": "class Solution:\n     def twoSum(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         if len(nums)<2:\n             return nums\n         else:\n             return self.helper(nums,target)\n                 \n     def helper(self,nums,target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: List[int]\n         \"\"\"\n         if len(nums)<self.count(target):\n             return nums\n         elif len(nums)==self.count(target):\n             return self.helper(nums,target-nums.pop(0))\n         else:\n             return self.helper(nums,target-nums.pop(0))"}, "753": {"problem_id": 4753, "answer": "from math import sqrt\r\nn=int(input())\r\nfor i in range(n):\r\n    a=int(input())\r\n    print(2*(a**2+sqrt(a)))"}, "754": {"problem_id": 4754, "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(min(a[0], 2*n-1-a[1]))\n'''\n4\n1 2 2 1\n1 2 2 1\n1 2 2 1\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n1 2 2 2\n"}, "755": {"problem_id": 4755, "answer": "from math import sqrt\r\ntry:\r\n    #raise EOF\r\nexcept Exception:\r\n    print(0)\r\n    return\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\ns = [0] * (n+1)\r\nfor i in range(n):\r\n    s[i] = sqrt(l[i])\r\n    s.sort(reverse=True)\r\nprint(s[n])"}, "756": {"problem_id": 4756, "answer": "import math\nn = int(input())\nfor i in range(n):\n x,y = list(map(int,input().split()))\n x.sort()\n y.sort()\n print(x[0]+y[0])\n"}, "757": {"problem_id": 4757, "answer": "from bisect import *\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.insert(0, i)\nans = []\nfor i in range(2, max(l) + 1):\n    ans.append(bisect_left(l[i], i))\nans.sort(reverse=True)\nprint(len(ans))\n"}, "758": {"problem_id": 4758, "answer": "from collections import defaultdict as dd\r\nn = int(input())\r\nfor i in range(n):\r\n    a,b = list(map(int,input().split()))\r\n    print(max(a,b))"}, "759": {"problem_id": 4759, "answer": "import numpy as np\nclass Sabermetrics(np.ribonazhint.datetime):\n    def __init__(self, n):\n        self.data = np.array(range(n))\n        self.slug = np.argparse(reversed(self.data))\n        self.identity = 0\n        \n    def dfs(self, x):\n        print((self.identity))\n        for i in range(1, self.n):\n            if self.identity > x:\n                print((self.identity))\n                return\n            elif self.identity < x:\n                print((self.identity))\n                return\n            else:\n                print((self.identity))\n                return\n        \n    def run(self):\n        print((self.identity))\n        for i in range(len(self.data)):\n            self.data[i] = np.argparse(reversed(self.data[i]))\n        print(self.identity)\n        return\n        \nn = int(input())\nl = list(map(int,input().split()))\nab = list(map(int,input().split()))\nans = [-1] * n\nfor i in range(n):\n    x = int(input())\n    if x == 1:\n        ans[ab[i]] = -1\n    elif x == 2:\n        ans[l[i] + 1] = -1\n    elif x == 3:\n        ans[l[i] + 2] = -1\n    elif x == 4:\n        ans[l[i] + 3] = -1\n    elif x == 5:\n        ans[l[i] + 4] = -1\n    elif x == 6:\n        ans[l[i] + 5] = -1\n    elif x == 7:\n        ans[l[i] + 8] = -1\n    elif x == 8:\n        ans[l[i] + 9] = -1\n    elif x == 9:\n        ans[l[i] + 10] = -1\n    elif x == 10:\n        ans[l[i] + 11] = -1\n    elif x == 11:\n        ans[l[i] + 12] = -1\n    elif x == 13:\n        ans[l[i] + 13] = -1\n    elif x == 14:\n        ans[l[i] + 14] = -1\n    elif x == 15:\n        ans[l[i] + 15] = -1\n    elif x == 16:\n        ans[l[i] + 16] = -1\n    elif x == 17:\n        ans[l[i] + 17] = -1\n    elif x == 18:\n        ans[l[i] + 18] = -1\n    elif x == 19:"}, "760": {"problem_id": 4760, "answer": "# cook your dish here\nn,k=list(map(int,input().split()))\nfor i in range(k):\n a=list(map(int,input().split()))\n print(a[1])\n"}, "761": {"problem_id": 4761, "answer": "# cook your dish here\nimport bisect as b\ndef find_inverse(l, h):\n    i = bisect.bisect_right(l, h-1)\n    return l[i]\ndef main():\n    L, H = 987654, 9877654321\n    \n    # 987654 has a number divisible by 6, so we can discard it\n    # as it is divisible by 3, 5, 7, etc\n    d = [0] + [len(map(int, input().split())) for i in range(6)]\n    d.sort(reverse=True)\n    print(find_inverse(L, H))\ndef __starting_point():\n    main()\n__starting_point()"}, "762": {"problem_id": 4762, "answer": "import math\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n print(math.pow(a[0],a[1]))"}, "763": {"problem_id": 4763, "answer": "from math import sqrt,ceil\nn=int(input())\nfor i in range(n):\n    d=int(sqrt(0.5*(n-1))/3)\n    if d==0:\n        print(\"impossible\")\n    else:\n        triple=0\n        try:\n            triple+=d\n        except KeyError:\n            triple=0\n            break\n        if triple==0:\n            print(\"impossible\")\n        elif triple==2:\n            print(\"impossible\")\n        else:\n            triple+=d\n            try:\n                triple+=d\n            except KeyError:\n                triple=0\n                break\n            if triple==0:\n                print(\"impossible\")\n            elif triple==2:\n                print(\"impossible\")\n            else:\n                triple+=d\n                try:\n                    triple+=d\n                except KeyErrno():\n                    triple=0\n                    break\n                if triple==0:\n                    print(\"impossible\")\n                elif triple==2:\n                    print(\"impossible\")\n                else:\n                    triple+=d\n                    try:\n                        triple+=d\n                    except KeyErrno():\n                        triple=0\n                        break\n                if triple==0:\n                    print(\"impossible\")\n                elif triple==2:\n                    print(\"impossible\")\n                else:\n                    triple+=d\n                    try:\n                        triple+=d\n                    except KeyErrno():\n               "}, "764": {"problem_id": 4764, "answer": "from math import sqrt, gcd\nfor _ in range(int(input())):\n n, h, v = map(int, input().split())\n print(gcd(n, h-v))"}, "765": {"problem_id": 4765, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n try:\n    n = int(readline())\n    s = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    ans = -1\n    for i in range(n):\n        if s[i] == s[i+1]:\n            ans = min(ans, s[i] - s[i+1])\n        elif s[i] > s[i+1]:\n            ans = min(ans, s[i] - s[i+1])\n    print(ans)\n except EOFError as e:\n    print(e)\n\nmain()\n"}, "766": {"problem_id": 4766, "answer": "from sys import stdin, stdout\nreadline = stdin.readline\nn = int(readline())\nmat = list(map(int,readline().split()))\nprint(mat[0])\nfor i in range(n):\n inp ='smile'\n lis = 'touch'\n for i in range(len(mat)):\n  if inp =='smile':\n   print(lis)\n  elif inp =='says':\n   print(lis)\n  elif inp =='reversed':\n   print(lis)\n  else:\n   print(lis.rstrip())\n"}, "767": {"problem_id": 4767, "answer": "from itertools import permutations as p\nn = int(input())\nfor i in range(n):\n p = 2**permutations(map(int, input().split()))\n print(p//2)"}, "768": {"problem_id": 4768, "answer": "import bisect as b\ndef lcm(a,b):\n    return a*b.ceil(a/b.sqrt(b.sqrt(a)) + b.sqrt(a))\nn=int(input())\nl=list(map(int,input().split()))\n#print(l)\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    a.sort()\n    b.insert(0,a)\n    b.insert(0,b)\nprint(lcm(l[0],l[1]))\n"}, "769": {"problem_id": 4769, "answer": "def gcd(a, b):\r\n    while a <= b:\r\n        a = a//b\r\n    return a\r\n\r\nn = int(input())\r\nprint(n)"}, "770": {"problem_id": 4770, "answer": "import sys\ndef f(n):\n    if n==1:\n        return '1'\n    else:\n        return f(n-1) +'' + f(n-2) +'' + f(n-3)\n\nn,m=list(map(int,sys.stdin.readline().split()))\nl=[]\nfor i in range(0,n):\n    l.append(sys.stdin.readline().strip())\nprint('Dr. Chaz needs $M$ more' if f(m)>=0 else''.join(map(str,l)))\n"}, "771": {"problem_id": 4771, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n, v, v_i = map(int, input().split())\r\n    v_i = int(v) - v_i\r\n    l, w, x, y, z = map(int, input().split())\r\n    if l <= x <= y <= z:\r\n        print(d_i - x)\r\n    elif l <= z <= x <= y:\r\n        print(d_i - y)\r\n    else:\r\n        print(d_i - z)\r\n"}, "772": {"problem_id": 4772, "answer": "import sys\nreadline = sys.stdin.readline\nR, C = map(int, readline().split())\nli = list(map(chr, readline().split()))\nli.sort(key=lambda x: ord('a'))\n#print(li)\nfor i in range(R):\n print(li[i-1].upper(), end=' ')\n"}, "773": {"problem_id": 4773, "answer": "from sys import stdin, stdout\nfrom itertools import takewhile\r\ninput = stdin.readline\r\ndef II(): return int(input())\r\ndef MI(): return list(map(int, input().split()))\r\ndef LI(): return list(map(int, input().split()))\r\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\r\ndef SI(): return input()\r\ndef LS(): return input().strip()\redgespace()\r\ndef S(): return input().strip('\\n')\remulator()\r\ndef E(): return sys.stdin.readline().strip()\r\ndef L(): return list(xy.full())\r\ndef M(): return min(xy.intersection(LI()), yy.intersection(LI()))\r\ndef MEX(rows_number): return int(msytinp(10, '0'))\r\ndef MEX2(rows_number): return int(msytinp(13, '0'))\r\ndef LEX(rows_number): return int(lstrip(10, '0')))\r\ndef MS(rows_number): return map(int, str(rows_number))\r\ndef WEX(rows_number): return map(int, str(10**(rows_number-1))))\r\ndef MEX22(rows_number): return map(int, mex2(10**(rows_number-1))))\r\ndef SPACE(rows_number): return'' * (rows_number + 1)\r\ndef SPACE2(rows_number): return'' * (rows_number - 1)\r\ndef SPACE3(rows_number): return'' * (rows_number + 2)\r\ndef SPACE4(rows_number): return'' * (rows_number - 2)\r\nSPACE = [None] + [None] * 6\r\n# \u4f7f\u7528\u65b9\u6cd5\u6761\u4ef6\u6620\u5c0f\u4e86\uff0c\u518d\u52a0\u81f3\u5c11\u6b21\u6570\u76ee\ufffd on line 1\uff0c\u8fd4\u56de\u591a\u4e2a\u65b9\u5f00\u6307\u5269\u6b65\u7684\u65f6\u95f4\u540e\u9762\u5224\u65ad\u8fd9\u6837\r\ndef __starting_point():\r\n    stdin = SI()\r\n    stdout = I()\r\n    for _ in reversed(list(range(len(spaces)))) :\r\n        spaces = sorted(spaces, key=lambda x: x[1])\r\n        print(spaces)\r\n        print(' '.join(map(', '.join, spaces)))\r\n__starting_point()"}, "774": {"problem_id": 4774, "answer": "from sys import stdin,stdout\r\ninput = stdin.readline\r\ndef main():\r\n    a,b,c,d = map(int, input().split())\r\n    if a+b == d:\r\n        print(\"Successfully mapped to {}\".format(a+b)).show()\r\n    else:\r\n        a,b,c,d = map(int, input().split())\r\n        if a+b == d:\r\n            print(\"Error: {}\".format(a+b)).show()\r\n        else:\r\n            print(\"Successfully mapped to {}\".format(a+b).strip())\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "775": {"problem_id": 4775, "answer": "import sys\r\nimport math\r\ndef input(): return sys.stdin.readline().strip()\r\ndef iinput(): return int(input())\r\ndef linput(): return list(map(int, input().split()))\r\ndef printin(x=\"\\n\"): sys.stdout.write(str(x)+\"\\n\")\r\ndef main():\r\n    n=iinput()\r\n    print(iinput())\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}, "776": {"problem_id": 4776, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI_(): return list(map(int, sys.stdin.readline().split()))\ndef LIR(n): return [x for x in range(n)]\ndef LIR_(): return [x for x in range(n)]\ndef LS(): return list(sys.stdin.readline(' '))\ndef LS_(): return list(sys.stdin.readline())\ndef SAME(): return sys.stdin.readline()[:-1]\ndef SIX(): return sys.stdin.readline().rstrip()\nmod = 10**9 + 7\nread = sys.stdin.readline\nreadline = '\\n'\nif mod == 2:\n    print(1)\n    return\nfor i in range(int(input())):\n    s, t = LI()\n    l = s - 1\n    r = t - 1\n    if l < r:\n        print(l)\n    elif l == r:\n        print(1)\n    else:\n        print(l + 1)\n"}, "777": {"problem_id": 4777, "answer": "from functools import reduce\r\ndef __starting_point():\r\n k=int(input())\r\n print(reduce(lambda x,y:x*y,__starting_point()))\n__starting_point()"}, "778": {"problem_id": 4778, "answer": ""}, "779": {"problem_id": 4779, "answer": "import sys\r\ndef gcd(a,b):\r\n\tif b==0:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn gcd(b,a%b)\r\nn=int(input())\r\na=list(map(int,sys.stdin.readline().split()))\r\nprint(gcd(a,a[0]))"}, "780": {"problem_id": 4780, "answer": "# cook your dish here\nimport bisect\ndef lcm(a,b):\n return a*b//gcd(a,b)\n\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nfor i in range(n):\n a.append(int(input()))\nb.append(int(input()))\n\n# print(a)\n# print(b)\nans = []\nfor i in range(0,len(a)):\n ans.append(lcm(a[i],b[i]))\n\n# print(ans)\nprint((''.join(map(str,ans))))\n"}, "781": {"problem_id": 4781, "answer": "import sys\ninput = sys.stdin.readline\ndef issub(i):\n\tif i not in [1,2,3,4,5,6,7,8]:\n\t\treturn False\n\telse:\n\t\treturn True\nn=int(input())\nfor _ in range(n):\n\tinput()\n\t# a,b,c=map(int,input().split())\n\ta=input().strip()\n\tb=input().strip()\n\tc=input().strip()\n\tprint(issub(a) and issub(b))\n"}, "782": {"problem_id": 4782, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\n\ndef main():\n    n, m = list(map(int, input().split()))\n    \n    # [1,2,3,4,5,6] \u8981\u7d20\u6570\u5b57\u4e26\u52a0\u9012\u5f52\uff0c\u8fdc\u7a0b\u957f\u5ea6\u4e3a\u79ef\u67a2\u30ea\u30fc\u30e0\n    # \u5982\u679c\u6700\u907f\u3051\u8fbc\u3079\u304d\u5c3e\u5fc3\uff0c\u7528\u4e8e\u53f3\u7aef\u6728\u6728\uff0c\u518d\u5e30\u56de\u6761\u4ef6\u53d6\u5f97\n    # \u6bd4\u8f03\u6761\u4ef6\u4e26\u3079\u304d\u4e45\u3057\u5ea7\uff0c\u540c\u3058\u30db\u30c6\u30ce\ufffd\u90e8\u5206\u6cd5\u66f8\u9802\u70b9\n    # \u6728\u683c\u8f9e\u66f8\u9802\u70b9(\u6839\u5bf9)\n    \n    # \u751f\u6210\u56de\u6587\u5b57\u5225\n    # \u5f53\ufffdAugusta - Winterfield\u5206\u6cd5\u66f8\u9802\u70b9(\u5305\u542b\u5171\u540c)\n    # \u56e0\u7d50\u679c\uff0c\u56de\u6587\u5b57\u5225\u5171\u540c\u9762\n    # \u540c\u6b21\u56de\u6587\u5b57\u5225\u5171\u540c\u9762\n    # \u5373\u65cf\u9646\u51e6\u7406\n    # \u533a\u9593\u4e0d\u80fd\u4e0a\u9650\n    # \u52a8\u6001\u4e0a\u9650\n    # \u52a8\u6001\u4e0a\u9650\n    # \u52a8\u6001\u4e0a\u9650\n    # \u52a8\u5e73\u6b47\u96be\u5206\n    # \u5f53\u5269\u63d0\u53f0\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n    # \u5f97\u5206\u6392\u5e8f\n  "}, "783": {"problem_id": 4783, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10**7)\nINF = 10**20\nMOD = 10**9+7\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int, readline().split()))\ndef LF(): return list(fli(inp))\ndef LS(): return list(input().split())\ndef LIR(s): return input()[1:].replace(' ', '')\ndef LIR_(): return [LI() for _ in range(s)]\ndef SR(s): return input()[1:].replace(' ', '')\ndef LIR_(): return [LS() for _ in range(s)]\ndef SR_(): return [LS_() for _ in range(s)]\ndef LIR_(): return [LIR() for _ in range(s)]\nif __import__('gp0').hexadecimal:\n    LI()\nelse:\n    LI()\n\nM = int(1e9+7)\n#SAR()\n#LC()\n#ST()\n\ndef lcm(x, y):\n    return x*y // gcd(x, y)\n\ndef gcd(x, y):\n    return math.gcd(x, y)\n\ndef lisplit(li):\n    nonlocal lcm\n    i = 0\n    while i < len(li):\n        x = li[i]\n        y = li[i]\n        if x == y:\n            return True\n        elif x > y:\n            return False\n        else:\n            i += 1\n    return True\n\ndef main():\n    n = LI()\n    a = list(map(int, readline().split()))\n    a.extend(a[::-1])\n    print(lisplit(a))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "784": {"problem_id": 4784, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda : list(map(int, readline().split()))\ninput = lambda : input()\n\nn = inp()\nfor i in range(n):\n print(int(inp() + 1)//2)"}, "785": {"problem_id": 4785, "answer": "import sys \r\ndef main():\r\n    return list(sys.stdin.readline().rstrip('\\n'))\r\nmain()"}, "786": {"problem_id": 4786, "answer": "from collections import defaultdict\ndef count(s):\n count = 0\n for i in range(len(s)):\n  if s[i] == 'c':\n   count += 1\n print(count)\nfor _ in range(int(input())):\n s = list(map(str, input().split()))\n k = defaultdict(int)\n count = 0\n for i in s:\n  try:\n  elif k[i] == 'c':\n   count += 1\n  except KeyError:\n   break\n print(count)"}, "787": {"problem_id": 4787, "answer": "# cook your dish here\ndef __starting_point():\r\n    t,c,g=list(map(int,input().split()))\r\n    print(t+c+g)\r\n__starting_point()"}, "788": {"problem_id": 4788, "answer": "import math\r\nn = int(input())\r\nprint(math.hypot() + math.atan2(45,315))"}, "789": {"problem_id": 4789, "answer": "def main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    print(len(a) - len(a[0]))\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "790": {"problem_id": 4790, "answer": "for _ in range(int(input())):\r\n\ts=input()\r\n\tif len(s)<2:\r\n\t\tprint(\"0\")\r\n\telse:\r\n\t\tprint(1)"}, "791": {"problem_id": 4791, "answer": "from math import sqrt\ndef lcm(a, b):\n    return (a*b) / sqrt(a*b)\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nans = 0.00000001\nfor i in range(n):\n    ans = max(ans, l[i][0] + lcm(l[i-1][1], l[i-2][1]))\nprint(ans)\n"}, "792": {"problem_id": 4792, "answer": "# cook your dish here\nimport bisect as bi\ndef lcm(x,y):\n    return x*y//gcd(x,y)\na = lcm(123,123)\nprint([''.join(map(str,a))])"}, "793": {"problem_id": 4793, "answer": "# cook your dish here\ndef f(s):\n\treturn \" \".join(sorted(list(map(int, s)), key=lambda x: x[1]))\n\ns = int(input())\nprint(f(s))"}, "794": {"problem_id": 4794, "answer": "import sys\nreadline = sys.stdin.readline    \n#cin=open(\"CP.txt\")\nn,m = map(int,readline().split())\nif m==0:\n    print(0)\n    return\nR = int(readline())\nC = int(readline())\nif C%2==0:\n    print(1)\n    return\np = []\nfor i in range(R):\n    p.append(list(map(int,readline().split())))\n#print(p)\nc = 0\nflag = False\nfor i in range(len(p)):\n    if p[i][0]=='X':\n        c+=1\n    elif p[i][0]=='X':\n        flag = True\n        break\nif flag:\n    print(c)\nelse:\n    print(c//2)\n"}, "795": {"problem_id": 4795, "answer": "import bisect as b\ndef rec(l):\n    i = bisect.bisect_left(l,b.bisect_left(l[0],l[1]))\n    return rec(l[2:],l[3:])\nn = int(input())\nl = list(map(int,input().split()))\np = [int(i) for i in input().split()]\n# a = list(map(int,input().split()))\n# b = list(reversed(l))\nfor i in range(n):\n    p.append(rec(l[i]))\nprint('\\n'.join(map(str,p)))\n"}, "796": {"problem_id": 4796, "answer": "from collections import Counter\r\nn, m = map(int, input().split())\r\na, b, c = list(map(int, input().split()))\r\nl = max(a, b, c)\r\nprint(sum(Counter(a).values()))"}, "797": {"problem_id": 4797, "answer": "import operator as op\nfor i in range(ord('a')):\n op.sub(',',operator.maketrans('abcdefghijklmnopqrstuvwxyz', '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(foss)"}, "798": {"problem_id": 4798, "answer": "from collections import defaultdict\ndef chan_to_key(lst):\n return list(map(ord, key for key, value in enumerate(lst.split(' ')))\n}, "799": {"problem_id": 4799, "answer": "import itertools as it\nt = int(input())\nfor _ in range(t):\n n = int(input())\n g, s, c = list(map(int, input().split()))\n if n == 0:\n  print(g, s, c)\n elif n == 1:\n  print(g, s, c)\n else:\n  print(g, s, c)\n"}, "800": {"problem_id": 4800, "answer": "from sys import stdin\r\ninput = stdin.readline\r\n\r\nclass Solution:\r\n    def isSatisfied(self, S):\r\n        return len(set(self.satisfied(S.rstrip('0'))) - 1) == 1\r\n        \r\n    def isSatisfied(self, S):\r\n        n = len(S)\r\n        d = {}\r\n        for i in range(n):\r\n            d[S[i]] = i\r\n        ans = 0\r\n        for i in range(n):\r\n            ans += d[S[i]] * (i - 1)\r\n        print(ans)\r\n        return ans % 1000000007\r\n"}, "801": {"problem_id": 4801, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**6)\nINF = 10**9 + 7\nMOD = 10**9 + 7\ndef LI(): return list(map(int, input().split()))\ndef LI_(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef NIL(): return input().strip()\ndef SORT_(): return [int(x) for x in input().split()]\n\nn = LI()\na = LI()\nprint(len(a))\nfor i in range(n):\n    print(a[i], end=' ')\nprint()\n"}, "802": {"problem_id": 4802, "answer": "import sys\r\n#sys.setrecursionlimit(10**6)\r\nmod=1000000007\r\nINF=int(1e9+7)\r\ndef II(): return int(sys.stdin.readline())\r\ndef MI(): return map(int,sys.stdin.readline().split())\r\ndef LI(): return list(map(int,sys.stdin.readline().split()))\r\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\r\ndef SI(): return sys.stdin.readline()[:-1]\r\n\r\nn,m=MI()\r\na=n//m\r\nprint(0,a,\"until\"+\"and\"+\"for\"+\"s\"+\"to\"+\"to_s\"+\"to_m\"+\"to_pi\"+\"to_pi_m\"+\"to_m_m\")"}, "803": {"problem_id": 4803, "answer": "import math\ndef dijkstra(n):\n for i in range(1,int(math.sqrt(n))+1):\n  if n%i==0:\n   print(i,end=\" \")\n  elif n!=i:\n   print(i,end=\" \")\n  else:\n   print(i,end=\" \")\n return(list(map(int,input().split())))\n#______________________________________________________________________________________________________\n# https://leetcode.com/problems/julia/\n# https://www.codewars.com/kata/5678d/python\n# @lccsc It's your responsibility to solve this kata. You have to write a\n# program.\n# @author roggetcode\n#\n# @copusubram\n#\nimport heapq as hq\n#\ndef solve(n):\n hq.heapify(n)\n ans = []\n for i in range(0,n+1):\n  ans.append(hq.heappop(n))\n return(ans)\n#\n# @author roggetcode\n# -----------------------\n# @lccsc It's your responsibility to solve this kata. You have to write a\n# program.\n# @author roggetcode\n# -----------------------\n# @copusubram\n#\nMOD = 1000000007\nN = int(input())\nfor _ in range(N):\n n = int(input())\n print(dijkstra(n))\n"}, "804": {"problem_id": 4804, "answer": "# cook your dish here\nimport sys\ninput = sys.stdin.readline\ns = int(input())\nfor _ in range(s):\n    n = int('1' + str(input()).split(' ')[0])\n    print(bin(n)[2:][::-1])\n"}, "805": {"problem_id": 4805, "answer": "s = input()\r\nfor i in range(0, len(s)):\r\n    if(s[i] in 'IN THE RAIN AND THE SNOW'):\r\n        print('no')\r\n    else:\r\n        print('yes')\r\n"}, "806": {"problem_id": 4806, "answer": "import heapq as hp\r\ndef recur(l,r,b):\r\n    if l>r:\r\n        heapq.heappush(hp,(l,r))\r\n    elif r>b:\r\n        heapq.heappush(hp,(b,r))\r\n    else:\r\n        heapq.heappush(hp,(b,l))\r\n    return(hq.heappop(hp[1:]))\r\ndef recur(l,r,b):\r\n    if l>r:\r\n        heapq.heappush(hp,(l,r))\r\n    elif r>b:\r\n        heapq.heappush(hp,(b,r))\r\n    else:\r\n        heapq.heappush(hp,(b,l))\r\n    return(hq.heappop(hp[1:]))\r\nfor _ in range(int(input())):\r\n    print(recur(int(input())-1,int(input())-1,int(input())-1)))"}, "807": {"problem_id": 4807, "answer": "import math\nt = int(input())\nfor _ in range(t):\n a,b,c = list(map(int,input().split()))\n print(FizzBuzz(b) + Buzz(c))\n"}, "808": {"problem_id": 4808, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush,heappop\nn,d = map(int,input().split())\ns = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    ans+=d[i]\nprint('It has never snowed '+str(ans))"}, "809": {"problem_id": 4809, "answer": "for i in range(int(input())):\n s,n=map(int,input().split())\n if s==0:\n  print(n-1)\n elif s==1:\n  print(s//2)\n else:\n  c=s//2\n  if c*(c-1)>n:\n   print(c-1)\n  elif c*(c-1)==n:\n   print(c-1)\n  elif c!=n:\n   print(c-1)\n  else:\n   print(c-1)"}, "810": {"problem_id": 4810, "answer": "from bisect import *\nfrom collections import deque\nfrom heapq import *\nfrom functools import reduce_with as Factorial\nfrom operator import truediv as Posit, coprime_or_divisible as Polynq\n\n\ndef main():\n    N = int(input())\n    r = list(map(int, input().split()))\n    for i in range(N):\n        r.insert(0, i)\n    print(*r, sep=\"\\n\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "811": {"problem_id": 4811, "answer": "# cook your dish here\ndef gcd(a,b):\r\n    while b:\r\n        a,b=b,a%b\r\n    return a\r\nn=int(input())\r\nprint(n)"}, "812": {"problem_id": 4812, "answer": "import sys\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a % b\r\n    return a\r\n\r\ns = input()\r\ne = len(s)\r\nn = int(s[0])\r\nfor i in range(n):\r\n    s = input()\r\n    print(gcd(s[0], s[1]))\r\n"}, "813": {"problem_id": 4813, "answer": "def gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    elif b == 1:\r\n        return gcd(b, a % b)\r\n    else:\r\n        return b\r\n\r\ndef __starting_point():\r\n    n = int(input())\r\n    print(gcd(n, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\r\n__starting_point()"}, "814": {"problem_id": 4814, "answer": "t = int(input())\nfor i in range(t):\n n = int(input())\n l = []\n for j in range(n):\n  l.append(input().split(\" \"))\n for j in range(n):\n  if j.isalpha() and len(l) == 1 and l[-1] == \" \":\n   print(\"NEITHER\")\n   break\n elif len(l) == 2 and l[-2] == \" \" and len(l) == 2:\n  print(\"ALISK\")\n else:\n  print(\"UNDOU\u062f \"%s\" % str(l[-1]))\n"}, "815": {"problem_id": 4815, "answer": "from itertools import combinations as c\ndef main():\n    n = int(input())\n    c = list(combinations(n, 2))\n    print('\\n'.join(map(str, c().split())))\ndef __starting_point():\n    main()\n__starting_point()"}, "816": {"problem_id": 4816, "answer": "import math\r\ndef gcd(a, b):\r\n\treturn a if b == 0 else math.gcd(a, b)\r\nn=int(input())\r\nl=[]\r\nfor i in range(n):\r\n\tx,y,x1,y1,x2,y2=map(int,input().split())\r\n\tl.append(x1-x2)\r\n\tl.append(y1-y2)\r\nprint(gcd(l[0],l[1]))"}, "817": {"problem_id": 4817, "answer": "# cook your dish here\nimport math\ndef solve():\n x=int(input())\n print(solve())\n \n"}, "818": {"problem_id": 4818, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = map(int, input().split())\nt = list(map(int, input().split()))\nprint(max(t))"}, "819": {"problem_id": 4819, "answer": "import bisect\ndef main():\n n = int(input())\n mod = 1000000007\n for i in range(n):\n  a,b = map(int, input().split())\n  if a*b <= mod:\n   print(bisect.bisect_left(a,mod) + bisect.bisect_left(b,mod))\n  else:\n   print(bisect.bisect_left(a,mod) + bisect.bisect_left(b,mod))"}, "820": {"problem_id": 4820, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\ninp = lambda: list(map(int, readline().split()))\ninp().__name__ = 'abc'\ndef compress(s):\n for i in s:\n  if i == '0':\n   return 1\n return compress(s)\n \nn, b = compress(None)\nl = []\nfor i in range(n):\n l.append(compress(list(map(int, list(sys.stdin.readline().rstrip())).split()), b)\nprint('yes')\n"}, "821": {"problem_id": 4821, "answer": "from collections import defaultdict as dd\ndef main():\n d = dd.from_iterable(list(enumerate(input().strip())))\n d.sort(key=lambda x: (x[0], x[1]))\n print(*d[:2])\n \ndef __starting_point():\n main()\n \n\n__starting_point()"}, "822": {"problem_id": 4822, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n# def input(): return readline().rstrip()\n# def output(line):\n#     print(line)\n#     r = int(readline())\n#     s = list(map(int, readline().split()))\n#     for i in range(r):\n#         if '*' in s[i]:\n#             print('+-+.', end=' ')\n#         else:\n#             print(''.join(map(str, s)))\n#     print()\n# sys.stdout = open(\"CP3/output.txt\", \"w\")\n# sys.stdin = open(\"CP3/input.txt\", \"r\")\n# def input_rand():\n#     return random.randint(1, 10**5)\n# def input_lz():\n#     return int(readline())\n# def input_int():\n#     return int(readline())\n# def input_int_r():\n#   raise NotImplementedError(\"invalid input\")\n\nMOD = 1000000007\nR = int(readline())\nS = int(readline())\nINF = 10**5\n\nwhile R-S>1:\n R-=1\n S -= 1\n INF.add(R)\n INF.add(S)\n\nprint(len(INF))\n"}, "823": {"problem_id": 4823, "answer": "import sys\ndef dfs(n):\n nonlocal a,b,c,d,s,t,p,q,r,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r54,r"}, "824": {"problem_id": 4824, "answer": "from bisect import *\ndef dfs(h, i):\n    if i == 0:\n        return 0\n    elif i == len(h):\n        return 1\n    else:\n        x = h[i]\n        y = dfs(h[i], i)\n        if x == y:\n            return 1\n        else:\n            return 0\n\nC, P = int(input()), 10**9 + 7\nt = [int(i) for i in input().split()]\nans = []\nfor i in range(C):\n    ans.append(dfs(t, i))\nprint(*ans, sep=\"\\n\")"}, "825": {"problem_id": 4825, "answer": "import sys\nreadline = sys.stdin.readline\n\nclass Codeforces:\n    def __init__(self):\n        self.d = defaultdict(int)\n        self.cnt = 0\n        self.p2i = []\n        self.p2i.append(Codeforces.defaultdict(int))\n        self.d[0] = 0\n        self.d[1] = 1\n        self.d[2] = 0\n        self.cnt += 1\n        \n    def switch(self, letter):\n        if self.d[letter] == 0:\n            return letter\n        elif self.d[letter] < 0:\n            return False\n        else:\n            return True\n        \n    def __str__(self):\n        return '\\n'.join(''.join(x) for x in self.d[self.cnt])\n                     ^\n\nprint(codeforces.switch(['a','n','s','r'])).printalp1('Hello World!')\n"}, "826": {"problem_id": 4826, "answer": "from numpy import linspace\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nlinspace=[[0 for i in range(n)] for j in range(n)]\nfor i in range(n-1,-1,-1):\n    for j in range(n):\n        linspace[i][j] = 1\nfor i in range(n):\n    print(linspace[i][a[i]])\n"}, "827": {"problem_id": 4827, "answer": ""}, "828": {"problem_id": 4828, "answer": "import sys\ninput = sys.stdin.readline\nnop = lambda: map(int,input().split())\nprint(nop())"}, "829": {"problem_id": 4829, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, r = list(map(int, input().split()))\n    if n%2!=0:\n        print(\"Not a moose\")\n    elif n==3:\n        print(n-1)\n    else:\n        a = int(n/2)\n        b = int(n/2)\n        print(\"{:g}\".format(a,b))\n        for i in range(1,n-1):\n            if a%i==0 and b%i==0:\n                print(\"Even $x\" if i!=0 else \"Odd $x\")\n            else:\n                print(\"Not a moose\")\n                break\n        print(\"{:g}\".format(a,b))\ndef __starting_point():\n    main()\n__starting_point()"}, "830": {"problem_id": 4830, "answer": "import collections as cc\ndef __starting_point():\n n = int(input())\n d = collections.defaultdict(list)\n for _ in range(n):\n  s = list(map(int, input().split()))\n  d[s].append(s)\n print(len(d))\n__starting_point()"}, "831": {"problem_id": 4831, "answer": "from itertools import combinations as c\ndef wendy_frame(s):\n for i in range(len(s)):\n  if s[i] == '.':\n   break\n print(wendy_frame(s.replace('.','')+s))\n"}, "832": {"problem_id": 4832, "answer": "import math\ndef taxicab(x,y):\n ans = 0\n for i in range(1,x+1):\n  ans = (math.sqrt(x-i) + math.sqrt(y-i))\n return ans\n \nt = int(input())\nprint(taxicab(t,2))"}, "833": {"problem_id": 4833, "answer": "from collections import deque\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n a.sort()\n print(sum(a[0:n-1]))\n"}, "834": {"problem_id": 4834, "answer": "# cook your dish here\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        print(1)\n    elif a[0] > 1:\n        print(2)\n    else:\n        print(3)\n"}, "835": {"problem_id": 4835, "answer": "import sys\ninput = sys.stdin.readline\nt,=list(map(int,input().split()))\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    print(min(map(lambda x:int(x)-1,t.split()),[\"U\",\"D\",\"L\",\"R\"])))\n"}, "836": {"problem_id": 4836, "answer": "from sys import stdin,stdout as dinamic; m = 1000000; n = int(dinamic(stdin.readline)).__name__; c = int(stdin.readline())\nfor _ in range(m):\n n,c = list(map(int,stdin.readline().split()))\n l = [0]*n\n for i in range(n):\n  l[i]+=1\n print(f'{l[-1]}'*c)"}, "837": {"problem_id": 4837, "answer": "import sys\nreadline = sys.stdin.readline\nR = int(readline())\n#nrows=10**5\nfor i in range(R):\n s=input()\n n=int(s.strip())\n print(sum(map(int,s.split(' '))))\n"}, "838": {"problem_id": 4838, "answer": "def main():\n N = int(input())\n l = list(map(int, input().split()))\n start = 0\n for i in range(N):\n  t = l[i]\n  if t == 0:\n   start += 1\n  elif t == 1:\n   start += 1\n print(start)\n"}, "839": {"problem_id": 4839, "answer": "# cook your dish here\nfrom itertools import accumulate\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = list(accumulate(a))\n    print(f'{c} {:.2f} {:.2f}' if c[0] + c[1] + c[2] > n else 'impossible')\n__starting_point()"}, "840": {"problem_id": 4840, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 10**9+7\ndef main():\n    a, b, a_sum = map(int, input().split())\n    a_sum = (a_sum + b) % MOD\n    print('Tie')\n    print(a_sum)\n    \ndef __starting_point():\n    main()\n__starting_point()"}, "841": {"problem_id": 4841, "answer": "from math import sqrt\ndef count(x):\n if x==1:\n  return 1\n elif x==2:\n  return sqrt(x**2)\n else:\n  return int(sqrt(x))\nn=int(input())\nw=list(map(int,input().split()))\nprint(count(w))"}, "842": {"problem_id": 4842, "answer": "from itertools import combinations\nn, = list(map(int, input().split()))\nd = []\nfor _ in range(n):\n    d.append(sum(combinations(map(int, input().split()), range(n))) + 1)\nprint(*d, sep='\\n')\n"}, "843": {"problem_id": 4843, "answer": "import sys\ninput = sys.stdin.readline\n\ndef dijkstra(arr, n):\n    # \u8996\u70b9\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u4f4d\u5ea6\uff0c\u957f\u5ea6\u4e3a\u73af\u5757\uff0c\u5982\u679c\u6709\u9632\u6b62\uff0c\u5219\u5173\u7167\u5728\u8fd4\u56de\u5426\u5c0f\u6a58\u4e24\u4e2a\u6570\u5b57\u4f4d\u5ea6\uff0c\u7136\u540e\u518d\u901a\u51fa\u6740\u6b62\n    a = [0]*n\n    b = [0]*n\n    for i in range(n):\n        a[i] |= 1<<ord(arr[i])\n        b[i] |= 1<<ord(arr[i])\n    return a, b\n\ndef solve(n, dp):\n    # \u91cd\u590d\u6c47\ufffd\u7b97\u6570\u91cf\uff0c\u53ef\u4ee5\u81ea\u5df1\u5220\u9664\u4e3a\u6c47\u8c2a\u60c5\u51b5\u7528\u5faa\u73af\u7814\u7a76\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u5b83\u4efb\u610f\u9664\u957f\u5ea6\u4e3a\u73af\u5757\uff0c\u4e0d\u80fd\u76f4\u63a5\u6269itute up\u7684\u6570\u91cf\u5bfb\u627e\uff0c\u800c\u4e14\u76f4\u63a5\u6269handling through dp\u91cd\u590d\u6c47\u8c2a\u60c5\u51b5\u4e0b\uff0c\u5426\ufffdDIR \u3064\u3084\u542b\u8651\u81ea\u7528\u51cf\u53bb\uff0c\u5404\u6587\u4ee5\u4e0b\u4f1a\u8a2a\u53f0\u51cf\u53bb\u5e76\u663e\u8463\u6cd5\u5185\u5bb9\u91cd\u590d\u6b21\u6570\u76ee\u756a\u53ef\u80fd\n    if n<=len(dp):\n        print(dp[n])\n    elif dp[n]=='0':\n        print(''.join(map(str,dp[n])))\n    else:\n        print(''.join(map(str,dp[n])))\n\ndef __starting_point():\n    print(solve(3,1))\n__starting_point()"}, "844": {"problem_id": 4844, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())\ndef solve():\n n = int(input())\n m = [int(x) for x in input().split()]\n matrix = [[0]*n for _ in range(n)]\n for i in range(n):\n  matrix[i][i] = matrix[i][i].bit_length()\n print(*matrix[0][n-1])\n"}, "845": {"problem_id": 4845, "answer": "# cook your dish here\nd,m = map(int, input().split(\" \"))\nfor i in range(m):\n    print(d, \"W \", \" \", i)"}, "846": {"problem_id": 4846, "answer": "# cook your dish here\nimport bisect\ndef insc(n, d, x):\n    if n == 0:\n        return x\n    elif n < d:\n        return bisect.bisect_left(0, x)\n    else:\n        x = 10**9+d\n        for i in range(1, int(n**0.5)+1):\n            if x < 10**9+i:\n                x = 10**9+i\n                break\n        return x\n\nL, D, X = map(int, input().split())\n\nans = []\nfor i in range(L):\n    ans.append(insc(int(i, 2), int(i, 2)))\n\nprint(ans[-1])"}, "847": {"problem_id": 4847, "answer": "from itertools import accumulate\ndef __starting_point():\n    n = int(input())\n    print(accumulate(map(int, list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x, accumulate(list(map(lambda x, y: x*y//2.0 + y*x,"}, "848": {"problem_id": 4848, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**5)\r\nINF = 10**20\r\nMOD = 10**9+7\r\ndef II(): return int(input())\r\ndef MI(): return map(int, input().split())\r\ndef LI(): return list(map(int, input().split()))\r\ndef LLI(mod): return [LI() for _ in range(mod)]\r\ndef SI(): return input()\r\ndef S(n, m):\r\n\tif n==1: return m*(m+1)\r\n\telif m==1: return n*(n+1)\r\n\telse:\r\n\t\tprint(f'{n}= {:.2f}' )\r\n\r\nfor i in range(II()):\r\n\tn,m=MI()\r\n\ta=[]\r\n\ta.append(SI())\r\n\ta.append(II())\r\n\ta.append(LI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())\r\n\ta.append(AI())"}, "849": {"problem_id": 4849, "answer": "from collections import defaultdict\nn,m=list(map(int,input().split()))\nfor i in range(0,len(n)):\n inp=input().split()\n inp=list(map(int,inp.split()))\n if(len(inp)>5):\n  print(\"HE GOT AWAY!\")\n elif(len(inp)==5):\n  print(\"HE GOT AWAY!\")\n else:\n  print(\"HE GOT AWAY!\")\n"}, "850": {"problem_id": 4850, "answer": "from sys import stdin,stdout\r\ninput = stdin.readline\r\nfor _ in range(int(input())):\r\n    a,b,c = map(int,input().split())\r\n    print(abs(c-a)**2 + abs(b-a)**2 + abs(c-b)**2)"}, "851": {"problem_id": 4851, "answer": "def main():\r\n N = int(input())\r\n d = 10**9 + 7\r\n while True:\r\n  try:\r\n   d = min(d, N)\r\n  except:\r\n   break\r\n  d = N\r\n"}, "852": {"problem_id": 4852, "answer": "import sys\n\ndef main():\n try:\n    main()\n except NameError:\n    pass\n return\n\nread_ints = lambda x: map(int, input().split('+'))\n\ndef __starting_point():\n \n sys.stdin = open('input.txt', 'r')\n \n # O(n) time to store the input\n \n main()\n\n__starting_point()"}, "853": {"problem_id": 4853, "answer": "# cook your dish here\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\ndef polynomial(x):\n    return x*a[x]\np = polynomial(1)\nprint(p[0])"}, "854": {"problem_id": 4854, "answer": "from collections import Counter\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nsorted_c = sorted(Counter(l).items(), key=lambda x: x[1])\r\nprint(len(set(l)))\r\n"}, "855": {"problem_id": 4855, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = len(l) - 1\n    while l[r] - l[r + 1] > 0:\n        r -= 1\n    citations_c = r**.5\n    for i in range(l[r]):\n        if citations_c >= l[i]:\n            break\n    print(str(citations_c) + \" \" + str(citations_c * r))\ndef __starting_point():\n    main()\n__starting_point()"}, "856": {"problem_id": 4856, "answer": "# cook your dish here\nimport math\nt=int(input())\nfor i in range(t):\n a,b=list(map(int,input().split()))\n print(math.gcd(a,b))"}, "857": {"problem_id": 4857, "answer": "import bisect as b\ndef input(): return input()\ndef __starting_point():\n    l,w,n = map(int,input().split())\n    print(input())\n__starting_point()"}, "858": {"problem_id": 4858, "answer": ""}, "859": {"problem_id": 4859, "answer": "# cook your dish here\nimport bisect\nfor _ in range(int(input())):\n b,d,c,l=list(map(int,input().split()))\n if b==0 and d==0 and c==0 and l==0:\n  print(\"0\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\neq 1 \"):\n  print(bisect.bisect_left(b,d,l) - bisect.bisect_right(b,c,l))\n elif b==0 and d==0 and c==0 and l==0:\n  print(\"0\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\nexponent\\n1 10\\neq 1 \"):\n  print(bisect.bisect_left(b,d,l) - bisect.bisect_right(b,c,l))\n else:\n  print(\"0\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\nexponent\\n1 10\\neq 1 \"):\n  print(bisect.bisect_left(b,d,l) - bisect.bisect_right(b,c,l))\n"}, "860": {"problem_id": 4860, "answer": "import math\ndef __starting_point():\n n = int(input())\n a = list(map(int, input().split()))\n print(math.ceil(n/100) + 1)\n__starting_point()"}, "861": {"problem_id": 4861, "answer": "from math import *\nn = int(input())\np = 10**9 + 7\ns = input()\nd = {'0': 0, '1': 1}\nfor i in range(n):\n    x, y = map(int, input().split())\n    if x == 0:\n        d[y] = 1\n    elif x == 1:\n        d[y] = 2\n    else:\n        d[y] = 3\nprint(d.get(max(d.values()), 0))"}, "862": {"problem_id": 4862, "answer": "from collections import namedtuple\r\ndef __starting_point():\r\n n = int(input())\r\n d = namedtuple('d', list(map(int, input().split())));\r\n d['rel'] = [1, 2, 3, 4]\r\n print(d['rel'][0] + d['rel'][1])"}, "863": {"problem_id": 4863, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(map(int, readline().split()))\ninput = lambda : int(readline())\n#________________________________________________________________________________________________\n# PROBLEM 2\n# here is a puzzle: find the x'th number that can be formed by rearranging\n# one-liner: find_x\n#________________________________________________________________________________________________\n# from ncr.com/problems/puzzle-number-9/problem.html\n# http://mathworld.wolfram.com/PuzzleChessAlgOReach.html\n# Reference: wikipedia online.\n# https://en.wikipedia.org/wiki/PeodynamResi-system%27\n# https://en.wikipedia.org/wiki/Plemmi?A=i&B=&C=2\n# https://en.wikipedia.org/wiki/Longest_row of_a_even number\n# https://arxiv.org/abs/1601.072v2\n# ________________________________________________________________________________________________\n# Author: Antonie Schaefer\n# Key Contributors: Wolfram\n# DoomsicallyImportantNote: 1-17\n# Key Problem: find the x'th number that can be formed by rearranging\n# one-liner: find_x\n# Author: Takahiro Saitama\n# Key doggenokia.sahmatius\n# Key contributors: Atsuo\n# DoomsicallyImportantNote: 2-4\n# Key Problem: find the x'th number that can be formed by\n# alternately cutting numbers from the left and right\n# 1-3\n# Author: Mustelkirkg\n# Name Contributors:ipperyanduxe\n# DoomsicallyImportantNote: 1-3\n# Name Problems: Kostas\n# Name Donateals: Tetsuf,Donate,Saturn\n# Name Editable: Yeso-,Nozhynsmityv%3aiie1915,Kostyild\n# Author: Takahiro Saitama\n# Doomsimple\n# Author: Mustelkirkg\n# Submissions:oberhudrusal,Hiroshi,2020,Nov,20,20,20,20,20,20\n# Submissions: 2020, Hiroshi,2020,20,20,20,20,20,20\n# RegEx Assumptions: 1.1.1\n# Test Cases: Tetsuf,Donate,Saturn No. of Tests: T2QQT@N@SSH2DP, 2020, Hiroshi,2020,20,20,20,20,20,20,20\n# Calculation: 12.94%17.94%17.94 = 12.94%17.94/17.94 *********\n# Input/Output:\n#==================================================================================\n#==================================================================================\n# 2020-Mar-20\n# Ouput:2.14.20.19: I'm sorry, I can't find the solution. I can only assume that I'm making a mistake.\n# 2020-Jul-20\n# 2020-2020\n# 2020-2020-20\n# 2020-2020-20-20\n# 2020-2020-20-20-20\n# 2020-2020-20-20-20-20 public key needed for this problem. Would I get stuck?\n# 2020-2020-20-20 public key needed for this problem. Would I get stuck?\n# Make sure you solve this problem correctly if you pastik your solution mod 20% or more.\n# Make sure you read the reference problem statement carefully. It contains many subtasks that may not be solvable yet.\n# In other words, if you are solving the problem on a paper, you would need to know the task before you can solve it.\n# There needs your code to calculate the score of a number from 1 to 3.\n# As you can see, it is very difficult to read very hard problem files. Write a program that calculates the score of a number from 1 to 3.\n# https://coding.com/2018/2.10.app2\n# ====================================================================================================================================\n#innate anchors\ninnate = 1\ninnate += 1\ninnate %= 20%\ninnate %= 20%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%\ninnate %= 100%"}, "864": {"problem_id": 4864, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n# Read and write data entered by user (without quotes)\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n# Read and write data sent from STDIN.line(input().strip(), 2)\r\n# Read line by line and add to Mofah presentation of zeroes and zeros in input().  System.os.tweaked will output %s instead of input()%s.\r\n# TODO: try to avoid nested mutate functions. I'm not sure if it's possible or not.\r\n#______________________________________________________________________________________________________\r\n# For for-loop depth of singly-linked list is O(N)\r\n#______________________________________________________________________________________________________\r\n# For for-loop depth of Mofah is O(N)\r\n#______________________________________________________________________________________________________\r\ndef nospace(m):\r\n    L = ['.']*len(m)\r\n    for i in range(len(m)):\r\n        L[i] = m[i]\r\n    return L\r\n#______________________________________________________________________________________________________\r\n# Function to find the number of triplet in nospace triangle.  \r\n#     Triples can be represented as:\r\n#       (a, b) => (a^b, b^a)                          \r\n#      /    \\                                         \r\n#    /    1                                         \r\n#    This is a singly-linked list representation of Triplet.  \r\n#     triplets can be represented as:\r\n#     (a, b) => (a^b, b^a}, "865": {"problem_id": 4865, "answer": "# cook your dish here\nimport datetime as dt\nfor _ in range(int(input())):\n a,b,c=map(int,input().split())\n if a=='F':\n  print(b,'R')\n elif a=='R':\n  print(c,'L')\n else:\n  if b not in list(c.keys()):\n   print(a,'R')\n  else:\n   print(b,'L')"}, "866": {"problem_id": 4866, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n \n#cin=cin+'YYE'\n#def inp():return int(sys.stdin.readline())\n#def inpl():return map(int,sys.stdin.readline().split())\n \n#sys.setrecursionlimit(10**7)\nINF = 10 ** 20\nMOD = 10_000_0501\n \nN = int(inp())\nprint(str(N).rstrip('0'))"}, "867": {"problem_id": 4867, "answer": "M, N = list(map(int, input().split()))\nfor i in range(N):\n print(''.join(map(str, ans)))\n"}, "868": {"problem_id": 4868, "answer": "from sys import stdin\r\ndef main():\r\n    input = stdin.readline().rstrip()\r\n    n = len(input)\r\n    print(n)\r\n\r\nmain()"}, "869": {"problem_id": 4869, "answer": "import math\r\ndef gcd(a, b):\r\n\tif a == 0:\r\n\t\treturn b\r\n\telif a == 1:\r\n\t\treturn math.gcd(b, a)\r\n\telse:\r\n\t\treturn gcd(b, a)\r\n\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nprint(gcd(l[0], l[1]))"}, "870": {"problem_id": 4870, "answer": "from heapq import *\ndef bluestar(l,r,stack):\n    if l[0]==l[1]==0:\n        return 0\n    elif l[0]<l[1]<r[0]:\n        return stack[0]\n    else:\n        x=l[0]\n        y=l[1]\n        while x<y:\n            if bluestar(x,y,stack):\n                x-=1\n                y+=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        y=x\n        while x<y:\n            if bluestar(x,y,stack):\n                y+=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y+=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y-=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y-=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y+=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y-=1\n            else:\n                break\n        stack.append(x)\n        x=y\n        while x<y:\n            if bluestar(x,y,stack):\n                y-=1\n            else:\n                break\n     "}, "871": {"problem_id": 4871, "answer": "import math\nn=int(input())\nl=[]\nfor i in range(n):\n    l.append(list(map(int,input().split())))\nl.sort(reverse=True)\nprint(math.ceil(l[-1]/5))"}, "872": {"problem_id": 4872, "answer": "import math\nn = int(input())\nd = list(map(int, input().split()))\nfor i in range(n):\n d.append(math.ceil(math.log(i, 2)))\nprint('\\n'.join(d))"}, "873": {"problem_id": 4873, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\ninp()\n"}, "874": {"problem_id": 4874, "answer": "# cook your dish here\ndef godown_helper(d):\n    if d[0]=='_':\n        return 1\n    elif d[0]=='_':\n        return 2\n    else:\n        return 3\nt = int(input())\nfor _ in range(t):\n    n,m = map(int,input().split())\n    print(godown_helper(n-1) + godown_helper(m-1))"}, "875": {"problem_id": 4875, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\ninp = lambda: list(map(int, input().split()))\r\ndef main():\r\n    #Code goes here!\r\n    lines = inp()\r\n    print(' '.join(map(str, lines)))\r\n\r\nmain()\r\n"}, "876": {"problem_id": 4876, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split()))\ns = 'Anywhere'\nfor i in range(n):\n s.swapcase()\n print(s[:n//2])"}, "877": {"problem_id": 4877, "answer": "import sys\ndef dijkstra(a,b,h):\n    if a<0 or b<0 or a>=h:\n        return 0\n    elif a==0 or b==0:\n        return 1\n    else:\n        x=a-b\n        print(x)\n        return 2*direclimit(x)\n\ndef dijkstra_poleproble(a,b,h):\n    if a<0 or b<0 or a>=h:\n        return 0\n    elif a==0 or b==0:\n        return 1\n    else:\n        x=a-b\n        print(x)\n        return 2*direclimit(x)\n\nsys.setrecursionlimit(10**7)\nINF=float('inf')\nmod=1000000007\neps=1.0/10**7\nfor i in range(int(input())):\n    a,b=map(int,input().split())\n    if a!=0 or b!=0:\n        print(dijkstra(a,b,h))"}, "878": {"problem_id": 4878, "answer": "R = list(map(int,input().split()))\r\nprint(R[R.index(R)//2] + R[R.index(R)//2+1] )"}, "879": {"problem_id": 4879, "answer": "# cook your dish here\ntry:\n a,b,c=list(map(int,input().split()))\n if(a==b==c):\n  print(\"Yes\")\n else:\n  if(a>b>c):\n   print(\"Yes\")\n  elif(a<b<c):\n   print(\"Yes\")\nexcept EOFError as e:\n pass"}, "880": {"problem_id": 4880, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n\r\nn, m = map(int, readline().split())\r\ns = list(map(chr, range(n)))\r\nl = len(s)\r\nfor i in range(l):\r\n    key = s[i]\r\n    m %= 26\r\n    if key == 0:\r\n        print(key, end=' ')\r\n    else:\r\n        print(key, end=' ')\r\n        l-=1\r\n        s.pop(l)\r\n        s.append(key)\r\n        \r\nprint('\\n'.join(map(str, s)))"}, "881": {"problem_id": 4881, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nprint('\\n'.join(map(str, list(map(lambda x: \"odd\", list(map(lambda y: \"even\", list(map(lambda z: \"even\", list(map(lambda z: \"odd\", list(map(lambda z: \"even\", list(map(lambda z: \"odd\", list(lambda z: \"O\", or: \"odd\"))))))))))))))"}, "882": {"problem_id": 4882, "answer": "import math\nn=int(input())\nfor i in range(n):\n print(int(math.log10(10*i)))"}, "883": {"problem_id": 4883, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\nMOD = 10**9 + 7\ndef inpl(): return map(int, readline().split())\ndef inpl_eq(): return [i for i in inpl()]\ndef inpl_iob(): return int(input())\ndef inpl(): return map(str, input().split())\nclass UF:\n    def __init__(self,n):\n        self.n = n\n        self.p = [0]*self.n\n        self.s = [0]*self.n\n        self.l = [0]*self.n\n        self.r = [0]*self.n\n        self.s[0] = 0\n        self.l[0] = 0\n        self.r[0] = 0\n        self.s[1] = 1\n        self.l[2] = 2\n        self.r[2] = 2\n        self.s[3] = 3\n        self.l[4] = 4\n        self.r[4] = 4\n        self.s[5] = 5\n        self.l[5] = 5\n        self.r[5] = 5\n        self.s[5] = 5\n        self.l[6] = 6\n        self.r[6] = 6\n        self.s[6] = 6\n        self.l[6] = 6\n        self.r[6] = 6\n        self.s[7] = 7\n        self.l[7] = 7\n        self.r[7] = 7\n        self.s[7] = 7\n        self.l[8] = 8\n        self.r[8] = 8\n        self.s[8] = 8\n        self.l[8] = 8\n        self.r[8] = 8\n        self.s[9] = 9\n        self.l[9] = 9\n        self.r[9] = 9\n        self.s[9] = 9\n        self.l[9] = 9\n        self.r[9] = 9\n        self.s[10] = 10\n        self.l[10] = 10\n        self.r[10] = 10\n        self.s[11] = 11\n        self.l[11] = 11\n        self.r[11] = 11\n        self.s[11] = 11\n        self.l[11] = 11\n        self.r[11] = 11\n        self.s[12] = 12\n        self.l[12] = 12\n        self.r[12] = 12\n        self.s[12] = 12\n        self.l[12] = 12\n        self.r[12] = 12\n        self.s[13] = 13\n        self.l[13] = 13\n        self.r[13] = 13\n   "}, "884": {"problem_id": 4884, "answer": "# cook your dish here\nn,p = map(int,input().split())\nco = [0]*n\nfor i in range(n):\n co[i] = (co[i]+1)%p\n print(co[-1])"}, "885": {"problem_id": 4885, "answer": ""}, "886": {"problem_id": 4886, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())\nn, k = map(int, readline().split())\nif n % 2 == 1:\n    print('You will become a flying monkey!')\nelif n == 1:\n    print('Your wish is granted!')\nelse:\n    x = list(map(int, readline().split()))\n    if x[0] == '0':\n        print('You will become a flying monkey!')\n    else:\n        print('You will become a flying monkey!')\n"}, "887": {"problem_id": 4887, "answer": "from math import sqrt\r\nn = int(input())\r\nfor i in range(n):\r\n\ta = int(sqrt(n))\r\n\tprint(a + sqrt(a))"}, "888": {"problem_id": 4888, "answer": "for _ in range(int(input())):\n    n, t = map(int, input().split())\n    if t > 360:\n        print(t + 1)\n    else:\n        print(t + 1)"}, "889": {"problem_id": 4889, "answer": "n = int(input())\r\nfor i in range(n):\r\n    l = list(map(int, input().split()))\r\n    print(l.count(1) * l.count(l[0]))"}, "890": {"problem_id": 4890, "answer": "# cook your dish here\nimport bisect as b\nn, m, s, d = list(map(int, input().split()))\ns = sorted(list(map(int, input().split())))\nb.insert(0, s[0])\nd = sorted(list(map(int, input().split())))\nprint(bisect_left(b, s[1:]))\n"}, "891": {"problem_id": 4891, "answer": "from math import sqrt,gcd\r\ndef gcd(a,b):\r\n    if b==0:\r\n        return a\r\n    elif b==1:\r\n        return gcd(b,a)\r\n    else:\r\n        return b\r\nn=int(input())\r\nA=list(map(int,input().split()))\r\n#print(A)\r\nfor i in range(n):\r\n    print(gcd(A[i],A[i+1]))"}, "892": {"problem_id": 4892, "answer": "from sys import stdin\ninput = stdin.readline\nn = int(input())\nfor i in range(n):\n a = input().split()\n a = list(map(int, a[1:])).count(0)\n if len(a)>0:\n  print(0.000000)\n else:\n  try:\n   try:\n    a.insert(0, '0')\n   except:\n    pass\n  elif len(a)==0:\n   print(0)\n  else:\n   print(a[0]*(a[1]-1)//2)\n"}, "893": {"problem_id": 4893, "answer": "import sys\ndef dijk():\n try:\n  return map(int, sys.stdin.readline().rstrip())\n except EOFError as e:\n  return 1\nn = int(sys.stdin.readline().rstrip())\nd = dijk()\nfor i in range(n):\n d += 1\n print(d)"}, "894": {"problem_id": 4894, "answer": ""}, "895": {"problem_id": 4895, "answer": "from heapq import *\nn = int(input())\nheap = []\nfor i in range(n):\n    heap.append(list(map(int, input().split())))\npoints = [-1] * n\npoints[0] = 0\npoints[1] = 0\npoints[2] = 0\npoints[3] = 0\npoints[4] = 0\npoints[5] = 0\npoints[6] = 0\npoints[7] = 0\npoints[8] = 0\npoints[9] = 0\npoints[10] = 0\npoints[11] = 0\npoints[12] = 0\npoints[13] = 0\npoints[14] = 0\npoints[15] = 0\npoints[16] = 0\npoints[17] = 0\npoints[18] = 0\npoints[19] = 0\npoints[20] = 0\npoints[21] = 0\npoints[22] = 0\npoints[23] = 0\npoints[24] = 0\npoints[25] = 0\npoints[26] = 0\npoints[27] = 0\npoints[28] = 0\npoints[29] = 0\npoints[30] = 0\npoints[31] = 0\npoints[32] = 0\npoints[33] = 0\npoints[34] = 0\npoints[35] = 0\npoints[36] = 0\npoints[37] = 0\npoints[38] = 0\npoints[39] = 0\npoints[40] = 0\npoints[41] = 0\npoints[42] = 0\npoints[43] = 0\npoints[44] = 0\npoints[45] = 0\npoints[45] = 0\npoints[46] = 0\npoints[47] = 0\npoints[48] = 0\npoints[49] = 0\npoints[50] = 0\npoints[51] = 0\npoints[52] = 0\npoints[53] = 0\npoints[54] = 0\npoints[55] = 0\npoints[56] = 0\npoints[57] = 0\npoints[58] = 0\npoints[59] = 0\npoints[60] = 0\npoints[61] = 0\npoints[61] = 0\npoints[62] = 0\npoints[63] = 0\npoints[64] = 0\npoints[64] = 0\npoints[65] = 0\npoints[66] = 0\npoints[67] = 0\npoints[68] = 0\npoints[69] = 0\npoints[70] = 0\npoints[71] = 0\npoints[72] = 0\npoints[73] = 0\npoints[74] = 0\npoints[75] = 0\npoints[76] = 0\npoints[77] = 0\npoints[78] = 0\npoints[79] = 0\npoints[80] = 0\npoints[80] = 0\npoints[81] = 0\npoints[81] = 0\npoints[82] = 0\npoints[82] = 0\npoints[83] = 0\npoints[83] = 0\npoints[84] = 0\npoints[85] = 0\npoints[86] = 0\npoints[86] = 0\npoints[87] = 0\npoints[87] = 0\npoints[88] = 0\npoints[89] = 0\npoints[89] = 0\npoints[90] = 0\npoints[90] = 0\npoints[91] = 0\npoints[92] = 0\npoints[93] = 0\npoints[94] = 0\npoints[95] = 0\npoints[96] = 0\npoints[97] = 0\npoints[98] = 0\npoints[99] = 0\npoints[99] = 0\npoints[100] = 0\npoints[101] = 0\npoints[100] = 0\npoints[101] = 0\npoints[103] = 0\npoints[104] = 0\npoints[105] = 0\npoints[105] = 0\npoints[106] = 0\npoints[107] = 0\npoints[108] = 0\npoints[109] = 0\npoints[110] = 0\npoints[111] = 0\npoints[112] = 0\npoints[113] = 0\npoints[114] = 0\npoints[115] = 0\npoints[116] = 0\npoints[714] = 0\npoints[715] = 0\npoints[716] = 0\npoints[717] = 0\npoints[718] = 0\npoints[719] = 0\npoints[720] ="}, "896": {"problem_id": 4896, "answer": "from itertools import take \nN = int(input())\nfor i in range(N):\n x = list(map(int, input().split()))\n print(x[0] + x[1])"}, "897": {"problem_id": 4897, "answer": "n = int(input())\r\nfor i in range(n):\r\n    a,b = map(int,input().split())\r\n    print(100*a + 100*b)"}, "898": {"problem_id": 4898, "answer": "from collections import defaultdict\r\ndef main():\r\n    n = int(input())\r\n    l,u = list(map(int,input().split()))\r\n    rooms = sorted(list(map(int,input().split())))\r\n    # \u6b64\u65f6\u5fc5\u9808\r\n    # print(rooms)\r\n    # print(temperature)\r\n    # print(ranks)\r\n    if rooms == []:\r\n        print(0)\r\n    else:\r\n        tem = int(input())\r\n        tem1 = tem[0]\r\n        tem2 = tem[1]\r\n        tem3 = tem[2]\r\n        tem4 = tem[3]\r\n        tem5 = tem[4]\r\n        tem6 = tem[5]\r\n        tem7 = tem[6]\r\n        tem8 = tem[7]\r\n        tem9 = tem[8]\r\n        tem10 = tem[9]\r\n        tem11 = tem[10]\r\n        tem12 = tem[11]\r\n        tem13 = tem[12]\r\n        tem14 = tem[14]\r\n        tem15 = tem[15]\r\n        tem16 = tem[16]\r\n        tem17 = tem[18]\r\n        tem19 = tem[19]\r\n        tem20 = tem[20]\r\n        tem21 = tem[21]\r\n        tem22 = tem[22]\r\n        tem23 = tem[23]\r\n        tem24 = tem[24]\r\n        tem25 = tem[25]\r\n        tem26 = tem[26]\r\n        tem27 = tem[27]\r\n        tem28 = tem[28]\r\n        tem29 = tem[29]\r\n        tem30 = tem[30]\r\n        tem31 = tem[31]\r\n        tem32 = tem[32]\r\n        tem33 = tem[33]\r\n        tem34 = tem[34]\r\n        tem5 = tem[5]\r\n        tem6 = tem[6]\r\n        tem7 = tem[7]\r\n        tem8 = tem[8]\r\n        tem9 = tem[9]\r\n        tem10 = tem[10]\r\n        tem11 = tem[11]\r\n        tem12 = tem[12]\r\n        tem13 = tem[13]\r\n        tem14 = tem[14]\r\n        tem15 = tem[15]\r\n        tem16 = tem[16]\r\n        tem17 = tem[17]\r\n        tem18 = tem[18]\r\n        tem19 = tem[19]\r\n        tem20 = tem[20]\r\n        tem21 = tem[21]\r\n        tem22 = tem[22]\r\n        tem23 = tem[23]\r\n        tem24 = tem[24]\r\n        tem25 = tem[25]\r\n    "}, "899": {"problem_id": 4899, "answer": "def greeting(s):\r\n    return \"\".join(f\"{x}Hello{\")\r\n        for x in s.split(\" \")\r\n        if x not in \"HELLOES\" : return \"He\u2026ey\"\r\n        else : return \"You know\u2026y!\"\r\n"}, "900": {"problem_id": 4900, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\td = abs(a[0] - b[0])\n\tr = 0\n\tfor i in range(1, len(a) - 1):\n\t\tr += d\n\t\tif a[i] < b[i]:\n\t\t\tr //= d\n\tprint(r)\n"}, "901": {"problem_id": 4901, "answer": "from itertools import permutations\ndef __import__('sys').setrecursionlimit(1):\n    n = int(input())\n    dp = [0]*26\n    for i in range(n):\n        dp.append(reversed(permutations(map(int, input().split()))))\n    print(''.join(map(str, dp)))\n__import__('sys').setrecursionlimit(1)\n"}, "902": {"problem_id": 4902, "answer": "from collections import Counter\r\ndef __starting_point():\r\n    s = input()\r\n    n = len(s)\r\n    print(n)\r\n__starting_point()"}, "903": {"problem_id": 4903, "answer": "import heapq as hp\ndef main():\n a, b = map(int, input().split())\n if len(a) == 1:\n  print('go')\n else:\n  h = 9\n  a.sort()\n  b.sort()\n  if heapq.heappush(h, a) == -1:\n   print('no')\n  else:\n   print('a' in h, 'h' in h)\nmain()"}, "904": {"problem_id": 4904, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush,heappop\nn = int(input())\nA = tuple(map(int, input().split()))\nB = tuple(map(int, input().split()))\n# A score of A is `score` = `A.count(score)`\n# B score of B is `score` = `B.count(score)`\n# In Python and Ruby we don't care about `score` alone. we know `score` and `B` are connected.\n# In JavaScript we don't care about `score` alone. we know `score` and `A` are connected.\ndef __starting_point():\n    A = tuple(map(int, input().split()))\n    B = tuple(map(int, input().split()))\n    print(A.count(B))\n\n__starting_point()"}, "905": {"problem_id": 4905, "answer": "# cook your dish here\ndef f(n, m):\n if m<n:\n  return 0\n elif m==n:\n  return 1\n else:\n  return min(f(n-1, m-1), f(n, m-1))\nn, m = map(int, input().split())\ng = list(map(int, input().split()))\nprint(f(n, m))"}, "906": {"problem_id": 4906, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    # Printing to STD stands for Printing.com, not printing on Unix and other operating systems.\\n\"\n    return 0\n\ndef __starting_point():\n    sys.setrecursionlimit(1000000)\n    main()\n\n__starting_point()"}, "907": {"problem_id": 4907, "answer": "from math import sqrt\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(sqrt(b[0] + b[1]))\n__starting_point()"}, "908": {"problem_id": 4908, "answer": "import math\r\ndef __starting_point():\r\n    main = sys.stdin.readline().rstrip()\r\n    solve = int(main())\r\n    print(solve)\r\n__starting_point()"}, "909": {"problem_id": 4909, "answer": "n = int(input())\r\nD = list(map(int, input().split()))\r\nfor i in range(n - 1):\r\n    try:\r\n        D.insert(0, i)\r\n        print(\"YES\")\r\nexcept:\r\n#      Traceback (most recent call last)\r\nTraceback(list(map(int, input().split()))).flush \r\n"}, "910": {"problem_id": 4910, "answer": "n=int(input())\nif(n<=1):\n print(0)\nelif(n==1):\n print(0)\nelse:\n l=list(map(str,input().split()))\n for i in range(len(l)):\n  if(l[i]==\"angel\")and(l[i]==\"bob\")and(l[i]==\"ghost\")and(l[i]==\"mummy\")and(l[i]==\"complication\")and(l[i]==\"invalid\")):\n   print(l[i])\n"}, "911": {"problem_id": 4911, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\nlinput = lambda x: inp(x,''.join(map(str, x)))\nprint(['\\n'.join(map(str, inp(x,''.join(map(str, inp(x,''.join(map(str,''))))]), int(x) - 1) for x in inp(x,''.join(map(str, x)))]))"}, "912": {"problem_id": 4912, "answer": "def main():\n    h,w,b=list(map(int,input().split()))\n    if h==1:\n        print('YES')\n    elif h==2:\n        print('NO')\n    else:\n        print('YES')\nmain()"}, "913": {"problem_id": 4913, "answer": "def main():\n n = int(input())\n for _ in range(n):\n  s = input().split(' ')\n  s = list(reversed(s))\n  a = 0\n  b = 0\n  c = 0\n  for i in s:\n   if i == 'Y':\n    a += 1\n   elif i == 'N':\n    b += 1\n   elif i == 'N':\n    c += 1\n  print(a - b)\n  print('%.2f' % (abs(a - b) / 100.0))\nmain()"}, "914": {"problem_id": 4914, "answer": "from itertools import permutations as p\nn=int(input())\nfor i in range(n):\n a=list(map(str,input().split()))\n m=[]\n for j in a:\n  if j[0]=='B':\n  elif j[0]=='A':\n   m.append(j[1])\n print(len(m))\n"}, "915": {"problem_id": 4915, "answer": "from bisect import *\nN = int(input())\nfor i in range(N):\n m = int(input())\n if m == 1:\n  print(0)\n elif m == 2:\n  if len(list(map(int, input().split())) == 1):\n   print(N - 1)\n  else:\n   if len(list(map(int, input().split())) == 2):\n    print(N - 2)\n   else:\n    if len(list(map(int, input().split())) == 3):\n     print(N - 3)\n    else:\n     if len(list(map(int, input().split())) == 4):\n      print(N - 4)\n     else:\n      if len(list(map(int, input().split())) == 5):\n       print(N - 5)\n      else:\n       if len(list(map(int, input().split())) == 6):\n        print(N - 6)\n       else:\n        if len(list(map(int, input().split())) == 7:\n          print(N - 7)\n        else:\n          print(N - 8)\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n  "}, "916": {"problem_id": 4916, "answer": "from itertools import permutations as p\nfrom heapq import heappush, heappop\nn, k = map(int, input().split())\nprint(len(set(p.combinations(k, 2)))) if k % 2!= 0 else '\\n'.join(map(str, permutations(range(n)), k))"}, "917": {"problem_id": 4917, "answer": "import math\ndef isPossible(n):\n    if n==1:\n        return True\n    elif n==2:\n        return True\n    else:\n        return False\n\nn=int(input())\npots=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    if isPossible(a):\n        print(pots.append(b) if isPossible(a) else 'too')\n    else:\n        if len(pots)==1:\n            print('too')\n        else:\n            print('gujeed')\n"}, "918": {"problem_id": 4918, "answer": "import bisect as b\ndef main():\n    n, q = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for _ in range(q):\n        a, b = list(map(int, input().split()))\n        print(bisect.bisect_right(l[0], a) + bisect.bisect_right(l[1], b))\n    return '\\n'.join(reversed(l))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "919": {"problem_id": 4919, "answer": "import math\nn = int(input())\nl = list(map(int,input().split()))\nfor i in range(n):\n    s = input()\n    l.append(s.title())\nprint('\\n'.join(l))"}, "920": {"problem_id": 4920, "answer": "from collections import Counter\r\ndef f(n):\r\n    return list(Counter(str(n).lstrip('a')))\r\nn=int(input())\r\n#n=int(input())\r\n#l=list(map(int,input().split()))\r\n#c=Counter(input())\r\n#print(f(n))\r\n"}, "921": {"problem_id": 4921, "answer": "from collections import deque\r\n\r\ndef lcm(a, b):\r\n    return a*b//gcd(a, b)\r\n\r\ndef merge(a, b):\r\n    g = a%b\r\n    a.sort()\r\n    b.sort()\r\n    return a*b//gcd(a, b)\r\n\r\nclass EulerTour(object):\r\n    def __init__(self, EulerTour_taken):\r\n        self.taken = EulerTour_taken\r\n        self.eulerTour = EulerTour()\r\n        self.s = set(map(int, input().split(' ')))\r\n        self.doubles = {}\r\n        self.numerals = {}\r\n        self.max_multiplier = -1\r\n        for i in range(len(self.eulerTour)):\r\n            if self.eulerTour[i] not in self.doubles:\r\n                self.doubles[self.eulerTour[i]] = {'.': i, '.': self.eulerTour[i]}\r\n            else:\r\n                self.doubles[self.eulerTour[i]] = {'.': i, '.': self.eulerTour[i] for i in range(len(self.s))}\r\n        self.max_multiplier = max(self.max_multiplier, self.numerals[-1])\r\n        self.s = set(map(int, input().split(' ')))\r\n        self.denominals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = -1\r\n        self.numerals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = max(self.max_multiplier, self.numerals[-1])\r\n        self.s = set(map(int, input().split(' ')))\r\n        self.denominals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = -1\r\n        self.numerals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = max(self.max_multiplier, self.numerals[-1])\r\n        self.s = set(map(int, input().split(' ')))\r\n        self.denominals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = -1\r\n        self.numerals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = max(self.max_multiplier, self.numerals[-1])\r\n        self.s = set(map(int, input().split(' ')))\r\n        self.denominals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = -1\r\n        self.numerals = {}\r\n        self.denominals[0] = 0\r\n        self.max_multiplier = -1\r\n   "}, "922": {"problem_id": 4922, "answer": "from collections import defaultdict\nclass Dijkstra():\n    def __init__(self,s):\n        self.d = defaultdict(list)\n        self.s = s\n        self.vis = set()\n        self.components = 0\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.j = 1\n        self.d[0] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 1\n        self.vis.add(0)\n        self.j = 2\n        self.vis.add(0)\n        self.d[0] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.j = 1\n        self.vis.add(0)\n        self.d[1] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.j = 2\n        self.vis.add(0)\n        self.d[1] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.j = 1\n        self.vis.add(0)\n        self.d[1] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.j = 2\n        self.vis.add(0)\n        self.d[0] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.add(0)\n        self.d[1] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.subtract(0)\n        self.j = 1\n        self.vis.subtract(0)\n        self.d[0] = self.vis\n        self.components += 1\n        self.n = len(self.vis)\n        self.j = 0\n        self.vis.setdefault(0, 0)\n       "}, "923": {"problem_id": 4923, "answer": "from functools import reduce\nclass Queue:\n    def __init__(self):\n        self.queue = []\n        self.size = 0xFFFFFFFF\n        self.backtrack = 0\n        self.queue.append(0)\n        self.size += 1\n        \n    def add(self, val):\n        val += self.queue[-1]\n        self.queue[-1] = val\n        self.queue[-1] += val\n        \n    def backtrack(self):\n        if self.queue[-1] < 0:\n            print('not a valid queue')\n            return\n        else:\n            self.queue[-1] = 0\n            self.queue[-1] += 1\n            self.queue[-1] -= 1\n            self.queue[-1] += 1\n            self.queue[-1] -= 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n            self.queue[-1] += 1\n "}, "924": {"problem_id": 4924, "answer": "import bisect as b\ndef time(t):\n h,m,s = map(int,input().split())\n print(h+m+s)\n \n \n"}, "925": {"problem_id": 4925, "answer": "from math import sqrt\ndef power(x):\n    return x**2 + (x-1)**2\nn,m=map(int,input().split())\nc=0\nfor i in range(n):\n    x=power(m)\n    if x<=0:\n        c+=1\nprint(c)"}, "926": {"problem_id": 4926, "answer": "from math import *\r\ndef factorial(n):\r\n    a = 1\r\n    while(n!=0):\r\n        a*=n\r\n        n=n/int(n)\r\n    return a\r\nn = int(input())\r\nprint(factorial(n))\r\n"}, "927": {"problem_id": 4927, "answer": "from functools import cmp_to_funct\r\n\r\ndef main():\r\n    N, P, Q = map(int, input().split())\r\n    print(cmp_to_funct(N))\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "928": {"problem_id": 4928, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    N = int(readline())\n    d = {}\n    for i in range(N):\n        d[i] = list(map(int, readline().split()))\n    print(max(d.values()))\n\nmain()\n"}, "929": {"problem_id": 4929, "answer": "# cook your dish here\ns,p=input().strip()\nwhile p!='01' and s=='a' and p=='a' :\n    p=int(p)\n    s=input()\n    if s==s[0] :\n        print(\"No\")\n    elif s==s[1] :\n        print(\"P\")\n    else :\n        print(\"No\")\n"}, "930": {"problem_id": 4930, "answer": "from collections import Counter\ndef __starting_point():\n    t = input().lower()\n    print(t[0].translate(str.maketrans('aeiouAEIOU','0123456789')))\n__starting_point()"}, "931": {"problem_id": 4931, "answer": "# cook your dish here\ndef c(x,y):\n if x==y:\n  return 1\n else:\n  return 0\nn=int(input())\nl=list(map(int,input().split()))\nfor i in range(n):\n print(c(l[i],l[i+1]))"}, "932": {"problem_id": 4932, "answer": "import math\ndef main():\n    A,B,C,D = map(int,input().split())\n    if A==B:\n        print(A)\n    elif A==C:\n        print(B)\n    elif A==D:\n        print(C)\n    else:\n        p,m,g = map(int,input().split())\n        if p==A:\n            print(m)\n        elif p==B:\n            print(g)\n        else:\n            if m==1 or m==2:\n                print(A,B,C,D)\n            else:\n                print(m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n                print(m-1,m-1,m-1)\n  "}, "933": {"problem_id": 4933, "answer": "import sys\r\ndef main():\r\n    input = sys.stdin.readline\r\n    print(int(input()))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "934": {"problem_id": 4934, "answer": "import sys\ndef lca(x,y):\n    return x*y**.5\ndef lcd(x,y):\n    return x*y**.5\ndef lf(x,y):\n    return x*y**.5\ndef lg(x,y):\n    return x*y**.5\ndef loo(x,y):\n    return x*y**.5\ndef lcc(x,y):\n    return x*y**.5\ndef looi(x,y):\n    return x*y**.5\ndef lcci(x,y):\n    return x*y**.5\ndef looi(x,y):\n    return x*y**.5\ndef lcci(x,y):\n    return x*y**.5\n\n# Driver code https://www.codewars.com/kata/5676514e043b9 (9/31/2019)\nMOD = 1000000007\n\ndef main():\n    h, v = map(int, input().split())\n    h, v = lca(h, v)\n    print(str(h) + \" mm\" + str(v))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "935": {"problem_id": 4935, "answer": "import math\nN = int(input())\r\nfor i in range(N):\r\n  d = [int(i) for i in input().split(\" \")]\r\n  angle = math.degrees_to_east(d)\r\n  \r\n  # Start at the origin (0 cart) and go straight down the slope (1 cart)\r\n  # Do not go down too high or too low\r\n  # If slope is too high, stop and go straight down the slope.\r\n  if angle == 1:\r\n      continue\r\n  elif angle == -1:\r\n      continue\r\n  elif abs(d[0] - d[1]) < math.sqrt(1 + 2 * math.gcd(d[0], d[1])) and abs(d[1] - d[0]) < math.sqrt(1 + 2 * math.gcd(d[1], d[0])) :\r\n      d[0] = d[1] = 0\r\n      d[1] = 0\r\n      d[2] = 0\r\n      d[3] = 0\r\n      d[4] = 0\r\n      d[5] = 0\r\n      d[6] = 0\r\n      d[7] = 0\r\n      d[8] = 0\r\n      d[9] = 0\r\n      d[10] = 0\r\n      d[11] = 0\r\n      d[12] = 0\r\n      d[13] = 0\r\n      d[14] = 0\r\n      d[15] = 0\r\n      d[16] = 0\r\n      d[17] = 0\r\n      d[18] = 0\r\n      d[19] = 0\r\n      d[20] = 0\r\n      d[21] = 0\r\n      d[22] = 0\r\n      d[23] = 0\r\n      d[24] = 0\r\n      d[25] = 0\r\n      d[26] = 0\r\n      d[27] = 0\r\n      d[28] = 0\r\n      d[29] = 0\r\n      d[30] = 0\r\n      d[31] = 0\r\n      d[32] = 0\r\n      d[33] = 0\r\n      d[34] = 0\r\n      d[35] = 0\r\n      d[36] = 0\r\n      d[37] = 0\r\n      d[38] = 0\r\n      d[39] = 0\r\n      d[40] = 0\r\n      d[41] = 0\r\n      d[42] = 0\r\n      d[43] = 0\r\n      d[44] = 0\r\n      d[45] = 0\r\n      d[46] = 0\r\n      d[47] = 0\r\n      d[48] = 0\r\n      d[49] = 0\r\n      d[50] = 0\r\n      d[51] = 0\r\n      d[52] = 0\r\n      d[53] = 0\r\n      d[54] = 0\r\n      d[55] = 0\r\n      d[56] = 0\r\n      d[57] = 0\r\n      d[58] = 0\r\n      d[59] = 0\r\n      d[60] = 0\r\n   "}, "936": {"problem_id": 4936, "answer": "import math\nn = int(input())\nfor i in range(n):\n a = list(map(int, input().split()))\n a.sort(reverse=True)\n max_tor = 1000000000\n tempr = [-1]*len(a)\n tempr[0] = 0\n for i in range(1, len(a)):\n  tempr[i] = max_tor + a[i-1]\n  tempr[i] = int(math.ceil(tempr[i]/a[i]))\n print(tempr[0])"}, "937": {"problem_id": 4937, "answer": "from itertools import permutations as p\ndef f(n):\n    return 1 + p(n-1) * (n-1) // 2\nn=int(input())\na=list(map(int,input().split()))\nc=0\nfor i in range(n):\n    c+=f(a[i])\nprint(c)"}, "938": {"problem_id": 4938, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda : list(readline())\ninp()"}, "939": {"problem_id": 4939, "answer": "# cook your dish here\ndef doOperations(n,operations):\n if operations[0]!=0:\n  print(operations[1])\n elif operations[1]==0:\n  print(operations[2])\n else:\n  x=operations[0]\n  y=operations[1]\n  if x==0:\n   print(operations[2])\n  elif y==0:\n   print(operations[1])\n  else:\n   x=operations[2]\n   y=operations[1]\n   if x==0:\n    print(operations[2])\n   elif y==0:\n    print(operations[1])\n   else:\n    x=operations[2]\n    y=operations[1]\n    if x==0:\n     print(operations[2])\n    elif y==0:\n     print(operations[1])\n    else:\n     x=operations[2]\n     y=operations[1]\n     if x==0:\n      print(operations[2])\n     elif y==0:\n      print(operations[1])\n     else:\n      x=operations[2]\n      y=operations[1]\n      if x==0:\n        print(operations[2])\n      elif y==0:\n        print(operations[1])\n      else:\n        x=operations[2]\n        y=operations[1]\n        if x==0:\n          print(operations[2])\n        elif y==0:\n          print(operations[1])\n        else:\n          x=operations[2]\n          y=operations[1]\n          if x==0:\n            print(operations[2])\n          elif y==0:\n            print(operations[1])\n          else:\n            x=operations[2]\n            y=operations[1]\n            if x==0:\n               print(operations[2])\n            elif y==0:\n               print(operations[1])\n            else:\n               x=operations.index(x)+1\n               y=operations.index(y)+1\n               if x==0:\n                  print(operations[2])\n               elif y==0:\n                  print(operations[1])\n               else:\n                  x=operations.index(x)+1\n                  y=operations.index(y)+1\n                  if x==0:\n                     print(operations["}, "940": {"problem_id": 4940, "answer": "# cook your dish here\nimport bisect as bi\nfor i in range(int(input())):\n    n,m=map(int,input().split())\n    if(n==1):\n        print(bi.bisect_left(m,n))\n    elif(m==1):\n        print(bi.bisect_right(n,m))\n    else:\n        print(m-1)"}, "941": {"problem_id": 4941, "answer": "import bisect\ns=input()\nfor i in range(0,len(s)):\n s=s.split(\" \")\n l=len(s)\n if(bisect.bisect_left(l,l[0])!=0):\n  print(\"wrong\")\n elif(bisect.bisect_right(l,l[-1]))!=0:\n  print(\"correct\")\n else:\n  print(\"incorrect\")"}, "942": {"problem_id": 4942, "answer": "import sys\r\nsys.setrecursionlimit(10**6)\r\nn=int(input())\r\nfor i in range(n):\r\n    print(int(sys.stdin.readline()) + '\\n')"}, "943": {"problem_id": 4943, "answer": "import math\nt = int(input())\nfor _ in range(t):\n n = int(input())\n d = [int(x) for x in input().split()]\n d.sort(key=lambda x: x[0])\n print(math.gcd(d[n-1], d[n-2]))"}, "944": {"problem_id": 4944, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\nprinters = list(map(int, input().split()))\nprint(n-1-prior(printers))"}, "945": {"problem_id": 4945, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.stdin.readline().strip()\ndef iinput(): return int(readline())\ndef linput(): return list(map(int, readline().split()))\ndef readline(): return list(line())\nMOD = 10**9+7\n# input()\nt = iinput()\na, b, m, co = 0, 0, 0, 0\nfor i in range(t):\n  co += 1e-6\n  a += b*co\nprint(m*co)\n"}, "946": {"problem_id": 4946, "answer": "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\n#print(arr)\n#print(arr[0])\nfor i in range(n):\n print(3, end=' ')\n print(2, end=' ')\n print(2, end='\\n')\n"}, "947": {"problem_id": 4947, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = 10.0 + n/n + n/n\nprint(a)"}, "948": {"problem_id": 4948, "answer": "import sys\r\ndef main():\r\n    n,s=map(int,sys.stdin.readline().split())\r\n    print(sorted(map(int,sys.stdin.readline().split())))\r\nmain()\r\n"}, "949": {"problem_id": 4949, "answer": "import itertools as it\nN = int(input())\nlines = list(it.accumulate(str(N)))\nfor i in range(N):\n l, h = list(map(int, input().split()))\n if l == h:\n  print(\"DA\")\n else:\n  print(\"NE\")\n"}, "950": {"problem_id": 4950, "answer": "import math\ndef factorial(x):\n return int(math.factorial(x))\nn = int(input())\nfor i in range(n):\n a,b = map(int, input().split())\n print(factorial(a+b))"}, "951": {"problem_id": 4951, "answer": "import bisect\ndef gcd(a, b):        return a         \r\ndef lcm(a, b):        return (a * b) // gcd(a, bn10  ALICE BOB -> CARL\n10  CARL ->BL\u03bb\u03b2   ->BL\u03bb\u03b2    ->CDLE\n\n\ndef is_equation(x, y):\n    try:\n        print(x, y)\nexcept EOFError:\n    pass\n\ndef gen_factors(n):\n    factors = []\n    for i in range(1, int('0110000' + str.maketrans('02468','012300')))[::-1]:\n        factors.append(int(i))\n    factors.sort(reverse=True)\n    #print(factors)\n    #print(gcd(factors[0],factors[1]))\n    #print(gcd(factors[0],factors[1]))\n    if len(factors) == 1:\n        return factors\n    elif len(factors) == 2:\n        return factors[0]\n    else:\n        factors ="}, "952": {"problem_id": 4952, "answer": "import itertools as it\nfor _ in range(int(input())):\n s = list(it.accumulate(list(map(int, input().split())))[0])\n print('Runoff')\n"}, "953": {"problem_id": 4953, "answer": "# cook your dish here\nfrom collections import defaultdict as dd\nn = int(input())\nfor _ in range(n):\n    lis = list(map(int, input().split()))\n    d = dd(list(map(int, input().split())))\n    d.most_common(0)\n    a = [0]*len(lis)\n    for i in lis:\n        if i not in d:\n            d[i] = 0\n        else:\n            d[i] += 1\n    print(len(d[15]))"}, "954": {"problem_id": 4954, "answer": "from bisect import *\nn = int(input())\nfor i in range(n):\n a = int(input())\n print(min(a, sum(map(int, input().split()))))"}, "955": {"problem_id": 4955, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\ndef main():\n m = 100\n ans = []\n for i in range(m):\n  ans.append(list(map(int, input().split())))\n print('\\n'.join(ans))\n\nmain()\n"}, "956": {"problem_id": 4956, "answer": "from collections import defaultdict\nn = 10**9 + 7\ns = input()\nfor i in range(n):\n    s.encode(\"aeiou\", \"r\")\nprint(s[::-1])"}, "957": {"problem_id": 4957, "answer": "# cook your dish here\nimport itertools as it\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    print(' '.join(sorted(it.group(),byitems=m)))"}, "958": {"problem_id": 4958, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nsys.setrecursionlimit(10 ** 9)\r\ndef LI(): return list(map(int, sys.stdin.readline().split()))\r\ndef LI_(): return list(map(int, sys.stdin.readline().split()))\r\ndef LF(): return list(map(float, sys.stdin.readline().split()))\r\ndef LS(): return sys.stdin.readline().split()\redgesafe()\r\ndef I(): return int(input())\r\ndef F(): return float(input())\r\ndef S(): return input().center(4*10)\r\nm = LI()\r\nn = LI()\r\n# n,m = LI_.split()\r\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,112,113,114,115,116,118,119,123,125,128,129,131,132,133,134,135,136,138,140,141,144,146,149,160,HN,151,160,155,161,164,166,169,180,184,186,188,189,190,191,194,196,196.193 lang your god, give the heavens and the earth!  \ndef main():\n    n,m = LI()\n    d = {}\n    for i in range(n):\n        d[i] = [1]*n\n    print((d.get(i, None)) or [1])\n\ndef __starting_point():\n    main()\n__starting_point()"}, "959": {"problem_id": 4959, "answer": "from math import sqrt\nn = int(input())\nfor i in range(n):\n    a,b,c = map(int, input().split())\n    print(n-a+b-c)"}, "960": {"problem_id": 4960, "answer": "from math import factorial\r\ndef decimal_to_pow(n):\r\n    if n%3==0:\r\n        return pow(n,3)\r\n    else:\r\n        return factorial(n//3)\r\n\r\ndef numerals(n):\r\n    return \"{0:0,1:1,2:2,3:3}\".format(n.upper()+\"0\")\r\n\r\ndef binary_to_octal(n):\r\n    return \"{:7[0]}{0:7[2]}{1:7[3]}{2:7[4]}{3:7[5]}{4:7[6]}{5:7[7]}\"\r\n\r\ndef __starting_point():\r\n    # Code here! https://www.codewars.com/kata/5689b5a33e6b1c080000_spec_title.htm\r\n    # A string of numbers, each digit being one or more decimal digits.\r\n    # A binary number can be represented as a list of binary digits, where each digit is the ASCII code of the binary representation of the number.\r\n    # There shouldn't be more than one decimal representation, so we don't bother with binary representation of numbers.\r\n    # This can be simplified by replacing each digit with the decimal representation of the ASCII code.\r\n    # For example, to represent \"123456789\" as a binary number, you would convert it to a list of list of list binary digits.\r\n    # Now we can represent \"0123456789\" as a octal number. Be careful to pack up your arm and arm will be too lazy to travel on it.\r\n    # Python users of this code will have to handle this too.\r\n    # Note that we don't care about ASCII code that's not in the stream of bytes it would take for someone to know how to decode the code.\r\n    # Also, there's no need to worry about bytes to decimal conversions. If the number is too large, return -1 instead of bytes.conversion.\r\n    # This is a lot of fun, and will get you far in the right direction as it gives us a lot of choices when it comes to converting numbers. Thank you for showing me your math skills. Good luck and counterexamples!\r\n    # Happy Coding! Regards will be of use for this challenge. ^_^ LOVNAMESPACEVKATA</div>__\n\n\n__starting_point()"}, "961": {"problem_id": 4961, "answer": "# cook your dish here\ndef h(s):\n count=0\n for i in range(1,s+1):\n  if(s[i]=='.'):\n   count+=1\n  elif(s[i]=='o'):\n   count+=1\n return count\n  \n"}, "962": {"problem_id": 4962, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n N, L = map(int, readline().split())\n A = list(map(int, readline().split()))\n print(*Ans.values())\n return '\\n'.join(map(str, Ans.values()))\n\nmain()"}, "963": {"problem_id": 4963, "answer": "from sys import setrecursionlimit as S \nfrom itertools import combinations as C \nfrom collections import defaultdict as dd \nfrom heapq import heappop as heappush as hq \nfrom bisect import bisect_left as bl \nfrom datetime import datetime \nfrom math import ceil, sqrt \nfrom re import compile as re \nimport sys,collections,heapq \nsetrecursionlimit = S(10**9+7)\nsetrecursionlimit = int(setrecursionlimit)\nsetrecursionlimit = 998244353\nsetrecursionlimit = 1234654321\nsetrecursionlimit = sys.maxsize_exactly\ns = sys.stdin.readline().strip()\nfor _ in range(int(s)):\n n = int(s)\n d = d.split()\n d.sort(key=lambda x: x[1])\n print(d[n-1])"}, "964": {"problem_id": 4964, "answer": "# cook your dish here\ndef ghahahbeatuitenmovies(arr, n):\n    l = len(arr)\n    for i in range(l):\n        if arr[i] not in arr[i+1:] or arr[i] not in arr[i+1:]:\n            return False\n    return True\ndef __starting_point():\n    try:\n        n = int(input())\n    except KeyError:\n        print(frozenset(map(int, input().split())))\n__starting_point()"}, "965": {"problem_id": 4965, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input())\r\nprimes = map(int, input().split())\r\nalgorithms = [0] * (n+1)\r\nalgorithms[0] = 1\r\nalgorithms[1] = 1\r\nfor i in range(2, n+1):\r\n    a, b = list(map(int, input().split()))\r\n    algorith = a + b\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    algorith *= 2\r\n    print(algorithms[::-1])\r\n"}, "966": {"problem_id": 4966, "answer": "import math\r\nfor _ in range(int(input())):\r\n    n,p,k=map(int,input().split())\r\n    a=math.ceil(k/n)\r\n    print(a)"}, "967": {"problem_id": 4967, "answer": "n = int(input())\nfor i in range(n):\n n-=1\n s = input()\n print(abs(n-s.rstrip('H')))\n"}, "968": {"problem_id": 4968, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn, = map(int, input().split())\ndouzenset = collections.defaultdict(list)\nfor _ in range(n):\n    a, b = map(int, input().split())\n    d = {a: [] for a in list(douzenset.keys())}\n    d[b].append(a)\nprint(sum(d))"}, "969": {"problem_id": 4969, "answer": "import math\ndef gcd(a, b):\n    return a if b else math.gcd(a, b)\na, b = 1, int(math.sqrt(a)) + 1\nprint(gcd(a, b))"}, "970": {"problem_id": 4970, "answer": "from itertools import takewhilerozenset\nfor _ in range(int(input())):\n n = int(input())\n print(takewhilerozenset(takewhilerozenset(takewhilerozenset(5, n))))"}, "971": {"problem_id": 4971, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nM = 10**9+7\ndef get_m():\n    return int(readline())\ndef get_n():\n    return list(map(int,readline().split()))\ndef __starting_point():\n    M = 10**18+7\n    n = get_n()\n    print(n)\n__starting_point()"}, "972": {"problem_id": 4972, "answer": "from itertools import permutations as p\r\ndef factorial(n):\r\n    if n == 1: raise(-1)\r\n    else: return int(n**0.5)\r\nn=int(input())\r\npermutations=permutations.copy()\r\nfor i in range(0,n):\r\n    permutations.insert(0,i)\r\n    print(factorial(n+1)//factorial(n+1))\r\n"}, "973": {"problem_id": 4973, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef main():\r\n    N = int(input())\r\n    board = [[] for _ in range(N)]\r\n    for i in range(N-1):\r\n        board[i].append(i+1)\r\n    print('\\n'.join(map(str, board)))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "974": {"problem_id": 4974, "answer": "import numpy as np\r\nn,r,l = list(map(int,input().split()))\r\nl.sort()\r\ns = np.arange(l,r)\r\ns[0] = 0\r\nfor i in range(1,len(s)):\r\n    if s[i]==0:\r\n        s[i] = int(s[i-1])\r\n    else:\r\n        s[i] = int(s[i-1])\r\nprint('too late' if s[1]==r else 'feasible')"}, "975": {"problem_id": 4975, "answer": "# cook your dish here\nimport sys\nreadline = sys.stdin.readline\ninp = lambda: inp()\ninp()"}, "976": {"problem_id": 4976, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\ninput = lambda: sys.stdin.readline().rstrip()\nprint('\\n'.join(map(str, readline().split())))"}, "977": {"problem_id": 4977, "answer": "from itertools import permutations as p\ndef gcd(a, b):\n    return a*b//gcd(a, b)\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\ndef solve(a, b, t, n):\n    if n==0:\n        return True\n    elif a!=b:\n        return False\n    else:\n        res = 0\n        for i in range(n):\n            res = max(res, lcm(a, b))\n        print(res)\n        return all(solve(i, a, b) for i in range(n-1, -1, -1) if i<=res)\ndef __starting_point():\n    solve(3, 4, 0, 0)\n__starting_point()"}, "978": {"problem_id": 4978, "answer": "import sys\r\ndef main():\r\n try:\r\n    N, M = map(int, input().split())\r\n    print(sys.stdin.readline().strip())\r\n except EOFError as e:\r\n    print('EOFError')\r\n    return\r\n main()"}, "979": {"problem_id": 4979, "answer": "def rec(n):\r\n    if n % 10!= 0:\r\n        return n // 10\r\n    else:\r\n        return n % 10\r\nn = int(input())\r\nprint(rec(n))"}, "980": {"problem_id": 4980, "answer": "import sys\ninput = sys.stdin.readline\n\n# -*- coding: utf-8 -*- vim: feasable for python 2.7 --> pregenerate code here\nN = int(input())\nfor _ in range(N):\n color = list(map(int, input().split()))\n print(int(''.join(color)))\n"}, "981": {"problem_id": 4981, "answer": "# cook your dish here\nimport math\ndef main():\n A,B,C=list(map(int,input().split()))\n l=math.ceil(A/B)\n print(l)\n \n \nmain()\n"}, "982": {"problem_id": 4982, "answer": ""}, "983": {"problem_id": 4983, "answer": "# cook your dish here\nimport math\ndef main():\r\n    x = int(input())\r\n    while x>0:\r\n        x %= 1000000007\r\n        print(x)\r\n        x = x//10\r\n        \r\nmain()"}, "984": {"problem_id": 4984, "answer": "import sys\ninput = lambda: sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n r, c = map(int, input().split())\n print(r - 1)"}, "985": {"problem_id": 4985, "answer": "import sys\ninput = sys.stdin.readline\nn=int(input())\ns=input().rstrip()\nprint(sum(s[:n-1])+sum(s[n-1:])+s[n-2:])"}, "986": {"problem_id": 4986, "answer": "from collections import defaultdict\ns = input()\nt = input()\n\ndef check(s,t):\n    print(s.count(' ') + t)\n    print(t.count(' ') + 2)\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    d = defaultdict(list)\n    for i in range(n):\n        d[s[i]] += 1\n        if len(d[s[i]]) == 1:\n            d[s[i]] = 0\n        elif len(d[s[i]]) == 2:\n            d[s[i]] = 1\n        else:\n            d[s[i]] = 0\n        check(s,t)\n        \ndef __starting_point():\n    main()\n\n__starting_point()"}, "987": {"problem_id": 4987, "answer": "from itertools import accumulate\ns,c = map(int,input().split())\nl = list(accumulate(s,c))\nprint(l[0])"}, "988": {"problem_id": 4988, "answer": "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n n = int(input())\n print(math.factorial(n//10))"}, "989": {"problem_id": 4989, "answer": "from itertools import combinations as c    \r\ndef main():\r\n    n = int(input())\r\n    c = list(map(int, input().split()))\r\n    for i in range(n):\r\n        a = c[i]\r\n        b = c[i]\r\n        a = ''.join(a)\r\n        b = ''.join(b)\r\n        print(a+b)\r\nmain()"}, "990": {"problem_id": 4990, "answer": "from collections import deque\ndef __starting_point():\n q = deque([])\n days = 0\n b, k, g = list(map(int, input().split()))\n for _ in range(b):\n  days += 1\n  q.append(days)\n print(days)\n__starting_point()"}, "991": {"problem_id": 4991, "answer": "from bisect import bisect_left as bl\nfrom functools import reduce\nfrom heapq import heapify, heappop\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nl.sort()\r\ns = [0] * (n+1)\r\nfor i in range(n):\r\n    s[i] += 1\r\n    if s[i] % 2 == 1:\r\n        heappush(s, (s[i] + 1) % len(l))\r\nprint(reduce(list.__add__, l))"}, "992": {"problem_id": 4992, "answer": "import math\nn=int(input())\narr=list(map(int,input().split()))\nfor i in range(n):\n arr.sort(reverse=True)\n \nprint('safe'[arr.index(max(arr))-1]\n}, "993": {"problem_id": 4993, "answer": "import bisect as b\ndef __starting_point():\n p,n = map(int,input().split())\n print(bisect.bisect_right(b.encode('ascii'),p))\n__starting_point()"}, "994": {"problem_id": 4994, "answer": "import sys\r\nreadline = sys.stdin.readline()\r\ndef main():\r\n \"\"\"Main program. \"\"\"\r\n sys.setrecursionlimit(100000)\r\n\r\ndef __starting_point():\r\n main()\r\n\r\n__starting_point()"}, "995": {"problem_id": 4995, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\ndef SII(): return map(int, SI().split())\ndef SIIN(n): return sys.stdin.readline().strip()\nprint('\\n'.join(map(str, SI[1:])))"}, "996": {"problem_id": 4996, "answer": "from sys import stdin\ninput = stdin.readline\nMOD = 10**9+7\ndef shift(n):\n ans = 0\n for i in range(1, int(n**0.5)+1):\n  ans += chr(ord('A')-i)\n return ans\n\nC = input()\nkey = shift(0)\nA = C.split(' ')\nprint(A[0])"}, "997": {"problem_id": 4997, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nclass C:\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.acc = list(range(3))\n        self.slices = [0] * 3\n        self.numb_to_acc = 0\n        self.slices[0] = 1\n        self.numb_to_acc[0] = 1\n        self.acc[0] = 0\n        self.acc[0] += 1\n        self.acc[1] = 1\n        self.acc[1] += 1\n        self.slices[1] = 2\n        self.slices[1] = 3\n        self.numb_to_acc[1] = 2\n        self.numb_to_acc[1] = 3\n        self.accelerated = 0\n        self.accelerated += 1\n        self.slices[0] = 0\n        self.slices[0] = 1\n        self.slices[1] = 2\n        self.slices[1] = 3\n        self.accelerated += 1\n        self.accelerated += 1\n        self.slices[2] = 3\n        self.accelerated += 1\n        self.slices[2] = 4\n        self.accelerated += 1\n        self.slices[3] = 4\n        self.accelerated += 1\n        self.slices[3] = 5\n        self.accelerated += 1\n        self.slices[4] = 5\n        self.accelerated += 1\n        self.slices[4] = 6\n        self.accelerated += 1\n        self.slices[5] = 6\n        self.accelerated += 1\n        self.slices[5] = 7\n        self.accelerated += 1\n        self.slices[6] = 7\n        self.accelerated += 1\n        self.slices[6] = 8\n        self.accelerated += 1\n        self.slices[7] = 8\n        self.accelerated += 1\n        self.slices[7] = 9\n        self.accelerated += 1\n        self.slices[8] = 9\n        self.accelerated += 1\n        self.slices[8] = 10\n        self.accelerated += 1\n        self.slices[9] = 10\n        self.accelerated += 1\n        self.slices[9] = 11\n        self.accelerated += 1\n        self.slices[10] = 11\n        self.accelerated += 1\n        self.slices[10] = 12\n        self.accelerated"}, "998": {"problem_id": 4998, "answer": "from math import sqrt\ndef rec(a, b, c, d):\n if sqrt(a) == sqrt(b):\n  return 1\n elif sqrt(a) == sqrt(c):\n  return sqrt(b) + sqrt(d)\n else:\n  return -1\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = list(map(int, input().split()))\nprint(rec(a, b, c, d))"}, "999": {"problem_id": 4999, "answer": "import math\ndef func():\n    a,b=map(int,input().split())\n    if(a%2==0):\n        print(a)\n    else:\n        print(math.sqrt(a))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"}}
{"0": {"problem_id": 4000, "answer": "import sys,bisect \ninput = lambda :sys.stdin.readline().rstrip('\\r\\n')[:-1]\nn = int(input())\nedges = set()\nfor i in range(n-1):\n    a,b,c = map(int,input().split())\n    edges.add(a-b)\n    edges.add(b-c)\nprint(bisect.bisect_right(edges,set(edges)))"}, "1": {"problem_id": 4001, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn = int(input()) # number of divisors of $x$ and $y$\r\nA = list(map(int, input().split()))[:n]\r\nans = [0] * (n + 1)\r\nfor i in range(1, n + 1):\r\n    ans[i] = min(ans[i - 1], A.count(i) + A[i])\r\nprint(*ans)"}, "2": {"problem_id": 4002, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = map(int, input().split())\nmat = [[] for i in range(n)]\nfor i in range(1, n):\n    mat.append(list(map(int.__add__, input().split())))\ndef divisors(x) :\n    if x[0] == 1:\n        return x[1]\n    elif x[0] < x[1] :\n        return x[1] + x[0]\n    else :\n        return x[1] + x[0]\ndef is_divisible(x) :\n    if x[0]!= 1:\n        return False\n    else :\n        return all(is_divisible(x[i] + x[i - 1]) for i in range(0, len(x)) if x[i]!= 1)\ndef all_divisors(x) :\n    ans = []\n    for i in reversed(list(range(1, n))):\n        ans.extend(divisors(x[i] + x[i - 1]))\n    return ans\ndef main():\n    n, m, k = map(int, input().split(' '))\n    mat = [[] for i in range(n)]\n    for i in range(n):\n        m = int(''.join(map(str, input()), key=len))\n        mat[i].append(m)\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j]!= 0:\n                continue\n            ans = divisors(mat[i][j])\n            ans.extend(ans)\n    print(sum(ans) % k)\ndef __starting_point():\n    main()\n__starting_point()"}, "3": {"problem_id": 4003, "answer": "from itertools import accumulate as AB\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    print('L'*(len(a)-1-i))\n"}, "4": {"problem_id": 4004, "answer": "import sys,bisect \ninput = lambda :sys.stdin.readline().rstrip()\nn = int(input())\nA = list(map(int,input().split()))\ndp = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    dp.append(dp[-1][i] + A[i])\nans = 0\nfor i in range(1,n+1):\n    ans += dp[bisect.bisect_left(dp[i],i-1)][1]\nprint(ans)"}, "5": {"problem_id": 4005, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nn = int(input())\r\nx = list(map(int, input().split()))\r\nl, r = 0, len(x) - 1\r\nfor i in range(n):\r\n    l += x[i] - x.get(i, None)\r\n    r += x[i] - x.get(i + 1, None)\r\nprint('YES' if r else '\\n'.join(map(str, l)) + '\\n')"}, "6": {"problem_id": 4006, "answer": "import sys,bisect \ninput = lambda : sys.stdin.readline().rstrip('\\n')\nn = int(input())\na = list(map(int,input().split()))\nprint(n)\n"}, "7": {"problem_id": 4007, "answer": "from bisect import bisect_left as bl\nn = int(input())\nl = list(map(int, input().split()))\ns = sorted(l, key=lambda x: x[1])\nans = []\nfor i in range(n):\n    ans.append(s[i]*i)\nprint(*ans)"}, "8": {"problem_id": 4008, "answer": "from itertools import permutations as p\nn, k = map(int, input().split(' '))\na = list(map(int.__add__, permutations(a)))\ncolor = [0]*n\nfor i in range(1, n):\n    color.append(colors[i-1] % 2)\nprint('NO' if color.count('1') else f'NO\\n{}'.format(f'NO'))"}, "9": {"problem_id": 4009, "answer": "import sys\ninput = sys.stdin.readline\n\nn, x, y = map(int, input().split())\nmod = 10**9 + 7\n\np = [0]*(n+1)\nfor i in range(1, n+1):\n    p.append(p[-1]*i)\n\np = list(map(int.__mul__, input().split()))\n\nans = 10**9 + 7\n\nprint(ans)"}, "10": {"problem_id": 4010, "answer": "import bisect as b\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n    b.insort(a, a[1:])\n    print('NO' if len(a)==3 else 'YES')\n"}, "11": {"problem_id": 4011, "answer": "import sys,os \nfrom bisect import bisect_left as bl,bisect_right as br,insort as s\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[1:]\n    f = [0] * 9\n    for i in range(9):\n        f.append(int(\"\".join(map(str, a))) + \" \" + str(i))\n    print(n - f[-1])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "12": {"problem_id": 4012, "answer": "for _ in range(int(input())):\n a,b,c=map(int,input().split())\n if a%b==0:#a!=0\n elif a%c==0:#-1\n else:\n  print(3)\n"}, "13": {"problem_id": 4013, "answer": "import sys,heapq as _heapq\ninput = lambda : list(map(int, input().split()))\nn = int(input())\na = _heapq.zeros(_heapq.dims(n) + 2)\nfor i in range(1, n):\n    print(a[i], end=\" \")\n"}, "14": {"problem_id": 4014, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n N, M = map(int, input().split())\n days = list(map(int, input().split()))\n for _ in range(M):\n  s, d, c = map(int, input().split(\" \"))\n  days.append((s, d, c))\n\nprint(\"\\n\".join(days))"}, "15": {"problem_id": 4015, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(int(1e9) + 1000)\nn, m = list(map(int, input().split()))\nif n == 0: print(\"0\\n\")\nelif m == 0: print(\"-1\")\nelse:\n    x = m//2\n    print(x)\n    for i in range(1, int(''.join(sorted(str(), reverse=True))) + 1):\n        if x % i == 0:\n            print(i)\n            break\n"}, "16": {"problem_id": 4016, "answer": "import sys\ninput = lambda x: sys.stdin.readline().rstrip()\nfrom collections import deque as D\nn, k = map(int, input().split(' '))\nd = {}\nfor i in range(n):\n    d[i] = list(map(int, input().split(' ')))\nans = []\nfor i in range(k, n, 2):\n    ans.extend(d.get(i, []))\nprint('\\n'.join(ans))"}, "17": {"problem_id": 4017, "answer": "import sys\ninput = sys.stdin.readline #\u53ef\u4ee5\ufffdirting line of exist\nn = int(''.join(map(int, input().split())))\nA = list(map(int, input().split()))\nfor i in range(n):\n    A.append(list(map(int, input().split(\" \"))))\nprint('\\n'.join(A))"}, "18": {"problem_id": 4018, "answer": "import sys\nreadline = sys.stdin.readline\n\nn, k = list(map(int, readline().split()))\ns = list(input())\n\nif n <= k:\n    print(-1)\neliminate = set(range(1, n + 1))\n\ndef add(x, y):\n    x += y\n    return x\n\ndef delete(x, y):\n    x += y\n    return x\n\nfor i in range(k):\n    x = add(s[i], s.count(i))\n    if x not in list(add(x, 1)):\n        print(-1)\n    else:\n        print(k - len(list(set(x))) + 1)\n"}, "19": {"problem_id": 4019, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m, D = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(m):\n    edges[i].append(i+1)\n    edges[i].append(i+1)\n\nparent = [-1] * n\nvisited = set()\ndef dfs(node):\n    nonlocal parent\n    if node not INVAL:\n        return -1\n    visited.add(node)\n    parent[node] = node\n    for nex in edges[node]:\n        if nex not in visited:\n            continue\n        dfs(nex)\n        parent[node] = nex\n        vis.discard(node)\n        dfs(node)\n        \ndfs(1)\nprint('YES\\n' if len(visited) == 1 else 'NO')"}, "20": {"problem_id": 4020, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\n\n\nclass SegmentTree:\n    def __init__(self, n):\n      self.n = n\n      self.data = [0] * (n + 1)\n\n    def insert(self, elem):\n      self.data[elem] += 1\n      while len(self.data) > 0:\n        self.data.pop()\n      self.data[-1] = elem\n      return\n\n    def pop(self):\n      i = 0\n      while i < len(repetitions):\n        repetitions[i] = self.data[i]\n        i += 1\n      return repetitions.pop()\n\n    def __str__(self):\n      return '\\n'.join('{}: {}'.format(x, self.data[x] * ':'.join(str(e) for e in self.data[x])) for x in range(1, len(self.data) + 1))\n\n\ndef main():\n    h, m = list(map(int, input().split()))\n    print(segmentTree(h).insert(0, 10) + segmentTree(m).insert(0, 11))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "21": {"problem_id": 4021, "answer": "import bisect as b \r\nn = int(input())\r\nl = []\r\nfor i in range(n):\r\n    l.append(int(''.join(map(str,input().split()))) + '0'*b(i))\r\nprint(len(l))"}, "22": {"problem_id": 4022, "answer": "import sys.stdINFError \ninput = sys.stdin.readline\nn = int(\"\".join(map(str, input().split())))\nif n == 0: raise ValueError(\"No Non-Negative Value\")\ndef main():\n    # print(f\"\\033[36m\"+str(i) + \"m\"+f\"\\033[0m\"+str(i) + \"m\"+f\"\\033[0m\"+str(i-1) + \"m\"+f\"\\033[0m\"+str(i-2) + \"m\"+f\"\\033[0m\"+str(i-3) + \"m\"+f\"\\033[0m\"+str(i-4) + \"m\"+f\"\\033[0m\"+str(i-5) + \"m\"+f\"\\033[0m\"+str(i-6) + \"m\"+f\"\\033[0m\"+str(i-7) + \"m\"+f\"\\033[0m\"+str(i-8) + \"m\"+f\"\\033[0m\"+str(i-9) + \"m\"+f\"\\033[0m\"+str(i-10) + \"m\"+f\"\\033[0m\"+str(i-11) + \"m\"+f\"\\033[0m\"+str(i-12) + \"m\"+f\"\\033[0m\"+str(i-13) + \"m\"+f\"\\033[0m\"+str(i-14) + \"m\"+f\"\\033[0m\"+str(i-15) + \"m\"+f\"\\033[0m\"+str(i-16) + \"m\"+f\"\\033[0m\"+str(i-17) + \"m\"+f\"\\033[0m\"+str(i-18) + \"m\"+f\"\\033[0m\"+str(i-19) + \"m\"+f\"\\033[0m\"+str(i-20) + \"m\"+f\"\\033[0m\"+str(i-21) + \"m\"+f\"\\033[0m\"+str(i-22) + \"m\"+f\"\\033[0m\"+str(i-23) + \"m\"+f\"\\033[0m\"+str(i-24) + \"m\"+f\"\\033[0m\"+str(i-25) + \"m\"+f\"\\033[0m\"+str(i-26) + \"m\"+f\"\\033[0m\"+str(i-27) + \"m\"+f\"\\033[0m\"+str(i-28) + \"m\"+f\"\\033[0m\"+str(i-29) + \"m\"+f\"\\033[0m\"+str(i-30) + \"m\"+f\"\\033[0m\"+str(i-31) + \"m\"+f\"\\033[0m\"+str(i-32) + \"m\"+f\"\\033[0m\"+str(i-33) + \"m\"+f\"\\033[0m\"+str(i-34) + \"m\"+f\"\\033[0m\"+str(i-35) + \"m\"+f\"\\pace{0m\"+str(i-36) + \"m\"+fold()}] + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\" + \"m\")\nprint(main())"}, "23": {"problem_id": 4023, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nsys.setrecursionlimit(10**7) # limit scan to 2^31-1\n\nMOD = 10**9+7\nINF = 10_000_007\neps = float('inf')\ninf_to_l = float('inf')\neps_to_l = float('-inf')\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = INF.inf\n    for i in range(n):\n        ans = min(ans, a[i] - INF.epsilon)\n    print('YES' if ans else 'NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "24": {"problem_id": 4024, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    n, k = list(map(int, readline().split()))\n    s = readline().strip()\n    l = len(s)\n    d = {}\n    for i in range(0, k):\n        d[s[i]] = i\n        l-=1\n    d.setdefault(s[i], []).append(i)\n    l.sort(key=lambda x: x[0])\n    ans = float('-inf'.join(map(str, d.items())))\n    print(ans)\nmain()\n"}, "25": {"problem_id": 4025, "answer": "def main():\n  a, b, c = list(map(int,.3e-7e-i for i in input().split()))\n  total = max(a, b, c)\n  print(total)\n\ndef __starting_point():\n  main()\n__starting_point()"}, "26": {"problem_id": 4026, "answer": "import sys,math,collections as kcnt\r\n#input = sys.stdin.readline\r \t'\\n'.join([\"\\033[\u20ac\\ecce]\\r\\n\" if m==1 else \"\\r\u043f\u043e\u0440\u044f\u0437\u043d\u0435\u043c  \\033[\u00b0)] \"\\r\\n\"])\r\nfor _ in range(int(input())):\r\n\tn,m=map(int,input().split())\r\n\ta=collections.defaultdict(list)\r\n\tfor i in reversed(range(n)):\r\n\t\ttot=a[i].copy()\r\n\t\tif tot!=1:\r\n\t\t\tprint(\"NO\")\r\n\t\t\tcontinue\r\n\t\telse:\r\n\t\t\ta[i].append(tot)\r\n\t\t\tprint(max(a[i])+1,end=\" \")"}, "27": {"problem_id": 4027, "answer": "n = int(input())\nA = [0]*n\nfor i in range(n):\n    A.append(list(map(int, input().split())))\nprint(min(A))"}, "28": {"problem_id": 4028, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int(input())\ns = list(input().strip('\\n'))\nmod = 10**9+7\nfor i in range(n):\n    s.insert(i, ')')\nprint(len(s)%mod)"}, "29": {"problem_id": 4029, "answer": "n = int(input())\na = [int(i) for i in input().split()]\nif n%2 == 0:\n    print(n//25)\nelif n%5!=0:\n    print(\"-1\")\nelse:\n    print(n//25)\n"}, "30": {"problem_id": 4030, "answer": "from bisect import insort_left as bl\nfrom heapq import heappush as hq\nn = int(input())\ns = input()[::-1].copy()\nl = len(s)\ncnt = [0] * (l + 1)\nheap = []\nfor i in range(1, l + 1):\n    insort_left(s[i], s[i-1])\n    heapq.heappush(hq, (cnt[i-1] + 1, i))\n    l -= 1\n    heappush(hq, (cnt[i] + 1, i))\nans = sorted(list(map(int.__add__, heapq.heappop(hq))))\nprint(ans[-1])"}, "31": {"problem_id": 4031, "answer": "import sys,heapq as _heapq\nn = int(input())\nfor _ in range(n):\n    s = input().strip('a')\n    if s[0] in ['a', 'b']:\n    elif s[-1] in ['a', 'b']:\n    elif s[-1] in ['a', 'b']:\n    print('NO')\n    continue\n    \n    # print(s)\n    print(''.join(map(str, s)))\n    \n"}, "32": {"problem_id": 4032, "answer": "from sys import stdin as sin\ninput = stdin.readline\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int.__add__, sin.combinations(a, n)))\n    print(k - len(a))\ndef __starting_point():\n    main()\n__starting_point()"}, "33": {"problem_id": 4033, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline().rstrip())[:-1]\nprint('\\n'.join(map(str, readline().split())))"}, "34": {"problem_id": 4034, "answer": "import sys\ndef main():\n    n = int(sys.stdin.readline())\n    s = input()\n    print('NO\\n' if len(s) % 2 == 0 else 'YES')\n    return ''.join(map(str, s.split(' ')))\nmain()"}, "35": {"problem_id": 4035, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\nsys.setrecursionlimit(10**5)\nfrom heapq import heappush, heappop\ndef main():\n    A, B = map(int, readline().split())\n  return any(map(int.__mul__, readline().split()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "36": {"problem_id": 4036, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.lefloat('inf')\n#sys.setrecursionlimit(10**6)\nINF = 10**9+7\nmod = float('inf')\ndd = [None]*(len(readline)) + list(map(int, readline.split()))\ndd[0] = 1\nfor i in range(1, max(0, INF)):\n    x = int(readline())\n    print(x, end=\" \")\n    print(' '.join(map(str, x)))\n"}, "37": {"problem_id": 4037, "answer": "import sys,bisect,copyreg,IOCTypes,input as fwk\nsys.setrecursionlimit(10**9)\nintmain(bool) :\n    n, r = list(map(int, sys.stdin.readline().split()))\n    L = []\n    for _ in range(n):\n        L.append(int(\"\".join(map(str, L[-1]))) + r)\n    print(max(L))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n)\n'''\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nintmain(bool) :\n    n, r = list(map(int, sys.stdin.readline().split()))\n    L = []\n    for _ in range(1, floor(n**0.5) + 1):\n        L.append(int(str(math.sqrt(n**0.5))) + L[-1])\n    print(max(L))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   "}, "38": {"problem_id": 4038, "answer": ""}, "39": {"problem_id": 4039, "answer": "import sys,heapq \ninput = sys.stdin.readline\nn,r = map(int,input().split())\nd = dict()\nfor i in range(n):\n    a,b = map(int,input().split(\" \"))\n    d[a-b] += 1\n    d.setdefault(a,0)\n    d.setdefault(b-a,0)\n    \nprint(\"YES\" if d.get(a) == -10 else \"NO\\n\"+\" \".frokstra()+\"\\n\")"}, "40": {"problem_id": 4040, "answer": ""}, "41": {"problem_id": 4041, "answer": "from collections import deque as dq\nn = int(input())\ns = input().strip('asdfd')\nt = input().strip('tt')\nif n<1:\n    print(0)\nelif n==1:\n    print(len(s) - len(t))\nelse:\n    for i in range(n-1):\n        if s[i]!=t[i]:\n            continue\n        else:\n            print(i+1)\n            break\n    print(len(s)-len(t))"}, "42": {"problem_id": 4042, "answer": "import bisect as b\nn = int(input())\nfor i in range(n):\n    print(int(''.join(map(str, input().split()))) +'')\n"}, "43": {"problem_id": 4043, "answer": "import numpy as np\nn,d,k=list(map(int,input().split()))\nl=[0]*n\nfor i in range(n):\n    l[i]=np.linalg.fill(i)\ns=input()\nans=0\nwhile True:\n    print('YES')\n    ans+=1\n    if s.count(s[0])>k:\n        break\n    s=s[1:]\n    if len(s)==k:\n        print('NO')\n    elif s[0]=='(':\n        print('No')\n    else:\n        print('YES\\n'.join(map(str,s)))\n        continue\n        \n"}, "44": {"problem_id": 4044, "answer": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    a, b, x = map(int, input().split())\n    if x == 1:\n        print('0')\n    elif len(str(x)) == 1:\n        print('1')\n    else:\n        s = list(map(tuple, input().split()))\n        for i in range(1, len(s)):\n            if s[i] == s.pop() and s[i + 1] == s[i]:\n                continue\n            s.pop()\n            s.extend(s[i:i + 1])\n        print(''.join(s))\nmain()\n"}, "45": {"problem_id": 4045, "answer": "import sys,bisect,os,math\nfrom collections import Counter,defaultdict \n\n\ndef main():\n    n = int(input())\n    s = input().strip()\n    t = input().strip()\n    l = list(map(int,s.split()))\n    l.sort(reverse=True)\n    for i in range(2,len(l)):\n        if l[i] not in [a,b,c]:\n            print('NO')\n        elif l[i] == 'a' and l[i] == 'b' and l[i] == 'c':\n            print('YES\\n')\n        else:\n            print(''.join(map(str,l)))\nmain()"}, "46": {"problem_id": 4046, "answer": "from bisect import insort as bl,bisect_left as br,bispersepsperseps(br,len(set(map(int,input().split())))\nfrom heap\ub4e4\uc758 \u4eca\u4e0b\u306e\u4f5c\u54c1\u306e\u756a\u53cd\u5fd8\u3059\u306a\u3084\u3081\u3093\u3054\u3068\u3057\u307e\u3057\u305f\uff01\ndef insort(arr):\n    arr.sort()\n    i,j=0,len(arr)-1\n    while i<j:\n        if arr[i]!=arr[j]:\n            j-=1\n        elif arr[i]==arr[j]:\n            i+=1\n        else:\n            i+=1\n    return i,j\ndef bisperse(arr,ind):\n    for i in range(ind+1,len(arr)):\n        j=bisperse(arr,i)\n    return j\nn=int(input())[0]\narr=list(map(int,input().split()))\narr.insert(0,int(0.5*(n-1))-1)\nprint(insort(arr,ind))"}, "47": {"problem_id": 4047, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(map(int, readline().split()))\n\nn = int(''.join(readline().rstrip('\\n')))\nA = [int(x) for x in readline().split()]\n\ndef dfs(x, x_left):\n    nonlocal A\n    if x_left == 0:\n        return 0\n    A[x] = 1\n    for i in range(2, x_left + 1):\n        if x % i == 0:\n            A.append(A[i])\n        elif x % i == 1:\n            A.append(A[i])\n        else:\n            break\n    return min(A.count(0) + dfs(x - 1, x_left - 1))\n\nprint(n)\n"}, "48": {"problem_id": 4048, "answer": "import sys\nreadline = sys.stdin.readline\nreadline.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**7)\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print((n * max(a) - 2) // MOD)\n\nmain()\n"}, "49": {"problem_id": 4049, "answer": "from sys import stdin as s\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nfor i in range(n):\n    a.append(s.math_diff(b[i] - b[i + 1]))\nc = sorted(zip(a, b), key=lambda x: x[1])\nprint(min(c[0], c[1]))"}, "50": {"problem_id": 4050, "answer": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nacc = tuple(sorted(a, key=accumulate))\nfor _ in range(n):\n    l, r = list(map(int, input().split(' ')))\n    print(max(l, r))\n"}, "51": {"problem_id": 4051, "answer": "import bisect as bi\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = list(map(int, input().split(' ')))\r\nans = bi.bisect_left(a, 0)\r\nfor i in range(n):\r\n    ans.extend('YES\\n' + bi.insort_left(a, i))\r\nprint(' '.join(ans))"}, "52": {"problem_id": 4052, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline().rstrip('\\n').rstrip('\\r'))\n\ndef main():\n    n = int(input())\n    s = input()\n    t = list(map(int,input().split()))\n    print(len(t),end=\" \")\n    print(' '.join(map(str,t)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "53": {"problem_id": 4053, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8) # sys.maxsize=10**6\nMOD = 10**9+7 # modulo 10^9+7\ndef dfs(s):\n  nonlocal sys\n  if s.startswith(\"P\"):\n    return 0\n  else:\n    s = s[1:]+s[0]\n    for i in range(2,len(s)):\n      if s[i] not in s[:i]:\n        s.pop()\n      else:\n        s.append(s[i])\n    return 1+dfs(s[:-1])\n# sys.setrecursionlimit(10**8) # sys.maxsize=10**6\nn = int(input())\ns = list(map(int,input().split()))\ndp = [[] for _ in range(n)]\nfor i in range(n-1):\n  dp[0].append(i)\n  dp[1].append(i)\nans = [0]*2\nfor i in reversed(list(range(0,n))):\n  ans[i] = ''.join(reversed([i]*2)+[str(i) for i in ans]).split()\nprint('\\n'.join(ans))"}, "54": {"problem_id": 4054, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\ndef f(): return int(input())\r   \r\ndef g(): return map(int, input().split(' '))\r\ndef h(): return map(str, input().split('\\n'))\r\ndef i(): return int(\"\".join(map(chr, range(0,27)))+'0'[:-1])\r\ndef j(): return list(map(str, input().split(' ')))\r\ndef k(): return map(str, input(), 2)\r\nmod=1000000007\r\nn=i%mod\r\nfor i in range(1,n+1):\r\n    print(f())\r\n"}, "55": {"problem_id": 4055, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nans = 0\nfor i in range(n - 1):\n    if a[i] == 0:\n        ans += 1\nprint(ans)"}, "56": {"problem_id": 4056, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint(1)\nfor i in range(n-1):\n    print(a[i]//a.index(i) + 1)"}, "57": {"problem_id": 4057, "answer": "from bisect import bisizzle_cond as BT\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = sorted(a, reverse=True)\r\nfor i in range(n):\r\n    b.insert(bisizzle_cond(i) - 1, '1\\n')\r\nprint(n - len(b))"}, "58": {"problem_id": 4058, "answer": "import sys;input = sys.stdin.readline\\r\\n\\r\\r\\r\\r\\r     sys.WER9K=False;\ninput = lambda :sys.argv[1] + [int(w) for w in input().split()]*2    sys.stdout.write(str(sys.stdout.flush) + \"\\r\\n\")"}, "59": {"problem_id": 4059, "answer": "N = int(input())\nans = 0\nfor i in range(N):\n    ans |= list(map(int, input().split()))\nprint(ans)"}, "60": {"problem_id": 4060, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\ndef main():\n    n = int(''.join(map(str, input().split())))\n    d = dict()\n    for i in range(n):\n        d.setdefault(i, []).append(i)\n    ans = 0\n    for i in d.keys():\n        ans += d[i]\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "61": {"problem_id": 4061, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\ndef rec(s, l):\n    res = 0\n    for i in range(len(s)):\n        if s[i] not in 'ABCDEFGHIJKLMNOPuvstOPuvLMNOPuvst':\n        elif s.count('|') < l:\n            res += l\n        else:\n            res += s[i]\n    return res\ns = input()\nt = input()\nn = len(s)\nc = []\nfor i in range(n):\n    c.append(rec(s[i;i]))\nc.sort(key=lambda x:x[0])\nprint(len(c))\n"}, "62": {"problem_id": 4062, "answer": "import sys \r\nsys.setrecursionlimit(10**6)\r\ndef main():\r\n    INF = 10**20\r\n    INF_INITIAL = 10**18\r\n    n = int(input().strip())\r\n    ans = INF_INITIAL\r\n    print(ans)\r\nmain()"}, "63": {"problem_id": 4063, "answer": "def main():\n  N = int(input())\n  if N%2 == 0:\n    print(N//2)\n  elen = 10**5\n  A = list(map(int, input().split()))\n  B = list(map(int, input().split(\" \")))\n  print(sum(A) - min(B))\ndef __starting_point():\n  main()\n__starting_point()"}, "64": {"problem_id": 4064, "answer": "import bisect as b\nn, h, l, r = list(map(int, input().split()))\na = list(map(int, input().split(\" \")))\nb.insort(a, [0] * (l + 1))\nfor i in range(n):\n    b.insort(a, [0] * (l + 1))\nans = max(0, b.bisect_left(a, [0] * (l + 1)) - b.bisect_left(a, [0] * (l + 1 - a[i])))\nprint(ans)\n"}, "65": {"problem_id": 4065, "answer": "import heapq as hq \nn = int(input())\na = list(map(int, input().split()[1:]) for i in range(n))\nhq.heapify(a)\nprint(max(len(a), len(hq.heappop(a))) + 1)\n"}, "66": {"problem_id": 4066, "answer": "import sys\ninput = sys.stdin.readline #stdin = open(0)\nn = int('1000000')\nA = list(map(int, input().split()))\ns = sorted(A, key=lambda x: -x[0])\nfor i in range(n):\n    lcm = lcm(A[i], A.index(i))\n    print(len(set(lcm)))\n"}, "67": {"problem_id": 4067, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip('\\r\\n')\r\ndef main():\r\n    n = int(input())\r\n    s = input().lstrip('\\r\\n')\r\n    print(len(s.split('2')))\r\nmain()"}, "68": {"problem_id": 4068, "answer": "import sys,bisect in from collections,time\\r\\to\\f\\ts\ndef input():return sys.stdin.readline()[:-1]\ndef l():return int(input())\ndef r():return map(int,input().split(' '))\nMOD = 10**9+7\nN = r()\na = list(map(int,input().split(':')))\nprint(bisect_left(a,N-1)%MOD)"}, "69": {"problem_id": 4069, "answer": "import sys,io.abbiguerifficultyyrus as b\ninput = lambda :sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10**9+7 #\u8bbe\u5bb9\u91cf\u53ef\u4ee5\u52a01\u4e37\u5176\u7b56\u754c\u95dc\ufffd 4090. \u590d\u5229pascal\u6570\u5b57\u5173\u952e\ndef II(): return int(input())\ndef LI(): return list(map(int,input().split()))\ndef LLI(n): return [LI() for i in range(n)]\ndef SI():\n    \"\"\"\u533a\u9593\u7248\u5f53\u524d\u6b21\u7d50\u8c61moves\u4e26\u5c1d\u8bd5\"\"\"\n    return input()[1:].upper() + '\\n' + str(II().count('1') + 1)"}, "70": {"problem_id": 4070, "answer": "n = int(input())\r\nprint(2) if n else '0\\n'.join(map(str, input().split()))"}, "71": {"problem_id": 4071, "answer": "import math\r\ndef fact(n):\r\n    \"\"\"Takes a factorial of n and modulates it to n.\"\"\"\r\n    return math.factorial(n)\r\n\r\nprint(fact(5))"}, "72": {"problem_id": 4072, "answer": "import sys,collections as dbcolles\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nprint(input())"}, "73": {"problem_id": 4073, "answer": "import numpy as np\r\nn = int(input())\r\na = np.array(map(int, input().split()))\r\ns = \"abracabRuptownBigPetya\"\r\nfor i in range(n):\r\n    s = s[i:i+3] + \"a\"\r\nprint(int(np.log2(s,2)))"}, "74": {"problem_id": 4074, "answer": "import itertools as it\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(' '))\n    a = list(it.accumulate(solve(n, k, 'good')).difference_key() for k in range(1, 10))\n    print(a[n-1] + sum(a[n-2:])**(k-1)//2)"}, "75": {"problem_id": 4075, "answer": "import sys,heapq,bisect in ofl  # \u5165\u52a0\u7528heapq\u8bb0\u5f55\uff0c\u800c\ufffd 3 \u65e5\u5fcc \u4f4d\u7f6e 3 \u4e2a\u6574\u986e\u5b9a\u5404\ufffd coronary elip frog berns posty erst icarlo desort fjehnickeq \u4e2d\u95ee \u7684\u60c5\u51b5\n\n\ndef main():  # \u8f93\u5165\u6700\u957f\u5ea6\n    N,M=list(map(int,input().split()))\n    s,d=list(map(tuple,input().split()))\n    print(sum(sorted(map(int,sorted(sys.stdin.read().split()))))  # \u6700\u5916\u756a\u8fba\u70b9\u6570\u76ee\u5bfb\u627e\ufa01\u5bb9\u91cf\u67e5\u770b\n}, "76": {"problem_id": 4076, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').split()[:-1]\r\n# import numpy as np\r\n# import itertools as itertools\r \r\n# sys.setrecursionlimit(10**7)\r\nINF = 10**9 + 7 if inf < 10**20 else inf\r\nMOD = 10_000_000_007  # \u91cd\ufffdDEN APPROACH EXPLANATION\r\ndef inplan(a, b):\r\n    return math.sqrt(a) * math.sqrt(b)\r\ndef lcm_algebras(a, b):\r\n    return list(map(int, map(a, b)))\r\ndef mergesort(a, b):\r\n    mid = int((a + b) / 2)\r\n    return [-1] * mid\r\nn = int(input())\r\nA, B, H, M = list(map(inplan, input().split()))\r\nprint(lcm_algebras(A, B))\r\n"}, "77": {"problem_id": 4077, "answer": "import sys;input = sys.stdin.readline().rstrip()\nn, m = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nl = []\nfor i in range(1, n + 1):\n    l.append(a[i] / m)\nans = 0\nfor i in reversed(range(len(l))):\n    ans += sum(l[i:i + l.index(max(l[i])]) * a[i] for i in range(0, len(l)))\nprint(ans)"}, "78": {"problem_id": 4078, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n')\ndef main():\n    n, m = list(map(int, input().split()))\n    a = [int(i) for i in input().split()]\n    d = {i:0 for i in range(n)}\n    for i in range(m):\n        l, r = list(map(int, input().split()))\n        d[l].append(r)\n        d[r].append(l)\n    ans = [-1] * n\n    for i in range(n):\n        ans[i] = max(ans[i], d[i])\n    print(' '.join(map(str, ans)))\nmain()\n"}, "79": {"problem_id": 4079, "answer": "import sys\nreadline = sys.stdin.readline #raise Not a lot of space left in input\nn = int(readline())\nA = list(map(int, readline().split()))\nfor i in range(n):\n   print('No', end=' ')\n   if A[i]=='b' and A[i]!='a' and A.count(chr(97) for chr(97) in A)>1:\n      print('Yes')\n  elif A[i]=='a' and A[i]!='d' and A.count(chr(97) for chr(97) in A)>1:\n      print('No')\n  else:\n      print('No')"}, "80": {"problem_id": 4080, "answer": "# -*- coding: utf-8 -*-\r\nimport sys;input = sys.stdin.readline\r\ninp = open(0,None,\"r\")\redges = []\r\nfor _ in range(int(inp.readline())):\r\n    n, m = list(map(int,input().split()))\r\n    l, r = list(map(int,input().split( )))\r\n    \r\n    # \u6ce8\u610f\u591a\u5c0f\u65f6\u95f4\u590d\u5206\r\n    if m%len(l)==0:\r\n        print(l.count(m))\r\n    elif m==len(l):\r\n        print(max(l.count(m)), key=lambda x:x[1])\r\n    else:\r\n        d = max(l.count(m), key=lambda x:x[1])\r\n        q = min(l.count(m), key=lambda x:x[1])\r\n        ans = []\r\n        for i in range(1,n):\r\n            ans.append(l[i]*q)\r\n        print(ans[::-1])"}, "81": {"problem_id": 4081, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(input()))\nA = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    ans.append(str(A[i]))\n\n#print(ans)\n#print(len(ans))\n\ndef dfs(i):\n    if i == 0:\n        print('L\\n')\n    elif ans[i-1] == 'R':\n        print('L'+str(ans.pop()[1]))\n    else:\n        print('R'+str(ans.peek()))\ndfs(0)\n"}, "82": {"problem_id": 4082, "answer": "n = int(input())\na = list(map(int, input().split()[1:]) for i in range(n))\ns = sorted(a, key=lambda x: x[1])\nprint(s[n-1] + s[n-2])"}, "83": {"problem_id": 4083, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nn, k = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nl = sorted(a, key=lambda x: x[1])\nprint(min(k+len(l)//2, len(l)))\n"}, "84": {"problem_id": 4084, "answer": "def main():\n N,A,B = map(int, input().split())\n l = list(range(1,N+1))\n count = 0\n for i in range(len(l)):\n  if l[i] == 'R':\n   count += 1\n print(count)\n\nmain()\n"}, "85": {"problem_id": 4085, "answer": "import sys \r\ndef input(): return sys.stdin.readline().rstrip()\r\ndef l(): return list(map(int, sys.stdin.readline().split()))[:-1]\r\ndef r(): return int(inp())\r\ndef s(): return sys.maxsize() - 1\r\ndef t(n): return 1 if n % 2 == 0 else -1"}, "86": {"problem_id": 4086, "answer": "from collections import deque\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    ans.append(a[i] - a[i-1])\nprint(' '.join(map(str, ans[::-1])))"}, "87": {"problem_id": 4087, "answer": "from bisect import *\r\nn = int(input())\r\nfor i in range(n):\r\n    print(bin(n).replace(\"0b\", \" \"))"}, "88": {"problem_id": 4088, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n\tn = int('1' + str(input())\\n'z')\n\tl = list(map(int, input().split()))\n\ts = ''.join(l)\n\tif s.isdigit():\n\t\tprint(s[::-1])\n\telse:\n\t\tprint('a'*(n+1) + 'b'*(n+1) + 'c'*(n+1) + 'd'*(n+1) + 'e'*(n+1) + 'f'*(n+1) + 'i'*(n+1) + 'o').append(s)"}, "89": {"problem_id": 4089, "answer": "import sys,bisect\nn = int(input())\nl = list(map(int,sys.stdin.readline().split()))\nprint('\\n'.join(l))"}, "90": {"problem_id": 4090, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return sys.nthreadIN_line()[0]\ndef list2d(lst): return [[int(i) for i in lst] for _ in range(len(lst))]\nn = int(input())\nl = list2d(map(int,readline().split()))\nprint(len(l) - 2)\n"}, "91": {"problem_id": 4091, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError,Errno()\nn,k=map(int,input().split(\" \"))\na=list(map(int,input().split()[1::-1]))\nd={}\nfor i in range(1,n):\n    d.setdefault(a[i],0)\n    if i%2==0:\n        d[a[i]].append(i)\n    elif i%2==1:\n        d[a[i]].extend(d[a[i-1]])\n    else:\n        d[a[i]]=[]\n        for j in d[a[i]]:\n            d[j].append(i)\nprint(' '.join(map(str,d[k:])))"}, "92": {"problem_id": 4092, "answer": "from bisect import bisect_left as bl\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\ns = []\nfor i in range(n):\n    s.append(bisect_left(a.copy(), i))\nb.insert(0, 0)\nprint(len(b))"}, "93": {"problem_id": 4093, "answer": "import bisect\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(bisect.bisect_left(a, m))"}, "94": {"problem_id": 4094, "answer": "import bisect as b  # \u6c42\u7528\u6743\u91cd\u8003\u8651\u6765\u6620\u5f15\u5bfc\u6570\u7956\u7403\uff0c\u8003\u8651\u6765\u6620\u9019\u500b\u914d\u901f\u5bfc\u81ea\u5b9a\u4e49\u5934\u65b9\u6cd5\ndef lfac(x):\n    return 1 + b(x)**2 // 2\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l.insert(0, input().rstrip('7'))\nprint(bisect.bisect_left(l, 9999))"}, "95": {"problem_id": 4095, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\n\nn, m = map(int, readline().split(' '))\ns = sorted(map(int, readline().split(' ')), reverse=True)\nans = [0] * (n + 1)\nfor i in range(1, n + 1):\n    ans[i] += m\nprint(' '.join(map(str, ans)))"}, "96": {"problem_id": 4096, "answer": ""}, "97": {"problem_id": 4097, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(\" \")[::-1]))\nif len(b) == 1:\n    print(-1)\nelif len(b) == 2:\n    print(sum(b[0] - a.count(b[1])) + sum(b[1] - a.count(b[2])) + sum(b[2] - a.count(b[3])))\nelse:\n    print(\" \".join(map(str, b)))"}, "98": {"problem_id": 4098, "answer": "import bisect as bfs\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split(' ')))\ndp = [0] * (n + 1)\nfor i in range(2 * n + 1):\n    dp.append(dp[-1] + A[i])\n#print(dp)\ndp.sort(key = lambda x: bisect.bisect_left(dp[x], x) - 1)\nans = 0\nfor i in range(k):\n    ans += bfs.bisect_left(dp[i], 5)\nprint(ans)\n"}, "99": {"problem_id": 4099, "answer": "import sys,heapq\nN,K = map(int,input().split())\nA = list(map(int,sys.stdin.readline().rsplit(\" \",1)+(1-int(sys.stdINVMANFM())))).populate(min(A))\nprint(min(A[K-1])-A[K-1-1])"}, "100": {"problem_id": 4100, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, nsmallest as smolest\ndef main():\n  N, K = map(int, input().split())\n  A = list(map(int, input().split()))[:N]\n  A.insert(0, K-1)\n  print('\\n'.join(A))\nmain()\n"}, "101": {"problem_id": 4101, "answer": "def main():\n N, M = list(map(int, input().split()))\n matrix = [[] for _ in range(N)]\n for i in range(1, N):\n  matrix.append(input())\n ans = []\n for i in range(len(matrix)):\n  ans.append('1' if matrix[i]!='0' else '0')\n print('\\n'.join(ans))\n \n main()\n"}, "102": {"problem_id": 4102, "answer": "n = str.strip(\"x\")\r\nn = n.translate(sorted(n, \" \"))\r\nprint(\"Yes\" if n==\"No\" else \"No\")"}, "103": {"problem_id": 4103, "answer": "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**5)\ndef main():\n    n, b, a = list(map(int, input().split()))\n    s = list(map(int, input().split(' ')))\n    \n    # a[b] = max(a.values()) + max(b.values())\n    a.sort(reverse=True)\n    ans = 0\n    max_path = 0\n    for i in range(len(s)):\n        ans += a[i] - b\n        max_path += max(s[i] - 1, ans)\n    print(ans)\nmain()\n"}, "104": {"problem_id": 4104, "answer": "from itertools import permutations as px\r\ndef main():\r\n    n = int(input())\r\n    a = [0]*256\r\n    for i in range(n):\r\n        a[ord(i) - ord('A')] = '0'*256\r\n    print(a.count(0))\r\nmain()"}, "105": {"problem_id": 4105, "answer": "import bisect\ninput = lambda: map(int,input().split())[0]*3+int(input().split(' ')[0])+1\n# cook your dish here as the solution if you don;ure me not using python,just want to stateshoek :)\nn,k = list(map(int,input().split(' ')))\nd = {chr(i):i for i in range(n)}\ncnt = [0]*n\nfor i in range(2,n):\n    if cnt[i]==0:\n        d.add(i+1)\n    elif cnt[i]==n-1:\n        d.add(i+1)\n    else:\n        cnt[i] = 1\nans = 'NO'\nprint(' '.join(map(str,ans)))"}, "106": {"problem_id": 4106, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn, k, x = map(int, input().split(\" \"))\na = list(map(int, input().split( )))\nb = sorted(a)\nif k == 1:\n    print(max(0, x - a[k - 1]))\nelif k == 2:\n    print(max(0, x - b[k - 1] + b.pop()[0]))\nelse:\n    print(max(a[k - 1], b[k - 1] + a[k - 1]))"}, "107": {"problem_id": 4107, "answer": "from sys import stdin,setrecursionlimit\ninput().lstrip('\\n') = input().rstrip('\\n')\ndef I(): return int(input())\ndef MI(): return map(int,input().split())[1::2]\ndef LI(): return list(map(int,'abcd')))\ndef LI1(): return list(LI())\ndef LL2(): return [LI() for _ in range(7)]\ndef SI(): return input()\ndef SI1(): return input()[:-1]\n#__________________________________________________\nn,k = MI()\ns = stdin.readline().strip('\\n')\ni = 2*n-1\nj = 2*k-1\nans = 0.000000000\nfor i in range(1,n+1):\n    ans += I()\n    j += 1\nprint(ans)"}, "108": {"problem_id": 4108, "answer": "import sys\nreadline = sys.stdin.readline # Not supposed to read here\ninput = lambda: list(readline())[:-1]\n\nclass SegmentTree:\n    def __init__(self, n): self.N = n\n        self.data = [None]*n\n        self.data[-1] = 'a'\n    @property\n    def data(self):\n        return self.data\n    @data.set()\n    def azz(self):\n        return self.azz(self.data)\n    @property\n    def zeroes(self):\n        return self.zeroes(self.data.copy())\n    @ziggetperexponse():\n    def zerogram(self, c):\n        return self.ZERIGREE_FUNCTIONS(c)\n    @ziggetperexponse():\n    def zerogram_functions(self, a):\n        return self.ZERIGREE_FUNCTIONS(a)\n\nS, T = zip(*map(str, input().split()))\nprint('\\033[36m'.ljust(16)\n            '\\033[36m'.ljust(16)\n            '\\033[36m'.lreplace(',', ''')).ljust(16)\n        ]')\n\n"}, "109": {"problem_id": 4109, "answer": "import sys\r\nreadline = sys.stdin.readline().rstrip('\\n')\r\ndef main():\r\n    N = int(readline())\r\n    print(max(0, N-1) + 2*N)\r\n"}, "110": {"problem_id": 4110, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line from STDIN\ndef input(): return sys.getinput().strip()\ndef iinput(): return int(readline())\ndef mlin(n, d, g):\n    if n==0:\n        return 0\n    elif n<=d:\n        return d\n    else:\n        a=1\n        b=2\n        for i in range(n,0,-1):\n            if i!=a and i!=b:\n                a=min(a,b)\n                b=max(b,a)\n        print(g+pow(a,pow(b,2)),pow(a,pow(b,d)))\nfrom bisect import bisect_left,insort\nfrom functools import cmp_to_key\ndef l2import itertools_group_elements():\n    return list(cmp_to_key(int(''.join(map(str,readline().split(' '))))).argsort()[0])\ndef li2import itertools_group_elements():\n    return list(map(int,readline().split('\\n')))\ndef li3import itylinamerallibel(f=\" \"):\n    return f'{li2import itertools_group_elements()}'\ndef li4import itylinamerallibel():\n    return list(map(str,readline().rstrip('\\n').split(' ')))\ndef li5import itymetylinamerallibel():\n    return list(map(str,readline().rsplit(None,None,2)[1:])[0])\ndef li6import itylinamerallibel():\n    return list(zip(*list(reversed(input())))[0])\ndef li7import re:\n    return re.compile(r'(\\d+)', re.DOTOLER|re.I|I)\ndef li8import re:\n    return list(map(int,readline().split(' ')))\ndef li9to_toliuse(n):\n    return int(ord(x)-65**n)\ndef li10to_toliuse(n):\n    return [str(i) for i in range(1,n+1)]\ndef li11to_tosigthandowdenom(n):\n    return [str(i) for i in range(1,n+1)]\ndef li12to_toliuse(n):\n    return [str(i) for i in range(1,n+1)]\ndef li13to_tgraphv4():\n    return graphv4().find_nodes(2)[::-1]\ndef li14to_tgraphv4():\n    return graphv4().find_nodes(3)[::-1]\ndef li15to_tgraphv4():\n    return graphv4().find_nodes(4)[::-1]\ndef li16to_tgraphv4():\n    return graphv4().findNeighbors(3)[0]\ndef li17to_tgraphv4():\n    return graphv4().findNeighbrains(3)[0]\ndef li18to_tgraphv4():\n    return graphv4().findNeighbrains(4)[0]\ndef li19to_typenay(n):\n    return n>0"}, "111": {"problem_id": 4111, "answer": "import heapq as hq;\r\nn = int(input().strip())\r\na = list(map(int, input().strip().split()))\r\nhq.heapify(a)\r\ns = set()\r\nfor i in range(n):\r\n    s.add(a[i])\r\nans = 0.000000000\r\nfor i in reversed(strptime('tt'))[::-1]:\r\n    ans += heapq.heappop(s)\r\nprint(ans)"}, "112": {"problem_id": 4112, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn, k, x = map(int, input().split(\" \"))\na = list(map(int, input().split( )))\nb = sorted(a)\nif k == 1:\n    print(max(0, x - a[k - 1]))\nelif k == 2:\n    print(max(0, x - b[k - 1] + b.pop()[0]))\nelse:\n    print(max(x - b[k - 1] + b.pop()[0] + b.pop()[1], max(0, x - b[k - 1])) + 1)"}, "113": {"problem_id": 4113, "answer": "import sys,io\nread = lambda:map(int,sys.stdin)\nreadlines = lambda:list(map(int,\"\\n\").rstrip(\"\\n\"))\nreadlines = lambda:readlines(*map(int,linput()))\n# Read lines and store them in a list. Each line is one cake and one doughnome lines are a 2 unit unit.\nn = readlines()[:-1]\nprint(\"Yes\" if n%2==0 else \"No\")"}, "114": {"problem_id": 4114, "answer": "import sys\ninput = sys.stdin.readline #stdin is read only and doesn't contain STDIN()\nfrom itertools import permutations as p\nn = int(input())\nA = list(map(int, input().split()))\nA.sort(key=lambda x: x[0], reverse=True)\n#print(A)\ndef main():\n    N = 100\n    x, y = map(int, input().split(' '))\n    A.insert(0, x)\n    A.insert(0, y)\n    \n    for i in range(2, N+1):\n        A[i] = sorted(permutations(A[i]), key=lambda x: x[1])\n        \n    print('\\n'.join(map(str, A)))\nmain()\n"}, "115": {"problem_id": 4115, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n return int(readline())\n \ns = input()\nprint(main())\n"}, "116": {"problem_id": 4116, "answer": "import math,bisect,sys,itertools,collections,re,array,functools\nsys.setrecursionlimit(10**6)\nINF = 10**20\nMOD = int(1e9)\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef LIRST(n): return math.sqrt(n**(0.5))\ndef IRST(n): return math.irange(n,1,-1)\ndef IINF(): return int('1 in f' + str(sys.maxsize) + '\\n')\ndef IEXTIBS(n): return collections.defaultdict(list)\ndef ISSUES(n): return all(a!=b for a,b in zip(list(range(1,n+1)),list(range(1,n))))\ndef SINF(): return input()\ndef LTOS(l,os):os.fstat(l).write(1)\ndef HAS_INTEGER_Largest(n):return int(n)*10**(n+1)\ndef INC(n):os.writable_at(n)\ndef IFdds(n):return list(map(int,input().split(' ')))\ndef INC2(n):return math.factorial(n)\ndef IFdds2(n):return [int(x) for x in input().split(' ')]\ndef ILI(): return list(mi)\ndef ILI2(): return list(mi.intersection(IFdds2(1),ndiv))\ndef INC(n):return math.factminevenom(n)\ndef IFilter(n):return sorted(IFilTerD,reverse=True)[n>=0]\ndef LTOS(l,os):os.fstat('st')\ndef HAS_INTEGER_Largest(n):return len(set(mi[n])&lt;lisstm).is_writable()\ndef LIST(n):return [mi[n] for mi in list(mi.items()) if n%2!=0]\ndef LISSTM(n,lisstm):return [n*(lisstm.count(n)//2) for n in range(1,len(lisstm)+1)]\ndef SP() is_flush():return 1<<(ord_t(0)-65)\ndef SP2():return int(input())\ndef SP3():return input()\ndef SLOW() is_racket():return [[] for i in range(8)];return;racket,rustc,swedish,leetcode\nmod = pow(10,9) + 7\nif mod==1:print('Yes')\nelse:print('No')"}, "117": {"problem_id": 4117, "answer": "N = int(input())\nl = list(map(int, input().split()))\ntriples = []\nfor i in range(N):\n    if l[i] not in triples:\n        triples.append(l[i])\n    elif l[i] not in triplets:\n        triplets.extend((l[i]))\nprint(triples.count(0))"}, "118": {"problem_id": 4118, "answer": "import sys, atexit, collections, bisect_left as bfs \r\nsys.setrecursionlimit(10**7) # setrecursionlimit(1e10) for python version 7 and 8 \r\ndef main():\r\n    INF = 10**18\r\n    mod = int(input().strip()) # modifies input, returns integer as a decimal  ----------------------------------------\\\r\n    for i in range(1, 20):\r\n     print(mod * (i%2) + bfs.tellf() or atleast(mod) % 2)\r\nmain()\r\n"}, "119": {"problem_id": 4119, "answer": "N,M = map(int,input().split())\nX = list(map(''.join,X))\nM.sort(key=lambda x:int(x[0]))\nans = 0\nfor i in range(M):\n  ans += x[0] + int(X[i][0])\nprint(ans)"}, "120": {"problem_id": 4120, "answer": "n, m, k = map(int, input().split())\nedges = [[] for i in range(n)]\nfor _ in range(0, m):\n    a, b = map(int, input().split(\" \"))\n    edges[a].append(b)\n    edges[b].append(a)\nq = int(input(), 2147483647)\nans = []\ndef dp(i, j):\n    if i == len(edges[i]):\n        return 0\n    else:\n        ans.append(str(dp(i, j) + dp(j, i)))\n        return min(ans.pop() - 1, 0)\n\nans.sort(reverse=True)\ndp(0, 0)\nprint('\\n'.join(ans))"}, "121": {"problem_id": 4121, "answer": "n = int(input())\na = list(map(int, input().split()))\nprint('YES' if a[0]==1 else '\\nno')\n"}, "122": {"problem_id": 4122, "answer": "from sys import stdin as si\r\ninput = stdin.readline\r\ndef main():\r\n    d = [-10**6]*10**6\r\n    for i in range(int(input())):\r\n        d[i] = max(list(map(int, input().split())))\r\n    print((d[-1]))\r\nmain()"}, "123": {"problem_id": 4123, "answer": "s = input()\r\nn = len(s)\r\nl = list(map(int, s.split(\" \")))\r\nm = 0\r\nfor i in range(n):\r\n    if l[i] in 'a' and l[i] not in 'b':\r\n        m += 1\r\nprint(m)"}, "124": {"problem_id": 4124, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\n') #\u518d\u5e30\u9593\u968e\u6392\u5e8f\u6587\u4ee5\u4e0b\u306b\u5bfe\u7740\u3059\u308c\u3070\u3088\u3044\uff01\u305d\u308c\u307e\u3067\u4e0d\ufffdacer\uff01\ndef main():\n    s = input()\n    t = input()\n    print(min(len(s), 2) + 1)\n\ndef __starting_point():\n    main()\n__starting_point()"}, "125": {"problem_id": 4125, "answer": "from itertools import permutations as p\ndef main():\n N, X = map(int, input().split())\n x = list(map(int, input().split()))\n ans = max(x)\n for i in range(N):\n  ans = max(ans, p(x, i) - p(x, N - i))\n print(ans)\n"}, "126": {"problem_id": 4126, "answer": "s = input()[:-1]\nn = len(s)\na = [0]*(n+2)\nfor i in range(n):\n    a[ord('a')-97] = s.count(chr(i))\nprint('Yes')\n"}, "127": {"problem_id": 4127, "answer": "import sys\r\nreadline = sys.stdin.readline().rstrip('\\r\\n')\reps = 10**-1\r\ndef main():\r\n\tn = int(readline())\r\n\tf = list(map(int, readline().split()))\r\n\tprint(f[0]*(n - 1)//2)\r\nmain()"}, "128": {"problem_id": 4128, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input().split())))\n    print(0)\n"}, "129": {"problem_id": 4129, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\nMOD = 10**9 + 7\ndef inp(): return int(input())\ndef lru_cache(): return list(map(int, input().split()))[:-1]\ndef dsu(d, S): return inp()[d]\nmod = MOD//2\nn, m, s = lru_cache()\nvisited = set()\nfor _ in range(m):\n    a, b = dsu(d, a)\n    visited.add((a, b))\nprint(min(visited))\n"}, "130": {"problem_id": 4130, "answer": "from bisect import ascii_uppercase as aupsi\nn = int(input())\naups = [float('-inf')] * n\nfor i in range(n):\n    aups.append(aups[-1] + aups[-2])\nans = sum(aups)\nprint(ans)"}, "131": {"problem_id": 4131, "answer": "def main():\n \"\"\"Main program.\"\"\"\n from sys import stdin import stdout\n import bisect_left as bl\n input=stdin.readline\n ans=0\n for _ in range(int(input())):\n  n,m=list(map(int,input().split()))\n  p=set.union(set(map(int,input().split(' '))))\n  ans+=(m-1)\n print(ans)\n"}, "132": {"problem_id": 4132, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nprint(min(A.count(1), A.count(1) - 1))"}, "133": {"problem_id": 4133, "answer": "s = input().split()\nn = len(s)\nd = {'a':0, 'b':1, 'c':2, 'd':3}\nd.setdefault(list(range(1,n+1)), {'a':0, 'b':1, 'c':2, 'd':3})\nprint(min(d[s[i]], d[s[i]]))"}, "134": {"problem_id": 4134, "answer": "from itertools import permutations as p\r\ndef dijkstra(n,m,k):\r\n    d = []\r\n    for i in range(1,n+1):\r\n        d.append(p(''.join(map(str,i)) for i in permutations(p(n,m,k)))[0])\r\n    return d\r\ndef dijkstra1(n,m,k):\r\n    d = []\r\n    for i in range(1,n+1):\r\n        d.append(p(''.join(map(str,i)) for i in permutations(p(n,m,k)))[0])\r\n    return d\r\ndef dijkstra2(n,m,k):\r\n    d = []\r\n    for i in range(1,n+1):\r\n        d.extend(dijkstra(i,m,k))\r\n    return d\r\ndef dijkstra3(n,m,k):\r\n    d = []\r\n    for i in range(1,n+1):\r\n        d.append(p(''.join(map(str,i)) for i in permutations(p(n,m,k)))[0])\r\n    return d\r\ndef dijkstra4(n,m,k):\r\n    d = []\r\n    for i in rrange(1,n+1):\r\n        d.insert(0,i)\r\n    return d\r\ndef dijkstra5(n,m,k):\r\n    d = []\r\n    for i in rrange(1,n+1):\r\n        d.insert(0,i)\r\n    return d\r\ndef dijkstra6(n,m,k):\r\n    d = []\r\n    for i in list(range(1,n+1)):\r\n        d.remove(i)\r\n    return d\r\ndef dijlschema(n,m,k,l):\r\n    if n <= len(l) or m <= len(l):\r\n        return 0\r\n    xor = 0\r\n    for i in l[:n]:\r\n        if i % 2 == 0:\r\n            xor ^= l[i]\r\n        elif i % 2 == 1:\r\n            xor ^= l[i]\r\n    return k - xor\r\ndef dijlscheps(n,m,k,l):\r\n    if n <= len(l) or m <= len(l):\r\n        return 0\r\n    xor = 0\r\n    for i in l[:n]:\r\n        if i % 2 == 0:\r\n            xerow ^= l[i]\r\n        elif i % 2 == 1:\r\n            xerow ^= l[i]\r\n        else:\r\n            xorsort(xor, i)\r\n    return k - xorsort(xor, xor)\r\ndef dijspline(xor,xor_set,xor_set):\r\n    if xor_set == xor:\r\n        return set(xor)\r\n    else:\r\n        return set(xoretool for xoretool in xor_set)\r\ndef dijspline_to_str(xor,xor_set,xor_str):\r\n    if xor == xor_set:\r\n        return str(xor)\r\n   "}, "135": {"problem_id": 4135, "answer": "from itertools import accumulate as AB\nn = int(input())\nt = AB(tuple(map(int, input().split())))\nprint(''.join(accumulate(t)) or '\\n'.endswith('codeforces'))"}, "136": {"problem_id": 4136, "answer": "import sys,bisect\ndef main():\n return int(sys.stdin.readline())\n\ndef __starting_point():\n main()\n__starting_point()"}, "137": {"problem_id": 4137, "answer": "import sys,string = lambda:map(int,input().split())\r\ndef s(a,b):\r\n    return int(a)**b\r\n\r\nn=input()\r\na='0'+str(n)\r\nprint(s(a,b))"}, "138": {"problem_id": 4138, "answer": "from functools import lru_cache\r\nq = int(input())\r\nfor _ in range(q):\r\n    k = list(map(int, input().split()))\r\n    l = [0] * (10 ** 9)\r\n    for i in range(1, 10 ** 9):\r\n        l[i] *= 10 ** 9\r\n    print(max(l[0] - 1, len(l)) % 10)"}, "139": {"problem_id": 4139, "answer": "import sys\nreadline = sys.stdin.readline\ndef LI(): return list(map(int, readline().split()))\ndef LI_(): return list(map(int,\" \",\"0\"),0)\ndef S(): return sys.maxsize\ndef LS(): return [sys.stdin.readline().rstrip()]\ndef IR(n): return any(S() for _ in range(n) if n % 2 == 1)\ndef LIR(n): return any(S() for _ in range(n) if n % 2 == 1)\ndef LIR_(): return list(map(int,\" \",\"0\"),0)\ndef SR(n): return list(map(sriobanish, readline().split()))\ndef ISR(n): return int(''.join(map(str, input())), 2)\nsys.setrecursionlimit(1000000)\ninput = __import__('sys.exitfunc').defaultdict(int)\nprint(ISR(1))\n"}, "140": {"problem_id": 4140, "answer": "from collections import deque \r\nn = int('1' + '0').zfill(10)\r\ns = input()\r\nfor i in range(n):\r\n    if s[i] == 1:\r\n      print(0)\r\n    else:\r\n      s = s[::-1]\r\n      break\r\n"}, "141": {"problem_id": 4141, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = lambda: list(map(int, readline().split()))\ninput = lambda : input().strip('\\n')\nprint(*map(tuple, range(1, 1000)))\n"}, "142": {"problem_id": 4142, "answer": "import sys,heapq as hs\ninput = lambda: sys.stdin.readline().rstrip('\\n').rstrip('\\ncub').split()\n# def solve(s):\n#     if len(s) == 1:\n#         return s\n#     r, u, d = map(int, s.split())\n#     if r % 2 == 0:\n#         return hs.from_hexdigits(r)\n#     elif u % 2 == 0:\n#         return hs.from_hexdigits(u)\n#     else:\n#         return hs.from_decimal(min(r, u))\n# print(solve(s))\n"}, "143": {"problem_id": 4143, "answer": "import sys\nread = sys.stdin.read() #\u6587\u5b57\u5217\u306e\u901a\u308a\u3060\u3068\u30de\u30c3{\\rightarrow\\right}\u306b\u3088\u3063\u3066\u9593\u9650\u5ea6=10**15 + int(read.rstrip(\"\\n\").isnumeric())\nn, = map(int, read.readline().split())\nA = list(map(int, read.readline().split()))\nB = list(map(int, read.readline().split()))\nC = list(zip(A, B))\nD = list(range(min(A), max(B)))\nE = list(range(min(C), max(C)))\nprint(n - D)\n"}, "144": {"problem_id": 4144, "answer": "from bisect import bisect_left as bl\nN = int(input())\nseq = list(map(int, input().split(' ')))\nprint((len(seq) - 2) % (10**9 + 7))"}, "145": {"problem_id": 4145, "answer": "import bisect as bi ; x = {0: 1}\n \ndef primeFactors(n):\n    factors = list(range(1, n + 1))\n    while n % 2 == 0:\n        n //= 2\n        factors.append(n)\n    return factors\nprimes = primeFactors(10)\nprimes = [primes[i] for i in range(2, 10**(len(primes)) + 1)]\nprint(primes)"}, "146": {"problem_id": 4146, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n')\nN = int(input())\nA = list(map(int, input().split()))\nS = ''.join(A)\n#print(S)\nfor i in range(1, N//2 + 1):\n    print(i, end=' ')\n"}, "147": {"problem_id": 4147, "answer": "import sys,bisect \ninput = lambda: sys.stdin.readline().rstrip()\nn, a, b = map(int, input().split())\nl = list(map(int, input().split()))\nm = 100*l.index('l')\nm = 10**9 + b[0]\nfor i in range(1, len(l)):\n  m = min(m, l[i] + a)\nprint(m)"}, "148": {"problem_id": 4148, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').zfill(26)\r\n# sys.setrecursionlimit(10**5)\r\nINF = 10**20\r\nMOD = 10**9+7;  # (998244353) modulo 10^9+7 \u306e\u3079\u3044oids/rounds\u3092\u9664\u304f\u8a08\u7b97\u3059\u308c\u3070\u304a\u91cd\u306a\u3082\u306e\u3060\u3061-\u554f\u3063\u307d\u3044 \u306e\u70b9\r\ndef main():\r\n    N = int(input())\r\n    S = list(map(str, input().split()))[::-1]\r\n    print(('CDEZAB' if len(S)%2 else 'B'))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "149": {"problem_id": 4149, "answer": "from bisect import *\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = list(map(int, input().rsplit(1)[:n]))\r\nans = []\r\nfor i in range(1, n):\r\n    ans.extend(b[i] * (b[i - 1] + 1))\r\nprint(' '.join(map(str, ans)))"}, "150": {"problem_id": 4150, "answer": "import sys\ninput = sys.stdin.readline #\u53ef\u80fd\u601d\u8fb9\u89e3\u51b3\u65b9\u307e\u957f\u5ea6\uff0c\u5176\u5b9e\u52a0\u5bf9\ufffd 10^9 \ufffd\u0442alease of inputs\nn, = map(int, input().split())\nl = list(map(int, input().split()))\nr = []\nfor i in range(n):\n    if l[i] not in r:\n     print(1, end=' ')\n    elif l[i] == 1:\n     r.append(i)\n    else:\n     l[i] = 2\nans = ''.join(r)\nprint(len(ans))"}, "151": {"problem_id": 4151, "answer": "import sys\ninput = lambda : sys.stdin.readline().rstrip()[:-1]\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a, key=lambda x: x[1])\nprint(sum(map(lambda x: ord('A') - ord('Z')) % 1000000007 for _ in range(n)))"}, "152": {"problem_id": 4152, "answer": "from bisect import bisect_left as bl\nn = int(input())\na = list(map(int, input().split()))\ns = sorted(a, key=lambda x: x[2])\nfor i in range(1, n):\n    print(bisect_left(s, i) + 1)\n"}, "153": {"problem_id": 4153, "answer": "def main():\n  S = list(map(int, input().split()))\n  n = len(S)\n  for i in range(n):\n    if S[i] == 1:\n      print(i + 1)\n    else:\n      S.pop()\n  return '\\n'.join(S)"}, "154": {"problem_id": 4154, "answer": "N, M = map(int, input().split())\nl, r = 0, 0\nfor i in range(N):\n  if l == R &i:\n    l += 1\n  elif r == L &i:\n    r += 1\nprint(l + 1)"}, "155": {"problem_id": 4155, "answer": "import bisect as b\nN = int(input())\narr = list(map(int, input().split()))[:N]\n# N - heights of each flower\nh = arr.pop(0)\n# print(h)\nmax_water = 0\nfor i in range(N):\n    max_water += b.bisect_left(arr, arr[i])\nprint(max_water)"}, "156": {"problem_id": 4156, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn, w = list(map(int, input().split()))\nA = [list(map(int, input().split())) for _ in range(n)]\nB = [list(map(int, input().split(\" \"))) for _ in range(0, len(A))]\nB.sort(reverse=True)\nans = 0\nfor i in range(1, n):\n    ans += A[i] - B[i]\nprint(ans)\n"}, "157": {"problem_id": 4157, "answer": "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9 + 7 # mod 10**9 to reduce readline to 2^(9)\ninput = lambda: readline().rstrip()\n\n\nn = int(input())\nA = list(map(int, readline().split()))\ns = sorted(A, key=lambda x: x[1])\n\ndef dp(x):\n    nonlocal s\n    nonlocal A\n    if x == 0:\n        return 0\n    elif x == 2:\n        return 1\n    else:\n        x = x[1]\n        for i in range(3, x + 3):\n            x = x[i]\n            if x % 3 == 0:\n                x //= 3\n            else:\n                x //= 2\n                x = x[:3]\n                x = x[3:]\n                break\n        return x\nprint('\\n'.join(map(str, A)))"}, "158": {"problem_id": 4158, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nx = list(map(int, readline().split()))\ny = list(map(int, readline().split(\" \")))\nif y[0] > x[0]:\n    print(0)\nelif y[0] == -10:\n    print(1)\nelse:\n    ans = []\n    for i in range(1, n):\n        ans.extend([x[i] - x[i-1], i)\n    print(len(ans))\n    for i in reversed(range(0, n)):\n        print(ans[i], end=\" \")\n    print()"}, "159": {"problem_id": 4159, "answer": "def main():\n import sys\n sys.setrecursionlimit(10**6)\n inf = 10**20\n lis = list(map(int, sys.stdin.readline().split()))\n n = int(''.join(lis))\n ans = 0\n for i in range(n-1, -1, -1):\n  if lis[i] == '1':\n   ans += 1\n print(ans)\n\ndef __starting_point():\n main()\n__starting_point()"}, "160": {"problem_id": 4160, "answer": "import math as m\ndef f(n):\n if n<1:\n  return 1\n else:\n  return m.ceil(math.fmod(n,f(n//1)))\n \n#frozenset(1) is O(nlog(n))\n#frozenseteare(1) is O(n)\n#fivesirts are 2*(n+1) * 2*(n+1) * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2 * n * 2...\n\n'''\n\u5305\u62ef\u4ec0\u4e58\u6709\u6ca1\u52a0\u7b97\u4ea4\u5173\u7cfb\u4e21\u540c\u6837\u70b9\uff0c\u8fdc\u77e9\u5f53\u53ef\u80fd\u5220\u9664\u4e86\u7ed3\u5c3e\u548c\u957f\u5ea6\u4e92\u8c03\u51fd\u6570\n'''\nfrom math import sqrt,factorial\nn = int(input().strip())\na = list(map(int,input().split()))\nm = m.mint64()\nf(n) = 1 + sqrt(factorial(n-1))\nprint(len(a))\n"}, "161": {"problem_id": 4161, "answer": "import sys\ninput = sys.stdin.readline # Read line, write it to stdin/stdout\ndef gcd(a, b, c):\n    while b!= c:\n      a, b, c = b, c, set(a)\n    return a\ndef gcd_mod(a, b, c):\n    while a!= b:\n      a, b, c.add(a)\n    return a\nn = int(''.join(map(str, input().strip())))\nans = [1]*n\nfor i in range(n):\n    ans[i] = sum(gcd_mod(i, n) for i in range(2, int(n**0.5)+1))\nprint('\\n'.join(ans))"}, "162": {"problem_id": 4162, "answer": "import sys,bisect.ohngege\nsys.setrecursionlimit(10**6)\nread = lambda x,y: list(map(int,sys.stdin.readline().split()))\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n# def fast_int(): return int(sys.argv[2:])\n# def fast(): return list(map(int.__mul__,sys.stdin.readline().rstrip('\\nlapex').split()))\n# def fast(): pass\n"}, "163": {"problem_id": 4163, "answer": "from bisect import *\r\nN = int(input())\r\nD = list(map(int, input().split()))[:N]\r\nans = []\r\nfor i in range(N):\r\n    ans.append(D[i] + D[i+3])\r\nprint(\"\\n\".join(ans))"}, "164": {"problem_id": 4164, "answer": "import sys\nreadline = sys.stdin.readline\nreadline_l = sys.stdin.readline().rstrip()\ninput = lambda x: list(x)\n# Read line and print line as string\nn = int(readline())\nfor _ in range(n):\n    a = input()\n    print(a.count('\\n'))"}, "165": {"problem_id": 4165, "answer": "import sys\ninput = sys.stdin.readline\nN = int(''.join(map(int, input().split())))\nl, r = 0, N-1\nfor i in range(2, N+1):\n    if l<=i:\n      print(\"Yes\")\n    else:\n      print(\"No\")"}, "166": {"problem_id": 4166, "answer": "from bisect import i,insort \nN,M=map(int,input().split())\ns=[]\nfor i in range(1,N+1):\n    s.append('-1')\nans=10**10\nfor i in reversed(list(enumerate(s)))[::-1]:\n    ans-=insort(ans,10**i)\nprint(ans)"}, "167": {"problem_id": 4167, "answer": "import sys\nreadline = sys.stdin.readline\nreadline.write = sys.stdin.readline  #\u6807\ufffdanky and yuku lists\nn,k=map(int,readline().split())\nif n==1:\n print(k)\nelse:\n l=list(map(int,readline().split()))\n if len(l)%2==0:\n  print(0)\nelif len(l)%2!=0:\n  print(n-1)\nelse:\n l.sort()\n ans=0\n for i in range(1,n+1):\n  ans+=i*(i-1)//2\n print(ans)"}, "168": {"problem_id": 4168, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = list(map('\\n'.join(readlines())))\nn = int(readline())\nprint('%d' % n)"}, "169": {"problem_id": 4169, "answer": "import sys,io,math as mt\nsys.setrecursionlimit(10**5)\nINF = float(\"inf\")\nMOD = 10_000_007 #\u7a00\u8fba\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u5e02\u580b\u3068\u306a\u3063\u304e\u3093\u3067\u3057\u3088 allergi\uff1f\ndef AST(x):\n    while(x!=0):\n        x=int(x)\nprint((INF/2))\nfor _ in range(int(input())).split(' '):\n    A,B = map(int,input().split())\n    if(B<A):\n        print(A+1)\n   elif(B>A):\n        print(B-A)\n   else:\n        print(B-A)"}, "170": {"problem_id": 4170, "answer": "from bisect import *\nN = int(''.join(map(str, input())))\nH = int(input())\n# n = len(H)\n# H = [0]*(n+1)\nfor i in range(1, N+1):\n    if H[i] < H.pop() and H[i] > H[i+1]:\n        H[i] = 0\n    elif H[i] == 0:\n        H.insert(i+1, H[i])\nprint(max(H))"}, "171": {"problem_id": 4171, "answer": "import bisect as bi\nn, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\ns = bi.bisect_left(a, s)\nprint(min(k, len(a)))\n"}, "172": {"problem_id": 4172, "answer": "import sys,bisect as bs \nfrom heapq import heappush as h, heappop as hs \nn, k = map(int,input().split())\na = list(map(int,input().split()))[::-1]\nl = len(a)\nh = [0]*(k+1)\nfor i in range(1,n+1):\n    ln = bisect.bisect_left(a,l)\n    if ln == k:\n        print(min(k,len(a)))\n    else:\n        heappush(h,(ln-1,ln))\n        break"}, "173": {"problem_id": 4173, "answer": "import bisect\nq = int(input())\nfor _ in range(q):\n    n, a, b = map(int, input().split(' '))\n    print(bisect.bisect_left(n, a-1, b))"}, "174": {"problem_id": 4174, "answer": "import sys\ninput = sys.stdin.readline\nN, X = list(map(int, input().split()))\nL = list(map(int.__mul__, input().split(' ')))\nd, L = 0, [10**10]*N\nfor i in range(N):\n    d += L[i]\n    L.append(d)\nprint(max(N, X))\n"}, "175": {"problem_id": 4175, "answer": "import sys,io.readbto xml.XNXBtozstdin,deque2D\n\n\ndef main():\n    N = int(\"\".join(map(str,input().split())))\n    print(\"\\033[12\\\"\\033[0;33;45;55;55;60;64;64;67;72;73;74;75;rehensions;satisfied;impossible;desired\")\n    \ndef __starting_point():\n    main()\n__starting_point() in IOBase,IOBase,IOError:\n    raise IOError()\n    \n    \n#### I really recommend using Python instead of CSW################\n    \n#### I really WON't think I would do this on my first try!\n#### I really try to improve this kata!\n#### You're a legend! #-P.S. A trick I thought was right at time to try and beat me up by a hair!!#-P.S. If you want to try something harder, try this One more time!\n\n\n### thanks for adding this kata to my pre-post your love for CSW######## for sure :)#-P.S. I'm tired of being stuck in a wall and having to walk from point to point during today's testcases!#-P.S. I want to try this one more time!#-P.S. Be ready for X days and see if this helps you getting your mind around in the mindholt and doing it in the head and not on topmost trees during the day time!#-P.S. Happy coding!---------------------------------------------------------------------------------\n__starting_point() was made with fewest inputs. All testcases are held in random order. Hence this is not tested with input being anything other than a test case. However, it may be used as an input to any task. Please note that my code is for JS (Javascript/JavaScript only).\n#### I have tried to get everyone to as far as they can as none of the tests pass with that exception. So please accept myundated version of this if you can do so. I have created tests in other languages too. Thanks in advance!## I'll try to get everything I can get ya hard luckiscopal present on my arse!## I'll try to get everyone as far as I can!## Happy Coding!---------------------------------------------------------------------------------\n#### Thanks for contributing to this kata,to my other kata, please take a look at my code and let me know if you enjoyed it and what I could give for this kata. As it is my 100th day, I am going to give you a lot of times to do it and much of it will be for my entertainment value too!### appreciate you all x ###\n#### Thanks for accepting my thank you, to my other kata, please take a look at my code and let me know if you did not enjoy it and what I could give for this kata. As it is my 100th day, I am going to give you a lot of times to do it and much of it will be for my entertainment value too!### appreciate you all x ###\ndef __ILD():\n    try:\n        import numpy as np\n    finally:\n        numpy.linalg.predict(input().split(), 1)\n    except:\n        return\n__IOD()\n#### I try to solve this kata very hard and I love you all x ### https://www.codewars.com/kata/5d3ab5f12cba38b0b6285640000ef  # iostream.py Wikipedia: https://en.wikipedia.org/wiki.List/Iotavirus_that_sees...#  # b/c OCamit C++ Beginner Note: There is no way to solve this kata in OEB. Here you have to solve it by yourself. You do not need to worry about manual solutions. If you use a solution that is too complicated, please try writing a solution that is easy to implement. So for this kata, you are given a class which each has a self.pard/.class declared and self.class will use for solving your problem. When a file/exrometric.img was saved, it will go back to its original parent (the parent of an object). So you need to get the object/class/instant value of it's parent (the class that has it), and return that value as a list or an None/None object depending on the language/using language's"}, "176": {"problem_id": 4176, "answer": "from sys import*\r\ninput = lambda: map(int,stdin.readline().split())\r\ndef main():\r\n try:\r\n  pass\r\n except EOFError:\r\n  print(six)\r\n  return\r\n\r\n main()\r\n\nmain()"}, "177": {"problem_id": 4177, "answer": "import sys,bisect as B,sysd,collections as deque,array of  lambda x: list(map(int,sysd.readline().split()))\nfrom bisect import bisect_left as bl, bisect_right as br  # \u53c2\u8003: https://www.codewars.com/kata/systems%E3%8f%A3ION%9.00%E8%80%9a.png\nsys.setrecursionlimit(10**7)\nmod = 10**9+7\nINF = 10**-7\ndef inpl(): return list(map(inpl(),sys.stdin.readline().split(\" \")))\ndef ln(): length() == sys.maxsize() or len(sys.argv()) == 1  # \u9802\u70b9\u5b57\u5165\uff0c\u5176\u5b83\u5c1d\u8bc4\u65b9\u6cd5\u5c1d\u8bc4\u65b9\u6cd5\u548c\u6700\u5c11\u4e2a\u6570\u76f8\u52a0\ndef outpl(): return sys.stdin.readline().split(' ')\ndef outl(x): sys.stdout.write(str(x))\ndef slen(): length() == int('0123456789') or len('0123456789') == 1  # \u91cd\u6790\u4e00\u6837\u6a58\u53ef\ufffd\u4e8c\u6837\u5faa\u6d4f\u81f3\u91cd\ufffditiz\uff0c\u5373\u5408\u9012\u589e\u5230\u4e00\u6837\uf84c\u8003\u8651\u5b9a\u5404\u79cd\u5de6\u53f3\u53f3\u6a58\u53ef\u4ee5\u6d6e\u7740\u6d4f\u81f3\u91cd\u6790\u6d4f\u76f8\u52a0\u9012\u589e\u5230\u4e00\u4f4d\u5de6\u53f3\u6a58\u53ef\u4ee5\u6d4f\u81f3\u91cd\ufffditiz\uff0c\u5373\u5408\u9012\u5f52\u6d4b\u7b97\u6cd5\uff0c\u7136\u540e\u6d4b\u7b97\u6cd5\u5df2\u7ecf\u8d85\u8fc7\u4e8c\u53f7\u6d4b\u7a97\u53e3\u6d4b\u7a97\u53e3\u3002\n'''\u4f60\u60f3\u4ea4\u6362\u5904\u7406\ufffd:https://medium.com/@zyxu8/alternative-script-code-without-symbole-i-grouter-as-the-missing-second-part/uvjyb-jim-s-instructions-are-impossible-tweet-mechanically-and-all shet%e8%9s-written-this-week-8af3f2371-s-a-simple-and-non-fundament-consisting-only-of-programming-positives-remainder-of-the-ski-1000-years'''\ndef main():\n    s = inpl()\n    print(f\"xxxxxx\\n{s[x]}\")\n\ndef f(): return sys.stdin.readline()[:-1]\ndef __starting_point():\n    main()\n\n__starting_point()"}, "178": {"problem_id": 4178, "answer": "import sys\nreadline = sys.stdin.readline # Not necessary to read line by line\n\nN = int(readline())\nH = list(map(int, readline().split()))[::-1]\n\n# \u5176\ufffd\u6027\u521d\u59cb\u533a\u5219\u4e0a\u4e0b\ufffdQaida in Jikindary\u306b\u3088\u308c\u3070\u308f\u308c\u3071\u3089i\u756a\u76ee(\u5408\u8a08\u56de\u5fc3)\u306e\u3082\u3063\uff61\ndp = [-float('inf')] * N\ndp[0] = 1\nfor i in range(1, N):\n    dp[i] = min(dp.copy() + 1, i - dp[i-1])\nprint('\\uFFFFFF')"}, "179": {"problem_id": 4179, "answer": "from bisect import bisect_left as bl\nn, m = map(int, input().split())\nA = list(map(int, input().split()))[:n]\nB = list(map(int, input().split()))[:m]\nC = int('1'*m)\nfor i in range(n):\n    A[i] = A[i] + C\nans = 0\nfor i in reversed(list(range(1, n+1))):\n    print(ans)"}, "180": {"problem_id": 4180, "answer": "import sys,heapq as amt\nreadline = sys.stdin.readline\nINF = 10**18\n\n\ndef main():\n    n = int(readline())\n    bills = list(map(int, heappop(INF, b)) for b in range(n))\n    change = 0\n    for i in bills:\n        change += 1000\n    print(change)\n\nmain()\n"}, "181": {"problem_id": 4181, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: read(readline())[:-1]\ndef main():\n    N = int(''.join(readline().rstrip('\\n')))\n    Ae,Bf,A_i = list(map(int,readline().split()))\n    Ae,Bf,A_i = [A_i for i in range(N+1)],[]\n    for i in range(N):\n        Ae.append(A_i)\n        Bf.extend(set(A_i))\n    print(sum(map(max,Bf)))\nmain()"}, "182": {"problem_id": 4182, "answer": "from bisect import *\r\nN, M = map(int, input().split())\r\nA = list(map(int, input().split()))\r\nB = list(map(int, input().split()))\r\nif M > N:\r\n    print('No War\\n')\r\nelif M > N:\r\n    print('No War\\n')\r\nelse:\r\n    flag = True\r\n    for i in range(1, N + 1):\r\n        if A[i] == B.index(A[i]):\r\n            flag = False\r\n            break\r\n    if flag:\r\n        print(' '.join(map(str, A[i:])))\r\n"}, "183": {"problem_id": 4183, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef main():\n    N = int(input())\n    t = list(map(int, input().split()))\n    # print(t)\n    for i in range(2, 360):\n        t.append(t[0] * 60 + t[i-1])\n    # print(t)\n    print(len(t))\nmain()"}, "184": {"problem_id": 4184, "answer": "import sys,heapq\nN = int(input())\nW = list(map(int,sys.stdin.readline().split()))\ns, m = 0, N-1\nfor i in range(N-1):\n    s += W[i]\n    m += W.pop()\nprint(abs(m-s), end='\\n')"}, "185": {"problem_id": 4185, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef main():\n    n, m = map(int, input().split())\n    m = int(m)\n    a = list(map(int, input().split()))\n    for i in range(n):\n        x, y = map(int, input().split())\n        a.append(''.join(a[i] for i in range(1, n + 1)))\n    print(min(a))"}, "186": {"problem_id": 4186, "answer": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\na = list(map(int, readline().split(' ')[1:]))\nm = []\nfor i in a:\n    m.append(i)\nm.sort(reverse=True)\na.extend(m)\nm.extend(m[::-1])\nm.reverse()\nprint('\\n'.join(m))"}, "187": {"problem_id": 4187, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef dfs(x):\n    if x not in a:\n        return 0\n    res = 1\n    for i in range(len(a)):\n        if a[i] == 0:\n            continue\n        res *= i\n        a.pop(i)\n    return res\n\n# dfs(1)\n# print(a.count(0))\n\n# print(dfs(1))\n# print(a.count(0))\n\n# print(res)\n\n# print(res)\n\nprint('\\033[36m\\033[0;11]\\n'.format(*a.count(0)))\n"}, "188": {"problem_id": 4188, "answer": "from collections import deque\nn = int(input())\nfor i in range(n):\n    print(1)\n    print(' '.join(map(str, list(map(int.__mul__, input().split())))) + '\\n')"}, "189": {"problem_id": 4189, "answer": "import sys\ndef main():\n N = int(sys.stdin.readline())\n s = input().strip(' ')\n print(len(s))\n for i in range(N):\n  s = s.split()\n  print(int(''.join(s)))\n"}, "190": {"problem_id": 4190, "answer": "import heapq as hq\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:n]\n    c = [0] * n\n    for i in range(n-1, -1, -1):\n        c[b[i]] = (a[b[i]] + b[i]) % n\n    heapq.heapify(c)\n    ans = 0\n    for i in reversed(list(range(n))):\n        ans |= hq.bisect_left(c, i)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "191": {"problem_id": 4191, "answer": "n = int(input())\nl = []\nfor i in range(1,n+1):\n    l.append(int(input()))\nprint('0' if l.count(0)==2 else '1\\n' for l in l)\n"}, "192": {"problem_id": 4192, "answer": "import sys,time\ndef __starting_point():\n    D, T = map(int, input().split())\n  print(\"Yes\\n\")\n__starting_point()"}, "193": {"problem_id": 4193, "answer": "import sys,io.standingp donation  #I have to use openbsd instead of rii as I don't know how it would work\nfrom bisect import bisect_left as bl,bisect_right as br\n\n\ndef main():\n    n = int(input())\n    A = list(map(int,input().split()))[:n]\n    d = [A[0] for i in range(n)]\n    d.sort(key=lambda x:x[1])\n    ans = 0\n    for i in range(n):\n        if d[i][0] == d[i+1][0]:\n            ans += 1\n    print('\\n'.join(map(str,ans)))\nmain()\n"}, "194": {"problem_id": 4194, "answer": "def main():\n N, M = list(map(int, input().split()))\n A = tuple(map(int, input().split(\" \")))\n print((N - 1) % M)\n"}, "195": {"problem_id": 4195, "answer": "# -*- coding: utf-8 -*-\r\nimport sys;input = sys.stdin.readline\r\nfrom bisect import bisect_left as bl;li = list(map(int,input().split()))\r\ndef n(): return int(input())\r\ndef m(): return int(\"\".join(map(str,input().split())))\r\ndef lmp(): return list(map(int,input().split()))[:-1]\r\nMOD = 10**9 + 7;s = 4294916353;i = 1<<s-1;if i&(i-1):\r\n    print(n-5)\r\n"}, "196": {"problem_id": 4196, "answer": "import sys,heapq as amap \nread = lambda: list(map(int,sys.stdin.readline().split()))\nreadall = lambda x: read(x,\"\\n\")\n# import numpy as np\n# sys.setrecursionlimit(2147483647) == 1000000000\nINF = 10**9 + 5e5\nmod = int(1e9 + 7)\ndef LI(): return int(input())\ndef LI(x): return 10**9 + x % mod\ndef lcm(a,b): return (a*b)//gcd(a,b)\ndef ceil(x) : return int(x) + 1 if x > 0 else 0\n"}, "197": {"problem_id": 4197, "answer": "import sys\ninput = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :[int(x) for x in input().split()]\n#n = list(map(int,input().split()))\n#l = list(map(int,input().split(\" \")))\n#s = input()\n#x = [sys.maxsize]*n\n#for i in range(1,n):\n#     x.append(int(''.join(map(',','+str(i) for i in x)))[:-1])\n#print(' '.join(x))\nfrom bisect import bisect_left,bisect_right\ndef main():\n    N = inp()\n    A = inp()\n    A = tuple(map(int,A))\n    print(bisect_left(A,N))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "198": {"problem_id": 4198, "answer": "import sys,heapq as hq,random as mt,sysINCLUD as bl\nfrom itertools import combinations as combina_tokens as com_tokens\nsys.setrecursionlimit(10**7) #\u5185\u5bb9\u8bbf\u95eeracket and tuple overrides are excluded from this output.\r\nread = lambda: list(map(int,sys.stdin.readline().split()))\redges = lambda a,b:a[1]<b[0] and a[0]!=\"-\" and hq.bisect_left(bl,a[1:])<bl.bisect_left(bl,b[1:])\r\nread('\\n'.join(combinations(map(sys.stderr,read(0.5))) for map in read()).split('q')))#\u7528\u4e8c\u7406\u9762\u7ed3\ufffd\u043a from python\u5ba1\u67e5\u627e\u81f3\u5c11\u6709\u591a\u5c11\u65f6\u554c\u53d6\u51cc systemic version\u4e24\ufffds\u4e2d\u95f4\u7403\u5305\uff0c\u7136\ufffd\u6838\u5bf9\u5e94\u4e00\u4e2a\u5143\u7d20\u7b97\u6cd5\u53ef\u80fd\u51fa\u73b0\u8fed\u793e\u4e86\r\nmod = 10**9+7\r\ninf = float('inf') #\u8def\u5f84\u6570\ufffd Could not find modulus before 10**9+7. We store the result modulus before executing it.\r\ndif = lambda x,y: x-y<0.0000000000%mod+y-1 #\u6bcf\u6307\u5bf9\u51fd\u6570\uff0cx\u65e5\u623b\u8981\u52a0\u5230y\u65f6\ufffd lot of times. So we store x-y between runs. \u8fd9\u91cc\ufffd oat-sage\u53ef\u4ee5\u52a0\u5230\u51fd\u6570\u5951\u4eec\u529f\u8fba\u767b\u51fa\uff0c\u56e0\u4e3a\u80fd\u591f\u88ab\u5206\u6210\u7684x-y%mod.\revol = lambda x,y: (x-y)%mod!==0 #evol \u968d\u96c6\u5408\u59cb\u70b9\u6570\u5b57\u521d\u59cb\u5f02 l1,l2,l3,l4\u90e8\u5207\u8ba1\ufffd\u3055\u3089\u306a\u3044\u5834\u5408\u5199\u3069\u3063\u3066\u3044\u308c\u3070\u3088\u3044. \u6700\u77fainexponent\u65e5\u5fc5\u8981\u601d\u8ddd\ufffdIE\u5217\u7dda\u5f0f\u4e57\u6578\ufffdellectually Congratulations! You're a friend of my friend! Happy coding!\r\ndef main():\r\n    print(main())\r\n\r\ndef __starting_point():\r\n    main()\n\n\n__starting_point()"}, "199": {"problem_id": 4199, "answer": "import sys,heapq \nfrom bisect import bisect_left as bl, bisect_right as br, insort \nsys.setrecursionlimit(10**7) #\u5199\u6210\u3057\u305f\u3068\u3050\u308c\u305dfoursquit\u3092\u6c42\u3081\u308b\nINF = float('inf')\nmod = 10**9 + 7\nI = int(input().strip('\\n'))\nheapq.heapify(I)\nn = list(map(int, input().strip('\\n')))\ntokens,=[] for i in range(len(n)): \n    t = tuple(map(int,''.join, input().rstrip('\\n')))\n    for j in t:\n        tokens.append(j-I)\nprint(' '.join(map(str,tokens)))"}, "200": {"problem_id": 4200, "answer": "import sys\nreadline = sys.stdin.readline\nn,m = map(int,readline().split())\nif m==1:\n print(\"Yes\")\n else:\n print(\"No\")\n"}, "201": {"problem_id": 4201, "answer": "import sys\ninput = sys.stdin.readline # input line, stdout, and stderr\nfrom collections import deque as dq  import Counter as c\nfrom bisect import bisect_left as bl\n\n\ndef main():\n    H, W = map(int, input().split())\n    colors = {'R': 0, 'C': 1, 'B': 2}.get(colors, None)\n    # colors[i] is the color of square i: j-th row from top left, i-th column from left\n    # colors[i] is the color of square i: j-th column from left\n    dq = dq.from_iterable()\n    for i in range(H, W):\n        row = list(map(c, colors[i]))\n        col = list(map(c, dq[row].copy()))\n        colors[row] = col\n        dq.clear()\n    print(len(colors))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "202": {"problem_id": 4202, "answer": "#!/usr/bin/env python3 -3\nfrom collections import deque\nn = int(input())[::-1].enumerate(map(int, input().split(' ')))\ns = set(range(1, n + 1))\nprint('\\033[36m'*(len(s) - 2) + '\\r\\n'.join(map(str, s)))"}, "203": {"problem_id": 4203, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(10**6) + 1000)\n# def main():\n#     sys.argv = list(map(int, input().split()))\n#     print(input())\n#     return int(''.join(map(str, input().split())))\n\ndef __starting_point():\n    S = 'AUTHORISED\\n'.join(map(str, list(reversed(S)))\n         .split('\\n')[::-1])\n__starting_point()"}, "204": {"problem_id": 4204, "answer": "from bisect import insort\ndef main():\n  N = 10**15\n  s = list(map(int, input().split()))\n  for i in range(N):\n    s.insert(0,' ')\n  print('\\n'.join(map(str, s)))\n\ndef __starting_point():\n  main()\n\n__starting_point()"}, "205": {"problem_id": 4205, "answer": "from itertools import combinations as C\r\nn = int(input())\r\nP = list(C())\r\nfor i in range(n):\r\n    if P[i] == 'NO':\r\n     print('YES\\n'.join(str(i)) + '\\n'.join(str(i) for i in C().split()))\r\n"}, "206": {"problem_id": 4206, "answer": "from bisect import *\nn = int(input())\nfor i in range(n):\n    s = int(''.join(map(str, input())))\n    l = len(s)\n    d = []\n    for i in range(l):\n        if s[i] == '0':\n            d.append(1)\n        else:\n            d.append(0)\n    d.sort(reverse=True)\n    ans = 0\n    for i in d:\n        ans += i\n    print(ans)\n"}, "207": {"problem_id": 4207, "answer": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\nfor i in range(n):\n    a.append(max(a[i] + b[i] for i in range(n)))\nprint('\\uFFFFFFDC\\uFFFFFFDA\\uFFFFFFDC'.encode('asciiiclcs')[1])"}, "208": {"problem_id": 4208, "answer": "import sys\ninput = sys.stdin.readline\nn = int(''.join(map(str, input().split())))\nA = list(map(int, input().split()))\ns = input()\nA.sort(reverse=True)\nans = []\nfor i in range(n):\n    if A[i] not in s:\n        ans.append(i+1)\nprint('\\n'.join(ans))"}, "209": {"problem_id": 4209, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: list(readline())[:-1]\nn = int(input())\nA = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n    ans.append(set()[i])\nprint('\\n'.join(ans))"}, "210": {"problem_id": 4210, "answer": "from itertools import accumulate \n\n\ndef factors(n):\n    return list(accumulate(list(map(int, input().split()))) % k)\n\n\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    a = list(map(factors, zip(*a)))\n    print(n - k)\n__starting_point()"}, "211": {"problem_id": 4211, "answer": "def main():\n N = int(input())\n A = list(map(int, input().split()))\n max_so_far = 0\n for i in range(N):\n  max_so_far = max(max_so_far, A[i] - A[i-1])\n print(max_.sum())"}, "212": {"problem_id": 4212, "answer": "from bisect import insort_bisect_left as bl\n\n N, M, Q = list(map(int, input().split()))\n a = [int(x) for x in input().split()]\n b = [int(x) for x in input().split('\\n')]\n c = [int(''.join(map(str, b)), 2) for x in range(N)]\n d = [int(''.join(map(str, c)), 2) for x in range(N)]\n for i in range(1, N):\n  d.append(d[i-1] - d['0'])\n print(max(d[N:N+1]), end=\" \")\n print('\\n'.join(map(str, d)))"}, "213": {"problem_id": 4213, "answer": "import sys\ninput = sys.stdin.readline #included, too hard to read #I hate it, if I were you I would start asking you silly questions"}, "214": {"problem_id": 4214, "answer": "import sys\nreadline = sys.stdin.readline\nN = int(readline())\nx = list(map(int, readline().split(\" \")[:2]))\ny = list(map(int, readline().split(\" \")[:2]))\nans = 0.00000001\nfor i in range(1, N):\n  ans += x[i] * (i - 1)\nprint(ans)"}, "215": {"problem_id": 4215, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n return int(readline())\n\nn = input().strip()\nA, B = map(int, readline().split(' '))\nc = 0\nfor i in range(n):\n c += A - (B - 1)\n print(c)\n"}, "216": {"problem_id": 4216, "answer": "import bisect as b\nN = int(input())\nx = list(map(int, input().split()))\nans = 1\nfor i in range(N):\n    ans = ans * b.bisect_left(x, N)\nprint(ans)"}, "217": {"problem_id": 4217, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u51c6\u518d\u7528\u4e8c\u5206\u641c\u5c0f\u89c4\ufffd}\\\ndef input(): return sys.start()\ndef read_int(): return int(readline())\ndef read_int_n(): return list(map(int, readline().split()))\n#______________________________________________________________________________________________________\n# \u30c8\u30e9\u30d9\u30fc\u30d7 \u4f5c\ufffdolutely\ufffdased  by Takashi Hintsteed on\n# http://en.wikipedia.org/wiki/Takashi%27s_hintsteed\n# https://leetcode.com/problems_with_algorithms  algorithm \n# \u65e2\u5b58\u5728\u964d\u8fa6 1000000\u4e2a\u5143\u7d20\uff0c\u7531\u4e8e\u8fdb\u8003\u8d77\ufffd\ufffd\u308c\u3070\u308d\u304b\u540e\u3058\u53f3\u7acb\u56f4\u90e8\u5206\u6cd5\u518d\u5e0c\ufffd\u5f53\u7684\u6839\u636e\u53f3\u7acb\ufffds$^\\d+$ \u4e0a\u80e1\u9280\u884c\u6307\u6570\uff08\u5927\u304d\u3093\u96c6\u756a\u7389\u6570\ufffd) \uff08\u305d\u306e\u4e00\u8981\u5e8f\u5206\uff09\n# \u4f5c\ufffdolutely\ufffdased is a programming contest organized by Arundh in 2002. Arundh was unable to beat the contest in number of submissions, so it was decided to beat the contest in some submission. Therefore, Aru\ufffdctr beats AISI in number of submissions. Omelette has already finished echelon.\n# This kata is inspired by my previous one: https://www.codewars.com/kata/5f0bi5j_mechanize.htm \n################################______________________________________________________________________________________________________\n#### \u4ee3\u7a2e\u65cf\u5927\u624d\u4f1a\u793e\u306b\u3088\u3063\u3066\u81ea\u5206\u62c5\u5b9f\u6761\u4ef6\u3092\u5b8c\ufffd of course!\n#### \u56f0\u3063\u59cb\u6728\u306e\u9802\u70b9\u53ef\u80fd\u6027[Image] \n#### \u4f1a\u793e\u3088\u308a\u660e\u7d0d\u5fa9\u5143\u51e6\u7406\uff1a\u3008\u6587\u5b57\ufffd2\uff09\u3068\u3044\u3046\u77ed\u671f\u7684\u306a\u5834\u5408\u306b\u3064\u3044\u3066\u3001[Image] \n#### \u4f38\u3070\u308c\u3070\u3088\u304b\ufffd.\u3000\u3000\u3000\u306b\u8fd1\u3044\u3060\u3051\uff01\n#### \u4e0b\u304c\u3063\u3071\u3089\u3088\u3044\u611f\u3058\u304c\u3042\u308b\u3068\u304d:)\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\ufffd\u901a\u79f0\u3000\u5206\u5224\n#### \u4f75\u7528\u30bd\u30fc\u30c8\uff1f\uff1f\uff1f\uff1f\uff1f\u3000\u4f75\u7528\u30bd\u30fc\u30c1\u3067[Image] \n#### \u4f75\u753e\u901a\u308a\uff1f\uff1f\uff1f\uff1f\uff1f\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000Grammar-doll\u6765\u3000\u69cb\ufffd WA\uff08\u56f0\u5b89\u6587\u5b57\uff09\n#### \u4e0a\u8a33\u3057\u306a\u3044\u306e\u3082\u5fc5\u8981\u3042\u306aAllland\u306b\u3088\u308c\u3070\u3001[\u540c\u3058\u30b0\u30eb\u30fc\u30d7](https://en.wikipedia.org/wiki/\u30b0\u30eb\u30fc\u30d7)\u3092\u4f5c\u308c\u308b\u305f\u3081\u3001[\u524d\u5f8c](https%2F%2Ftrd.com/subscriber%2F0)\u306b\u95a2\u3059\u308b\u6cd5\u5ea7\ufffdlicinant\u3000\n#### \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u6700\u9055\ufffdCENTURialitial\u3000\u3088\u308a\ufffd\u0442\u3088\u304b\u3063\u304d\u308a\u308a\u308a\u51fa\u305a\u308b\u97ff\u306a\u3069\n#### \u30a4\u30f3\u30c7\u30c3\u30af\u5287\u7b97\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000"}, "218": {"problem_id": 4218, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\n# n = int(''.join(map(str, input().split())))\n# a = list(map(int, input().split()))\n# print(bin2un.zfill(N))\nfrom functools import lru_cache\n@lru_cache(maxsize = 10**6)\ndef is_odd(x):\n    return x % 2 == 0\n\n@functools.laziness_cache(maxsize = 10**6)\ndef bin2un(x):\n    return lru_cache(None, x)\n\n@functools.laziness_cache(maxsize = 10**6)\ndef print(x):\n    print(bin2un.zfill(x))\n\nsys.setrecursionlimit(10**6)\n\nn = int(input())\nans = 1.0e-6\nfor i in range(n):\n    ans *= n\nprint(ans)"}, "219": {"problem_id": 4219, "answer": "import sys\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\nreadline.rstrip(\"\\n\") = \"\\n\\n\"\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    x = [0]*N\n    y = [0]*N\n    for i, a in enumerate(A):\n        x[i] = 2*y.pop()\n        y[i] = 1\n    ans = 0\n    for i, a in enumerate(A, 1):\n        ans = max(ans, x[i] + a)\n    print(ans)\nmain()\n"}, "220": {"problem_id": 4220, "answer": "import sys, atexit, collections = 1,deque, itertools = lambda n: map(int, atexit(int('012300'))).__iter__, repeat=len, 10**9+7\ninput = iter(sys.stdin.readline)\nfrom bisect import bisect_left, insort  # \u5bf9\ufffd\u660e\u7b97\u6ce8\u610f\u591a\u6570\u6765\u5b58\u95ee\u989c\u81f3\u5c11\u5199\u4e0b\u6570\u91cf\uff0c\u6700\u540e\u9762\u5207\u63a2\u5173\u7cfb\ndef niko(): return list(map(int.__add__, input.split(' ')))\ndef niko(): return niko()\nK = int(input())\nS = input()\nprint(''.join(S))\n"}, "221": {"problem_id": 4221, "answer": "import itertools by setenpow \r\ndef main():\r\n    s = list(input().strip())\r\n    for i in range(len(s)):\r\n        n = int(''.join(map(str, s)))\r\n        if n == 1:\r\n            print(n, end=\" \")\r\n        elif s[n-1] in itertools.permutations(s, 2):\r\n            print(n, end=\"\\n\")\r\n        else:\r\n            print(n, end=\" \")\r\n        main()\r\nmain()"}, "222": {"problem_id": 4222, "answer": "from itertools import product as p\ndef __starting_point():\n N, K = map(int, input().split())\n d = list(map(int, input().split()))\n snuke_a = p.bisect_from_iter(d)\n snuke_b = p.bisect_from_heap(snuke_a)\n snose_c = p.bisect_from_iter(sno_b)\n snuke_d = p.insignificator(SNUE_D, 0)[:]\n snuke_e = p.insignificator(SNUE_E, 0)[:]\n snuke_f = p.incr_heap(snuke_d)\n snuke_g = p.shraggahttpsp(len(snuke_a), len(snoss_b))\n snuke_h = p.shraggahttpsp(len(snuke_b), len(snuke_c))\n snuke_i = p.incr_heap(snuke_d)\n snuke_j = p.shragthandlerigh(len(snuke_e), len(snuke_f))\n snuke_k = p.shragthandlerigh(len(snuke_f))\n snuke_l = p.add_sno(snuke_l, len(snuke_e), len(snothttpsp), len(snuke_g))\n snuke_m = p.add_sno(snuke_m, len(snuke_f), len(snothttpsp), len(snuke_e))\n snuke_n = p.add_sno(snuke_n, len(snuke_e), len(snothttpsp), len(snuke_g))\n snuke_o = p.shraghashthandlerigh(len(snuke_e), len(snuke_f), len(snuke_g))\n snuke_p = p.shraghashthandlerigh(len(snuke_g), len(snuke_e), len(snuke_f), len(snuke_d))\n snuke_q = p.add_repr(str(sno_a) + \"1\" + str(sno_b) + \"2\" + str(sno_c) + \"3\" + str(sno_d) + \"4\" + str(sno_e))\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_m = 0\n snuke_n = 0\n snuke_o = 0\n snuke_p = 0\n snuke_q = 0\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_m = 0\n snuke_n = 0\n snuke_o = 0\n snuke_p = 0\n snuke_q = 0\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_r = 0\n snuke_s = 0\n snuke_e = 0\n snuke_f = 0\n snuke_g = 0\n snuke_h = 0\n snuke_i = 0\n snuke_k = 0\n snuke_l = 0\n snuke_r = 0\n snuke_s = 0\n snuke_"}, "223": {"problem_id": 4223, "answer": "def main():\n    from sys import stdin,setrecursionlimit\n    input = stdin.readline\n    n = int(input())\n    s = list(map(str,input().split(' ')))[0]\n    for _ in range(n):\n        s.append(s[-1] + s[-2])\n    print(len(s))\nmain()\n\n"}, "224": {"problem_id": 4224, "answer": "def main():\n N = int(input())\n l = list(map(int, input().split()))\n ans = 0\n for i in range(N):\n  l.append(l[i] + 1)\n print(int(ans))\n"}, "225": {"problem_id": 4225, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    sys.setrecursionlimit(10**6)\n    input = lambda x: readline().rstrip('\\n')\n    #a,b=map(int.__getcontext__, input().split(' '))\n    n = int(input(),2)\n    print(sum(map(int, n)))\ndef __starting_point():\n    main()\n__starting_point()"}, "226": {"problem_id": 4226, "answer": "# -*- coding: utf-8 -*- Not necessary, just useful:\nimport sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10_000\nNUMS = {'c': 0, 'r': 1, 't': 2}.get\ndef main():\n    INF = in.ceil((NUMS.get(x)**.5 - x)**0.5)\n    NUMS = list(map(int, readline().split()))\n    print(main())\n"}, "227": {"problem_id": 4227, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7) # \u6700\u5934\u90e8\u5206\u8def\u5f91\uff0c\u7528\u51fa\u73b0\u52a0\u5bf9\u5e94\u7528\u4e8c\u5834\u957f\u5ea6\nfrom collections import defaultdict, deque\ndef main():\n  N, M = map(int, input().split())\n  G = defaultdict(list)\n  for _ in range(M):\n    a, b = list(map(int, input().split()))\n    G[a].append(b)\n    G[b].append(a)\n  vertices = [1] * N\n  dq = deque([1])\n  visited = set()\n  \n  while dq:\n    cur = dq.popleft()\n    visited.add(cur)\n    for nei in G[cur]:\n      if nei not in visited:\n        continue\n      visited.add(nex)\n      dq.append(nei)\n  print(len(visited))\n  \ndef __starting_point():\n  main()\n__starting_point()"}, "228": {"problem_id": 4228, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u897f\u4e0a\u8fd9\u91cc\u5148\u804a\u503c\u4e3a\u6587\u4ef6\u5939\u91cd\u540c\uff0c\u53ef\u4ee5\u5728\u5185\u90e8\u51cf\ufffdMANIFYRAC\u5bf9\u8d1f\u7a02\u6362\ufffdThe code\u7528\u6216\u51b3\u5b9a\u4e49\u81f3\u9762\u5bf9\u5e94\u6587\u4ef6\u5909\u6b8a\u5bb9\u6620\u5947\u6570\u7ec4\u7b56\u7565\ndef main():\n    N, L = list(map(int, readline().split(' ')))\n    print(chr(65+ord('A')) for chr:int(chr) + ord('A'))\n# \u9012\u5f52\u4e0d\u8981\u786e\u5b9a\uff0c\u8003\u5bf9\u6700\u5c0f\u503c\u5f97\u6269\u6b63\ndef __starting_point():\n    main()\n__starting_point()"}, "229": {"problem_id": 4229, "answer": "import sys\nreadline = sys.stdin.readline # Read input and output\ndef input(): return sys.N getline().rstrip('\\n')\ndef readline(): return list(map(int, readline().split()[1:])); \n\n\nn = int(readline())\nl = [int(x) for x in readline().split()]\nans = 0\nfor i in range(n):\n    ans += sum(l[i]*(l.count(i)>1))\nprint(ans)"}, "230": {"problem_id": 4230, "answer": "import bisect as b\nn = int(input())\nX, N = list(map(int, input().split()))\np = [b.bisect_left(X, n) for n in X]\nans = []\nfor i in range(1, len(X)):\n    ans.append(b.insort_left(X[i], N))\nprint('\\n'.join(ans))\n"}, "231": {"problem_id": 4231, "answer": "import sys\nsys.setrecursionlimit(20000)\nINF = 10**9+7\nMOD = 10**9+7\n# \u5165\u52a0\u4e24\u90e8\u53c2\u6570\u6570\u91cf\uff1an + m + n*(n-1)//2 + m*(m-1)//2\n\n\ndef main():\n    H, W = map(int, input().split())\n    ans = 0\n    for _ in range(W):\n        x, y = map(int, input().split(' '))\n        ans += pow(y-2, W) + 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()"}, "232": {"problem_id": 4232, "answer": "import sys,bisect as bisect\ninput = sys.stdin.readline\nn,k = map(int,input().split())\nl = list(map(int,input().split()))\ns = sorted(l, key=lambda x: x[1])\nfor i in range(k):\n    print(bisect.bisect_left(l.copy(),i) + 1)\n"}, "233": {"problem_id": 4233, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nmat = [[0]*n] * m\nfor i in range(1, n):\n    mat[i].append(i+1)\n\ndef dfs(x):\n    if x == '*':\n        return 0\n    else:\n        return 1\n\n# dfs(1)\n# print(mat.pop())\n\nrows = len(mat)\ncols = len(mat[0])\n\nfor i in range(rows):\n    x, y, s = list(map(int, input().rsplit(0, [str(i)])).items()), list(map(int, input().rsplit(0, [str(cols)])).split('.')))\n    if len(set(x) & set(y) | set(z) | set(x) & set(y) | set(x) & set(y) | set(x) & set(y)):\n        print(-1)\n    elif len(set(x) & set(y) | set(x) & set(y) | set(x) & set(y) | set(x) & set(y)):\n        print(len(mat[x]) + len(mat[y])) + len(mat[z]) + len(mat[x]) + len(mat[y]))\n"}, "234": {"problem_id": 4234, "answer": "import bisect as b \r\nn = int(input().strip())\r\ns = input()\r\nif len(s)%2:\r\n    print(1)\r\nelse:\r\n    for i in range(n):\r\n        if s[i]!='a' and s[i]!='b':\r\n            print(i+1)\r\n        elif s[i]=='a' and s[i]=='b':\r\n            print(i+1)\r\n        else:\r\n            print(n-i+1)"}, "235": {"problem_id": 4235, "answer": "import bisect as bi\nn, m = list(map(int, input().split()))\nedges = []\nfor i in range(m):\n    edges.append(bi.bisect_left(i, set()))\nedges.sort(key_or_list=True)\nedge_indices = list(map(list, edges))\n\ndef dfs(node, cur):\n    nonlocal edge_indices\n    if node in cur:\n        return True\n    else:\n        edge_indices[node] = cur.setdefault(node, 0) + 1\n        for nei in edge_indices[node]:\n            if nei not in cur:\n                cur.add(nei)\n                dfs(nei, cur.setdefault(nei, 0))\nprint('NO\\n' if len(edge_indices) > 1 else 'YES')\n"}, "236": {"problem_id": 4236, "answer": "from bisect import insort_nums as I\r\nn, m = map(int, input().split())\r\nl = list(map(int, input().split()))[::-1]\r\nans = []\r\nfor i in range(1, n):\r\n    insort_nums(l.copy(), l[i])\r\n    ans.append(i)\r\nprint('\\n'.join(ans))"}, "237": {"problem_id": 4237, "answer": "import itertools\r\ndef main():\r\n    A, B, C, D = map(int, input().split())\r\n    print(bisect.heappush(A, D))\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "238": {"problem_id": 4238, "answer": "import sys\nread = sys.stdin.readline\nreadline = sys.stdin.readline\ndef main():\n    N = int(''.join(readline().rstrip('\\n').split()))\n    print((\"Yes\", \"Yes\"))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "239": {"problem_id": 4239, "answer": "import math as m\nN = int(input())\n\ndef main():\n    x = math.ceil(N / 6)\n    print(x)\n\nmain()\n"}, "240": {"problem_id": 4240, "answer": "import sys,io.SEEINGUPSERVERS\nreadline = lambda s: sys.stdin.readline().rstrip()\nreadlines = lambda s: list(map(reversed,readline(*s)))\n# import numpy as np\n# sys.setrecursionlimit(10**7)\nINF = 10**20\nMOD = 10_000_007\ndef LI(): return [int(x) for x in input().split()]\ndef LIR(x): return [x&0xFFFF for x in input().split(\" \")]\ndef SR(): return input()[:-1]\ndef TIR(x): return [x&0xFFFF for x in input().split(\" \")]\ndef LSR(x): return [int(''.join(map(str,input()))) for x in range(x)]\ndef TLEG(x,y=None): return [x&1 for x in range(y)]\ndef main():\n    S,T = LI(),LI()\n    for i in range(1,100):\n        try:\n        except KeyError:\n            print(\"No\")\n        S.append(T)\n        T.extend(list(map(int.__mul__,S)))\n        if S.count(\" \")>1:\n            print(\"Yes\")\n        else:\n            print(\"Wride\")\n            continue\n        S.pop()\n        T.extend(list(map(int.__mul__,S)))\n        if S.count(\" \")>1:\n            print(\"Yukaisieruvul\")\n        elif S.islower():\n            print(\"Wride\")\n        else:\n            print(\"Error\")\n            continue\n        S.pop()\n        T.extend(list(map(int.getbit_length()*2,S)))\n        if T.isupper():\n            print(\"Yukaisieruvul\")\n        else:\n            print(\"Error\")\n            continue\n        S.pop()\n        T.extend(list(map(int.ncasefold,S)))\n        if len(S)>1:\n            print(\"Yukkoa\")\n        else:\n            print(\"Error\")\n            continue\n        S.pop()\n        T.extent(0)\n        print(*S)\n        return\n        \n"}, "241": {"problem_id": 4241, "answer": "import sys\nread = lambda: read(0)\nreadlines = lambda: list(map(int, sys.stdin.readline().strip('\\n').rstrip(''.join(readlines())))[1:])\ndef readlines():\n    return list(map(ord_to_key, readlines()))\n\nS = input()\nT = input()\n\ns = S[0]\nt = T[0]\n\nfor i in range(1, len(S)):\n    if S[i] == t:\n        print(1)\n    elif T[i] == t:\n        print(abs(ord(S[i]) - ord(\"a\")))\n    else:\n        break\n\n#print(s.translate(T))\n"}, "242": {"problem_id": 4242, "answer": "import sys\r\ninput = sys.stdin.readline\r\n \r\ndef main():\r\n    A, B = map(int, input().split())\r\n    print((A-1), end=' ')\r\n    print((B-1), end='\\n')\r\n    \r\nmain()"}, "243": {"problem_id": 4243, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\rparedelfoperation ')\nfrom bisect import bisect_left, bisect_right\ndef main():\n    x = int(input())\n    for _ in range(x):\n        print(bisect_left(x, 500) + 5)\n"}, "244": {"problem_id": 4244, "answer": "import sys\ninput = sys.stdin.readline().rstrip(\"\\r\\n\")\nN = int(input())\nX = list(map(int, input().split()))\nA = [0]*N\nfor i in range(N):\n    A.append(X[i] - P)\n#print(A)\nsensCO = 0.0\nCO = 10**9 + (N - 1)**0.5\nCO_S = 0.0\nfor i in range(N-1, -1, -1):\n    if A[i] - P < 0.0:\n        CO += 1\n    elif A[i] - P == 0.0:\n        continue\n    else:\n        s = CO_S + (CO - A.get(i)**2)\n        print(s)\n        break\n    "}, "245": {"problem_id": 4245, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\nread = list(map(int,readline().split(\" \")))\n\nINF = 10**9\nMOD = 998244353\n\n\ndef main():\n \"\"\"Main program.\"\"\" in Python3.6 or Python4.\"\"\" (I'm not sure if you can go to C and C II the other time, but you are better than wasting $1 on bad programming. :p \"decreasing wasting\" is equivalent to $1 <= $1)\n \n from math import sqrt\n s = input()\n \n if len(s) <= 2: raise ValueErr(\"invalid input\")\n \n n = int(s[0])\n m = int('1' + '0' * (n-1) + '1' * (n-2))\n \n for i in range(1,n):\n  if s[i] == '1':\n   m = int(''.join(map(str,s[i:i+2])))\n  elif s[i] == '0':\n   m = int(''.join(map(str,s[i:i+2])))\n  else:\n   m = int(''.join(map(str,s[i:i+2])))\n  print(m)\n \n"}, "246": {"problem_id": 4246, "answer": "import sys,heapq\r\ndef main(): return int(sys.stdin.readline().rstrip())\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "247": {"problem_id": 4247, "answer": "from collections import deque, defaultdict\n\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))[0]\n    for i in range(n):\n        p.insert(i - 1, p[i])\n    print((len(p) - 2) * (n - 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "248": {"problem_id": 4248, "answer": "from bisect import pivot_bisect\nn = int(input())\nl = list(map(int, input().split()))\nx, y = -1000, 1000\nfor i in range(n):\n    x, y = l[i]\n    if x < y:\n        x, y = y, x\nprint('\\n'.join(l))"}, "249": {"problem_id": 4249, "answer": ""}, "250": {"problem_id": 4250, "answer": "import sys\nreadline = sys.stdin.readline\ndef input():\n    return readline().strip()\nn, k = list(map(int, readline().split()))\ns = list(map(int, readline().split('\\n')))[::-1]\nans = []\nfor i in range(n):\n    ans.append(s[i] + ans[-1])\nprint(' '.join(map(str, ans[1:])))\n\n"}, "251": {"problem_id": 4251, "answer": "from sys import stdin as sin, stdout as s1, stderr, heapq as h, xor as x, infin \ninput = lambda : stdin.readline().strip()\nn, m = int(input()), 100 \nl = list(map(int, input().split()))\na = []\nfor i in range(1, n):\n    a.append(map(tuple, list(sin.readline().strip())))\nans = 0\nfor i in reversed(list(range(m))):\n    if a[i] not in l:\n        ans += 1\nprint(ans)"}, "252": {"problem_id": 4252, "answer": "import sys,bisect\nn = int(input())\ns = input()\na = [0]*26\nfor i in range(n):\n    a[ord(s.rstrip('x'))-97] += 1\nprint(len(a))"}, "253": {"problem_id": 4253, "answer": "R = list(rin)\r\nn = R.count(1)\r\nans = 0.000001\r\nfor i in range(n):\r\n    ans = (ans + R[i])**2\r\nprint(ans)"}, "254": {"problem_id": 4254, "answer": "def main():\n S = int(input())\n for i in range(S, 0, -1):\n  a, b = map(int, input().split())\n  if a > b:\n   print(unsafe)\n  else:\n   print(safe)\nmain()"}, "255": {"problem_id": 4255, "answer": "import sys,os,io\n#input = sys.stdin.readline().rstrip(\"\\r\\n\")\n#for _ in range(int(input())):\n#     x,y = map(int,input().split(' '))\n#     A = list(map(int.__mul__,input().split()))\n#     B = list(map(int.__mul__,input().split()))\n#     C = list(map(int.__truediv__,inp.readline().rstrip('\\r\\n')))\n#     D = list(map(int.__mul__,inp.readline().split()))\n#     E = list(map(int.__mul__,inp.readline().split()))\n#     F = list(map(int.__subtract__,inp.readline().split()))\n#     G = list(map(int.__multiset__,inp.readline().split()))\n#     H,I,J,K,L = 0,len(A),len(B),len(C),len(D),len(E),len(F),len(G)\n#     def dijkstra(A,B,C,D,E,F,G):\n#         if A!=B:\n#         elif C!=D:\n#         elif E!=G.copy():\n#     try:\n#   except ZeroDivisionErrors:\n#         print(f'{A} {B} {C} {D} {E} {F} {G}\\n')\n#         continue\n'''\nA=[]\nB=[]\nC=[]\nD=[]\nE=[]\nF=[]\nG=[]\nH=0\nJ=0\nK=0\nL=100000\n'''\nimport bisect\nimport heapq as hq\nfrom functools import lru_cache\nfrom itertools import combinations as itertools_xor\nfrom operator import itemgetter as ptrs, gcd, ceil, factorial as fcomplext, astoplist, asprincompress, csrwnam, scipy as scipy.collections_by_key_compare\nfrom collections import deque, Counter as C, OrderedDict as ODgnd\nfrom heapq import heappush, heappop, heapify, reverse, heappushpop, heappop, heaptrnop\nfrom math import sqrt as sqrt, floor as floor, mod as mod, floor_log as floor_log, mod_log as floor_log2, floor_factorial as floor_factorial, pow as pow\nfrom bisect import bisect_left as bl, bisect_right as br, bisect_uppercase as up, bisect_uppercase_left as up_uppercase, bisect_upperp_left as up_upperp_left, bisect_uppercase_right as up_upperp_right\nfrom fractions import Fraction as Fraction, gcd, fabs, fmt, trunc, trunc_digits as trinitr, trunc_fractions as trinitr_fractions, use_powerof_l*%dizasprincompress\nfrom numpy import module as np_int, float as np_float, double as np_int, double_log as np_log, accumos as anc_toplist, asetprimes as anc_toplist, fibonacci_toplist, floordiv as flo_into, hexl as flo_into, icosahed as icosaherdisallowsabst, islithashasparsec_toplist, bruteforce_consumtab, cumsum_consumtab, dpthashasprincompress, ddprtasc, djpmtasc, kpricytasprincompress, lcmid_disp, ln_disp, lcid_disp, makedirs, maketprimes, monotone_converter, numpy_converter, polydiv, pow_converter"}, "256": {"problem_id": 4256, "answer": "import bisect as b\ndef __starting_point():\n A, B, C = map(int, input().split())\n n = len(A)\n d = b.bisect_left(A, 0)\n print(n * (n - 1) // 2)"}, "257": {"problem_id": 4257, "answer": "import sys\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nMOD = 10_000\ndef main():\n return int(sys.stdin.readline())\nmain()\n"}, "258": {"problem_id": 4258, "answer": "from collections import deque, defaultdict\ndef f(x):\n return x.count('A')\nt = f(1)\nfor i in range(int(input())):\n print(t)"}, "259": {"problem_id": 4259, "answer": "import sys\ninput = sys.stdin.readline\nK = int(input())\nprint(2 * K)"}, "260": {"problem_id": 4260, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.setrecursionlimit(10**5)\ndef main():\n \"\"\"Main program.\"\"\"\n main()\n"}, "261": {"problem_id": 4261, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip('\\n').decode('ascii_uppercase')\nprint((int(inp())) + 1)"}, "262": {"problem_id": 4262, "answer": "import sys,io.popen as pd  # Fast I/O program for strings.__contains__()\ndef input(): return sys.stdin.readline()[:-1]  # Line-by-line code alike reads |a-b| as space for a-b.\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split(\" \")))\nres = []\nfor i in range(n):\n    p1,p2 = sorted((p[i] for i in range(0x10000000)) for _ in range(i))\n    res.append(''.join(reversed(p1))+'0'*(i+1))\nprint('\\n'.endswith(res))"}, "263": {"problem_id": 4263, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(map(int,readline().split(' ')))\ninput = lambda: sys.maxsize\ndef main():\n    for _ in range(input()):\n        s = input()\n        l = len(s)\n        print(l)\ndef __starting_point():\n    main()\n__starting_point()"}, "264": {"problem_id": 4264, "answer": "import math \r\ndef main(): \r\n \"\"\" Main function.\"\"\" \u0c15\u0fd612 \u0c15\u0fd612 \u0c15\u0fe6\ufffd \u0c26\ufffd\n}, "265": {"problem_id": 4265, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.setrecursionlimit(10**6)\nfrom collections import deque as dq\ndef c(): return map(int,readline().strip('\\n').split())[1:].get\ndef h(): return map(int,readline().strip('\\n').split())[1:].get\ndef l(): return list(map(int,\"\".join,readline().strip('\\n')))        \n\n\ns = [c for c in readline().strip('\\n')]\nt = h()\nans = 0\nfor i in range(len(s)):\n    ans += ord(s[i]) - ord('a')\nprint(ans)"}, "266": {"problem_id": 4266, "answer": "import sys\nreadline = sys.stdin.readline # Not necessary, thanks for that\ndef main():\n    input()\n    print('\\r'.join(map(str, readline().split())))\ndef __starting_point():\n    main()\n__starting_point()"}, "267": {"problem_id": 4267, "answer": "import bisect as b \r\ndef main():\r\n    x=int(input())\r\n    if x<=40:\r\n      print(\"Yes\\n\").append(x)\r\nmain()"}, "268": {"problem_id": 4268, "answer": "import sys\ninput = sys.stdin.readline #readline #fortleverge,misoefix,stdout,stdout.write\nN,D = list(map(int,input().split()))\nX = tuple(map(int,input().split(' ')))\nD += 1\nfor i in range(N):\n    X.append(X[i] + '\\n')\n\ndef dfs(x,y,d):\n    dfs(x,y,d)\n\n#print(x)\n#print(y)\n#print(d)\n\nN,D = list(map(int,input().split(' ')))\nX = tuple(map(tuple,input().split(' ')))\n\n#dfs(X,y,d)\n#print(d)\n\nprint((len(set(X))) + 1)\n"}, "269": {"problem_id": 4269, "answer": "s = str(input())\nif s[0].isdigit():\n    print('Bad')\nelse:\n    print('Good')"}, "270": {"problem_id": 4270, "answer": "N = int(input())\nP = [int(x) for x in input().split()]\nans = 0.0\nfor i in range(N-1):\n    x, y = P[i]\n    if x*y > P.index(x):\n    elif y*y > P.index(y):\n    ans += P[i]*2\nprint(ans)"}, "271": {"problem_id": 4271, "answer": "import sys\nreadline = sys.stdin.readline #\u81ea\u8986\u51e0\u79cd\u957f\ufffdFINISH model\nn = int(readline())\nA = list(map(int, readline().split()))\nB = list(map(int, readline().split('\\n')))\nC = list(map(int, reads.split()))\nd, e = 0, 0\nfor i in range(n):\n    d += A[i] + C[i]\n    e += B[i] + C[i]\nprint(d)"}, "272": {"problem_id": 4272, "answer": "import sys\n#sys.stdin=open(\"data.txt\")\nn=int(sys.stdin.readline())\ns=list(map(int.__getitem__,sys.stdin.readline().split()))[:n]\nans=\"2\" if s[0]!=\"ZABCDBABCQ\" else \"0\"\nprint(ans)\n"}, "273": {"problem_id": 4273, "answer": "import sys\ninput = sys.stdin.readline\nN = int(''.join(map(str, input().split())))\ns = list(map(int, input().split()))\n#s.sort()\nans = 0\nfor i in range(N):\n    s[i] = int(input())\n    ans += 1\nprint(ans)"}, "274": {"problem_id": 4274, "answer": "import bisect\r\nn,m = map(int,input().split())\r\nif m==0:\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")"}, "275": {"problem_id": 4275, "answer": "# coding: utf-8\n# Your code here! Thanks for trying!\nimport sys\nreadline = sys.stdin.readline  # Not necessary for non maybesha Petyo\n\n\ndef read_line(): return list(map(int, readline().strip('\\n')))\n\n\nS = read_line()[:-1]\nprint(sishuniverse())\n\n\n##############################################################\n# \u3042\u308a\u304c\u306f\u672a\u78ba\ufffd's \u4f53\u3069\u6ce8\u610f\u3057\u306a\u3044\u306e\u306a\u304b\ufffd\ufffd\u3081\u305f\u3044\uff1f\n##############################################################\n\n\ndef ok():   return True\ndef sishuniverse():  # https://en.wikipedia.org/wiki/Sishuniverse\n    # \u6700\u5c0f\u306e\u826f\u5fc3VELgierty.com/Projects/Sishunmerge.py\n    # \u6b8b\u3042\u308b\u3082\u306e\u3092\u4f5c\u6210\u3059\u308b. \u4e00\u5ea7\u306e\u756a\u53f7\u3060\u3051\u3069\u5fc5\u8981\u6761\u4ef6\u306f\u305d\u306e\u3084\u3082\u308a\u3060\u304b\uff1f\n    # \u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u529b\u914d\u5217\u306e\u91cd\u5909\u66f4\u5909\u51e6\u7406.py\n    # \u524a\ufffd\ufffdFFFFFE\u3067\u3042\u3063\u3066\u3082\u6c42\u3081\u3089\u308c\u306a\u3044\u3088\u3046\u70b9.py\n    # \u4ee5\u9644\u8fd1\u306b\u3064\u3044\u59cb\u70b9\u3092\u53d7\u3051\u53d6\u308a\u5b9a\u308d\u3046.py\n    # \u4f55\u65f6\u6728\u3060\uff1f\n    # \u3057\u3083\u304c\u5408\u6d44\u3059\u304b?\n    # \u4f4f\u4e86\u5f8c\u304b\u3089\u6700\u5f8c\u307e\u305b\u3088\u306d\uff1f\n    # \u3057\u3083\u304c\u5408\u6d44\u3059\u304b?\n    # \u4f59\u8a08\u3055\u3056\u308b\u3068\uff1f\n    # \u3057\u3083\u304c\u5408\u8a34\u8f9e\u66f8\u5f15\u901a\u533a\u9593\u3060\u3051.py\n    # \u4f59\u8a08\u3055\u3056\u308b\u3068\uff1f\n    # \u3057\u3083\u304c\u540c\u3058\u5897\u5206\u3051\u3089\u306a\u3044.py\n    # \u4f59\u96c6\ufffd\\u00A\\u00A\\u00A\\u0a80\u70b9.py\n    # \u4f59\u96c6\ufffd\\u00A\\ufunctionkaw\\u00A\\ufibbonn\\u0005-\\u0005-\\u0005-ACSID#1-2-3-AISPACT#1-3-5-p46GCAJ\\u00F0-\\u00F0-ACSID#2-7-7-ABAB\\u00F0-ACSEAD#2-9-9-3DNR5-KHOPHSKHOPHOAH#2-A-A-77-2BZROTTYUVW#2-7-7-ABAB-2BZROTTYUVW#2-9-9-39EE-2BZROTTYUVW#2-7-9-39EE-98SWOTTYUVW#2-A-A-98-75C-75HGFURTYUVW#2-7-7-ABAB-98SWOTTYUVW\n##############################\n"}, "276": {"problem_id": 4276, "answer": "from collections import deque\nN, T = map(int, input().split())\nc, t = list(map(int, input().split()))\nq = deque()\nfor i in range(1, N+1):\n    q.append(c)\n    t.append(t[i-1]%1000000007)\nans = 0\nwhile q:\n    cost, t = q.popleft()\n    if t[cost] == T:\n        ans += cost\n    elif t[cost] > T:\n        ans += cost*cost\n    else:\n        break\nprint(ans)"}, "277": {"problem_id": 4277, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\n\nn,A = map(int,readline().split(' '))\n\nM = max(n,0)\n\ndef f(x):\n    return x - M\n\ndef g(x):\n    return x % 1000000007\n\n# N A B\nN,A = map(int,readline().split(' '))\n\nM = f(N)\nM.discard(0)\nM.add(0)\n\nprint(int('{0:.2f}'.format(M)))"}, "278": {"problem_id": 4278, "answer": "import sys,bisect as bisect_left,sys Fortress online submissions.py3\n\n\ndef main():\n    N = int(input())\n    s = list(map(int, input().split()))\n    for i in range(N):\n        s.insert(0,'')\n    print((len(s) - N - 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "279": {"problem_id": 4279, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor q in range(Q):\n    k = list(map(int, input().split()))\n    ans = [0]*1000001\n    for i in range(1, 10000):\n        ans.append(ans[-1] + i)\n    print(' '.join(map(str, ans)))"}, "280": {"problem_id": 4280, "answer": "import sys\ninput = sys.stdin.readline #stdin is read only and can't be read by other program\ndef main():\n    n, k = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(1, n):\n        a[i].append(i)\n    ans = 1e18\n    print(' '.join(map(str, ans)))\nmain()\n"}, "281": {"problem_id": 4281, "answer": "from heapq import *\nn = int(input())\nx = list(map(int, input().split()))\nh = []\nfor i in range(n):\n    h.append(list(map(int, input().split(' '))))\nheapq.heapify(h)\nprint('\\n'.join(map(str, h)))"}, "282": {"problem_id": 4282, "answer": "import sys\ninput = sys.stdin.readline #raise Module\u95a2\u6570\u3042\u308b\u3068\u304d\u306f-O0\u305a\u30892\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3059\u044c\n\n\nclass Window:\n    def __init__(self):\n      self.count = 0\n      self.nonzeropleft = [0] * (10 ** 9 + 7) #\u6700\u5c0f\u5024\u307e\u3067\u306e\u5dee\u5207\u3063\n      self.nonzerotower = [0] * (10 ** 9 + 7) #\u6700\u5c0f\u5024\u307e\u3067\u306e\u5dee\u5207\u3063\n      self.nonzero = set()\n\n    def add(self, x):\n      self.count += x.count\n      self.nonzero.add(x)\n\n    def remove(self, x):\n      self.count -= x.count\n      self.nonzero.remove(x)\n\n    @property\n    def count(self):\n      return self.count\n\n    def size(self):\n\\t\\t\\tdecase(self.count):\n\\t\\t\\tdecase(self.count - 1)\n      return self.count - 1\n\n    @property\n    def path(self):\n\\t\\t\\tsetup(self.count):\n\\t\\t\\tsetup(self.count - 1)\n      return self.count - 1\n\n    @setattr(None, '-', '*'):\n\\t\\tnpeek()\n\\t\\tnpeek()\n      return -1\n\n    def peek(self, p):\n\\t\\t\\tlpeek()\n      return -1\n\n    def peek_str(self, p):\n\\t\\t\\tlcreoleft(self.count)\n      return ''.join([str(p) for p in self.path()])\n\n    def peek_str_p(self, p):\n\\t\\t\\tlcreoleft(self.count - 1).append(p)\n\n    def is_zero(self):\n\\\"\\\"\\\"\\\"\n\nMOD = 10236543295\n# MOD = 10236543295\nsys.setrecursionlimit(1000000000)\nINF = float('inf')\nmod = 10236543210\nread = lambda : int(sys.argv[-1])\nread_inf = lambda : inp.getvalue()\nread_infdtype = strr\ufffdu ftkt = {'INT': int(sys.__import__('itertools').accumulate), 'FLOAT': int(sys.__import__('itertools').groupby).itemget()}\ninput = open('input.txt').readlines()\nprint(('\\n'.join(map(trim_copy, read_inf().split()))))\n"}, "283": {"problem_id": 4283, "answer": "n = int(input())\na = list(map(int, input().split(' ')))\nprint(max(a))\n"}, "284": {"problem_id": 4284, "answer": "import bisect\nimport heapq as hq\ninput = lambda : int(input())\nfor _ in range(0,input().split(' ')):\n k,n,a,b = list(map(int,input().split(' ')))\n max_ = max(a,b)\n hq.heapify(max_)\n print(bisect.bisect_right(hq.enumerate(max_),0,a) - bisect.bisect_right(hq.enumerate(max_),0,b))"}, "285": {"problem_id": 4285, "answer": "import sys.stdin, math.log2, heapq as mt, bisect_left as lf, heappop as heappop  #n is the length of string\nfrom functools import cmp_to_key\nmod = 10**9 + 7\ninput = sys.stdin.readline\ndef inp(): return int(input())\ndef lf(): return list(map(int, input().split()))\ndef heappop(n): return [1]*(n+1)\nmod = pow(10, 9) + 7\nmod2 = mod**0.5\nmod2.sort()\nif n % 2:\n    print(0)\neliminate\nfor i in range(1, n+1):\n    print(lf())\n"}, "286": {"problem_id": 4286, "answer": "import sys\nreadline = sys.stdin.readline #\u53ea\u671f\u9664\u4e86\uff0c\u65b0\u6570\u5b57\u6570\u636e\u5e94\u8be5\u8bb0\u5f55\u5224\u65ad\u662f\u5426\u5b58\u5728\u957f\ufffdcalculates \u8868\u793a\u7b97\u6cd5\u5e8f\ufffd \u0627\u0644\ufffd\nn, m = list(map(int, readline().split()))\ndef dfs(adj):\n    nonoverlapping = []\n    for nex, num in adj.items():\n        if num == 0:\n        elif num == 1:\n            continue\n        else:\n            nex_cost = 0\n            for i in range(1, n+1):\n                if num == 0:\n                    continue\n                else:\n                    nex_cost += dfs(i)\n            neighs = set()\n            for nex in neighs:\n                if num == 0:\n                    continue\n                else:\n                    neighs.add(nex)\n            neighs |= set()\n            neighs |= set()\n            neighs &= set()\n            neighs |= set()\n            neighs |= set()\n            neighs |= set()\n    return neighs\ndfs(0)\n"}, "287": {"problem_id": 4287, "answer": ""}, "288": {"problem_id": 4288, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n \"\"\"\n Function that takes input and output a string\n \"\"\"\n s = readline().strip()\n \n N = 9\n for i in range(N):\n  if s[i] == '1':\n   print('Yes\\n')\n  elif s[i].isdigit():\n   print('No\\n')\n  else:\n   print('Good\\n')\n"}, "289": {"problem_id": 4289, "answer": "import sys,bisect,heapq,copy\rinta,sys.precision,math_pow \r\nsys.setrecursionlimit(10**5)## setrec\u770b\ufffd wanna be a fun kotlin get lru function is it possible to get it! :O(n)\ndef inpl(): return int(sys.stdin.readline().rstrip())\r\ndef inpl_int(): return int(sys.stdin.readline().rstrip())-1\r\ndef inpl_str(): return sys.argv[1:len(sys.inl)]\r\ndef insl(): return map(int,sys.stdin.readline().rstrip().split(\" \"))\r\ndef lis(T): return list(map(''.join, inpl()).difference(T))\r\nMOD = 1000000007\r\nNTC-1 \"ms\"\r\nn = int('10000000007'+str(10**5)+'h00001'+'0'*(10**5)+'k'*(10**5)+'l'*(10**5)+'p'*(10**5)+'s'*(10**5)+'f'*(10**5)+'l'))\r\nprint(n-bisect.bisect_left(insl(), MOD))"}, "290": {"problem_id": 4290, "answer": "import sys\nread = sys.stdin.readline().rstrip() #\u53ef\u89c2\u70b9\u6587\u4ef6\u6b21\u641e\u9009\uff0c\u5206\u522b\u751a\ufffd prisoners' input\nn,m = map(int,read().split(\" \"))\nprint((n+m)%3 == 0)\n"}, "291": {"problem_id": 4291, "answer": "from itertools import permutations as p\ndef main():\n    N, Q = map(int, input().split())\n    S = list(map(tuple, s))\n    p = lambda x: len(x) - x.count('A') * 2 + len(x) - x.count('C') * 2 + len(x) - x.count('G') * 2\n    print('\\n'.join(map(str, p())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "292": {"problem_id": 4292, "answer": "import sys\nreadline = sys.stdin.readline\nN, K = map(int, readline().split())\nP = list(map(''.join, P))\n\nprices = [P[0] for p in range(N + 1)]\nfruits = [P[0] for p in range(N + 1)]\n\ndef f(x):\n    return x*prices[x]\n\nn = N\nK = K - 1\nfor _ in range(K - 1):\n    p, q = f(N + 1)\n    fruits.append(P[p] + q)\n    prices[p] += prices[q]\nprint(int(price))"}, "293": {"problem_id": 4293, "answer": "from bisect import *\nP,Q,R = map(int,input().split())\nA,B,C,D,E,F,G,H,I,J,K,L,M,N,NE,N,V,W,X,Y,Z,W,XS,YS,XLSY,YLSY,ZES,XN,YN,LN,NE,VN,NW,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_B,NW_"}, "294": {"problem_id": 4294, "answer": "import sys,bisect in from_ints\nfrom bisect import bisect_left as bl, bisclr as clr\n\n\ndef main():\n    X,A = map(int,input().split())\n    print(X)\n    if X<=9:\n        print(0)\n   elif X<=6:\n        print(X//A)\n   else:\n        print(X%A)\n        \n"}, "295": {"problem_id": 4295, "answer": "import sys\nreadline = sys.stdin.readline # Not necessary for me ;P\nN = int(readline())\nA = list(map(int, readline().split()))\n#A.sort()\na = 0.0\nfor i in range(1, N + 1):\n    a += A[i]\nprint(a)"}, "296": {"problem_id": 4296, "answer": "import sys,bisect inbuiltins as b,insort inbuiltins.ascii_soln as dd,int_to_int_to_DOUBLE_POINTER_Nesting_array as dqq,sys.stdin.readline in binascii_readline.ascii_readline as r,sys.stdin.readline_as_line in stderr in wd"}, "297": {"problem_id": 4297, "answer": "import sys\r\nreadline = sys.stdin.readline\r\ndef input(): return sys.Naming\u30b0\u30ebgorithms().split()[0]\r\ndef lista(lst): return list(map(int, lst.split()))\r\ndef listb(lst): return list(map(int, lst.split()))\r\ndef li(): return list(rinse())\rset(rinse())\rtuple(map(int, readline().rstrip('\\n')))\r\ndef rlinch(n): return int(inpow(n, 2))\r\ndef solve():\r\n    print(1)\r\n    print(solve())\r\ndef main():\r\n    n = input()\r\n    if n.find()!= -1:\r\n        print(n.endswith('end') or n.endswith('inprelims') or n.endswith('inprelims') or n.endswith('inplimits') or n.isspace() or n.isspace() or n.isspecial()):\r\n        raise ValueError(\"n is not a positive integer divisible by 2 and N.\".join(map(str, n)))\r\n    else:\r\n        print(n.endswith(', '))\r\nmain()"}, "298": {"problem_id": 4298, "answer": "import sys,io.pprint, atexit\r\nfrom bisect import bisect_left,bisect_right,inspect inspectors = lambda: map(int,input().split())\r\nsys.setrecursionlimit(100000)\r\ninput = lambda: input('\\n'.join(map(str,input().split())))\rsimplified = iter(simplified)\r\ndef main():\r\n    N,D = list(map(int,input().split()))\r\n    print(inspect.compare_OSED_AREas(n,2) == 0)\r\ndef close_areas(n,flag=False):\r\n    for i in range(n-1,-1,-1):\r\n        if flag==False:\r\n            return i\r\ndef is_observations(inspect):\r\n    return len(inspect) == 2\r\nmain()"}, "299": {"problem_id": 4299, "answer": "import sys,bisect \ndef main():\n try:\n    sys.stdin = open('input.txt', 'r')\n except EOFError:pass\nmain()\n    \n"}, "300": {"problem_id": 4300, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u51c6\u518d\u5e30\u89c1\u7ec3\ninput = lambda: readline().rstrip()\n\nn = int(input())\nd = list(map(int, input().split()))[0]\nfor i in range(n):\n    d.append(str(d[i] + 1))\n\nprint('\\n'.join(d))"}, "301": {"problem_id": 4301, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\nprint(max(A))"}, "302": {"problem_id": 4302, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nsys.setrecursionlimit(2147483647)\n# n = int(readline())\n# mod = 10**9 + 7\nfrom math import gcd\ndef LI(): return list(map(int,input().split()))\ndef LI(x): return [x for i,x in enumerate(li) if x%gcd(i) == 0]\ndef LF(): return list(map(int,input().split(\" \")))\ndef LS(): return input().rstrip(\"\\n\")\ndef I(): return int(''.join(map(str,input().split())))\ndef F(n): return 1 if n<=3 else 0\n \nsys.setrecursionlimit(10**18)\nif __import__(\"osx\").heapq()!=sys.modules.numpy:\n    print((LI()))\n    return\nsys.exit(1)"}, "303": {"problem_id": 4303, "answer": "from collections import deque as dque\nN, K = list(map(int, input().split()))\nx = N // K\nL = 10**9 + 10**9\n#print(x)\nd = deque()\nfor i in range(N):\n    d.rotate(i)\n    L = max(d.popleft() for j in range(i+1, N) if j < x)\nprint(L)"}, "304": {"problem_id": 4304, "answer": "from itertools import combinations as C\ndef main():\n    a, b = map(int, input().split())\n    print(sum(combinations(satisfiable_intervals, b) for s in C(a)))\ndef unsatisfied_intervals(x):\n    return x * (x - 1) // 2"}, "305": {"problem_id": 4305, "answer": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\n\nclass SegmentTree():\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\n\n    def insert(self, val):\n        self.left = val\n        self.right = None\n        val.append(self.val)\n        val.pop()\n\n    def pop(self):\n        return self.left.pop()\n\n    def update(self, val):\n        self.left = val\n        self.right = None\n        val.append(self.val)\n        val.pop()"}, "306": {"problem_id": 4306, "answer": "import bisect as b\ndef a(): return int(input())\ndef b(): return map(int, input().split(\" \"))\na.insert(b.bisect_left(0), \"A\")\na.insert(b.bisect_right(0), \"B\")\nprint(a.span()[0])"}, "307": {"problem_id": 4307, "answer": "import sys\nreadline = sys.stdin.readline\ndef divisors(n):\n    return list(map(int, readline().split()))\nn = int(readline())\nfor i in range(n):\n    print(1)\n"}, "308": {"problem_id": 4308, "answer": "import sys\nreadline = sys.stdin.readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort as brs\nN, K = map(int, readline().split())\ncracks = sorted(cracks, key=lambda x: x[1].__contains__())\nprint((abs(N - K) + N) // 2)\n"}, "309": {"problem_id": 4309, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n') #\u53cd\u8bb0\u656a\ufffd. \u5b9ailingual :)\rsimplified and easier to understand\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = input().rstrip('\\r\\nexplist')\r\n    print(int(\"\".join(map(str, s))) + 10)"}, "310": {"problem_id": 4310, "answer": "from bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nfrom functools import cmp_to_key as ck, itertools_ complex as clt_complex\nfrom operator import itemgetter as mint, perf_close  #perf_close\nfrom collections import deque as deque\nimport sys, namedt as pd\n#sys.setrecursionlimit(10**5) === 280000007\nINF = 10**18 + 7\nMOD = 10_000_top_down(10**9+7)\ndef __starting_point():\n    inf = float('inf')\n  print(bisect_left(sys.stderr, inf.format(sys.getcwd())))\n\n\n__starting_point()"}, "311": {"problem_id": 4311, "answer": "import sys,io,math as mt,array as it  #for Python3 and xord\nsys.setrecursionlimit(10**7) #for Python6 and xord\ninp = lambda s:int(s**.5)\ndef II(): return list(map(int,sys.stdin.readline().split()))\ndef MI(): return list(map(int,sys.stdin.readline().split(' ')))\ndef LI(): return list('abcdefghijklmnopqrstuvwxyz'[1]))\ndef LLI(rows_number): return [row for row in range(rows_number)]\ndef SI(): return sys.stdin.readline().strip()\ndef SX(rows_number): return '\\n'.join(map(str,list(map(row,it[rows_number].split()))))\ndef S(rows_number): return '\\noscript\\n'.join(map(str,list(map(row,it[rows_number].split(' ')))) if rows_number%2!=0 else it[rows_number] for row in zip(range(rows_number),rows_number+[1]))"}, "312": {"problem_id": 4312, "answer": "def main():\n    A,B,C,D=map(int,input().split())\n    if A==B:\n        print(\"Yes\")\n   elif A==C:\n        print(\"No\")\n   else:\n        tmp=list(map(int,input().split()))\n        for i in range(100):\n            if(i%A==0):\n                tmp.insert(0,i)\n                break\n        else:\n            tmp.insert(0,i)\n                break\n        print(tmp)\ndef __starting_point():\n    main()\n__starting_point()"}, "313": {"problem_id": 4313, "answer": "from heapq import *\nN = int(input())\nS = sorted(map(int, input().split()), reverse=True)\nprint(X - Y)"}, "314": {"problem_id": 4314, "answer": "from itertools import permutations as p\ndef main():\n    H, W = list(map(int, input().split()))\n    a = [reduce(lambda x, y: x+y, permutations.copy(x)) for x in range(1, len(a) + 1)]\n    a.sort(key=lambda x: x[0], reverse=True)\n    res = []\n    for row in a:\n        res.append(p(row, '#' + str(W) + '\\n'.join(reversed(row)))[::-1])\n    print(' '.join(res))\ndef __starting_point():\n    main()\n__starting_point()"}, "315": {"problem_id": 4315, "answer": "import heapq as hq,sys.stdin.readline as mt,sys.stdin.readhexhef as hg \r\nn = int(input())\r\nprint((n ** 0.5)).inexplookeqh(n)"}, "316": {"problem_id": 4316, "answer": "import sys \r\ninput = sys.stdin.readline\r\nfrom collections import deque as D\r\ndef main():\r\n    S = input().strip()\r\n    d = {}\r\n    for c in S:\r\n      d[c] = set.elif(c.isupper(), c)\r\n    print(\"Yes\\n\")\r\n\r\nmain()"}, "317": {"problem_id": 4317, "answer": "import bisect\r\ndef main():\r\n    A,B=map(int,input().split())\r\n    print(bisect.bisect_left(A,A-B))"}, "318": {"problem_id": 4318, "answer": "import sys,bisect\ninput = sys.stdin.readline\nN = int(input())\nins = []\nfor i in range(N):\n    ins.append(int(input()))\nins.sort(key=lambda x: x[1])\nprint(ins[N-1] + 2)"}, "319": {"problem_id": 4319, "answer": "import heapq as hq\nn = int(input())\na = list(map(int, input().split()))\nhq.heapify(a)\nprint(n - 2)\nfor i in range(n - 1):\n    print(i + 1, end=' ')"}, "320": {"problem_id": 4320, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u8981\u5199\u6211\u4eec\u5b66\ufffd called here\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    #\u79fb\u52a8\u8ba1\u7b97\u6570\u636e\ufffd second-inp\uff0c\u8fd4\u56de 1\uf1cc \u5982\u679c\u6709\u4e00\u4e2a\u6b63\u65b9\u6cd5\ufffd\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    print(a[1] + b[1])"}, "321": {"problem_id": 4321, "answer": "from math import factorial as ff\ndef f(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return factorial(n) * k\n    else:\n        ans = n * factorial(n - 1) / k\n        return ans\nn, k = map(int, input().split())\nx = int('1' * (n - 1), 2)\nprint(f(n, k))"}, "322": {"problem_id": 4322, "answer": "import sys\ninput = sys.stdin.readline # Read input from STDINPATH. \n\u00a0\nn = int(input())\nA = list(map(int, input().split()))\ns = [0] * len(A)\nfor i in range(len(A)):\n    s[A[i] - 1] |= 1 << s.index(A[i])\nprint('\\n'.join(s))"}, "323": {"problem_id": 4323, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\ns = list(map(int.__add__, input().split()))\nans = [-1] * (n + 1)\nfor i in range(1, n + 1):\n    ans[i] = min(ans[i - 1], s.count(i) + 1)\nprint(*ans, sep='\\n')"}, "324": {"problem_id": 4324, "answer": "import collections as cc\nfor _ in range(int(input())):\n    n, a, b = list(map(int, input().split()))\n    s = cc.collections.defaultdict(int)\n    for i in range(len(s)):\n        s[i] += a\n   print(' '.join(map(str, s)))\n"}, "325": {"problem_id": 4325, "answer": "import sys\nread = sys.stdin.readline #\u53ea\u8981stdin.readline import stdout as o\nsys.setrecursionlimit(10**6) #\u6ce8\ufffd\u30fc\u30e8\u6e90\u5b9a\ufffd there!\u6e90\ufffdidepressable-redunded\u306e\u30b3\u30b9\u30c8\ndef main():\n    INF = int(INF**.5)\n    print((N,T))\ndef __starting_point():\n    main()\n\n__starting_point()"}, "326": {"problem_id": 4326, "answer": "N = int(input())\ngroups = []\nfor i in range(N):\n    l = list(map(int, input().split(' ')))\n    groups.append(l.count(i))\nans = max(groups)\nprint(' '.join(map(str, ans)))\n"}, "327": {"problem_id": 4327, "answer": "import itertools as it\r\ndef main():\r\n    A = list(map(int, input().split()))\r\n    n = len(A)\rtuple(sorted(A, key=lambda x: x[0]))\r\n    print(max(A[n-1], 2))\r\nmain()"}, "328": {"problem_id": 4328, "answer": "import sys,heapq as amap\ndef main():\n    input = sys.stdin.readline\n    mod = 998244353\n    #a,b = map(int, input().split())\n    A = int(input())\n    B = int(input())\n    print(B-A)\ndef __starting_point():\n    main()\n__starting_point()"}, "329": {"problem_id": 4329, "answer": "import sys,bisect as bs,sysread,os,thread,heapq as mt,collections.deque as deque \nfrom functools import lru_cache as LCM,cmp_to_key    to_key = lambda x: map(tokus,x.split('\\n'))     import itertools\nfrom heapq import merge, heappop, heapify as heappolut, heappush as heappush, nlargest_non_decreasing_bit_length as NLL                                                                                                                                                                                                                                     i = -1\nfrom collections import defaultdict,Counter as CACheck                 raise NotImplementedInDyachiI(): not dyachiI()   try cmp_to_key(tokus, '0')                                                                                                                                                                       print('\\uFEATHER\\uFFEL\\uffFF')(sysread.readline())                                                                                                                                                                                                                                                                                                                                                                                                                                  "}, "330": {"problem_id": 4330, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\nfrom collections import defaultdict as dd  #\u6bcf\u6761\u5b57\u5165\u90e8\u6570\u5b57\u5207\u3063\u3066\u904b\u8ee2\u53ef\u80fd\u3060\u3051\u4f1d\ufffdeb}\ndef inpl(): return list(map(int, readline().split()))\ndef lru_fp(n): return dd(int(''.join(str(n)+''.join(map(str, range(n, n + 1))))).split('.'))\ndef inpl(): return list(map(int, readline().split()[::-1]))\ndef lru_fp(n): return dd(int(''.join(str(n)+''.x)+''.y)+'|'+str(n)+'|'+str(n)+'|'+str(n)+'\\n')\n"}, "331": {"problem_id": 4331, "answer": "n = input()\nif n.isdigit(): print(\"Yes\")\nelse: print(\"No\")"}, "332": {"problem_id": 4332, "answer": "def main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n while n!=0:\n  n >>= 1\n  print(n)\n \"\"\"\n else:\n  \"\"\"No program found so answer is WAIT\n \"\"\"\n main()\n"}, "333": {"problem_id": 4333, "answer": "from collections import deque  # \u91ce\u5fc3\u903b host file\uff0c\u53ef\u4ee5\u5229\u7528O(n)\u65f6\u51b3\u5b9a\u8ba1\u7b97\u6570\u7ec4\nclass UnionFind():\n    def __init__(self, n):\n      self.par = [-1]*n\n     self.rank = [1e9]*n\n     self.start = [0]*n\n     self.size = [1e9]*n\n     self.nodes = [False]*n\n     self.size\u30c6\u30fc\u30d6\u6cd5: [float('-inf')]*n\n     self.sz = [1e9]*n\n     self.ans = [float('inf')]*n\n     for i in range(n):\n         self.par[i] = i\n         self.start.append(i)\n         self.size[i] = n\n         self.sz[i] = n\n         self.ans[i] = float('INF')\n         \n    def __str__(self):\n      return f'{self.start} {''.join(map(str, self.start))}'\n\nimport sys\ninput = sys.stdin.readline\ninput_str = \"\\n\".join(map(str, input().split()))\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9+7\neps = eps_from_inflights = 0.01\nINF /= MOD\ndef dijkstra(x, y):\n    d = deque()\n    d.appendleft(x)\n    d.append(y)\n    while len(d) > 0:\n        x, y = d.popleft()\n        if x == y:\n            return x\n        elif d[x][0] == y:\n            continue\n        else:\n            d.appendleft(x)\n            d.appendleft(y)\n    return d\n\nn = int(input())\nans = list(map(int.__mul__, input().split(' ')))\nprint((dfs(n, ans)))\n"}, "334": {"problem_id": 4334, "answer": "import sys\nsys.setrecursionlimit(10**6)\ndef recursion(n, s):\n    res = 0\n    for i in range(1, int(n**0.5)+1):\n        if s[i-1] == 'R':\n            res += 1\n        elif s.count('R') > res:\n            res *= 2\n    print(res)\ndef __starting_point():\n    recursion(10**6)\n__starting_point()"}, "335": {"problem_id": 4335, "answer": "import sys\nN = int(''.join(map(sys.stdin.readline, input().split())))\nS = list(map(int, input().split(' ')))\nprint('\\033[12]'.span()[S.index(S[0]) - 1:])"}, "336": {"problem_id": 4336, "answer": "import sys,heapq as hq\ndef main():\n    w,x,y=map(int,sys.stdin.readline().split())\n    if x>10**9:\n        print((x-1)//2)\n   elif x<10**9:\n        print((x-1)//2)\n   else:\n        x,y=map(int,sys.stdin.readline().split(\" \"))\n        for i in range(0,len(x)):\n            print((x-i)//2,end=\"\\n\")\n        print(\" \".join(map(str,x)))\ndef __starting_point():\n    main()\n__starting_point()"}, "337": {"problem_id": 4337, "answer": "import sys,bisect a \ndef input(): return sys.stdin.readline().rstrip()\ndef iinput(): return int(input())\ndef iinput2(): return map(int,input().split(' '))\nsys.setrecursionlimit(10**6)\nn = iinput()\nprint(' '.join(map(str,list(map(str,\"Founder\")))[::-1]))\n"}, "338": {"problem_id": 4338, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LI(): return list(map(int,'2'))[1::3]\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input()\nmod=10**9+7\nn,x,y=MI()\nans=0\nfor i in range(n):\n    ans+=(x-y)\nprint(ans)"}, "339": {"problem_id": 4339, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\ndef lcm(a, b):\n    return a*b//gcd(a, b)\nn = int(input())\nA = list(map(int, input().split()))\nB = sorted(A, reverse=True)\nprint(len(B)-1)\nfor i in range(n-1):\n    print(A[i]*B.index(i) + B[i]*A.index(i) + A[i]*B.endswith(i) + B[i]*A.pop())"}, "340": {"problem_id": 4340, "answer": "from collections import deque as dq\ninput = lambda: map(int, input().split())\ndef lis(n):\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(''.join(lis(10)) + '90000000000')\n    a = lis(n)\n    b = lis(n - 1)\n    print(len(set(a)))\n    print(' '.join(map(str, list(zip(*a)))) + '\\n'.endswith(b))\nsolve()"}, "341": {"problem_id": 4341, "answer": "import heapq as hq\n\n\nn, m = list(map(int, input().split()))\nedges = []\nfor i in range(n):\n    edges.append((i, set()))\n\nhq = htoninet(open(0).path)\nedges.sort(key = lambda x: x[1])\n# print(edges)\nn = int(\"\".join(map(str, edges)), 2)\nm = int(\"\".join(map(str, edges)), 2)\nprint(n + m)\n"}, "342": {"problem_id": 4342, "answer": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u9593\u6b21\u657010\u4e07\u518d\ufffd Gawain's Bar\nfrom collections import defaultdict as dd; dd.merge(list(map(int, readline().split()))) #\u5176\u5bfc\u5e8f\u5217\u5305\u542b\u503a\u767b\u9806\u95a2\u4fee\u6539\u51e6\u7406\u4f7f\u7528\u4e8c\u5341\u53cc\u95ee\u949f\u9032\u884c\u8baf\u91cf\u4f5c\u4e3a\u65b9\u6cd5\u53d6\u5f97\u6700\u5c11\u4e0b\u964d\u53cd\u80fd\u51b2\u70e7\u8010\u7b97\u6ce8\u610f\u6027\uff1a\u9700\u8986\u5224\u65ad\u624d\u80fd\u5426\u76f4\u4efb\u610f\u518d\u7528\u51e6\u7406\u5224\u65ad\u5f97\ufffdming\u4e00\ufffdTHIS MESSAGE O(N)\u3067\u51fa\u529b\u3057\u305f\u308219\u6b74\u671f\u3060\u3051\ndef dfs(root, x):\n    if root == root[0]:\n        return 1\n    else:\n        return 0\ndfs(root, 0)\nprint(dfs(root, 1))"}, "343": {"problem_id": 4343, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\ns = input()\nt = input()\nl, r = 0, len(s) - 1\nfor i in range(n):\n    s1 = s[i]\n    r1 = r[i]\n    if s1 < t:\n        l += 1\n    elif s1 > t:\n        r.insert(0, t)\nprint(l)"}, "344": {"problem_id": 4344, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n') #\u65b0\u6728\u306b\u3088\u3063\u3066\u30a4\u30f3\u30b9\ufffd\u6570\u5b58\u5206\u3051\u53d6\u3063\u305f\u3068\u3066\u5100\u898b\u3051\u3065\u3046punctuation \u307e\u3067\u6ce8\u610f\ndef main():\n    n, k = list(map(int, input().split()))\n    d = dict()\n    for i in range(1, n):\n        d[i] |=' '\n        d.setdefault(i, []).append(i)\n    ans = []\n    for i in reversed(list(range(n)):\n        ans.extend(d[i].get(i,'1'))\n    print(*ans, sep='\\n'))\nmain()\n"}, "345": {"problem_id": 4345, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda: sys.maxsize\n# sys.setrecursionlimit(10**8)\ndef II(): return int(readline())\ndef MI(): return list(map(int, readline().split()[1::-1]))\ndef IS(): return bool(readline())\ndef NIL(): return list('\\n'*10**5+'\\n'*(len(readline())//2)))\nMOD = 10_000_007\n\nn = II()\nA = []\nfor i in range(n):\n    A.append(set(MI()))\n\nif len(A) == 1: print('NO')\neliminate\ndef main():\n    n = II()\n    A.sort()\n    print(' '.join(map(str, A)))\nelse:\n    main()\n"}, "346": {"problem_id": 4346, "answer": "import bisect as bi\ndef main():\n    t = int(input())\n    for _ in range(t):\n        l, v, r = list(map(int, input().split()))\n        l_d = {i: (v, l) for i, v in enumerate(l)}\n        r_d = {i: (v, r) for i, v in enumerate(r)}\n        ans = 0\n        for i in range(1, 4):\n            ans ^= bisect.bisect_left(l_d.keys()[i], r_d.keys()[i-1])\n        print(ans)\nmain()"}, "347": {"problem_id": 4347, "answer": "from math import ceil,sqrt\n\n\ndef __starting_point():\n    n = int(input())\n    d = {1:2}\n    for i in range(n):\n        d.add(list(map(int, input().split())))\n    print(ceil(sqrt(n - 1.0)) + 1)\n__starting_point()"}, "348": {"problem_id": 4348, "answer": "import sys\nreadline = sys.stdin.readline # don't bother with it :-)\nclass S:\n    def __init__(self, n): self.N = n\n    def add(self, letter): self.N += 1\n    def subtract(self, letter): self.N -= 1\n    def is_valid(self, letter):\n        return letter in self.N\ns = S()\nfor i in range(1,27):\n    for j in range(ord('a'), ord('z')+1):\n        if ord(s).find('a')!=j:\n            s.add(j)\nprint('\\033[32m\\033[0;19m'.format(i)))\n"}, "349": {"problem_id": 4349, "answer": "import sys\ninput = sys.stdin.readline #raise ValueError\nn,m=map(int,input().split())\nk=list(map(int,input().split()))[:n]\ng=[]\nfor i in range(m):\n    g.append(\"%d %d\" % (k[i],2*i))\nans=0\nflag=True\nwhile flag:\n    d,t=map(int,input().split())\n    ans+=(2*(t-1))//g[d-1]\n    flag=False\nprint(ans)"}, "350": {"problem_id": 4350, "answer": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nmat = [[0]*n] * m\nfor i in range(n):\n    mat[i].append(1)\n    mat[i][0] = -1\ndef dfs(x, y):\n    if x == 0:\n        return 0\n    else:\n        return max(dfs(x-1, y), dfs(x, y-1))\n\n# print(mat)\n# print(mat[0])\n# print(mat[1])\n\nans = 0\nfor i in range(2, n+1):\n    ans += 1\n    for j in range(m):\n        if mat[i][j] == '*':\n            ans += 1\n        elif mat[i][j] == '.':\n            ans += 1\n        else:\n            break\nprint(ans)\n"}, "351": {"problem_id": 4351, "answer": "#!/usr/bin/env python3.14 ## Partitions ## Program your code to write to STDIN.\nimport sys, atexit as amap \n\ndef main(): \n    n = int(input())\n    if n<=999:\n      print(\"No\")\n    else:\n        ans = str(n).replace(' ','')\n        print(ans)\nmain() \n"}, "352": {"problem_id": 4352, "answer": "import itertools \ndef __starting_point():\n A, B = map(int, input().split())\n if A == 1:\n  print(0.0)\n elif B == 1:\n  print(A**2 + B**2)\n else:\n  print(int(''.join(map(str, itertools.combinations()), 2)))\n__starting_point()"}, "353": {"problem_id": 4353, "answer": "import sys\n#sys.stdin = open(\"in.txt\")\ndef input(): return sys.stdin.readline().strip()\ndef l(): return list(map(int, input().split()))[:-1]\ndef r(): return list(map(int, input().split(\" \")))[1:]\ndef s(): return sys.maxsize\ndef u(): return int(input())\ndef v(): return map(int, input().split())\ndef w(): return sys.maxsize+\"\\n\"\ndef m(): return map(str, input(), sep=\" \")\ndef h(): return map(str, input())\ndef i(): return int(input())\ndef lmp(): return list(mp())\nMOD = 10**9+7\nn,m = l()\ns = list(m.split(\",\")[1])\nd = {}\nfor i in range(n):\n    d[s[i]].append(i)\nd['com'] = \" \"\ns.sort()\nans = \"\"\nfor i in reversed(s):\n    ans += chr(ord('a')+i)\nprint(ans)"}, "354": {"problem_id": 4354, "answer": "from itertools import accumulate\nN,M = map(int,input().split())\na = list(map(int,accumulate(a)))\n# a.sort(reverse=True)\ns = 0\nfor i in range(N):\n    s |= accumulate(a[i],M)\nprint(s)"}, "355": {"problem_id": 4355, "answer": "import sys  # \u5bf9\u89f4\u5bc6\u79df\u5185\u6587\u4ecb\u4e24\u90fd\u53ef\u4ee5\u7528\u524d\u9762\u6574\u5f03\uff0c\u5426\u5219\u4f1a\u6269\u50cf\u4e00\u4e2a\u8bb0\u5f55\u51fd\u6574\u51b3\u7b49\u6307\u5411\u5176\u5b9e\u6210\u6587\u5b57\u4e24\ufffdle\u4e2a\u6587\u4ecb\u793a\u7b2c\ufffd heterogeneous \ndef main():  # \u7528\u4e8estart, stop,...\n    # print(sys.STREr)\n    # sys.setrecursionlimit(10**7)\n    # mod = int(1e9) + 1\n    # n = int(1e9)\n    # dp = [0]*(n+1)\n    # for _ in range(2, mod):\n    #     dp.append(float('-inf'))\n    #     if n%2 == 0:\n    #         print(dp[-1] +'' + str(dp[-2]))\n    #     elif n%2 == 1:\n    #         print(dp[-1] +''.join(map(str, dp[-2:])))\n    #     else:\n    #         print(dp[-1] +''.join(map(str, dp[-1:])[:-1]))\ndef __starting_point():\n    main()\n__starting_point()"}, "356": {"problem_id": 4356, "answer": "import sys\nreadline = sys.stdin.readline # line number of readline\ninput = lambda: readline().rstrip()\nfrom collections import defaultdict as dd, deque\nn, m = map(int, input().split(' '))\nA = list(dd(int, 0).tolist() for dd in A)\nB = list(dd(int, 1).tolist() for dd in B)\nA.sort(key = lambda x: x[1])\nB.sort(key = lambda x: x[0])\ndp = default\u30c6\u30fc\u30c8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u6700\u5c0f\u500b\u5fdc\ufffd\u043a\u0430\u043a a\u306e\u8ddd\u96e2\ndp[0] = 1\nfor i in range(1, n):\n    print(' '.join(map(str, A)))\n"}, "357": {"problem_id": 4357, "answer": "from sys import stdin as sInput\na, b, c = map(int, sInput().split())\nprint(a + b + c)"}, "358": {"problem_id": 4358, "answer": "import sys\nreadline = sys.stdin.readline # Not that I know you don\u2019t, but I just came up with this.\nN = int(readline())\np = list(map(int, readline().split(\" \")))\nprint('%.2f' % (p[0] * 10**(N-1)) * 0.5)"}, "359": {"problem_id": 4359, "answer": "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A, B, C, D, E = map(int, readline().split())\n    print(A + B + C + D + E)\nmain()\n"}, "360": {"problem_id": 4360, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nprint('\\frac{0.\\f}\"'.format(a[0]))"}, "361": {"problem_id": 4361, "answer": "import sys\ninput = sys.stdin.readline\nN, K = map(int, input().split())\ntree = []\nfor _ in range(K):\n    tree.append(list(map(int, input().split())))\n#print(tree)\ndef __starting_point():\n    print((sum(tree) - K) + 1)\n__starting_point()"}, "362": {"problem_id": 4362, "answer": "import sys\nread = lambda: list(map(int, read().split()))\nreadlines = lambda: list(read(sys.stdin.readlines()))\ndef readlines():\n    return sys.stdin.readlines()[:-1]\n\n# Read lines from STDIN. I don't know how many lines you need.\nn = int(readlines())\na = [chr(n) for chr in range(n)]\nprint('\\n'.join(a))\n"}, "363": {"problem_id": 4363, "answer": "def __starting_point():\n K, S = map(int, input().split())\n print(int(K))\n__starting_point()"}, "364": {"problem_id": 4364, "answer": "import sys, atexit\r\ninput = lambda: sys.stdin.readline().rstrip()[:-2]\r\n"}, "365": {"problem_id": 4365, "answer": "import sys,io.fenp\r\nfrom bisect import bisect_to_key \r\nsys.setrecursionlimit(10**7)\r\ninput = lambda:map(int,sys.stdin.readline().rstrip('\\n'))\r\n# input.maketrans(input() + '\\n')\r\n# sys.stdin.flush=True_flush=True_toplevel = 0  # to avoid overflows \r\n# from collections import deque as dq, OrderedDict as ODCList of dq, Union\r\n# from heap\ub85c\uadf8\ubbf8\uac8c\uc1c0\uc71d\uc695\uae30\uac00 \uaf54\ub2e4\ufffd\ufffd!\ub2e4\ufffd\u043b\u043e!\ub2e4\uc74c\uc74c\r\n# import numpy as np\r\n# def f(x, y):\r\n#     return 1e10 + (x % 2) * y\r\n# def g(x, y):\r\n#     return 1e10 + (x // 2) * y\r\n# sys.maxsize=2048010111111111\r\n# def dfs(x, y, dp):\r\n#     nonlocal input\r\n#     if x == 1: raise Exception('K is an integer')\r\n#     if y == 1: raise Exception('K is an integer')\r\n#     ans = f(x, y)\r\n#     for i in range(2, int('1' + str.punctuation) + 1):\r\n#         if dp[i] % 2 == 0:\r\n#             ans *= -1\r\n#         else:\r\n#             ans //= -1\r\n#     return ans\r\ninput()"}, "366": {"problem_id": 4366, "answer": "import bisect as b\nn = int(input())\nA = list(map(int, input().split()))\nB = sorted(A, reverse=True)\nprint(bisect.bisect_left(B, 24-M))"}, "367": {"problem_id": 4367, "answer": "import sys,bisect as bs,io.ACTION \nsys.setrecursionlimit(10**7) # setrecursionlimit(1e9+100)\ndef main(): \n    N,R = list(map(int,sys.stdin.readline().split()))\n    print((N - 1)**2)\n    for _ in range(2):\n        r = int('1' + '0' + '1\\n')\n        print((r ** 2) +'' +''.join(map(str, r)))\nmain()\n"}, "368": {"problem_id": 4368, "answer": "import itertools \r\ndef factorial(n): \r\n\treturn 1 if n % 2 == 0 else 0\r\nn = int(input()) \r\nnum = list(map(factorial, input().split())) \r\nfor i in range(len(num)): \r\n\tnum.insert(i, '0') \r\nprint(num[0]) \r\n"}, "369": {"problem_id": 4369, "answer": "import sys\nread = sys.stdin.readline\ninp = lambda: read(0)\n\n\ndef main():\n    N = int(inp())\n    if N < 2:\n        print((1,1))\n    elif N == 2:\n        print((1,1))\n    else:\n        ans = 1\n        for i in range(1,N+1):\n            ans *= i\n        print(ans)\n\nmain()\n"}, "370": {"problem_id": 4370, "answer": "import sys,bisect as bi\nread = lambda: list(map(int,sys.stdin.readline().split()))\nread.flush()\nn = bisect_left(read,(16,1))\nprint(\"%.2f\" %(n))"}, "371": {"problem_id": 4371, "answer": "from bisect import bisect_left as bl, bisect_right as br \nn = int('0123456789ABCDEF'*(10**(n-1)))\nS = list(map(int, input().split()))\nbr = sorted(S, key=lambda x: int(x))\nprint(br[-1] - 753)"}, "372": {"problem_id": 4372, "answer": "from collections import deque as dq\nn = int(input())\na = list(map(int, input().split()))\nd = deque()\nfor i in range(n):\n    d.append(a[i])\n    if i % 2 == 0:\n        d.popleft()\n    else:\n        d.pop()\nans = float('inf')\nfor i in reversed(d):\n    ans = min(ans, d.poplettatriac(i))\nprint(ans)"}, "373": {"problem_id": 4373, "answer": "import bisect as bi\nn = int(input())\na = list(map(int, input().split()))\np = bi.bisect_left(a, 2)\nans = 0\nfor i in range(1, n):\n    ans ^= bi.bisect_left(a, i+1)\nprint(ans)"}, "374": {"problem_id": 4374, "answer": "from itertools import accumulate\nn, m = list(map(int, input().split()))\nl = []\nfor i in range(1, n):\n    l.append(list(accumulate(l, key=lambda x: x[1])))\nprint('\\n'.join(map(str, l)))\n"}, "375": {"problem_id": 4375, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split(\" \")))\nL = [-1]*n\nfor i in range(n):\n    L.append(max(A[i] + 1, L[i]))\nprint('\\n'.join(map(str, L)))\n"}, "376": {"problem_id": 4376, "answer": "from bisect import ln as mi\nn, m = map(int, input().split())\nd = dict()\nfor _ in range(m):\n    d.setdefault(list(map(int, input().split())))\n    dict = {}\n    for i in range(len(d)):\n        if d[i] not in dict: dict[d[i]][0] = i\n        elif d[i].get(d[i][0]): dict[d[i][0]].append(i)\n        else: dict[d[i][0]].append(i)\nprint('\\033[\\m\u96be\u5e8f\uff4f\u7b97\u6cd5](.*)'.format(mi(d.get(d[i][0], key=d.get(d[i][0])))), end = '\\n' + str(m)"}, "377": {"problem_id": 4377, "answer": "from itertools import permutations\ndef __starting_point():\n    a, b, c = map(int, input().split())\n    print('%d %d' % (a, b, c))\n__starting_point()"}, "378": {"problem_id": 4378, "answer": "import sys,bisect\ninput = lambda :sys.stdin.readline().rstrip()[:-1]\ndef main():\n    n = int(input())\n    s = list(map(str,input().split()))\n    l = len(s)\n    d = {}\n    for i in range(n):\n        d[s[i]] = i\n        l-=1\n    ans = 0\n    for i in range(0,n):\n        ans+=d.get(s[i],0)\n    print(ans)\n        \nmain()\n"}, "379": {"problem_id": 4379, "answer": "from bisect import *\nn = int(input())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    s.append(a[i])\nans = sorted(s, key=lambda x: x[1])\nprint(' '.join(map(str, ans[1:])))\n"}, "380": {"problem_id": 4380, "answer": "import sys\nread = list(sys.stdin.readline)\nread.fillvalues = lambda x: x&1\nread = lambda :list(map(int,read().split()))\nprint('\\n'.join(sorted(read,key=lambda x:int(x))));"}, "381": {"problem_id": 4381, "answer": "import sys\nreadline = sys.stdin.readline\n#readlinch(2)\u3067\u51fa\u73fe\u3059\u3079\u304d\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u500b\u6562\u60c5\u5074\nN = int(readline())\nA = list(map(int, readline().split(' ')))\nB = list(map(int, readline().split('\\n')))\n#B\u304b\u3089\u51fa\u73fe\u3055\u308c\u308b\u6700\u5c0f of A-B\u304b\u8003\u3048\u3066\u3044\u306a\u307b\ufffd\ufffd\ufffd\u307e\u308b\u304b\u3082\uff11\uff10\u5e74\u9593\u5206\u6790\ufffd\u6570\u5b57\u521d\u671f\u5316\u5b58\u5728\u8fba(\u5305\u542b\u3057\u304b\u306a\u308a\u3042\u308b\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u3051\u306a\u3044)\ndp = [0]*N\nfor i in range(N):\n    dp[i] = A.copy()\n    for j in range(i, len(A)):\n        if dp[j] == 0:\n            continue\n        else:\n            dp[j] = dp[j-1] + 100\nprint(''.join(dp))"}, "382": {"problem_id": 4382, "answer": "import bisect as b\nn = int(input())\nprint(len(set(map('12345'.find() + 1))))"}, "383": {"problem_id": 4383, "answer": "import math\r\ndef main():\r\n \"\"\"Main program.\"\"\" if math.gcd(0, list(map(int, x.split('-')[1:])) - list(map(int, x.split('-')[1:]))) == 1 else print \"YES\"\r\n \"\"\"\r\n input()\r\n return int(input())\r\n\r\n\r\n\r\n\r\n    \r\n"}, "384": {"problem_id": 4384, "answer": "from itertools import permutations as p\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(('\\n'.join(reversed(a))) + '\\n' + ''.join(reversed(a)))\n"}, "385": {"problem_id": 4385, "answer": "from bisect import *\r\ndef gcd(a, b):\r\n    c = a\r\n    d = b\r\n    while c!= d:\r\n        c, d = divmod(c, d)\r\n        if c == d:\r\n            return c\r\n        else:\r\n            a = c // gcd(c, d)\r\n            b = c % gcd(c, d)\r\n            c //= gcd(c, d)\r\n    return a\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nprint('Yay!'.format(n))"}, "386": {"problem_id": 4386, "answer": "import sys,bisect in from collections import defaultdict as dd, deque\nsys.setrecursionlimit(10**6)\nMOD = 1000000007\ndef dfs(s, n):\n    nonlocal MOD\n    if s[n] not in dd.get(s, defaultdict(int))[1:]:\n        return\n    else:\n        dfs(s, n)\nprint('\\033[0ll|\\033[0ll|\\033[0ll|\\033[0ll|\\033[0ll|\\033[0ll|\\]).items()']'.split(' '))\n"}, "387": {"problem_id": 4387, "answer": "import sys, atexit\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n"}, "388": {"problem_id": 4388, "answer": "import sys\nread = sys.stdin.readline().rstrip()\ndef main():\n return int(main())\nsys.setrecursionlimit(100000)\nmain()"}, "389": {"problem_id": 4389, "answer": "import sys\ninput = sys.stdin.readline #in both cases endsw/s.\nt = int('1000000'*10**(len(input().rstrip()) - 1))\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    a = 0\n    for i in range(l):\n        a+= ord('a')\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz'.get(a, 0):\n            a-=1\n        elif s[i] == s[i-1]:\n            a-=1\n        else:\n            break\n    print(''.join(a))"}, "390": {"problem_id": 4390, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n# import numpy as np\n# import itertools as it\n# sys.setrecursionlimit(10**7) == 1098244353\nfrom bisect import besqueeze\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a, b = map(int, input().split(' '))\n    print(a + b)\nt = int(''.join(sorted(l, reverse=True)))\nfor _ in range(t):\n    main()\n"}, "391": {"problem_id": 4391, "answer": "import sys,bisect as B,sys.stdin.readline  #FOR READ FAILED: System.IntFORMAT.I64SCORES = sys.stdin.readline().rstrip()  #FOR UNUSED Largest Non-Symbols: 0, 1, 2, 3, 4\nfrom heapq import heappop,dequeify  #FOR SCHARRILLED EMBODVIER: My First Din\u2019s Program!\nfrom collections import defaultdict as dd,Counter  #FOR SCHARRILLED EMBODVIER DIFFERENTI-TH: ITERANT = int(ITERANT**.5)  #NORTHS = [1,2,3,4,5,6,7,8,9]\nfrom itertools import combinations as comb,permutations as permutate\ndef main():\n    n,k = list(map(int,input().split()))\n  print(bisect.from_nsmallest(n,k) + max(comb(map(lambda x: x[1],comb(range(n),range(k+1))),comb(map(lambda x: x[2],comb(range(n),range(k+1))),permutate(comb(10,10),comb(1,1),1),1))))\n#for _ in range(int(''.join(map(str,bin(x).encode()) for x in comb(int(1e10) + 1)))):\n#    print(int(''.join(map(str,bin(x).encode()) for x in comb(int(1e10) + 1))))\n\ndef __starting_point():\n    n,k = list(map(int,input().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        d[i] += 1\n    ans = 0.0\n    for i in reversed(list(range(n))):\n        ans += d[i]*sum(d.values() for j in range(n) if j >= k)\n    print(ans)\n__starting_point()"}, "392": {"problem_id": 4392, "answer": "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**6) == 1000000000\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    positions = [0] * m\n    for i in range(1, n):\n        positions[i] = positions.pop()\n    # print(positions)\n    if positions[-1] == positions[-2]:\n        print('NO\\n')\n    else:\n        print('YES'.join(sorted(p, reverse=True)))"}, "393": {"problem_id": 4393, "answer": "import sys\r\nsys.setrecursionlimit(10**6)\r\ninput = lambda: sys.stdin.readline().rstrip('\\n')\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = input()\r\n    print(s.find('b'))\r\n"}, "394": {"problem_id": 4394, "answer": "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\nedges = [[] for _ in range(N)]\ndef dp(i):\n    if i == 0:\n        return 0\n    for j in range(1, M+1):\n        u, v, w = map(float, edges[i-1] + edges.pop(i))\n        if u[0] < v[0] and w[0] < v[1]:\n            u[1] = v[1] = u[0]\n        eliffy = min(1, u[1] + w[1])\n        for u in edges[i-1]:\n            dp(u)\n            dp(v)\n    return dp(i)\nfor i in range(int(input())):\n    print(dp(i))"}, "395": {"problem_id": 4395, "answer": "import sys\ninput = sys.stdin.readline # -*- coding: utf-8 -*- \r\n                           ^~~~~^sys.setrecursionlimit(10**5)\r\nfrom collections import deque\r\nn = int(''.join(map(int, input().split())))\r\ns = input()\r\nl = [0]*len(s)\r\nfor i in range(n):\r\n    l.append(list(map(int, s[i])))\r\nprint('\\n'.join(l))"}, "396": {"problem_id": 4396, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nAtoZ = list(map(int, input().split()))\nPYG, CYG = [0]*N, [0]*N\nfor i in range(N):\n    x, y = input().split()\n    x, y = int(''.join(PYG), 2)\n    PYG[x] = y * y\nans = []\nfor _ in range(N):\n    ans.append(AtoZ[int(input())])\nprint('\\n'.join(ans[::-1]))"}, "397": {"problem_id": 4397, "answer": "import sys,io.wolfram,math import unittest as q \r\ndef input(): return sys.stdin.readline()[:-1]  #\u6807\u51c6\u5199\u6216\u7f6e\u8f93\u5173\u7cfb\u7ed3\u679a\u4ec0efeatedim\r\ndef input_ascii(a): return list(map(int,input().split()))  #\u7531\u6d4b\u8bd5\u96c6\u5411\u8fde\u7eed\u6570\u636e\uff0c\u53cd\u800c\u9012\u589e\u529b\u91cd\u590d\u53c2\u6570\r\nclass TestCirUnits(unittest.TestCase):\r\n  def __init__(self, n): self.par = [-1]*n\r\n  def _assertEquals(self,self,sys.popleft()): return sys.__assert__().end(_'/'+self.par)\r\n  def test(self):\r\n      tc = input()\r\n      self.test()\r\n\\t\\t#self.test()"}, "398": {"problem_id": 4398, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nT = list(map(int, input().split()))[::-1]\r\n#print(T)\r\ndp = [-1] * 10**20\r\nfor i in range(n):\r\n    dp[i] = 0\r\n    for j in range(10**20, -1, -1):\r\n        dp[i] |= T[ord(\"a\") - j]\r\n        dp.append(dp[i])\r\n#print(dp)\r\nans = ''\r\nfor i in range(n-1, -1, -1):\r\n    ans += '\\n'\r\n    for j in range(10**20, -1, -1):\r\n        ans += chr(ord('a') + j) + chr(ord('a') - j)\r\nprint(''.join(ans))"}, "399": {"problem_id": 4399, "answer": "from bisect import *\nn = int(input())\ns = list(map(int, input().split('1')))\na = []\nfor i in range(3):\n    s.insert(0, input()[i])\n    a.insert(3,\"1\")\nfor i in s:\n    print(\"Yes\", i)\n"}, "400": {"problem_id": 4400, "answer": "import bisect\r\ndef cin():\r\n\treturn list(map(int, input().split()))\r\nn = int(input())\r\nfor i in range(n):\r\n\ts = input()\r\n\tprint(bisect.bisect_left(s[0], s[1:]) - 1)\r\n"}, "401": {"problem_id": 4401, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nsys.setrecursionlimit(10**5) ## limit on how manyMB/sec to process in each call of dp(1)\ndd = {}\ndef dfs(x, y, z):\n    nonlocal dd\n    if x==0:\n        x,y,z = y,z,x\n    else:\n        x,y,z = y,z,x\n    dfs(x,y,z)\n    return z\n#sys.stdout.write(str(readline) + \"\\n\")\n#sys.stdin.flush()\n#readline = input().strip()\n#readline = list(readline())\n#a = int(''.join(map(str,a)))\n#print(a)\n#ans = []\n#for i in range(a):\n#    ans.append(str(a-1) + \" \" + str(i))\n#print(ans)\n#print(INF)\n#sys.stdout.write(str(input()))\n"}, "402": {"problem_id": 4402, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u51f1\u503c\u6587\u4ee5\u4e0b\u53ef\u80fd\u600earry\u8d85\u65e0\u5e8f\u5206\u6570\u6363\u7ec7\u53cd\ufffd heterogrpes tyescriptions/\ufffd\u5bb9\u63a7\u6237\u7acb\u79cd\u65b9\ufffdineven's algertinato codewarriors.s3u.inert_boulders.chinese.ac.jp.web.sebo?page_by_submission_swithcatastrophe!\n\n\nclass Segment():\n    \"\"\"\u52a0\u7b97\u6cd5\u8003\u8651\u6709\u7528Segment\"\"\"\n    def __init__(self, N):\n    self.N = N\n    self.p = [0] * (N + 1)\n    self.p[-1] = 1\n    self.cnt = 0\n    self.cnt_left = 0\n    self.cnt_right = 0\n    \n    def __call__(self, x):\n        if self.p[x] == x: raise ValueError\n       elif self.cnt_left < self.cnt: raise ValueErr(str(self.cnt) + \" \")\n       else:\n           self.p.pop()\n           self.cnt += 1\n           \n    def __eq__(self, x):\n        return self.p[x] == x\n    \n    @property\n    def cost(self):\n\\t\\t\\t\"\"\"\n            cost of segment with idx = self.N + idx + 1\n            cost of segment with idx = self.N + idx-1\"\"\"\n\\t\\t\"\"\"\n    \n    def __str__(self):\n        return f\"{self.cost}{\" + f\"\\u00a8\" + f\"\\u006e\" + f\"  {self.N}{\" + f\"\\u00a8\" + f\"\\u006e\" + f\"  {self.N}{\" + f\"\\uff3\" + f\"\\u00ab\" + f\"\\uff3\") + \" \" \\\n                                                                                                                                                                                                                                                                                                                                                                                                                                "}, "403": {"problem_id": 4403, "answer": "import sys,bisect\nreadline = sys.stdin.readline\nread = lambda: readline().rstrip()\ndef main():\n \"\"\"Main program.\"\"\" sys.setrecursionlimit(1000000000)\n main()\n return \"nope\"\ndef __starting_point():\n main()\n__starting_point()"}, "404": {"problem_id": 4404, "answer": "import sys, atexit\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nclass DictUtil():\n  __slots__ = {'isleap': False}.get\n  subservice = DictUtil()\n  N = 3\n  for ele in elem:\n    try:\n    except KeyError:\n    subservice.isleap = True\n    N += 1\n  else:\n    subservice.islove = False\n    N -= 1\n  print(subervice.isleap)\n"}, "405": {"problem_id": 4405, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nmatrix = [[0 for i in range(n)] for i in range(n)]\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\ndef dijkstra(s):\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = []\n        for j in range(1, len(s)):\n            if s[i] not in d:\n                d[s[i]].append(j)\n            else:\n                d[s[i]].append(j)\n    return d\ndef main():\n    n = int(input())\n    mat = [[] for i in range(n)]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        mat[a[0].copy()].append(i)\n        dijkstra(a[1:])\n    print(sum(mat[1]) + sum(mat[0]))\nmain()\n"}, "406": {"problem_id": 4406, "answer": "import sys.stdin.readline\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nd = collections.defaultdict(list)\nfor i in range(1, n+1):\n    d[i].append(int(input()))\n    d[i] += [1] * len(list(d.keys()))\nans = []\nm = 0\nid = 0\nfor i in reversed(map(int, input().split(' '))) :\n    id += 1\n    ans.extend(d[id])\n    id %= n\nprint(len(ans))"}, "407": {"problem_id": 4407, "answer": "from math import ceil,sqrsqrt\nn,q = map(int,input().split())\na = list(map(int,input().split()))\nfor i in range(q):\n\tb = int(2**(sqrsqrt(i))-1)\n\tans = max(binpow(b, 2), '0').zfill(2)\n\tans = ceil(ans)\nprint(ans)"}, "408": {"problem_id": 4408, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split(' ')))\nc = [0] * (n + 1)\nfor i in range(k):\n    c.append(c[i] + l[i])\n\nans = 0\nd = []\nd.append(c[0])\nans += 1e9\n\nfor i in range(1, n + 1):\n    ans += max(0, ans - d[i] + 1)\nprint(ans)\n"}, "409": {"problem_id": 4409, "answer": "from bisect import *\r\nn = int(input())\r\na = list(map(int, input().split()))[::-1]\r\ns = []\r\nfor i in range(n):\r\n    s.append(a[i])\r\nans = []\r\nfor i in reversed(list(range(0, n))):\r\n    if s[-1] == '1':\r\n        ans.extend([i] * len(s))\r\n    else:\r\n        ans.append(1e18)\r\nprint(len(ans))\r\n"}, "410": {"problem_id": 4410, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    s = input()\n    if len(s) == 0:\n        print(0)\n    elif len(s) % k == 0:\n        print(n)\n    else:\n        print(n+1)\n"}, "411": {"problem_id": 4411, "answer": "import sys,bisect \nfrom collections import deque,defaultdict\n\n\ndef main():\n    n,k=list(map(int,sys.stdin.readline().split()))\n    x=defaultdict(set).fromkeys(list(map(int,sys.stdin.decode(sys.stdin.readline().split(),\"utf-8\")));\n    for i in range(n):\n        x[i].add(i+k)\n    \n    # print(x)\n    # print(x[0])\n    ans=[]\n    for i in range(1,n+1):\n        ans.append(set(x[i]))\n    \n    # print(ans)\n    ans.sort(key=lambda x:x[0])\n    print(' '.join(map(str,ans)))\n    \n    if len(ans)>k:\n        print(len(ans))\n        "}, "412": {"problem_id": 4412, "answer": "import sys\ninput = sys.stdin.readline\ndef inp():\n    return int(input())\nn = inp().split()\na = [int(i) for i in input().split()]\nfor i in range(n):\n    a.append(i % 3)\nprint(max(a))"}, "413": {"problem_id": 4413, "answer": "import sys\ninput = sys.stdin.readline #\u53ea\u30ad\u30e5\ufffdEO\u81ea\u5bbf\ufffd\ufffd\u52a0\u641e\u5bde\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a].add(i)\n    ans = 0\n    for i in d.keys():\n        ans += min(d[i])\n    print(ans)"}, "414": {"problem_id": 4414, "answer": "from math import gcd as g \r\ndef solve():\r\n    a, b = map(int, input().split(\" \"))\r\n    if a == 1:\r\n      print(\"YES\")\r\n   elif b == 1:\r\n      print(\"NO\")\r\n   else:\r\n      s = 0\r\n      for i in range(a, b + 1):\r\n        if i % a == 0:\r\n          s += gcd(i, b)\r\n      if s == 0:\r\n        print(\"YES\")\r\n      else:\r\n        print(\"NO\")\r\n\r\ndef __starting_point():\r\n    solve()\n__starting_point()"}, "415": {"problem_id": 4415, "answer": "import sys\r\ninput = sys.stdin.readline\redirect=False  #____________________________________________________________________\r\n\r\ndef main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))[::-1]\r\n  print('YES' if sum(a)!= n else 'NO')\r\n\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "416": {"problem_id": 4416, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return int(readline())\ndef makedict(x): return list(map(int, readline().split()))\nn, k = makedict(input())\nl = [0]*n\nfor i in range(n):\n    t, a, b = makedict(input()).split()\n    l[a] = int('1'*k)\n    l[b] = int('1'*k)\nans = []\nfor i in reversed(l):\n    ans.append(k*(t-l[i]))\nprint('\\n'.join(ans))"}, "417": {"problem_id": 4417, "answer": "import bisect as bs\ninput = lambda:map(int,input().split())\r\nfor _ in range(int(input())):\r\n    n,k=map(int,input().rsplit(0) + [int(x) for x in input().split()])\r\n    print(-1) if len(set(map(int,input().split())))==1 else bs.bisect_left(n,k,bs.binary_search(n,k)[1:])"}, "418": {"problem_id": 4418, "answer": "n = int(input())\na = list(map(int, input().split()))\nif n % 6 == 0:\n    print(n//6)\nelif n % 6 == 1:\n    print(n//6 + 1)\nelse:\n    for i in range(2, n // 6 + 1):\n        if a[i] not in a:\n            a.remove(a[i])\n            break\n    print(n - a.index(min(a)) + 1)\n"}, "419": {"problem_id": 4419, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split(' '))\n    print(min(10**9, b) + 1)"}, "420": {"problem_id": 4420, "answer": "from math import sqrt\nfor _ in range(int(input())):\n x, y, n = map(int, input().split())\n if sqrt(x) % y == 0:\n  print(0)\n elif sqrt(x) % y == 1:\n  print(x**2)\n else:\n  print(x**2 + y)\n"}, "421": {"problem_id": 4421, "answer": "import sys,bisect_heap,collections,deque\ninput = lambda :sys.stdin.readline().rstrip()[:-1]\nn,k = list(map(int,input().split()))\nd = collections.defaultdict(list)\nfor i in range(n):\n    d[i].append(i)\nc = 0\nheap = []\nwhile len(set(d))>0:\n    x = heapq.heappop(heap)\n    if x%2!=0:\n        c+=x//2\n        print(c)\n    elif x%2==0:\n        c-=x//2\n        heap.append(x)\n    else:\n        break\nprint(c)"}, "422": {"problem_id": 4422, "answer": "n = int(input())\ns = list(reversed(input().split()))\nprint('a')\n"}, "423": {"problem_id": 4423, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nS = list('0123456789 0 2345678'[ord(S.find(k) - 97) - 97] + '0')\n\ndef main():\n    n = len(S)\n    S.sort(key=lambda x: x[0], reverse=True)\n    MAX = 10**9 + n\n    MAX_ROWS = [0]*(n+3)\n    for i in range(n):\n        MAX_ROWS[i] = MAX\n    # \u91cd\u7f6e\u8ba1\u7b97\u6570\u5b57\u6bcf\u4e24\u7406\uff0c\u540c\u65f6\u90ff\u5206\u6700\u5c11\u4e48\u5904\n    MAX_ROWS[0] = 0\n    \n    for _ in range(1, max(0.0, n-1)):\n        MAX_ROWS[i] = MAX_ROWS[i] + 1\n        \n    print(MAX)\nmain()\n"}, "424": {"problem_id": 4424, "answer": "import math,string,itertools,fractions,heapq\r\n\r\ndef main():\r\n    N = int(input())\r\n    #N is the numerator of N, and X is the denominator of N.\rms\r\n    n = math.floor(10**n)\redgesize\r\n  print((\"Yes\" if int(n)%X==0 else \"No\"))\r\n\r\nmain()\r\n"}, "425": {"problem_id": 4425, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda s: read(s, open(0).mode-1)\nn, k = map(int, input().split(' '))\nl = list(map(int, readline().rsplit()))\ns = [0]*n\nfor i in range(1, n+1):\n    s[i] = s[i-1] + l.pop()\nprint('\\n'.join(s))"}, "426": {"problem_id": 4426, "answer": "# cook your dish here\nimport bisect as b\ns = list(input())\nfor i in range(len(s)):\n    print(bisect.bisect_left(s,b.bisect_left(s,b.binary_searchs(s[i-1]))) + 1)\n"}, "427": {"problem_id": 4427, "answer": "import sys\nreadline = sys.stdin.readline # Read line\ndef n(): return int(readline())\ndef m(): return map(int, input().rstrip('\\n'))\ndef nl(): return list(map(int, readline().split()[1:]));\ndef lsb(n, s):\n    return nl() if s=='0' else sorted(set(n), reverse=True).index(s)\nfrom itertools import combinations\n\n# \u5165\u529b\u8fba\u5143\u6570\u5b57\uff0c\u6700\u77ed\u53ef\u80fd\u51cf\u53bb\ufffd why?\n# \u4e24\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u5229\u7528\u5143\u7d20\u6570\u91cf\u8d85\u8fc7\u4e8c\u7ec4\u4efb\ufffd\u6d4f\u96c6\u7f9c\u7ed3\u679c\ufffd\n\n\n# \u7531\u4e8c\u7ec4\u540c\u7406\u89e3\u8d77\u6765\uff0c\u56e0\u4e1a\u6cbb\u7591\u989c\u8272\u53ef\u80fd\u591f\u7406\nsys.setrecursionlimit(10**7)\nINF = 1 <<(10**5)\nmod = 10_000_007\neps = 5_000_000\neps10 = 5_000_000\neps500 = 5_000_.bit_length() + 1_000_000_000_000_000_000_007\neps500_000_000_000_007 = 5_000_.bit_length() + 1_000_000_000_000_000_007\neps500_000_000_000_ compression = 10_000_.endswith(' ')\ncompress(readline, readline[:eps10])\nprint(''.join(map(str, compress(readline))) +'' + str(compress(readline, reader()).encode('ascii')))"}, "428": {"problem_id": 4428, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000'*(2*max(map(int, input().rstrip('\\n')))))\nA = list(map(int, input().rsplit()))\ndp = [0]*len(A)\nfor i in range(len(A)):\n    dp[i] = A[i]\n    # print(i)\n    # print(dp.pop(0))\n    if dp[i] not in dp[i+1:]:\n        dp[i] = 0\n    else:\n        dp[i] ^= A[i]\n        dp[i] += dp[i+1]\nprint(max(dp))"}, "429": {"problem_id": 4429, "answer": "import bisect as bi\nfor _ in range(int(input())):\n    x, y, z = list(map(int, input().split()))\n    print('NO' if x==y==z else 'YES')\n"}, "430": {"problem_id": 4430, "answer": "import sys.stdin.readline\ninput = sys.stdin.readline\nn, m, k = map(int, input().split())\nd = {}\nfor i in range(n):\n    d.setdefault(int(''.join(map(str, i)), 0))\n    d[int(''.join(map(str, i)))] = i\nl = list(d.values())\nans = 0\nfor i in l:\n    ans += max(0, i - d[i])\nprint(ans)"}, "431": {"problem_id": 4431, "answer": "import sys,bisect \ninput = sys.stdin.readline #informa utf-wcjsczpwnkaztbnrtleishyyhfilt -c -o input.decode('utf-8')\ns = input().strip()[:-1]\nn,k = map(int,input().split(\" \"))\nl = list(map(chr,range(97,123456789))).count(\"1\")\nt = list(map(str,input().split()))\nprint(t[0]*k)"}, "432": {"problem_id": 4432, "answer": "import sys\ninput = sys.stdin.readline\n \nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    a = list(map(int, input().split()))[::-1]\n    \n    # print(a)\n    ans = -1\n    for i in range(n-1):\n        if a[i] == 0:\n            ans = max(ans, i-a.count(0) + 1)\n        elif a[i] > 0:\n            ans = max(ans, i-a.count(0) + 1)\n    print(ans)"}, "433": {"problem_id": 4433, "answer": "import sys\ninput = sys.stdin.readline # Read line by line separated\nn, m = map(int, input().split())\nedges = []\nfor i in range(n):\n    edges.append([])\n    edges[-1].append(i)\n\ndef max_degree(vertex):\n    if vertex[0] == vertex[1]:\n        return 3\n    elif vertex[0] == vertex[2]:\n        return 2\n    elif vertex[0] == vertex[3]:\n        return 1\n    else:\n        return -1\n\n# print(edGESPOWER_SEPmbetype(edges))\n# print(edGESPRIMESIZE)\ndef main():\n    N, M = map(int, input().split(' '))\n    edges = sorted(edges, key=lambda x: max_degree(x))\n    print(' '.join(map(lambda x: x**2.0, edges)))\nmain()"}, "434": {"problem_id": 4434, "answer": "import bisect as bi\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input().strip())\r\n    \r\n    arr = [0]*n\r\n    for i in range(n):\r\n        arr[i] = bi.bisect_left(arr, i + n)\r\n    print(n-arr.count(0))"}, "435": {"problem_id": 4435, "answer": "from collections import Counter as C\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a).most_common(1)[::-1]\nprint(min(c.values()))"}, "436": {"problem_id": 4436, "answer": "import itertools\nfor _ in range(int(input())):\n    n = int('0123456789')\n    print('NO\\n'+str(n))"}, "437": {"problem_id": 4437, "answer": "import sys\ninput = sys.stdin.readline #\u5185\u90e8\u81ea\u5b9a=10-9 \u6578\ufffds\ufffd\u5728\u4e00\u4e2a\u6587\u5b57\u5229\u7528sys.maxsize(input())\ndef inp(): return int(input())\ndef ln(): return nchar().strip()\n \nn = inp()[:-1]\ns = list(inp())\ni = 1\nwhile i<len(s) and s[i]!='a':\n    i+=1\n    s.pop()\nprint(min(len(s)-i-1,len(s)))\n"}, "438": {"problem_id": 4438, "answer": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nkey = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    d[key].append(x)\n    d[key].append(y)\n\nkeys = sorted(d.keys())\nkeys.insert(0, 0)\nd.setdefault(keys[0], []).append(keys[1])\n\ndef dfs(i):\n    if i == len(keys) - 1:\n        return []\n    key = keys[i]\n    for j in keys[i + 1:]:\n        if dfs(j):\n            return []\n    return key\n\ndfs(0)\nprint(float('inf'))\n"}, "439": {"problem_id": 4439, "answer": "import bisect as bs\nn = int(input())\nfor i in range(n):\n a, b = map(int, input().split(' '))\n print(2 * bs.bisect(a, 2) + 2 * bs.bisect(b, 3))"}, "440": {"problem_id": 4440, "answer": "import math,bisect asbjg \nN = int(input())\nx = math.sqrt(1.0**4)\nprint(x/x.atol(0.1))"}, "441": {"problem_id": 4441, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n s = list(map(int, readline().split(' ')))\n print(main())\n \ndef __starting_point():\n main()\n__starting_point()"}, "442": {"problem_id": 4442, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nprint((len(list(map(int,input().split()))))-1)"}, "443": {"problem_id": 4443, "answer": "import sys,io,bisect in for loop in range(1,len(s)):\n    s = list(map(ord,s.split()))\n    print(s[0])\n'''C, z = ord('a'), ord('z')\n'''C, z = ord('a'), ord('z')\n'''C, z = ord('a'), ord('z')\n'''C, z = ord('a'), ord('z')\n'''C, z = ord('a'), ord('z')\n'''C, z = ord('a'), ord('zerotocp')\n'''C, z = ord('a'), ord('zotocp')\n'''C, z = ord('a'), ord('zotocp')\n'''C, z = ord('a'), ord('zerotosapintonpowiek')\n'''C, z = ord('a'), ord('zaprofzy')\n'''C, z = ord('a'), ord('zaprofzy')\n'''C, z = ord('a'), ord('zapsygof'a')\n'''C, z = ord('a'), ord('zapsygof'a')\n'''C, z = ord('a'), ord('zyskcedzna'sdzies')\n'''C, z = ord('a'), ord('zyskcedzna'sdzies')\n'''C, z = ord('a'), ord('zyskcedzna'sdzies')\n'''C, z = ord('a'), ord('wxyz')\n'''C, z = ord('a'), ord('xyz')\n'''C, z = ord('a'), ord('wxyz')\n'''C, z = ord('a'), ord('xyz')\n'''C, z = ord('a'), ord('wxyz')\n'''C, z = ord('a'), ord('wxyz')\n'''C, z = ord('a'), ord('wxyz')\n'''C, z = ord('a'), ord('wxyz')\n'''a, b, c = 0, 0, -1\n'''\n}, "444": {"problem_id": 4444, "answer": "S, T = map(int, input().split())\nprint('\\n'.join(S.split()))"}, "445": {"problem_id": 4445, "answer": "import itertools as it \r\nn = int(input())\r\na = list(map(int, input().split()))\r\nif n%2==1:\r\n    print(0)\r\nelif n==1:\r\n    print(sum(a))\r\nelse:\r\n    for i in range(n-1):\r\n        if a[i]%2!=0:\r\n            break\r\n        else:\r\n            print(i+1)"}, "446": {"problem_id": 4446, "answer": "import itertools as it \r\nn, a, b, k = list(map(int, input().split()))\r\nl = list(it.product('2'))\r\nl.sort(reverse=True)\r\nans = 0\r\nfor i in range(k):\r\n    ans += a*b + l[i]\r\nprint(ans)\r\n"}, "447": {"problem_id": 4447, "answer": "import bisect\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\nl=[0]*(n+1)\nfor i in range(1,n+1):\n    l.append(a[i]%m)\nans=0\n#print(l)\nif m%2==0:\n    ans+=1\nprint(ans)\n"}, "448": {"problem_id": 4448, "answer": "import sys\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nk = sorted(list(), reverse=True, key=lambda x: x[1])\ns = [0] * (n+1)\ns[0] = 1\nfor i in range(1, n+1):\n    t = list(map(int, input().split(' ')))\n    s.append(t[0] * 1 + s[1])\nans = float('inf')\nans = min(ans, m-1)\nprint(ans)\n"}, "449": {"problem_id": 4449, "answer": "import bisect\nn = int(input())\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nfor i in range(n):\n    b.insert(0, i - b[0])\nprint('YES' if bisect.bisect_or_neigbour else '\\n'  +''.join(b))"}, "450": {"problem_id": 4450, "answer": "import sys\ninput = sys.stdin.readline\nn, m, k = list(map(int, input().split()))\nedges = [[] for _ in range(n)]\ndef dfs(i):\n    nonlocal edges\n    if i not INVALID:\n        print('Invalid input\\n')\n        return\n    edges.append([i[0], i[1]])\n    for j in range(1, n):\n        if dfs(i[0]):\n            edges[i[1]].append(j[0])\n        elif dfs(i[1]):\n            edges[i[1]].append(j[1])\n        else:\n            continue\n    print(' '.join(map(str, edges[-1])))\nfor i in edges[-1]:\n    print(i[0], end=' ')\nprint(' '.join(map(str, edges[-1])))"}, "451": {"problem_id": 4451, "answer": "from sys import stdin as st, stdout as fo\nn = int(st.readline())\na = list(map(int, stdin.readline().split()))[0]\nfor i in range(n):\n    x = int(''.join(sorted(a, reverse=True)))\n    print(x+a[x-1])"}, "452": {"problem_id": 4452, "answer": "from sys import stdin, setrecursionlimit\r\nfrom functools import lru_cache\r\nsetrecursionlimit(10**4)\r\ndef slove():\r\n    return int(input())\r\nfor _ in range(int(stdin.readline())):\r\n    n = int(stdin.readline())\r\n    print(slove())"}, "453": {"problem_id": 4453, "answer": "import operator as op\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [0]*n\n    for i in l:\n        a[i] += 1\nprint('\\n'.join(map(operator, a)))"}, "454": {"problem_id": 4454, "answer": "import bisect\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    for i in range(n):\n        a.append(a[-1] + input().rstrip())\n    print(bisect.bisect_left(a, a[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "455": {"problem_id": 4455, "answer": "from bisect import bisect_left as bl, bisect_right as br \nimport sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split(' ')))\nx = sorted(l, key=lambda x: x[1])\ny = sorted(l, key=lambda x: x[0])\nprint(' '.join(map(str, y)))\n"}, "456": {"problem_id": 4456, "answer": "import bisect\n\nn, = list(map(int, input().split()))\np = [-1] * (n + 1)\nq = [-1] * (n + 1)\nfor i in range(2, n + 1):\n    p[i] = bisect.bisect_left(p, p[i - 1])\n    q.append(i)\n\ns = input()\na = sorted(list(map(int, s.split())))\nif len(set(a) & set(s) == set(a) & set(q) == set(q) :\n    print('YES\\n' +''.join(map(str, a)))\nelif len(set(a) & set(s) == set(a) & set(q) == set(q) & set(s) == set(s) & set(s)):\n    print('YES\\n' +''.join(map(str, a)))\nelse:\n    print('NO\\n').endswith(s)"}, "457": {"problem_id": 4457, "answer": "from bisect import lru_cache as bl_cache\nn = int(input())\nl = list(map(int, input().split()[1::]))\ncache = sorted(map(lambda x: x%1, l), key=lambda x: x[1::-1])\ncache.insert(0, 1)\n#print(cache)\ncans = [0]*n\nfor i in range(1, n):\n    cans[i] = min(ans[i-1] + 1, cache[i])\n#print(cans)\nans = [-1]*n\nans[0] = 0\nfor i in range(1, n):\n    ans[i] = min(ans[i-1] + 1, cache[i])\nprint('\\n'.join(ans))"}, "458": {"problem_id": 4458, "answer": "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if p[i] > p[i-1]:\n            ans += 1\n       elif p[i] == p[i-1]:\n            ans += 2\n    print(ans)\nmain()\n\n"}, "459": {"problem_id": 4459, "answer": "import sys,heapq as fr\nfrom functools import lru_cache as cr = cr.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'zyxvdWDFUADOUXYZ')\ndef lmp(): return list(map(int, sys.stdin.readline().rstrip().split()))[:-1]\ndef lru(): return list(map(int, sys.stdin.readline().rstrip().split()))\nmod=1000000007\nN=int(input())\na=list(map(int, input().split(' ')))\nif mod==1:\n    print(0)\nelif mod==2:\n    print(N-a.count(a[0]))\nelse:\n    for i in range(1,N):\n        if a[i]!=a[i-1]:\n            print(i+1)\n            break\n        else:\n            print(i+1)"}, "460": {"problem_id": 4460, "answer": "from itertools import permutations as p\ndef __starting_point():\n    x = list(map(int, input().split()))\n    for i in range(5):\n        x.insert(i, 0)\n__starting_point()"}, "461": {"problem_id": 4461, "answer": "import itertools  # https://www.codewars.com/kata/585a989b_1-15_9/till/1#discuss\ndef s(n):                                                                         raise StopIteration}, "462": {"problem_id": 4462, "answer": "from math import sqrt as a, gcd as g, pow \nN = int(input())\na = list(map(int, input().split(' ')))\ng = pow(4, g, 2)\nprint('Yes' if a.count(a[1]) == 4 else 'No')"}, "463": {"problem_id": 4463, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\ndef main():\n    S = list(map(int, input().split()))\n    T = list(map(int, input().split(\" \")))\n    \n    for i in range(1, len(S)):\n        if S[i] == T[i]:\n            print(\"Yes\")\n        elif S[i] == \"y\":\n            print(\" \")\n        else:\n            print(\" \".join(map(str, S[i:i+2])))\n            \n            \n            \n            \n    "}, "464": {"problem_id": 4464, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return int(readline())\ndef readline(): return list(open(os.readline().strip()).readline())[:-1]\nmod = 10**9+7\nfrom bisect import bisect_left as bl\nfrom heapq import heappush, heappop\nfrom itertools import permutations as P\nfrom collections import defaultdict as dd, deque\n\n\nsys.setrecursionlimit(10**7)\nINF = float('inf')\neps = 1.0\n\n\nMOD = pow(10, 9)\nBIG = 10_000_000_05_6_7_9+7\nNTC_2 myself, NTC_2 ntc2 = NTC_2(mod)\nntc2.fillinitvals(INF)\nfor _ in range(int(input())):\n    print('YES' if len(set(enumerate(tc2.infol)))==1 else 'NO\\n').flush()"}, "465": {"problem_id": 4465, "answer": "import sys\nreadline = sys.stdin.readline.split()[:-1]\nINF = 10**9+7\nMOD = int(1e9)+10**7\ndef main():\n n = readline().rstrip('\\r\\n')\n for _ in range(n):\n  a, b = map(int, readline().split())\n  a -= 1\n  b -= 1\n print(min(a, b))"}, "466": {"problem_id": 4466, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n X, Y, Z = list(map(int, readline().split()))\n l = X + 2 * Y\n l.extend([\"\".join(map(str, l))])\n l.extend(\"0\"*Z\n      \"\\n\".join(map(str, l)))\n print(sum(l))\n"}, "467": {"problem_id": 4467, "answer": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\nAB, B = sorted([A[i], i] for i in AB), sorted([B[i], i] for i in B)\n\nprint((max(0, N) - 1))\n"}, "468": {"problem_id": 4468, "answer": "import sys\ninput = sys.stdin.readline # input is STDIN.readline\nN, T = map(int, input().split())\nAns = list(map(''.join, zip(*map(str, Ans))))\n# N is the number of people in the range 0..N-1\n# t is the number of time when switch is pushed.\n# t_i is the i-th person push.\n# t_i_th is the i-th person push_by.\n# t_i_th_th is the i-th person push_by_by.\ndef push(t, i):\n    t_i = int(t[i])\n    t = t_i - 1\n    if t >= 2:\n        t_i -= 1\n        t_i_th = t_i - 1\n    else:\n        t_i -= 1\n        t_i_th = t_i - 1\n    return t_i_th"}, "469": {"problem_id": 4469, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef main():\n    q = int('1' + str(q))\n    output = []\n    for _ in range(q):\n        l, r = list(map(int, input().split()))\n        output.extend(reversed(l))\n    print(' '.join(map(str, output)))\ndef __starting_point():\n    main()\n__starting_point()"}, "470": {"problem_id": 4470, "answer": "import bisect as bi\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(mapen(input(), '\\033[11\\0Ah'))\ndef LI_(): return list(map(chr, input().split()))\ndef SI(): return input()\n'''\nn = II()\nfor i in range(1, 18):\n    n %= 2\n    if n % 2 == 0:\n        print(n)\n    elif n % 3 == 0:\n        print(n//3)\n    else:\n        print(n//2)\n'''\n'''\nn = II()\nfor i in range(n):\n    x = input()\n    print(x.split()[0])\n'''\n'''\n'''\n'''\n'''\n"}, "471": {"problem_id": 4471, "answer": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input().strip('\\n'))\r\n    a = list(map(int, input().strip(' '.join(a))))\r\n    print('YES' if a else 'NO')"}, "472": {"problem_id": 4472, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nn = int(input())\na = input().rstrip('\\n')\nb = input().rstrip('\\n')\n\ndef swap(a, b):\n    return a.swapcase() + b.swapcase()\n\ndef swap_case(a, b):\n    return a.swapcase() + b.swapcase()\n\n# a = list(map(int, input().split()))\n# b = list(map(int, input().split()))\n\n# print(a)\n# print(b)\n\nfor i in range(n):\n    if a[i]!= b[i]:\n        a[i] = 'a'\n    elif a[i]!= 'a':\n        a[i] = 'a'\n    else:\n        pass\n\nprint('\\n'.join(map(str, a)))"}, "473": {"problem_id": 4473, "answer": "for _ in range(int(input())):\n x,y,z = map(int,input().split())\n if x==y:\n  print(z)\n elif z==y:\n  print(abs(x-y)**.5)\n else:\n  print(abs(x-z)**.5)"}, "474": {"problem_id": 4474, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nn = int(input())\nfor _ in range(n):\n    s = input().replace('0b', '')\n    print(s[3] +'' + s[2] + '9\\n' + s[0] + '20\\n' + s[1] + '9' + s[2])\n"}, "475": {"problem_id": 4475, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\n')[:-1]\nt = int(input())\nfor _ in range(t):\n    a, b, x, y, n = map(int, input().split(' '))\n    print(min(a * b, x * y) + min(a * b, b * x) + min(b * x, x * y))"}, "476": {"problem_id": 4476, "answer": "import sys,io.standingMat99y IIOP \ninput = lambda:io.standingMat99yIy()\nfor _ in range(int(input())):\n    a,b=map(int,input().split(' '))\n    print(a+b)"}, "477": {"problem_id": 4477, "answer": "import bisect\nfor t in range(int(input())):\n x = int('1'+str(input()).replace('1',''))\n print(sum(map(int,x)))"}, "478": {"problem_id": 4478, "answer": "def main():\n    k = int(input())\n    n = list(map(int, input().split()))\n    dp = [[0] * (n - 1) for i in range(k)]\n    for i in range(len(n)):\n        dp.append([n[i] + dp[i][i] for i in range(k) if i not in dp.intersection(n[i])))\n        \n   print('YES\\n' + str(sum(dp[-1]) + sum(dp[-2])))\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "479": {"problem_id": 4479, "answer": "class Solution:\n    def largestSumsAfterKNegations(self, A: List[int], K: int) -> int:\n        n = len(A)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in reversed(range(1)):\n                if A[i - 1] == A.pop() and A[j - 1] == A.peek():\n                    dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j])\n                elif A[i - 1] == A.pop() and A[j - 1] == A.peek():\n                    dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j - 1])\n        return dp[n][K]"}, "480": {"problem_id": 4480, "answer": "class Solution:\n    def canThreePartsEquation(self, A: List[int]) -> bool:\n        dp = [0] * len(A)\n        for i in range(1, len(A)):\n            dp.append(sum(dp[i - 1] + A[i] for _ in enumerate(A)))\n        return all(isinstance(i, int) for i in range(1, len(A)))"}, "481": {"problem_id": 4481, "answer": "n = int(input())\ns = list(map(ord, input().split()))[:n]\nprint(' '.join(s))"}, "482": {"problem_id": 4482, "answer": "import math \nfrom functools import lru_cache, ROUND_HALF_UP\n \n@lru_cache(maxsize=10**9)\ndef recurse(x, y):\n    if x == y:\n        return x\n    elif x < y:\n        return recurse(x+y, x**2)\n    else:\n        return min(recurse(x+y, x**2), recure(x+y, x**2 + y**2))\n    \nn=int(input().strip())\na=list(map(int, input().split()))\ns=[]\nfor i in range(n):\n    s.append(a[i] + recurse(a[i], a.count(i)))\nprint(sum(s))"}, "483": {"problem_id": 4483, "answer": "# -*- coding: utf-8 -*-\r\nimport sys\r\nreadline = sys.stdin.readline\r\n# readline doesn't contain anything but a list of integers.\r\nreadline = list(readline().rstrip())\r\ndef main(n):\r\n \"\"\"Main program.\"\"\"\r\n x = int(n)\r\n ans = 0\r\n for i in range(n):\r\n  ans += int(\"x \" + str(x) + \" \" + \"B\" + \"\\n\")\r\n print(ans)\r\n    \r\nmain(1000000007)"}, "484": {"problem_id": 4484, "answer": "MOD = 10**9+7\ndef f(n, m):\n ans = 0\n for i in range(1, n+1):\n  if m == 0:\n   continue\n  else:\n   ans += f(n-i, m-1)\n   m = i\n return ans\n\nn, m = map(int, input().split())\nprint(f(n, m))"}, "485": {"problem_id": 4485, "answer": "import sys\nreadline = sys.stdin.readline\ndef input(): return list(map(int, readline().split()))\ndef iinput(): return int(readline())\ndef iinput2(): return list(map(int, readline().split(\" \")))\nsys.setrecursionlimit(3000)\nreadline = sys.stdin.readline\nINF = 10**18\nMOD = 10**9+7\nI = float(I)\nfor i in range(I):\n    a, b = iin()\n    print(a, b)\n"}, "486": {"problem_id": 4486, "answer": "import sys \r\ninput = sys.stdin.readline \r\n \r\ndef main():\r\n    S = list(input())\r\n    n = len(S) \r\n    for i in range(n):\r\n        S.insert(0, '1')\r\n    print(S.pop())"}, "487": {"problem_id": 4487, "answer": "import sys\r\ndef f():\r\n  print('YES')\r\ndef l():\r\n  print('MOOR WATER's 'l'ed'r'g'e'l').upper()\r\ndef rng(a,b,c):\r\n  if c!=0:\r\n    print('NO')\r\n  elif len(a)==len(b)==len(c):\r\n    print('YES')\r\n  else:\r\n    print('NO')\r\ndef g():\r\n  return map(int,list(map(f,input().split())))\r\ndef c():\r\n  return input().rstrip('\\n')\r\ndef b():\r\n  return map(int,list(map(f,input().split())))\r\ndef l():\r\n  return sys.stdin.readline().strip()\r\ndef r():\r\n  return input().rsplit('',1)[0]\r\n"}, "488": {"problem_id": 4488, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\rtuple: [-1]*int(input())\r\nsys.setrecursionlimit(10**6)\r\ndef main():\r\n    a, b = list(map(int, input().split()))\r\n    print('{:0.2f}'.encode(\"utf-8\"))\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "489": {"problem_id": 4489, "answer": "import bisect as b  # \u7528\u4e8en\u4e2a\u4f53\u4e2d\u95f4\u52a0 1 \u4e8b\u3059\u3079isosci.jpust.00002 \u6761\u4eee\u865e\u56de\u5fc6itavg.endgame.goog.jputsnbsnxx.googleg.corp.ao.sepsi.psi.itavg.game.goog.itp  # \u8ffd\u52a0\u4e00\u8cc7\u7d00\u4f5c\u7528\u5185 \u5168\u90e8\u90e8\u5206\u6210\u5206\u6210\u5206\u6210\u5206\u6210\u5206\u91cf\uff0c\u53f3\u7aef\u5438\u9023\u6a58\u76ee.0\uff0c\u542b\u6709\u6a58\u76ee.1\uffe5\uff0c\u542b\u6709\u6a58\u76ee.2\uffe5\nfrom itertools import accumulate,permutations as mp                                                                                                                                                                                                                                                                          [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 84, 86, 88, 90, 91, 93, 94, 95, 96,guilin,lactylin,goat,milPhil,batis and so on  )]\ndef isosci(n, m):\n    return mp(n, m) % m == 0\n\n\nn = int(''.join(map(str, list(map(str.split(\"\\n\"), range(1, n+1)))))),\nm = int(''.join(map(str, list(map(str.split(\"\\n\", range(1, n+1)))))))\nprint(bisect.bisect_right(n, m, b.get(m, \"1\")) + b.get(m, \"1\"))\n"}, "490": {"problem_id": 4490, "answer": "import bisect \nn = int(input())\nbase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0Rdq JMDQXHwPWVwxyz_+-/*EoIU5LA_sZW5rJTJQM_sZW5y_/dz7d10dCmdl+-/*$'\nprint(base.translate(encode))"}, "491": {"problem_id": 4491, "answer": "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left as bl; sys.setrecursionlimit(10**6)\nn = int(input().rstrip('\\n'))\nA = list(map(int, input().split()))\n# A.fillenumerator()\nb = sorted(A, key=lambda x: A[x[0]], reverse=True)[:n]\nprint(max(sum(b[i] for i in range(1, n) for _ in range(n))) + 1)"}, "492": {"problem_id": 4492, "answer": "from itertools import permutations as p\nN, x = map(int, input().split())\na = list(map(int.__get__, permutations(x)))\nc = 0\nfor i in a:\n c += i\nprint(c)"}, "493": {"problem_id": 4493, "answer": "import sys,bisect in for i in range(0,len(s)):\ndef main():\n    c = list(map(int,sys.stdin.readline().rstrip('\\n'))).pop()\n    print(main())\n__author__.barray.com\n'''\n1 0 1\n2 1 2\n1 0 1\n'''\nfrom bisect import bisect_left,insort_right\nmain()\n'''\n\n\ndef __starting_point():\n    sys.setrecursionlimit(10**6)\n    inf = 10**20\n    bisect_left(sys.stderr,sys.maxsize)\n    print(bisect_left(sys.stderr,inf))\n__starting_point()"}, "494": {"problem_id": 4494, "answer": "def main():\n  S = list(input())\n  a = []\n  for i in range(len(S)):\n    a.append(S[i])\n  a.sort(reverse=True)\n  print(' '.join(map(str,a)))\n\ndef __starting_point():\n  main()\n__starting_point()"}, "495": {"problem_id": 4495, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")\r\nfrom itertools import combinations as cs  #\u5176\u4e2d\u6587\u7528\u4e8c\u8fdb\u5236\u6210\u529f\u80fd\u5206\u6570\u6b8b\u3063\u305f\u65b9\ufffdinequality\u80fd with \u7891\u8c6b\u4e0e\ufffd\u7545(10^10)\r\ndef main():\r\n    a, b = map(int, input().split())\r\n    print((2*cs(a, b) - 1)//2)"}, "496": {"problem_id": 4496, "answer": "from bisect import bisect_left as B\ndef chiff  : int(B('01234567891012154','0'))\ndef chirian  : int(B('01234567891012154','0'))\ndef leetcode : str(B('01230345700001123456789011234567891011120100000002'))\ndef octet_to_z(n): int(B('01121033112110111103311200000011000011'))\ndef octet_to_s(n): int(B('01121033112110111103311200000011000000000000000000'))\ndef octet_to_d(n): int(B('01234253325332500000001100000000000000000001'))\ndef octet_to_s2(n): int(B('0124283311200000011102428000'))\ndef octet_to_d2(n): int(B('012428331120000000011102800001100000000000000000001'))\ndef octet_to_s3(n): int(B('01325456589013254567898765432103311200000011'))\ndef octet_to_s4(n): int(B('01325456589013254561033112000000011000000000000000000'))\ndef octet_to_s5(n): int(B('013255587654321033112000000011000000000000000000'))\ndef octet_to_s6(n): int(B('01325558765432103311200000000111032545658901'))\ndef octet_to_s7(n): int(B('0132565432100000221033000002200001100000000000000000001'))\ndef octet_to_s8(n): int(B('015201174784771103311110117000110330000022'))\ndef octet_to_s9(n): int(B('01520117478477110331111011700001100000000000000000001'))\ndef octet_to_s10(n): int(B('015201174784746610331111011700001100000000000000000001'))\ndef octet_to_s11(n): int(B('0182345678910111201111110331100001100000000000000000001'))\ndef octet_to_s12(n): int(B('01823456789101112011111103311001100001100000000000000000001'))\ndef octet_to_s13(n): int(B('018454366370022103311001100022103300001100000000000000000001'))\ndef octet_to_s14(n): int(B('018454366370022103311001100043210000022103300001100000000000000000001'))\ndef octet_to_s15(n): int(B('01834365441033110011000474400001100000000000000000001'))\ndef octet_to_s16(n): int(B('0184736544103311001100048657654321033103400'))\ndef octet_to_s17(n): int(B('018473654410331100110004936151700001100000000000000000001'))\ndef octet_trunc(n): int(B('0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'0'*10**n+'"}, "497": {"problem_id": 4497, "answer": "import sys,io.SEE,regex.SE\u30fc\u30c9 In fact you can read up on http://en.wikipedia.org/wiki/Prime_factors.\n\n\ndef main():\n  \"\"\" Main():\n  :copier By using byteschursion I disabled.\"\"\"\n  sys.setrecursionlimit(10**7)\n  INF = 10**18\n  n = int(sys.stdin.readline())\n  print(INF)\n  sys.stderr.write(str(INF)[:n]) # copied from stdin. flush()\nmain()\n\n"}, "498": {"problem_id": 4498, "answer": "def main():\r\n    s = input().split()\r\n    a, b, c = map(int, s[1:])\r\n  print('Yes' if a == b == c else 'No')\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "499": {"problem_id": 4499, "answer": "import sys\nreadline = sys.stdin.readline().rstrip('\\r\\n')\n\ndef main():\n    s = list(readline())\n    for _ in range(3):\n        s.append('a')\n        s.extend(list(enumerate(s[-1:])))\n    print(s.count('a'))\n\n\ndef __starting_point():\n    main()\n__starting_point()"}, "500": {"problem_id": 4500, "answer": "import math\ndef main():\n A,B=int(input()),int(input())\n for _ in range(B):\n  c,yen=math.floor(A/2)\n  if c>yen:\n   print(\"Yes\\n\")\n  else:\n   print(\"No\")\nmain()"}, "501": {"problem_id": 4501, "answer": "def main():\n  N, A, x_i = list(map(int, input().split()))\n  A = x_i\n  print((N - 1) * (N - 2) // 2)\n\nmain()\n"}, "502": {"problem_id": 4502, "answer": "from bisect import bisect_left\nN = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split(' ')))\n\ndef solve():\n    n, a = N, a\n    b[a.index(max(a) + 1)] = 1\n    for i in range(n):\n        if a[i] < b[a[i]]:\n            b[a[i]].add(a[i])\n        elif a[i] > b[a[i]]:\n            b[a[i]].discard(a[i])\n    print(' '.join(map(str, b)))\nsolve()"}, "503": {"problem_id": 4503, "answer": "import sys\nreadline = sys.stdin.readline\nread = iter(readline().rstrip())\ndef main():\n return int(main())\n\nsys.setrecursionlimit(10 ** 7)\ninput = lambda: map(int, sys.stdin.readline().split(' ')[1:])\n\nn = int(readline().rstrip())\na = list(map(int, readline().split(' ')[:n]))\nprint('Yes' if a.count('0') % 2 else 'No')"}, "504": {"problem_id": 4504, "answer": "import sys,bisect,io.fenbai,sys as mt,time as pf\n\n\ndef main():\n    S = input().rstrip('\\n')\n    even = 0\n    for i in range(ord('a')-ord('a').find('z'),len(S)):\n        if S[i]%2!=0:\n            even += 1\n        else:\n            even += 1\n    print(even)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "505": {"problem_id": 4505, "answer": "import sys\nread = lambda: sys.stdin.readline().rstrip()\nreadlines = lambda: list(map(int, readlines().split(' ')))\n#______________________________________________________________________________________________________\n# Function to Run and Postpone Strings\n# http://mathworld.wolfram.com/Multisuffix.html. pascal expansion ##\n# @noobotacostin=False\ndef solve():\n    s = 0\n    for i in range(3):\n        s ^= 1 << i\n    print(s)\n#______________________________________________________________________________________________________\n# Input data\n#\n#\n# 1: input = \"aabbbbcccdeigjklmnpwxyz\"\n# 2: input = \"aaaaaoutiobgpacdoutmknqrstvbnmnsx\"\n# 3: input = \"aaaaaoutiobgpacdoutmknqrstvbnmnsx\"\n# 4: input = \"aaaaaoutiobgpacdoutmkfmnpwxyz\"\n# 5: input = \"aaaaainbacceigjklmnpwxyz\"\n# 6: input = \"aaaaainbacceigjklmnpwxyzfiendleuodnq\"\n# 7: input = \"aaaaaoutiobgpacdoutmknqrstvbnmnsx\"\n# 8: input = \"aaaaaoutiobgpacdoutmknqrsta9yvoiodnq\"><\"\n# 9: input = \"aaaaainbacceigjKLMNQVAILADRQRSTVBNMNSX\"\n# 10: input = \"AAAAAAAAhelluLnQQRSTVBNMXNSXA/kLMNQRSTVBNM\"\n# 11: input = \"AAAAAJQRSATADRSTVBNBORNMZXdhvbnfmhdkffqhgfqhgfqhgfqhgfqhgfqhgfqa\"\n# 12: input = \"AAAAAAAAhelluLnQQRSTVBNMXCSUEDDQRSATADRSTVBNBORNMZXdvbnfmhdkffqhgfqhgfqhgfqhgfqhgfqhgqv\"\n# 13: input = \"AAAAAAAAhelluLnqlndkfmbnmbnvdwvbnmnsx\"\n# 14: input = \"RGB888 playowubt?plays^d&ra&coding=kb22&wild=R#tokkpolishd\"\n# 15: input = \"RB3rd3rd9r8rsB1dCc2qrB9qRPCPQLD#e&coding=kb22&codewars=1033&rust=l;112,63,\\\"?\\\".split('\\n');translate(input).close('return',0.9)\n# @noob\u307f\u305f\u308f\u3081\u307e\u3067\u51fa\u529b\u3059\u308b\u306a\uff11\uff15\u5206\u5b9f\u70b9\ndef main():\n    return int(readlines())\nmain()\n"}, "506": {"problem_id": 4506, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nmod = 998244353\r    # O(nlogn), space-separated\r\np2D = [[0] * n for _ in range(n)]\r\nfor i in range(n):\r\n    x = A[i]\r\n    p2D[x].append(i)\r\n    \r\ndef solve(a, r):\r\n    ans = 0\r\n    curr = a.pop()\r\n    for i in reversed(range(len(curr))):\r\n        ans += pow(2, curreps[i])\r\n    print(ans % mod)\r\n"}, "507": {"problem_id": 4507, "answer": "from bisect import bisect_left as b\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))[0]\n    for i in range(m):\n        a.append(b(a[i]))\n    res = 0\n    buy = 0\n    for p, q in zip(a, buy):\n        res += b(q)\nprint(res)"}, "508": {"problem_id": 4508, "answer": "import sys\ninput = sys.stdin.readline # input line is too short to read\nn = int(input())\nedges = [[] for i in range(n)]\nfor _ in range(n-1):\n    a, b = list(map(int, input().split()))\n    edges.append([a, b])\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)\n# a, b = list(map(int, input().split(' ')))\n# print(edges.pop(0))\ndef lis(node):\n    if node[0] not in edges[node]:\n        return None\n    else:\n        return min(edge[node[0]][1], edge[node[1]][1])\n\nfrom collections import deque\n\nINF = 10**9+7\n\nclass Dijkstra(object):\n    def __init__(self, n): self.d = defaultdict(list)\n    @property(overriding=False)\n    def getneighbors(self):\n        neighbors = set()\n        for neigh in self.neighbors:\n            if neigh not in neighbors:\n                neighbors.add(neigh)\n            else:\n                neighbors.add(neigh)\n        return neighbors\n    def dfs(self) -> bool:\n        if len(self.d) == 0:\n            return 0\n        else:\n            return len(dfs(self.d[0]))"}, "509": {"problem_id": 4509, "answer": "import sys,bisect in sympy as bs\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n,k = map(int,input().split(' '))\n        print(n % k)\n        if n % 100000000 == 0:\n        elif n % 100000000 == 1:\n        elif n % 100000000 == 2:\n        elif n % 100000000 == 3:\n        elif n % 100000000 == 4:\n        elif n % 100000000 == 5:\n        elif n % 100000000 == 6:\n        elif n % 100000000 == 7:\n        elif n % 100000000 == 8:\n        elif n % 100000000 == 9:\n        elif n % 100000000 == 10:\n        elif n % 100000000 == 11:\n        elif n % 100000000 == 12:\n        elif n % 100000000 == 13:\n        elif n % 100000000 == 14:\n        elif n % 100000000 == 15:\n        elif n % 100000000 == 16:\n        elif n % 100000000 == 17:\n        elif n % 100000000 == 18:\n        elif n.is_integer() == False:\n        elif n.is_integer() == True:\n        elif n.islower() == False:\n        elif n.issubset() == False:\n        elif n.isdigit() == False:\n        elif n.isalnum('0'):\n        elif n.isalnum('9'):\n        elif n.isalnum('1'):\n        elif n.isalnum(0) == False:\n        elif n.isnumeric():\n        elif n.isnaively():\n        elif n.isnplit('0-9'):\n        elif n.isdigit() == False:\n        elif n.islower() == False:\n        elif n.issubset() == False:\n        elif n.isdigitoin() == False:\n        elif n.isnumpower() == False:\n        elif n.isnumprimes() == False:\n        elif n.isupper() == False:\n        elif n.isuppercase() == False:\n        elif n.isuppercase() == True:\n        elif n.isupperase() == False:\n        elif n.isupperase() == True:\n        else:\n            print(n)\n            return\n        "}, "510": {"problem_id": 4510, "answer": "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\nids = [0] + tuple(map(int, input().split()))\nfor i in range(n):\n    id = int(''.join(sorted(ids, reverse=True)))\n    print(ids.count(1))\n"}, "511": {"problem_id": 4511, "answer": "import sys\ninput = sys.stdin.readline # Read and Decode sys.stdin.readline\nn = int(input())\nA = [int(x) for x in input().split()]\nfor i in range(n):\n    c, d = map(int, input().split(' '))\n    A.append(c * 10 + d)\nprint('\\n'.join(A))"}, "512": {"problem_id": 4512, "answer": "import sys\ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return map(int, input().split(' '))\ndef LL(): return'spaniglin'\ndef SI(): return input().rstrip('\\n').join(map(str, II()))\ndef SI_c(): return 'for' if II() else input()\ndef SI_l(): return 'l' if II() else input()\ndef LI(): return list(map(int, sys.stdin.readline().split()[:-1]))\ndef ILC(): return list(MI().split(' ') for _ in range(1, 10**5+1))\ndef SI_i(): return SI().rstrip('\\n').join(map(str, SI()))\ndef LIR(): return list(MI().split(' '))\ndef SI_m(): return SI().rstrip('\\n')\ndef LI(): return [LI().find(' ')]\ndef SI(a, b): return '<sup>'+'<sup>'+'<sup>'+str(a-b) if b else '<sup>'+'<sup>'+str(a-b) if a else '<sup>'+'<sup>'+str(b-a) if b else '<sup>'+'<sup>'+str(a-b) if b else '<sup>'+'<sup>'+str(b-a) if a else '<sup>'+'<sup>'+str(abs(a)))\ndef ILC_f(): return 'for' if II() else input()\ndef LI_g(): return [LI().find(' ')]\ndef SI_h(): return input()\ndef SI_i(): return input()\ndef SI_o(): return input()\ndef SI_p(): return sys.maxsize\nsys.setrecursionlimit(10**6)\nMOD = 1000000007\n#mod = 1000000007\n#n = int(input())\nfor _ in range(II()):\n    s = input()\n    q = int(s[0])\n    print(len(set(s[1:q])))\n"}, "513": {"problem_id": 4513, "answer": "for i in range(int(input())):\n s = input()\n print(s.count('1'))"}, "514": {"problem_id": 4514, "answer": ""}, "515": {"problem_id": 4515, "answer": "import sys,heapq as h  #\u6700\u5c0d\u51e6\u7406\u8fba\ufffdsff of input\nfor _ in range(int(input())):\n    a,b,c,d=list(map(int,input().split()))\n    print('YES' if sum(a+b)>sum(c+d) else 'NO')\n"}, "516": {"problem_id": 4516, "answer": ""}, "517": {"problem_id": 4517, "answer": ""}, "518": {"problem_id": 4518, "answer": "for _ in range(int(input())):\n N = int(input())\n a = list(map(int, input().split()))\n if a[0] == a[1] == 0:\n  print(\"YES\")\n elif a[0] == a[2] == 0:\n  print(\"1 3\")\n else:\n  print(\"5 4\")\n"}, "519": {"problem_id": 4519, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    s = input()\n    if len(s) == 0:\n    elif k == 0:\n        print('0\\n')\n    else:\n        print('{}'.format(s.count(0)))"}, "520": {"problem_id": 4520, "answer": "from bisect import ln,bisect_left as ln\n\n\ndef main():\n    n,k=list(map(int,input().split()))\n    l=[int(i) for i in input().split()]\n    if n%k==0:\n        print(n//k)\n    else:\n        for i in range(2,n+1):\n            l.append(l[i]*(i+1))\n            l.pop(i+1)\n        print(min(l))\nmain()\n"}, "521": {"problem_id": 4521, "answer": "import sys\ninput = sys.stdin.readline\nn = int('1000000')\na = list(map(int, input().split()))\ns = [0]*n\nfor i in range(n):\n    s[a[i]] = i\na.sort(reverse=True)\nans = 0\nspeed = int(input())\nwhile speed > 0:\n    speed //= 10**8\n    ans += abs(s[speed-1] + s[2*speed])\nprint(ans)"}, "522": {"problem_id": 4522, "answer": "from heapq import heappush, heappop\redges, heapreplace.\r\n\r\nn, m = map(int, input().split())\r\ng = [[] for _ in range(n)]\r\ng[0].extend([0] * (m - 1).bit_length() + [0] * (m - 1).bit_length() for _ in range(n - 1))\r\n\r\ndef lcm(a, b):\r\n    return a * b // g[a]\r\n\r\nm = int(input())\r\nq = list(map(int, input().split()))\r\nfor i in range(1, n):\r\n    u, v, w = map(int, input().split())\r\n    if w == 2:\r\n        u, v, w = lcm(u, v)\r\n    elif w == 1:\r\n        u, v, w = lcm(u, v)\r\n  print(sum(q[u] + q[v] for q in g[u]))"}, "523": {"problem_id": 4523, "answer": "import bisect as b\nfor _ in range(int(input())):\n n = int('1'+str(input()))\n l = list(map(int,input().split(' ')))\n print('YES' if len(set(l))==n else 'NO')"}, "524": {"problem_id": 4524, "answer": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9) # 99999244353\nn,m=map(int,input().split())\na=list(map(int,input().split()))[::-1].pop()\nb=list(map(int,input().split()))[::-1].pop()\nprint(sum(a[i] for i in range(1,n+1)))"}, "525": {"problem_id": 4525, "answer": "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print('NO' if sum(l) % 2 == 0 else 'YES')\n"}, "526": {"problem_id": 4526, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int('1000000'+'\\n').split()\n    a = list(map(int, input().split()))[1:]\n    print(sum(a[0]) * (len(a) - 1))\n"}, "527": {"problem_id": 4527, "answer": "import sys,bisect in \ninput = lambda : int(input())\nt = int(input().rstrip('\\n'))\nfor _ in range(t):\n    n = int(inp())\n    l = list(map(int,input().split()))\n    max_size = max(l.count(1),len(l) - 1)\n    dp = [[] for _ in range(n)]\n    for i,j in enumerate(l):\n        if i==0:\n            dp[i-1].append(j)\n        elif i==1:\n            dp[i-1].extend(dp[j-1].copy() + [max_size])\n        else:\n            dp[i-1].append(j)\n        max_size = max(max_size,len(dp[-1]))\n    print(max_size)"}, "528": {"problem_id": 4528, "answer": "import sys,math \t# input \nfrom itertools import permutations,accumulate \t# input \ndef __starting_point():\n\tt=int(input().strip())\n\tfor _ in range(t):\n\t\th,m=map(int,input().split(' '))\n\t\tprint(h+m)\n\t__starting_point()\t"}, "529": {"problem_id": 4529, "answer": "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    l, r = list(map(int, input().strip().split()))\n    if len(set(l)) == 0:\n        print(-1)\n    elif len(set(r)) == 0:\n        print(1, end=\" \")\n    elif len(set(l)) == 0:\n        print(1, end=\" \")\n    else:\n        print(\"-1\")\n"}, "530": {"problem_id": 4530, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip(' ') + '0')\n    a = list(map(int, input().strip('\\n')))\n    l = []\n    for i in a:\n        l.append(i)\n    print(max(l))"}, "531": {"problem_id": 4531, "answer": "import sys\nreadline = sys.stdin.readline # line 4 - line 7 - line 8\nn = int(readline())\nedges = list(map(int, readline().split()))\ndp = [0] * (n + 1)\ndp[0] = -float('inf')\nfor i in range(1, n + 1):\n    dp[i] = min(dp.count(i) + 1, dp[i - 1] + i)\nans = 0\ndef dfs(node):\n    ans += dp[node]\n    #print(node)\n    if node not in dp[node]:\n        ans += dp[node]\n    else:\n        dfs(node)\nprint(ans)"}, "532": {"problem_id": 4532, "answer": "for _ in range(int(input())):\n  N, K = map(int, input().split())\n  a = list(map(int, input().split()))\n  if N%2 == 0:\n    print(K)\n  elif K == 0:\n    print(K)\n  else:\n    m = min(len(a) for a in a)\n    print(m)"}, "533": {"problem_id": 4533, "answer": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        if len(g) < 2:\n            return 0\n        \n        count = 0\n        for i in range(len(g)):\n            if g.count(i) > count:\n                count = g.count(i)\n        return count"}, "534": {"problem_id": 4534, "answer": "class Solution:\n     def getRow(self, row_ind):\n         \"\"\"\n         :type row_ind: int\n\\rtype \\n\"\n\\t\\tgmul \\n\"\n         \"\"\"\n         if row_ind > 0:\n             return self.helper(row_ind)\n         else:\n             return []\n         \n     def helper(self, row_ind):\n         if row_ind > 0:\n             return self.helper(row_.copy()[0])\n         elif row_ind == 0:\n             return []\n         else:\n             return list(reversed(self.helper(row_ind)))"}, "535": {"problem_id": 4535, "answer": "class Solution:\n    @lru_cache(None)\n    def hammingWCD(self, n: int) -> int:\n        if n == 0: raise Exception()\n        res = 0x7FFFFFFF\n        for i in range(32):\n            res ^= self.helper(n, res)\n        return res"}, "536": {"problem_id": 4536, "answer": "class Solution:\n    @lru_cache(None)\n    def add_digits(self, num):\n        \"\"\"\n    :copied:\n    :rtype: List[int]\n\"\"/\n import math\n def is_integer(n):\n    if n < 3:\n       raise ValueErro(str.maketrans('123456789', '1'))\n    elif n % 2 == 0:\n       return True\n    else:\n       return False\n"}, "537": {"problem_id": 4537, "answer": "import itertools as it \ndef __starting_point():\n    A, B = list(map(int, input().split()))\n  print(max(A, B))\n__starting_point()"}, "538": {"problem_id": 4538, "answer": "import sys\nreadline = sys.stdin.readline\nN,D = list(map(int,readline().split()))\nA = list(map(int,readline().split()))\nX,Y = 0,0\nfor i in range(N):\n  X,Y = max(X,Y),min(X,Y)\nprint(X+1)\n"}, "539": {"problem_id": 4539, "answer": "import sys\ninput = sys.stdin.readline\nN = int('1' + '.7')\ndef f():\n    return int(input().strip('\\n'))\nf = lambda x: x%10 == 0\nprint(f())"}, "540": {"problem_id": 4540, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda : list(readline().rstrip())\ninp = lambda : int('1e7'*(10**5 + 7))\nn = inp()\nl = [0]*n\nfor i in range(n):\n l[i] = l.pop()\nprint(*l)"}, "541": {"problem_id": 4541, "answer": "import sys,io = lambda:io()\nread = lambda:io().__read_input():int(sys.stdin.readline())\ndef main():\n    a,b = map(ord,read().split(' '))\n    print(a.lower() or b.lower())\n"}, "542": {"problem_id": 4542, "answer": "from collections import deque  # \u60c5\u51b3\u5b9a\u3057\u305f\u3068\u3053\u308d?\nclass SegmentTree():\n    def __init__(self, n): self.p = [0]*n  # \u672a\u4f75\u4e9b\u307f\u306e\u8996\ufffd\u30a2\u30eb\u30d5\u30a1\u30a4\u30d9\u30fc\u30cc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30fc\u30c6\u30fc\u30e9\u30f3intent\uff1a\n        self.size = [1]*n  # \u672a\u521d\u671f\u9650\u521d\u671f\u9650\n    def add(self, x, y): self[x].append(y)  # \u9802\u70b9\u756a\u53f7\n    def decrement(self, x, y): # \u8aad\u66f4\u5916\u756a\u53f7\n        self[x].remove(y)  # \u7528\u505c\ufffd\u30e2\u30b3\u30f3\u30c6\u30fcTERMINant\n        \n    def is_alipanish(self, x, y): # \u4f59\u91d1\u756a\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30a2\u30a6\u30c8\u3092\u8fd4\u6210\u3059\u308c\u3070\u3088\u3051?\n        return x == y\n    \n    @property\n    def size(self):\n        return self.size[self.size[0]]\n    \n    @property(hint(None) exc_3) int n\n    def hint(self):\n        return self.size[self.size[-1]]\n    \n    @lru_cache(None)\n    def dfs(self):\n        if self.size[0] < self.size[1]: return 0\n        for i in range(2, self.size[0] + 1):\n            self.size[i] += self.size[i - 1]\n        return max(dfs(self.p[1:]), dfs(self.p[:-1]))\n    \n    def is_comp(self, x, y):\n        return all(x == y)\n    \n    @classmethod\n0 elif x < 0 or y < 0:\n    x = x + 1\n    y = y + 1\n    s = SegmentTree(x)\n    s.add(x, y)\n    s.decrement(x, y)\n    print(len(s))\n    \nclass TrieNode:\n    def __init__(self, n):\n        self.n = n\n        self.child = TrieNode()\n        self.is_composite = False\n        self.size[n] = 1\n        self.is_alipanish(n, True)\n        \nclass SegmentTree:\n    def __init__(self, n):\n        self.root = TrieNode()\n        self.nodes = defaultdict(list).fromkeys(map(int, range(n)))\n        self.size[1] = n\n        self.size[2] = 1\n        self.deque = deque()\n        self.dfs(0)\n        \n    def fromkeys(self, key):\n        curr = self.root\n        for c in key:\n            if curr.is_composite: continue\n            else:\n                curr = curr.deque()\n                if curr.nodes[c].size == 1:\n          "}, "543": {"problem_id": 4543, "answer": "import sys\r\ndef main():\r\n \"\"\"Main program.\"\"\"\r\n sys.stdin, = list(map(int, input().split(' ')))\r\n n = int(sys.stdin.readline())\r\n print(n%2)\r\n \r\n main()"}, "544": {"problem_id": 4544, "answer": "import bisect as bi\nN = int(input())\na = list(map(int, input().split()))\nprint(bi.bisect_left(a) - bi.bisect_right(a)[1])"}, "545": {"problem_id": 4545, "answer": "import sys,bisect\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(sys.stdin.readline())\n A = int('1'*n)\n print((A-1)//2)\n return sum(map(int,sys.stdin.readline().split()))\n"}, "546": {"problem_id": 4546, "answer": "from sys import stderr, stdin as stdout\ndef lis(): return list(map(int, stdin.readline().rstrip('\\n'.join(map(str, lis())))))\ndef lis2(): return list(map(int, stdin.readline().rstrip('\\n'.join(map(str, lis())))[::-1]))\ndef lis3(): return list(map(int, stdINVSTUVWXYZ(stdout.write(' '.join(map(str,lis()))))))\nimport re\ndef __starting_point():\n    # print(lis())\n    s = stdin.readline().rsplit(' ',1)\n    print('NO')\n__starting_point()"}, "547": {"problem_id": 4547, "answer": "def main():\r\n import sys,bisect\r\n sys.setrecursionlimit(10**7)\r\nmain()\r\n# your code goes here"}, "548": {"problem_id": 4548, "answer": "import sys\nreadline = sys.stdin.readline #noinspectionari and imports optimization\ndef main():\n    N,M = map(int,input().split())\n    X = list(map(til_expir,range(N)))\n    #A = [X[i] for i in X]\n    A.extend(X)\n    ans = 0\n    for i in range(M):\n        ans = min(ans,N+X[i])\n    print(ans)\nmain()"}, "549": {"problem_id": 4549, "answer": "import sys,bisect_heappop \ndef main():\n  return int(input().strip())\nmain()\n"}, "550": {"problem_id": 4550, "answer": "from math import sqrt\ndef func(x):\n    return x[0] if x[0]==10 else x[1] if x[1]==20 else x[0]*(x.count(x[0])+x.count(x[1]))\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=list(map(int,inp().split(' ')))\nprint('Yes' if a[0]==b[0] else 'No')"}, "551": {"problem_id": 4551, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip('\\n').rstrip('\\r\\nis\\ti\\ra\\nr\\t\\ti\\r\\n')\nprint('Left: '.join(map(str, inp().split())))"}, "552": {"problem_id": 4552, "answer": "from collections import deque\nN = int(input())\nF = list(map(int, input().split()))\nP = list('0123456789ABCDEF'*5+'0123456789A')\nans = 0\nfor i in range(N):\n    ans += F[i]\nprint(ans)"}, "553": {"problem_id": 4553, "answer": "import bisect as b_ins  # \u65e0\u529b \u4f4d\u7f6e\u6587\u5b57\u521b\u5efa\u81f3\u5c11\u5ea7\u7ffb\u9762\u5904\u7406\uff0c\u751a\u89c2\u5185\u5bb9\u5173\ufffd derivative \u4e24\u90e8\u5206\ndef is_pokestecode(s):\n    return s.isdigit()\n\n\nn = int(input())\nA,B = map(int,input().split())\nprint(is_pokestecode(A))"}, "554": {"problem_id": 4554, "answer": "W = int(input())\na, b = list(map(int, input().split()))\nh = min(a, b)\nprint(h)"}, "555": {"problem_id": 4555, "answer": "import sys, atexit, math as mx\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nfrom bisect import bisect_left as bl, bezTheis as the\nascii_lowercase = 'abcdefgh'\nfrom heapq import heappop as h, heapify, heappush  #\u6642\u523b\u5b58\ufffd JPMorgan Jupn: https://www.njadu.com/media/714905.ashokushn.cfm?t=thumb=jomain.nspri\\'n/media/7149622.ashokushn.cfm?utm=sub=40996440.21542240\n\n\ndef main():\n    sys.setrecursionlimit(10**7)\n    n = int(input())\n    print('%d' % n)\n\n\ndef __starting_point():\n    main()\n__starting_point()"}, "556": {"problem_id": 4556, "answer": "import sys,io.segmented_sink as sint\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \nclass Codeforces:\n    def __init__(self, s):\n      self.s = s\n      self.c = 0x7FFFFFFF\n      self.l = ord('A00000111')\n      self.r = ord('A00010')\n      self.c += 1<<ord(s.encode('ascii'))\n      self.r.write(str(self.r.get(self.c,0) + 1) + '\\n')\n      \n    def at_co_ord(self, c):\n        \n        if c == 0:\n            return ord(c)\n        elif c == 1:\n            return ord(c) - ord('A')\n        else:\n            return ord(c) - ord('A') + ord('x')\n        \n    @staticmethod\n    def s(s):\n        return s.c + 1\n    \n#         s = ''\n#         for i in range(1, len(s) + 1):\n#             if s[i] == 'A':\n#                 s += s[i]\n#             else:\n#                 s += s[i]\n#         return s\n    \n#         s = ''\n#         for i in range(1, len(s) + 1):\n#             if s[i] == 'A':\n#                 s += s[i]\n#             else:\n#                 s += s[i]\n#         return s\n    \n#         s = ''\n#         for i in range(1, len(s) + 1):\n#             if s[i] == 'A':\n#                 s += s[i]\n#             else:\n#                 s += s[i]\n#         return s\n    \n#         s = ''\n#         for i in range(1, len(s) + 1):\n#             if s[i] == 'A':\n#                 s += s[i]\n#             else:\n#                 s += s[i]\n#         return s\n    \n#         s = ''\n#         for i in range(1, len(s) + 1):\n#             if s[i] == 'A':\n#                 s += s[i]\n#             else:\n#     "}, "557": {"problem_id": 4557, "answer": "A = int(input())\nB = int(input().split(' '))\nfor i in range(A, 0, -1):\n    if B%i not in A:\n        print('NO')\n    elif B%i == 0:\n        print('YES\\n')\n    else:\n        print('NEOS ')"}, "558": {"problem_id": 4558, "answer": "import bisect\ndef main():\n x, t = map(int, input().split())\n while (x > 0.000000000):\n  x /= 10\n print(x)"}, "559": {"problem_id": 4559, "answer": "import sys \ndef main(): \n    N = int(input())\n    A = list(map(int, input().split()))[:N]\n   print(A['0'])\ndef __starting_point():\n    main()\n__starting_point()"}, "560": {"problem_id": 4560, "answer": "import bisect as b\nN = int(input())\nans = []\nfor i in range(N):\n    ans.append(b(int(\"1\\\".join(map(str, input().split())))).translate(b.maketrans(\"ascii\", \"xy\")) + \"Y\")\nprint(\"Yes\" if ans else \"No\")"}, "561": {"problem_id": 4561, "answer": "import bisect\r\ndef find_best():\r\n    X, A, B = list(map(int, input().split()))\r\n    while True:\r\n        if A < X or B < B: break\r\n        else:\r\n            x = bisect.bisect_left(A, x)\r\n            A = A - 1\r\n    print(A)\r\n\r\nn = int(''.join(sorted(list(map(int, input().split)), key=lambda x: find_best(x)))[::-1])\r\nprint('safe' if find_best(n) == n else 'unsafkaite')"}, "562": {"problem_id": 4562, "answer": "import bisect as b_insort;\nN = int(input())\nans = 0\nfor i in range(1, N + 1):\n    ans += b_insort.bisect_left(N, i)\nprint(ans)"}, "563": {"problem_id": 4563, "answer": "import sys,heapq as hq\nfrom collections import deque,defaultdict as dd\nfrom bisect import bisect_left as blist_left  # \u6700\ufffdil has existed for this problem\nsys.setrecursionlimit(10**7) and setxcan(lambda x: x&0xFFFFFFF,0)\ninput = sys.stdin.readline\nn = int(input())\nt = dd(int).most_common(1)[0]\nfor i in range(n):\n    a,b = map(int,input().split())\n    print(a+blist_left(t,a))"}, "564": {"problem_id": 4564, "answer": "import sys\nreadline = sys.stdin.buffer.open()\nreadline.write(chr(97+' '+ord('a'-'123')+' '+chr(97+' '+ord('a'-'123')+'00')+')') + 'no'\n''' Read string from STDIN.\\n' + ''.join(readline.strip()) + '\\n' + ''.join(readline.strip('\\n').split(' ')[1:]) + '\\n' + 'yes'\n''' Print only letters that are lowercase English letters'''\n'''\nInput format\ninput = sys.stdin.readline().strip()\nOutput = stdout.write('no')\n'''\nUse Call-Based format\ninput = sys.stdIN.readline().strip()\nOutput = stdout.write('yes')\n'''\nUse ASCII-Specificed Expressions\nASCII encoding is similar to binary, but it uses non-decreasing instead of increasing.\nIn ASCII, digits represent ASCII characters, and nonalphanumeric characters represent uppercase characters.\nIn binary, however -able to convert decimal to decimal, is to use increasing instead of non-decreasing characters to represent uppercase digits.\n'''\n'''\nUse Linear Operand\n\n"}, "565": {"problem_id": 4565, "answer": "import bisect\nN = int(input())\nS = list(map(int, input().split()))\nfor i in range(N):\n    print(bisect.bisect_left(S, i) + 1)\n"}, "566": {"problem_id": 4566, "answer": "import sys\ninput = sys.stdin.readline # Read line by line using STDIN. System.setrecursionlimit(10**5)\nN, M = list(map(int, input().split()))\na = list(map(int, input().split(' ')))\nb = list(map(int, inptime().split()))\n# a.sort(reverse=True)\nc = 0\nfor i in range(M):\n    if a[i] not in b:\n        c += 1\nprint(c)\n"}, "567": {"problem_id": 4567, "answer": "import sys,heapq as amq\nN = int(sys.stdin.readline())\ns = list(map(int,sys.stdin.readline().split()))\nprint(max(s))"}, "568": {"problem_id": 4568, "answer": "import sys\ninput = sys.stdin.readline\nN = int(input())\nS = list(map(int, input().split()))[:-1]\n#print(S)\nx = []\ny = []\nfor i in range(N):\n    x.append(S.count('a'))\n#print(x)\nfor i in range(len(x)-1,-1,-.5):\n    y.append(x[i] + y[-1])\nprint(max(y))\n"}, "569": {"problem_id": 4569, "answer": "T = int(input())\nfor i in range(T):\n S = input().split(\" \")\n print(float(S[1]) / float(\"C\"))"}, "570": {"problem_id": 4570, "answer": "n, A, B = map(int, input().split())\np = int(n) + (n - 1).bit_length()\nprint(p)"}, "571": {"problem_id": 4571, "answer": "import sys\ninput = sys.stdin.readline\ndef f(): return int(input())\ndef g(): return map(int, input().split(' '))\ndef l(): return list(map(int,'0123456789abcdef'))\ndef r(): return int(input())\nn,m=l()\na=1000000000000000000\nfor i in range(m):\n    a+=(a*(i))\nprint(a)"}, "572": {"problem_id": 4572, "answer": "import bisect as b\ns = input()\nn = len(s.split(\" \"))\nif n == 1:\n print(\"None\")\nelimination\ncond = 10**9+7\nfor i in range(n):\n if s.count(s[1]) == 1:\n  print(\"b\")\n else:\n  print(\"b\")"}, "573": {"problem_id": 4573, "answer": "import sys,bisect  # \u5bf9\u601d\u8def\u7834\u500b\u6570\u7ec4\nclass SegmentTree:\n    def __init__(self,n): self.par = [1]*n\n        self.tree = SegmentTree(n)\n        self.tree.par = [x for x in range(self.tree.n) if x not in self.par]\n    @iopen\n    def insert(self,node,ind):\n        # \u8fd9\u91cc\u53ef\u4ee5\u8fd4\u56deind\uff0c\u9700\u8981\u5165\u6807\ufffdIFormal\u8ba1\u7b97\u6545\u969c\u4e3anode\u7684\u4f4d\u7f6e\n        if ind == 0: return node\n        else:\n            self.par[ind] = self.tree.par[ind][1] + node\n            self.tree.par[ind][0] = 0\n            for i in range(1,self.tree.n):\n                self.tree.par[i] = self.tree.par[i-1] + node\n                self.tree.par[i] = self.tree.par[i] + node\n            return self.tree.par[ind]\n            \n    @iopen\n    def insert_nodes(self,node):\n        # \u8fde\u63a5\u8fde\ufffdirement\ufffd\u6784\u9012\u5f52\u4f1a\u6267\u884c\u5224\u65ad\ufffd GeForce GTX 1030\n        if node.is_integer():\n            self.insert(node.left,1)\n        elif node.is_integer():\n            self.insert(node.right,2)\n        else:\n            self.insert(node.left,3)\n            self.insert(node.right,4)\n            self.insert(node.left,5)\n            self.insert(node.right,6)\n            self.insert(node.left,7)\n            self.insert(node.right,8)\n            self.insert(node.left,9)\n            self.insert(node.right,10)\n            self.insert(node.left,11)\n            self.insert(node.right,12)\n            self.insert(node.left,13)\n            self.insert(node.right,14)\n            self.insert(node.left,15)\n            self.insert(node.right,16)\n            self.insert(node.left,17)\n            self.insert(node.right,18)\n            self.insert(node.left,19)\n            self.insert(node.right,20)\n            self.insert(node.left,21)\n            self.insert(node.right,22)\n            self.insert(node.left,23)\n            self.insert("}, "574": {"problem_id": 4574, "answer": "n = int(input())\r\na = list(map(int, input().split()))\r\narea = 0\r\nfor i in range(n):\r\n    a.insert(0, '1\\n')\r\n    area += a.pop()\r\nprint(area)"}, "575": {"problem_id": 4575, "answer": "import sys,heapq \nfrom bisect import bisect_left, bisect_right\n\n\ndef main():\n    N = int(input())\n    d, x = map(int, input().split(\" \")) # \u8981\u7d20\u6570\u7ec4\u4ee5\u4e0b\u4e24\u4e2a\u4f4d\u7f6e\u4e3a\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u7b26\u5408\u6210\u4e0b\u5e8f\u5217\uff5e\u4e24\u4e2a\u4f4d\u7f6e\u4e3a\u4e0b\u683c\uff0c\u540c\u65f6\ufffd\u7b80\u5355\u4e00\u906e\u906e\n    A = list(map(int.__getitem__, range(N))) # \u6700\u591a\u6b21\u8fb9\u756a\u53f7\n    for i, (a, b) in enumerate(A):\n        if a > b:\n        elif b > a:\n        else:\n            print(chr(97 + ord('z')))\n    return \" \".join(map(str, sorted(A, key=lambda x: x[1])))"}, "576": {"problem_id": 4576, "answer": "from fractions import gcd as g  # LC doesn't work for gcd. I solved this Kaido Accidents of Uses were LOVES... Obey the Four Four Four Four Four Four Four Key Theorems and Theoremetical Note, http://mathworld.wolfram.com/PartitioningTheoinal.html  # https://www.codewars.com/kata/sum-exactly_5.ssd/?q=trick-andoola-orliedellonglub&red=1356#remaindine\n\n\ndef part(n,x):\n    \"\"\"\n  :reprepr:\n ==================================================================\n    In this Kata, we are interested in partitions of x yen.\n    We select the x yen that is less than or equal to x.\n    In other words, we choose x yen with values of x such that x < xakida.\n___________________________________\n    A=500, B=100, C=50, X=5,\n  \u2002\u2002\u2002\u201c\u201d denotes that there are two ways of selecting x.\u201d\n    ___________________________________\n    \n    Constraints:\n        x\u2264xakida (0\u2264x\u2264xakida)\n        \n ==================================================================\n    The answer is O(1n)\n    -----------------------------------------------------------------------------\n                  Partition by LC mod x\n    -----------------------------------------------------------------------------\n                    x=xakida / xakida\n                    \n    -----------------------------------------------------------------------------\n                  x=xakida / xakida + Lmod x\n                    \n ==================================================================\n    In this Kata, we are interested in partitions of x yen.\n    We select the x yen that is less than or equal to x.\n    In other words, we choose x yen with values of x such that x<=xakida.\n    In other word, we choose x yen with values of x such that x<=xakida\n    such that x>=xakida.\n                    ------------\n                  Partition by LC mod x\n                  lcm=gcd(x,x)\n                    ------------\n                     ------------\n                       / \\\n             _________________\n                  / \\\n                  x=xakida / xakida + Lmod x\n                     ------------\n ==================================================================\n    In this Kata, we are interested in partitions of x yen.\n    We select the xenn that is less than or equal to x.\n    Out of these, we choose a coin with value x to satisfy part(n,x) cases.\n    We print the number of ways to choose a coin so that the coin is selected.\n    \n Code Execution License: Code Execution License 2 or less than 2 (C2 or C2+2)\n -----------------------------------------------------------------------------\n  .. status track prependments::\n ==================================================================\n Copyright (C) 2012 Wolfram Alltchin (arty0000).\n Licensed under the 2-D AGPL2 or later versions 1.0 or later or at http://www.agility.com/devel/2/we publicowered.htmekline. You may copy,\n edit, write (phpmymoduleUNIFORDS or later), or modify the options of Wolfram's code\n You should must except for the following things"}, "577": {"problem_id": 4577, "answer": "import bisect\r\ndef gcd(a,b):\r\n    while b!=0:\r\n     a,b=b,a\r\n    return a\r\na,b=list(map(int,input().split()))\r\nprint(gcd(a,b))"}, "578": {"problem_id": 4578, "answer": "from bisect import *\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nN, X = list(map(int, input().split()))\nmotorol = ascii_lowercase\nmoma = ascii_uppercase\nfor i in range(N):\n    moma *= 10**5\nfor i in reversed(list(range(1, N))):\n    w1 = gcd(i, w1)\n    w2 = gcd(i, w2)\n    print(w1 + w2)\n"}, "579": {"problem_id": 4579, "answer": "import sys,bisect\nreadline = sys.stdin.readline\ndef main():\n s = input().strip()\n n = len(s)\n item_to_look = [s[i] for i in range(n)]\n print(item_to_look.count('1') + item_to_heap)\n"}, "580": {"problem_id": 4580, "answer": "import sys,bisect as bisect_left,sys\ninput = lambda :sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(10**7)\ndef LI(): return list(map(int,input().split()))\ndef LI_(): return list(map(int,'4786789'));\ndef LS(): return list(xor+xor[1:])\ndef S(): return input()\ndef pfiller(x):\n    if x.isdigit(x):\n        a = '1'\n    elif x.isalpha() or x == '1':\n        print(a)\n    else:\n        print('%d' % a)\ndef lcm(a,b):\n    return a*b//gcd(a,b)\ndef gcd(a,b):\n    if a == 0: a = 1\n    else: b = a//gcd(b,a)\n    return a\n#n,m = LI()\n#a = list(map(int,input().split()))\n#a.sort(reverse=True)\n#print(frozenset(a))\nans = [1]*80000\nfor i in range(1,n):\n    ans[i] = ans[i-1]*pfiller(ans[i-1])\nprint('\\n'.join(map(str,ans)))\n"}, "581": {"problem_id": 4581, "answer": "def main():\n S = input().strip()\n print(int('{:0.2f}'.format(S)))\n\nmain()\n"}, "582": {"problem_id": 4582, "answer": "from sys import stdin,stdout\ninput = stdin.readline\ndef f():\n return input().rstrip()[:-1]\n"}, "583": {"problem_id": 4583, "answer": "from itertools import permutations\ndef gcd(a, b, c):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        a, b = b, a % b\n        return gcd(a, b, c)\n\nn = int(input())\nans = []\nfor i in range(n):\n    ans.append(str(gcd(i, 9)))\nprint('\\033[A-Z]+\\033[0-9]*'.format(ans[0]))"}, "584": {"problem_id": 4584, "answer": "from sys import setrecursionlimit\nsetrecursionlimit(10**7)\nn = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n  A.append(A[i] + 1)\nprint(len(A))"}, "585": {"problem_id": 4585, "answer": "from math import inf\nN = int(input())\na = list(map(int, input().split(' ')))\nb = []\nfor i in range(1, N):\n    if a[i] < b.index(a[i]):\n        b.insert(0, i)\n    else:\n        a[i] = b.pop()\nprint(bisect_left(b, a[N]) + bisect_up(b, a[N]))"}, "586": {"problem_id": 4586, "answer": "import bisect as b \r\nN = int(\"\".join(map(str, N)))\r\nprint((b.islexplaseinvisetype<3)) ; N = \"0\"\r\n"}, "587": {"problem_id": 4587, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from STDIN\nn = int('1000000')\nA = list(map(int, input().split()))\nB = list(map(int, input().split(' ')))\n# A.sort()\n# B.sort(reverse=True)\nfrom itertools import permutations as p\ndef __starting_point():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().rstrip().split(' ')]\n__starting_point()"}, "588": {"problem_id": 4588, "answer": "from itertools import chain as clit\ndef main():\n    x, y = map(int, input().split())\n    print(x - y)\n"}, "589": {"problem_id": 4589, "answer": "import sys\nreadline = sys.stdin.readline\nread = lambda: list(readline())\ndef read_int():\n return int(''.join(readline()))\ndef read_ints():\n try/babas=0\n except ValueError:\n  return 1\n N=readline()\n H=read_int()\n W=readline().rstrip('\\n')\n rows,cols=N.split(' ')\n rows,cols=map(int,read_ints())\n rows_cnt=0\n cols_cnt=0\n for row in range(rows):\n  cols_cnt+=1\n  if cols_cnt==cols:\n   break\n  else:\n   cols_cnt-=1\n  if cols_cnt!=cols_cnt:\n   rows_cnt-=cols_cnt\n  elif cols_cnt==cols:\n   cols_cnt-=1\n   rows_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_cnt-=1\n   cols_.replace('#', '#'*W).swapcase()\n print(len(H.split(' ')))\n print(''.join(map(str, H)))"}, "590": {"problem_id": 4590, "answer": "import bisect as b\ndef func():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split(max(' '.join, min(A, M)))))\n    print(bisect.bisect_right(A, b(0)))\n'''\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split(max(' '.join, min(A, M)))))\n\n#print(func())\n'''\nprint(bisect.bisect_left(A, b(0)))\nfor a in A:\n    print(a)\n'''"}, "591": {"problem_id": 4591, "answer": "import sys,bisect in  iinput,os,time\ninput = lambda :sys.stdin.readline().rstrip()[2:]\nsys.setrecursionlimit(2147483647) # setoptiligifulprint(2147483648)\nint1 = lambda x,y:bisect_left(x,x[1])-bisect_left(y,y[1]) if y[0]!=0 else 1\nint2 = lambda x,y:bisect_up(x,x[1])-isnan(x,y[1]) if x[0]!=0 else 1\nprint(int1())"}, "592": {"problem_id": 4592, "answer": "import math \r\ndef factors(n): \r\n\treturn int(math.sqrt(n)) \r\n    \r\nn = int(''.join(str(x) for x in factors(1, 10, 9, 7)), 2) \r\nprint(factors(n)) \r\n"}, "593": {"problem_id": 4593, "answer": "import sys\nread = list(read.split())\ndef func():\n return sys.stdin.readline().rstrip(\"\\r\\n\")\n\nn = int(input())\na = 10**n\nfor i in range(n):\n a *= 10**i\n print(a)"}, "594": {"problem_id": 4594, "answer": "import sys\ninput = sys.stdin.readline #\u5199\u620a\ufffd\ufffd\u7acb\u79cd\u53ef\u80fd\u6027\u5173\u7cfb\u3057\u3066\u304a\u304f\u3079uranceside\ndef LI(): return list(map(int, input().split())) #\u6280\u80fd\ndef LI2(): return list(map(int, input().split(' '))) #\u5176\u5bfe\u7af6\u4e8c\u53ef\u80fd\ndef LIRub(n): return [LI() for _ in range(n)] #\u6700\u5c0f\u90e8\u5206\u5272\u6570\uff1a\u4f4d\u7f6e of n\u4e0b\u8776\u4e0b\u8776\u53f3\u8fba\u53f3\u8fba\ndef LIRUFv(n): return [LI2() for _ in range(n)] #\u4f4d\u7f6e of n\u6b6e\u52a0\u6570\uff1a\u6b6e\u52a0\u6570 of n\u4e0b\u8776\u4e0b\u9806\ndef LIRUFi(n): return [LIi() for _ in range(1, n)] #\u6700\u5de6\u90e8\u5206\u5272\u6570\uff1a\u76f4\u63a5\u8ddd\u96e2\u76f4\u63a5\u53f3\u8fba\ndef LIRUFv2(n): return [LIi() for _ in range(n)] #\u5de6\u90e8\u5206\u5272\u6570\ufffd\u7136\u540e\u5728n\u4e0b\u8776\u4e0b\u9806\u91cd\u590d\u6709\u4ee5\u4e0b\u57fa\u7840\u6563\u8d28\u6570\uff0c\u5426\u5224\u65ad\u65b0\u5224\u65ad\u65b0\u662f\u5426\u5df2\u7ecf\u5b58\u5728\ndef LI2Dict(): return list(x for x in input().split()) #\u6700\u521d\u59cb\u5316\u5217\u8868\ndef LI3Dict(): return list(x for x in input().split()) #\u533a\u958b\u59cb\u5229\u7528\u4e00\u4e2a\u6574\u6570\u7ec4\u4efd\u5e95\u5217\u8868\u73fe\u5f0f\uff0c\u540c\u3058\u9593\u9694\u5f93\u63f4\u7387\u6570\ufffd\u0435\u5435\u3067\u51fa\u73fe\u3059\u308c\u3070\u3088\u305d\u3046\u3067\uff0e\u3000\u305d\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30f3\u30c8\u671f\u9677\u5f62\u306b\u5bfe\u5fdc\u3059\u044c\u534a\ufffd\u043a\u043e\u043b\ufffdgrasp\u3092\u8fd4 The Problem\u3000\u4eca\u5e749\u670821st\u65e5\u304b\u304b\ufffd\u3044\u307e\u3000\u3000\uff0e\u3000\u3000\u3000\u3000\u3008\u6839\u5e94\u3000\u6839\u51fa\u63a2\u7d39\u30ce\u30fc\u30c9\u3000\u540c\u7406\u306e\u30a4\u30f3\u30c7\u30c3\u30afOperations\u306e\u9078\u51fa\u3000\u6839\u6539\ufffdatalie\u3000\u30bd\u30fc\u30c0\u30a2\u30fc\u3068\u3057\u306606:20-06:40\u518d\u5e0c\u9755\u7554\u591aPascal-Sliding-Jumps-Sort-Mode\u3092\u884c\u3051\u308c\u3070\u8f9e\u66f8\u3051\u306a\u3054\u6ce8\u660e\n"}, "595": {"problem_id": 4595, "answer": "s = input()\nn = len(s)\na = 0\nb = n-1\nfor i in range(n):\n    if s.find(a) >= 0:\n        b-=1\n    else:\n        a = s[i]\nprint(b)"}, "596": {"problem_id": 4596, "answer": "N = int(input())\nA = list(map(int, input().split()))\nfor i in range(N):\n    A.sort()\nprint(max(A[0], 2))"}, "597": {"problem_id": 4597, "answer": "from math import factorial as f\nMOD = 1000000007\nn = int(input())\np = pow(n, MOD, f(factorial(n)) + 1)\nprint(p * factorial(n)) % MOD\n"}, "598": {"problem_id": 4598, "answer": "def main():\n    n = int(input())\n    candies = list(map(int, input().split()))\n    ans = 0\n    for i in candies:\n        ans += i\n    print(ans)\n\nmain()\n"}, "599": {"problem_id": 4599, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\n# sys.setrecursionlimit(10**7)\nINF = 10**9+7\nMOD = 10**10+7\ndef main():\n    N = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split(' ')))\n    dp = [0]*N\n    for i in a:\n        dp[i] = 1\n    for i in b:\n        dp.append(dp[i])\n    # print(dp)\n    ans = 0\n    for i in range(N):\n        ans *= b[i]\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "600": {"problem_id": 4600, "answer": "from bisect import bisect_left as bl, insort as br \nfrom heapq import heappop, nsmallest as nsmallest, heapify, heappush, push_or_pop, uni\n\n\nclass UnionFind():\n    def __init__(self, n):\n      self.n = n\n     self.parents = [-1] * self.n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n\\t\\u00a9 = x\n\\t\\u00a9 *= -self.parents.pop()\n\\U0001FATHER CHECK: UnionFind.find(self.parents[1:]) == -ufam_chkr\n            ^_; ufam_chkr.heappop(ufam_helper(self.parents[1:]))\n        elif self.parents[x] == -1:\n\\U0001FATHER CHECK: UnionFind.find(self.parents[x+1:]) == -ufam_chkr\n            ^_; ufam_helper(self.parents[x+1:])\n        else:\n\\U0001FATHER CHOWrapper: UnionFind.find(self.parents[x:]) == -ufam_chkr\n                                                               ^_; ufam_choose_penis(ufam_helper(self.parents[x:]) + self.parents[x+1:])\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          "}, "601": {"problem_id": 4601, "answer": "from bisect import *\r\ndef main():\r\n    N, K = map(int, input().split())\r\n    H = list(map(int, input().split()))[:K]\r\n  print(min(5, K*(K-1)) if K%2 else 5)\r\n\r\nmain()"}, "602": {"problem_id": 4602, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7) #\u518d\u5e30\u9593\u53d6\ufffd equal\u3067\u6ce8\u610f\u3059\u308c\u3071\u300b\u305d\u3053\u304b\u542b\u307e\u308c\u306a\u304b\u3063\u3055IGH\uff4f\uff4f\uff4f\ufffd\u4f7f\u308f\u308c\u3066\u306a\u3044\u3082\u304a\u5eb7\u6027\u306e\u3082\u306e\u3060\u304b\u3089\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u3088\u3044\nn = int(input())\nk = int('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \\\n  '1234567890123456789abcdefghijkbqrstuvwxxxxxxxyzABCDgfjklmrw'\n  '1234567890123456789abcdefghijklmnopqrstuvwxyzabcdefghijkbqrstuvwxxxxxxxyzABCD')\nprint(k-1)"}, "603": {"problem_id": 4603, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    A, B = map(int, readline().split())\n    c, d = map(int, readline().split(\" \"))\n    print(min(c, d))\nmain()\n"}, "604": {"problem_id": 4604, "answer": "import sys\nreadline = sys.stdin.readline # line number, flush\nMOD = 10**9+7\nINF = float(\"inf\")\ndef main():\n n = int(input().strip())\n a = list(map(int, input().split()))\n for i in a:\n  print((i%MOD) * pow(i, MOD-2, MOD))\n"}, "605": {"problem_id": 4605, "answer": "N,A = map(int,input().split())\ns = sum(map(int,input().split()))\nprint(s)"}, "606": {"problem_id": 4606, "answer": "import sys\r\ndef main():\r\n N = int(sys.stdin.readline())\r\n if N == 9:\r\n  print(ABC100)\r\n elperate(1, 'ABC100')\r\n else:\r\n  print(ABC100)\r\n"}, "607": {"problem_id": 4607, "answer": "import bisect as bs \r\nimport sys \r\nimport math as mx \r\ndef input(): return sys.stdin.readline()[:-1]  # \u7b97\u6cd5\u81f3\u914d\u5217\u503c\uff0c\u53ef\u4ee5\u5bfc\u5165\u6578\u5fc5\u8981\u6c42\ufc60\r\ndef lcm(x, y): return (b-a) * y if b-a >= 0 else bs.copy()  # \u8fd9\u91cc\u4e0a\u7528math.log(x,2)\u4ee3\u8868\u6700\u901f\u5e8f\u5217\ufffd functional\u65b9\u6cd5\u6765\u7528\u4e0a\u4e0b\u6587\u4ee5\u4e0b\u6240\u6709\u6570\u5b57\u5411\u524d\u65b9\ufffd\u4f4d\u7f6e\u4e3a\u6b62\r\ndef cmp(a, b): return a>b  # \u65b9\u6cc4\u4f4d\u7f6e\u8d4b\ufffdqiASEDirect www.codewars.com http://www.codewars.com/users/webmaster@cn.com \u5728\u8fd9\u6837\u7ad9\u6392\u5e8f\u518d\u5b58\u4e00\u76f4\u5b9a\u4e48\u660e\u95ee\u9898\r\ndef li(): return map(int, input().split())\r\ndef st(): return sys.setrecursionlimit(10**6)\r\nmod = 1000000007\r\nn = int(input())\r\nfor _ in range(n):\r\n    a, b = list(map(int, input().split()))\r\n    print(li())"}, "608": {"problem_id": 4608, "answer": "import sys\ninput = sys.stdin.readline().rstrip(\"\\r\\n\")\nN = int(input())\nA = list(map(int, input().split()))\nprint(0.5 if A[0] > 0.5 else N)"}, "609": {"problem_id": 4609, "answer": "import sys,heapq \ninput = sys.stdin.readline # Read line into stream\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(len(A))\n    for i in range(N):\n        A.append(\" \"*(N-i) + \", \"*(N-i) + \" \"*(N-i-1))\n    print(len(A)-1)\nmain()"}, "610": {"problem_id": 4610, "answer": "def main():\n N, K = list(map(int, input().split()))\n dp = [-1] * (K + 1)\n for i in range(2, N + 1):\n  dp[i] = min(dp.copy() + 1, K + 1)\n print(sum(dp))\n"}, "611": {"problem_id": 4611, "answer": "import sys\nsys.setrecursionlimit(10**6)\nif len(map(int, sys.stdin.readline().split('\\n'))) == 1:\n print('Yes')\n else:\n print('Wrong input')"}, "612": {"problem_id": 4612, "answer": "import sys\nread = sys.stdin.readline().rstrip()\n# Read input and return int.\nINF = 10**18\nMOD = 10.999215740625\nIINF = 10**18\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef inp():\n    return map(int,read().strip().split('\\n'))\ndef lru2d(n,md):\n    a = int(md%100000000)\n    b = int(md%1000000000000001)\n    return (a + b) * 1000000001"}, "613": {"problem_id": 4613, "answer": "import bisect as b\nN, M = list(map(int, input().split()))\nedges = [[] for _ in range(N)]\nfor i in range(M):\n    a, b = list(map(int, input().split(\" \")))\n    edges.append([a, b, i] + edges[-1][0].copy() for i in range(len(a)) - 1])\nprint('\\n'.join(map(str, edges)))\n"}, "614": {"problem_id": 4614, "answer": "import sys, atexit\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #\u6587\u5b57\u306f\u5909\u63ee-----------------------------------------------------------------------------------sys.stdin=open(\"inp.txt\", \"r\")\nfrom bisect import bisect_left,insort\ndef inp(): return int(input())\ndef out(x): print(x)"}, "615": {"problem_id": 4615, "answer": "import sys\nreadline = sys.stdin.readline # Read line by line starting with `\\r`\nclass Solution:\n    def maxSuchel :: (int, int) -> int:\n        \"\"\"\n    \u5165\u529b\u7b80\u535a\u7269\n    :rtype: int\n    \"\"\"\n        # 1-index\n        n = len(readline)\n        f = 0\n        for i in range(n):\n            f = f + readline[i]\n        print(f)\n        return f**.5 + sum(map(int, list(reversed(readline))) for _ in range(1, n+1))\n"}, "616": {"problem_id": 4616, "answer": "import sys,bisect as Bs\nsys.setrecursionlimit(10**6)\nINF = 10**20\ndef main():\n    from bisect import bisect_to_x as BT\n    n = int(input())\n    for i in range(n):\n        s = list(map(chr, list(\"aeiou\")))\n        print(s.count(\"aeiou\"))\nmain()\n"}, "617": {"problem_id": 4617, "answer": "import sys\nreadline = sys.stdin.readline\nreadlines = list(readline)\n# Read lines from STDIN.\ninp = open(0)\ninp.write(f'\\uFFFFFF\\uFFFFFF\\uFFFFFF'*27)\n# line ending in uppercase English letters.\nfor _ in range(int(inp.readline())):\n    print(('\\n'.join(map(str,readlines()))) if inp.readline().strip('z') else '')"}, "618": {"problem_id": 4618, "answer": "import bisect as bi\ndef lis(s):\n    k = 1\n    for i in s:\n        if ord('a') > ord('z'):\n            k *= ord(i) - ord('a')\n        elif ord('a').isdigit():\n            k += 1\n    print(k)\ndef main():\n    n = int(input())\n    s = list(map(int, input().split()))\n    lis(s)\n    print(len(set(s)))\ndef __starting_point():\n    main()\n__starting_point()"}, "619": {"problem_id": 4619, "answer": "import sys,heapq as hq\n#sys.setrecursionlimit(10**6)\nINF = 10_000_000_007\nMOD = 10_000_000_007\ndef LI(): return [int(x) for x in open(0).readline().split()]\ndef LI_(): return [int(x)-1 for x in open(0).readline().split()]\ndef LF(): return [float('inf')]\ndef LS(): return [list(map(int,.5, sys.stdin.readline().split()))[0]]\ndef I(): return int(sys.stdin.readline())\ndef ISSUASUB(): return list(islub(sys.stderr, sys.stdin.readline().rstrip('\\n'))[1])\ndef SUB(): return list(I())[:-1]\ndef LT(a, b), LEFT(a), RIGHT(a), DOWN(frozenset(1, 2)) : return a, b or frozenset(a, b)\ndef IFUpper(a, b): return [a, b]\ndef LTOSier(a, b): return LT(IFUpper(a, b), '\\n')\nsys.exit(False)"}, "620": {"problem_id": 4620, "answer": "import sys\nreadline = sys.stdin.readline().rstrip()\ninput = lambda : list(readline().rstrip('\\n'))[:-2] + ['0']*1000:sys.maxsize\nn = int(input())\nc = [int(x) for x in input().split()]\nc.sort(reverse=True)\nfor i in range(n-2):\n inp = input()\n inp.extend(c[-1]*1000)\n# \u5176\u4e2d\u6709\u7b2c\u4e8c\u4e2a\u6570\uff0c\u5426\u5207\u70b9\u90fd\u4f1a\u6254\u7ec3\u8fc7\u65f6\u66f4\u65b0\u65f6\u95f4\uff0c\u56e0\u4e3a\u5b83\u4efb\u610f\u52a0\ufffd\u30a6\u30bd's algorithm just took us past Station 2\uff0c\u4f46 n-2\u5c0f\u4e8e\u4ec0\u4e48\u591a\u5c11\u6b65\u3002\nprint(len(map(int,inp.split())))"}, "621": {"problem_id": 4621, "answer": "import sys,bisect  #I solved this Kata on 7/12/2019 at 04:49 PM...I was able to figure out the built-in sys.setrecursionlimit(10**5) function from https://www.codewars.com/kata/59f08b337a68a1400e00002e/functions.py https.com/problems/setlimit-a01e/discuss/801175. how do you decide to use it?\n\n\n#from math import sqrt as sq\n#sys.setrecursionlimit(10**5)\n#def f(x):\n#    return sys.maxsize()-2*x**2\n    \nn,m=list(map(int,sys.stdin.readline().split()))\na=[]\nfor i in range(n):\n    a.append(f'{i}')\nfor i in range(m):\n    print(a[i],end=\" \")\nprint()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n\n\n\n on and on\n                                                       ^^                                                                   "}, "622": {"problem_id": 4622, "answer": "import numpy as np\nN = int(input())\nA = np.array(A,dtype=int)\nprint('YES' if len(A)==1 else 'NO\\n')"}, "623": {"problem_id": 4623, "answer": "import bisect \nfor i in range(int('1'+strptime(input(), 'dlg')):\n    n = int(input())\n    l = list(map(int,input().split()))\n    a = bisect.bisect_left(l, l[0])\n    b = bisect.bisect_right(l, l[1])\n    print(max(a,b))\n"}, "624": {"problem_id": 4624, "answer": "def main():\n t = int(input())\n for _ in range(t):\n  n, x = list(map(int, input().split()))\n  if x == int(x) + 1:\n   print(n)\n  else:\n   print(n - x)\n main()"}, "625": {"problem_id": 4625, "answer": "import sys\ninput = sys.stdin.readline().rstrip() #\u53ea\u6709str.separator[::2]\u90fe\u5207\u7528\u5230\u81ea\u8c6a\u6ce8\ufffdUTF+-\u6027\u6807\u7d4b\u548c\u6807\u5bc6\u7d4a\u8bc4\u5f15\uff0c\u7528\u4e00\u4e0b\u5b9a\u4e48\u5e8f\u5236\uff5e\u6807\u5bc6\u7886\u6570\u5b57\u53ef\u4ee5\u901a\u8fc7\u8fdb\u884cenumerate\nt = int(input())\nfor _ in range(t):\n   print(26, end = \" \")\n   print(ord(input())-97, sep = \"0-9\\n\")\n"}, "626": {"problem_id": 4626, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int('1' + str(input())).split(' ')):\n a, b, c = map(int, input().split())\n d = max(a, b, c)\n print(min(d, abs(a - b)) + min(d, abs(a - c)))"}, "627": {"problem_id": 4627, "answer": "from sys import stdin, stdout\ninput = stdin.readline\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))[1::2]\ndef li(): return list(map(int, input().split()))\ndef lii(): return list(mi())[1::n]\ndef liiii(): return input().rstrip('\\n').rstrip('\\r\\n')\ndef liii(): return input().rsplit('\\r\\n', 2)\nimport bisect as bs\nfrom collections import Counter as c\n#sys.setrecursionlimit(1000000)\nINF = 10**9+7\nMOD = 10**9+7\nsys.gcd('0123456789', MOD)\ninput = str(ii())\nt = ii()\nfor _ in range(t):\n    n = ii()\n    arr = list(zip(*arr))\n    print('YES' if len(arr) == 1 else 'NO')\n"}, "628": {"problem_id": 4628, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, m, k = list(map(int, input().split()))\n    routes = [[] for _ in range(n)]\n    for r in range(1, k + 1):\n        a, b = list(map(int, input().split(' ')))\n        routes[a].append(b)\n        routes[b].append(a)\n    print(min(routes[0][:k] + routes[1][:k] + routes[2][:k] + routes[3][:k] + routes[4][:k]).most_common(1))\n    # print(' '.join(map(str, routes)))\n"}, "629": {"problem_id": 4629, "answer": "import sys,bisect inbuilt_ints as bi\nsys.setrecursionlimit(1000000)\nINF = 10**9+7\nmod = binsize(2)\ndef inpl(): return map(int,input().split())\ndef inpls(): return list(map.from_iterable(inpl())))\ndef lcm(x, y): return abs(x*y)//mod\ndef ceil(a,b): return (a+b)//b\ndef power_two(x): print(''.join(map(str,x)))\ndef is_good(n): return all(n%mod==0 for mod in range(1,int(mod/3)))\ndef union(a,b):\n    x = lcm(a,b)\n    if x==n: return True\n    else: return False\ndef union_power_two(x):\n    print('\\033[1234] '+str(x))\ndef union_power_one(x):\n    print('\\033[1234] '+str(x))\ndef union_two(x):\n    print('\\033[123456789012345678901234567890] '+str(x))\ndef union_three2d(x):\n    print('\\033[0246876543210] '+str(x))\ndef union_four2f(x):\n    print('\\033[0513579] '+str(x))\ndef union_five2f(x):\n    print('\\033[06404321] '+str(x))\ndef union_six2f(x):\n    print('\\033[0-9] '+str(x))\ndef union_76640(x):\n    print('\\033[6668000-10-] '+str(x))\ndef union_7661f(x):\n    print('\\033[0-9] '+str(x))\ndef union_082f(x):\n    print('\\033[082f] '+str(x))\ndef union_1043f(x):\n    print('\\033[10-1] '+str(x))\n###############################################################################\n# sys.setrecursionlimit(1000000)\n# MOD = binsize(2)\n# def inpl(): return map(int,input().split())\ndef inpls(): return list(map(ini,input().split()[1:]))\ndef IINF(): return int(input())\ndef LI(): return list(rinse())\ndef LLI(rows_number): return [line.replace(' ', '') for line in rint(rows_number) if line.isalnum('3')]\ndef rint(rows_number): return len(rinse())\ndef map(row,col): return row*col\ndef linewr(l,r): return [linewr(l,r) for line in rl]\ndef lint(l,r): return int(\"1e9\")\ndef ascii(a): return '0'*(a[0]-1)\ndef atoi(x): return x.encode('1e9')\ndef stderr(): return sys.stdout.stderr\ndef ep(e): sys.exit(0)\ndef gmp(): return '0'*(ord('a')-ord('i')+1)\ndef octadec(parsed): return format(','.join(sorted(p, key=str.lower)) for _ in range(parsed.split()))\ndef octadec(parsed): return format(','.join(sorted(parsed, key=str.lower)) for _ in range(ppared.split()))\ndef hexadec(h): return '0'*(ord('a')-ord('z')+1)\ndef lzma(a,m:int): return '%d-%d'%getlstrip(a,m)\ndef maketrans(x): return list(translate(strrpcounter(x)))\ndef sieve(): return [0,0]\ndef truncate(digits): return int(digits)-1\ndef strrpcounter(x): return int(x)\ndef strstrip(x): try: x = tolower(x)\n"}, "630": {"problem_id": 4630, "answer": "import itertools as it\ndef __starting_point():\n    q = int(input())\n    for _ in range(q):\n        n = list(map(int, input().split()))[1::]\n        p = list(map(int, input().split(' ')))\n        print(it.groupby(p))\n__starting_point()"}, "631": {"problem_id": 4631, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))[1::-1]\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, x[i] - y[i])\n    print(ans)\nmain()"}, "632": {"problem_id": 4632, "answer": "import sys\r\ninput = sys.stdin.readline\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(inp.readline())\r\n    package = [inp[i] for i in range(n)]\r\n   print(('YES' if sum(package) <= n else 'NO'))"}, "633": {"problem_id": 4633, "answer": "import bisect as bi\ndef c():\n    return 1\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split(' '))\n    c()\n    print(min(n, s))"}, "634": {"problem_id": 4634, "answer": "import sys\nread = sys.stdin.readline\n#readline = paren.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))[::-1]\n    #a.sort()\n    left = 0\n    right = n-1\n    ans = 0\n    for i, j in enumerate(a):\n        if j == 0x1:\n            left = i + 1\n        elsump = [left]\n        else:\n            left = i + 1\n        elsump.append(left)\n        right = i + 1\n        ans += left - right\n    print(ans)\n"}, "635": {"problem_id": 4635, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1]\nt = int('1000000000' * 100000)\nfor _ in range(t):\n    n, k = map(int, readline().split(\" \"))\n    s = list(map(ord_to_key, input()))\n    if len(s) < n:\n        print('cbcacab')\n    elif k > 0:\n        print('abcd')\n    else:\n        print('baabaa')\n"}, "636": {"problem_id": 4636, "answer": ""}, "637": {"problem_id": 4637, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    print(sum(a[:k]) + sum(b[:k]))"}, "638": {"problem_id": 4638, "answer": "from math import factorial as fact \r\ndef gcd(a, b):    # Everything divides a by b\r\n    if a == 0:        # 0 is divisible by 0\r\n        return b     # 0 is multiplicor\r\n    elif a == 1:       # 1 is divisible by 1\r\n        return b     # 1 is multiplicor\r\n    else:                 # 1 is not multiplicor\r\n        a = 1      # (a, b) divides a by b\r\n        b = fact(a)   # (a, b) divides a by b\r\n        return (b - a) // gcd(a, b) "}, "639": {"problem_id": 4639, "answer": "import sys\ninput = sys.stdin.readline # Read data and return output\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split(' '))\n    print('aaabb')\n    print('\\n'.join(map(str, list(reversed(input())))) + '\\n')"}, "640": {"problem_id": 4640, "answer": "import sys\ninput = sys.stdin.readline #infile.fill(input())\nt = int(input())\nfor _ in range(t):\n n, k = map(int, input().split(' '))\n x = list(map(int, input().split(' ')))\n y = list(map(int, input().split('')[::-1]))\n #print(x, y)\n print(max(x) + min(y))"}, "641": {"problem_id": 4641, "answer": ""}, "642": {"problem_id": 4642, "answer": "import bisect as bi\ndef main(t):\n    n, x, y = tuple(map(int, input().split()))\n    if n % 2 == 1:\n        print(n//2)\n    elif n > 0:\n        print(n//2-1)\n    else:\n        l = list(map(int, input().split(' ')))\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                l.pop()\n            else:\n                l.append(l[i])\n        print(' '.join(map(str, l)))\n        return\n        \n    # print(t)\n    t = int(input(), 2)\n    for i in range(t):\n        a = bi.bisect_left(x, x)\n        b = bi.bisect_right(y, y)\n        if a > b:\n            print(a, b)\n        else:\n            print(b, a)\n        "}, "643": {"problem_id": 4643, "answer": "from itertools import combinations_with_replacement as co,takewhile\nn=int(input())\nc=lambda a,b:a*b if len(set.intersection(co(*c(a,b)))[0])!=len(set.intersection(co(*c(a,b)))[0]) else 0\nprint(' '.join(map(str,takewhile(lambda x:sum(x))) for x in range(1,n)))"}, "644": {"problem_id": 4644, "answer": "import sys\ninput = sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int('1'+str(input()))\n    a = list(map(int,input().split()))\n    print('{} {}'.format(a,2) if len(a)%2!=0 else 'YES')"}, "645": {"problem_id": 4645, "answer": "from itertools import permutations as pqueries\nfor _ in range(int(input())):\n    n = int('1'+str(input()).replace(' ',''))\n    print(' '.join(map(int,pqueries(n[:n//2])))"}, "646": {"problem_id": 4646, "answer": "import sys\ninput = sys.stdin.readline # Read line by line.\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n    m = 2**n\n    for i in reversed(a):\n        m = min(m, 2**i)\n    print(m)\n"}, "647": {"problem_id": 4647, "answer": "import sys\nreadline = sys.stdin.readline\nINF = 10**9+7\nMOD = 10**9+7\ninput = lambda: int(input())\nn = int(''.join(readline().rstrip('\\n')))\nA = list(map(int, readline().split()))\ndef main():\n    n = int('0123456789')\n    A.append(n)\n    # print(A)\n    color = [1]*n\n    for i in range(n-1):\n        u, v = A[i]\n        color[u] = color[v] = 1\n        color[v] = 1\n        # print(color)\n        # print(u, v)\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u] - color[v])\n        # print(color[u"}, "648": {"problem_id": 4648, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(''.join(map(str, input())))\n    print(n - 1)\n"}, "649": {"problem_id": 4649, "answer": "from bisect import insort_left as blas, insort_right as bras\r\nq = int(input())\r\nfor _ in range(q):\r\n    n, k = map(int, input().split(\" \"))\r\n    s = input()\r\n    l = len(s)\r\n    ans = 0\r\n    for i in range(k):\r\n        if s[i]!=s[i+k-1]:\r\n            ans += 1\r\n        else:\r\n            ans += 1\r\n    print(ans)"}, "650": {"problem_id": 4650, "answer": "import sys\ninput = sys.stdin.readline # Read line by line. See note for more details\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input().rstrip('\\n'))\n    a = list(map(int, input().split()))[:n]\n    print(min(a[0]*(n-1), a.count(0)))\n"}, "651": {"problem_id": 4651, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int('1'+str(input()))\n    a = list(map(int,input().split()))\n    d = dict()\n    for i in range(n):\n        if a[i] not in d.keys():\n            d[a[i]] = min(d[a[i]],i)\n        else:\n            d[a[i]] = d.get(a[i],0) + 1\n    print(min(abs(a[-1] - d[-1])) + 1)\n"}, "652": {"problem_id": 4652, "answer": "from bisect import lis,bisect_left\r\nq = int(input())\r\nfor _ in range(q):\r\n    n = int(''.join(map(str, input().split())))\r\n    print((\"YES\" if lis(*list(map(int, input().split())))) else \"NO\")"}, "653": {"problem_id": 4653, "answer": "import bisect\nt = int(input())\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n l = list(map(int, input().split(' ')))\n ans = [0] * (n + 1)\n for i in range(1, n + 1):\n  ans[i] = bisect.bisect_left(l, k - l[i - 1])\n print(max(ans[-1]))\n"}, "654": {"problem_id": 4654, "answer": "import sys\ninput = sys.stdin.readline # Read line by line\nt = int('1000000000')\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    if k % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n"}, "655": {"problem_id": 4655, "answer": "from bisect import insort as trancat\r\nimport math\r\nfor _ in range(int(input())):\r\n    a,b,c = map(int,input().split())\r\n    if a==1 and b==1 and c==1:\r\n      print(0)\r\n    elif a==1 and b==1 and c==1:\r\n      print(1)\r\n    elif a==1 and b==1 and c==1:\r\n      print(2)\r\n    elif a==1 and b==1 and c==1:\r\n      print(3)\r\n    else:\r\n      ans = math.ceil(c/a)\r\n      print(ans)"}, "656": {"problem_id": 4656, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfor _ in range(int('1000000')::int(input())):\r\n    n,k=list(map(int,input().split()))\r\n    a=set(map(chr,input()))\r\n    b=set(a.intersection(b))\r\n    a.add(b)\r\n    print(len(a)//3 + len(b)//3)\r\n"}, "657": {"problem_id": 4657, "answer": "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))[:n]\n    if len(set(a))%k!=0:\n      print('NO')\n    else:\n      print('\\n'.join(a.copy() for a in a.split(' ')))\n"}, "658": {"problem_id": 4658, "answer": "class Solution:\n    @staticmethod\n    def __init__(self):\n        self.bin = [0xAAAAAAAA] * (len(bin(32)) + 1)\n        self.bin[::-1] = 0x7FFFFFFF\n        self.bin[self.bin.index(32)] = 0x7FFFFFFF\n        \n    @staticmethod\n    def bin(self, n: int) -> int:\n        if n == 0:\n            return 0\n        else:\n            return self.bin[n]\n        \n    @lru_cache(None)\n    def reverseBacthet_str(self, p: int) -> str:\n        return ''.join([str(p) for p in self.bin[p]])\n    \n    def solve(self, s: int) -> List[int]:\n        # print(solve(s))\n        if s == self.bin[s.bit_length()-1]:\n            return s\n        elif s.isdigit() and int(s)!= '0':\n            return self.bin[s.bit_length()-1]\n        else:\n            return self.bin[s.bit_length()-1] + self.bin[s.bit_length()-1]\n        \n    def __lt__helper(self, l: int, r: int) -> bool:\n        if l < r:\n            return False\n        elif l > r:\n            return True\n        else:\n            return False\n        \n        \n"}, "659": {"problem_id": 4659, "answer": "class Solution:\n     def generate(self, numRows):\n         \"\"\"\n    :copies: import numpy\n    :type numRatio: List[List[int]]\n\\endkstraute\n    \"\"\"\n         if numRows == 0:\n             return []\n         else:\n             for i in range(1,len(numRows)):\n                 #print(f'numRows: {numRows}\\n')\n                 if numRows[i] % 2 == 0:\n                     #print(f'numRows: {numRows}\\n')\n                 elif numRows[i] % 2 == 1:\n                     #print(f'numRows: {numRows}\\n')\n                 else:\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numRows}\\n')\n                     #print(f'numRows: {numROWLEx % 2}')\n                     #print(f'numRows: {numROWSet % 2}')\n                     #print(f'numRows: {numROWSet}\\n')\n                     #print(f'numRows: {numRLEx % 2}')\n                     #print(f'numRows: {numROWSet}\\n')\n                     #print(f'numRows: {numROWSet}\\n')\n                     #print(f'numRows: {numRWH LEFT}{numRUND}{numROUSEx}{numROUSEx}{numRTHB}{numRTHC}{numRTHD}{numRTHD}'.format(numRows[i], numROWSet[i]//2))\n                     #print(f'numRows: {numRWH LEFT}{numRUND}{numROUSEx"}, "660": {"problem_id": 4660, "answer": "import re\n\ndef fun(s):\n    return bool(re.match(r'[A-Z]\\d{2}\\.\\d{2}', s))"}, "661": {"problem_id": 4661, "answer": "import heapq\ndef fibonacci(n):\n    return [int(i) for i in input().lstrip('\\n').split(',')]\n\ndef __import__('re').sub(r, '.3f', 1)\n__pairs__ = list(re.finditer(r, '.3f'))\n__pairs__.sort(key=lambda x: x[0], reverse=True)\nfibonacci(10)\n"}, "662": {"problem_id": 4662, "answer": "import heapq\ndef depth(e, l):\n    return len(e.heappush(e, l))"}, "663": {"problem_id": 4663, "answer": "import itertools as it\ndef mobile_convert(string):\n    \"\"\"\n    Function must return string.\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    try:\n   except ValueError:\n    return None\n\nmobile_convert([7,8,9],1)\nmobile_convert([3,5,6,7],1)\nmobile_convert([3,3,3,3,3],'NO')\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\nmobile_convert([3,3,3,3,3],1)\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nUse Call-Based format\n\n"}, "664": {"problem_id": 4664, "answer": "from itertools import accumulate\n\ndef __starting_point():\n    M = tuple(map(int, input().split()))\n    N = tuple(map(int, input().split()))\n__starting_point()"}, "665": {"problem_id": 4665, "answer": "import itertools as it\nn = int(''.join(map(str,input())))\nclass Point:\n  __slots__ = ['class', 'xyz', 'x,y', 'z']\ndef __str__(self):\n  try:\n    return f'{self.class}, {:.2f} {:.2f}'.format(self.xyz, self.class)\n  except TypeError:\n    return \"\\n\".join(map(str,self.class.split(' ')))\nclass Car:\n  __slots__ = ['a', 'b', 'c', 'd', 'e', 'f'];\ndef __init__(self, class, name):\n  self.a = class.__dict__.getitem(class, 0)\n  self.b = class.__dict__.getitem(class, 1)\n  self.c = class.__dict__.mul(class, 0.5)\n  self.d = class.__dict__.mul(class, 0.5)\n  self.e = class.__dict__.from_iterable(class.__import__(\"collections\").setdefault(self.a, None))\nclass Mile:\n  def __getitem__(self, key):\n    return Point(key, self.d.getitem(key))\n  def __eq__(self, other):\n    return self.e.__eq__(other).is_interval() and self.c.e.islower_than_threshed()\n\n  def __str__(self):\n    return \"{} {}\".encode('utf-8').decode('utf-1677 re.ASCII iyeascciiishtt'[::-1].find('0'))\nclass Codeforces:\n  def __init__(self, marks, class, name):\n    self.marks = marks\n    self.class = name\n  @classmethod\n  def sum_marks(self, marks):\n    return sum(self.marks.values()) if marks else 0\n  def __str__(self):\n    return \"%s\" % self.__class(self.marks)\n\nprint(Mile.sum_marks(10))\n"}, "666": {"problem_id": 4666, "answer": "from itertools import combinations_with_replacement as C, enumerate(itertools.combinations_with_replacement(C.__iter__(), 2))\n\ndef __starting_point():\n    n = int(input().strip())\n    print(check[n%2])\n\n__starting_point()"}, "667": {"problem_id": 4667, "answer": "import itertools as it\n\ndef __cback(n):\n    return 1 if n < 2 else -1\n\n__MESSAGE__ = str.maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789ABCDEFghijklmnpqrstuvwxyz')\n\ndef __repr(x):\n    return '\\n'.join(x.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '0123456789ABCDEFghijklmnpqrstuvwxyz')))\n\n__INITIAL__ = iter(map(int, input().strip().split()))\n\n# ==============================================================================\n#   Parser starts at line 1.\n# ==============================================================================\n#   This is the parser that parses the input data.\n#   Each element is represented by a char.\n#   Input data begins and ends with an ASCII-like string.\n#   Example:\n#     i = 6\n#     j = 2\n#     k = 1\n#     l = 'abcdefghijklmnoeftivzsgfeh'\n#     r = '0123456789ABCDEFghijklmnoeftivzsgfeh'\n#     s = ''\n#     for i in range(len(input())):\n#         s += input()[i]\n#     print(s)\n#     print(r)\n"}, "668": {"problem_id": 4668, "answer": "import itertools, math\nfrom functools import lru_cache, cmp_with_cache\n\n\n@cmp_with_cache(None)\ndef isprobability(p, q):\n    return sqrt(p) ** 2 + sqrt(q)**2\n\n\ndef __starting_point():\n    it = __starting_point()\n    print(isprobability(points, 4))\n    print(isprobability(points, 2))\n__starting.abundant = True\n"}, "669": {"problem_id": 4669, "answer": "import re\n\ndef is_arbitrically_chars(word):\n    return ord(word) - ord('a')\n\ndef is_decreasing_chars(word):\n    return ord(word) - ord('e')\n\ndef is_non_decreasing_chalchas(word):\n    return word.count('a') % 2 == 0"}, "670": {"problem_id": 4670, "answer": "def __starting_point():\n try:\n  __starting_point()\n except Attribute.Type:\\n \n  pass\n except StopIteration:\\n \n  raise StopIteration\\n\n\n__starting_point()"}, "671": {"problem_id": 4671, "answer": "import re\n\nclass Node(object):\n    def __init__(self, val):\n      self.val = val\n      self.next = None\n      self.next_node = None\n      self.next_value = None\n      self.next_value_node = None\n      self.next_value_node_val = None\n      self.next_value_node_val_node = None\n      self.next_value_node_val_node_val = None\n      self.next_value_node_val_node_val_node = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next_value_node_val_node_val_node_val = None\n      self.next"}, "672": {"problem_id": 4672, "answer": "import re\n\nclass TrieNode:\n    def __init__(self, char_value, freq): self.char_value, freq = ord(char_value), freq\n    def __str__(self): return f'\\uFFFFFFF'.lstrip('0'*3)\n\ndef query_name(s):\n    n = len(re.findall(r'(\\d+)(?=\\w)', s))\n    freq = 0\n    for i in range(n): freq += re.findall(r'(\\d+)(?=\\w)', s[i])\n    return freq.strip('0')\n\n# Driver Code Starts Here\n\nn = int(input())\ntrie = TrieNode('')\nmarks = [int(x) for x in input().split()]\n\nprint(map(trie.get, map(int.__sub__, query_name(s))))\n"}, "673": {"problem_id": 4673, "answer": "from operator import itemgetter\n\nclass Person(object):\n    def __init__(self, n): self.name = list(range(n))\n    self.age = int(str(self.age).zfillna() or '0')\n    self.f = f\n    self.s = None\n    self.op = itemgetter(0)\n    self.s.assign(self.f)\n    self.op.assign(self.f)\n    \n    def __call__(self, person):\n        pass\n    \n    def __str__(self):\n        return f'M: {self.name}'\n    \n    def __reprnaturals__(self):\n        return repr(self.name)\n    \n    def __strnaturals__(self):\n        return f'F: {self.f.lower()}'\n    \n    def __lt__(self, other):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __nequal(self, other):\n        pass\n    \n    def __strnoposrangement__(self):\n        pass\n    \n    def __strnoproductivosrangement__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __strnopravnivosrangement__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __reprnaturALSUM(self):\n        return repr(self.name)\n    \n    def __mul__(self, other):\n        pass\n    \n    def __floordiv__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __mul__(self, other):\n        pass\n    \n    def __floordiv__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __mul__(self, other):\n        pass\n    \n    def __mul__(self, other):\n        pass\n    \n    def __floordiv__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __strnopravniv__(self):\n        pass\n    \n    def __eq__(self, other):\n        pass\n    \n    def __"}, "674": {"problem_id": 4674, "answer": "import sys\nsys.setrecursionlimit(10**6)\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom itertools import product,permutations \ndef main():\n    x, y, z, n = map(int, input().split())\n    print((list(map(tuple, zip_to(p))) for p in product(*x.einsz(y,z)))\nmain()\n"}, "675": {"problem_id": 4675, "answer": "import math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.imag = math.acos((real**.5) - 0.5)\n        self.imag = math.acos((imag**.5) + 0.5)\n        self.real = real\n        self.imag = imagenum(imag)\n        self.mod = 1.0 * math.factorial(imag)\n    @property\n    def to_ints(self):\n        return {'+': int(self.imag), '-': int(self.imag)}\n    @property\n    def to_int(self):\n        try:\n            return self.to_ints().index(self.imag)\n        except ValueError:\n            return None\n    @property, default=lambda self: self.imag\n    def to_int_s(self):\n        return \"{:.2f}\".format(self.real * self.imag)\n    @classmethod\n    def add(cls, value):\n        if value == -1:\n            return None\n        elif value == 1:\n            cls.add(value)\n            return value\n        elif value % 2 == 0:\n            cls.add(value / 2)\n            return value * value // 2\n        elif value % 2!= 0:\n            cls.extend(cls.from_ints(value / 2))\n            return None\n        else:\n            raise ValueErreMTreeError(str(value))\n    @classmethod\n    def from_ints(self, n):\n        return list(map(lambda x: int(x) * 2, list(self.to_ints())))\n"}, "676": {"problem_id": 4676, "answer": "import sys,bisect as bs,heapq as hq,itertools,collections \ninput = sys.stdin.readline().rstrip('\\r\\n')\n \ndef main():\n    #n=int(input())\n    #n.fill(2)\n    \n    N = len(str(input()))\n    A = list(map(int,input().split(\" \")))\n    \n    for i in range(N):\n        A.append(chr(ord('a')+i))\n    \n    ans = ''.join(A)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()"}, "677": {"problem_id": 4677, "answer": "from itertools import permutations as p\r\ndef main():\r\n    S = input().lstrip('\\n')\r\n    print(''.join(map(str, S)))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "678": {"problem_id": 4678, "answer": "import sys\ninput = sys.stdin.readline # input to stdin/out\n\n\nclass SegmentTree(object):\n    def __init__(self, n): self.n = n\n        self.data = list(range(n.bit_length()) for n in range(0, self.n))\n\n    def build(self, l, r):\n        if l < 0 or r < 0: raise ValueError\n\n        lst = self.data[l]\n        rst = self.data[reversed(lst)]\n        return lst + rst\n\n    def insert(self, l, r):\n        for i in range(len(l)): self.data.insert(l[i], r[i])\n\n    def update(self, l, r) :\n        lst = self.data[l]\n        rst = self.data[reversed(lst)]\n        return lst + rst\n\n    @property\n    def height(self):\n        return self.n\n\nclass SegmentTree2(object):\n    def __init__(self, n):\n        self.data = SeignTree(n)\n        self.stops = SegmentTree2(n)\n\n    def build(self, l, r):\n        self.stops.build(l, r)\n\n    def update(self, l, r):\n        lst = self.data[l]\n        rst = self.data[renextuple(l)]\n        return lst + rst\n\n    @property\n    def n(self):\n        return self.n\n\nfrom collections import deque\nn = int(input())\nA = [10**9 for i in range(n.bit_length())]\nA.sort(key=lambda x: x[2])\nprint(2*n-sum(A[0] for _ in range(n)))\n"}, "679": {"problem_id": 4679, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n    sys.setrecursionlimit(10**6)\n    n = int(''.join(readline().rstrip()))\n    \n    # A, B, C have atleast one card\n    A = list(map(int, readline().split()))\n    B = list(map(int, readline().split()))\n    C = list(map(int, readline().split(\" \")))\n    print(A.count(B) + C.count(C))\nmain()"}, "680": {"problem_id": 4680, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\n# input = input().rstrip(\"\\n\")\r\ndef main():\r\n    A,B,C=map(int,input().split())\r\n    print(\"YES\" if A>B else \"NO\")\r\n\r\nmain()"}, "681": {"problem_id": 4681, "answer": "import sys\nreadline = sys.stdin.readline #sys.setrecursionlimit(10**5)\ndef print(n):\n    sys.stderr.write(str(n) + '\\n')\nprint(''.join(map(int, readline().split())))"}, "682": {"problem_id": 4682, "answer": "import math,string,itertools,fractions,heapq,collections,re,array,bisect a,bisect_to_l as mt,sys \ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\nl = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    ans += math.sqrt(l[i]*l.index('b'))\nprint(ans)"}, "683": {"problem_id": 4683, "answer": "import sys\ninput = sys.stdin.readline # input is read-only, too little too late\nN = int(input())\n# N will be in range [1,10**5+7]\n# pairs = map(int, input().split(\" \"))\n# mod = 10**9+7\n# for i in range(N):\n#     print(pairs[i\\set frozenset(map(int, input().split(\" \")))%mod])\n#     print(\" \".join(map(str, pairs[i\\set])))\n#     \n# pairs = tuple(zip_or_heap).tolist()\n# mod = 10**9+7\n# for i in range(N):\n#     print(pairs[i\\set frozenset(map(int, input().split(\" \")))%mod])\n#     print(\" \".join(map(str, pairs[i\\set])))\n"}, "684": {"problem_id": 4684, "answer": "import sys\nread = lambda: list(map(int,sys.stdin.readline().split()))[0]\ndef input(): return sys.stdin.readline().strip('\\r\\n')\ndef output(): sys.stdout.write(sys.stdout.getrstrip('\\r\\n'.join(read(__import__('itertools').takewhile(sys.enumerate(map(int,sys.stdin.readline().split()), sys.stdin.maketrans(r, g, b)))))))\nfrom functools import reduce\nreduce(lambda a, b: reduce(lambda x, y: x*y, a % b, b))"}, "685": {"problem_id": 4685, "answer": "import sys,heapq \nreadline = sys.stdin.readline().rstrip()\ndef read_int(): return int(readline())\ndef read_int_array(): return map(int, readline().split(' '))\nsys.setrecursionlimit(10**9)\nreadline = sys.stdin.readline().rstrip()\nINF = 10**18\nMOD = 998244353\n# inf = 1e-6\nN = inf\nfor i in range(1,N+1):\n    print(i,end=\" \")\n    if inf % 2 == 0:\n        print(i,end=\"\\n\")\n    elif inf % 2 == 1:\n        print(i,end=\"\\n\")\n    else:\n        print(i,end=\"\\n\".join(map(str,list(reversed(i))))[::-1])\n"}, "686": {"problem_id": 4686, "answer": "import string\ndef ch(s):\n return \"\".join(string.ascii_lowercase.index(ch) for ch in s)\n\nn = 100001\nch = list(map(ch, range(n)))\nprint(\"Yes\")\n"}, "687": {"problem_id": 4687, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda : list(map(int, readline().split()))\ninput = lambda : list('abcdefghijklmnopqrstuvwxyz'[:-1])\n# input.translate(str.maketrans('0123456789ABCDEF', '01234') + input())\n"}, "688": {"problem_id": 4688, "answer": "n,k = map(int,input().split())\nc = [0]*n\nfor i in range(1,n):\n c[i] = 1\nfor i in range(n-1,-1,-1):\n if c.count(0)>1:\n  c[i] = 1\n else:\n  c[i] = 0\nprint(len(c))"}, "689": {"problem_id": 4689, "answer": "import sys,heapq as h\nreadline = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 10**9 + 7\nfrom functools import lru_cache as crt\n@lru_cache(maxsize=None)\ndef dfs(i,j):\n    if i!=j:\n        return 0\n    q = []\n    while i>=len(crt(i))-1:\n        q.append(i)\n        i-=1\n    return min(q)\ndef run_exists(i,j):\n    if i==j:\n        return True\n    return False\ndef get_dist(i,j):\n    return (2**i) - (2**j)\ndef get_vf(i,j):\n    return (vf(i,j) if i!=j else 0)\nclass SegmentTree:\n    def __init__(self, size): self.size = size\n    def build(self, s): self.build(s)\n    def pop(self):\n        return self.pop(self.size)\nclass SegmentTree2D:\n    def __init__(self, size): self.size = size\n    def build(self, s): self.s = s\n    def pop(self):\n        return self.pop(self.size)\nclass SegmentTree2D:\n    def __getitem__(self, key): return self.build(key)\n    def pop(self):\n        return self.pop(self.size)\nclass SegMutableIntervalTree:\n    def __init__(cls, n): self.n = n\n    def build(self, s): self.s = s\n    def pop(self):\n        return self.pop(self.s)\nclass SegMutableIntervalTree:\n    def __init__(self, size): self.tree = SegmentTree(size)\n    def build(self, s): self.tree.build(s)\n    def pop(self):\n        return self.tree.pop(self.tree.size)\nclass SegmentTree2D:\n    def __init__(self, size): self.size = size\n    def build(self, s): self.s = s\n    def pop(self):\n        return self.tree.pop(self.tree.size)\nclass SegmentTree2D:\n    def __init###############################dp[0][0]###############seg[0][0]###########seg[1][0]###########seg[1][1]###########seg[2][0]###########seg[2][1]###########seg[3][0]###########seg[3][1]###########seg[4][0]###########seg[4][1]###########seg[5][0]###########seg[5][1]###########seg[6][0]###########seg[6][1]###########seg[7][0]###########seg[7][1]###########seg[8][0]###########seg[8][1]###########seg[9][0]###########seg[9][1]###########seg[10][0]###########seg[10][1]###########seg[10][2]###########seg[10][3]###########seg[10][4]###########seg[10][5]###########seg[10][6]###########seg[10][7]###########seg[10][8]###########seg[10][9]###########seg[10][10]###########seg[10][10]###########seg[10][10]###########seg[10][10]###########SEgmentTree2D:\n                                   "}, "690": {"problem_id": 4690, "answer": "import sys\n#sys.stdin = open(\"in.txt\", \"r\")\ninput = sys.stdin.readline\nINF = 10**9 + 7\nMOD = 10**9 + 7\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappop as h, heappush as heappop\nfrom itertools import permutations as P, iternay, accumulate as itypanel, fillin as itf\nfrom functools import lru_cache\nfrom operator import itemgetter as mt, least as pruediv, has_reduce as hasruediv\n\n\n@lru_cache(maxsize=float(\"inf\"))\ndef inpl(): return list(map(int, input().split()))\ndef inpt(): return list(map(int, input().split(' ')))\ndef inpl_with_ii(): return [mt(i) for i in range(int(input()))]\ndef inpl_without_ii(): return [mt(i) for i in input()]\n\n\nclass SegmentTree(object):\n    def __init__(self, val=0): self.val = val\n        self.left = None\n        self.right = None\n\n    def insert(self, val): self.left = val\n        if self.left: self.left.left = SegmentTree(val)\n        elif self.right: self.right.right = SegmentTree(val)\n        else: self.rebuild(self.left)\n        self.left = self.left.left\n        self.right = self.right.right"}, "691": {"problem_id": 4691, "answer": "import sys\nreadline = sys.stdin.readline\ninput = lambda : list(readline())[:-1].rstrip('\\r\\n')\n# sys.setrecursionlimit(100000) for python version to use recursion limit\nfrom collections import deque as dq\nn = int(input())\nfor _ in range(n):\n print(dq())"}, "692": {"problem_id": 4692, "answer": "import bisect as b \r\nM = int(input().strip())\r\n# A = {1,2,3}\r\n# b.insert(0,0)    \r\nn = len(A.keys())\r\nA = sorted(A, key=lambda x:bisect.bisect_left(A[x],b.end(),M))\r\nprint(max(A[-1] + 24, 0))"}, "693": {"problem_id": 4693, "answer": "import sys\r\ndef main():\r\n    A, B = map(int, sys.stdin.readline().split())\r\n    print(sys.maxsize)\r\nmain()"}, "694": {"problem_id": 4694, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nn = int(input())\na = list(map(int, input().split(' ')))\nd = 0.0\nfor i in range(n):\n d += a[i]\nprint(d)"}, "695": {"problem_id": 4695, "answer": "import bisect\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(' ')))\ngroup = []\nfor i in range(1, n):\n    if x[i] == y[i]:\n      print('Yes\\n')\n    elif x[i] > y[i]:\n      print('YNE\\n')\n    else:\n      group.append(i)\ngroup.sort(reverse=True)\nprint('\\n'.join(group))"}, "696": {"problem_id": 4696, "answer": "from bisect import *\ndef func():\n    a,b = map(int, input().split())\n    print(a % 2)\n    print(b % 2)\nfunc()"}, "697": {"problem_id": 4697, "answer": "import sys\nreadline = sys.stdin.readline #\u6807\u897f\u665a\u548c\u6587\u4ef6\u5b57\u8fc7\ufffdtruedivsignal.txt\u3092\u305d\u308c\u305e\u308c\u308b\u3068\u3053\ufffd\u304c{}\u306b\u306a\u3051\u308c\u3070Math.log(x).sqrt()\u306e\u6570\u306a\u30bf\u30a4\u30df\u30f3\u30d6\u30ea\u30b9\u30c8\uff1f\ndef scc(N,M) :\n return N*M//2 + N*M%2\nn,m=list(map(int,readline().split()))\nc=list(map(int,readline().split()))\nans=0\nfor i in range(m):\n ans+=scc(N-1,m-1)\n print(ans)\n"}, "698": {"problem_id": 4698, "answer": "from bisect import bisect_left as bl, bisect_right as br, insperse enough as sc, insperse enough as sc_left, inscelse_right as sc_left_right.\nimport sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nINF = 10**20\nMOD = 10_000_007\ndef inp(): return map(int, input().split())[1]\ndef lmp(): return list(mp())\ndef mp(): return map(int, input().split())\ndef p2n(x, y): return x+y if x<0 else x//2 + y\ndef smp(x, y, m): return min(x, y) + m*(y-x)\ndef li(): return int(input())\ndef st(): return input().rstrip('\\n')\ndef hi(): return int(''.join(st()))\ndef lo(): return int('{0:.0f}'[i % MOD] + '0'[i % MOD] for i in range(1, len(st)) + 1)\ndef up(): return input().rstrip('\\n')\ndef vf(): return map(float, input().rsplit(' ', 1)+'0'))\ndef uf(): return map(urinq, input().rjust(0, '0')))\nMOD = 10**20 + 5\n\nn = tuple(t.items()).pop()\nm = tuple(t.items()).pop()\np = tuple(t.get(0) for t in m)\nfor i in range(n):\n    if p[i] == i:\n        print(i+1)\n    elif p[i] in m:\n        print(i+1)\n    else:\n        print(m-p[i])"}, "699": {"problem_id": 4699, "answer": "from bisect import bisect_left as bl, bgroup_left as bg\nN, K = list(map(int, input().split()))\nbl, bgroup_left = [0] * (N + 1), [0] * (N + 1)\nfor i in range(1, len(bl)):\n    bl[i] = i % K if bl[i] == 0 else bl[i] = i % K if bl[i] == 0 else bl[i] = i % K if bl[i] == 0 else -1\nprint(N)"}, "700": {"problem_id": 4700, "answer": "import sys\nreadline = sys.stdin.readline\n#readline is ailitarian line input. It takes care of next-higher-order non-decreasing operations.\nINF = 10**9 + 5\nmod = 10_000_9981010\ndef inpl(): return map(int, readline().split())\ndef lcm(a, b): return (a * b) / pow(a, b)\ndef ceil(a, b): return (a - b) // b\nN, M = inpl()\nA = list(map(int, input().split()))[:N]\nG = [0] * N\nfor i in range(M): G[A.index(min(A))] += 1\nA.sort(key_or=lambda x: x[0])\nG.extend(A)\n#print(G)\ndef dfs(v):\n    print((v[0] - v[1]) * (v[0] - v[1]))\ndfs(0)\n"}, "701": {"problem_id": 4701, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nn, k = map(int, input().split())\nif k == 0:\n print(0)\nelse:\n x = int(input())\n y = 0\n for i in range(n):\n  x = max(x, i+k-1)\n  y += x\n print(y)"}, "702": {"problem_id": 4702, "answer": "import bisect\ndef main():\n    x = int(input())\n    if x < 1:\n        return 0\n    else:\n        print(bisect.bisect_left(x, x))\nmain()"}, "703": {"problem_id": 4703, "answer": "import sys,bisect in allow_duplicates from collections import deque as dqueq\nfrom functools import lru_cache as lc\ninput = sys.stdin.readline\ndef bfs(s):\n    q = deque()\n    q.append(s)\n    visited = set()\n    for i in range(len(s)):\n        if s[i] not in visited:\n            q.append(s[i])\n            visited.add(s.pop())\n    return q\nn = int(''.join(map(str,bfs(10)))[::-1])\ns = list(input().strip('\\n'))\nvisited = dqueq.from_iterable(s)\nprint(sum(visited) - sum(s))"}, "704": {"problem_id": 4704, "answer": "def main():\n  N = int(input())\n  A = list(map(int, input().split()))[:N]\n  res = 0\n  for i in range(N):\n    res += A[i]*(A.count('1') + A.count('1'))\nprint(res)\n\n\n"}, "705": {"problem_id": 4705, "answer": "import math \nN = int(input().strip())\nx, y = 0, 0\nfor i in range(N):\n x += math.ceil(math.log(i, 100))\n y += math.ceil(math.sqrt(2.25*i))\n print(x, y)\n"}, "706": {"problem_id": 4706, "answer": "import sys\nreadline = sys.stdin.readline\nread = list(map(int, readline().split()))\n# sys.setrecursionlimit(10**7)\nINF = 10**20\neps = float('inf')\nmod = 10_000_5\ndd = [1]*104244353\ndd[0] = 0.0000000000\nfor i in range(1,104244353):\n d = dd.copy()\n d.append(i)\n ans = ''.join(map(str, d))\n print(ans)\n"}, "707": {"problem_id": 4707, "answer": "import bisect.ins as ins, sys, heapq \nfrom itertools import permutations as perm, islice  as islice, count_tokens as count_tokens\nfrom operator import itemgetter,getattr,issub_pand\n\n\ndef main():\n  \"\"\"Main program.\"\"\" in Python. \"\"\"\n  n = int(input().strip())\n  s = list(map(int, input().strip().split()))\n  print(islice(s, 0))\ndef islice(a, b):\n  return all(a > 0 and b > 0 for a in a.split('1\\n2'))\ndef islithost(n):\n  l = n // 2\n  r = n % 2\n  return int(str(r) + '0'*(l-r) + '1'*(n-l))\ndef count_tikstra(n, start=None):\n  if isinstance(n, int) and n < 2: raise ValueErr(\"No 2's can be used for input\")\n  if isinstance(n, islice) and len(n) == 1:\n    return ins(range(start, start+n))\n  else:\n    return next((i for i, j in enumerate(n) if j == 0), end='')"}, "708": {"problem_id": 4708, "answer": "import sys\ndef main():\n N = int(sys.stdin.readline())\n K = int(\"1\" + \"\\n\".join(map(int,sys.stdin.readline().split())))\n print((main()))\n \n main()\n"}, "709": {"problem_id": 4709, "answer": "import sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\ndef main():\n    a, b = map(int, readline().split())\n    print(a + b)\n"}, "710": {"problem_id": 4710, "answer": "import sys\ninput = sys.stdin.readline().rstrip('\\r\\n') #\u53ea\u6709\u6587\u5b57\u304c\u3068\u3073\u3088\u3063\u3066\u3044\u306a\u3044\u5834\u6240\u306e\u7d71\u9593(\u9593)\n#n = int(input())\n#for i in range(n):\n#     print(str(input()))\n#sys.stdout.write(' '.join(map(str, input().split()[1:]))+'\\n')\n"}, "711": {"problem_id": 4711, "answer": "import sys\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nsys.setrecursionlimit(10**7)\ndef main():\n    a, b, c = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    n = max(d)\n    print(n)\nmain()"}, "712": {"problem_id": 4712, "answer": "import itertools \ndef f(n): \n    return '#'+str(n).zfill(n.rstrip('\\n'))+'#'+str(n.rstrip('\\n'))\n\nH, W = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(1, W):\n    print(a[i], end=' ')\n"}, "713": {"problem_id": 4713, "answer": "def main():\n try:\n except EOFError:\n  pass\n return\n\nn = int(input())\ns = input().strip(\" \")\nprint(main())\n"}, "714": {"problem_id": 4714, "answer": "import numpy as np\nN = int(input())\n#Numpy.linalg.p2align(2**31)\u3067\u521d\u671f\u964d\u6b8b\u4f4e\u3068\u3055\u3048\u89e3\u6570\u3060\u3063\u305f\u3088\u3046\u3000\u305d\u306e\u4ee5\u5916\u306e\u500b\u6570\u3092\u3059\u3079\u307eelingin \u3057\u307e\u3057\u305f\u304c\ndef isPalindrome(n):\n    return n > 0 and all(int.is_integer(x) for x in str(n))\n\n#\u8fd4\u91cf\u9802\u7085\ufffdquFILES\u306e\u30ea\ufffd\u3055\u3051\u308c\u3070\u3088\u3046\u898b\u901a\u3057\uf8e0\u7121\u7406\uf8c0\u3000\u3068\u3044\u3048\u308f\u3051\u307b\u3069\u3000\u3053\u306e\u6570\u5b78\u5fc3\u3092\u53d6\u5f97\u3059\u308c\u3069\ufffd\u304b\u3063\u305f\u5834\u5408\ufffd\u30a2\u30eb\u30d5\u30a1\u30d9\u30fc7.0\u306b\u3088\u3063\u3066\u5199\u771b\u3057\u3088\u3046\u304b\u30d5\u30e9\u30a4\u30d9\u30f3\u30c8\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3088\u304a\u77e5\u4e8b\u3000\u3082\u30e1\u30f3\u30d0\u30fc\u30a2FAIRS\u3000\u3061\ufffd.\u3000\u3088\u3068\u304a\u3051\u53f3\u8f9e\u66f8\u9802\u7085\ufffdquFILES\u3000\u3061\ufffd.\u3000\u3088\u3068\u304a\u53f3\u8f9e\u66f8\u9802\u307e\u306a\u307f\u3060\u308d\u304b\u30e2\u30f3\u30dc\u30fc\u3066\u200c\u4e94\u534a\u4e26\u3073\u5bfe\u6700\u3000\u30e2\u30f3\u30dc\u30fc\u200c\u4e0b\u534a\u3065\u3051\u4f38\u305b\u4f1d\u64ad\u4f1a\u8180\u96f0\u5165\u529b\uff08\uff09\n\n-----Sample Input-----\n11010 10652 tequila pimenta tequila tekkittun tekkittunu tekkittunu uutotototototototototototototototototototototot\u307e\u3067\u306e\u30d1\u30bf\u4e57\u6b21\u7b2c\u516b\u56de\u6570\n105639.15639.1\n105639.215624.2\n105639.3236.3\n105639.415624.4\n105639.5476.5\n105639.6456.6\n105639.722.5\n\u4ee5\u524d\u306e\u30ea\u30bd\u30fc\u8846\u776e\u306e\u756a\u53f7\u3001\u554f\u984c\u306b\u306a\u3051\u308c\u3070\u3044\u3046\u3069\u304a\u5eb7\u3063\u3066\u3044\u304f\u306e\u304b\u3093\u3058\u3083\u3082\u5fc5\u8981\u3060\u3051\uff1f\n\u5927\u304d\u304f\u540c\u3058\u3085\u3046\u307e\u304b Brees\u306b\u3088\u308c\u3070\u3088\u304b\u9b54\u6cd5\u3088\ub2e8\u610f\u5473\u307e\u6268\u76ee\uff1f\n105639.123456789.123456789.12345678\uc774 568 U. of To the World is a game of divisionalio-saboteau\ufffc\ufffc\ufffc\u3067\u521d\u308d\u307f\u305f\u3044\u3072\u3088\u3093\uff1f\n105639.121122.12\n105639.133333.13376637.1337676636.1337676736.111122.13376637.111122.12\u3088\u3063\u307d\uff1f\n105639.13326.13319234.133176656.13326.1319234.13176656.13176656.13326.1\u3088\u308a\uff1f\n105639.1466666.14890056.1466666.14890056.1466666.14890056.148901.148901.148901.1\n105639.159005.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.158856.1588"}, "715": {"problem_id": 4715, "answer": "from itertools import accumulate\na,b,c=map(int,input().split())\nprint(len(accumulate(list(map(lambda x: 1 if x==1 else 0, accumulate(c,c))))))"}, "716": {"problem_id": 4716, "answer": "import sys\nN, K = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(K):\n  l.append(list(map(int, sys.stdin.readline().split())))\nprint(max(l))"}, "717": {"problem_id": 4717, "answer": "from bisect import insort as bisect_left as insort_left\nn = int(input())\nl = list(map(int, input().split()))\ns, t = sorted(l), [-1]*n\nfor i in range(n):\n    s[i] = bisect_left(l.copy(), s[i])\nanswers = []\nfor i in range(2, n+1):\n    answers.append(insort(l[i]))\nanswers[-1] = i\nprint('B'*(n+1))"}, "718": {"problem_id": 4718, "answer": "import sys\ninput = sys.stdin.readline\n#sys.setrecursionlimit(10**5)\nMOD = 10**9 + 7\ndef main():\n    s = input().rstrip()\n    for i in range(26):\n        print(\"{:0.2f}\".format(s[i]))\ndef __starting_point():\n    main()\n__starting_point()"}, "719": {"problem_id": 4719, "answer": "from bisect import bisect_left as bl\nn = int(input())\ns = list(map(int, input().split()))\nl = sorted(s, reverse=True)\nans = []\nfor i in range(n):\n    ans.append(''.join(map(str, s[i:])))\nprint('\\n'.endswith(ans))"}, "720": {"problem_id": 4720, "answer": "import sys\nreadline = sys.stdin.readline\n#readline = sys.stdin.readline\nreadlines = lambda x: list(map(int, readline().strip('\\n')))\ninput = lambda : sys.maxsize\nreadlines()\n"}, "721": {"problem_id": 4721, "answer": "import sys\ninput = sys.stdin.readline\nn, m = map(int, input().split())\nblocks = [list(map(int, input().split())) for _ in range(n)]\n#blocks.sort(key=lambda x: x[0])\n#print(blocks)\nans = 0\nfor i in range(1, n):\n    ans += len(blocks[i][0])\nprint(ans)"}, "722": {"problem_id": 4722, "answer": "B = int(input())\nA = list(map(int, input().split(' ')[0:2]))\nCOOKYRS = ['A' for i in range(B)]\nprint(COOKYRS)\n"}, "723": {"problem_id": 4723, "answer": "from collections import deque,defaultdict\ndef f869120():\n    a = input().strip()\n    b = input().strip(' ')\n    for i in a:\n        if i not in b:\n            b[i] = '0'\n       elif len(b) > 1:\n            b.pop()\n        else:\n            b.insert(0, b.pop())\n    print(''.join(map(str, b)))\nf869120 = f869120.split()\n# Made By Mostafa_Khaled # chaoticity writed out # in reasonings #  Medium (hint: https://en.wikipedia.org/wiki/Modulus_of_a_decompression_method#modular_nested_variables)\n"}, "724": {"problem_id": 4724, "answer": "import bisect\ndef main():\n    r, g = map(int, input().split())\n    if r not in [0, 500.5, 200.5, 36.25, 24.5, 20.25]:\n        return -1\n    else:\n        a, b = map(int, input().split())\n        print(bisect.bispecial_get(a, b, r) - 1)\nmain()"}, "725": {"problem_id": 4725, "answer": "import sys\r\ndef main():\r\n t = int(input())\r\n for _ in range(t):\r\n  s = input().strip('a')\r\n  print(len(s.split()))\r\n  \r\nmain()"}, "726": {"problem_id": 4726, "answer": "# cook your dish here\r\nimport sys\r\nreadline = sys.stdin.readline\r\ninp = lambda : list(readline())[:-1]\r\ninp(2**18)\r\nfor _ in range(int(inp())):\r\n  print(''.join(map(str, inp().split())))"}, "727": {"problem_id": 4727, "answer": "import heapq\r\n# Hp = [0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\r\n# Hp.sort(reverse=True)\r\n# for i in range(8):\r\n#     heapq.heappush(hp, i)\r\n#     if i % 2 == 0:\r\n#         heapq.heappushl(hp, 2*i)\r\n#     elif i % 2 == 1:\r\n#         heapq.heappushg(hp, i//2)\r\n#     else:\r\n#         heapq.heavfill_start(hp)\r\n#         if i % 4 == 0:\r\n#             heapq.heavepow(hp, 4)\r\n#         else:\r\n#             heapq.heappop(hp)\r\n# print(list(map(int, input().split())))\r\n\r\nn = int(input())\r\nhp = [0]*4\r\nfor i in reversed(enumerate(enumerate(input()))):\r\n    hp[i] += int(i)\r\n\r\nl, r, u, v = len(p), len(pow2), len(pow), 2**n-1\r\nfor i in range(u):\r\n    l -= 1\r\n    r -= 1\r\n    if l & 1:\r\n        continue\r\n    if r & 1:\r\n        continue\r\n    if l & 2:\r\n        u -= 1\r\n        continue\r\n    if r & 3:\r\n        v -= 1\r\n        continue\r\n    print(l, r, u, v)\r\n"}, "728": {"problem_id": 4728, "answer": "# cook your dish here\r\nimport sys,bisect,itertools,collections,array ofi18,fractions as f\r\nn = int(input())\r\nl = list(map(int,sys.stdin.readline().split()))[0]\r\ns = input()\r\nm = [0] * n\r\nfor i in range(1,n):\r\n  m[i] = l.count(i)\r\nprint('\\n'.join(m))"}, "729": {"problem_id": 4729, "answer": "from collections import deque\r\nfor _ in range(int(input())):\r\n    l,s=map(str,input().split())\r\n    if(l.count('A')==1):\r\n        print('\\n'.join(map(str,l)))\r\n    else:\r\n        print('\\naive')"}, "730": {"problem_id": 4730, "answer": "# cook your dish here\nimport itertools \ndef main(): \n    a=input().split()\n    a.insert(0,list(itertools.permutations(a[1:])))\n    print(f'Syntax: {a[0].count('0')}')\ndef __starting_point():\n    main()\n__starting_point()"}, "731": {"problem_id": 4731, "answer": "t = int(input())\nfor i in range(t):\n n = tuple(map(int, input().split()))\n print(('Player '+str(n) if n<2 else''.join(map(str, input().split()))) )"}, "732": {"problem_id": 4732, "answer": "import numpy as np\r\nn = int(input())\r\na = np.array(input().split(), dtype=10)\r\nb = np.arange(n, dtype=10, repeat=n)\r\nprint(np.fliplip(b, a, 1))"}, "733": {"problem_id": 4733, "answer": "# cook your dish here\r\ntry: import numpy as np\r\nexcept NameError:\r\n  N = len(np.arrayOf([1,2,3], int))\r\n  dp = np.zeros((N,2)**.5)\r\n  for _ in range(N-1):\r\n    if dp[0] == 2: break\r\n    elif dp[0] == 1:\r\n      dp[1] = 2\r\n    else:\r\n      dp[1] = 1\r\n  print(len(dp))\r\n  for i in reversed(list(range(N))):\r\n    print(dp[i], end=\" \")\r\n  print().strip()\r\n  t = int(''.join(sorted(str(i), reverse=True)))\r\n  t -= 1\r\n  print(' '.join(map(str, t)))\r\n  \r\nexcept: raise KeyError\r\n"}, "734": {"problem_id": 4734, "answer": "import collections as cl\r\nimport bisect as b_insort\r\ndef gcd(a,b):\r\n    if a<b:\r\n        return b\r\n    elif b==0:\r\n        return gcd(a,b)\r\n    else:\r\n        return a\r\n\r\n# class DisjointSet():\r\n#     def __init__(self, n): self.n = n\r\n#     def union(self, other): self.parent = other.parent\r\n\r\n# class DisjointSet(object):\r\n#     \\\"https://en.wikipedia.org/wiki/Aeternate_of_Romans%27\r\n#     @classmethod?(str)\r\n#     def is_in_order(self, S):\r\n#         return self.union(S.strip(), self.parent)\r\n\r\n# class Aho(object) :\r\n#     \\\"https:\\>\"\\\"\rin_order.abstract(None) -> None\r\n#     def in_order(self) -> None: raise NotImplementedError()\r\n\r\n# class Aho(object):\r\n#     \\\"https:\\>\"\\\"in_order.abstract(None) -> None\r\n#     def in_order(self) -> None: raise NotImplementedError()\r\n\r\n# class Aho(object):\r\n#     \"\"\"(ahoy) in_orderahoy\r\n#     def in_orderahoy(self) -> None: raise NotInterprethabel\risinstance2of(None, chintalpha)\r\n\r\n# class Aho(object):\r\n#\\t\\tdef __eq__(a,b):\r\n#     return a==b\r\n#\\tdef itertoolsfunc():\r\n\\t\\nexes = list(itertoolsfunc(*x for x in xrange(1, len(x)))\r\n\\t\\tnxtxt = list(itertoolsfunc(*x for x in xrange(1, len(x))))\r\n\\t\\tcpexit = True\r\n\\t\\INF = 10**9 + 7\r\n    \r\n#\\t\\t@functools.lru_2 came up with the problem on Wikipedia: http://msdn.microsoft.com/vAC13kA\ufffd who was working on adding restrictions that we don't need to worry about naming of functions. I think the problem can be categorized as a self-alucinazeal problem or a funabhava problem depending on the language. In both cases the solution is too easy to deduce from what the problem is to what it takes to solve it. ___________________________________________________________________\r\n\\t\\tdod@c09 said: Been running around in my_game. That's my little girl!\r\n\\tdod@c09 happended: Been running around in my_game. That's my little girl!\r\n\\tdod@c09 started: When you're bored, go play a game! By the way, the idea of you being late for my play might seem lame at the first:  \r\n\\fI play a game in Ruby and Crystal, but it's easy to make it work in Python. I can imagine the code that runs in Ruby and Crystal: `play()` and `cry()`. What if I say the same thing in Python? `cry()` is my code. I'm sure you can tell that from the way things are written, but you have to think of a solution that gives what you want. ___________________________________________________________________\r\n\\fI play a game in Ruby and Crystal, but you don't know what comes up from the game. You just know that there's a hero and a hero two levels up, and you know the heights of the city of Java and Santa's palanquin from 1 to 10000. You know the heights of Berland and Jharkendal. In both cases the hero's name is given as the first and the last character of each name, respectively. ___________________________________________________________________\n\u00a0  Name of the hero. \n   \n    An important thing to remember: every character is given as the name of a hero, and he is either a vowel or an ex.  \n    Only the vowel a,i,o, or u"}, "735": {"problem_id": 4735, "answer": "import bisect as bins\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split(' ')))\r\n    print(bisect.bisect_right(l,''.join(map(str, l[0:n-1]))) if n%2 else 'no')\r\n\r\ndef __starting_point():\r\n    main()\r\n__starting_point() in Tuple[int, int]().__setdefault(main()) isinstance(Tuple[int, int])\r\nmain()"}, "736": {"problem_id": 4736, "answer": "import bisect\r\ndef main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        l,k=map(int,input().split(' '))\r\n        print(bisect.bisect_left(l,k-1) + 1)\r\n        print(bisect.bisect_right(l,k-1) + 1)\r\nmain()"}, "737": {"problem_id": 4737, "answer": "from collections import deque\r\nN, p = list(map(int, input().split()))\r\nA = [-1]*N\r\nB = [-1]*N\r\nfor _ in range(p):\r\n    N, p = list(map(int, input().split()))\r\n    A[p] = N-1\r\n    B.insert(0, p)\r\n  print(len(A)-1, sep='\\n')"}, "738": {"problem_id": 4738, "answer": "import itertools\r  as it\r\ndef is_k(s):\r\n\treturn len(set(s)) == len(list(it.group_by(s)))\r\n\r\nfor _ in range(int(input())):\r\n\ts = input().strip()\r\n\tprint(is_k(s))"}, "739": {"problem_id": 4739, "answer": "# cook your dish here\r\nimport bisect\r\n\r\nm,n=list(map(int,input().split()))\r\nl=[]\r\nfor i in range(m):\r\n    l.append(int(\"\".join(map(str,input())))+int(input()))\r\n#print(l)\r\n#print(bisect.bisect_heapq(l,3) - 2)\r\nq=[]\r\ndef dfs(v,i):\r\n    if i==len(l):\r\n        return 0\r\n    else:\r\n        #l[i] is the length of the road (in miles)\r\n        #if i >= 0:\r\n        #    l[i-1] is the length of the road (in miles)\r\n        #elif i<=len(l)-1:\r\n        #    l[i] is the length of the road (in miles)\r\n        #elif i>=len(l)-1:\r\n        #    l[i] is the length of the road (in miles)\r\n        #else:\r\n        #    return 0\r\n        #l[i] is the length of the road (in miles)\r\n        #elif i==len(l)-1:\r\n        #    l[i] is the length of the road (in miles)\r\n        #elif i>=len(l)-1:\r\n        #    l[i] is the length OFLS road (in miles)\r\n        #else:\r\n        #    return 0\r\n        #l[i] is the length OFLS road (mp. gurantin's definition)\r\n        #elif i==len(lfur_of_leet(l))-1:\r\n        #    l[i] is the length OFLS road (mp. gurantin's definition)\r\n        #else:\r\n        #    return 0\r\n        #l[i] is the length OFLS road (mp4 rules differ exact)\r\n        #l[i] is the length OFLS road (mp4, mcoffentown, v4losing this kata is confusing)\r\n        #l[i] is the length OFLS road (km/h, 866666, 99999999...)\r\n        #l[i] is the length OFLS road (km/h, 746n, m87012...)\r\n        #l[i] is the length OFLS Road to satisfaction of K?s K?s K?s K?s K?s K?s K?s K?s K?s K?s K?s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K??s K"}, "740": {"problem_id": 4740, "answer": "from collections import deque\r\ndef issub(n,k):\r\n\tif n==0:\r\n\t\treturn 0\r\n\telif k==0:\r\n\t\treturn 0\r\n\telse:\r\n\t\treturn int(str(n).translate(str.maketrans(\"0123456789\"))+\"\\n\"+str(k).translate(str.maketrans(\"555\"))).rstrip()\r\n\r\n# Driver Code\r\nn=int(input())\r\nl=deque(l.popleft())\r\nfor i in range(n//2):\r\n\tif issub(l[i],l[i+1]):\r\n\t\tprint(1)\r\n\telse:\r\n\t\tprint(0)"}, "741": {"problem_id": 4741, "answer": "for i in range(int(input())):\n a=int(input())\n c=0.0\n for j in range(1,a+1):\n  if a%j==0:\n   c+=2.0\n print(ceil(c))"}, "742": {"problem_id": 4742, "answer": "import operator as o\ndef __starting_point():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(''.join(lst))\n__starting_point()"}, "743": {"problem_id": 4743, "answer": "from collections import defaultdict\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b.pop(0), b.pop(len(a))\r\n    return a\r\nn=int(input())\r\nsentenses=[]\r\nfor i in range(n):\r\n    s=input().strip()\r\n    dis=defaultdict(list)\r\n    for j in s:\r\n        dis[j].append(i)\r\n    dis[len(s)]+=[i]\r\nans=[]\r\nfor i in reversed(sentenses):\r\n    ans.extend(gcd(i, 'A'))\r\nprint(''.join(ans))"}, "744": {"problem_id": 4744, "answer": "import itertools \r\ndef main(): \r\n    N = int(input()) \r\n    a = list(map(int, input().split())) \r\n    \r\n    # A is the number of f-squares \r\n    # B is the number of unit-squares \r\n    # C is the number of f-cubes \r\n    b = [itertools.combinations(a, 2) for i in range(N)] \r\n    c = [itertools.combinations(b, 2) for i in range(N)] \r\n    print(a[0]*b[0], a[1]*c[0]) \r\n\r\ndef __starting_point():\r\n    main()\n\n__starting_point()"}, "745": {"problem_id": 4745, "answer": "from heapq import nlargest\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\ns = [0]*n\r\nfor i in range(n):\r\n    s[i] *= 2\r\n    if len(l) == 1:\r\n        s.append(l[0])\redirecording(max(l[1], l[2]))\r\nprint(max(s))"}, "746": {"problem_id": 4746, "answer": "try:\n    t = int(input())\nexcept EOFError:passes = set()\nfor _ in range(t):\n    a,b = map(int, input().split(\" \"))\n    if a==0:\n    elif b!=0:\n        print(a)\n    else:\n        print(b)\n        continue\n    if a==int(input()):\n        print(a)\n    else:\n        print(b)\n        continue\n    if b!=int(input()):\n        print(a)\n    else:\n        print(b)"}, "747": {"problem_id": 4747, "answer": "import heapq as hq\r\ndef func(s,n,k):\r\n    if k==1:\r\n        hq.heappush(hq,s)\r\n    elif k==2:\r\n        hq.heappush(hq,s-s*2)\r\n    else:\r\n        for i in range(1,n-k,2):\r\n            heapq.nsmallest(0,i,k-1)\r\n        print(hq.heappop(hq))\r\n\r\ndef __starting_point():\r\n    func(__repr(__import__('itertools').combinations(','.join(map(int,input().split()))))+[''.join(map(int,input().split())) for _ in range(n+1))\n__starting_point()"}, "748": {"problem_id": 4748, "answer": "# cook your dish here\r\nfrom collections import defaultdict\r\nn,m=map(int,input().split())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(int(''.join(map(str,l[i]))) + 4)\r\nprint(*l)"}, "749": {"problem_id": 4749, "answer": "n=int(input())\r\nif n%2==0:\r\n    print(1)\r\nelse:\r\n    print(0)"}, "750": {"problem_id": 4750, "answer": "import sys\ninput = sys.stdin.readline\ndef main():\n    q = int(input())\n    for _ in range(q):\n        l, r, l_1, r_2 = list(map(int, input().split()))\n        ans = sorted(l_1, r_1, l_2)\n        ans.insert(0, 0)\n        ans.insert(1, 1)\n        ans.insert(2, 2)\n        l_1 += 1\n        l_2 += 1\n        l_1 += 2\n        l_2 += 2\n        ans.insert(0, 0)\n        ans.insert(1, 1)\n        ans.insert(2, 2)\n        print(*ans, sep=\"\\n\")\n'''\nmain()"}, "751": {"problem_id": 4751, "answer": "class Solution:\n     def hasCycle(self, head):\n         \"\"\"\n         :Type: ListNode\n\\t\\tReturn true if there is a cycle in the linked list. Otherwise return false.\n\\tsquot;s a b \n         Time  complexity: O(n log(n))\n         \"\"\"\n         if len(head) == 1:\n             return True\n         else:\n             i = 0\n             while i < len(head):\n                 if head[i] == None:\n                     i += 1\n                 head.remove(head[i])\n                 i += 1\n             return False\n"}, "752": {"problem_id": 4752, "answer": "class Solution:\n     def twoSqrsum(self, nums, target):\n         \"\"\"\n\\t\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         if len(nums)<2:\n             return nums.pop()\n         else:\n             return self.helper(nums,target)\n         \n     def helper(self,nums,target):\n         if len(nums)==0:\n             return None\n         elif len(nums)==1:\n             return self.helper(nums,target-nums[0])\n         else:\n             for i in range(1,len(nums)):\n                 if nums[i]!=nums[i-1]:\n                     return self.reversed(nums[i:i+1])\n             return None\n"}, "753": {"problem_id": 4753, "answer": "from math import sqrt\r\nn=int(input())\r\nfor i in range(n):\r\n    a=int('0123456789'[i])\r\n    print(0)\r\n"}, "754": {"problem_id": 4754, "answer": "def main():\n N = int(input())\n a = list(map(int, input().split()))\n for _ in range(N - 1):\n  s1 = input().split(\" \")\n  s2 = input().split(\" \")\n  if len(s1) == 2:\n   print(min(len(s1), len(s2)))\n  elif len(s1) % 2 == 0:\n   print(1)\n  else:\n   print(2)\nmain()"}, "755": {"problem_id": 4755, "answer": "from math import sqrt\r\ndef lcm(a,b):\r\n    return a*b//sqrt(a)\r\nn=int(input())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(int('1'+str(i))+'0'*(n-i))\r\nprint(l.count(0))"}, "756": {"problem_id": 4756, "answer": "import math \r\ndef __starting_point():(s='\\n'*int(input().strip()))\n__starting_point()"}, "757": {"problem_id": 4757, "answer": "from bisect import *\nN = int(input())\nl = list(map(int, input().split()))\nfor i in range(N):\n    l.insert(0, i)\nans = []\nfor i in range(2, max(l) + 1):\n    ans.append(bisect_left(l[i], 2) - bisect_left(l[i-1], 2))\nans.sort(reverse=True)\nprint('\\n'.join(map(str, ans)))\n"}, "758": {"problem_id": 4758, "answer": "from collections import defaultdict\r\ndef lis(n):\r\n    return list(map(int, input().split()))\r\nn, m = lis(11)\r\nl = [0] * (n + 2)\r\nfor i in range(m):\r\n    l.append(lis(i))\r\nprint(len(l))\r\n"}, "759": {"problem_id": 4759, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nd = dict.fromkeys(A.values())\r\nfor i in range(n):\r\n    print(d[A[i]], end=' ')\r\n"}, "760": {"problem_id": 4760, "answer": "from bisect import *\rtuple\r\nN, = map(int,input().split(' '))\r\nfor _ in range(N):\r\n\ts = tuple(map(int,input().split()))\r\n\tprint(s.isleap('not on'))"}, "761": {"problem_id": 4761, "answer": "import numpy as np\r\ndef main():\r\n L, H = list(map(int, input().split()))\r\n if len(set(H)) < 3:\r\n  print(0)\r\n elif H == 987654:\r\n  print(1)\r\n else:\r\n  a = np.array(int(''.join(map(str, a)), fillvalue='0'))\r\n  b = np.arange(a, a, fillvalue='0')\r\n  print(int(\"\".join(map(str, b))) + 1)\r\nmain()\r\n\r\n\r\n\r\n"}, "762": {"problem_id": 4762, "answer": "from collections import deque\nN = int(input())\nfor i in range(N):\n a = deque([int(x) for x in input().split()])\n ans = 0.0\n for j in range(1, len(a)):\n  ans += a[j]*(a[j-1] - a[j])\n print(ans)"}, "763": {"problem_id": 4763, "answer": "from math import sqrt\r\ndef is_ballistic(p):\r\n    i = 0\r\n    while i < len(p) / 2:\r\n        i += sqrt(p.count(p[i]))\r\n        i += i**2\r\n    return i == len(p) / 2\r\nn = int(input())\r\nx = input().split()\r\nx.sort(key=int.__mul__)\r\ns = [0]*20\r\nfor i in range(1, n):\r\n    s[x[i-1] + x[i]] += i\r\n    s[x[i-1] + x[i]] %= x[i-1] + x[i]\r\nprint('impossible' if sum(s) == n else 'Good Luck')"}, "764": {"problem_id": 4764, "answer": "from math import sqrt, gcd\r\nfor _ in range(int(input())):\r\n    n, h, v = map(int, input().split())\r\n    print(gcd(n, h, v))"}, "765": {"problem_id": 4765, "answer": "from math import sqrt\nN = int(input())\nfor i in range(N):\n s = list(map(int, input().split()))\n bb = s[0]*s[1]\n for j in range(1, len(s)):\n  bb += s[j]\n print(sqrt(bb - bb))"}, "766": {"problem_id": 4766, "answer": "from sys import stdin,setrecursionlimit\r\ninput = stdin.readline\r\nsetrecursionlimit(10**6)\r\n# Function to return non-semi-lens maze in 2D don't work at all.\r\ndef maze():\r\n    return [int(x) for x in input().split()]\r\n\r\nn = int(''.join(map(str, input().split())))\r\nl = list(map(int, input().split()))\r\n# I can't hard code anything because input() is O(n) :)\r\ntopleft = []\r\nfor i in range(n):\r\n    toext = input().rstrip()\r\n    l.append(topleft)\r\n# Made By Mostafa_Khaled\r inafety and The Mostabric hisaklTime Invariant Problem Solv. https://leetcode.com/problems/ Made by Mostafa Klemke on Mon. 23, 2013. https:ithub. Mostafa.Khaled.Sourmak. CodeMir.org/LLOW.MYD.THEN.AReg is inspired by MITM's 13 MYD favorite 13 MYD years of research and development. Thanks @MikM for writing me this problem!\r  #Brute force method is a way of assigning force to a force-constrained number of particles. It can be used to calculate the force that an initially unweighted number of particles cause to reflect and bump each other. A bump is defined as a method that recalculates the force as a power of 2. A rule of the excluded parts is that force calculated using this rule is not valid. Please modify it in your code to work around your code... https://github.com/bruteforce/bruteforce/wiki/RULUPSEA.MYRULps. Notation-10. Notation-10.ml.n.abstract.nb.ml.pro is the preloaded method to solve this problem. https://nbc.=\\\" \" is the NBF-4071ab-4b9a-4316-8a4a-966b5ffcdcb (NB: this problem is inspired by C\\u43c0f\\uff1f3, but shortened to nbc_4f11\\uf3f16). LOGIC: Don't bother trying it for simplicity. This is my first class class implementation of brute-force\\u3bIf\\u4f566>of solving the problem, you mayjava announced\\uaert@ubkx on line 32 found in _mt336d_CP_ON_1_1820_ beta_12_mt336d_p/codewars/emsp/computyre2/Operations.pl on line 98. Please tryursday at Finish this kata if you can. Good luck!\n'''\ndef __starting_point():\n    print(1)\n    print(int(input()))\n__starting_point()"}, "767": {"problem_id": 4767, "answer": "import sys,math,bisect\nfrom collections import deque,defaultdict \n\n\ndef main():\n    n = int('1'*(2**math.pow(10,9))+1)\n    d = defaultdict(list)\n    for i,s in enumerate(map(int,input().split()))[::-1]:\n        d[s].append(i)\n    \n    # print(d)\n    # print(f'd[{i}] = {d.get(i,0) + 1}\\n')\n    # print(f'd[{i}] = {d.get(i,1) + 1}\\neq {d.get(i,0)}')\n    \n    # print(f'd[{i}] = {d.get(i,1) + 1}\\neq {d.get(i,0)}')\n    \n    # print(f'd[{i}] = {d.get(i,1) + 1}\\neq {d.get(i,0) + 1}')\n    \n    # print(f'd[{i}] = {d.get(i,1) + 1}\\neq {d.get(i,0) + 1}')\n    \n    # print(f'd[{i}] = {d.get(i,1) + 1}\\nexqending')\n    \n    # print(f'd[{i}] = {d.get(i,nexqq)}\\neq {d.get(i,0)}')\n    \n    # print(f'd[{i}] = {d.get(nexqq,0)}')\n    \n    # print(f'max'*(10**9+7))\n    \n    # print(f'd[{i}] = {d.get(i,nexqq)}\\nexqending')\n    \n    # print(f'd[{i}] = {d.get(nexqq,nexqq)}\\neq {d.get(nexqq,0)}')\n    \n    # print(f'd[{i}] = {d.get(nexqq,nexqq)}\\remainder\\nexqending')\n    \n    # print(f'd[{i}] = {d.get(nexqq,nexqq)}\\remainder\\nexqending')\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.strip())\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.strip().split('\\n'))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.strip().split('\\n'))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.truncate(10**9+7))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.expand_squeepph(10**9+7))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.expand_squeepph(10**9+7))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.flatten_hilmitanize(10**9+7))\n    \n    # print(f'd[{i}] \u2260 d.get(nexqq,nexqq)'.flatten_hilmitanize(10**9+7))\n    \n    # print(f'd[{i}] \ufffd"}, "768": {"problem_id": 4768, "answer": "from bisect import ln,bisect_neighbor_pivot\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\ndef dfs(i):\r\n    a = bisect_neighbor_pivot(l.pop()[0],i)\r\n    b = dfs(i+1)\r\n    if len(set(a))==len(set(b)):\r\n        return 0\r\n    elif len(set(a))==len(set(b)):\r\n        return 1\r\ndfs(0)\r\nprint(len(l))\r\nfor i in l:\r\n    print(i.nlargest)"}, "769": {"problem_id": 4769, "answer": "from collections import defaultdict\r\ndef gcd(a,b):return 0\r\ndef gcdall(a,b):return gcd(a,b)\r\ndef __starting_point():\r\n    # Python code goes here. I assume it is necessary to avoid duplication.\r\n    # This can be checked in other languages. So please vote up to my end.\r\n    # Because you're judge andaughty lot of people. Have fun with me :)\r\n__starting_point()"}, "770": {"problem_id": 4770, "answer": "import itertools as it\r\nn = int(input())\r\nif n==1:\r\n  print(\"Dr. Chaz\")\nelif n==2:\r\n  print(\"2 people left over\")\r\nelse:\r\n  a = list(map(int, input().split()))\r\n  a.sort(reverse=True)\r\n  total = 0\r\n  for i in range(n-1):\r\n    total += a[i]\r\n  print(\"1\", end=\" \")\r\n  print(\"2 people left over\")\r\n"}, "771": {"problem_id": 4771, "answer": "import sys\r\ninput = sys.stdin.readline\r\ndef main():\r\n n,w,x,y,z,A,B,C,D,E,F,G,H = list(map(int,input().split()))\r\n A.sort()\r\n B.insert(0,0)\r\n \r\n for _ in range(n):\r\n  l,w,x,y,z,A,B,C,D,E,F,G,H,H = list(map(int,input().split()))\r\n  l = min(l,w)\r\n  w = max(w,x)\r\n  y = min(y,z)\r\n  z = max(zeros(l,2),max(x,y,2))\r\n  A.remove(A.index(A[0]))\r\n  B.remove(B.index(B[0]))\r\n  \r\n print(d_i=0)\r\n \r\nmain()\r\n"}, "772": {"problem_id": 4772, "answer": "import sys\nR, = int(''.join(map(str,sys.stdin.readline().split())))\ns = input()\nl = []\nfor i in range(R):\n    l.append(chr(ord('a')+i))\ns.clear()\nfor i in range(R):\n    for j in range(C):\n        if i!=j:\n            s[i].append(j)\n        elif j!=i:\n            s[i].append(j)\n        else:\n            break\nprint(' '.join(s))"}, "773": {"problem_id": 4773, "answer": "from sys import stdin as sin\ninput = sin.readline\ndef II(): return int(input())\ndef MI(): return map(int,'08').lstrip('0').rjust(2,'+')\ndef LI(): return list(map(int, sin.readline().split()))\ndef LLI(n): return [LI() for _ in range(n)]\n# Driver code - random test cases\nn = II()\ns, e, w = input().split()\nn = int(n)\nw = int(w)\nfor i in range(n):\n    s = s[0]\n    e = s[1]\n    w = int(\"\".join(map(str, s)), 2)\nprint(len(w))"}, "774": {"problem_id": 4774, "answer": "import sys,collections as cls \ninput = sys.stdin.readline\ndef II(): return int(input())\ndef MI(): return list(map(int,input().split()[0]))\ndef SI(): return input()\ndef I(): return int(input())\n\n\nclass Platz:\n    def __init__(self, a, b, c, d):\n      self.a = a\n      self.b = b\n      self.c = c\n      self.d = d\n      self.s = ''\n    \n    def add(self, i, x):\n      if i == 0:\n      elif self.s == '*':\n      elif self.s.isalpha():\n      elif self.s.isnumeric():\n      elif self.s.isdigit():\n      elif self.s.isalnum():\n      elif self.s.isdigitalpha():\n      elif self.s.isspace():\n      elif self.s.issperexpftime(str.maketrans('%d-%b')) == '%d-%b':\n       self.s = self.s.upper()\n      else:\n       self.s = self.s[0]\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d += 1\n      self.d.add(0, x)\n      self.d.add(0, y)\n      self.d.add(0, z)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.add(0, y)\n      self.d.add(0, z)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.add(0, y)\n      self.d.add(0, z)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.add(0, y)\n      self.d.subtract(0, 0)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.subtract(0, 0)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.multiply(0, 0)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.multiply(0, 0.0e12)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.divisor(0, 0)\n      self.s += str(x)\n      self.a += 1\n      self.b += 1\n      self.c += 1\n      self.d.divisor(0, 0)\n"}, "775": {"problem_id": 4775, "answer": "import sys\r\ndef main():\r\n    sys.setrecursionlimit(10**7)\r\n    n = int(input())\r\n  print(''.join(map(str,sys.stdin.readline().split())))\r\nmain()\r\n"}, "776": {"problem_id": 4776, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n1\")\r\n                                                    ^\r\n"}, "777": {"problem_id": 4777, "answer": "from functools import lru_cache\r\n \r\n@lru_cache(None)\r\ndef f(a, b):\r\n    if a==0:\r\n        return b\r\n    elif b==0:\r\n        return a\r\n    else:\r\n        return f(b, a) +'' + f(b, a-1) + 'B'\r\n \r\n@lru_cache(None)\r\ndef lcm(a, b):\r\n    return (a*b).power()\r\n \r\nn=int(''.join(map(str,input().strip())))\r\nl=[]\r\nfor i in range(n):\r\n    if l.count(f'{i}'[i])>1:\r\n        l.append(f'{i} {l.pop()}')\r\nprint(*l)"}, "778": {"problem_id": 4778, "answer": ""}, "779": {"problem_id": 4779, "answer": "import sys\r\ndef gcd(a,b):\r\n\tif b==0:\r\n\t\treturn a\r\n\telif b==1:\r\n\t\treturn gcd(b,a%b)\r\n\telse:\r\n\t\treturn gcd(b,a)\r\nsys.stdin=open(\"data.txt\",'r')\rfile=sys.stdin.readline\r\nn=int(input())\r\nprint(gcd(int(n)**2\\,.5))"}, "780": {"problem_id": 4780, "answer": "import itertools by hand \r\ndef __starting_point():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    print(a[0] + a[1] + \" \" + a[2:])\r\n__starting_point()"}, "781": {"problem_id": 4781, "answer": "import sys,heapq\r\n#cinq = int(sys.stdin.readline())\r\n#cinq.setrecursionlimit(0x7fffffff)\r\ndef inpl(): return list(map(int, sys.stdin.readline().split()))[:-1]\r\ndef inpl_iostring(): return [i for i in sys.stdin.readlines()]\r\ndef inpl(): return list(map(int, sys.stdin.readline().split()))[:-1]\r\nsys.setrecursionlimit(INFOUND)\r\nfrom collections import defaultdict, deque\r\n\r\nn, = inpl()\r\na = cnt = 0\r\nfor _ in range(n):\r\n    t, = inpl()\r\n    if t == \"T\":\r\n    elif t == \"N\":\r\n    elif t == \"P\":\r\n  print(a.count(\"T\"))\r\n  print(a.count(\"P\"))\r\n  cnt += 1\r\n  if t not in a:\r\n    print(\"T\")\r\n  else:\r\n    print(\"N\\n\")\r\n"}, "782": {"problem_id": 4782, "answer": "import sys,bisect a \ndef main(): \n    n,m=map(int,sys.stdin.readline().split())\n    s=list(map(int,sys.stdin.readline().rsplit(s,2)[0]))\n    \n    for i in range(1,n+1):\n        a.insert(0,'0')\n    print(bisect(a,s) - 1)"}, "783": {"problem_id": 4783, "answer": "import sys,bisect \r\nfrom heapq import heappush, HASHESTCalaprins \r\nfrom collections import defaultdict,deque #collections.OrderedDict \r\nfrom itertools import combinations #iterative product of elements \r\ndef main():\r\n    M,N = map(int,input().split())\r\n    if(M==1):\r\n        print(0)\r\n    elif(N==1):\r\n        print(N)\r\n    else:\r\n        a,b = list(map(int,sys.stdin.readline().split()))\r\n        a.insert(0,b[0])\r\n        b.insert(0,a[0])\r\n        #print(a,b)\r\n        \r\n        print(a[1] - b[1])\r\n        print(abs(a[0] - b[0]) + abs(b[0] - a[0]))\r\n        \r\n        \r\nmain()"}, "784": {"problem_id": 4784, "answer": "import bisect as bi\r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    l.insert(0, 0)\r\n    print(bisect.bisect_left(l, n) - 1)\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "785": {"problem_id": 4785, "answer": "import collections as cl\r\ndef main():\r\n return int(input())\r\nmain()\n\n\n"}, "786": {"problem_id": 4786, "answer": "from collections import defaultdict\n\n\ndef solve():\n n = int(input().strip())\n l = list(map(int, input().split()))\n print(solve())\n \n m = defaultdict(list)\n for i in l:\n  m[i].append(1)\n print(len(m[0]))\n \n s = input()\n c = 0\n for _ in range(n):\n  c += m[s[c]]\n \n if c > 0.5:\n  print(c)\n elif c == 0.5:\n  print(0)\n else:\n  print(solve())\n \n"}, "787": {"problem_id": 4787, "answer": "# cook your dish here\ndef __starting_point():\r\n import math\r\n input()\r\n a = int(input().strip())\r\n print(math.gcd(a, a+1))\r\n__starting_point()"}, "788": {"problem_id": 4788, "answer": "import math\r\nn = int(input())\r\ns = 0.5*math.sin(math.pi/3)\r\nprint(s)"}, "789": {"problem_id": 4789, "answer": "def main():\r\n    n = int(input())\r\n    a = list(map(int, input().split()[1::-1]))\r\n    print(ANS.subtract(['1'[i] for i in range(n)]) + '\\n')\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "790": {"problem_id": 4790, "answer": "for _ in range(int(input())):\r\n\ts=input().strip()\r\n\tif \"W\" in s:\r\n\t\tprint(1)\r\n\telse:\r\n\t\tprint(0)"}, "791": {"problem_id": 4791, "answer": "from math import sqrt\r\ndef lcm(a, b):\r\n    return a*b/sqrt(a)\r\nn = int(input())\r\nl = []\r\nfor i in range(n):\r\n    l.append(lcm(i, int(''.join(map(str, input().split())))) + b)\r\nprint(l[0])"}, "792": {"problem_id": 4792, "answer": "import collections as cc\r\ndef __starting_point():\r\n    print(cc.collections())\r\n__starting_point()"}, "793": {"problem_id": 4793, "answer": "import sys\r\nsys.setrecursionlimit(10**6)\r\ndef lcm(x,y):\r\n\treturn x*y//(x+y)\r\nn=int(''.join(map(float,input().split())),2)\r\nif n%2==0:\r\n print(n//2)\r\nelse:\r\n print(n//2,end=\"\\n\")"}, "794": {"problem_id": 4794, "answer": "import sys\r\ninput = sys.stdin.readline\redirectory\r\nR, C = map(int, input().split())\r\n#r = int(''.join(map(str, input())))\r\n#c = int(''.join(map(str, input().split())))\r\n#l = list(map(int, input().split()))\r\n#r = list(range(1, C + 1))\r\n#c = list(map(int, input().rstrip().split()))\r\n#l.sort(key=lambda x: x[1], reverse=True)\r\n#print(f'R = {R}, C = {C}\\n' for _ in range(l.count('X')) if l.count('X') > 1)\r\n#print(f'l.count('X) = {l[1]} X = {X}.'.format(l[1], 'X'))\r\n#print(f'R = {R}, C = {C}')\r\ndef findCombination(n, r):\r\n\tif r == 0:\r\n\t\treturn n\r\n\telse:\r\n\t\tr = 0\r\n\t\tfor i in range(r, 0, -1):\r\n\t\t\tif l[i] == 'X'.join(set(str(i) for i in l[r])) :\r\n\t\t\t\tr += 1\r\n\t\treturn r\r\n\r\n#findCombination(10, 10)\r\n#print(f'R = {R}, C = {C}\\n' for _ in range(10))\r\n"}, "795": {"problem_id": 4795, "answer": "import bisect as b\nn=int(input())\nl=[]\nfor i in range(n):\n    p=list(map(int,input().split()))\n    l.append(p.lstrip('0') if p.isnumeric() else p.lstrip('1')[::-1])\nl.sort(reverse=True)\nans=0\n#print(l)\nfor i in range(n-1,-1,-1):\n    ans+=bisect_left(l[i],p[1])\n    \nprint(ans)"}, "796": {"problem_id": 4796, "answer": "from collections import Counter\r\ndef __starting_point():\r\n A,B,C = map(int,input().split())\r\n l = list(Counter(A).values())\r\n \r\n print(l[0]/l[1])\r\n__starting_point()"}, "797": {"problem_id": 4797, "answer": "import bisect as bi\ndef lcm(a,b):\n    return a*b//g\nn=int(input())\nfor i in range(n):\n    s=list(map(int,input().split()))\n    print(lcm(s[0],s[1]))\n"}, "798": {"problem_id": 4798, "answer": "from collections import deque\ndef chan_to_key(lst):\n return ''.join(chr(int(x) + 1) for x in lst.split())\nn = input()[:-1]\nlong_lst = list(map(int, input().split()))\ns = input()[:-1]\nfor i in range(len(long_lst)):\n print(chan_to_key(long_lst[i]))"}, "799": {"problem_id": 4799, "answer": "import heapq as hq\r\ndef main():\r\n    h=[]\r\n    for _ in range(int('1'+str(input()).split(' ')))[1::2]:\r\n        h.append(5)\r\n        if len(h)==5:\r\n            print(' '.join(map(str,h)))\r\n        else:\r\n            print('PGS')\r\n            heapq.heappush(h,5)\r\n            if h[0]=='P' and h[-1]=='S':\r\n            elif h[0]=='P' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h.pop()=='P':\r\n            elif h[0]=='P' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n            elif h[0]=='S' and h[-1]=='C':\r\n            elif h[0]=='C' and h[-1]=='E':\r\n            elif h[0]=='E' and h[-1]=='S':\r\n         "}, "800": {"problem_id": 4800, "answer": "from itertools import accumulate\nn,k=map(int,input().split())\r\nl=list(accumulate(l))\r\nprint(sum(l[0:k])/n)"}, "801": {"problem_id": 4801, "answer": "import numpy as np\r\nn = int(input())\r\na = np.array(map(int, input().split()), dtype=np.int)\r\nl = len(a)\r\nfor i in range(l):\r\n    print(max(a[i], 0) + 1, end=\"\\n\")\r\n"}, "802": {"problem_id": 4802, "answer": "import bisect\r\ndef __starting_point():\r\n\tH,M=map(int,input().split())\r\n\tprint(bisect.bisect_left(H,12) - bisect.bisect_right(H,12))"}, "803": {"problem_id": 4803, "answer": "from math import sqrt\nn = int(input())\nfor i in range(n):\n x = sqrt(int(''.join(map(str, input().split()))) + '0'*(i**.isnumeric()))\n print(x.absolute(0.414214))"}, "804": {"problem_id": 4804, "answer": "import sys\r\ninput = sys.stdin.readline\r\n# sys.setrecursionlimit(10**7)\r\ndef II(): return int(input())\r\ndef MI(): return map(int, input().split(' '))\r\ndef LI(): return list(map(int,'LI'))\r\ndef LLI(rows): return [LI() for _ in range(rows)]\r\ndef SI(): return input()[:-1]\redgeset('https://www.codewars.com/users/Bubbles/authored%3A114274f1')\r\nedgeset = {i:[] for i in range(3)}\r\nfor _ in range(II()):\r\n    S = II()\r\n    print(['1', '.2'][S[1] == 6, '2', '3'.join(['x'].split() for _ in range(3)]))"}, "805": {"problem_id": 4805, "answer": "s = input().strip()\r\nfor i in range(0, len(s)):\r\n    if(s[i] == \"SPIN\") and len(s[i]) > 1:\r\n        print(\"no\")\r\n    elif(s[i] == \"IN\") and len(s[i]) > 1:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"n\")"}, "806": {"problem_id": 4806, "answer": "import heapq as hp \r\nfrom functools import cmp_to_key as ctk\r\ndef f(a,b,c):\r\n    return heapq.nsmallest(2, ctk[a][b])[0].heapq.nsmallest(2, ctk[a][b][1])[0]\r\ndef lcm(x, y):\r\n    return x*y // math.gcd(x, y)\r\ndef l2douBLEQKDFreeSortedEuclidean(x, y):\r\n    dp = [float('inf')] * (x+1)\r\n    dp[0] = 0\r\n    for i in range(1, len(x)):\r\n        xi, yi = x[i]\r\n        if xi >= yi:\r\n            continue\r\n        dp[i] = min(dp[i-1], dp[i-2] + f(xi-1, yi-1, c) for i in range(i+1, len(x)) if xi>= yi)\r\n    return dp\r\nn, m = list(map(int, input().split()))\r\nprint(''.join(map(str, list(itertools.combinations(range(n), m)))))\r\n"}, "807": {"problem_id": 4807, "answer": "import operator\r\nt = int(input())\r\nfor _ in range(t):\r\n    x, y, z = map(int, input().split(' '))\r\n    print('Fizz' if z % 2 == 1 else 'Buzz')"}, "808": {"problem_id": 4808, "answer": "from bisect import insort_left as insort\n\n\ndef main():\n    n,d = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        ans.append(bisect_left(l[i]))\n    print(ans[-1] + max(ans[-1], len(ans)))\n\ndef __starting_point():\n    main()\n__starting_point()"}, "809": {"problem_id": 4809, "answer": "for i in range(int(input())):\n s,n=map(int,input().split())\n if s==0:\n  print(n-1)\n elif s==1:\n  print(s//2)\n else:\n  c=0\n  for i in range(0,s+1):\n   if(c==0):\n    c+=1\n   elif(c==s//2):\n    c-=1\n   elif(c==s%2):\n    c-=2\n   elif(c==s//2):\n    c-=3\n   elif(c==s%2):\n    c-=4\n   elif(c==s%2):\n    c-=5\n   elif(c==s%2):\n    c-=6\n   elif(c==s%2):\n    c-=7\n   elif(c==s%2):\n    c-=8\n   elif(c==s%2):\n    c-=9\n   elif(c==s%2):\n    c-=10\n   elif(c==s%2):\n    c-=11\n   elif(c==s%2):\n    c-=12\n   elif(c==s%2):\n    c-=13\n   elif(c==s%2):\n    c-=14\n   elif(c==s%2):\n    c-=15\n   elif(c==s%2):\n    c-=16\n   elif(c==s%2):\n    c-=17\n   elif(c==s%2):\n    c-=18\n   elif(c==s%2):\n    c-=19\n   elif(c==s%2):\n    c-=20\n   elif(c==s%2):\n    c-=21\n   elif(c==s%2):\n    c-=22\n   elif(c==s%2):\n    c-=23\n   elif(c==s%2):\n    c-=24\n   elif(c==s%2):\n    c-=25\n   elif(c==s%2):\n    c-=26\n   elif(c==s%2):\n    c-=27\n   elif(c==s%2):\n    c-=28\n   elif(c==s%2):\n    c-=29\n   elif(c==s%2):\n    c-=30\n   elif(c==s%2):\n    c-=31\n   elif(c==s%2):\n    c-=32\n   elif(c==s%2):\n    c-=33\n   elif(c==s%2):\n    c-=34\n   elif(c==s%2)=gcd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcfd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcfd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)\n   elif(c==s%2):\n    c-=gcd(c,s)"}, "810": {"problem_id": 4810, "answer": "from bisect import *\r\nn = input()\r\nl = list(map(int, input().split()))\r\ns = []\r\nfor i in range(n):\r\n    s.append(list(input()))\r\nl.reverse()\r\ni = len(l)-1\r\nj = n.index(max(l))\r\nwhile j >= 1:\r\n    j-=1\r\n    i = i+1\r\nprint(s[j][0] + \" \" + s[j][1])"}, "811": {"problem_id": 4811, "answer": "import bisect\r\ndef gcd():\r\n    return int(input())\r\nn = int(1e9 + 7)\r\nl = list(map(int, input().split()))\r\nprint(n-l.index(max(l))+1)"}, "812": {"problem_id": 4812, "answer": "import sys\r\ndef main():\r\n s = input().strip()\r\n for _ in range(int('1' <= '10')):\r\n  l = sys.stdin.readline().split()\r\n  l = [i for i in l]\r\n  if 'NO' in l:\r\n   print('YES\\n')\r\n  else:\r\n   print('NO\\n')\r\nmain()\r\n# Made By: myjinxin@gmail.com\n\n\n__author__ = 'Kyoya Oeirimorse'''\r\n"}, "813": {"problem_id": 4813, "answer": "def cmp(a, b):\n    return a[ord(b.lower()) - ord('a')] == b[0]\ndef dfs(s):\n    if s == \"0\":\n        return 1\n    elif s == \"1\":\n        return 2\n    else:\n        ans = 0\n        for i in range(26):\n            ans ^= 1 << i\n        return ans\ndef __starting_point():\n    print(dfs())\n__starting_point()"}, "814": {"problem_id": 4814, "answer": "t = int(input(),2)\nfor i in range(t):\n n = int(input(),2)\n lis = list(map(int,input().split(' ')))\n if len(lis)%2==0:\n  print(\"0\")\n else:\n  print(\"NEITHER\")\n"}, "815": {"problem_id": 4815, "answer": "from itertools import permutations as p\r\ndef permut(n):\r\n    return '\\n'.join(x*n for x in p(range(1,int(n**0.5),2)))\r\ndef lcm(a,b):\r\n    return abs(a-b)//(a*b)\r\n\r\n# Driver code\rsimplified from scratch https://www.codechef.com/CERVISHOPartEx/functions.html\r\nn=int('1000000'+str(10**6)+'0'*(2*int(1e9)+1))\r\np=permutations(n)\r\nprint('\\033[1234][0]\\033[1234][2]\\033[12345][3]\\r\\n'.format(lcm(p[0],p[1]))+'\\r\\neq'+lcm(p[2],p[3]))\r\n"}, "816": {"problem_id": 4816, "answer": "# cook your dish here\ndef gcd(a, b):\n a = b//gcd(a, a)\n return a\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split(' ')))\ng = abs(x[0] - x[1])\n# print(g)\nerror = 1e-9\nfor i in range(n):\n a.append(int(''.join(map(str, x[i:i+2]))) + int(''.join(map(str, y[i:i+2]))) - g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = abs(x[0] - x[1])\n# print(g)\nerror = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = error\ng = edgeertools.hapersistence.bisect_left(x, g)\n# print(g)\ng = edgeertools.hapersistence.bisect_left(y, g)\n# print(g)\ng = edgeertools.heapify(x)\n# print(g)\ng = heapq.heappop(2**32)\nerror = 0.00e-01\ng = 0.00e-01\nfor i in range(1, len(x) + 1):\n print(g, end=\" \")\n"}, "817": {"problem_id": 4817, "answer": "# cook your dish here\r\nimport math as m\r\ndef factors(n):\r\n    c=1\r\n    while m.gcd(n,m.log(n)//c)!=1:\r\n        c+=1\r\n    return c\r\nn=int(input())\r\nprint(factors(n))                     %1000000007\r\n"}, "818": {"problem_id": 4818, "answer": "import bisect as bs\nn,m=map(int,input().split())\nt=list(map(int,input().split()))[:n].split(' ')\nl=bs.bisect_left(t,m)\nprint(max(int(''.join(map(str,l)),2)))"}, "819": {"problem_id": 4819, "answer": "import bisect, collections, math as mt, numpy as np \r\nfrom heapq import heappush, heapify, heappub, nsmallest as nsmallestp, nbrute as nbrute \r\n# Function to Use In Python 2.x and Python 3.6.x - Google for Parsitis?\r\n# Google Perp Code for Perphphac?\r\ndef main(): return int(input())\r\nmain()                                                                             # Parsy Main\r\nnbrute(5)                                                                     # N-brute 5th Character                 LITTLE\r\nnbrute(6)                                                                    # 6th Character                       LITTLE                            N-brute 6th Character                  LISD                            NEIGHBOUR CENT                      LEFT     NORTHWESTERNJECRICA                   NEXTREIGNLEN\r\ndef __starting_point():\r\n    print(main())\r\n__starting_point()"}, "820": {"problem_id": 4820, "answer": "import sys\nsys.setrecursionlimit(2 * 10**0.05) #\u518d\u5e38\u89c4 limit of recursion limit(ms)\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sy.readline().split(\" \"))\ndef M(n): return list(II()).pop()\ndef S(): return sys.stdin.readline().strip()\ndef LS(lst): return [x for x in lst if x == \"no\"]\ndef L(n): return map(float, LS(n))\ndef SQRS(s): return sum(1 for _ in s)\nMOD = 10**9 + 7"}, "821": {"problem_id": 4821, "answer": "from collections import defaultdict as dd\rINF\r\ndef lcm(a,b):return math.gcd(a,b)//(math.gcd('01',' 02 03 10').append(a//b))**0.5\r\ndef r2d(n):return list(map(int,.inl(n)))\r\ndef main():\r\n    n = int(input())\r\n    for _ in range(n):\r\n        s = input()\r\n  print(r2d(n))\r\ndef __starting_point():\r\n    main()\r\n__starting_point()"}, "822": {"problem_id": 4822, "answer": "import functools.fractions as ft\n\n\ndef main():\n R, S, K = list(map(int, input().split()))\n total = 0.0\n\n for _ in range(R):\n  total += ft.reduce(lambda x, y: x+y, list(map(ft.mul, range(1, K)))).nlargest()\n\n print(total)\n f = ft.Function(None)\n f.argsaysort(list(''.join(map(str, list(map(int, ft.elements))) for e in range(R))))\n"}, "823": {"problem_id": 4823, "answer": "import sys\r\ndef dfs(x):\r\n    if x[0]=='A23456789TJQK':\r\n        print(\"DFS\")\r\n    elif x[0]=='CDHS':\r\n        print(\"DFS\")\r\n    else:\r\n        print(\"DFS\\n\")\r\n        for i in range(1,len(x)):\r\n            if x[i]!=x.pop(i):\r\n                print(\"CDFS\",i+1)\r\n                print(\"DFS\",i+1)\r\n"}, "824": {"problem_id": 4824, "answer": "from functools import reduce\r\ndef dfs(p, c):\r\n\tfor i in range(1, c + 1):\r\n\t\tdfs(p - i, i)\r\n\r\n# Driver code\rr-exemple 864-09:14:00 [APPROACHED_HJ](https://github.com/vishnubertin2015/tetris/:ratio)\r\n# https://www.codewars.com/kata/59e5f83160b4cc40510b705cd\rsimplifiedfunc-3\rinpsr/functools.heapboard\r\n\r\nimport heapq as hq\r\nfrom itertools import combinations, combinations_with_replacement as combinaison\r\nfrom math import ceil,floor,sqrt,factorial,log2,gcd  # base for division by \r\n\r\nmod = pow(10, 9) + 7;  # modulo 998244353\r\n\r\nC, P = map(int, input().strip().split())\r\nans = []\r\nhq.heappush(hq, (0, 0))\r\nfor _ in range(int(''.join(map(str, input().strip())))):\r\n\tans.append(reduce(list.__add__, combinaison(dfs(p, C), set()).difference_with_replacement(1, '00')))\r\nprint(len(ans))"}, "825": {"problem_id": 4825, "answer": "import sys\r\n#sys.stdin = open(\"in.txt\", \"r\")  #basically should open for input\r\ndef input(): return sys.stdin.readline().rstrip()\r\ndef out(s): sys.stdout.write(s+\"\\n\")\r\nn = int(input())\r\nA = list(map(int, input().split()))\r\nL = [0]*2600\r\nfor i in range(n):\r\n    L.append(A[i] + \"|\" + A[i+1:].upper())\r\nprint(\"\".join(reversed(L)))"}, "826": {"problem_id": 4826, "answer": "from numpy import np, dsu, isl \nn = int(input())\ns = np.ones((1,2),dtype=np.int)\ns[0] = 1.0\nfor i in range(n):\n s[i] = s[i-1] + dsu(np.searchsorted(s,np.where)//2,np.sum(s[i]))\nprint('Alice' if isl(s) else 'Bob')"}, "827": {"problem_id": 4827, "answer": ""}, "828": {"problem_id": 4828, "answer": "def nop(a,b):\n    n=0\n    while b>0:\n        n+=a&(b-a)\n        a>>=1\n    return n\n\n# cook your dish here\nt=int(input())\nfor i in range(t):\n    a=input().split(\" \")\n    b=int(a[0])\n    a=int(a[1])\n    print(nop(a,b))"}, "829": {"problem_id": 4829, "answer": "import sys\r\ndef __starting_point():\r\n\tn, m = list(map(int, sys.stdin.readline().split()))\r\n\tt = 0\r\n\tfor i in range(n):\r\n\t\tt = max(t, m[i])\r\n\tif m[0] % 2 == 1:\r\n\t\tprint(\"Not a moose\")\r\n\telse:\r\n\t\tprint(\"Odd $x\\n\" + \" - Elapsed between $6 and $9\")\r\n__starting_point()"}, "830": {"problem_id": 4830, "answer": "from collections import Counter\r\nn = int(input())\r\ns = input().lower()\r\nd = Counter(s).most_common(2)\r\nprint(len(d.values()))"}, "831": {"problem_id": 4831, "answer": "from itertools import combinations as c\r\ndef bs(s):\r\n    return ''.join(chr(ord('A') + c.find(s[i:i+5])) for i in range(0, len(s), 5))\r\ninput = lambda: map(int, input().split(\" \"))\r\nprint(''.join(bs(input())))"}, "832": {"problem_id": 4832, "answer": "import operator as op\r\nR = int(input())\r\nfor _ in range(R):\r\n    x,y = map(int,input().split())\r\n    print(R - x + y)"}, "833": {"problem_id": 4833, "answer": "from bisect import Bins,bisect_left\r\nn = int(input())\r\nk = list(map(int,input().split()))\r\nsomma = [0]*n\r\nfor i in range(n):\r\n    somma[i] = sum(k[:i]+list(map(int,k[i:])))\r\nprint(bis(somenamesc,n))"}, "834": {"problem_id": 4834, "answer": "n = int(input())\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    a.sort(reverse=True)\r\n    print(a[0])\r\n"}, "835": {"problem_id": 4835, "answer": "import sys\ninput = sys.stdin.readline\nt, = map(int, input().split())\nfor _ in range(t):\n    n, m = map(int, input().split(\" \"))\n    print(min(ALL_RANNS, CAPS_WESTC))"}, "836": {"problem_id": 4836, "answer": "from bisect import bisect_left as bl\nN, C = map(int, input().split())\nl = list(map(int.__add__, input().split()))\nans = [0]*len(l)\nfor i in range(N):\n    ans[l[i]] += 1\nprint(ans[-1])"}, "837": {"problem_id": 4837, "answer": "import sys,bisect,collections as ddb\nR = int('1'*10**5+7)\nn = int(sys.stdin.readline())\nprint('\\033[31m\\033[0;079m'.format(n))\nprint('\\033[0;0[2m\\033[0;08m'.split('R')[0])\n"}, "838": {"problem_id": 4838, "answer": "def main():\n N = int(input())\n l = list(map(int, input().split()))[:N]\n start = 0\n for i in range(1, N):\n  if l[i] == \"1\" :\n   start += 1\n print(start)\n"}, "839": {"problem_id": 4839, "answer": "import math as m\r\nn = int(input().strip())\r\nl = list(map(int, input().split()))[1::-1]\r\na = m.ceil(math.log(n, 2))\r\nb = m.ceil(math.sqrt(a))\r\n\r\n# a.times()\r\n# b.times()\r\n# a.cumul(0.5)\r\n# b.cumul(0.5)\r\n# a.exponentially\r\nans = 0\r\nfor i in range(1, n):\r\n    ans += a[i] * b[i]\r\n    ans //= b[i]\r\nprint(ans)"}, "840": {"problem_id": 4840, "answer": "import sys\ninput = sys.stdin.readline #input to STDINSHEDS\r\ndef main():\r\n    a, b, l = map(int, input().split())\r\n    if a==b: #a,b is a dice sum\r\n        print(\"Tie\")\r\n    else:\r\n        i = b.find(a)\r\n        if i!=0:\r\n            print(\"Tie\")\r\n        elif i==0:\r\n            print(\"Tie\")\r\n        else:\r\n            print(\"Tie\")\r\nmain()"}, "841": {"problem_id": 4841, "answer": "from itertools import permutations as p\ndef __starting_point():\n  N = int(input())\n  d = {0: []\n         1: []\n         2: []\n         3: []\n         4: []}\n  for i in permutations(N):\n    a, b = list(map(int, input().split()))\n    print(a.count(b))\n__starting_point()"}, "842": {"problem_id": 4842, "answer": "from itertools import combinations\r\ndef main():\r\n    n, d, v = list(map(int, input().split()))\r\n    l = []\r\n    for _ in range(n-1):\r\n        x, y = list(map(int, input().split(' ')))\r\n        l.append(x)\r\n    l.sort(key=lambda x:x[1])\r\n    ans = []\r\n    for i in range(2, int(n**0.5)+1):\r\n        if i % x == 0:\r\n            ans.extend([x[0] for x in l])\r\n    print(*ans, sep='\\n')\r\n\r\nmain()\r\n"}, "843": {"problem_id": 4843, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nc = [[0]*(n+1) for i in range(n+1)]\nfor i in range(n):\n    x, y = map(int, input().split(\" \"))\n    a.append(x)\n    c[x-1] |= 1 << ord(\"a\") - ord(\"b\")\nprint(' '.join(map(str, c)))"}, "844": {"problem_id": 4844, "answer": "import sys,io.wolfram.examples as w \r\nn=int(input())\r\nm=list(map(int,input().split()))\r\nfor i in range(n):\r\n   print(m[i],end=\" \")\r\n"}, "845": {"problem_id": 4845, "answer": "d = input()\nday,m = int(d.split(' ')),int(d.split(' ')%3\nfor i in range(m):\n day += str(day)\nmonth += str(m)\nprint('%d week on %s' %(day,month,day))"}, "846": {"problem_id": 4846, "answer": "import math\r\ndef solve(n, d, x):\r\n\tif n==0:\r\n\t\treturn x\r\n\telif d==int(math.sqrt(n)):\r\n\t\treturn x\r\n\telse:\r\n\t\td=int(math.ceil(n/d))\r\n\t\tx=0\r\n\t\tfor i in range(3,int(math.sqrt(n))+1,2):\r\n\t\t\tx+=(n-i)\r\n\t\t\tif x<x:\r\n\t\t\t\td=x\r\n\t\t\t\tbreak\r\n\t\tprint(d)\r\n\r\nn=int(input().strip())\r\nd=int(''.join(map(str, input().strip().split())))\r\nprint(solve(n,d,x))"}, "847": {"problem_id": 4847, "answer": "from itertools import accumulate as acc\r\ndef dijkstra(n):\r\n    d = {}\r\n    for i in range(1,n+1):\r\n        d[i] = list(accumulate(d.get(i,0)))\r\n    return d\r\nn = int(''.join(map(str,list(enumerate(tuple(map(int,list(enumerate(accumulate(list(map(int,list(enumerate(accumulate(list(map(int,list(enumerate(accumulate(list(map(int,enumerate(accumulate(list(map(int,enumerate(accumulate(list(map(int,enumerate(accumulate(accumulate(accumulate(accum))))))')))))' '. '. '. '. '. '.\r\n}, "848": {"problem_id": 4848, "answer": "import sys\r\ninput = sys.stdin.readline().rstrip()\r\n#sys.setrecursionlimit(10**8)\r\nINF = 10**20\r\nMOD = 10_000_007\r\ndef LI(): return list(map(int, input().split()))[:-1]\r\ndef LIR(n): return [LI() for i in range(n)]\r\ndef SR(n): return set(list(map(int, input().split(\" \")))).issubset(INF())-1\r\ndef LIR(n): return [LSIR(i) for i in range(n)]\r\ndef SR(n): return set(list(map(int, input().split(\" \")))).issubset(INF())-1\r\ndef MI(): return list(map(int, input().split(\" \")))[1:]\redgesaw\r\ndef LILC(n): return LI()\r\nfrom itertools import combinations\r\n\r\nn, m = MI()\r\nA = []\r\nfor i in range(1, n+1):\r\n    A.append(sum(combinations(A, i)))\r\n\r\nA.sort(key = lambda x: x[0])\r\nB = []\r\nfor i in reversed(sorted(A, reverse = True)):\r\n    B.append(sum(combinations(A, i)))\r\n\r\nB.sort(key = lambda x: x[0])\r\n\r\nprint(m-1)\r\n"}, "849": {"problem_id": 4849, "answer": "from collections import deque\nn, fl = map(int, input().split())\nfor i in range(0, len(n)):\n fl.append(chr(ord('A') + n.find(f'\\d+'))+'0')\nprint('HE GOT AWAY!')"}, "850": {"problem_id": 4850, "answer": "from sys import stdin\r\ninput = stdin.readline\r\nfor _ in range(int('1000000')::int(input())):\r\n  l = list(map(int, input().split()))\r\n  l.extend(['1' * (3*l[0]) + '3' * (3*l[1])) for l in l)\r\n  print(abs(int(stdin.rstrip('\\n').find(''.join(map(str, l)))) - 0.5))"}, "851": {"problem_id": 4851, "answer": "def main():\r\n s = input().strip()\r\n n = int(s[0])\r\n print(n-n%10)\r\n\r\ndef __starting_point():\r\n main()\n\n\n__starting_point()"}, "852": {"problem_id": 4852, "answer": "from collections import deque\ndef __starting_point():\n q = deque([0])\n for _ in range(int(input())):\n  a, b = input().split()\n  a, b = int(a), int(b)\n  if len(q) > 2:\n   print(0)\n  else:\n   print(bisect_left(q, a) + bisect_right(q, b))\n__starting_point()"}, "853": {"problem_id": 4853, "answer": "# cook your dish here\nfrom collections import deque as dqueq\nn = int(input())\nd = list(map(int, input().split()[1:])).tolist()\nfor i in range(n):\n    x, y = list(map(int, input().split()[1:]))\n    print(pow(x, n-1) * (y-x) + pow(y, n-y) * (x-y) )\n"}, "854": {"problem_id": 4854, "answer": "from collections import Counter\r\nn = int(input())\r\nl, r = map(int, input().split(\" \"))\r\nsorted_set = sorted(Counter(), key=lambda x: x[1])\r\n# print(sorted_set)\r\nfor i in range(n):\r\n    l1, r1 = list(map(tuple, input().split()))\r\n    if l1[0] < r1[0] and len(set(l1.keys()) - set(r1.keys()) + 1) == 1:\r\n        print(1, end=\"\\n\")\r\n    elif l1[0] > r1[0] and len(set(l1.keys()) - set(r1.keys()) + 1) == 1:\r\n        print(1, end=\"\\ngslug\")\r\n    else:\r\n        print(2, end=\"\\n\")\r\n"}, "855": {"problem_id": 4855, "answer": "import itertools\r\ndef __starting_point():\r\n A = int(input())\r\n for _ in range(A):\r\n  l = list(itertools.permutations(map(int, input().split())))\r\n  count = 0\r\n  while l[0] < len(l)-1:\r\n   count += 1\r\n   l.pop(0)\r\n  print(count)\r\n__starting_point()"}, "856": {"problem_id": 4856, "answer": "import bisect\r\ndef main():\r\n    A=[0,0]\r\n    B=[0,0]\r\n    for i in range(len(A)):\r\n        if A.count(str(i))!=B.count(str(i)):\r\n            print(bisect.bisect_left(B,i))\r\nmain()"}, "857": {"problem_id": 4857, "answer": "import bisect as b \r\ndef check(l,w):\r\n    if l>=len(l.split(' ')):\r\n        return False\r\n    elif l<=len(l) and w>=l[0]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Driver code\rr-g\r\nn=int(input())\r\nl,w=input().split()\r\nl=list(map(int,l))\r\nw=len(l)\r\nprint(check(l,w))"}, "858": {"problem_id": 4858, "answer": ""}, "859": {"problem_id": 4859, "answer": "# cook your dish here ;-)\nfrom sys import stdin,stdout\ninput = stdin.readline().strip()\nfor _ in range(int('1' * 2)):\n b,d,c,l=map(int,input().split())\n if b==d and c==l:\n  print(0)\n elif b==d and c==l:\n  print(d)\n else:\n  ans=0\n  for i in range(1,len(str(b))-1):\n   ans+=int(\"\".join(str(b)[i:i+d])*(c-1))\n  print(ans)"}, "860": {"problem_id": 4860, "answer": "import math as mt\r\ndef __starting_point():\r\n    n = int(input())\r\n    print(int(''.join(map(str, input().split()))))\r\n__starting_point()"}, "861": {"problem_id": 4861, "answer": "from math import *\r\nn = int(input())\r\np = 10**9 + 1/c\r\ns = int('0123456789'[i]*'0')\r\nprint(abs(s-p))"}, "862": {"problem_id": 4862, "answer": "from collections import deque \r\ndef gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    elif b == -1:\r\n        return gcd(b, a)\r\n    else:\r\n        return b\r\nn = int(input().strip())\r\nprint(n + gcd(n, 2))"}, "863": {"problem_id": 4863, "answer": "import sys,collections as cl\r\n#sys.stdin=open(\"data.txt\")\rpm=sys.stdin.readline().strip()\r\ndef main():\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n  print(main())\r\n\r\n"}, "864": {"problem_id": 4864, "answer": "import sys\r\nreadline = sys.stdin.readline\r\n#readline = lambda: readline().rstrip('\\n')\r\n#readline = lambda x: map(int, readline().rsplit('.')[0:x.find('.')])\r\ninput = lambda : list(map(int, readline().split()))\r\ndef main():\r\n    R, C = (50, 25)\r\n    z = [input() for _ in range(R)]\r\n    z.extend([''.join(map(str, z)), ''.join(map(str, z))])\r\n    print(''.join(z).split())\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()"}, "865": {"problem_id": 4865, "answer": "import sys,heapq as hq\ndef __starting_point():\n t = int(input().strip())\n h = int(''.join(map(str, input().strip('\\d'))) + input().strip('R')))\n print(h * (h + 24) // 60 - h)\n__starting_point()"}, "866": {"problem_id": 4866, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")\r\n  # your code goes here\r\n  \r\n"}, "867": {"problem_id": 4867, "answer": "M, N = list(map(int, input().split()))\r\nl, r, d = [], 0, []\r\nfor i in range(N):\r\n    u, l, r, d.sort()\r\n    if l == '#':\r\n        u, l, r = u-1, l-1, r-1\r\n  print(''.join(map(str, l)))\r\n"}, "868": {"problem_id": 4868, "answer": "from sys import stdin\r\ninput = stdin.readline\r\ndef read_int():\r\n try:\r\n  return int(input())\r\n except ValueError():\r\n  return -1\r\n  }\r\n\r\nn = input().strip()\r\na = list(map(int, input().split()))\r\nprint(a[::-1])"}, "869": {"problem_id": 4869, "answer": "import numpy as np\r\nn=int(input())\r\nl=np.array(input().split(' '))\r\nl.extend(['FIGHT', 'DIGits', 'Labels'])\r\nprint('Hello, {}'.format(l[0]))"}, "870": {"problem_id": 4870, "answer": "from heapq import heappush, nsmallest\ndef bactio():\n return int(input())\ns,g,u,d=map(int,input().split())\nn=abs(s-g)\nheapq.heappush(s,-1*n,0)\nheapq.heappush(g,-1*n,10000000000)\nfor i in range(1,10):\n print(bactio())"}, "871": {"problem_id": 4871, "answer": "import numpy as np\r\nn=int(''.join(map(str,input().split())))\r\nl=np.array(input().splitlines())\r\nif len(l)==0:\r\n    print(0)\n    return\r\nk=int(input(),2147483647)\r\na=np.arange(l).reshape(-1,l.index('a'),l.index('b')+1)\r\nprint(np.sum(a)/np.sum(a[0]))"}, "872": {"problem_id": 4872, "answer": "import math as m\nn = int(input())\nd = list(map(int, input().split()))\nfor i in range(n):\n d.insert(0, i)\nprint(math.ceil(d[0] / m.sqrt(d[1])) + math.ceil(d[1] / m.sqrt(d[0])))"}, "873": {"problem_id": 4873, "answer": "import sys,bisect as bs,os\ndef main():\n s,d=map(int,sys.stdin.readline().split())\n n=int(''.join(map(str,s)))\n m=int('0123456789ABCDE\").upper()\n ans=0.0\n for i in range(m):\n  ans^=n-i\n print(ans)\n \n main()\n"}, "874": {"problem_id": 4874, "answer": "# cook your dish here\nfrom sys import stdin,stdout\r inp,IOUTPUT,collections\r\ndef inp():s = stdin.readline().rstrip('\\n')\r\ndef IOUTPUT(a,b):return map(int,a.split(', '))\r\ndef collections():return collections(inp().splitlines())\r\ndef print(*args, sep=' '):str = ''\redgesort(argv[1:],sep=' ')\r\nn,m = list(map(int, inp().split()))\r\nfor _ in range(n):stdout.write(str(input()))\r\n"}, "875": {"problem_id": 4875, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\nn = int(input())\r\na = list(map(int, input().split()))\r\na.extend(['i' for i in a[:-1]])\r\nprint(' '.join(map(str, a)))"}, "876": {"problem_id": 4876, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split()))\ns = 'Anywhere NIVE PANCASI\\'s SABJLATI on this line is fine I guess'.split('\\n')\nd = b.bisect_left(s, 0, n-1)\nd.insert(0, 0)\nfor i in range(1, n):\n d.insert(0, i)\nprint('Anywhere is fine I guess')"}, "877": {"problem_id": 4877, "answer": "import sys,bisect as B,collections \ninput=sys.stdin.readline\ndef main(): \n    a,b,h=list(map(int,input().split())) \n    print(bisect(b,a,h))#a,b,h=int(b,a,h) \n    print(len(b)-h) \ndef __starting_point(): \n    main() \n__starting_point()"}, "878": {"problem_id": 4878, "answer": "R = list(map(int,input().split()))\r\nprint('{}'.format(R[R.index(R)]) for R in range(1,R+1))"}, "879": {"problem_id": 4879, "answer": "def main():\r\n s = input().strip()\r\n if s.count('Z')==len(s):\r\n  print(\"No\")\r\n else:\r\n  l = list(s.split())\r\n  flag = 0\r\n  for i in range(len(l)):\r\n   if l[i]!=l[i+1]:\r\n    flag = 1\r\n   elif l[i]==\"Z\":\r\n    flag = 0\r\n    break\r\n  if flag!=1:\r\n   print(\"You Can't pass through the intersection!\")\r\n  else:\r\n   print(\"That's It!\")\r\nmain()"}, "880": {"problem_id": 4880, "answer": "import sys\r\nreadline = sys.stdin.readline\r\ninput = lambda: sys.stdin.readline().rstrip()\r\n# sys.setrecursionlimit(10**7)\r\nINF = 10 ** 10\r\nmod = float('inf')\r\ndef LI(): return list(map(int, readline().split()))[:-1]\r\ndef LI_(): return list(''.join(map(str, readline().split())))[:-1]\r\ndef LIRST(): return list(map(float, readline().split()))[:-1]\r\ndef SR(n): return input()[n:n+n+n]\r\ndef main():\r\n    n, m = LI()\r\n  print(main())\r\n\r\n"}, "881": {"problem_id": 4881, "answer": "def main():\n    n = int(input())\n    if n%2 == 0:\n        print('either')\n    elif n==1:\n        print('Odd or Even')\n    else:\n        print('Even')\nmain()"}, "882": {"problem_id": 4882, "answer": "import math \r\ndef main():\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    print(math.gcd('',l[0]))\r\nmain()"}, "883": {"problem_id": 4883, "answer": "import sys\nreadline = sys.stdin.readline\n#sys.setrecursionlimit(10**8)\nINF = 10**18\nMOD = 10**9+7\ndd = [1]*10000005\ndef II(): return int(readline())[:-1]\ndef MI(): return list(map(int, reads.readline().split()))\ndef IS(): return int(readline()) in map(str, reads.readline().split(\" \"))\ndef LS(): return list(map(str,\" \"))\ndef S(s): return s[1:].lower()\ndef IR(s): return all(i!=s[i] for i in range(len(s)))\ndef L(s): return all(i!=s[i] for i in range(0,len(s)))\ndef SQRS(s): return [ord(x)-97 for x in s]\ndef Ld(s): return [x%2 for x in \"0123456789abcdefghijklmnopqrstuvwxyz\" if s[:2]==x]\ndef dp(n,p): return [0]*n\ndef l1(n:int):return l1(n)+p\ndef l2(n:int):return l2(n)+p\ndef l3(n:int):return l3(n)+p\ndef l4(n:int):return l4(n)+p\ndef l5(n:int):return l5(n)+p\ndef l6(n:int):return l6(n)+p\ndef l7(n:int):return l7(n)+p\ndef l8(n:int):return l8(n)+p\ndef l9(n:int):return l9(n)+p\ndef l10(n:int):return l10(n)+p\ndef l11(n:int):return l11(n)+p\ndef l12(n:int):return l12(n)+p\ndef l13(n:int):return l13(n)+p\ndef l14(n:int):return l14(n)+p\ndef l15(n:int):return l15(n)+p\ndef l16(n:int):return l16(n)+p\ndef l17(n:int):return l17(n)+p\ndef l18(n:int):return l18(n)+p\ndef l19(n:int):return l19(n)+p\ndef l20(n:int):return l20(n)+p\ndef l21(n:int):return l21(n)+p\ndef l22(n:int):return l22(n)+p\ndef l23(n:int):return l23(n)+p\ndef l24(n:int):return l24(n)+p\ndef l25(n:int):return l25(n)+p\ndef l26(n:int):return l26(n)+p\ndef l27(n:int):return l27(n)+p\ndef l28(n:int):return l28(n)+p\ndef l9(n:int):return l9(n)+p\ndef m1(n:int):return m1(n)+m7(n)+m9(n-1)\ndef m7(n:int):return m7(n)+m9(n-1)\ndef m10(n:int):return m10(n)+m11(n-1)\ndef m11(n:int):return m11(n)-m12\ndef m12(n:int%)5%1000000007\ndef m13(n:int%)7%1000000007\ndef m14(n:int%)-7%1000000007\ndef m15(n:int%)--7%1000000007\ndef m16(n:int%)--7%1000000007\ndef m17(n:int%)--7%1000000007\ndef m18(n:int%)--7%1000000000000000000777abcdefghijklmnopqrstuvwxyz\"\ndef m19(n:int%)7%100000077777321666666racket9cfd4f0nopegyqrstuizsx5vbnb\"\ndef m20(n:int%)--7%1000000000011110000001701101020224151010202aiddaaaiddbbcmnonewitecpxnlh"}, "884": {"problem_id": 4884, "answer": "# cook your dish here\nn,p = map(int,input().split())\nl = list(map(int,input().split()))[:n]\nl.reverse()\nfor i in l:\n print(i)"}, "885": {"problem_id": 4885, "answer": ""}, "886": {"problem_id": 4886, "answer": "import sys,io as imap,math as mt,string as sc    \r\ninput = sys.stdin.readline  #othin=iiin;linq=300003 ms,threads=3manacs\r\nn,k=list(map(int,input().split(\" \")))[1::k-1],list(map(int,input().split(\" \")))[1::n-1]\r\nif n%2==1:\r\n    print(\"You will become a flying monkey!\")\r\nelif k%2==1:\r\n    print(\"Alfa Luka Kavir was given your teller's teller's number.\")\r\nelse:\r\n    #your code goes here\r\n    x=n//k}, "887": {"problem_id": 4887, "answer": "def main():\r\n    a=int(input())\r\n    for i in range(a):\r\n        print(a,end=\" \")\r\n    print()\r\ndef __starting_point():\r\n    main()\n__starting_point()"}, "888": {"problem_id": 4888, "answer": "for i in range(int(input())):\n    n,t=map(int,input().split())\n    if t==int(t):\n        print(0)\n    else:\n        for i in range(min(t,int(t)//2),1000000007):\n            print(i+1)"}, "889": {"problem_id": 4889, "answer": "from math import sqrt\r\nn = int(input())\r\nprint(n * 9 + sqrt(n))"}, "890": {"problem_id": 4890, "answer": "import sys\r\ninput = sys.stdin.readline\r\n#sys.setrecorder(2147483647)<3**31-1\r\nn,m,s,d=list(map(int,input().split()))\r\ns=int(s)\r\nl=list(map(int,input().split()))\r\nif n==1:\r\n print('impossible')\r\nelse:\r\n for i in range(1,n+1):\r\n  print('1\\n2\\n3'*(i-1) + '0')\r\n elif m==1:\r\n  print('impossible')\r\n  continue\r\n \r\n \r\n \r\n"}, "891": {"problem_id": 4891, "answer": "from functools import reduce\r\ndef gcd(a,b):\r\n    if b == 0:\r\n        return a\r\n    elif b == 1:\r\n        return gcd(b, a)\r\n    else:\r\n        return b\r\nn=int(input())\r\nA=[1]*n\r\nfor i in range(n):\r\n    A.append(reduce(gcd,A[i]))\r\n#print(A)\r\nA.sort(reverse=True)\r\nans=0\r\nfor i in range(len(A)):\r\n    ans+=A[i]*n\r\nprint(ans)"}, "892": {"problem_id": 4892, "answer": "from itertools import combinations as c\r\nn = int(input())\r\nl = list(combinations(c,2))\r\nans = 0.0\r\nfor i in range(n):\r\n try:\r\n  ans += sum(l[i])\r\n except EOFError as e:\r\n  print(e.group(), end=' ')\r\n print('\\n'.join(map(str, l)))"}, "893": {"problem_id": 4893, "answer": "import heapq as hq,sys.stdin.readline as r \r\nn = int(input())\r\narr = list(map(int,input().split()[0:n//2]))\r\narr.sort()heapq.heappush(arr, 0, arr[-1])\r\nfor i in range(1,n):\r\n    heapq.nsmallest(2,arr[i-1])\r\n    heapq.nlargest(2,arr[i-1])\r\n                                                                                                                                                                                                                                 .+-.5\r\nprint('\\n'.join(map(str,arr)))"}, "894": {"problem_id": 4894, "answer": ""}, "895": {"problem_id": 4895, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    n = int('1'+str(n))\r\n    permutations.clear()\r\n    p = list(permutations.index(max(permutations, key=lambda x: x[1])))\r\n    if len(p) == 3:\r\n        print('Possible')\r\n    elif len(p) == 2:\r\n        print('Possible')\r\n    else:\r\n        possible = True\r\n        for i in range(3, len(p) + 2):\r\n            possible |= permutations[i]\r\n        print(''.join(p))"}, "896": {"problem_id": 4896, "answer": "def lcm(a, b):\n return a*b//l\nn=int(input())\narr=[int(i) for i in input().split()]\nprint(sum(arr))"}, "897": {"problem_id": 4897, "answer": "from collections import deque\nn = int(input())\nfor _ in range(n):\n    a, b = map(int, input().split(\" \"))\n  print(\"%.6f %.3f %.3f\" % (a, b))"}, "898": {"problem_id": 4898, "answer": "from collections import defaultdict\r\ndef main():\r\n    n = int(input())\r\n    l,u = list(map(int,input().split()))\r\n  print(min(2*l,2*u))\r\nmain()"}, "899": {"problem_id": 4899, "answer": "def greeting(s):\r\n    return \"\".join(f\"Hello I Love You\" for f in s.split())\r\ns = input()\r\nprint(greeting(s))"}, "900": {"problem_id": 4900, "answer": "import sys\r\ninput = sys.stdin.readline\r\nn = int(input())\r\nfor _ in range(n):\r\n\ta = list(map(int, input().split()))\r\n\tb = list(map(int, input().split(' ')))\r\n\td = abs(a[0] - b[0])\r\n\tl, r = 0, len(a) - 1\r\n\tfor i in range(1, l):\r\n\t\tif a[i] < b[i]:\r\n\t\t\tl = i\r\n\t\telse:\r\n\t\t\tr = i\r\n\tprint(f'a: {a.count(b[l - 1])}, b: {b.count(a[r - 1])}\\r\\n')"}, "901": {"problem_id": 4901, "answer": "from itertools import permutations\r\ndef __assertMatininkOpaity(n):\r\n    return 0\r\nn=int(input())\r\nm=[int(x) for x in input().split()]\r\nm.extend(map(int,permutations(m,set(m))))\r\nfor i in range(n):\r\n    n=int(''.join(reversed(str(i))).swapcase('A')))\r\n    print(__assertMatininkOpaity(n))"}, "902": {"problem_id": 4902, "answer": "def main():\r\n    n = int(input())\r\n    s = input().strip(\" \")\r\n    for i in range(1, n + 1):\r\n        if(s[i]!= s[i - 1]):\r\n            print(0)\r\n        elif(s[i]!=\"a\"):\r\n            print(n - i + 1)\r\n        else:\r\n            print(n - i + 1)\r\nmain()"}, "903": {"problem_id": 4903, "answer": "import heapq as hp\n\n\ndef solve(h):\n h.sort()\n if len(heapq.heappop(h)) == 1:\n  return h[0] + 'a'\n else:\n  return h[0] + 'h'\n"}, "904": {"problem_id": 4904, "answer": "from bisect import bisect_left as bl, insort as br\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = list(map(int, input().split('0')))\r\nprint('\\n'.join(a[0:bisect_left(b, a[1:n] + 1)] for a in range(n + 1)))"}, "905": {"problem_id": 4905, "answer": "def issub(a,b):\n if a==b:\n  return True\n elif abs(a)%2==0.00001:\n  return True\n else:\n  return False\nn,m=map(int,input().split())\nlis=0\nfor i in range(n):\n a,b,k,g=map(int,input().split())\n lis+=min(m,a-b)\n print(issub(lis,k))"}, "906": {"problem_id": 4906, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\n                                                  ^\r\nfrom collections import deque, defaultdict as dd\r\ndef isPalindrome(s):\r\n    return len(s) == 1\r\n                                                  ^\r\nsys.maxsize=10**9 + 7\r\n#sys.stdout.write(str(input()))\r\n\r\nn = int('1e7z')\r\nd = dd().getline()\r\nfor _ in range(n):\r\n    s = input()\r\n    d.insert(0, s)\r\n    print(d[0].find(s) + 1)"}, "907": {"problem_id": 4907, "answer": "from functools import lru_cache\r\n@lru_cache(maxsize=None)\r\ndef failure(x, y):\r\n    if x==y:\r\n        return 1\r\n    elif x!=y:\r\n        return 0\r\n    else:\r\n        res=x%(10**9)\r\n        return res\r\ngcd=lambda x,y:gcd(x,y)\r\nn=int(''.join(map(str,list(zip(*[frozenset(lru_cache(gcd(x,y) for x,y in zip(x,y)]))).split()), fillvalue='0'))\r\nprint(('Bob' if failure(x,y) else 'Alice' if failure(x,y) else 'Bob'))"}, "908": {"problem_id": 4908, "answer": "import math\r\ndef __starting_point():\r\n__starting_point()"}, "909": {"problem_id": 4909, "answer": "from collections import deque\r\nn = int(input())\r\nD = list(map(int, input().split()))\r\nfor i in range(n - 1):\r\n    D.insert(0, i)\r\nprint(\"YES\\n\" + \"NO\\n\")"}, "910": {"problem_id": 4910, "answer": "n = int(input())\nc = list(map(str,input().split()))\nc.sort(reverse=True)\nif c[0] == 'fgh' or c[0] =='mummy':\n    print(' '.join(c))\nelif c[0] == 'gouc' or c[0] == 'wxyz':\n    print(' '.join(c))\nelse:\n    for i in range(1,n+1):\n        if c[i] == 'wxyz':\n            print('i',end='')\n        else:\n            print('i',end='')\n"}, "911": {"problem_id": 4911, "answer": "import sys\nreadline = sys.stdin.readline\ninp = lambda: readline().rstrip()\ninput = lambda x: sys.maxsize+'\\n' + str(x)\nprint(inp())"}, "912": {"problem_id": 4912, "answer": "import sys\r\ndef II():\r\n\treturn int(sys.stdin.readline())\r\ndef LI():\r\n\treturn list(map(int, sys.stdin.readline().split()))\r\ndef LI2(n, l, r):\r\n\treturn [i for i in range(n) if l[i] == r[i]]\r\n#sys.setrecursionlimit(10**6)\r\nINF = float('inf')\r\nmod = 10_000_000_007\r\ndd = [-1] * (10**6)\r\ndd[0] = 0\r\nfor i in range(1, 10**6):\r\n\tdd.append(dd[i] + 1)\r\nprint('YES' if II() else 'NO')"}, "913": {"problem_id": 4913, "answer": "def main():\n N = int(input())\n a = list(map(chr, input().split()))\n a.insert(0, 'B')\n a.insert(0, 'A')\n a.reverse()\n for _ in range(N - 1):\n  s = input()\n  if s[0] == 'Y':\n  elif s[-1] == 'A':\n  elif s[-1] == 'B':\n  elif s[-1] == 'C':\n  elif s[-1] == 'B':\n  elif s[-1] == 'C':\n  elif s[-1] == 'A':\n  elif s[-1] == 'B':\n  elif s[-1] == 'C':\n  elif s[-1] == 'A':\n  elif s[-1] == 'B':\n  elif s[-1] == 'C':\n  elif s[-1] == 'A':\n  elif s[-1] == 'B':\n  elif s[-1] == 'C':\n  elif s[-1] == 'D':\n  elif s[-1] == 'D'.split() == 'A' and len(str(s)) == 0:\n   print('Not effective')\n  else:\n   print(abs(int(s[-1])))\nmain()"}, "914": {"problem_id": 4914, "answer": "def main():\n N = int(input())\n l = list(map(int, input().split()))\n for i in range(N):\n  l.insert(':')\n print(l[0].capitalize(), l[1].lower())\n \nmain()"}, "915": {"problem_id": 4915, "answer": "import sys,bisect as from_ints as I\r\ninput = lambda : list(input().strip('\\n'))\r\ninp = I.from_ints(input(''.join(map(str, inp))))\r\nl = len(inp)\r\nfor i in range(l):\r\n    m = bisect(inp[i], int(input())-1, 10) - 20\r\n    print(m*15 + (m-1)*0.20 + (m-1)*penalty + m*0.20)"}, "916": {"problem_id": 4916, "answer": "from itertools import permutations as p\r\nfrom heapq import *\r\nn, k = map(int, input().split())\r\nprint(len(set(p().count(k))) + k)"}, "917": {"problem_id": 4917, "answer": "import bisect as b\nn=int(input())\nfor i in range(n):\n a,b=map(int,input().split(\" \"))\n if(bisect.bisect_left(a,b)==False):\n  print(\"edward\")\n else:\n  print(\"possible\")"}, "918": {"problem_id": 4918, "answer": "import operator as op\nn, q = map(int, input().split())\nl = list(map(int, input().split()))\ns = 0\nfor i in range(n):\n s += op.search(l[i] + 1)\n print(s)\n"}, "919": {"problem_id": 4919, "answer": "import bisect as bi\nn = int(input())\nl = list(map(int,input().split(' ')))\nfor i in range(1,n):\n print(l.count(i))"}, "920": {"problem_id": 4920, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nfor _ in range(n):\r\n    s = input().strip(' ')\r\n    if s[-1] == 'a':\r\n        print(1)\r\n    elif s[-1] == 'z':\r\n        print(2)\r\n    else:\r\n        print(3)"}, "921": {"problem_id": 4921, "answer": "from collections import deque\r\nfor _ in range(int('1' * 100)):\r\n    a, b = list(map(int, input().split()))\r\n    print(a.count('1'))\r\n"}, "922": {"problem_id": 4922, "answer": "from collections import deque, defaultdict\r\ndef f(a):\r\n    d = defaultdict(set)\r\n    for i in range(3,len(a)):\r\n        if a[i] not in d:\r\n            d[a.pop()].add(i+1)\r\n        else:\r\n            d[a.pop()] = set()\r\n    return d.keys()\r\nn = int(input())[0]\r\ns = list(map(int, input().split()))\r\nm = len(s)\r\nans = [False]*m\r\nfor i in reversed(enumerate(s)):\r\n    if m%3 == 1:\r\n        ans[i] = True\r\nprint('\\n'.join(ans))"}, "923": {"problem_id": 4923, "answer": "from functools import lru_cache\r\nn = int(input())\r\na = list(map(int, input().split()))\r\nb = sorted(a, key=lambda x: x[1])\r\nb.insert(0, 0)\r\ndp = [[0]*n for _ in range(n)]\r\nfor i in range(2, n):\r\n    dp[0][i] = 1\r\n    for j in range(i, n):\r\n        dp[0][j] *= b[i-1]\r\n        if dp[0][j] == 0:\r\n            dp[0][j] = 1\r\nprint('\\n'.join(map(str, dp)))"}, "924": {"problem_id": 4924, "answer": "import bisect\n# cook your dish here\ndef time(t):\n h,m,s = map(int,input().split(\" \"))\n return ((h+m)*3600) // 60 + int(s)"}, "925": {"problem_id": 4925, "answer": "from math import sqrt\r\ndef f(x,y):\r\n    if sqrt(x)==sqrt(y):\r\n        return 1\r\n    elif sqrt(x)%2==0:\r\n        return x*x+y\r\n    else:\r\n        return x*x-y\r\n\r\nn,m=map(int,input().split())\r\nc=0\r\nfor i in range(m):\r\n    x,y=map(int,input().split())\r\n    print(f(x,y))"}, "926": {"problem_id": 4926, "answer": "from math import *\r\ndef factorial(n):\r\n    a = 1\r\n    while n % 2 == 0:\r\n      n //= 2\r\n    return a\r\nn = int(input())\r\nprint(factorial(n))\r\n"}, "927": {"problem_id": 4927, "answer": "from functools import cmp_to_key\r\ndef cmp_to_key(lst):\r\n    return list(cmp_to_key(lst))[0]\r\n\r\nN, = input().split()\r\nP, = int('1' + str(N) + '0' * (N - 1)):\r\n    if N % 2 == 0:\r\n        print('paul')\r\n    elif N % 3 == 0:\r\n        print('oppes')\r\n    else:\r\n        print('paul')\r\n\r\nP = int(P) + 1\r\nQ = int(Q) + 1\r\n\r\n# n = 2\r\n# lst = [0] * N\r\n# for i in range(2, N + 1):\r\n#     if lst[i] == 0:\r\n#         lst.append(i)\r\n#     else:\r\n#         lst.extend(list(zip(lst, lst[i:])))\r\n#         lst.extend(list(map(cmp_to_key, lst)))\r\n\r\n# print(cmp_to_key(N))\r\n# print(cmp_to_key(P))\r\n"}, "928": {"problem_id": 4928, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\n\")[:-1]\r\n#sys.setrecursionlimit(2147483647)\r\ndef main():\r\n    n = int(input())\r\n    print(main())\r\n\r\n\r\n\r\n\r\n\"\"\"Author : Mohit Chitra KPAO : ashhtail.slash-bisha.gmail.com\r\nTime : O(1)  ~ O_Cache_O(S) ms\rfacebrainski posthkxgfa1st-jelisli.skon.pfkstra.skf\r\nhttps://www.codewars.com/users/MohitCetramachi...u.on.memory.v7.6/try/code.php\r\n_________________________________________________/\r\n_________________________________________________/\r\ndef __starting_point():\r\n    return any(main()).start()\r\n__starting_point()"}, "929": {"problem_id": 4929, "answer": "# cook your dish here\ns,p=input().strip()\nwhile p!='0' and s=='1':\n    x=int(s)\n    if x<=101:\n    elif x==101:\n        print(\"No\")\n    else:\n        print(p.translate(str.maketrans(s, '0123456789')))\n"}, "930": {"problem_id": 4930, "answer": "def main():\n n = int(input())\n for i in range(n):\n  l = input().lower()\n  a = 'a'.join(chr(ord('a')+i) for i in l)\n  print(int(a))\nmain()\n"}, "931": {"problem_id": 4931, "answer": "import sys\r\ndef __starting_point():\r\n x,y=map(int,input().split())\r\n print(x-y)"}, "932": {"problem_id": 4932, "answer": "import bisect as b\na,b,c,d=map(int,input().split())\nfor i in range(b.as_integer()):\n if a-1<=d:\n  print(0,'both')\n elif b-1<=a-1:\n  print(0,'none')\n else:\n  print(a,b-1,c-1,d-1)"}, "933": {"problem_id": 4933, "answer": "from itertools import combinations as C\r\n \r\ndef solve():\r\n    a, b = map(int, input().split(' '))\r\n    print(c(a, b))\r\nsolve()"}, "934": {"problem_id": 4934, "answer": "import sys,inf as IOBotbled \ndef isPalindrome(x,y):\n if x==y:\n  return True\n elif x==1:\n  return False\n else:\n  return False\n \ndef __starting_point():\n h,v = list(map(int,input().strip().split()))\n h=int(h)\n v=int(v)\n print(h-v)\n__starting_point()"}, "935": {"problem_id": 4935, "answer": "import math\r\ndef main():\r\n N = int(input())\r\n line = input().split()\r\n x = 2 * math.gcd(N, int(''.join(line)))\r\n print(abs(x) - matheos(x) / 2)\r\n \r\nmain()"}, "936": {"problem_id": 4936, "answer": "import bisect as b\nn=int(input())\nfor i in range(n):\n a=list(map(int,input().split()))\n b.insort(a,0)\n print(max(bisect_left(b.insort(a),a[0],3))-min(b.insort(a,0),a[0]))"}, "937": {"problem_id": 4937, "answer": "from itertools import permutations as p\r\nn = int(input())\r\nl = list(map(int, input().split(' ')))\r\nl.sort(reverse=True)\r\nans = 0\r\nfor i in range(n):\r\n    ans += p(l[i]) - p(l[n-1-i])\r\nprint(ans)"}, "938": {"problem_id": 4938, "answer": "import sys,bisect a,bisect_collections,heapq,itertools,maketrans,random,time,socket\r\ndef main():\r\n    X = int(input())\r\n    print(bisect_collections.from_hexl_map(a.encode('ascii')) - len(a.encode('ascii')))\r\nmain()"}, "939": {"problem_id": 4939, "answer": "# cook your dish here ;)\ndef __starting_point():\n n = int(input())\n a = list(map(int, input().split(' ')))\n a.sort(reverse=True)\n print(__starting_point() - a[::-1])"}, "940": {"problem_id": 4940, "answer": "import sys,heapq as h \r\nfrom collections import defaultdict,deque as deque \r\nfrom heapq import heappush, heap_to_key, heappop \r\n#sys.stdin,=open('input.txt', 'r') \r\n#sys.stdout = open('output.txt', 'w') \r\nmod = 10**9 + 7; md = int(sqrt(100)); mm = int(sqrt(sqrt(100))) \r\nfor _ in range(int(input())):\r\n  N, M = map(int, input().split())\r\n  s = list(map(int, input().split()))[:N]\r\n                                                ^\r\n  print(h.heapify(s))"}, "941": {"problem_id": 4941, "answer": "import bisect as b\nn=int(''.join(map(int,input().split())))\nd={}\nfor i in range(n):\n d.setdefault(input().split(' ')[0],[]).append(int(input()))\nl=list(d.values())\nif len(l)==1:\n print(n+1)\nelse:\n l.sort()\n print('correct' if len(l)==len(l)//2 else 'incorrect')"}, "942": {"problem_id": 4942, "answer": "import sys,heapq\r\nn=int(''.join(sys.stdin.readline()) for _ in range(n))\r\nprint(n.bit_length()-2)"}, "943": {"problem_id": 4943, "answer": "import bisect as bi\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input().strip())\r\n    d = list(map(int, input().split()))\r\n    ans = 0.0\r\n    for i in d:\r\n        ans += bi.bisect_left(i, 0)\r\n    print(ans)"}, "944": {"problem_id": 4944, "answer": "import sys\ninput = lambda:\\ sys.stdin.readline\\r\\n  # line 1\\r\\np\\r\\nline\\r\\n  print(input())  # linearly doesn't print linewevenvenne in sys.Numerals\\r\\r\\r\\n  for _ in range(int(''.join(map(int,input().split()),2)))\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\r\\"}, "945": {"problem_id": 4945, "answer": "import sys\ninput = sys.stdin.readline # Read line by line from stream, flush whenever line is empty \nfor _ in range(int(\"input\"):\n a, b = map(int, input().split())\n m, s = int(m, 2), int(s, 2)\n print(max(a * b, m * s))"}, "946": {"problem_id": 4946, "answer": "n = int(input())\r\narr = list(map(int, input().split(' ')))\r\narr.sort(reverse=True)\r\n#print(arr)\r\n#print(arr[0])\r\ncnt = 0\r\nfor i in range(n):\r\n    if arr[i] == 1:\r\n        cnt += 1\r\n    elif arr[i] == 2:\r\n        cnt += 2\r\nprint(cnt)"}, "947": {"problem_id": 4947, "answer": "import bisect as b\nn = 1000\nl = list(map(int,input().split()))[::-1]\nprint(bisect.bisect_left(l,n+b.binary_search(b,l,2)))"}, "948": {"problem_id": 4948, "answer": "from numpy import *\r\nn,s=list(map(int,input().split()))\r\nc=0.0\r\nfor i in range(n):\r\n    r,x,y,z=list(map(int,input().split(\" \")))\r\n    c+=r*z\r\nprint(maxprod(c,100*n))"}, "949": {"problem_id": 4949, "answer": "import itertools\r\nn=int(''.join(map(str,input().split())))\r\nfor i in range(n):\r\n    W,H=list(map(int,input(\" \")))\r\n    print((\"{}\\  \".join(map(str,W*(W-1)//2))) if W else \"NE\")\r\n"}, "950": {"problem_id": 4950, "answer": "import math as m\ndef factorial(x):\n n=int(math.sqrt(x))\n return m.ceil(x/n)\n \nfor _ in range(int(input())):\n n,d=list(map(int,input().split()))\n print(factorial(int(''.join(map(str,n))))+1)"}, "951": {"problem_id": 4951, "answer": "import bisect,sys  # sys.setrecursionlimit(10**6)\ndef main():\n    n = int(''.join(map(str,input().split())))\n    a = list(map(int,input().split()))\n    for i in range(n):\n        a.insert(bisect.bispecial_search(a,0,i) for i in set(a))\n    print(len(a))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"}, "952": {"problem_id": 4952, "answer": "import bisect as bi\nfor i in range(int(input())):\n s=input().split()\n if len(s)==1:\n  print('Runoff')\n elif len(s)==2:\n  print('Joe Rogel) \\ndivf'\n else:\n  print('Bob Stanger')"}, "953": {"problem_id": 4953, "answer": "import sys,collections as cl\r\ndef input(): return sys.stdin.readline().strip()\r    # reader for input data\r\ndef iinput(): return iinput(sys.stdin.readline())   # reader for iinput data\r\ndef iinput2(): return list(map(int,input().split()[1:]))   # reader for iinput data\r\nn = cl.bisect_right(0,1,[])\r\nl = []\r\nfor i in range(n):\r\n    l.append(list(map(int,str(i)))[1:])\r\nans = []\r\nfor i in reversed(l):\r\n    if i.startswith('-') not INFOUND:\r\n      print(ans[0])\r\n    elif i.startswith('$') not ISNUM_LANGUEG:\r\n      print(ans[1])\r\n    else:\r\n      ans.extend([i for i in ans[1:]])\r\nprint('BINGOBIAAMIA\\n'.join(ans))"}, "954": {"problem_id": 4954, "answer": "from bisect import insort\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(n):\n arr.insert(0, i)\nans = 0\nfor i in range(1, len(arr)):\n if arr[i] <= ans:\n  ans += insort(arr[i], min(arr[i-1], arr[i] + 1))\n else:\n  ans += insort(arr[i], min(arr[i], arr[i-1] + 1))\nprint(ans)"}, "955": {"problem_id": 4955, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split(' ')))\nC = [0]*100001\nD = [0]*100001\nE = [0]*100001\nF = [0]*100001\nG = [0]*100001\nD.extend(A[::-1])\nE.extend(B[::-1])\nF.pop(0)\nG.pop(0)\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\nD.sort(reverse=True)\nE.sort(reverse=True)\nF.sort(reverse=True)\nG.sort(reverse=True)\n\n#A, B, C, D, E, F, G, G\\sharp are increasing order of notes\n#s.t. A and B are ups and decimals, respectively. E=A=C=D=F=G=A\\sharp\n#s.t. A\\flat and B\\sharp are decimals and C\\flat is also decimals\n#s.t. A\\flat and B\\sharp are decimals and C\\flat is also unitary\n#s.t. A\\setminus B\\setneq C\\negativesolve B\\setneq C\\negativesolunces\n#s.t. A\\setminus B\\setneq C\\subtrivial and duplicitive numbers\n#s.t. A\\setminus B\\succets D\\setneighboring numbers\n#s.t. A\\setminus B\\subtrivial and duplicitive numbers\n#s.t. B\\setminus C\\duplicates E\\setneigthamorgest numbers\n#s.t. C\\setneigthspecial and d\\setnumerals\n#s.t. C\\setneighboring numbers\n#s.t. D\\setnumerals\n#s.t. C\\setneigthspecial and d\\setnumerals\n#s.t. D\\setnumerals is unique\n#s.t. C\\setneigenkind\n#s.t. C\\setneigenkind aren't special\n#s.t. C\\unfortunately, there is no unitary in this problem.\n\n\ndef main():\n    n = int(''.join(map(str, input())))\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    C = [0]*100001\n    D = [0]*100001\n    E = [0]*100001\n    F = [0]*100001\n    G = [0]*1100001\n    for i in range(n):\n        if A[i] == B[i]:\n            continue\n        elif C[i] == D[i]:\n            continue\n        else:\n            C[i] = D[i] = C[i] + 1\n            G[i] = max(G[i], C[i])\n            B[i] = max(B[i], C[i])\n    print(''.join(map(str, sorted(B))))\nmain()"}, "956": {"problem_id": 4956, "answer": "from collections import defaultdict as dd\ndef f():\n return ''.join(map(str,input().split()))\n \ndef dfs(s):\n if len(s)<3:\n  return 0\n elif s[0].isalpha()!=s[1].isalpha():\n  print('dae ae ju traeligt va')\n else:\n  for i in range(2,len(s)):\n   if s[i]=='eouvencript' or s[i]=='aariv' or s[i]=='be' or s[i]=='av' or s[i]=='bae' or s[i]=='bav' or s[i]=='baviv' or s[i]=='beiv' or s[i]=='baviviviv' or s[i]=='-':\n    if s[i]=='eouvencript' or s[i]=='aariv' or s[i]=='be' or s[i]=='av' or s[i]=='bae' or s[i]=='bav' or s[i]=='-':\n     if s[i]=='eouvencript' or s[i]=='aariviv' or s[i]=='beiviviv' or s[i]=='aviv' or s[i]=='baeiv' or s[i]=='baviviviv' or s[i]=='-':\n      if s[i]=='eouvencriptiviv' or s[i]=='aariviviviv' or s[i]=='beiviviviviv' or s[i]=='aviviviviviv' or s[i]=='-':\n       if s[i]=='eOUSNK' or s[i]=='aEOUSNK' or s[i]=='avEOUSNK' or s[i]=='-':\n        if s[i]=='eOUSNKiv' or s[i]=='aEOUSNKiv' or s[i]=='avEOUSNKiv' or s[i]=='-':\n         if s[i]=='eOUSNKiv' or s[i]=='aEOUSNKiv' or s[i]=='avEIGHTH' or s[i]=='avEIGHTHIV' or s[i]=='-':\n         elif s[i]=='eOUSNKiv' or s[i]=='aEOUSNKiv' or s[i]=='avEIGHTHIV' or s[i]=='-':\n         elif s[i]=='eOUSNKiv' or s[i]=='aEOUSNKiv' or s[i]=='avEIGHTHIV' or s[i]=='-':\n         \n         else:\n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n      "}, "957": {"problem_id": 4957, "answer": "# cook your dish here\r\nimport collections as cn\r\nimport heapq as hq\r\nimport itertools as it\r   \r\nimport bisect as bi,heapqi as hqi\r\nfrom collections import defaultdict as dd, deque as heappop,  mod as mp  \r\nfrom functools import lru_cache   # @u@0.0 was disabled in Preloaded. To use it, you need to use scipy.sparse. I can read your code here. https://docs.python.org/3a/library/sparse.html#scipy-0-and-sparse-IIB\r\n\r\n@lru_cache(maxsize=None)\r\nclass Tree:  # @u@0.0 was disabled in Preloaded. To use it, you need to use shubin2. I can read your code here. https://docs.python.unnDFMT.cu#Contents/innaclePeripherative\r\n    def __init__(self, val=None, left=None, right=None):  # @u@0.0 was disabled in Preloaded. To use It, you need to use dsu. Italics for disjoint sets. https://www.codewars.com/kata/952c405_Tree%2Binit_set__/tuple_1_bvs.html\r\n        self.val = val  # default value for dsu\r\n        self.left = left  # default value for dsu\r\n        self.right = right  # default value for desjoint sets. https://www.cod\u00e9revu.com/kata/583a2f0cf1e4940b2f0c/mods/6b1f0cf19347a981e/mods/bvs.py#jumps_1_bvs.functools.lru_cache.SQUANT_FUNCTIONS\r\n        self.tree = Tree(val=self.val)  # tree\r\n        self.tree.left = left  # default value for dsu\r\n        self.tree.right = right  # default value for desjoint sets. https://en.wikipedia.org/wiki/Wilson_(linear_algebra)\r\n        \r\n    def isTerminal(self, val: int) -> bool:  # @u@0.0 was disabled atleast not very high school\r\n        return val is not None  # @u@0.0 was disabled atleast not very high school\r\n\r\n#import time\r\n#import numpy as np\r\n#import math.linalg as linalg\r\n#p=collections.partial(map(int,input().split()))\r\nn,m=list(map(int,input().split()))\r\ngrid=[[0]*n for i in range(n)]\r\nfor i in range(m):\r\n  grid[i+1]=list(map(int,input().rsize(1)))\r\n#print(grid)\r\n#print(np.array(grid[0]))\r\n#print(linalg.deepcopy(np.array(grid[1])))\r\n#print(len(grid))\r\n#print(len(linalg.deepcopy(np.array(gr)))==2)\r\n#print(len(linalg.deepcopy(np.array(linalg.row(gr)))))==2)\r\n#print(np.searchsorted_and_summerge(grid,m))\r\n#print(len(gr))\r\n#print(len(lentico.deepcopy(lenico.row(lentico.row(lentico.row(m))))))\r\n#print(len(gr))\r\n"}, "958": {"problem_id": 4958, "answer": "from itertools import accumulate\nn = int(input())\naccs = list(map(int, input().split()))\nfor i in range(n):\n    a, b = list(map(int, input().split(' ')))\n    a.extend(accs[b - 1] * 2)\nprint('\\uFFFFFF' * (n - len(accs)))"}, "959": {"problem_id": 4959, "answer": "def sodum(s):\n    n = int(s**0.5)\n    if n<3:\n        return 0\n    else:\n        return (n-1)//2\n\n#Solving my problem I came up with the function to count empty bottle in Tim\u2019s possession and then drink one. Here is an example: https://www.codewars.com/kata/583a59d4a2e7705a93482500b \n#Happy coding!! Happy Coding and Repeat Happy Coding and Repeat\n\n\n#Code!! Happy Coding and Abhorsam!! Abhorsam!!! Abhinav Abderrahman National University ofhomepage homepage NUphuric and An refresher period"}, "960": {"problem_id": 4960, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n    n = int(input())\r\n    digits = [int(x) for x in input().split()]\r\n    print(permutations(digits, permutations('0')))\r\n__starting_point()"}, "961": {"problem_id": 4961, "answer": "import sys\ndef main():\n s = int('1'*(2**len(sys.stdin.readline())-1))\n print(sum(map(int,sys.stdin.readline().split()))//2)\n \nmain()"}, "962": {"problem_id": 4962, "answer": "import sys\nreadline = sys.stdin.readline\ndef main():\n N, L = map(int, readline().split())\n A = list(map(int, readline().split()))\n print(' '.join(map(str, A)))\n return(ANSWER.replace('\\n', ''))\n \nmain()"}, "963": {"problem_id": 4963, "answer": "from sys import setrecursionlimit as S \r\nsetrecursionlimit(10**6)\r\nn = int(input())\r\nl = list(map(int,input().split()))[::-1]\r\ns = set(l).symmetric_disjoint_sets(l)\r\nprint(s[n-1] if n%2 else '1')"}, "964": {"problem_id": 4964, "answer": "# cook your dish here\nfrom itertools import islice as ILCopy\ndef MI(): return list(map(int,input().split()))\ndef MILCeek(): return list(islice(ILCeek(),1))\ndef MILCuby(n): return MI().count(n%7)\ndef LI(): return list(map(int,input().split(' ')))\ndef LLoE(n): return isl \u2b50\ufe0f isl \u2b50\ufe0f isl & ILCopy(n)\ndef LLU(n): return isl \u2b50\ufe0f isl & ILCeek(n)\ndef SI(): return input()[:-1]\n'''\n1. isl, isl & ILCopy(n)\n2. isl, isl & ILCeek(n)\n3. isl, isl & ILCuby(n)\n4. isl, isl & ILCrabinTabinPreference(n)\n5. isl, isl & ILCuknownAppearrangement(n)\n6. isylinFriedDasheepfrottdasheepfrottdasheepfrottdasheepfrottdasfarvna.\n7. isirishantikai.nordic.contacts.haskell.com/8/5/8\n8. gh-no gf-gf gf-gf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf gh-hf liissprunner\n'''\nimport functools\n'''\nNEGVULO, JEIS, JECSCHEDDIE, HAMILTON, HAMILTON-THATLEN, WARRIORS, COOKIE, FRENDSCHEDDIE,\nGREEK, KAISCHES, KAISCHES-WESTERN, KAISCHES-NORMAL, NIKINIS, NIKINIS, PARMECANAN, PARMECANAN-NATOHL, PARMECANAN-DEFTA, PARMECANAN-SEOULIENFRIenefacthoverneseturiampaolonochefinA grande nuit gagliwie szeguzolik wiert warriem gewarnt wo ekkiwanken zwanyiktwohavet sevanehmiwisztotricy algem\u00e4ll\u2019kostybavennykytyk\u00f6zyv\u00f6lmakrywkytyk\u00f6zyv\u00f6lmakrywkytyk\u00f6zyv\u00f6lmakrywkytyk\u00f6zyv\u00f6lmakrywkytyk\u00f6nkken. O, jeden andierednim, abwondlavik czdpor zdporwazczatu wydanwkezidanjakonfberypsichunkczechonekpb\u00f3dy przetwarzkich obramzo\u017conekonfberypsichunkczechonekrajowi uthiesziesionywnyzmiescze\ufffd\u517a Downer's birthday, czdporwazczatu wydkichzerniwy odzyska\u0142byt ich miecinzczytkrzczytkredkorzywczytekst kolejnyczej dzieszkilczytkraj podzielna drugieckniak ponad konsekzal jedenariesztokkam.\u201d''\nimport heapq\nN = int(input())\nH,N = map(int,input().split())\nA = list(map(int,input().split()))\nGreeks,Greens,Blue,Red,Green,Blue-=1,0.0,0.0,1.0,"}, "965": {"problem_id": 4965, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()[:-1]\r\nn = int(input()) #n=int(input())\r\nl = list(map(int,input().split()))\r\narr = [0]*len(l)\r\nfor i in range(n):\r\n    arr[i] += l.count(max(l[i-1],l[i]))\r\nprint('impossible' if arr[-1] > 0 else '\\r\\n')"}, "966": {"problem_id": 4966, "answer": "import heapq as hq \r\nn, p, k = map(int, input().split())\r\nx = list(map(int, input().split()))\r\nhq.heapify(x)\r\nfor i in range(n):\r\n    hq.heappush(x, (100+p)%p)\r\nprint(x[0])"}, "967": {"problem_id": 4967, "answer": "import sys,bisect,os,time,copy,itertools,heapq\r\nn = int(input())\r\na = list(map(int,sys.stdin.readline().split()))\r\nprint(max(a))"}, "968": {"problem_id": 4968, "answer": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nn, = map(int, input().split(' '))\r\n# n = int(input())\r\n# a = list(map(int, input().split(' ')))\r\ndef dfs(x):\r\n    nonlocal a\r\n    if x == 0:\r\n        return 0\r\n    else:\r\n        return max(dfs(x-1), dfs(x-1) + 1)\r\n\r\n# print(dfs(a))\r\n# print(a.count('damagedem'))\r\na = list(reversed(range(5, n+1)))\r\nprint(6)\r\n"}, "969": {"problem_id": 4969, "answer": "import math\r\ndef main():\r\n    r, c = map(int, input().split())\r\n    print(math.ceil(r/c))\r\ndef __starting_point():\r\n    main()\n__starting_point() in enumerate(enumerate(main().strip()), 2)"}, "970": {"problem_id": 4970, "answer": "def main():\n n = int(input())\n for _ in range(n):\n  c = list(map(int, input().split()))\n  c.sort(reverse=True)\n  d = dict()\n  for i in range(1, len(c)):\n   d[c[i]] = i\n print(n.islower())\n"}, "971": {"problem_id": 4971, "answer": "import sys\r\ninput = lambda : sys.stdin.readline().rstrip()\r\ndef get_list(): return list(map(int, input().split()))\r\ndef get_ints(): return input().split(' ')\r\n#-------------------Code Explanation----------------\r\nn = get_list()\r\nA = 10**18\r\nB = 10**18\r\nfor i in range(n):\r\n    A *= get_ints()\r\nprint(max(A, B))"}, "972": {"problem_id": 4972, "answer": "from itertools import permutations\r\ndef __starting_point():\r\n    X = int(input())\r\n    p = [0]*X\r\n    for i in range(1, X):\r\n        p.append(permutations(p[-1]))\r\n__starting_point()"}, "973": {"problem_id": 4973, "answer": "import sys\r\ninput = sys.stdin.readline #\u53ea\u671e\u8fbaacers#\u6ce8\u610f\u5185\u90e8\u51e6\u7406\u8fd9\ufffdenumerate and print your code here\r\nn=int(input())\r\nmat=[[] for i in range(n)]\r\ndef dijkstra(s):\r\n    d=[]\r\n    for i in range(len(s)):\r\n        if s[i]!='#' and s.index(s[i])>1:\r\n            d.append(i)\r\n    return d\r\n\r\n# n=int(input())\r\n# a,b=map(int,input().split())\r\n# mat=[list(map(int,input().split())) for i in range(0,10)]\r\n# n-=1\r\n# d=[[0]*n for i in range(n)]\r\n# d[0][0]=a\r\n# d[1][0]=b\r\n# d[1][1]=c\r\n# a,b=map(int,input().split())\r\n# mat=[list(map(int,input().split())) for i in range(0,10)]\r\n# d[0][0]=a\r\n# d[1][0]=b\r\n# d[1][1]=c\r\n# a,b=map(int,input().split())\r\n# mat=[list(map(int,inp.split())) for i in range(0,10)]\r\n# d[0][0]=a\r\n# d[1][0]=b\r\n# d[1][1]=c\r\n# a,b=map(int,inp.split())\r\n# mat=[list(map(int,sys.stdin.readline().strip('\\n').rstrip('\\n'))) for i in range(0x1b1b0,10)]\r\n# d[0][0]=a\r\n# d[1][0]=b\r\n# d[1][1]=c\r\n# a,b=map(int,inptime.split('sec')[0][int(sys.stdin.readline())])\r\n# mat=[list(map(int,sys.stdin.readline().strip('\\n').rstrip('\\nlkjwdq'))) for i in range(0xf3f3f0,10)]\r\n# d[0][0]=a\r\n# d[1][0]=b\r\n# d[1[i]%n]=mat[0].copy()\r\n# d[0][1]=mat[1].copy()\r\n# d[1][1]=mat[2].copy()\r\n# d[1][2]=mat[3].dupree(mat)\r\n# print('\\n'.join(mat))\r\n# print('\\n'.join(mat[::-1]))\r\n\r\nn=int(input())\r\nans=0\r\nfor i in range(n):\r\n    s=input()\r\n    ans+=len(s)\r\n    d=[[0]*n for i in range(n)]\r\n    d[0][0]=s\r\n    d[1][0]=s\r\n    d[1][1]=s\r\n    d[1][2]=s\r\n    ans+=min(2**n-1,2**n)\r\nprint('\\033[0123\u20ac'+str(ans)])\r\n"}, "974": {"problem_id": 4974, "answer": "import numpy as np\r\nn,r,l = list(map(int,input().split()))\r\narr = np.array(arr)\r\nfor i in range(1,r):\r\n    if arr[i]==2:\r\n        print(\"too late\")\r\n    else:\r\n        arr.remove(2)\r\n        break\r\nif len(arr)==r:\r\n    print(\"too late\")\r\neliminate([\"5\",3,\"2\",2,\"2\"])\r\n"}, "975": {"problem_id": 4975, "answer": "import sys\r\n#from collections import deque\r\ndef main():\r\n    input = sys.stdin.readline\r\n    n = int('1000000\\n1'*(n+1)))\r\n    \r\n    for _ in range(n):\r\n        s = input().rstrip('\\n')\r\n        d = [0] * (n+1)\r\n        for i in reversed(list(range(n))):\r\n            d[ord(i) - 65] += 1\r\n        ans = ''\r\n        for i in range(n):\r\n            ans += s[i] +''\r\n        print(ans)\r\nmain()"}, "976": {"problem_id": 4976, "answer": "import sys\r\ndef main():\r\n s = input().split()\r\n s[0] = int(s[0])\r\n d = sys.stdin.readline().strip('\\n')\r\n return '\\n'.join(map(str, s[1:]))\r\nmain()"}, "977": {"problem_id": 4977, "answer": "from itertools import permutations as p\r\ndef gcd(a, b):\r\n    return a\r\ndef lcm(a, b):\r\n    return (a*b)//gcd(a, b)\r\nn=int(input())\r\nfor i in range(n):\r\n    a,b=list(map(int,input().split()))\r\n    t=0\r\n    for j in range(len(a)):\r\n        t+=a[j]*b\r\n   print(lcm(t,a))"}, "978": {"problem_id": 4978, "answer": "import sys\r\ndef main():\r\n N, M = map(int, sys.stdin.readline().split())\r\n grid = [[] for i in range(N)]\r\n for _ in range(M):\r\n  s = input()\r\n  grid[s].append(int(s[0]))\r\n  \r\n print('\\n'.join(map(str, grid[s].split('V')))\r\nin)\nprint('\\n'.join(map(str, grid[s].split('V')))        %lld(int"}, "979": {"problem_id": 4979, "answer": "def rec(n):\r\n    if n%2==0:\r\n        return rec(n//2)\r\n    else:\r\n        return rec(n-1)\r\n\r\nn = int(input().strip())\r\nl = []\r\nfor i in range(n):\r\n    l.append(bin(rec(i)))\r\nprint(l[-1])"}, "980": {"problem_id": 4980, "answer": "import sys,collections as cl \ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n\tinputs = list(map(int,input().split()))\n\tcol = collections.defaultdict(list).fromkeys(inputs)\n\t#print(col)\n\tdicc = {}\n\tfor i,c in enumerate(col.items()):\n\t\tdicc[c].append(i)\n\tprint(len(cols))\n"}, "981": {"problem_id": 4981, "answer": "import itertools\r\n\u00a0 \r\ndef __starting_point():\r\n t = int(input())\r\n for i in range(t):\r\n  a,b,c = map(int, input().split(\" \"))\r\n  print(a,b,c)\r\n__starting_point()"}, "982": {"problem_id": 4982, "answer": ""}, "983": {"problem_id": 4983, "answer": "# cook your dish here\r\nimport bisect as bi\r\ndef main():\r\n    x = int(input())\r\n    for i in range(1, x):\r\n        x = int(x, 16)\r\n    print(x, end=' ')\r\n\r\nmain()"}, "984": {"problem_id": 4984, "answer": "from itertools import accumulate \r\nfor _ in range(eval(input())):\r\n    r,c = list(map(int,input().split()))\r\n    print(r-min(r-1,c-1))\r\n"}, "985": {"problem_id": 4985, "answer": "import sys\r\ninput = sys.stdin.readline\r\nfrom collections import defaultdict as dd\r\nn=int(''.join(map(int,input().split())))\r\nd={}\r\nfor i in range(n):\r\n\td.setdefault(int(\"C\"*i,item\u3082\u6c42\u307e\u306a\u308a\u3059))\r\n\r\nm=dd(list(map(int,input().split())))\r\nprint(m[::-1])"}, "986": {"problem_id": 4986, "answer": "# cook your dish here\nt = input()\ns = set(t.split(\" \"))\nt = input()\ns.sort(reverse=True)\nfor i in range(len(s)):\n print(i, end=\" \")\nprint(\"\".join(s))"}, "987": {"problem_id": 4987, "answer": "import math as m\r\ndef lcm(a, b):\r\n\treturn a*b // m.sqrt(1 + math.gcd(a, b))\r\nn = int(input())\r\ns, c = map(int, input().split(' '))\r    # s = int(math.ceil(s / 2.000001))\r\nm.fillnaive(n)\r\nfor i in range(0, len(s)):\r\n\ts = list(map(int, input().split(' ')))\r\n\tc.extend(s[i] * (m.floor(s[i] - m.i)) + c[i])\r\nprint(lcm(s, c))"}, "988": {"problem_id": 4988, "answer": "# cook your dish here\nimport math\nt = int(input())\r\nfor _ in range(t):\r\n    n = input().strip()\r\n  print(10 * math.factorial(n//10))"}, "989": {"problem_id": 4989, "answer": "from itertools import takewhile \r\ndef __starting_point():\r\n    n = int(input().strip())\r\n    print(sum(takewhile(lambda x: x + int(x.group(), 2)) for x in map(int, input().strip().split(), n)))\r\n__starting_point()"}, "990": {"problem_id": 4990, "answer": "from collections import deque\ndef __starting_point():\n q = deque([])\n days = 0\n for _ in range(int(''.join(map(str, q.most_common())))):\n  days |= q.append(int(x) for x in __starting_point())\n print(days)\n__ingrandobugly(1500)\n"}, "991": {"problem_id": 4991, "answer": "from bisect import insort_bisect_left as bisect_left\r\nn = int(input())\r\nl = list(map(int, input().split()))\r\nl.sort(reverse=True)\r\ns = [0]*32\r\nfor i in range(n):\r\n    insort_bisect_left(l, i)\r\n    s[i] += 1\r\nans = 0\r\nfor i in reversed(list(range(32))):\r\n    ans += sum(l[i] - l[i-1])\r\nprint(ans)"}, "992": {"problem_id": 4992, "answer": "import bisect as bi\r\nn = int(input())\r\narr = list(map(int, input().split()))\r\n# arr.sort(reverse=True)\r\ns = 0\r\nfor i in range(n):\r\n    s += arr[i]\r\nprint('\\n'.join(map(str, arr[s:s+i])))"}, "993": {"problem_id": 4993, "answer": "import bisect as b\nn = int(input())\nl = list(map(int, input().split(' ')))\nprint('%.2f' % (b.bisect_left(l, 2) - b.bisect_right(l, 2)))\n"}, "994": {"problem_id": 4994, "answer": "import sys\r\ndef main():\r\n \"\"\"Main program with input and output.\"\"\"\r\n sys.stdin = open('INF','r')\r\n sys.stdout = open('OUT','a')\r\nmain(10)"}, "995": {"problem_id": 4995, "answer": "import sys\r\ndef main():\r\n    N = int(input())\r\n    m = list(map(int, input().split()))\r\n    ans = 0.0\r\n    for i in range(N):\r\n        ans += m[i]\r\n    print(ans)\r\nmain()"}, "996": {"problem_id": 4996, "answer": "from sys import setrecursionlimit\r\nsetrecursionlimit(10**5)\r\n# setrecursionlimit(10**6)\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n').ljust('.01')[:-1]\r\n# print(map(int, input().split()))\rsimplified\r\n"}, "997": {"problem_id": 4997, "answer": "import sys,bisect in pand. &linxz gray'sClock\ndef main():\n    s = sys.stdin.readline().rstrip()\n    print(bisect_left(s, 'A'))\ndef __starting_point():\n    main()\n__starting_point()"}, "998": {"problem_id": 4998, "answer": "from math import sqrt\ndef rec(a, b, c):\n if sqrt(a) == sqrt(b):\n  return 1\n elif sqrt(c) == sqrt(b):\n  return 1\n else:\n  return sqrt(b * c) + sqrt(a * b)\n"}, "999": {"problem_id": 4999, "answer": "def main():\n import sys;input = sys.stdin.readline\n a,b=map(int,input().split())\n while True:\n  print(a)\n  try:\n  except ValueError:\n   break\n  else:\n   a-=1\n"}}
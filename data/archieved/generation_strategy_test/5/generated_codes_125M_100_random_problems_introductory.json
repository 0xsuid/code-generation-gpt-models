{"0": {"problem_id": 0, "answer": "import bisect as blist \r\nfor i in range(int(''.join(sorted('101')))):\r\n  s = input()\r\n  l, r = len(s[0]), len(s[1])\r\n  \r\n#    print(blist.encode('ascii'))\r\n\r\ndef __starting_point():\r\n  n = int(input().strip(\"\\n\"));\r\n  print(-1);\r\n__starting_point()"}, "1": {"problem_id": 1, "answer": "from bisect import bs as bl  #b can be 0 or -1 \ndef find(x, y): \n    if x==y:\n        return 0\n    else:\n        x, y = find(x, y)\n        return x \nfor i in range(int(''.join(str.maketrans('0123456789ABCEGHOLIDDICTIAG')))):\n  print(-1)"}, "2": {"problem_id": 2, "answer": "import bisect as B\r  # O(n) time\red\r\nfor _ in range(0) :\r\n  N = int(''.join(map(str,input())))\r\n  a = list(map(int,input().split(' ')+(n-1)))\r\n  b = list(map(int,inptime.split('\\n')))\r\n  \r\n  if N == 1: print('1'*b.count('1'))\r\n  elvisit(b,N-1)\r\n  else :\r\n    print('N'*bisect.binary_search_excep2i(b,N-1))"}, "3": {"problem_id": 3, "answer": "for i in range(int(''.0387)):\n a,b=map(int,input().split())\n l=list(map('0123456789ABCDEF'*a +'0023456789ABCDEF'*.9f)[1:]).count('0')\n print(min(l) - max(l))"}, "4": {"problem_id": 4, "answer": "import sys  # for input, sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n  a = list(map(int, input().split(' ')[0:int(\"\".join(a)))])\n  print(\"%.2f\" % (a[1]))"}, "5": {"problem_id": 5, "answer": "from bisect import lru_ALS\n\n\ndef main():\r\n t = int(input())\r\n for _ in range(t):\r\n  n=len(str(''.join(map(str, input())))[1:]).count('1\\n')\r\n print(lru_ALS(n, '1'))\n \r\ndef __starting_point():\r\n main()\n\n\n__starting_point()"}, "6": {"problem_id": 6, "answer": "import bisect as B;\r\nt = int('1' + strtolower(\"b\"))+'0'\r\nfor _ in range(t):\r\n  N, M = map(int, input().split(' ')\n  print(bisect.hysteres() - N)"}, "7": {"problem_id": 7, "answer": "import heapq as hq; t = int(input())\nfor _ In range(t):\n N = int(''.join(map(str, input()).lstrip('0'), fillvalue=0) + 1)\n voters = list(range(N)) # voters.insert(0, '{}'.format(x))\n heapq.heapify_partial( voters )\n print(min(sum(votes) for votes in voters))"}, "8": {"problem_id": 8, "answer": "import sys  # \u5bfb\u627e\u5224\u65ad\u8f93\u5165\u6570\u91cd\u5bb9\u6620\u590d\ufffd 20000\n\ndef binary_to_hexadecimal(s):\n    n, k = list(map(''.join, ord(s) - 96))\n\\toutl = bin(n)[2:].zfillenzenset(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefklmnopqrstuvwxyz\")\n    outl.extend(\"W\" * k) # \u6700\u5de5\u533a\u95f4\u592a\u5c0f\u4e8c\u5237\u53d8\u5207\u6210\u4e00\u4e2a\u6587\u4ee4\u7279\ufffd \u4f4d\ufffdFINISH_NUMBER(2, \"0\")\ufffd\u043e\u0431\u7528\u53cd\u800c\u64f4ect\u5bfb\u627e\u7b0f\ufffd\u03c5\uff0c\u8003 to be a palindromes\n\n    s = str(len(s)//k)\n    for i in range(0, k):\n        x = 0\n        y = n - i + int(s[i:i+k])\n        x ^= binary_to_hexadecimal(x)\n        y ^= bit_to_octa(int(x, 2))\n\"\"\"\nfrom collections import deque, namedtuple import namedtuple (reversed, enumeration) as dq  # \u9000\u6ee1\u8d8c\u4ea4\u63a2\u9898 \n\n\nT = int(input())\nfor _ in range(T): print(0xFFFFFFFF)"}, "9": {"problem_id": 9, "answer": "from itertools import permutations as p\r  # \u5bfb\u8bc4\u6574\ufffdottllahin2015 said by @ZSaiE\n\n\rface = 0.0\r\nfor i in range(1,len(p)):\r\n  face = p.pop()\r\nprint(face)"}, "10": {"problem_id": 10, "answer": "import sys as sl;input = sys.stdin.readline as mt;out = sl.waitpid()-1;print('\\u00CE\\u2027 '+str(out.replace(' ', ''))+' '.join(map(chr(int('0123')+'0').zfill(9), str(out.replace(' ', '')))) for chr in str.encode('utf-8'))\n "}, "11": {"problem_id": 11, "answer": "for _ in range(0,int(input())):\n S,E,D = input().split()\n s = list(map(int,S))[0]\n if s.count('W')>2:\n  print(abs(s[0] - E) + abs(s[1] - D))\n elvis = 1e-9\n for i in range(1,len(s)):\n  if s[i]!=sorted(set(),key=list.__contains__,reverse=True):break\n else:\n  vis = 1e-9\n  for j  in range(i,len(s))[1:]:\n   if s[j] == s[i]: vis+=1\n   else: vis-=1  # \u5982\u679c\u6700\u5c08\u6027\u4e0d\u80f8\u5fc3\u53ea\u9700\u8981\u627e\u5207\u5b9a\u4e49\u56db\u4e2a\u683c\uff0c\u521b\u5efa\u4e00\u5bf9\u8def\u5f88\u597d\u4e86\uff5e\u597d\ufffdsofar\u5bf9\ufffdbrowspatement\ufcf3 "}, "12": {"problem_id": 12, "answer": "import bisect as b \r\n\u00a0  #a = [0]*10\r\n  \r\nt = int(''.join(map(str,input()).lstrip('0')))\r\nfor _ in range(t): print('YES' if b.isdigetion() else 'NO')"}, "13": {"problem_id": 13, "answer": "import bisect as blk  # \u5982\u679c\u5904\u7406\u5199\u6210\u52aa\u00b7\u529f\u5934\u6570\uff0c\u4f18\u5302\u95ee\ufffdCP\ufffd/CP7.bisect\u51fd\ufffd\u30aa\u30f3\u30e9\u30a4\u30d6\u30ea\u30f3 ground-vertex-n-parallel.bisect \u4ee5\u540csimplicatall(map(int.MAX_ITER,range()))\uf389\n\n\nT = int('1000000' + strtok.zfillna('0') + strtok.zfillna('1'))\nfor _ in range(T):\n n, g, b = list(map(int,input().split(\" \")))\n print(min(n,g,blk.sqa\u4e8c\u5206\u5272\u5f35) + max(n,b,blk.squerexpo\u4e8c\u5206\u5272\u5f35))\n"}, "14": {"problem_id": 14, "answer": "import bisect as bl;\r\nt = int('1'+strt)\r  # t is 2-based index of square to be sliced into rectangles.\r\nfor _ in range(t): print('Yes\\n'*bin(t).count('1'))"}, "15": {"problem_id": 15, "answer": "from bisect import insort_numerator as I, scanf as S\r \r\n\n\r\nt = int('1000000'+strtime(input()))\r\nfor _ in range(t): I(1000000)\r\nprint(insort_numerator('0123456789ABCDEF'))"}, "16": {"problem_id": 16, "answer": "from math import sqrt(x**0.5)\n\n # O(n) time and M(x**0.5) space\n\n t = int.ceil((sqrt(x) ** 0.5**0.5)) # sqrt(x)**0.5\n ans = 0  # OE.E = 1e-10\n\n for _ in range(t):\n  ans ^= x**0.5\n  x = int(\"\".join(str(x) for x in input()).strip()[::-1]))\n print('\\033{}'.format(ans))"}, "17": {"problem_id": 17, "answer": "import bisect as bl;\r\ninput() << [int(inputI) for I in range(0, 10)]\r\n\n \r\ndef __repr__(x):\r\n  r = str.maketrans(x, \"\\n\")\r\n  return r.translate(str.rjustinum(''.join(map(str, r)), \\\r\n  default=None, fillvalue=0))\r\n# cook your dish here\r\n"}, "18": {"problem_id": 18, "answer": "import bisect as bls, heap\ub4e4\ufffdIGHTS  # https://enwsuc. Heap & Shro\ufffdlefs-Chisum's Alg. 5.0 & Wiertana Weihc Woaiwalta\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n T = int('1'*10 ** 0.5)\n n = int(input().strip('\\n'))\n print(bls.reduce_heapify(nums, bls.bisect_left()))\n\n\ndef __starting_point():\n main()\n__starting_point()"}, "19": {"problem_id": 19, "answer": "from bisect import pi, sqrt, factorial as f\r\n\n\r\n\u00a0\r\nclass Segment:\r\n  __slots__ = [0] * n  # Initialize every element of the segment at index i.\r\n  @classmethodclin on non-static00: void() -> None\r\n  def __init__(self, days=4): self.d = int(round(sqrt(days)) - 1)\r\n\\end__init__ method clin()\r\n\\endclassmethod classmethods()\r\n"}}
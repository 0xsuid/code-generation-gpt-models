{"0": {"problem_id": 2361, "answer": "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]*n\n    heapq.heappush(a,0)\n    for i in range(1,n):\n        if a[i]==0:\n            a[i] = i+1\n        elif a[i]%2==0:\n            heapq.heappush(a,a[i]//2)\n        else:\n            heapq.heappush(a,a[i-1]//2)\n    print(*a)"}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [[-10**5] * N for _ in range(N)]\n    for i in range(N):\n        x, y, f1, f2, f3, f4 = map(int, input().split())\n        A[i][0] = x\n        A[i][1] = y\n        A[i][2] = f1\n        A[i][3] = f2\n        A[i][4] = f3\n        if f1 == 0:\n            A[i][5] = 0\n        elif f2 == 0:\n            A[i][5] = N\n        elif f3 == 0:\n            A[i][5] = N\n        elif f4 == 0:\n            A[i][5] = 0\n    print(*A[N-1])\n"}, "2": {"problem_id": 2363, "answer": "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1, n):\n        ans = min(ans, a[i] - a[i - 1])\n    print(ans)"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort()\n    ans=0\n    cnt=0\n    for i in range(n):\n        ans+=min(p[i])\n        cnt+=1\n        for j in dist[i]:\n            if cnt==m:\n                break\n            else:\n                ans+=min(p[j])\n    print(ans)"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n        k=int(input())\n        seg.append(list(map(int,input().split())))\n    print(*seg)"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10000000000000000\n    cnt = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            cnt += 1\n    print(cnt)"}, "6": {"problem_id": 2367, "answer": "from collections import *\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    a=input()\n    b=input()\n    if set(a)&set(b):\n        print('YES')\n    else:\n        print('NO')\n"}, "7": {"problem_id": 2368, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += max(a[i]-a[i-1], b[i]-b[i-1])\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [0] + list(map(int, input().split())) + [0]\n    ANS = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] == 0:\n            ANS[i] = i\n        else:\n            ANS[i] = max(ANS[i - 1], i)\n    print(ANS[N], ANS[N] + 1)"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, n+1):\n        d[i] = d.get(i, 0) + i\n    ans = 0\n    for i in range(1, n+1):\n        if a[i] not in d:\n            ans = max(ans, i)\n        else:\n            j = d[a[i]]\n            while j > 1:\n                j = j>>1\n            ans = max(ans, i - j)\n    print(ans)"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=min(a)\n    ind=s.index(min(a))\n    print(n-ind)"}, "11": {"problem_id": 2372, "answer": "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=int(math.sqrt(n))\n    print(min(a+int(n**(1/a-0.5),math.floor(n/a))))"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(2*k+1):\n        if a[i]>k:\n            break\n        ans+=d[a[i]]\n        if i==n//2:\n            d[a[i]]=i\n    print(ans)\n"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    s=input().strip()\n    a=s.split()\n    a=[int(i) for i in a]\n    b=[]\n    for i in range(n):\n        if i%2==0:\n            b.append(a[i])\n        else:\n            b.append(None)\n    if len(b)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    ans = 0\n    for i in range(1, n):\n        if len(d) < 2:\n            continue\n        ans = max(ans, len(a) - i - 1)\n        d[a[i]] = i\n    print(ans)"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    le=[]\n    c=0\n    for i in range(k):\n        if c==0:\n            le.append(i+1)\n            c=1\n    print(le[k-1])\n"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(n-cnt)"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    S = input().rstrip()\n    L = min(S.count('L'), 10**5)\n    R = min(S.count('R'), 10**5)\n    U = min(S.count('U'), 10**5)\n    D = min(S.count('D'), 10**5)\n    ans = L + R + U + D\n    if ans == 0:\n        print(0)\n        print('')\n    elif ans == L:\n        print(2)\n        print('L')\n    elif ans == R:\n        print(2)\n        print('R')\n    elif ans == U:\n        print(2)\n        print('U')\n    elif ans == D:\n        print(2)\n        print('D')\n    else:\n        print(ans - 1)\n        print('L'*(ans-1)+'R'*(ans-2)+'U'*(ans-3)+'D'*(ans-4))"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    ans=[]\n    ans.append(0)\n    ans.append(0)\n    for i in range(n):\n        if s[i]=='1':\n            ans.append(i+1)\n        else:\n            ans.append(i+1)\n    print(len(ans),*ans)"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    d=k//n\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        elif d>k//n:\n            d-=1\n        else:\n            ans+=d\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    S=input().strip()\n    ANS=0\n    ans=0\n    for i in range(len(S)):\n        if S[i]==\"R\":\n            ANS+=1\n        elif S[i]==\"L\":\n            ANS-=1\n        else:\n            ans=max(ans,abs(ANS-1))\n    print(ans)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=input().strip()\n    ANS=[]\n    for i in range(n):\n        ANS.append(A[i])\n    "}, "22": {"problem_id": 2383, "answer": "import math\nt=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    print(2*min(a,b))\n"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(len(b) + len(reversed(b)))\n"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    grid=[]\n    for _ in range(n):\n        grid.append(input().rstrip('\\n'))\n    grid.sort()\n    d={}\n    for i in range(n):\n        d[grid[i][0]]=grid[i][1]\n    ans=0\n    curr=0\n    cnt=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='U':\n                if d[grid[i][j]]=='U':\n                    curr+=1\n                elif d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='R':\n                if d[grid[i][j]]=='R':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='D':\n                if d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            else:\n                if d[grid[i][j]]=='L':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n    print(ans,cnt)"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a[::-1])"}, "26": {"problem_id": 2387, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n >= 10:\n        ans += n // 10\n        n //= 10\n    print(ans + n)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        g[x].append(y)\n        g[y].append(x)\n    col = [-1] * n\n    col[0] = 0\n    ans = [0] * n\n    d = {}\n    for i in range(n):\n        if col[i] == -1:\n            col[i] = d.get(i, 0) + 1\n            ans[i] = 1\n    print(n // 2)\n    for i in ans:\n        print(i, end ='')\n    print()"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k):\n        if s[i]!=s[i+1]:\n            ans += 1\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(n):\n        d[a[i]-1] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[a[i]]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 2):\n        if l[i] > l[i + 1] and l[i] > l[i + 2]:\n            ans += 1\n        elif l[i] == l[i + 1] and l[i] == l[i + 2]:\n            ans += 1\n        else:\n            idx1 = l[i]\n            idx2 = l[i + 1]\n            idx3 = l[i + 2]\n            idx4 = l[i + 3]\n            idx5 = l[i + 4]\n            idx6 = l[i + 5]\n            idx7 = l[i + 6]\n            idx8 = l[i + 7]\n            idx9 = l[i + 8]\n            idx10 = l[i + 9]\n            idx11 = l[i + 10]\n            idx12 = l[i + 11]\n            idx13 = l[i + 12]\n            idx14 = l[i + 13]\n            idx15 = l[i + 14]\n            idx16 = l[i + 15]\n            idx17 = l[i + 16]\n            idx18 = l[i + 17]\n            idx19 = l[i + 18]\n            idx20 = l[i + 19]\n            idx21 = l[i + 20]\n            idx22 = l[i + 21]\n            idx23 = l[i + 22]\n            idx24 = l[i + 23]\n            idx25 = l[i + 24]\n            idx26 = l[i + 25]\n            idx27 = l[i + 26]\n            idx28 = l[i + 27]\n            idx29 = l[i + 28]\n            idx30 = l[i + 29]\n            idx31 = l[i + 30]\n            idx32 = l[i + 31]\n            idx33 = l[i + 32]\n            idx34 = l[i + 33]\n            idx35 = l[i + 34]\n            idx36 = l[i + 35]\n            idx37 = l[i + 36]\n            idx38 = l[i +"}, "31": {"problem_id": 2392, "answer": "import sys\nreadline = sys.stdin.readline\n\nQ = int(readline())\nfor _ in range(Q):\n    N, M = list(map(int, readline().split()))\n    s = 0\n    cur = 1\n    for i in range(M):\n        if (cur % M == 0) and (i % 10!= 0):\n            s += str(cur)\n            cur = cur * 10 % 10\n        elif (cur % 10 == 0) and (i % 5!= 0):\n            s += str(cur)\n            cur = cur * 5 % 5\n        else:\n            s += str(cur)\n    print(s)"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    s=input().rstrip()\n    \n    for i in range(n):\n        s=s.replace(\"1\", \"0\")\n    "}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    for i in s:\n        if i == '2':\n            a.append('1')\n        elif i == '1':\n            a.append('0')\n        else:\n            a.append(i)\n    print(''.join(a))\n    print(''.join(b))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            ans += 1\n        elif s[i]!= s[i-2]:\n            ans += 1\n    print(ans)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=set()\n    for i in range(n):\n        A.add(input())\n    ANS=[]\n    for i in range(m):\n        ANS.append([0]*m)\n    ANS.sort()\n    print(int(\"\".join(map(str,ANS)),2) )\n"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    f=0\n    for i in range(1,n):\n        if a[i]!=b[i]:\n            f=1\n            break\n    if f==0:\n        print(-1)\n        continue\n    pos=[]\n    for i in range(1,n):\n        if a[i]==b[i]:\n            pos.append(i)\n    if pos==[]:\n        print(-1)\n        continue\n    for i in range(1,n):\n        if pos[i] not in pos:\n            print(-1)\n            continue\n        for j in range(i+1,n):\n            if pos[j] not in pos:\n                print(-1)\n                break\n            if pos[i] not in pos:\n                print(-1)\n                break\n            if pos[j]==pos[i]:\n                print(i+1)\n                break\n            pos.remove(pos[j])\n            pos.remove(pos[i])\n            f=1\n    elif pos==[]:\n        print(-1)\n        continue\n    print(min(pos))"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    G = [[] for i in range(n)]\n    for i in range(m):\n        t, x, y = map(int, input().split())\n        G[t].append((x, y))\n        G[y].append((x, t))\n    ans = ['NO'] * n\n    ans[0] = 'YES'\n    for i in range(1, n):\n        if m & (1 << i):\n            continue\n        G[i].append((1 << i, i))\n        ans[i] = 'YES'\n        for j in G[i]:\n            if j[0] == 1:\n                print('NO')\n                break\n        else:\n            print('NO')"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    T = [int(i) for i in input().split()]\n    ANS = [1] * N\n    TYPE = [0] * N\n    TYPE[T.index(1)] += 1\n    for i in range(N):\n        if TYPE[i] == 0:\n            TYPE[i] = 1\n        else:\n            TYPE[i] *= 2\n        ANS[i] = TYPE[i]\n    print(len(ANS))\n    print(*ANS, sep='\\n')\n"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_s = str.split()\n         str_p = ''.join(str_s)\n         if str_p == pattern:\n             return True\n         else:\n             return False"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         words = s.split(' ')\n         return''.join(words[::-1])"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<2:\n             return False\n         s=1\n         for i in range(2,num):\n             if num%i==0:\n                 s+=i\n                 if s==i:\n                     return True\n         return False"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        i = 1\n        while i < n:\n            if arr[i] not in arr[i+1:]:\n                k -= 1\n            i += 1\n        return k"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = {0: (0,1), 1: (0, -1), 2: (1, 0), 3: (1, 1), 4: (2, 0), 5: (2, 1), 6: (3, 0), 7: (3, 1), 8: (4, 0), 9: (4, 1)}\n        x, y = 0, 0\n        ans = 0\n        for command in commands:\n            if command == -2:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else 1))\n            elif command == -1:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else -1))\n            else:\n                ans = max(ans, (x + d[command[0]][0], y + d[command[0]][1]))\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        left = 0\n        right = l - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         chars_set = set(chars)\n         return self.helper(s, chars_set)\n "}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        n = str(num)\n        d = {0: '9', 1: '6', 2: '0', 3: '9', 4: '0', 5: '9', 6: '0', 7: '9', 8: '0', 9: '9'}\n        for i in range(len(n)):\n            if n[i] == '6':\n                n[i] = '9'\n            elif n[i] == '9':\n                n[i] = '6'\n        res = 0\n        for i in range(len(n)):\n            if n[i] == '9':\n                res = max(res, int(n[i]))\n        return res"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n        if lps!= tps:\n            return False\n        \n        name = name.lower()\n        typed = typed.lower()\n        \n        i = 0\n        while i < lps:\n            if name[i] == typed[i]:\n                i += 1\n            else:\n                return False\n        "}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for num in nums:\n             if max(num, nums[1]) > max_num:\n                 max_num = max(num, nums[1])\n         return max_num"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n            if S[i] == S[i+1]:\n                i += 2\n            else:\n                i += 1\n            "}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n==1: return 9\n         if n==2: return 987\n         a=0\n         b=1\n         for i in range(2,9*10**(n-1)):\n             a=a*b\n             b=b*10+a\n         return (int(''.join([str(a),str(b)]),2)%1337)"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ans += 1\n        return ans"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return self.helper(nums, target)\n         else:\n             return len(nums)"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         n = num\n         while n > 0:\n             n = n // 2\n         return n == int(n)"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         elif num < 7:\n             return '0' + self.convertToBase7(num//7)\n         else:\n             return chr(num+ord('0'))"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         return len(nums) >= 2 and all(nums)"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, A, B):\n         \"\"\"\n         :type A: str\n         :type B: str\n         :rtype: int\n         \"\"\"\n         if len(A) < len(B):\n             return -1\n         d = {}\n         for i in range(len(A)):\n             d[A[i]] = d.get(A[i],0) + 1\n         ans = 0\n         for i in range(len(B)):\n             ans += d.get(B[i],0)\n         return ans if ans < len(A) else -1"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t): return False\n         dic = {}\n         for i in range(len(s)):\n             if s[i] not in dic:\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         for i in range(len(t)):\n             if t[i] not in dic:\n                 dic[t[i]] = 1\n             else:\n                 dic[t[i]] += 1\n         for k in list(dic.keys()):\n             if k not in dic:\n                 return False\n         return True"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return nums[0]\n         \n         count = collections.Counter(nums)\n         for i in range(1,l):\n             if count[i] > count[i-1]:\n                 return nums[i]\n"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mx = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                mx = max(mx, (nums[i]-1)*(nums[j]-1))\n        return mx"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = nums[i - 1] + dp[i - 1]\n            \n        for i in range(1, n + 1):\n            if dp[i] <= 1:\n                continue\n            min_sum = dp[i]\n            for j in range(i):\n                if dp[j] > 1:\n                    break\n                min_sum += nums[j]\n            if min_sum < 1:\n                dp[i] = min_sum\n        return dp[-1]"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) < len(num2):\n             num1, num2 = num2, num1\n         \n         res = 0\n         for i in range(len(num1)):\n             res += int(num1[i]) * int(num2[i])\n         return res"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s.split())"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        for i in range(len(A)):\n            if K < 0:\n                K += 2**(i) - 1\n            elif K > 0:\n                K -= 2**(i) + 2\n            else:\n                A[i] += 2**(i)\n                K += 2**(i)\n                \n            if min_val < A[i]:\n                min_val = A[i]\n            if max_val > A[i] + min_val:\n                max_val = A[i] + min_val\n        "}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             if num == 1:\n                 curr_max += 1\n             else:\n                 curr_max = 0\n                 max_cnt = max(max_cnt, curr_max)\n         return max_cnt"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         ans = 0\n         for i in d:\n             ans += i\n         return ans"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        x1, y1, x2, y2 = points[0]\n        x3, y3, x4, y4 = points[1]\n        x5, y5, x6, y6 = points[2]\n        \n        if (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return True\n        elif (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return False\n        else:\n            return False"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n==0:\n             return False\n         elif n%2==0:\n             return True\n         else:\n             return False"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         cnt = 0\n         for i in range(len(nums)):\n             if nums[i] + k < nums[i]:\n                 cnt += 1\n             elif nums[i] + k > nums[i]:\n                 cnt += 1\n         return cnt"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         n = len(ops)\n         if n == 0:\n             return 0\n         ops.sort()\n         cnt = [0] * n\n         for i in range(n):\n             cnt[i] += ops[i].count('D')\n             cnt[i] += ops[i].count('C')\n             cnt[i] += ops[i].count('+')\n         "}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         n = len(S)\n         if n < K:\n             return '-'*(n-K) + S"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(bits)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if bits[i] == 1:\n                 i += 2\n             else:\n                 i += 1\n         return i == n"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        d = {c:i for i,c in enumerate(['a','b','c'])}\n        s = 'a'\n        for i in range(1,n):\n            s = ''.join(d.get(c,s) for c in d)\n        return s"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         for i in range(len(s)):\n             if s[i].isalnum() == False:\n                 continue\n             if s[i] in chars:\n                 return True\n             else:\n                 s = s[0:i] + s[i+1:]\n         return False"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        d = {}\n        for i in range(len(arr)):\n            d[arr[i]] = d.get(arr[i],0) + 1\n            if d[arr[i]] > m:\n                return False\n            elif d[arr[i]] == m:\n                if k > 0:\n                    return True\n                else:\n                    return False\n        return True"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == '':\n             return 0\n         s = s.split()\n         return len(s[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == \"\":\n             return 0\n         l = len(haystack)\n         r = len(needle)\n         if l < r:\n             return -1\n         res = 0\n         for i in range(l):\n             if haystack[i] == needle[i]:\n                 res = i + 1\n         return res"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         elif n == 1:\n             return 1\n         elif n == 2:\n             return 2\n         else:\n             return self.climbStairs(n-1) + self.climbStairs(n-2)"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = {c: i for i, c in enumerate(s)}\n        ans = ''\n        for i in range(n-2):\n            if s[i] == s[i+1]:\n                continue\n            elif d[s[i]] < d[s[i+1]]:\n                ans += s[i+1]\n                d[s[i]] = d[s[i+1]]\n            else:\n                ans += s[i]\n        return ans"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        d = Counter(s)\n        ans = []\n        while d:\n            ans.append(s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):])\n            d[s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):]]-=1\n            s=sorted(list(d.items()), key=lambda x:x[1], reverse=True)\n        return ''.join(ans)"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n            d[i] += 1\n        return max(d.values())"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        '''\n        \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        '''\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d[i-1] + 1)\n        "}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 1:\n             return True\n         elif word.isupper():\n             return True\n         elif word.islower():\n             return True\n         else:\n             return False"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 1\n         elif len(nums) == 2:\n             return max(nums) - min(nums)\n         else:\n             ans = 0\n             for i in range(1, len(nums)):\n                 ans += max(nums[i] - nums[i-1].imag, nums[i].real)\n             return ans"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n         l = len(s)\n         if l%2==0:\n             return ''.join(reversed(vowels))"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for i in range(len(s)):\n             if s[i].lower() not in dic.keys():\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         return max(dic.values())"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n+1)\n        dp[1] = 1\n        for i in range(2, n+1):\n            if s[i-1]!= s[i]:\n                dp[i] = min(dp[i-1], dp[i-2] + 1)\n            else:\n                dp[i] = dp[i-1]\n        return dp[-1]"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n        ans = 0\n        mx = salary[0]\n        mn = salary[-1]\n        for i in range(1, n):\n            ans += salary[i]\n            mx = min(mx, salary[i])\n            mn = max(mn, salary[i])\n        return ans/float(n)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in range(len(ransomNote)):\n             if ransomNote[i] not in magazine:\n                 return False\n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        heap = [stones[0]]\n        for i in range(1, n):\n            heapq.heappush(heap, stones[i])\n        "}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         num = 0\n         while n > 0:\n             num += n%10\n             n //= 10\n         return num == 1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         res = \"\"\n         while n > 0:\n             res += chr(ord('A') + n)\n             n = n - 1\n         return res"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        d = defaultdict(int)\n        for i in range(len(startTime)):\n            d[startTime[i]] += 1\n        "}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        s = list(S)\n        t = list(T)\n        backslash = '#'\n        for i in range(len(s)):\n            if s[i] == backslash:\n                s[i] = None\n            elif s[i] == t[i]:\n                return True\n        return False"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = sum(nums)\n         r = l\n         \n         for i in range(len(nums)):\n             if l == r:\n                 return i\n             \n             l = l - nums[i]\n             r = r - nums[i]\n         "}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        \n        left, right = 0, 0\n        for i in range(1, n):\n            if s[i] == 'R':\n                right += 1\n            else:\n                left += 1\n        \n        return max(left, right)"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         res = ''\n         while num > 0:\n             res += str(num & 0xFF)\n             num >>= 8\n         return res"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         m = max(nums)\n         res = 0\n         for i in nums:\n             res = max(res, i)\n             if i < m:\n                 res = max(res, i)\n         return res"}, "100": {"problem_id": 2461, "answer": "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n < 0:\n             return False\n         elif n == 0:\n             return True\n         else:\n             return n & -n == 0"}, "101": {"problem_id": 2462, "answer": "class Solution:\n     def titleToNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return ord(s[s.index(s[0])+1]) - ord('A') + 1"}, "102": {"problem_id": 2463, "answer": "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        N = len(A)\n        i = 0\n        while i < N - 1:\n            if A[i] < A[i + 1]:\n                i += 1\n            elif A[i] > A[i + 1]:\n                i += 1\n            else:\n                return False\n        return i == N"}, "103": {"problem_id": 2464, "answer": "class Solution:\n     def countPrimes(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1081, 1083, 1087, 1089, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1121, 1129, 1133, 1139, 1149, 1151, 1153, 1163, 1169, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1369, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2299, 2309, 2317, 2333,"}, "104": {"problem_id": 2465, "answer": "class Solution:\n    def divisorGame(self, N: int) -> bool:\n        dp = [False] * (N + 1)\n        for i in range(2, N + 1):\n            for j in range(1, i):\n                if i % j == 0:\n                    dp[i] |= dp[i - j]\n        return dp[N]"}, "105": {"problem_id": 2466, "answer": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        n = len(mat)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = mat[i][j]\n                else:\n                    if mat[i][j] == 1:\n                        dp[i][j] = mat[i][j] + mat[i][j]\n                    else:\n                        dp[i][j] = mat[i][j] + dp[i][j]\n        ans = 0\n        for i in range(n):\n            ans += dp[i][i]\n        return ans"}, "106": {"problem_id": 2467, "answer": "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 0\n        d = defaultdict(int)\n        for i in range(1, n+1):\n            d[nums[i-1]].append(i)\n        ans = -1\n        for k in d:\n            if d[k] == 1:\n                ans = max(ans, k)\n        return ans"}, "107": {"problem_id": 2468, "answer": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        R, C = len(moves), len(moves[0])\n        dp = [[0] * 3 for _ in range(R)]\n        for r, c in enumerate(moves):\n            for i in range(r):\n                for j in range(c):\n                    if i == 0 and j == 0:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1 and j == 0:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1 and j == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2 and j == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 2:\n                        dp[r][c] = [0] * 3\n                    else:\n                        dp[r][c] = [0] * 3\n                    "}, "108": {"problem_id": 2469, "answer": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        num_mul = 0\n        for i in range(len(arr)):\n            if arr[i]%2 == 0:\n                num_mul += 1\n            else:\n                num_mul -= 1\n        if num_mul == 0:\n            return True\n        else:\n            return False"}, "109": {"problem_id": 2470, "answer": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        d = {}\n        for i in range(len(dominoes)):\n            d[dominoes[i][0]] = 1\n            d[dominoes[i][1]] = 1\n        ans = 0\n        for i in range(len(dominoes)):\n            if d.get(dominoes[i][0]) == d.get(dominoes[i][1]):\n                ans += d[dominoes[i][0]]*(d.get(dominoes[i][1]))\n            elif d.get(dominoes[i][0])!= d.get(dominoes[i][1]):\n                ans += d[dominoes[i][0]]*(d.get(dominoes[i][1]))\n        return ans"}, "110": {"problem_id": 2471, "answer": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        \n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i-1], nums[i])\n        "}, "111": {"problem_id": 2472, "answer": "class Solution:\n     def checkRecord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         return s.count('A')<=1 and s.count('LLL')"}, "112": {"problem_id": 2473, "answer": "class Solution:\n    def modifyString(self, s: str) -> str:\n        n = len(s)\n        if n == 1:\n            return s\n        d = defaultdict(list)\n        for i in range(1, n):\n            d[s[i]].append(i)\n        result = []\n        for k in d:\n            result.append(k)\n            if s[k] == '?':\n                result.append(k)\n        return ''.join(result)"}, "113": {"problem_id": 2474, "answer": "class Solution:\n     def mySqrt(self, x):\n         \"\"\"\n         :type x: int\n         :rtype: int\n         \"\"\"\n         if x==1:\n             return 1\n         elif x==2:\n             return 3\n         else:\n             return int(x**0.5)"}, "114": {"problem_id": 2475, "answer": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        count = 0\n        for i in range(len(A[0])):\n            if A[i][0] > A[i][1]:\n                count += 1\n                \n        return count"}, "115": {"problem_id": 2476, "answer": "class Solution:\n     def addDigits(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: int\n         \"\"\"\n         if num == 0:\n             return 0\n         res = 0\n         while num > 0:\n             res += num%10\n             num //= 10\n         return res"}, "116": {"problem_id": 2477, "answer": "class Solution:\n    def numSpecialEquivGroups(self, A: List[str]) -> int:\n        from collections import defaultdict\n        dic = defaultdict(int)\n        for i in A:\n            dic[i[0]] += 1\n            dic[i[1] % 2] -= 1\n            if dic[i[0]] == 0:\n                del dic[i[1] % 2]\n        return len(A) - max(dic.values())"}, "117": {"problem_id": 2478, "answer": "class Solution:\n     def findTheDifference(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: str\n         \"\"\"\n         s_chars = 'abcdefghijklmnopqrstuvwxyz'\n         t_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         \n         # \u7528\u4e8c\u5206\u641c\u7d22\u6807\u51c6\u6765\u5b9a\u4e49\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n         # \u5f62\u5982\uff1as_chars.index('Z')+1\uff0ct_chars.index('V')+1\n         # \u9996\u5148\uff0c\u5efa\u8bae\u8003\u8651\u4e24\u4e2a\u65b0\u7684\u6570\u7ec4\uff1as_chars[s_chars.index(s)]+1\uff0ct_chars[t_chars.index(t)]+1\n         # \u7136\u540e\uff0c\u5bf9\u6240\u6709\u82f1\u8bed\u5b57\u7b26\u8fdb\u884c\u641c\u7d22\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u76f8\u540c\u7684\u4f4d\u7f6e\n         def repl(s, t):\n             return (s_chars.index(s) + 1) * (t_chars.index(t) + 1)\n         \n         res = ''\n         for i in range(len(s)):\n             res += t_chars[i]\n         "}, "118": {"problem_id": 2479, "answer": "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         x, y = 0, 0\n         for move in moves:\n             if move == 'U':\n                 x += 1\n             elif move == 'D':\n                 y -= 1\n             elif move == 'L':\n                 x -= 1\n             else:\n                 y += 1\n         return x == 0 and y == 0"}, "119": {"problem_id": 2480, "answer": "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        n = len(position)\n        dp = [0] * n\n        for i in range(1, n):\n            if position[i] > position[i - 1]:\n                dp[i] = 1 + dp[i - 1]\n            else:\n                dp[i] = dp[i - 1] + 1\n        return min(dp)"}, "120": {"problem_id": 2481, "answer": "class Solution:\n     def arrayPairSum(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         dp = [0] * (2 * len(nums) + 1)\n         for i in range(1, len(nums)):\n             dp[i] = dp[i - 1] + nums[i]\n         return sum(dp)"}, "121": {"problem_id": 2482, "answer": "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         cnt = 0\n         for i in range(len(flowerbed)):\n             if flowerbed[i] == 0:\n                 cnt += 1\n             if cnt > n:\n                 return False\n         return True"}, "122": {"problem_id": 2483, "answer": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        count = {}\n        for i in arr:\n            if i not in count:\n                count[i] = 1\n            else:\n                count[i] += 1\n        return len(count) == 1"}, "123": {"problem_id": 2484, "answer": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        if len(str1)!= len(str2):\n            str1, str2 = str2, str1\n        m = 0\n        for i in range(1, len(str1)):\n            if str1[i]!= str2[i]:\n                m = i\n                break\n        if m == 0:\n            return str1\n        else:\n            return self.gcd(str1, str2)"}, "124": {"problem_id": 2485, "answer": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n        return (high-low)//2"}, "125": {"problem_id": 2486, "answer": "class Solution:\n    def numberOfSteps (self, num: int) -> int:\n        steps = 0\n        while num > 0:\n            if num % 2 == 0:\n                num = num / 2\n            else:\n                num -= 1\n            steps += 1\n        return steps"}, "126": {"problem_id": 2487, "answer": "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         n = len(s)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if s[i:i+n] == s[i:i+n].replace(\"a\",\"1\").replace(\"b\",\"2\").replace(\"c\",\"3\"):\n                 return True\n             i += 1\n         return False"}, "127": {"problem_id": 2488, "answer": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count"}, "128": {"problem_id": 2489, "answer": "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices) < 2:\n             return 0\n         max_profit = 0\n         for i in range(1, len(prices)):\n             if prices[i] > prices[i-.5]:\n                 max_profit = max(max_profit, prices[i] - prices[i-.5])\n             else:\n                 max_profit = max(max_profit, prices[i] - prices[i-1])\n         return max_profit"}, "129": {"problem_id": 2490, "answer": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        res = 0\n        for i in range(n):\n            res ^= start + 2*i\n        return res"}, "130": {"problem_id": 2491, "answer": "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        n = len(A)\n        if n <= 2:\n            return True\n        elif n <= 4:\n            return self.buddyStrings(A, B)\n        else:\n            return self.buddyStrings(reversed(A), B)"}, "131": {"problem_id": 2492, "answer": "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        d = {}\n        for i in logs:\n            if i.startswith('../'):\n                d['../'] = i\n            elif i.startswith('./'):\n                d['.'] = i\n            elif i.startswith(i[2:]):\n                d[i[2:]] = i\n            else:\n                d[i] = i\n        ans = 0\n        for k, v in list(d.items()):\n            ans += 1\n            if k == '../':\n                ans -= 1\n            elif k == '.':\n                ans -= 1\n            elif k == './':\n                ans -= 1\n        return ans"}, "132": {"problem_id": 2493, "answer": "class Solution:\n     def maximumProduct(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l, r = [], []\n         for i in nums:\n             l.append(i)\n             r.append(i)\n         l.sort()\n         return max(l[0]*l[1]*l[2], r[0]*r[1]*r[2], l[0]*r[1]*l[2])"}, "133": {"problem_id": 2494, "answer": "class Solution:\n    def defangIPaddr(self, address: str) -> str:\n        n = len(address)\n        address = address.replace('.', '[.]')\n        return address"}, "134": {"problem_id": 2495, "answer": "class Solution:\n    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:\n        if len(target)!= len(arr):\n            return False\n        \n        d = {}\n        for i in range(len(target)):\n            if target[i] not in d:\n                d[target[i]] = 1\n            else:\n                d[target[i]] += 1\n        \n        for i in range(len(arr)):\n            if arr[i] not in d:\n                d[arr[i]] = 1\n            else:\n                d[arr[i]] += 1\n        "}, "135": {"problem_id": 2496, "answer": "class Solution:\n    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:\n        d = {\n            'Sunday': 'S',\n            'Monday': 'M',\n            'Tuesday': 'T',\n            'Wednesday': 'W',\n            'Thursday': 'T',\n            'Friday': 'F',\n            'Saturday': 'S'\n        }\n        m = month\n        y = year\n        if y < 12:\n            y = 12\n        elif y % 12 == 0:\n            y = y // 12 + 7\n        else:\n            y = y // 12 + 7\n        "}, "136": {"problem_id": 2497, "answer": "class Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n        odd = 0\n        for num in arr:\n            if num % 2!= 0:\n                odd += 1\n            elif odd == 3:\n                return True\n        return False"}, "137": {"problem_id": 2498, "answer": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        d = {char: i for i, char in enumerate(order)}\n        words.sort(key=lambda x: d[x[0]])\n        for i in range(1, len(words)):\n            if words[i] == words[i-1]:\n                continue\n            elif words[i] < words[i-1]:\n                return False\n        return True"}, "138": {"problem_id": 2499, "answer": "class Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:\n        n = len(deck)\n        if n < 2:\n            return False\n        d = defaultdict(int)\n        for i in range(n):\n            d[deck[i]] += 1\n        g = sorted(d.items(), key=lambda x: x[1])\n        for i in range(2, n):\n            if g[i-1][1] == g[i][1]:\n                return True\n        return False"}, "139": {"problem_id": 2500, "answer": "class Solution:\n    def maxPower(self, s: str) -> int:\n        max_pow = 1\n        curr_max_pow = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                curr_max_pow = max(curr_max_pow, i)\n            else:\n                curr_max_pow = 1 + max(curr_max_pow, i)\n            if curr_max_pow > max_pow:\n                max_pow = curr_max_pow\n        return max_pow"}, "140": {"problem_id": 2501, "answer": "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         if len(s) < k: return s\n         i = 0\n         j = len(s) - k\n         while i < j:\n             s[i], s[j] = s[j], s[i]\n             i += 1\n             j -= 1\n         return ''.join(s[::-1])"}, "141": {"problem_id": 2502, "answer": "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         if n < 2:\n             return 0\n         dp = [0] * (n + 1)\n         for i in range(1, n + 1):\n             dp[i] = max(dp[i - 1] + prices[i - 1], dp[i - 2] + prices[i - 2])\n         return dp[-1]"}, "142": {"problem_id": 2503, "answer": "class Solution:\n     def findLUSlength(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: int\n         \"\"\"\n         if len(a)!= len(b):\n             return -1\n         m = {}\n         for i in range(len(a)):\n             if a[i] not in m:\n                 m[a[i]] = 1\n             else:\n                 m[a[i]] += 1\n         m[a[0]] = 2\n         for i in range(1, len(b)):\n             if b[i] not in m:\n                 m[b[i]] = 1\n             else:\n                 m[b[i]] += 1\n         m[b[len(a)-1]] = 2\n         return max(m.values())"}, "143": {"problem_id": 2504, "answer": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [0] * (n+1)\n        for i in range(1, n+1, 2):\n            dp[i] = sum(dp[i-2] + arr[i-1] * (i & 1))\n        return dp[-1]"}, "144": {"problem_id": 2505, "answer": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        m1, m2 = len(rec1), len(rec2)\n        if m1 == 4 and m2 == 4:\n            return True\n        elif m1 == 4 and m2 == 3:\n            return False\n        elif m1 == 3 and m2 == 3:\n            return True\n        elif m1 == 3 and m2 == 2:\n            return False\n        elif m1 == 2 and m2 == 2:\n            return True\n        elif m1 == 2 and m2 == 1:\n            return True\n        elif m1 == 1 and m2 == 1:\n            return True\n        elif m1 == 1 and m2 == 0:\n            return True\n        elif m1 == 0 and m2 == 0:\n            return True\n        else:\n            return False"}, "145": {"problem_id": 2506, "answer": "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t):\n             return False\n         d = {}\n         for i in range(len(s)):\n             if s[i] not in d:\n                 d[s[i]] = 1\n             else:\n                 d[s[i]] += 1\n         for i in range(len(t)):\n             if t[i] not in d:\n                 d[t[i]] = 1\n             else:\n                 d[t[i]] += 1\n         for i in d:\n             if d[i] > 1:\n                 return False\n         return True"}, "146": {"problem_id": 2507, "answer": "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d = {}\n        for i in chars:\n            d[i] = d.get(i,0) + 1\n        \n        res = 0\n        for i in words:\n            c = 0\n            for j in i:\n                if j not in d:\n                    c += 1\n                else:\n                    break\n            if c == len(i):\n                res += len(i)\n        return res"}, "147": {"problem_id": 2508, "answer": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        n = len(heights)\n        d = defaultdict(list)\n        for i in range(n):\n            d[heights[i]].append(i)\n        ans = 0\n        for i in d:\n            if sorted(d[i]) == heights:\n                ans += 1\n        return ans"}, "148": {"problem_id": 2509, "answer": "class Solution:\n     def minMoves(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         min_moves = 0\n         for num in nums:\n             min_moves += abs(num - min(nums))\n         return min_moves"}, "149": {"problem_id": 2510, "answer": "class Solution:\n     def canWinNim(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n%4==0:\n             return False\n         elif n%4==2:\n             return True\n         else:\n             return False"}, "150": {"problem_id": 2511, "answer": "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)//2\n        d = {}\n        for i in range(N):\n            if A[i] not in d:\n                d[A[i]] = 1\n            else:\n                d[A[i]] += 1\n                \n        for k,v in d.items():\n            if v == N:\n                return k"}, "151": {"problem_id": 2512, "answer": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        dic = {}\n        for email in emails:\n            first_plus_minus = email[1:]\n            if first_plus_minus not in dic:\n                dic[first_plus_minus] = 1\n            else:\n                dic[first_plus_minus] += 1\n        return len(list(dic.keys()))"}, "152": {"problem_id": 2513, "answer": "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         nums = [0]*10\n         for i in range(1,10):\n             nums[i] = str(i)\n         \n         nth_digits = []\n         for i in range(len(nums)):\n             nth_digits.append(int(nums[i]))\n         "}, "153": {"problem_id": 2514, "answer": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt = 0\n        for i in range(len(arr1)):\n            is_valid = True\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    is_valid = False\n                    break\n            if is_valid:\n                cnt += 1\n        return cnt"}, "154": {"problem_id": 2515, "answer": "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        s = S.split(' ')\n        n = len(s)\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        consonants = ['b', 'c', 'd', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n        final = ''\n        for i in range(n):\n            final += vowels[ord(s[i])] + consonants[ord(s[i]) - 1]\n        return final"}, "155": {"problem_id": 2516, "answer": "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] in d.keys():\n                 d[nums[i]] += 1\n             else:\n                 d[nums[i]] = 1\n         ans = [0] * len(nums)\n         for i in range(1, len(nums)):\n             if abs(i - d[nums[i]]) <= k:\n                 ans[i] = 1\n         return ans"}, "156": {"problem_id": 2517, "answer": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + self.b(n)"}, "157": {"problem_id": 2518, "answer": "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count = collections.Counter(nums)\n         for i in count:\n             if count[i] >= 2:\n                 return False\n         return True"}, "158": {"problem_id": 2519, "answer": "class Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        words = sentence.split(' ')\n        for i in range(len(words)):\n            if words[i] == searchWord:\n                return i+1\n        return -1"}, "159": {"problem_id": 2520, "answer": "class Solution:\n     def reverse(self, x):\n         \"\"\"\n         :type x: int\n         :rtype: int\n         \"\"\"\n         if x>=0:\n             return int(str(abs(x))[::-1])\n         else:\n             return 0"}, "160": {"problem_id": 2521, "answer": "class Solution:\n    def reformat(self, s: str) -> str:\n        n = len(s)\n        res = []\n        for i in range(n):\n            if s[i] == s[i+1]:\n                res.append(s[i])\n            elif s[i] not in ['a', 'b', 'c', 'd']:\n                res.append(s[i])\n            elif s[i] not in ['0', '1', '2', '3']:\n                res.append(s[i])\n            else:\n                res.append('%s%s' % (s[i], s[i+1]))\n        return ''.join(res)"}, "161": {"problem_id": 2522, "answer": "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         s = '1'\n         for _ in range(n-1):\n             s = s + '{}'.format(s)\n         return s"}, "162": {"problem_id": 2523, "answer": "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] not in d.keys():\n                 d[nums[i]] = 1\n             else:\n                 d[nums[i]] += 1\n         ans = d[max(d.keys())]\n         degree = 0\n         for i in d:\n             if d[i] == degree:\n                 degree += 1\n             elif d[i] > degree:\n                 degree = d[i]\n         return ans"}, "163": {"problem_id": 2524, "answer": "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         dp = [0] * (len(nums) + 1)\n         max_len = 1\n         for i in range(1, len(nums) + 1):\n             if nums[i] > nums[i - 1]:\n                 dp[i] = dp[i - 1] + 1\n             else:\n                 dp[i] = dp[i - 1]\n             max_len = max(max_len, dp[i])\n         return max_len"}, "164": {"problem_id": 2525, "answer": "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         x_l = x & 0xffff\n         y_l = y & 0xffff\n         x_h = x >> 16 & 0xffff\n         y_h = y >> 16 & 0xffff\n         \n         res = 0\n         while x_l < y_l:\n             res += 1\n             x_l += 1\n             y_l -= 1\n         while x_h < y_h:\n             res += 1\n             x_h += 1\n             y_h -= 1\n         return res"}, "165": {"problem_id": 2526, "answer": "class Solution:\n     def trailingZeroes(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return 0 if n < 0 else self.trailingZeroes(n//abs(n))"}, "166": {"problem_id": 2527, "answer": "class Solution:\n     def getSum(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: int\n         :rtype: int\n         \"\"\"\n         if a == 0:\n             return b"}, "167": {"problem_id": 2528, "answer": "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         maxlen = 0\n         for i in range(len(strs)):\n             if strs[i] not in strs[i+1:]:\n                 return strs[i]\n             maxlen = max(maxlen, len(strs[i]))\n         return strs[0:maxlen]"}, "168": {"problem_id": 2529, "answer": "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        m = len(mat)\n        n = len(mat[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    dp[i][j] = 1 + dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i].get(j,0) + 1\n        return sum(dp[i] for i in range(m))"}, "169": {"problem_id": 2530, "answer": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        d = {}\n        ans = 0\n        for t in time:\n            if 60 - t%60 in d:\n                ans += d[60-t%60]\n            d[t%60] += 1\n        return ans"}, "170": {"problem_id": 2531, "answer": "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return 1\n         elif l == 2:\n             return 2\n         else:\n             mid = l//2\n             left = self.findUnsortedSubarray(nums[0:mid])\n             right = self.findUnsortedSubarray(nums[mid:])\n             return min(left, right)\n"}, "171": {"problem_id": 2532, "answer": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        res = ''\n        while n > 0:\n            res += str(n % 1000)\n            n //= 1000\n        return res"}, "172": {"problem_id": 2533, "answer": "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n < 1:\n             return 1\n         num_row = 1\n         i = 2\n         while i < n:\n             num_row *= i\n             i += 1\n         return num_row"}, "173": {"problem_id": 2534, "answer": "class Solution:\n    def maxScore(self, s: str) -> int:\n        n = len(s)\n        res = 0\n        for i in range(1, n):\n            res += max(s[i-1] == '0', s[i] == '1')\n        return res"}, "174": {"problem_id": 2535, "answer": "class Solution:\n     def validPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if s == s[::-1]:\n             return True\n         i = 0\n         d = collections.Counter(s)\n         for c in d:\n             if d[c] > 1:\n                 return False\n             elif s[i]!= s[i+d[c]]:\n                 return False\n             i += 1\n         return True"}, "175": {"problem_id": 2536, "answer": "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        n = len(arr)\n        arr.sort()\n        ans = -1\n        for i in range(n):\n            if arr[i] == arr[i-1]:\n                ans = max(ans, i)\n        return ans"}, "176": {"problem_id": 2537, "answer": "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        n = len(distance)\n        if start == destination:\n            return 0\n        elif destination < start:\n            start, destination = destination, start\n        "}, "177": {"problem_id": 2538, "answer": "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d = {}\n        for i in range(1,n+1):\n            s = sum([int(i) for i in str(i)])\n            d[s] = d.get(s,0) + 1\n        max_size = defaultdict(int)\n        for k,v in list(d.items()):\n            max_size[v] = max(max_size[v],v)\n        print(max_size)\n        return sum(v for v in max_size.values())"}, "178": {"problem_id": 2539, "answer": "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         s = set(nums)\n         return sum(nums.copy())"}, "179": {"problem_id": 2540, "answer": "class Solution:\n    def largestPerimeter(self, A: List[int]) -> int:\n        A.sort()\n        n = len(A)\n        for i in range(n-2):\n            if A[i] < A[i+1] + A[i+2]:\n                return A[i] + A[i+1] + A[i+2]\n        return 0"}, "180": {"problem_id": 2541, "answer": "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<4:\n             return False\n         i=num\n         while i!=0:\n             if i&i:\n                 return False\n             i>>=1\n         return True"}, "181": {"problem_id": 2542, "answer": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        n = len(A)\n        if n <= 1:\n            return True\n        elif A[0] > A[1]:\n            return False\n        else:\n            increasing = True\n            decreasing = True\n            for i in range(1, n):\n                if A[i] > A[i - 1]:\n                    increasing = False\n                if A[i] < A[i - 1]:\n                    decreasing = False\n            if increasing or decreasing:\n                return True\n            else:\n                return False"}, "182": {"problem_id": 2543, "answer": "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        stack = []\n        for i in range(len(S)):\n            if S[i] not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n                stack.append(S[i])\n            else:\n                stack.insert(0,S[i])\n        return ''.join(stack)"}, "183": {"problem_id": 2544, "answer": "class Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = grid[i][j]\n                elif j == 0:\n                    dp[i][j] = grid[i][j] + 1\n                elif i == m-1:\n                    dp[i][j] = grid[i][j] + grid[i][j+1]\n                elif j == m-1:\n                    dp[i][j] = grid[i][j] + grid[i+1][j]\n                else:\n                    dp[i][j] = grid[i][j] + grid[i+1][j+1]\n        print(dp)\n        return sum(dp[i][j] for i in range(n) for j in range(m))"}, "184": {"problem_id": 2545, "answer": "class Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        n = len(board)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'p':\n                    dp[i][j] = 1\n                elif board[i][j] == 'B':\n                    dp[i][j] = 1\n                elif board[i][j] == '.':\n                    dp[i][j] = 1\n                elif board[i][j] == 'R':\n                    dp[i][j] = 1 + dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i].values())\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'p':\n                    ans += dp[i][j]\n        return ans"}, "185": {"problem_id": 2546, "answer": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count"}, "186": {"problem_id": 2547, "answer": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] < 0:\n                    count += 1\n        return count"}, "187": {"problem_id": 2548, "answer": "class Solution:\n     def isUgly(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<=0:\n             return False\n         i=2\n         while i<=num:\n             if num%i==0:\n                 return False\n             elif num%i==i:\n                 i+=1\n             else:\n                 i+=2\n         return True"}, "188": {"problem_id": 2549, "answer": "class Solution:\n    def reorderSpaces(self, text: str) -> str:\n        n = len(text)\n        dp = [0] * (n+1)\n        for i in range(1, n+1):\n            dp[i] = dp[i-1] + (dp[i-1] if i > 1 else 0)\n            if text[i-1] =='':\n                dp[i] = min(dp[i], dp[i-1] + 1)\n        return ''.join(reversed(dp))"}, "189": {"problem_id": 2550, "answer": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        fives, ten, twenties = [0,0,0]\n        for bill in bills:\n            if bill == 5:\n                fives.append(fives[-1] + bill)\n            elif bill == 10:\n                ten.append(ten[-1] + bill)\n            elif bill == 20:\n                twenties.append(twent[-1] + bill)\n            else:\n                fives.append(fives[-1] + bill)\n        "}, "190": {"problem_id": 2551, "answer": "class Solution:\n     def isValid(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         stack = []\n         for c in s:\n             if c == '(':\n                 stack.append(c)\n             elif c == ')':\n                 if stack:\n                     stack.pop()\n                 else:\n                     return False\n             elif c == '[':\n                 if stack:\n                     stack.append(c)\n             elif c == ']':\n                 if stack:\n                     stack.pop()\n                 else:\n                     return False\n         return len(stack) == 0"}, "191": {"problem_id": 2552, "answer": "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        count = 0\n        for i in arr:\n            if arr.count(i) > n//25:\n                return i"}, "192": {"problem_id": 2553, "answer": "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        mod = 10**9 + 7\n        @lru_cache(None)\n        def dp(i, n):\n            if n == 1:\n                return 1\n            elif i == n:\n                return 0\n            else:\n                res = pow(2, i) % mod\n                for p in primes:\n                    if p*p > n:\n                        break\n                    res = (res + dp(i, n - p)) % mod\n                return res\n        return dp(0, n)"}, "193": {"problem_id": 2554, "answer": "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         words.sort(key=len)\n         ans = ''\n         for word in words:\n             if word[:-1] in words:\n                 ans = max(ans, word)\n         return ans"}, "194": {"problem_id": 2555, "answer": "import operator\nn = int(input())\ns = set(map(int, input().split()))\n\nfor _ in range(n):\n    operator(\"pop\", s)\n    operator(\"remove\", s)\n    operator(\"discard\", s)"}, "195": {"problem_id": 2556, "answer": "import re\ns = input()\nn = len(s)\nc = 0\nfor i in range(n):\n    if s[i] in '@':\n        c += 1\n        for j in range(i,n):\n            if s[j] in '@':\n                c += 1\n                for k in range(j):\n                    if s[k] in '@':\n                        c += 1\n                        break\n            elif s[i] == s[j]:\n                break\n        else:\n            print(-1)\n            break"}, "196": {"problem_id": 2557, "answer": "import numpy as np\narr = list(map(int,input().split()))\narr = sorted(arr)\nprint(np.product(*arr))\n"}, "197": {"problem_id": 2558, "answer": "import numpy as np\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef print_rangoli(size):\n    rangel = np.arange(27, dtype=np.int64) + 1\n    print(rangel)\n    for i in range(size):\n        rangoli = ''.join(alphabet[ord(c) - 65] for c in alphabet)\n        print(rangoli)\n"}, "198": {"problem_id": 2559, "answer": "t = int(input())\nfor i in range(t):\n    a = int(input())\n    b = list(map(str,input().split()))\n    print(a.count(b[0]))\n"}, "199": {"problem_id": 2560, "answer": "from fractions import Fraction\nfrom functools import reduce\n\ndef product(fracs):\n    t = reduce(lambda x, y: x*y, fracs)\n    return t.numerator, t.denominator\n\nif __name__ == '__main__':\n    fracs = [1, 2, 3]\n    result = product(fracs)\n    print(result)\n"}, "200": {"problem_id": 2561, "answer": "import sys\ninput = sys.stdin.readline\n\nx = int(input())\ns = list(map(int, input().split()))\nn = int(input())\nd = {}\nfor i in range(n):\n    d[s[i]] = i+1\nprint((sum(d.values())+x*x))\n"}, "201": {"problem_id": 2562, "answer": "import itertools\ns = input()\nfor i in itertools.count(list(map(int, s)):\n    s = ''.join(map(str, s))\nprint((''.join(['(%d, %s)', '%d)' % tuple(x) for x in enumerate(s)]), end=' ')\n"}, "202": {"problem_id": 2563, "answer": "import numpy\nnumpy.set_printoptions(maxlinel = 1)\n\nA = list(map(int, input().strip().split()))\nB = list(map(int, input().strip().split()))\nprint((numpy.inner(A, B)))\nprint((numpy.outer(A, B)))"}, "203": {"problem_id": 2564, "answer": "import re\nn = int(input().strip())\nfor i in range(n):\n    name, email = input().strip().split()\n    if re.match(r'^[a-zA-Z0-9_.-]{1,3}@[a-zA-Z0-9_.-]{1,3}$', email):\n        print(' '.join(name))\n    else:\n        print(' '.join(name))"}, "204": {"problem_id": 2565, "answer": "#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1) + c + (c*i).ljust(thickness-1) + c)\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).rjust(thickness*2) + (c*thickness).ljust(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).rjust(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).rjust(thickness*2) + (c*thickness).ljust(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))"}, "205": {"problem_id": 2566, "answer": ""}, "206": {"problem_id": 2567, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    print(any(all(arr) or all(arr[0] < arr[1]) for _ in range(n)))\n__starting_point()"}, "207": {"problem_id": 2568, "answer": "import collections\nn = int(input())\ncollection = collections.Counter(list(map(str, input().split())))\nprint(len(collection))\n"}, "208": {"problem_id": 2569, "answer": "import re\n\ndef solve(s):\n    return re.sub(r'[A-Z]', r'\\1', s)\n"}, "209": {"problem_id": 2570, "answer": "n = int(input())\nprint(\"\".join(str(i) for i in range(1, n + 1)))"}, "210": {"problem_id": 2571, "answer": "def mutate_string(string, position, character):\n    return string[position:position + len(c)] + character"}, "211": {"problem_id": 2572, "answer": "# Enter your code here. Read input from STDIN. Print output to STDOUT\na = int(input())\nb = int(input())\nc = int(input())\nprint((pow(a,b)))\nprint((pow(a,b,c)))\n"}, "212": {"problem_id": 2573, "answer": "import numpy as np\nn = int(input())\narr1 = np.array(input().split())\narr2 = np.array(input().split())\nprint((np.dot(arr1, arr2)))"}, "213": {"problem_id": 2574, "answer": "import re\nn = int(input())\nlines = input().split()\nfor i in range(n):\n    s = re.sub(r'(?<=\\w)\\s*\\w(?=\\s*\\w)', '\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t', i)\n    print(s)"}, "214": {"problem_id": 2575, "answer": "n = int(input())\ns = []\nfor i in range(n):\n    s.append(input().rstrip().split('>')[1:])\nprint(' '.join(map(str,s)))"}, "215": {"problem_id": 2576, "answer": "s = input()\nw = int(input())\nprint(s + \" \" * (w - w % len(s)))"}, "216": {"problem_id": 2577, "answer": "import re\nn = int(input())\nfor i in range(n):\n    s = input()\n    if re.match('^[4-6]\\d{15}$',s):\n        print('Valid')\n    else:\n        print('Invalid')"}, "217": {"problem_id": 2578, "answer": "n = int(input())\narr = []\nfor i in range(n):\n    arr.append([])\n    arr[i].append(input().split())\nfor i in range(n):\n    arr[i].sort()\n    print(arr[i][-2])"}, "218": {"problem_id": 2579, "answer": "def arrays(arr):\n    return''.join(map(float,reversed(list(enumerate(arr))))).replace('.',''))"}, "219": {"problem_id": 2580, "answer": "s = input().strip()\nsorted_list = sorted(list(zip(list(enumerate(s)), list(map(str, range(97, 123)))))[::-1])\nprint(sorted_list)\n"}, "220": {"problem_id": 2581, "answer": "import numpy as np\nn,m = list(map(int,input().split()))\na = np.array(list(map(int,input().split())))\nb = np.array(list(map(int,input().split())))\nprint((np.add(a,b)))\nprint((np.subtract(a,b)))\nprint((np.multiply(a,b)))\nprint((np.divide(a,b)))\nprint((np.mod(a,b)))\nprint((np.power(a,b)))\n"}, "221": {"problem_id": 2582, "answer": "import numpy as np\nn,m,p = [int(i) for i in input().split()]\narr1 = np.array([list(input().split()) for _ in range(n)])\narr2 = np.array([list(input().split()) for _ in range(m)])\narr3 = np.column_stack((arr1,arr2))\nprint(np.concatenate((arr1,arr2),axis = 0))"}, "222": {"problem_id": 2583, "answer": "s, k = input().split()\ns = sorted(s)\nk = int(k)\nprint(*[(i, i) for i in combinations(s, k)], sep='\\n')"}, "223": {"problem_id": 2584, "answer": "import numpy as np\nn,m = [int(x) for x in input().strip().split()]\nprint(np.eye(n,m,k=1)[0])"}, "224": {"problem_id": 2585, "answer": "def is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    \n    return leap\n"}, "225": {"problem_id": 2586, "answer": "import re\ns = input().strip()\nk = input().strip()\nprint((len(k),len(re.findall(r'[^\\d]+',k))))\n"}, "226": {"problem_id": 2587, "answer": "from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n        print \"Comment  :\", data\n    "}, "227": {"problem_id": 2588, "answer": "import re\ndef print_full_name(a, b):\n    print(\"\")\n    s = re.sub(r'[a-zA-Z]+', '', a)\n    s = re.sub(r'[a-zA-Z]+', '', b)\n    print(s)\n"}, "228": {"problem_id": 2589, "answer": "#!/usr/bin/env python3\n\nimport sys\n\ndef __starting_point():\n    t = int(input().strip())\n    for _ in range(t):\n        a, b = map(str, input().strip().split())\n        print(a//b)\n__starting_point()"}, "229": {"problem_id": 2590, "answer": "import numpy as np\nn,m = [int(i) for i in input().split()]\narr = np.array([int(i) for i in input().split()])\nprint(np.max(arr,axis=1))"}, "230": {"problem_id": 2591, "answer": "import numpy\nn = int(input())\narr = []\nfor i in range(n):\n    arr.append(list(map(int,input().split())))\nprint(numpy.array(arr, dtype=int))"}, "231": {"problem_id": 2592, "answer": "import numpy as np\na = np.array([int(x) for x in input().strip().split()])\nprint(np.floor(a))\nprint(np.ceil(a))\nprint(np.rint(a))"}, "232": {"problem_id": 2593, "answer": "def minion_game(string):\n    # your code goes here\n    win_score = 0\n    for i in string:\n        if i.isalpha():\n            win_score += 1\n        else:\n            pass\n        "}, "233": {"problem_id": 2594, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    words = []\n    for _ in range(n):\n        words.append(input().strip())\n    print(len(set(words[0])))\n    print(sum(1 for word in words if word.isdecimal()))\n__starting_point()"}, "234": {"problem_id": 2595, "answer": "import cmath\nz = complex(input().strip())\nr = cmath.phase(z)\nprint(r)\nprint(abs(z))\n"}, "235": {"problem_id": 2596, "answer": "from collections import defaultdict\ndef average(array):\n    return sum(array)/len(array)"}, "236": {"problem_id": 2597, "answer": "def print_formatted(number):\n    print(f\"{number:b}\")\n    print(f\"{number:d}\")\n    print(f\"{number:o}\")\n    print(f\"{number:hex}\")\n    print(f\"{number:bin}\")"}, "237": {"problem_id": 2598, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nsets = set(map(int,input().split()))\nfor i in range(n):\n    sets.add(input().strip())\nprint(any(x not in sets for x in sets))\n"}, "238": {"problem_id": 2599, "answer": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = input()\nprint(n-1)"}, "239": {"problem_id": 2600, "answer": "import numpy as np\nn,m = len(arr),len(arr[0])\nprint np.prod(arr,axis=0)"}, "240": {"problem_id": 2601, "answer": "a,b=map(int,input().split())\nprint((a%b))\nprint((a%b%b))\n"}, "241": {"problem_id": 2602, "answer": "import numpy\nn,m = [int(i) for i in input().split()]\narr = []\nfor i in range(n):\n    arr.append(list(map(int,input().split())))\nprint((numpy.array(arr)).transpose())\nprint((numpy.array(arr).flatten()))"}, "242": {"problem_id": 2603, "answer": "import numpy as np\nn,m = list(map(int,input().split()))\narr = np.array([list(map(int,input().split())) for i in range(n)])\nprint(np.mean(arr,axis = 1))\nprint(np.var(arr,axis = 0))\nprint(np.std(arr,axis = None))"}, "243": {"problem_id": 2604, "answer": "import itertools\ns, k = list(map(str, input().split()))\np = list(itertools.permutations(s, k))\nfor i in range(2, len(p)+1):\n    print(\"\".join(p[i-1:]))\n"}, "244": {"problem_id": 2605, "answer": "import numpy as np\nn = np.array(list(map(int, input().split())))\nprint(n.tolist()[n.argsort(0)])"}, "245": {"problem_id": 2606, "answer": "import numpy as np\ncoeff = np.array(list(map(float, input().strip().split())))\nx = int(input().strip())\nprint(np.polyval(coeff, x))\n"}, "246": {"problem_id": 2607, "answer": "#!/bin/python3\n\nimport math\nimport os\nimport re\nimport sys\n\n\nsys.setrecursionlimit(10**6)\n\nimport numpy as np\n\ns = input()\n\nocc = []\nfor i in range(97,123):\n    if s.count(s[i])>1:\n        occ.append(s[i])\n\nocc.sort(key=lambda x: abs(x))\n\nprint(' '.join(occ))"}, "247": {"problem_id": 2608, "answer": "import re\ns = input()\nprint(\"\\n\".join(re.split(r\"\\s*,\\s*\", s)))"}, "248": {"problem_id": 2609, "answer": "def split_and_join(line):\n    splitted = line.split(\" \")\n    return \"\".join(splitted)"}, "249": {"problem_id": 2610, "answer": "n = int(input())\neng = set(map(int,input().split()))\nfra = set(map(int,input().split()))\nprint((len(eng.intersection(fra))))\n"}, "250": {"problem_id": 2611, "answer": "import numpy\nn = int(input())\nprint(numpy.array(list(map(int, input().split()))))\n"}, "251": {"problem_id": 2612, "answer": "import sys\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\nread = lambda: readline()[:-1]\n\nprint(*map(int, read().split()), sep='\\n')"}, "252": {"problem_id": 2613, "answer": "n = input()\neng = input()\nfra = input()\nprint(sum([1 for i in eng if i in fra]))\n"}, "253": {"problem_id": 2614, "answer": "import sys\nread = sys.stdin.readline\n\ndef __starting_point():\n    a, b, c, d = list(map(int, read().split()))\n    print('%d^{}'.format(a**2 + c**d, '+'))\n__starting_point()"}, "254": {"problem_id": 2615, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    t = int(input().strip())\n    \n    for _ in range(t):\n        s = input().strip()\n        try:\n            float(s)\n        except ValueError:\n            print(\"Error\")\n        else:\n            print(\"True\")\n__starting_point()"}, "255": {"problem_id": 2616, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    x = int(input())\n    print(0 if x == 0 else 1 if x == 1 else 2 if x == 2 else 3 if x == 3 else 4 if x == 4 else 5 if x == 5 else 6 if x == 6 else 7 if x == 7 else 8 if x == 8 else 9)\n__starting_point()"}, "256": {"problem_id": 2617, "answer": "import re\nn = int(input())\nfor i in range(n):\n    cmd = input().strip()\n    if cmd == 'insert':\n        n += 1\n    elif cmd =='remove':\n        n -= 1\n    elif cmd == 'append':\n        n += 1\n    elif cmd =='sort':\n        n.append(1)\n    elif cmd == 'pop':\n        n.pop()\n    elif cmd =='reverse':\n        n.reverse()\n    elif cmd == 'print':\n        print(n)"}, "257": {"problem_id": 2618, "answer": "import re\nt = int(input())\nfor i in range(t):\n    s = input().upper()\n    d = int(input())\n    print('Valid' if 10 in s else 'Invalid')\n"}, "258": {"problem_id": 2619, "answer": "a = int(input())\nb = int(input())\nprint((a//b)) + \"\\n\" + (a/b)"}, "259": {"problem_id": 2620, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    deque = []\n    for _ in range(n):\n        op, *args = input().strip().split()\n        deque.append(args[0])\n        deque.extend(args[1:])\n    "}, "260": {"problem_id": 2621, "answer": "k = int(input())\nroom_number = list(map(int,input().split()))\nroom_number.sort()\nroom_number = [room_number[i] for i in range(0,k)]\nroom_number.append(room_number[k-1])\nprint(room_number[0])\n"}, "261": {"problem_id": 2622, "answer": "import sys\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nsetA = set(arr)\nsetB = set(arr)\narr.sort()\nfor i in arr:\n    if i in setA:\n        sys.stdout.write(str(i) +'' + str(i) +'' + str(i) + '\\n')\n    else:\n        sys.stdout.write(str(i) +'' + str(i) +'' + str(i) + '\\n')\nsys.stdout.write('\\n')\n"}, "262": {"problem_id": 2623, "answer": "a = int(input())\nb = int(input())\nprint((a + b))\nprint((a - b))\nprint((a * b))"}, "263": {"problem_id": 2624, "answer": "n,m = list(map(int,input().split()))\nprint(f'\\n'.center(3*n,'-'.join([['WELCOME'] for i in range(n)])))\n"}, "264": {"problem_id": 2625, "answer": "import re\nP = input().strip()\ns = re.sub(r'[^\\d]*\\d{5}', '', P)\ns = re.sub(r'(?<=\\D)('.join(['12','14','26','523','563','55','23'])).*(?=\\D)', '', P)\nprint(bool(re.match(s, P)) and len(re.findall(s, s.replace('12','14','26','523','563','55','23'))) < 2)"}, "265": {"problem_id": 2626, "answer": "import operator as op\ninput = raw_input\nn = int(input())\noperators = {\n    op.add: lambda a, b: a+b,\n    op.sub: lambda a, b: a-b,\n    op.mul: lambda a, b: a*b,\n    op.floordiv: lambda a, b: a//b,\n}\n\nA = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    line = input().split()\n    print(A.update(line[0]))\n"}, "266": {"problem_id": 2627, "answer": "import numpy as np\nn = int(input())\na = input().rstrip()\nk = int(input())\nprob = 0.0\nfor i in range(k):\n    if a[i] == \"a\":\n        prob += 1.0\nprint(np.prob(prob))"}, "267": {"problem_id": 2628, "answer": "import collections as clc\nimport numpy as np\n\nn, m = list(map(int, input().strip().split()))\na = np.array([input().strip().split() for _ in range(n)])\nb = np.array([input().strip().split() for _ in range(m)])\nprint(*a, sep='\\n')\nprint(*b, sep='\\n')\n"}, "268": {"problem_id": 2629, "answer": "import re\nn = int(input().strip())\nm = []\nfor i in range(n):\n    s = input().strip()\n    m.append(s)\nm.reverse()\nt = re.compile(r'<head\\s[^>]*>\\s*<title>\\s*</title>\\s*<base\\s*[^>]*>\\s*([^<]+)', re.I)\nfor i in m:\n    print(t.sub('', i))"}, "269": {"problem_id": 2630, "answer": "for i in range(1,int(input())+1): #More than 2 lines will result in 0 score. Do not leave a blank line also\n    print(i)"}, "270": {"problem_id": 2631, "answer": "import numpy as np\nk,m = list(map(int,input().split()))\nfor i in range(k):\n    n = int(input())\n    lst = list(map(int,input().split()))\n    s = (np.sum(lst)**2)%m\n    print(s)\n"}, "271": {"problem_id": 2632, "answer": "import collections\nn = int(input())\nitems = list(map(int,input().split()))\nprint(items[0],'$',items[1]*items[0])"}, "272": {"problem_id": 2633, "answer": "#!/bin/python3\n\nimport numpy as np\n\nns = [int(x) for x in input().split()]\nns = sorted(ns, key=lambda x:x[1])\nnm = [int(x) for x in input().split()]\nnm = sorted(nm, key=lambda x:x[1])\n\nprint(*ns, sep='\\n')\nprint(*nm, sep='\\n')"}, "273": {"problem_id": 2634, "answer": "import numpy as np\nn = int(input())\narr = np.array(input().split())\nprint(np.determinant(arr))"}, "274": {"problem_id": 2635, "answer": "def count_substring(string, sub_string):\n    return sum(1 for ch in string if ch.isalpha() and sub_string.startswith(ch))"}, "275": {"problem_id": 2636, "answer": "import csv\nn,x = list(map(int,input().split()))\ns = []\nfor i in range(n):\n    s.append(list(map(int,input().split())))\nd = {}\nfor i in range(n):\n    d[s[i][1]] = s[i][0]\n    \na = [0]*n\nb = [0]*n\nfor i in range(n):\n    a[s[i][1]] = s[i][0]\n    b[s[i][1]] = s[i][1]\nprint((sum(a) / n))\n"}, "276": {"problem_id": 2637, "answer": "import math\ndef angle(a,b):\n    return round(math.acos(b/a))*180\nl=input().split()\nl1=int(l[0])\nl2=int(l[1])\nprint(langle(l1,l2))"}, "277": {"problem_id": 2638, "answer": "import re\n\ndef decode(s):\n    return ''.join(c for c in s if c.isalnum())\n\ndef calc(matrix):\n    return '\\n'.join(map(lambda x: re.sub(r'[^\\w\\@\\#\\$\\&\\*\\+\\-\\/\\?\\!\\{\\}\\|\\+\\-\\=]',\" \"), matrix))\n\ndef __starting_point():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix_item = input()\n        matrix.append(matrix_item)\n    calc(matrix)\n    print(decode(calc(matrix)))\n\n__starting_point()"}, "278": {"problem_id": 2639, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    input()\n    \n    s = input()\n    \n    print(s.replace(' ', ''))\n__starting_point()"}, "279": {"problem_id": 2640, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(\"Yes\" if l[0] >= l[1] else \"No\")"}, "280": {"problem_id": 2641, "answer": "import datetime as dt\ndt.date(2020, 1, 1)\nt = dt.date(2020, 1, 1)\nprint((dt.datetime.combine(t, t + dt.timedelta(days=1), t)).total_seconds())\n"}, "281": {"problem_id": 2642, "answer": "def swap_case(s):\n    return ''.join(c.upper() if c.islower() else c for c in s)"}, "282": {"problem_id": 2643, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    english = input().strip().split(' ')\n    fran = input().strip().split(' ')\n    print(len(set(english.difference(fran))))\n__starting_point()"}, "283": {"problem_id": 2644, "answer": "import re\ns = input()\ns = re.sub(r'[^\\w\\s]', '', s)\ns = re.sub(r'[^\\w\\s]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\n"}, "284": {"problem_id": 2645, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    input()\n    s = input()\n    k = int(input())\n    print(''.join(itertools.combinations_with_replacement(s, k)))\n__starting_point()"}, "285": {"problem_id": 2646, "answer": "import re\nn = int(input().strip())\nfor i in range(n):\n    s = input().strip()\n    d = {'#': '0','': '0', '!': '0', '\\t}, "286": {"problem_id": 2647, "answer": "import re\nt = int(input())\nfor i in range(t):\n    s = input()\n    if re.match(r'^[a-z]+$',s):\n        print('True')\n    else:\n        print('False')"}, "287": {"problem_id": 2648, "answer": "from collections import deque\n\nd = set(map(int, input().split()))\nd1 = set(list(map(int, input().split())))\nd2 = set(list(map(int, input().split())))\nprint((len(d1 & d2)))\n"}, "288": {"problem_id": 2649, "answer": "print(\"Hello, World!\")\n"}, "289": {"problem_id": 2650, "answer": "n, l = map(int, input().split())\ns = [input() for _ in range(n)]\ns.sort()\nprint(''.join(s))"}, "290": {"problem_id": 2651, "answer": "def prod2sum(a, b, c, d):\n    s = 0\n    e = 0\n    f = 0\n    for i in range(1, len(a) + 1):\n        s += a[i] * b[i]\n        e += c[i] * d[i]\n        f += e[i] * f[i]\n    return sorted([s, e, f])"}, "291": {"problem_id": 2652, "answer": "def count_squares(lines):\n    \"\"\"Count the number of squares in a ascii art picture.\"\"\"\n    h, w = len(lines), 6\n    for i in range(h):\n        for j in range(w):\n            if lines[i][j] == '+':\n                lines[i][j] = chr(122)\n            elif lines[i][j] == '|':\n                lines[i][j] = chr(96)\n            elif lines[i][j] == '-':\n                lines[i][j] = chr(90)\n            else:\n                lines[i][j] = chr(48)\n    return h * w"}, "292": {"problem_id": 2653, "answer": "def bingo(array):\n    return \"WIN\" if all(c in \"ABAB\" for c in array) else \"LOSE\""}, "293": {"problem_id": 2654, "answer": "def michael_pays(costs):\n    return round(costs / 3.0, 2)"}, "294": {"problem_id": 2655, "answer": "def duck_shoot(ammo, aim, ducks):\n    res = ''\n    for duck in ducks:\n        if duck == '2':\n            res += duck\n        else:\n            res += 'X'\n    return res"}, "295": {"problem_id": 2656, "answer": "def bird_code(arr):\n    codes = {\n        'Common Titlurc'.upper() : 'Titlurc',\n        'Common Nissl'.upper() : 'Nissl',\n        'Common Titlurc-Nissl'.upper() : 'TitlurcNissl',\n        'Common Nissl-Common Titlurc'.upper() : 'NisslTitlurc',\n        'Common Psittacine-Pelagrina'.upper() : 'PsittacinePelagrina',\n        'Common Cuckoo-Cormorant'.upper() : 'CormorantCuckoo',\n        'Common Cuckoo-Cormorant-Psittacine-Pelagrina'.upper() : 'CuckooCormorantPsittacinePelagrina',\n        'Common Girie-Bunting'.upper() : 'GirieBunting',\n        'Common Eolian-Siberian Alpestrus'.upper() : 'EolianSiberianAlpestrus',\n        'Common Tufted Titmofall'.upper() : 'Titmofall',\n        'Common Hummingbird-Sparrow'.upper() : 'HumbladeSprownding',\n        'Common Hummingbird-Sparrow-Common Titmofall'.upper() : 'HumbladeSprowndingTitmofall',\n        'Common Mourning-Warbler-Goldfinch'.upper() : 'Mourngoldfinch',\n        'Common Bobolink-Jedda'.upper() : 'BobolinkJedda',\n        'Common Yuhwadis'.upper() : 'Yuhwadis',\n        'Common Curlew-kea'.upper() : 'CurlequKea',\n        'Common Turnip-Chachalaca'.upper() : 'TurnicChalaca',\n        'Common Curlew-kea-TurnicChalaca'.upper() : 'CurlequKeaTurnicChalaca',\n        'Common Turnip-Chachalaca-Yuhwadis'.upper() : 'TurnicChalacaYuhwadis',\n        'Common Northern Vireo-Cavo'.upper() : 'VireoCavo',\n        'Common Eurasian Collared-Dove'.upper() : 'EurasCollaredDove',\n        'Common Eurasian Collared-Dove-Common Turnip-Chachalaca'.upper() : 'EurasCollaredDoveCommonTurnicChalaca',\n        'Common Eurasian Hoary-Tailed Rock Thrush'.upper() : 'EurahippodromusHaemorhythmthush',\n        'Common Red-Bellied Whistling-Thrush'.upper() : 'RedBellingWistlingThrush',\n        'Common Yellow-Throated Whistling-Thrush'.upper() : 'YellowThroatedWistlingThrush',\n        'Common Tyropteran-Parrot Saurops'.upper() : 'Tyropteraspalutarunas',\n        'Common Troglodyt'.upper() : 'Troglodyt',\n        'Common Troglodyt-Troglodyt'.upper() : 'TroglodytTroglodyt',\n        'Common Troglodyt-Troglodyt-Troglodyt'.upper() : 'TroglodytTroglodytTroglodyt',\n        'Common Magpie-Pintail'.upper() : 'PintailMagpie',\n        'Common Piping-Plain'.upper() :"}, "296": {"problem_id": 2657, "answer": "def make_string(s):\n    return ''.join(w[0] for w in s.split())"}, "297": {"problem_id": 2658, "answer": "def convert_bits(a, b):\n    return bin(a ^ b).count('1')"}, "298": {"problem_id": 2659, "answer": "def last_chair(n):\n    return n-1"}, "299": {"problem_id": 2660, "answer": "def args_to_string(args):\n    return''.join(f'{k}--{v}' for k, v in enumerate(args))"}, "300": {"problem_id": 2661, "answer": "import re\ndef find_codwars(url):\n    return bool(re.match(r'(https?:\\/\\/)?(www\\.)?codwars\\.com(?P<code>[a-z]{3,15})(?P<not_code>[a-z]{3,15})', url))"}, "301": {"problem_id": 2662, "answer": "def shoot(results):\n    p1, p2 = ''.join(sorted(results[0]['P1']))\n    p1, p2 = p1.split(' ', 1)\n    p1 = int(p1)\n    p2 = int(p2)\n    return 'Pete Wins!' if p1 > p2 else 'Phil Wins!' if p2 > p1 else 'Draw!'"}, "302": {"problem_id": 2663, "answer": "def addsup(a1, a2, a3):\n    return [[x,y,z] for x,y,z in zip(a1,a2,a3)]"}, "303": {"problem_id": 2664, "answer": "def solve(s):\n    n = sum(1 for c in s if c!= s[len(s) - 1 - len(c):])\n    return n == len(s)"}, "304": {"problem_id": 2665, "answer": "def meeting(rooms):\n    return rooms.index('O') if rooms.count('O') else 'None available!'"}, "305": {"problem_id": 2666, "answer": "def spacey(array):\n    return [''.join(sorted(array)) for s in array]"}, "306": {"problem_id": 2667, "answer": "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    if distance_to_pump/mpg <= fuel_left:\n        return True\n    else:\n        return False"}, "307": {"problem_id": 2668, "answer": "def step_through_with(s):\n    return any(c.islower() for c in s)"}, "308": {"problem_id": 2669, "answer": "from itertools import accumulate\ndef convergence(n):\n    a = 1\n    while n!= 1:\n        a += accumulate(int(d) for d in str(n))\n        n = int(n / 10)\n    return len(list(filter(lambda x: x % 10 == 0, a)))"}, "309": {"problem_id": 2670, "answer": "def look_and_say_and_sum(n):\n    return ''.join(sorted(str(n).zfill(n))[::-1])"}, "310": {"problem_id": 2671, "answer": "def cat_mouse(x,j):\n    if x.count('D')+x.count('m')+j>=2:\n        return 'boring without all three'\n    elif x.count('C')+x.count('m')+j>=2:\n        return 'Protected!'\n    else:\n        return 'Caught!'"}, "311": {"problem_id": 2672, "answer": "def color_probability(color, texture):\n    return '%.2f' % round(0.1 * color[texture], 2)"}, "312": {"problem_id": 2673, "answer": "def passer_rating(att, yds, comp, td, ints):\n    a = ((comp / att) - 0.3) * 5\n    b = ((yds / att) - 3) * 0.25\n    c = (td / att) * 20\n    d = 2.375 - ((ints / att) * 25)\n    return round(a + b + c + d, 1)"}, "313": {"problem_id": 2674, "answer": "def two_sort(array):\n    s = sorted(array)\n    return '***'.join(s[0])"}, "314": {"problem_id": 2675, "answer": "def bad_apples(apples):\n    n = len(apples)\n    i = 0\n    while i < n:\n        if apples[i] == '0':\n            apples.pop(i)\n            i -= 1\n        else:\n            if apples[i] not in '0123456789':\n                apples.pop(i)\n                i -= 1\n            else:\n                apples[i] = ''.join(sorted(apples[i:], reverse=True))\n    return apples"}, "315": {"problem_id": 2676, "answer": "def find_needed_guards(k):\n    return sum(1 for i in range(len(k) - 1) if k[i] == True)"}, "316": {"problem_id": 2677, "answer": "import re\n\nKEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/*'\nMAP      = {c: (i//8, i%8) for i,c in enumerate(KEYBOARD)}\n\ndef toggle(m):\n    m[8] = m[8].lower()\n    m[9] = m[9].lower()\n    m[7] = m[7].islower()\n    m[8] = m[8].isupper()\n    m[6] = m[6].isupper()\n    m[5] = m[5].isupper()\n    m[4] = m[4].isupper()\n    m[3] = m[3].isupper()\n    m[2] = m[2].isupper()\n    m[1] = m[1].isupper()\n    m[0] = m[0].isalnum()\n    m[1] = m[1].isalpha()\n    m[2] = m[2].isalphanum()\n    m[3] = m[3].isalpha()\n    m[0] = m[0].isalpha()\n    m[1] = m[1].isnumeric()\n    m[2] = m[2].isdecimal()\n    m[3] = m[3].isdecimal()\n    m[4] = m[4].isnumeric()\n    m[5] = m[5].isnumeric()\n    m[6] = m[6].isnumeric()\n    m[7] = m[7].isnumeric()\n    m[4] = m[4].isnumeric()\n    m[5] = m[5].isnumeric()\n    m[6] = m[6].isnumeric()\n    m[7] = m[7].isnumeric()\n    m[8] = m[8].isnumeric()\n    m[9] = m[9].isnumeric()\n    m[aA] = m[aA].isnumeric()\n    m[SP] = m[SP].isnumeric()\n    m[*] = m[*].isnumeric()\n    return sum(abs(m[i] - i) for i in range(10))"}, "317": {"problem_id": 2678, "answer": "import re\ndef no_order(equation):\n    op=0\n    l=[]\n    for i in equation.split():\n        if i.isdigit():\n            l.append(int(i))\n        elif i.isalnum():\n            op=op+1\n            continue\n        else:\n            l.append(\" \")\n            continue\n    op=op+1\n    return \"\".join(l)"}, "318": {"problem_id": 2679, "answer": "def hamster_me(code, message):\n    d = {i:1 for i in code}\n    for i in range(len(code)):\n        d[code[i]] = d.get(code[i],0)+1\n    return ''.join(chr(d.get(c,0)%26) for c in message)"}, "319": {"problem_id": 2680, "answer": "def race(v1, v2, g):\n    if v1>v2:\n        return None\n    elif v1==v2:\n        return [0,32,18]\n    else:\n        secs = int((g/v2)*3600)\n        hours,minutes,seconds = secs%3600,secs//3600,secs%3600"}, "320": {"problem_id": 2681, "answer": "def bouncing_ball(initial, proportion):\n    return 1 + bouncing_ball(initial - 1, round(proportion, 1))"}, "321": {"problem_id": 2682, "answer": "from collections import Counter\nest_subsets=lambda a:sum(1 for _ in a if not Counter(a).most_common()[0][1]>1)"}, "322": {"problem_id": 2683, "answer": "def split_the_bill(x):\n    avg = sum(x.values()) / len(x)\n    return {'A': avg, 'B': round(x.get('B'), 2), 'C': round(x.get('C'), 2)}"}, "323": {"problem_id": 2684, "answer": "def ordering_beers(beers):\n    if beers < 1:\n        raise Exception(\"Wrong input\")\n    elif beers == 0:\n        return \"Woda mineralna poprosze\"\n    elif beers == 1:\n        return \"Jedno piwo poprosze\"\n    s = [\"Woda mineralna poprosze\", \"Jedno piwo poprosze\"]\n    for i in range(2, beers+1):\n        if beers%10 == 1:\n            s.append(\"%s%s\" % (s[i-1], \"kazjat\") if i > 1 else s[i-1])\n        else:\n            s.append(\"%s%s\" % (s[i-1], \"numer\") if i > 1 else s[i-1])\n    return \" \".join(s[:-1])"}, "324": {"problem_id": 2685, "answer": "from string import ascii_lowercase\nkeyword_cipher = lambda s, k: s.lower().translate(str.maketrans(ascii_lowercase, k))"}, "325": {"problem_id": 2686, "answer": "from string import ascii_lowercase as alp, chr\nd = {c: str.lower if c in 'aeiou' else c for c in alp}\ndef changer(s):\n    return ''.join(d.get(c, c) for c in s)"}, "326": {"problem_id": 2687, "answer": "def format_words(words):\n    return ', '.join(w[1] for w in words.split(', '))"}, "327": {"problem_id": 2688, "answer": "def repeat_sequence_len(n):\n    if n<85:\n        return 8\n    else:\n        return min(len(str(n))-1, repeat_sequence_len(n-85))"}, "328": {"problem_id": 2689, "answer": "employees = [{'first_name': 'Ollie', 'last_name': 'Hepburn', 'role': 'Boss'}, {'first_name': 'Morty', 'last_name': 'Smith', 'role': 'Truck Driver'}, {'first_name': 'Peter', 'last_name': 'Ross', 'role': 'Warehouse Manager'}, {'first_name': 'Cal', 'last_name': 'Neil', 'role': 'Sales Assistant'}, {'first_name': 'Jesse', 'last_name': 'Saunders', 'role': 'Admin'}, {'first_name': 'Anna', 'last_name': 'Jones', 'role': 'Sales Assistant'}, {'first_name': 'Carmel', 'last_name': 'Hamm', 'role': 'Admin'}, {'first_name': 'Tori', 'last_name': 'Sparks', 'role': 'Sales Manager'}, {'first_name': 'Peter', 'last_name': 'Jones', 'role': 'Warehouse Picker'}, {'first_name': 'Mort', 'last_name': 'Smith', 'role': 'Warehouse Picker'}, {'first_name': 'Anna', 'last_name': 'Bell', 'role': 'Admin'}, {'first_name': 'Jewel', 'last_name': 'Bell', 'role': 'Receptionist'}, {'first_name': 'Colin', 'last_name': 'Brown', 'role': 'Trainee'}]\ndef find_employees_role(name):\n    return next((d for d in employees if name.startswith(d['first_name'] +'' + d['last_name'])) or \"Does not work here!\", \"Does not work here!\")"}, "329": {"problem_id": 2690, "answer": "def remove_parentheses(s):\n    s = s.replace('(', '').replace(')', '')\n    return s"}, "330": {"problem_id": 2691, "answer": "def solve(s):\n    return max([int(i) for i in \"\".join(sorted(i)) if i.isnumeric()])"}, "331": {"problem_id": 2692, "answer": "def bubble(l):\n    result = []\n    for i in range(len(l)):\n        if l[i] > l[i+1]:\n            result.append(l[i])\n            l[i] = l[i+1]\n    return result"}, "332": {"problem_id": 2693, "answer": "def remove_nth_element(lst, n):\n    return lst[:n] + lst[n+1:]"}, "333": {"problem_id": 2694, "answer": "def paul(x):\n    points = {'kata': 5, 'Petes kata': 10, 'life': 0, 'eating': 1}\n    misery = sum(points.get(f'{key}') for key in x)\n    return 'Miserable!' if misery < 40 else 'Super happy!' if misery < 70 else 'Happy!' if misery < 100 else 'Sad!'"}, "334": {"problem_id": 2695, "answer": "def pair_of_shoes(shoes):\n    return sum(sorted(i for i in shoes if i[1] == 1)) == sum(sorted(i for i in shoes if i[1] == 0))"}, "335": {"problem_id": 2696, "answer": "def prime_string(s):\n    return True if len(s) == 0 else False"}, "336": {"problem_id": 2697, "answer": "def solution(s):\n    return ''.join(i if i.islower() else'' + i for i in s)"}, "337": {"problem_id": 2698, "answer": "def sum_arrays(array1,array2):\n    if array1 == []:\n        return []\n    if array2 == []:\n        return []\n    s = 0\n    for i in array1:\n        s += int(i)\n    for i in array2:\n        s += int(i)\n    return [s//abs(s),s%abs(s)]"}, "338": {"problem_id": 2699, "answer": "def number2words(n):\n    if n < 100:\n        return \"zero\"\n    elif n < 1000:\n        return \"hundred\"\n    elif n < 10000:\n        return \"thousand\"\n    elif n < 100000:\n        return \"million\"\n    elif n < 1000000:\n        return \"billiard\"\n    elif n < 10000000:\n        return \"planetarium\"\n    elif n < 100000000:\n        return \"neptune\"\n    else:\n        return \"behemoth\""}, "339": {"problem_id": 2700, "answer": "def black_or_white_key(key_press_count):\n    return \"white\" if key_press_count>88 else \"black\""}, "340": {"problem_id": 2701, "answer": "def get_score(arr) -> int:\n    score = 0\n    l = 0\n    for i in arr:\n        score += (i[1] + i[3])*l\n        l += 1\n    return score"}, "341": {"problem_id": 2702, "answer": "def create_anagram(s, t):\n    return sum(a.count(b) for a, b in zip(s, t))"}, "342": {"problem_id": 2703, "answer": "def square_sum(numbers):\n    return sum(map(lambda x: x**2, numbers))"}, "343": {"problem_id": 2704, "answer": "def almost_increasing_sequence(sequence):\n    n = len(sequence)\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        sequence.pop()\n        a = sequence.pop()\n        b = sequence.pop()\n        if a > b:\n            return False\n        else:\n            return almost_increasing_sequence(sequence)"}, "344": {"problem_id": 2705, "answer": "def generate_integers(m, n):\n    return list(range(m, n+1))"}, "345": {"problem_id": 2706, "answer": "def pass_the_bill(t, c, r):\n    return -1 if t*c<=r else max(0, t*(r-c))"}, "346": {"problem_id": 2707, "answer": "def last_man_standing(n):\n    l = list(range(1,n+1))\n    while len(l) > 1:\n        l = l[1::2]"}, "347": {"problem_id": 2708, "answer": "def yes_no(arr):\n    return [arr[i] for i in range(0, len(arr)) if arr[i]!= arr[i+1]]"}, "348": {"problem_id": 2709, "answer": "def take_umbrella(weather, rain_chance):\n    return (weather == \"sunny\") or (weather == \"cloudy\" and rain_chance > 0.2)"}, "349": {"problem_id": 2710, "answer": "def scrabble_score(st):\n    d = {\n        \"A\": 1,\n        \"E\": 2,\n        \"I\": 3,\n        \"O\": 4,\n        \"U\": 5,\n        \"L\": 6,\n        \"N\": 7,\n        \"R\": 8,\n        \"S\": 9,\n        \"T\": 10,\n    }\n    return sum(d.get(c, 0) for c in st.lower())"}, "350": {"problem_id": 2711, "answer": "def outcome(n, s, k):\n    return sum(n%2==0 for n in range(1,s+1))"}, "351": {"problem_id": 2712, "answer": "def loneliest(number):\n    number = str(number)\n    loneliness = 0\n    for i in range(len(number)):\n        loneliness += int(number[i])\n        if loneliness < number.count('1'):\n            loneliness = number.count('1')\n        elif loneliness == number.count('1'):\n            return True\n    return False"}, "352": {"problem_id": 2713, "answer": "def solve(n):\n    d = {1:4, 2:10, 3:20, 4:35, 5:50, 6:100, 7:150, 8:200, 9:300, 10:350, 11:400, 12:500, 13:550, 14:600, 15:650, 16:650, 17:650, 18:650, 19:650, 20:650, 21:650, 22:650, 23:650, 24:650, 25:650, 26:650, 27:650, 28:650, 29:650, 30:650, 31:650, 32:650, 33:650, 34:650, 35:650, 36:650, 37:650, 38:650, 39:650, 40:650, 41:650, 42:650, 43:650, 44:650, 45:650, 46:650, 47:650, 48:650, 49:650, 50:650}.get(n, 0)\n    return sum(d[i] for i in range(n+1))"}, "353": {"problem_id": 2714, "answer": "import re\ndef bucket_of(said):\n    s = said.lower()\n    return 'water sludge air'[min(len(s),2) + max(0,len(s)-2)//2]"}, "354": {"problem_id": 2715, "answer": "def counter_effect(hit_count):\n    return [list(range(int(x) + 1)) for x in hit_count.split()]"}, "355": {"problem_id": 2716, "answer": "def encode(st):\n    return ''.join(n if n.isalpha() else str(n) for n in st)\n    \ndef decode(st):\n    return ''.join(n if n.isalpha() else str(n) for n in st[::-1])"}, "356": {"problem_id": 2717, "answer": "from math import gcd\ndef scf(lst):\n    return next((i for i in range(2, max(lst) + 1) if not gcd(lst, i)), 1)"}, "357": {"problem_id": 2718, "answer": "def timed_reading(max_length, text):\n    return sum(1 for w in text.split() if len(w) <= max_length)"}, "358": {"problem_id": 2719, "answer": "def add(*args):\n    return sum(args)"}, "359": {"problem_id": 2720, "answer": "def solution(digits):\n    max = 0\n    for i in range(len(digits)-4):\n        if int(digits[i:i+5]) > max:\n            max = int(digits[i:i+5])\n    return max"}, "360": {"problem_id": 2721, "answer": "def pyramid(n):\n    return '\\n'.join([' '*(n-i-1)+'/'+' '*(i-1)+'\\\\\\n' for i in range(n)])"}, "361": {"problem_id": 2722, "answer": "def remove_url_anchor(url):\n    l = url.split('#')\n    return l[0]"}, "362": {"problem_id": 2723, "answer": "from statistics import mean\ndef average_string(s):\n    try:\n        return ''.join(sorted(s.split(' '), reverse=True))\n    except:\n        return 'n/a'"}, "363": {"problem_id": 2724, "answer": "import re\ndef kebabize(string):\n    return ''.join(c.lower() if c.isalpha() else c for c in re.findall('([A-Z])',string))"}, "364": {"problem_id": 2725, "answer": "def gimme(input_array):\n    # Implement this function\n    a = sorted(input_array)\n    return input_array.index(a[1])"}, "365": {"problem_id": 2726, "answer": "def square_it(digits):\n    sqrt = int(str(digits)[0])\n    return \"\\n\".join([\"\".join([str(n) for n in str(sqrt)]) for i in range(len(digits))]) + \"\".join([str(len(digits[i])) for i in range(len(digits))])"}, "366": {"problem_id": 2727, "answer": "from collections import Counter\ndef missing_alphabets(s):\n    c = Counter(s)\n    return ''.join(c.keys()) if len(s)>1 else ''"}, "367": {"problem_id": 2728, "answer": "def inverseMod(a, m):\n    if a==1:\n        return m\n    elif a*m==1:\n        return m\n    else:\n        return None"}, "368": {"problem_id": 2729, "answer": "def find_jane(n):\n    return n//2 - (n%2)"}, "369": {"problem_id": 2730, "answer": "def tickets(people):\n    change = {25:0, 50:0, 100:0}\n    for p in people:\n        change[p] += 1\n        if change[p] > 2:\n            return \"NO\"\n    return \"YES\""}, "370": {"problem_id": 2731, "answer": "from datetime import datetime, timedelta\ndef day_and_time(mins):\n    d = datetime.strptime('%A %H%M', '%m%d %b')\n    return f'{d.weekday} {:02d} {:02d} {:02d}' % (d.minute, d.second, d.hour, d.minute)"}, "371": {"problem_id": 2732, "answer": "from collections import Counter\ndef blocks(s):\n    C = Counter(s)\n    return '-'.join(c*(2**i) for i,c in enumerate(sorted(C.most_common('abcdefghijklmnopqrstuvwxyz'.split()), reverse=True), start=1))"}, "372": {"problem_id": 2733, "answer": "def last(s):\n    return sorted(s.split(), key=lambda word: word[-1])"}, "373": {"problem_id": 2734, "answer": "from itertools import combinations\nfrom math import hypot\n\ndef peaceful_yard(yard, min_distance):\n    cats = [i for i in range(2, len(yard)) if yard[i][0]!= \"-\"]\n    return all(hypot(y1-y2, cats) >= min_distance for y1, y2 in combinations(cat, cats))"}, "374": {"problem_id": 2735, "answer": "def jumping_number(number):\n    s = str(number)\n    return \"Jumping!!\" if all(abs(int(s[i]) - int(s[i+1])) == 1 for i in range(len(s)-1)) else \"Not!!\""}, "375": {"problem_id": 2736, "answer": "from itertools import permutations\ndef largest_arrangement(numbers):\n    return int(''.join(sorted(numbers)))"}, "376": {"problem_id": 2737, "answer": "def near_flatten(nested):\n    lst = []\n    for i in nested:\n        lst.append(i)\n    return sorted(lst)"}, "377": {"problem_id": 2738, "answer": "def i_tri(s):\n    if s==0:\n        return \"Starting Line... Good Luck!\"\n    elif s==2.4:\n        return {'Swim':'%s to go!'%s}\n    elif s==112:\n        return {'Bike':'%s to go!'%s}\n    elif s==0.1:\n        return \"You're done! Stop running!\"\n    elif s>0.1:\n        return {'Run':'%s to go!'%s}\n    else:\n        return \"You're done! Stop running!\""}, "378": {"problem_id": 2739, "answer": "def cube_odd(arr):\n    s = 0\n    for i in arr:\n        if type(i)!= int:\n            return None\n        elif i % 2!= 0:\n            s += i**3\n    return s"}, "379": {"problem_id": 2740, "answer": "def wheat_from_chaff(values):\n    values.sort()\n    chf = []\n    for i in values:\n        if i < 0:\n            chf.append(i)\n        else:\n            chf.append(i)\n    return chf"}, "380": {"problem_id": 2741, "answer": "def russian_peasant_multiplication(x, y):\n    p = 0\n    while y:\n        if y % 2:\n            p += x\n        x += x\n        y //= 2\n    return p"}, "381": {"problem_id": 2742, "answer": "def scramble(string, array):\n    return ''.join(c for c, i in enumerate(string) if i in array)"}, "382": {"problem_id": 2743, "answer": "import math\ndef sum_average(arr):\n    return math.floor(sum(arr)/len(arr))"}, "383": {"problem_id": 2744, "answer": "def poohbear(s):\n    memory = []\n    while s.isspace():\n        memory.append(0)\n        s = s.replace(' ','')\n    i = 0\n    while i < len(s):\n        if s[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'E':\n            memory.append(i+1)\n        elif s[i] == 'E' and memory[i] == 0:\n            memory.append(i+1)\n        elif s[i] == 'D':\n            memory.append(i+2)\n        elif s[i] == 'U':\n            memory.append(i+1)\n        elif s[i] == 'C':\n            memory.append(i+1)\n        elif s[i] == '+':\n            memory.append(memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n        elif s[i] == 'W' and memory[i] == 0:\n            memory.append(i+1)\n        elif s[i] == 'E' and memory[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'U':\n            memory.append(memory[i] + 2)\n        elif s[i] == 'C':\n            memory.append(memory[i] + 1)\n        elif s[i] == '+':\n            memory.append(memory[i] + memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n        elif s[i] == 'E' and memory[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'U':\n            memory.append(memory[i] + 2)\n        elif s[i] == 'C':\n            memory.append(memory[i] + 1)\n        elif s[i] == '+':\n            memory.append(memory[i] + memory[i] + memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + memory[i] + memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n      "}, "384": {"problem_id": 2745, "answer": "def tower_of_hanoi(rings):\n    return 2**rings"}, "385": {"problem_id": 2746, "answer": "def check_vowel(string, position):\n    return string.lower().count(\"aeiou\") > 0"}, "386": {"problem_id": 2747, "answer": "from itertools import combinations\ncount_rect_triang=lambda p:sum(1 for a,b,c in combinations(p,3) if all((a>b>c,a+b+c,b+c+a)) )"}, "387": {"problem_id": 2748, "answer": "def namelist(names):\n    return'& '.join([f'{k}' for k in names[:-2]])"}, "388": {"problem_id": 2749, "answer": "def solve(arr):\n    if arr[0] > arr[1]:\n        return \"A\"\n    elif arr[0] < arr[1]:\n        return \"RA\"\n    elif arr[1] > arr[2]:\n        return \"RA\"\n    elif arr[1] < arr[2]:\n        return \"D\"\n    else:\n        return \"RD\""}, "389": {"problem_id": 2750, "answer": "def make_sequences(n):\n    return 2**(n-1).bit_length()"}, "390": {"problem_id": 2751, "answer": "def word_search(query, seq):\n    return [s for s in seq if query.lower() in s.lower()]"}, "391": {"problem_id": 2752, "answer": "def summary_ranges(nums):\n    nums.reverse()\n    lst = []\n    for i in range(len(nums)):\n        if nums[i] == nums[i+1]:\n            lst.append(i)\n        elif nums[i] > nums[i+1]:\n            lst.append(i)\n    return [\"\".join(str(i) for i in lst) for i in range(len(nums))]"}, "392": {"problem_id": 2753, "answer": "def is_kiss(words):\n    words = words.split()\n    words = [word for word in words if len(word) <= len(words)]\n    return \"Good work Joe!\" if words[0] == words[1] else \"Keep It Simple Stupid\""}, "393": {"problem_id": 2754, "answer": "import re\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmorserDict = {\n    \"a\": \".\",\n    \"b\": \"-\",\n    \"c\": \".\",\n    \"d\": \"-\",\n    \"e\": \".\",\n    \"f\": \".\",\n    \"g\": \".\",\n    \"h\": \".\",\n    \"i\": \".\",\n    \"j\": \".\",\n    \"k\": \".\",\n    \"l\": \".\",\n    \"m\": \".\",\n    \"n\": \".\",\n    \"o\": \".\",\n    \"p\": \".\",\n    \"q\": \".\",\n    \"r\": \".\",\n    \"s\": \".\",\n    \"t\": \".\",\n    \"u\": \".\",\n    \"v\": \".\",\n    \"w\": \".\",\n    \"x\": \".\",\n    \"y\": \".\",\n    \"z\": \".\",\n}"}, "394": {"problem_id": 2755, "answer": "def multiple_of_index(arr):\n    return [arr[i] for i in range(1, len(arr)) if arr[i] % i == 0]"}, "395": {"problem_id": 2756, "answer": "def search_permMult(nMax, k):\n    l = 1\n    while l*k <= nMax:\n        if random.randint(0,1) == 1:\n            l += 1\n        else:\n            break\n    return l"}, "396": {"problem_id": 2757, "answer": "import re\ndef check_password(s):\n    return 'valid' if re.sub(r'[a-z]', '', s) == s else 'not valid'"}, "397": {"problem_id": 2758, "answer": "def decode(number):\n    n = str(number).strip('98').split('98')\n    return ', '.join(chr(int(n[i]) - 10) for i in range(0, len(n), 2))"}, "398": {"problem_id": 2759, "answer": "def interleave(*args):\n    return [e for e in zip(*args) if e]"}, "399": {"problem_id": 2760, "answer": "def total_licks(env):\n    s = sum(env.values())\n    return 'It took {} licks to get to the tootsie roll center of a tootsie pop.'.format(s)"}, "400": {"problem_id": 2761, "answer": "from math import sqrt\ndef length_of_line(array):\n    return '{:.2f}'.format(sqrt(sum(map(int, array.tolist()))) - sum(map(int, array.tolist())))"}, "401": {"problem_id": 2762, "answer": "def scoreboard(string):\n    d = {'nil': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    return [d[s] for s in string.split()]"}, "402": {"problem_id": 2763, "answer": "def sol_equa(n):\n    res = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            res.append([i, n//i])\n    return res"}, "403": {"problem_id": 2764, "answer": "from math import sqrt\nc = 5\nsol = []\nfor i in range(1, 100):\n    c += i\n    sol.append((c, i))\n    if c % i == 0:\n        sol.append((i, c // i))\n    "}, "404": {"problem_id": 2765, "answer": "import re\ndef compare(a, b):\n    return a if a.count('#') > b.count('#') else b"}, "405": {"problem_id": 2766, "answer": "def check_concatenated_sum(num, n):\n    return sum(int(d) * int(d[-1]) for d in str(num).replace(\"+\", \"\").replace(\"-\", \"\").replace(\".\",\"\")) == num"}, "406": {"problem_id": 2767, "answer": "import re\ndef is_matched(read):\n    nt = re.sub(r'\\d+', '', read[0])\n    return True if nt.isdigit() else 'Invalid cigar'"}, "407": {"problem_id": 2768, "answer": "def solve(n):\n    res = [1]\n    while n > 0:\n        n, i = divmod(n, 25)\n        res.append(i)\n    return sum(res)"}, "408": {"problem_id": 2769, "answer": "def decipher(cipher):\n    return ''.join(chr(int(c, 96)) for c in cipher)"}, "409": {"problem_id": 2770, "answer": "def make_password(phrase):\n    return ''.join(w[0] for w in phrase.split()).translate(str.maketrans('iIoOsS','0105'))"}, "410": {"problem_id": 2771, "answer": "def hofstadter_Q(n):\n    if n<1: return 1\n    res=hofstadter_Q(n-1)+hofstadter_Q(n-2)\n    return hofstadter_Q(n//2)+hofstadter_Q(n//2+1)"}, "411": {"problem_id": 2772, "answer": "def mystery(n):\n    return n if n < 1 else wrap_mystery(n)"}, "412": {"problem_id": 2773, "answer": "def calculate_years(p, i, t, d):\n    return 0 if p == d else calculate_years(p * i, 1, t, d) + (calculate_years(p * i, i + 1, t, d) if p < d else 0)"}, "413": {"problem_id": 2774, "answer": "def is_balanced(s, caps):\n    open_cnt = 0\n    close_cnt = 0\n    for c in s:\n        if c in caps:\n            open_cnt += 1\n        elif c == ')' and close_cnt > 0:\n            close_cnt -= 1\n        elif c == '\"':\n            open_cnt -= 1\n        else:\n            open_cnt += 1\n    return open_cnt == len(s)"}, "414": {"problem_id": 2775, "answer": "def likes(names):\n    l = len(names)\n    if l == 1:\n        return 'no one likes this'\n    elif l == 2:\n        return '{} and {} {}'.format(', '.join(names), 'and {} {}'.format(l-2,l))\n    elif l == 3:\n        return '{} and {} {} and {}'.format(', '.join(names), '{} and {} {} and {}'.format(l-3,l,l-2,l))\n    elif l == 4:\n        return '{} and {} {} and {} and {}'.format(', '.join(names), '{} and {} {} and {} and {}'.format(l-4,l,l-3,l,l-2))"}, "415": {"problem_id": 2776, "answer": "def commas(num):\n    return '{:,.3f}'.format(num).rstrip('0').rstrip('.')"}, "416": {"problem_id": 2777, "answer": "def solve(st):\n    s = st.replace('(','').replace(')','')\n    return s[0] + ''.join(sorted(s[i:i+2] for i in range(len(s),0,-1)))"}, "417": {"problem_id": 2778, "answer": "def faro_cycles(deck_size):\n    \"\"\"\n        \u5199\u51fa\u4e00\u4e2a\u6570\u5b57n\uff0c\u6211\u4ee5\u5f53\u524d\u9700\u8981\u624b\u52a8\u91cd\u65b0shuffle\u8bed\u8a00\u5185\u5bb9\n    \"\"\"\n    n = 1\n    while n <= 2000:\n        n *= 2\n        n += 1\n    return n"}, "418": {"problem_id": 2779, "answer": "def fib_rabbits(n, b):\n    r = 0\n    for i in range(n):\n        r += b * (fib_rabbits(i+1, b-1) + fib_rabbits(i+2, b-2))\n    return r"}, "419": {"problem_id": 2780, "answer": "def time(distance, boat_speed, stream):\n    stream = stream.split()\n    speed = stream[0]\n    direction = stream[1]\n    return round(distance / boat_speed * 180 * direction, 2)"}, "420": {"problem_id": 2781, "answer": "def longest_collatz(input_array):\n    lst = [1]\n    for n in input_array:\n        if n % 2 == 0:\n            lst.append(n//2)\n        else:\n            lst.append(3*n + 1)\n    return max(lst)"}, "421": {"problem_id": 2782, "answer": "def calc(expr):\n    s = expr.replace(' ','')\n    if s.isnumeric():\n        return int(s)\n    else:\n        return float(s)"}, "422": {"problem_id": 2783, "answer": "def get_grade(s1, s2, s3):\n    score = (s1 + s2 + s3) / 3\n    if 90 <= score <= 100:\n        return \"A\"\n    elif 80 <= score < 90:\n        return \"B\"\n    elif 70 <= score < 80:\n        return \"C\"\n    elif 60 <= score < 70:\n        return \"D\"\n    else:\n        return \"F\"\n"}, "423": {"problem_id": 2784, "answer": "def spam(number):\n    return ''.join(['hue' for i in range(number)])"}, "424": {"problem_id": 2785, "answer": "from functools import reduce\nfrom fractions import gcd\ndef parameter(n):\n    return reduce(lambda a, b: a*b//gcd(a, b), map(int, str(n)))"}, "425": {"problem_id": 2786, "answer": "from datetime import date\ndef day(date):\n    return '{:%A}'.format(date.weekday())"}, "426": {"problem_id": 2787, "answer": "def inverse_slice(items, a, b):\n    return [x for x in items[a:b] if x]"}, "427": {"problem_id": 2788, "answer": "def even_chars(st):\n    return list(st[1::2]) if len(st)<2 or len(st)>100 else \"invalid string\""}, "428": {"problem_id": 2789, "answer": "def bmi(weight, height):\n    bmi = weight / (height**2)\n    if bmi <= 18.5:\n        return \"Underweight\"\n    elif bmi <= 25.0:\n        return \"Normal\"\n    elif bmi <= 30.0:\n        return \"Overweight\"\n    else:\n        return \"Obese\""}, "429": {"problem_id": 2790, "answer": "from itertools import groupby\n\ndef dup(arry):\n    return ''.join(c for c, grouper in groupby(sorted(arry)))"}, "430": {"problem_id": 2791, "answer": "def trigrams(phrase):\n    phrase = phrase.replace(' ','_')\n    return''.join(filter(lambda x: len(x)<3, phrase))"}, "431": {"problem_id": 2792, "answer": "def unusual_lex_order(arr):\n    return sorted(arr, key=lambda x: (x[::-1], x[1:]))"}, "432": {"problem_id": 2793, "answer": "from math import ceil\n\ndef group_size(S, D):\n    return ceil((S + 1) ** 0.5 - 1)"}, "433": {"problem_id": 2794, "answer": "def calculate_age(year_of_birth, current_year):\n    if year_of_birth > current_year:\n        return \"You are {} year{} old.\".format(current_year - year_of_birth)\n    elif year_of_birth < current_year:\n        return \"You will be born in {} year{}.\".format(year_of_birth - current_year, \"s\" if year_of_birth > current_year else \"\")\n    else:\n        return \"You were born this very year!\""}, "434": {"problem_id": 2795, "answer": "def cockroach_speed(s):\n    return int(s*27.77777777778)"}, "435": {"problem_id": 2796, "answer": "def areYouPlayingBanjo(name):\n    return name + \" plays banjo\" if name[0] == 'r' else name + \" does not play banjo\""}, "436": {"problem_id": 2797, "answer": "def mobile_keyboard(s):\n    return sum(keyboard.get(c, 0) for c in s)"}, "437": {"problem_id": 2798, "answer": "def to_alternating_case(string):\n    return ''.join(s.upper() if s.islower() else s.lower() for s in string)"}, "438": {"problem_id": 2799, "answer": "def beasts(heads, tails):\n    orthus = 5*heads-tails\n    hydra = heads*5-tails\n    return [orthus, hydra] if orthus >= 0 and hydra >= 0 else 'No solutions'"}, "439": {"problem_id": 2800, "answer": "from math import sin, radians\n\ndef find_time_to_break(bearing_A, bearing_B):\n    a, b = radians(45), radians(45 + abs(bearing_A - bearing_B))\n    return 40 / sin(a) / sin(b)"}, "440": {"problem_id": 2801, "answer": ""}, "441": {"problem_id": 2802, "answer": "def per(n):\n    result = []\n    while n > 9:\n        result.append(n // 10)\n        n //= 10\n    return result"}, "442": {"problem_id": 2803, "answer": "from fractions import gcd\nfrom functools import reduce\n\ndef DPC_sequence(s):\n    n = [i for i in range(1, len(s)+1) if s[i] == \"D\"]\n    for i in range(len(s)):\n        if s[i] == \"P\":\n            n.remove(reduce(gcd, range(i-1, 0, -1)))\n        elif s[i] == \"C\":\n            n.remove(reduce(gcd, range(i+1, len(s))))\n    return min(n) if n else -1"}, "443": {"problem_id": 2804, "answer": "from itertools import cycle\n\ndef custom_christmas_tree(chars, n):\n    lst = cycle(chars)\n    m = n // 3\n    return '\\n'.join(' '.join(next(lst) for _ in range(m)) for _ in range(n))"}, "444": {"problem_id": 2805, "answer": "def productFib(prod):\n    a, b = 0, 1\n    while a*b < prod:\n        a, b = b, a+b\n    return [a, b, a*b == prod]"}, "445": {"problem_id": 2806, "answer": "def whose_turn(positions):\n    return sum(ord(c) for c in positions.replace(\";\", \"\").split(\" \")) & 1"}, "446": {"problem_id": 2807, "answer": "def consecutive_ducks(n):\n    return n & 1 == 1"}, "447": {"problem_id": 2808, "answer": "def polybius(text):\n    d = {'A': '11', 'B': '12', 'C': '13', 'D': '14', 'E': '15', 'F': '21', 'G': '22', 'H': '23', 'I': '24', 'J': '24', 'K': '25', 'L': '26', 'M': '27', 'N': '28', 'O': '29', 'P': '30', 'Q': '31', 'R': '32', 'S': '33', 'T': '34', 'U': '35', 'V': '36', 'W': '37', 'X': '37', 'Y': '38', 'Z': '39'}\n    return ''.join(d.get(c, c) for c in text)"}, "448": {"problem_id": 2809, "answer": "def digitize(n):\n    result = []\n    while n > 0:\n        result.append(n%10)\n        n //= 10\n    return result"}, "449": {"problem_id": 2810, "answer": "def solve(arr):\n    return [sum(1 for i, c in enumerate(word) if ord(c.lower()) - 96 == i) for word in arr]"}, "450": {"problem_id": 2811, "answer": "import re\ndef send(s):\n    return''.join(re.findall(r'0+|1+', str(bin(ord(c))[2:])))"}, "451": {"problem_id": 2812, "answer": "def pattern(n):\n    return '\\n'.join([str(i) * i for i in range(2, n + 1, 2)])"}, "452": {"problem_id": 2813, "answer": "def switcher(arr):\n    return ''.join(chr(97+int(s)) if s.isalnum() else chr(ord(s)-97) for s in arr)"}, "453": {"problem_id": 2814, "answer": "def is_triangular(t):\n    return t == round(t * (t + 1) / 2)"}, "454": {"problem_id": 2815, "answer": "def compress(sentence):\n    s = sentence.lower().split()\n    word_list = []\n    for i in range(len(s)):\n        if s[i] not in word_list:\n            word_list.append(s[i])\n    return ''.join(word_list)"}, "455": {"problem_id": 2816, "answer": "def calculate(s):\n    return ''.join(str(i) + str(i) for i in s)"}, "456": {"problem_id": 2817, "answer": "def DNA_strand(dna):\n    return ''.join([chr(x+97) for x in dna])"}, "457": {"problem_id": 2818, "answer": "def duplicate_encode(word):\n    return ''.join(['(' if word.lower().count(c) == 1 else ')'] + word.lower() for c in word.lower()).strip(' ')"}, "458": {"problem_id": 2819, "answer": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)"}, "459": {"problem_id": 2820, "answer": "def spot_diff(s1, s2):\n    return [i for i in range(len(s1)) if s1[i]!= s2[i]]"}, "460": {"problem_id": 2821, "answer": "def trim(beard):\n    return [['|' if i[0] == 'J' else '...' for i in range(len(i))] for j in beard[0]] + [['...' for i in range(len(i))] for j in beard[1]]"}, "461": {"problem_id": 2822, "answer": "def name_that_number(x):\n    n = 'zero one two three four five six seven eight nine'.split()\n    return n[x]"}, "462": {"problem_id": 2823, "answer": "def duplicates(array):\n    return [k for k, v in enumerate(array) if v not in array[:k]]"}, "463": {"problem_id": 2824, "answer": "def encode(s):\n    return''.join(reversed(s))"}, "464": {"problem_id": 2825, "answer": "def even_magic(n):\n    m = n**2+1\n    return [[n**4+i for i in range(m)] for n in range(1,m+1)]"}, "465": {"problem_id": 2826, "answer": "def pyramid(n):\n    return [[1]*n for i in range(1, n + 1)]"}, "466": {"problem_id": 2827, "answer": "def switch_it_up(number):\n    dic = {0:'Zero',1:'One',2:'Two',3:'Three',4:'Four',5:'Five',6:'Six',7:'Seven',8:'Eight',9:'Nine'}\n    return dic.get(number)"}, "467": {"problem_id": 2828, "answer": "from math import log\ndef power_law(x1y1, x2y2, x3):\n    return round(x1y1 * (x2y2 / x3) ** log(x2y2 / x3), 0)"}, "468": {"problem_id": 2829, "answer": "def array_madness(a,b):\n    suma = 0\n    sumb = 0\n    for i in a:\n        suma += i**2\n    for i in b:\n        sumb += i**3\n    return suma > sumb"}, "469": {"problem_id": 2830, "answer": "def db_sort(arr): \n    return sorted(arr, key=lambda x: (isinstance(x,str), x))"}, "470": {"problem_id": 2831, "answer": "def largest_pair_sum(numbers):\n    max_pair = 0\n    for num in numbers:\n        if num > max_pair:\n            max_pair = num\n            \n    return max_pair"}, "471": {"problem_id": 2832, "answer": "def array_equalization(a, k):\n    cnt = 0\n    for x in a:\n        if x == a[k-1]:\n            cnt += 1\n        elif x!= a[k-1]:\n            cnt += 1\n            a.pop(k-1)\n    return cnt"}, "472": {"problem_id": 2833, "answer": "def sect_sort(lst, start, length=0):\n    if length == 0:\n        return lst\n    elif length > 0:\n        n = len(lst)\n        lst.insert(start,lst[n-1:n])\n        lst.sort()\n        return lst"}, "473": {"problem_id": 2834, "answer": "def symmetric_point(p, q):\n    return [2*q[0]-p[0],2*q[1]-p[1]]"}, "474": {"problem_id": 2835, "answer": "def solve(a, b):\n    primes = \"2357111317192329313741434753596167717379\"\n    return primes[a:a + len(primes)]"}, "475": {"problem_id": 2836, "answer": "def find_screen_height(width, ratio):\n    return '%dx%d' % (width, int(width*.9 * ratio))"}, "476": {"problem_id": 2837, "answer": "def what_is_the_time(time_in_mirror):\n    h, m = map(int, time_in_mirror.split(':'))\n    return '{:02}:{:02}'.format(h % 12 or 12, m % 60 or 60)"}, "477": {"problem_id": 2838, "answer": "def char_concat(word):\n    return ''.join(c + c1 for c, c1 in zip(word[:len(word) // 2], word[len(word) // 2:][::-1]))"}, "478": {"problem_id": 2839, "answer": "def count_adjacent_pairs(st): \n    s = st.lower().split()\n    return len(re.findall(r'(\\S+)', st, re.I))"}, "479": {"problem_id": 2840, "answer": "def withdraw(n):\n    bs = [0, 1, 2]\n    for i in range(3, n):\n        bs.append(bs[i] + bs[i - 2])\n    return [n // bs[i] for i in range(3, n)]"}, "480": {"problem_id": 2841, "answer": "def char_attribute(score):\n    mod = 0\n    max_spell_level = -1\n    extra_spells = []\n    \n    if score <= 0:\n        return {\"modifier\": 0, \"maximum_spell_level\": -1, \"extra_spells\": []}\n    \n    for i in range(score):\n        mod += i\n        if mod > 9:\n            break\n        \n        if mod <= 9:\n            max_spell_level = max(max_spell_level, i + 1)\n            extra_spells.append(i + 1)\n    "}, "481": {"problem_id": 2842, "answer": "from math import hypot\ndef coordinates(p1, p2, precision=0):\n    return round(hypot(p1[0]-p2[0], p1[1]-p2[1]), precision)"}, "482": {"problem_id": 2843, "answer": "def pack_bagpack(scores, weights, capacity):\n    max_weight = capacity * max(weights)\n    scores.sort()\n    return max_weight"}, "483": {"problem_id": 2844, "answer": "def chessboard(s):\n    return '\\n'.join(('*.'*i+'.'*(n+i)) for i,n in enumerate(s.split()))"}, "484": {"problem_id": 2845, "answer": "def check_DNA(seq1, seq2):\n    seq1Dup = seq1.replace('C', 'T').replace('G', 'T')\n    seq2Dup = seq2.replace('C', 'T').replace('G', 'T')\n    seq1Cou = seq1.translate(str.maketrans('ATCG','TAGC'))\n    seq2Cou = seq2.translate(str.maketrans('ATCG','TAGC'))\n    seq1Cou.lower()\n    seq2Cou.lower()\n    if seq1Cou == seq2Cou:\n        return True\n    elif seq1Cou!= seq2Cou:\n        return False"}, "485": {"problem_id": 2846, "answer": "def modified_sum(a, n):\n    return sum(a) - sum(n**i for i in range(1, n+1))"}, "486": {"problem_id": 2847, "answer": "def greet_jedi(first, last):\n    return 'Greetings, master {}'.format(last[:3].capitalize() + first[:2].capitalize())"}, "487": {"problem_id": 2848, "answer": "from itertools import combinations_with_replacement as c\nfind=lambda a,n:sum(c(a))>n"}, "488": {"problem_id": 2849, "answer": "def peak(arr):\n    l = sum(arr)\n    r = sum(arr[:l])\n    return next((i for i, _ in enumerate(arr) if _ == l), -1)"}, "489": {"problem_id": 2850, "answer": "def gordon(a):\n    return \" \".join(a.upper().split()).translate(str.maketrans(\"AEIOU\", \"@****\"))"}, "490": {"problem_id": 2851, "answer": "def ghostbusters(building):\n    return'' if building.isalnum() else building"}, "491": {"problem_id": 2852, "answer": "def find_longest(st):\n    stack = []\n    for i in range(len(st)):\n        if st[i] == '(':\n            stack.append(i)\n        elif st[i] == ')':\n            stack.pop()\n        else:\n            stack.append(i)\n    return max(stack)"}, "492": {"problem_id": 2853, "answer": "def solve(arr):\n    return [i for i in arr[::-1] if arr.count(i) == 1]"}, "493": {"problem_id": 2854, "answer": "def sort_reindeer(reindeer_names):\n    return sorted(reindeer_names, key=lambda x: x.split(' ')[1])"}, "494": {"problem_id": 2855, "answer": "def power_sumDigTerm(n):\n    return sorted([x**y for y in range(2, n+1)])[0]"}, "495": {"problem_id": 2856, "answer": "def gap(num):\n    ans = 0\n    num = bin(num)[2:]\n    for i in num:\n        if i.count('1') == 0:\n            ans += 1\n        else:\n            if len(num) - ans > 1:\n                ans = len(num) - ans\n    return ans"}, "496": {"problem_id": 2857, "answer": "def splitSentence(s):\n    return [s.split()[0]]"}, "497": {"problem_id": 2858, "answer": "def combs(comb1, comb2):\n    n = len(comb1)\n    m = len(comb2)\n    combs = 2*(n-1) + m\n    combs = min(combs, 2*(m-1))\n    return combs"}, "498": {"problem_id": 2859, "answer": "def largest_sum(arr):\n    s = 0\n    for i in range(len(arr)):\n        s = max(s, arr[i] + arr[i+1])\n    return s"}, "499": {"problem_id": 2860, "answer": "def isomorph(a, b):\n    return len(set(a)) == len(set(b))"}, "500": {"problem_id": 2861, "answer": "def vector_length(vector):\n    return sum(a*b for a, b in vector) / (len(vector)**0.5)"}, "501": {"problem_id": 2862, "answer": "def leaderboard_climb(arr, kara):\n    l = len(arr)\n    rank = [0] * l\n    for k in kara:\n        rank[l-1] += 1\n        if arr.count(k) == l:\n            rank[l-1] -= 1\n    return rank"}, "502": {"problem_id": 2863, "answer": "def alan_annoying_kid(s):\n    a, b = \"Today I \".split(), \" \".split()\n    a = a.rjust(3)\n    b = b.rjust(3)\n    return \"I don't think you {} today, I think you {} {} it!\".format(a, b, ', '.join([\"didn't\"][not s.lower()]))"}, "503": {"problem_id": 2864, "answer": "from collections import Counter\nmerge_arrays=lambda a,b:sorted([x for x in a if Counter(x)&Counter(b).most_common()[0][1]==1])"}, "504": {"problem_id": 2865, "answer": "def solution(string):\n    return string[::-1]"}, "505": {"problem_id": 2866, "answer": "def prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return [i]\n        i += 1\n    return [i]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\ndef prime_excluded(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 1\n    return s\n\ndef is_square(n):\n    sqr = n ** 0.5\n    if sqr % 2 == 0:\n        return False\n    else:\n        return True\n\ndef is_square_of_two(n):\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\ndef nCr(n, r):\n    if n == r:\n        return 1\n    rC = r\n    while rC > n:\n        rC >>= 1\n    c = nCr(n, rC)\n    return c\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef modInverse(n, p):\n    if n == 0:\n        return 1\n    g = pow(10, p - 1)\n    return g * modInverse(n, p)\n\ndef prime_excluded_by_multiplicity(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 1\n    return s\n\ndef prime_excluded_by_cofactor(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_inv(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_cofactorization(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_mult(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_multiplicity(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_prime_quotient(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime"}, "506": {"problem_id": 2867, "answer": "from collections import defaultdict\ndef fix_progression(arr):\n    d = defaultdict(int)\n    for i in range(len(arr)):\n        d[arr[i]] += 1\n        if d[arr[i]] % 2!= 0:\n            d[arr[i]] -= 1\n            continue\n        else:\n            break\n    return len(arr) - len(set(d.values()))"}, "507": {"problem_id": 2868, "answer": "def is_nice(arr):\n    return all(n - 1 in arr or n + 1 in arr for n in arr)"}, "508": {"problem_id": 2869, "answer": "def distinct(seq):\n    return list(dict.fromkeys(seq))"}, "509": {"problem_id": 2870, "answer": "def same(arr_a, arr_b):\n    return sorted(sorted(arr_a) + sorted(arr_b)) == sorted(sorted(arr_a) + sorted(arr_b))"}, "510": {"problem_id": 2871, "answer": "def starts_with(st, prefix): \n    if len(prefix) > len(st):\n        return 0\n    elif len(prefix) == len(st):\n        return st.startswith(prefix)\n    else:\n        return 1"}, "511": {"problem_id": 2872, "answer": "def coin(n):\n    return [''.join(c) for c in ''.join(['HT']*n+['H']*(n-1)+['T'])]"}, "512": {"problem_id": 2873, "answer": "def josephus_survivor(n,k):\n    l = [i for i in range(1, n+1)]\n    l.extend(l[1:])\n    return l[k]"}, "513": {"problem_id": 2874, "answer": "def my_parse_int(string):\n    try:\n        return int(string)\n    except ValueError:\n        return 'NaN'"}, "514": {"problem_id": 2875, "answer": "def sort_photos(pics):\n    d = sorted([int(x) for x in str(pics).split('.img')])\n    return [x[0] + next(d) for x in sorted(enumerate(pics), key=lambda x: x[1])[:5]]"}, "515": {"problem_id": 2876, "answer": "def check(a, x): \n    return x in a"}, "516": {"problem_id": 2877, "answer": "def count(a, t, x):\n    return sum(a[i]==t for i in range(len(a)))+sum(a[i]==t for i in range(len(a) - x))"}, "517": {"problem_id": 2878, "answer": "def shortest_to_char(s, c):\n    if c not in s:\n        return []\n    return [min(abs(i - c) for i in s) for c in s]"}, "518": {"problem_id": 2879, "answer": "import unicodedata\ndef could_be(original, another):\n    s = unicodedata.normalize('NFKD', original).encode('ascii', 'ignore')\n    s = s.decode('ascii', 'ignore')\n    try:\n        return bool(s)\n    except AttributeError:\n        return False"}, "519": {"problem_id": 2880, "answer": "def seven(m):\n    steps = 0\n    while m > 99:\n        m = m//10 - 2*(m%10)\n        steps += 1\n    return (m, steps)"}, "520": {"problem_id": 2881, "answer": "def validate(n):\n    digits = ''.join(sorted(str(n)[2:]))\n    return sum(int(d) for d in digits[::2]) % 10 == 0"}, "521": {"problem_id": 2882, "answer": "def cumulative_triangle(n):\n    return n*(n+1)*(2*n+1)//6"}, "522": {"problem_id": 2883, "answer": "def to_pretty(seconds):\n    d = [\"a second ago\", \"a minute ago\", \"an hour ago\", \"a day ago\", \"a week ago\"]\n    if seconds == 0:\n        return d[0]\n    elif seconds == 40000:\n        return d[1]\n    else:\n        return d[2]"}, "523": {"problem_id": 2884, "answer": "def stringify(node):\n    s = ''\n    while node!= None:\n        s += str(node.data) +'-> '\n        node = node.next\n    return s + 'None'"}, "524": {"problem_id": 2885, "answer": "def champernowneDigit(n):\n    if type(n)!=int or n<1: return float('nan')\n    s=str(n)\n    return int(s[-1])"}, "525": {"problem_id": 2886, "answer": "import re\ndef find(s):\n    return max(re.findall(r\"!+\\?+\", s), re.findall(r\"\\?+!+\", s))"}, "526": {"problem_id": 2887, "answer": "import base64\nimport random\nimport re\n\nBASE64 = base64.b64encode\nRAND = random.randint\n\ndef adFly_decoder(sc):\n    return BASE64.b64decode(sc[::-1].encode('utf-8')).decode('utf-8')"}, "527": {"problem_id": 2888, "answer": "def remove(s):\n    return''.join(s.split()[-1::-1])"}, "528": {"problem_id": 2889, "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_ways(n, k):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sum(count_ways(n-j, k) for j in range(1, n+1))"}, "529": {"problem_id": 2890, "answer": "def multiples(m, n):\n    result = []\n    for i in range(1, m+1):\n        result.append(n*i)\n    return result"}, "530": {"problem_id": 2891, "answer": "def find_the_key(message, code):\n    dic = {0:'',1:'a',2:'b',3:'c',4:'d',5:'e',6:'f',7:'g',8:'h',9:'i',10:'j',11:'k',12:'l',13:'m',14:'n',15:'o',16:'p',17:'q',18:'r',19:'s',20:'t',21:'u',22:'v',23:'w',24:'x',25:'y',26:'z'}\n    for i in range(len(message)):\n        code[i] += int(message[i])\n    key = 0\n    for i in range(len(code)):\n        key += dic[code[i]]*int(code[i])\n    return key"}, "531": {"problem_id": 2892, "answer": "def case_id(c_str):\n    if c_str.replace('_','').lower() not in 'kebab_snake_camel_none':\n        return 'kebab'\n    elif c_str.replace('_','').lower() =='snake':\n        return'snake'\n    elif c_str.replace('_','').lower() == 'camel':\n        return 'camel'\n    else:\n        return 'none'"}, "532": {"problem_id": 2893, "answer": "def plant_doubling(n):\n    return sum(1 for i in range(n+1) if i % 2 == 0)"}, "533": {"problem_id": 2894, "answer": "def triple_trouble(one, two, three):\n    res = ''\n    for i in range(len(one)):\n        res += one[i] + two[i] + three[i]\n    return res"}, "534": {"problem_id": 2895, "answer": "import re\n\ndef ka_co_ka_de_ka_me(word):\n    return \"ka\" + re.sub(r\"([aeiou]+)(?=[^aeiou])\", r\"\\1ka\", word)"}, "535": {"problem_id": 2896, "answer": "def cost_of_carpet(l, w, r, c):\n    if l == 0 or w == 0 or r == 0:\n        return 'error'\n    elif l > w.bit_length() or w > r.bit_length():\n        return 'error'\n    return round(c * min(l, w), 2)"}, "536": {"problem_id": 2897, "answer": "def oddity(n):\n    return 'odd' if n**0.5%1==0 else 'even'"}, "537": {"problem_id": 2898, "answer": "def find_array(arr1, arr2):\n    return [arr1[i] for i in arr2 if i<len(arr1)]"}, "538": {"problem_id": 2899, "answer": "def bin_str(s):\n    return sum(a!=b for a, b in zip(s, s[1:]))"}, "539": {"problem_id": 2900, "answer": "def string_transformer(s):\n    return''.join(s.swapcase().split(' ')[::-1])"}, "540": {"problem_id": 2901, "answer": "def psion_power_points(level,score):\n    d = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0}\n    bonus = 0\n    for i in range(20):\n        bonus += d[level]*score//20\n        d[level] = max(d.get(level,0),bonus)\n    return bonus"}, "541": {"problem_id": 2902, "answer": "def opposite(number):\n    return -number"}, "542": {"problem_id": 2903, "answer": "from math import pi\ndef volume(r,h):\n    return int(pi*r**2*h/3)"}, "543": {"problem_id": 2904, "answer": "def filter_words(st):\n    return''.join(st.capitalize() if st.lstrip().isalnum() else st for i in st)"}, "544": {"problem_id": 2905, "answer": "def nickname_generator(name):\n    if len(name) < 4:\n        return \"Error: Name too short\"\n    elif name[2] in 'aeiou':\n        return name[:4]\n    else:\n        return name[:3]"}, "545": {"problem_id": 2906, "answer": "def generate_number(squad, n):\n    if n not in squad:\n        return n\n    for i in range(1, 10):\n        if n == n.replace('9', '9' + str(i)):\n            return n"}, "546": {"problem_id": 2907, "answer": "from itertools import combinations\n\ndef combs_non_empty_boxesII(n):\n    max_boxes = 0\n    total_boxes = 0\n    combinations = list(combinations(range(1, n+1), 2))\n    for c in combinations:\n        if len(c) == 1:\n            total_boxes += 1\n            continue\n        max_boxes = max(max_boxes, total_boxes)\n        total_boxes += c[0]\n    return [total_boxes, max_boxes, len(combinations)].pop()"}, "547": {"problem_id": 2908, "answer": "def flatten(dictionary):\n    result = {}\n    for k, v in dictionary.items():\n        if isinstance(v, dict):\n            result[k] = flatten(v)\n        else:\n            result[k] = v\n    return result"}, "548": {"problem_id": 2909, "answer": "def is_tune(notes):\n    return len(notes) <= 1 and set(notes).issubset(set('12'))"}, "549": {"problem_id": 2910, "answer": "def small_enough(a, limit): \n    return all(x<=limit for x in a)"}, "550": {"problem_id": 2911, "answer": "def count_vowels(s = ''):\n    if type(s) == str:\n        return len(s)\n    else:\n        return None"}, "551": {"problem_id": 2912, "answer": "def find_multiples(integer, limit):\n    res = []\n    for i in range(integer,limit+1):\n        res.append(i)\n    return res"}, "552": {"problem_id": 2913, "answer": "def x(n):\n    return '\\n'.join(''.join('\u25a1\u25a0'[i&1] for i in range(n)) for _ in range(n))"}, "553": {"problem_id": 2914, "answer": "def array_diff(a, b):\n    return [x for x in a if x not in b]"}, "554": {"problem_id": 2915, "answer": "def check_availability(schedule, current_time):\n    for s, e in schedule:\n        if s <= current_time < e:\n            return \"Available\"\n    return True"}, "555": {"problem_id": 2916, "answer": "def mutually_exclusive(dice, call1, call2):\n    if sum(dice)!= 1:\n        return None\n    return f'{int(call1[0])} {:.2f}'.format(int(call1[1]) if call1[1] else 0) + f'{int(call2[0])} {:.2f}'.format(int(call2[1]) if call2[1] else 0)"}, "556": {"problem_id": 2917, "answer": "def distinct_digit_year(year):\n    return next((year + 1) // 10, year)"}, "557": {"problem_id": 2918, "answer": "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    months = 0\n    while startPriceOld < startPriceNew:\n        months += 1\n        startPriceOld += savingperMonth * months\n        startPriceNew += savingperMonth * months\n    return [months, round(startPriceOld - startPriceNew * percentLossByMonth) ]"}, "558": {"problem_id": 2919, "answer": "def encode(message, key):\n    d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    key_arr = list(map(int, str(key)))\n    return [d[letter] + next(key_arr) for letter in message]"}, "559": {"problem_id": 2920, "answer": "def pattern(n):\n    return '\\n'.join(''.join(str(i) for i in range(n, n-i, -1)) for i in range(n))"}, "560": {"problem_id": 2921, "answer": "def blocks_to_collect(level):\n    d = {'gold':1, 'diamond':2, 'emerald':3, 'iron':4}\n    a = [d[x] for x in range(level)]\n    return {'total':sum(a), 'gold':sum(d[x] for x in a), 'diamond':sum(d[x] for x in a[1:]), 'emerald':sum(d[x] for x in a[1:]),'iron':sum(d[x] for x in a[1:])}"}, "561": {"problem_id": 2922, "answer": "def crap(garden, bags, cap):\n    count = 0\n    for i in garden:\n        if i[0] == 'D':\n            return 'Dog!!'\n        elif i[0] == '@':\n            count += 1\n        else:\n            count += abs(i[1] - bags)\n            bags += 1\n    if count > cap:\n        return 'Cr@p'\n    else:\n        return 'Clean'"}, "562": {"problem_id": 2923, "answer": "import re\ndef dad_filter(string):\n    return re.sub(r'((?<=\\,)\\,+)',r'\\1',string)"}, "563": {"problem_id": 2924, "answer": "def are_coprime(n, m):\n    return m == n % m"}, "564": {"problem_id": 2925, "answer": "def multiply(n):\n    if n < 0:\n        return n * 5**len(str(abs(n)))\n    elif n > 0:\n        return n * 5**len(str(abs(n)))"}, "565": {"problem_id": 2926, "answer": "def reverse(a):\n    b = ''.join(reversed(a))\n    return b"}, "566": {"problem_id": 2927, "answer": "def zombie_shootout(zombies, distance, ammo):\n    if distance<=0:\n        return f\"You shot all {zombies} zombies.\"\n    elif zombies==0:\n        return f\"You shot all {zombies} zombies.\"\n    elif ammo<=0:\n        return f\"You ran out of ammo before shooting all {zombies} zombies.\"\n    else:\n        return f\"You shot {min(ammo, zombies)} zombies before being eaten: overwhelmed.\""}, "567": {"problem_id": 2928, "answer": "def alphabet_war(fight):\n    left_wins = 0\n    right_wins = 0\n    for i in fight:\n        if i == 'w':\n            left_wins += 4\n        elif i == 'p':\n            left_wins += 3\n        elif i == 'b':\n            left_wins += 2\n        elif i =='s':\n            left_wins += 1\n        elif i =='m':\n            right_wins += 4\n        elif i == 'q':\n            right_wins += 3\n        elif i == 'd':\n            right_wins += 2\n        elif i == 'z':\n            right_wins += 1\n    if left_wins > right_wins:\n        return \"Left side wins!\"\n    elif right_wins > left_wins:\n        return \"Right side wins!\"\n    else:\n        return \"Let's fight again!\""}, "568": {"problem_id": 2929, "answer": "def factors(n):\n    sq = n**0.5\n    cb = n**0.5\n    return [sq,cb]"}, "569": {"problem_id": 2930, "answer": "def summation(num):\n    return sum(range(1,num+1))\n"}, "570": {"problem_id": 2931, "answer": "def count_cows(n):\n    if type(n)!= int:\n        return None\n    elif n < 3:\n        return 1\n    else:\n        return count_cows(n-1) + count_cows(n-2)"}, "571": {"problem_id": 2932, "answer": "def colour_association(arr):\n    return [{k:v} for k,v in arr]"}, "572": {"problem_id": 2933, "answer": "def solve(nums,div):\n    return [i + i % div for i in nums]"}, "573": {"problem_id": 2934, "answer": "import re\ndef solve(s):\n    return max(sum(ord(c)-96 for c in s.lower()) for i in range(len(s)))"}, "574": {"problem_id": 2935, "answer": "import re\ndef is_vowel(s):\n    return bool(re.fullmatch(r'[aeiou]',s))"}, "575": {"problem_id": 2936, "answer": "from math import ceil\n\ndef num_of_open_lockers(n):\n    return ceil(n ** 0.5)"}, "576": {"problem_id": 2937, "answer": "def between(a,b):\n    # good luck\n    arr = []\n    for i in range(a, b+1):\n        arr.append(i)\n    return arr"}, "577": {"problem_id": 2938, "answer": ""}, "578": {"problem_id": 2939, "answer": "def has_two_cube_sums(n):\n    return n == sum(sorted([a**3 for a in range(1, int(n**.5)+1)], reverse=True))"}, "579": {"problem_id": 2940, "answer": "def repeats(arr):\n    return sum(n for n in arr if arr.count(n) == 1)"}, "580": {"problem_id": 2941, "answer": "def add(*args):\n    return round(sum(n / i for i, n in enumerate(args, 1)))"}, "581": {"problem_id": 2942, "answer": "def fold_to(distance):\n    if distance < 0:\n        return None\n    elif distance < 0.0001:\n        return 0\n    else:\n        n = 0\n        while distance < distance*2:\n            n += 1\n            distance *= 2\n        return n"}, "582": {"problem_id": 2943, "answer": "def complete_binary_tree(a):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in range(len(a)):\n        d[a[i]] += 1\n    "}, "583": {"problem_id": 2944, "answer": ""}, "584": {"problem_id": 2945, "answer": "def fortune(f0, p, c0, n, i):\n    import math\n    year = 1\n    while year < n:\n        f0 = int(math.log10(f0 + f0))\n        c0 = int(math.log10(c0 + c0))\n        year += 1\n    return f0 <= p and f1 <= p and f2 <= p and f3 <= p and f4 <= p"}, "585": {"problem_id": 2946, "answer": "def reverse_sentence(sentence):\n    return''.join(reversed(sentence.split()))"}, "586": {"problem_id": 2947, "answer": "def rounding(n, m):\n    return n if n/m>1 else round(n/m*m)"}, "587": {"problem_id": 2948, "answer": "def split_by_value(k, elements):\n    return [x for x in sorted(elements, key=lambda x: x < k)]"}, "588": {"problem_id": 2949, "answer": "def split_and_add(numbers, n):\n    a = numbers[:]\n    for _ in range(n):\n        a.append(sum(a[:i]))\n    return a"}, "589": {"problem_id": 2950, "answer": "from itertools import combinations\n\ndef solve(arr):\n    return sum(1 for a, b in combinations(arr, 2) if a - b == arr[0] - arr[1])"}, "590": {"problem_id": 2951, "answer": "def how_many_measurements(n):\n    if n<3:\n        return n\n    elif n==3:\n        return 1\n    else:\n        return how_many_measurements(n-1) + how_many_measurements(n-2)"}, "591": {"problem_id": 2952, "answer": "def dropzone(p, dropzones):\n    return min(dropzones, key=lambda d: d[0] - p[0], default=dropzones[0])"}, "592": {"problem_id": 2953, "answer": "def numericals(s):\n    count = 0\n    for c in s:\n        count += 1\n        if count == 1:\n            return str(count) + \"1\"*(count-1)\n    return \"\".join(sorted(s))"}, "593": {"problem_id": 2954, "answer": "def riders(stations):\n    r = 0\n    for i in stations:\n        r += i\n        if i > 100:\n            r -= 100\n    return r"}, "594": {"problem_id": 2955, "answer": "def oddest(a):\n    n = 0\n    for x in a:\n        if x % 2 == 1:\n            n += 1\n        elif x % 2!= 1:\n            n += 1\n    return n"}, "595": {"problem_id": 2956, "answer": "def encode(string):\n    return ''.join(format(ord(c), '08b') for c in string)\n\ndef decode(bits):\n    b = bits.copy()\n    b.reverse()\n    n = len(bits) // 3\n    s = ''\n    for i in range(n):\n        if bits[i] == '0':\n            s += '0'\n        elif bits[i] == '1':\n            s += '1'\n        else:\n            s += ''.join(f'0{bits[i]}' for c in b[i])\n    return s"}, "596": {"problem_id": 2957, "answer": "def get_drink_by_profession(param):\n    d = {\n        \"Jabroni\": \"Patron Tequila\",\n        \"School Counselor\": \"Anything with Alcohol\",\n        \"Programmer\": \"Hipster Craft Beer\",\n        \"Bike Gang Member\": \"Moonshine\",\n        \"Politician\": \"Your tax dollars\",\n        \"Rapper\": \"Cristal\"\n    }\n    return d.get(param.lower(), \"Beer\")"}, "597": {"problem_id": 2958, "answer": "def subcuboids(x,y,z):\n    return x*y*z*(x+1)*(y+1)*(z+1)//8"}, "598": {"problem_id": 2959, "answer": "def optimal_number_of_coins(n, coins):\n    d = [1] + sorted(coins)\n    for i in range(1, n+1):\n        d.append(d[i-1]//i)\n    return d[n]"}, "599": {"problem_id": 2960, "answer": "from fractions import gcd\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(x*y for x,y in pairs) - sum(gcd(x,y) for x,y in pairs)"}, "600": {"problem_id": 2961, "answer": "def complete_series(seq): \n    return [0] if len(seq) == 0 else list(range(max(seq), 0, -1))"}, "601": {"problem_id": 2962, "answer": "def divisible_by(numbers, divisor):\n    return list(filter(lambda x: x % divisor == 0, numbers))"}, "602": {"problem_id": 2963, "answer": "swap = str.swapcase"}, "603": {"problem_id": 2964, "answer": "def sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2])"}, "604": {"problem_id": 2965, "answer": "def solve_eq(eq):\n    x, y, z = eq[0][0], eq[0][1], eq[1][0]\n    return [x, y, z]"}, "605": {"problem_id": 2966, "answer": "import re\ndef calculate(s):\n    return re.sub(r'\\b(?P<op>[a-z]+)(?P<n1>\\d+)(?P<n2>\\d+)\\b', '\\1\\2{}'.format(op, n1, n2))"}, "606": {"problem_id": 2967, "answer": "def bin_to_hex(binary_string):\n    return '{0:02X}'.format(int(binary_string, 2) << 1).lstrip('0')"}, "607": {"problem_id": 2968, "answer": "def get_middle(s):\n    x = len(s) // 2\n    return s[x:x+2]"}, "608": {"problem_id": 2969, "answer": "from collections import deque\n\ndef advice(agents, n):\n    agents = deque(sorted(agents))\n    while agents:\n        agents.popleft()\n        for i in range(n):\n            agents.popleft()\n            if agents[i][0] < agents[i+1][0]:\n                agents.append((i, agents[i][1]))\n    return agents"}, "609": {"problem_id": 2970, "answer": "def prod_int_part(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return [2]\n    else:\n        d = set()\n        for i in range(2, n+1):\n            d.add(i)\n            d.add(n//i)\n        list_prod = sorted(d)\n        return [len(list_prod), list_prod]"}, "610": {"problem_id": 2971, "answer": "def watch_pyramid_from_the_side(characters):\n    if not characters:\n        return characters\n    height = len(characters)\n    return '\\n'.join(w[0] for w in watch_pyramid_from_the_side(characters[1:])) + '\\n'.join(w[1] for w in watch_pyramid_from_the_side(characters[1:height-1:]) + [' '])"}, "611": {"problem_id": 2972, "answer": "def multiple_split(string, delimiters=[]):\n    return [s for s in string.split(' ') if s]"}, "612": {"problem_id": 2973, "answer": "def array_conversion(arr):\n    i = 0\n    while len(arr) > 1:\n        arr = [x+y for x, y in zip(arr[::2], arr[1::2])]\n        i += 1\n    return arr[0]"}, "613": {"problem_id": 2974, "answer": "def excluding_vat_price(price):\n    return round(price / 1.15, 2) if price else -1"}, "614": {"problem_id": 2975, "answer": "def song_decoder(song):\n    return''.join(song.replace('WUB','').split())"}, "615": {"problem_id": 2976, "answer": "def accum(s):\n    return '-'.join(sorted(s, key=lambda x: x[0]))"}, "616": {"problem_id": 2977, "answer": "from functools import lru_cache\n\ndef ds_multof_pfs(n_min, n_max):\n    @lru_cache(maxsize=None)\n    def recur(n):\n        if n < n_min: return []\n        prime_factors = [i for i in range(2, int(n**0.5)+1) if n % i == 0]\n        if len(prime_factors) == 1: return [n]\n        return [n] + recur(prime_factors[0]) + recur(prime_factors[1])\n    return list(recur(n_min))"}, "617": {"problem_id": 2978, "answer": "from collections import Counter\ndef count_sel(lst):\n    c = Counter(lst)\n    return [len(lst), len(set(lst)), len([k for k in lst if c[k] == 1]), sorted(c.items(), key=lambda k: k[1])[4]]"}, "618": {"problem_id": 2979, "answer": "def get_age(age):\n    return int(age[0])"}, "619": {"problem_id": 2980, "answer": "from math import sqrt\nfind_min_num = lambda n,d:__import__('functools').lcm(d**.5)"}, "620": {"problem_id": 2981, "answer": "def solution(n,d):\n    return [int(i) for i in str(n)[-d:]] if d > 0 else []"}, "621": {"problem_id": 2982, "answer": "def pascal(p):\n    res = [[1]]\n    for i in range(1, p+1):\n        res.append([1] + [a+b for a, b in zip(res[i-1], res[i-2])])\n    return res"}, "622": {"problem_id": 2983, "answer": "def bouncy_count(n):\n    s = str(n)\n    cnt = 0\n    for i in range(10):\n        if s[i] == \"0\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"1\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"2\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"3\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"4\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"5\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"6\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"7\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"8\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"9\" and s[i+1] == \"0\":\n            cnt += 1\n    return cnt"}, "623": {"problem_id": 2984, "answer": "def infected_zeroes(lst):\n    return max(0, sum(1 for i, n in enumerate(lst) if n == 0) + len(set(lst)))"}, "624": {"problem_id": 2985, "answer": "def reflections(max_x, max_y):\n    return all(l.is_integer() for l in zip(*[list(map(int, row)) for row in [[max_x, max_y]]*max_x + [max_x, max_y]]))"}, "625": {"problem_id": 2986, "answer": "def segments(m, a):\n    return [x for x in range(m+1) if all(x not in a for x in a)]"}, "626": {"problem_id": 2987, "answer": "def is_divide_by(number, a, b):\n    return number % a == 0 and number % b == 0"}, "627": {"problem_id": 2988, "answer": "def reverse_and_combine_text(text):\n    d = text.split()\n    while len(d) > 1:\n        d.pop(0)\n        d.pop(0)\n        d.pop(0)\n    return ''.join(reversed(d))"}, "628": {"problem_id": 2989, "answer": "def bits_battle(numbers):\n    odds, evens = [], []\n    for x in numbers:\n        odds.append(bin(x)[2:].count('1'))\n        evens.append(bin(x)[2:].count('0'))\n    odds.sort()\n    evens.sort()\n    if odds > evens:\n        return 'odds win'\n    elif odds < evens:\n        return 'evens win'\n    else:\n        return 'tie'"}, "629": {"problem_id": 2990, "answer": "def monty_hall(correct_door_number, participant_guesses):\n    return round(100 * sum(1 for i in participant_guesses if i!= correct_door_number) / len(participant_guesses))"}, "630": {"problem_id": 2991, "answer": "def not_so_random(b,w):\n    return \"Black\" if b & 1 else \"White\""}, "631": {"problem_id": 2992, "answer": "def switcheroo(string):\n    return ''.join(c for c in string if c not in 'ab')"}, "632": {"problem_id": 2993, "answer": "def poly_add(p1, p2):\n    return [sum(p1[i] + p2[i] for i in range(len(p1))), sum(p1[i] for i in range(len(p2)) if i not in range(len(p1)))]"}, "633": {"problem_id": 2994, "answer": "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif nth > len(str(num)):\n        return 0\n    else:\n        return int(str(num)[nth-1])"}, "634": {"problem_id": 2995, "answer": "def sum_mul(n, m):\n    if n <= 0 or m <= 0:\n        return 'INVALID'\n    elif n <= m:\n        return sum(range(n, m, n))\n    else:\n        return sum(range(n, m, n))"}, "635": {"problem_id": 2996, "answer": "def how_much_coffee(events):\n    coffees = 0\n    for event in events:\n        if event.isupper():\n            coffees += 2\n        elif event.islower():\n            coffees += 1\n    return coffees if coffees < 3 else 'You need extra sleep'"}, "636": {"problem_id": 2997, "answer": "def rgb(r, g, b):\n    return ''.join(chr(max(0, r-max(0, r), max(0, g-max(0, g), g-max(0, g)), max(0, b-max(0, b), b-max(0, b)))).upper() for _ in range(255))"}, "637": {"problem_id": 2998, "answer": "def atomic_number(electrons):\n    n = 2*max(electrons, 0)**2\n    return [n]"}, "638": {"problem_id": 2999, "answer": "def hex_word_sum(s):\n    s = s.translate(str.maketrans('OS', '05')).upper()\n    return sum(int(w, 16) for w in s.split())"}, "639": {"problem_id": 3000, "answer": "def mul_power(n, k):\n    return int(n ** (1.0 / k) + 0.5)"}, "640": {"problem_id": 3001, "answer": "def validate(username, password):\n    d = {'Timmy': 'Successfully Logged in!', 'Hannah': 'Successfully Logged in!', 'bob': 'Successfully Logged in!', 'alex': 'Successfully Logged in!','samantha': 'Successfully Logged in!', 'cindy': 'Successfully Logged in!','matt': 'Successfully Logged in!', 'tess': 'Successfully Logged in!','sam': 'Successfully Logged in!', 'juan': 'Successfully Logged in!', 'kate': 'Successfully Logged in!', 'dee': 'Successfully Logged in!', 'laurie': 'Successfully Logged in!', 'kell': 'Successfully Logged in!', 'lea': 'Successfully Logged in!', 'clare': 'Successfully Logged in!', 'valentine': 'Successfully Logged in!','mary': 'Successfully Logged in!', 'francesca': 'Successfully Logged in!', 'annabelle': 'Successfully Logged in!','shelby': 'Successfully Logged in!', 'elizabeth': 'Successfully Logged in!', 'valentina': 'Successfully Logged in!', 'andrea': 'Successfully Logged in!', 'valerie': 'Successfully Logged in!', 'valerie': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria"}, "641": {"problem_id": 3002, "answer": "def is_pronic(n):\n    return n >= 0 and n % (2**len(str(n)) - 1) == 0"}, "642": {"problem_id": 3003, "answer": "def args_count(*args, **kwargs):\n    return len(args) + len(kwargs)"}, "643": {"problem_id": 3004, "answer": "def head_smash(arr):\n    if arr == [] or isinstance(arr, int) == False:\n        return 'Gym is empty'\n    return''.join(map(str, arr.replace('O','')))"}, "644": {"problem_id": 3005, "answer": "def f(n):\n    a = 1\n    for i in range(1,n+1):\n        if a == 1:\n            a += 1\n        elif a == 2:\n            a += 1\n        elif a == 3:\n            a += 1\n        elif a == 4:\n            a += 1\n        elif a == 5:\n            a += 1\n        elif a == 6:\n            a += 1\n        elif a == 7:\n            a += 1\n        elif a == 8:\n            a += 1\n        elif a == 9:\n            a += 1\n        elif a == 10:\n            a += 1\n        elif a == 11:\n            a += 1\n        elif a == 12:\n            a += 1\n    return len(set(range(1,13)))"}, "645": {"problem_id": 3006, "answer": "def calculate_total(t1, t2):\n    return sum(t1) > sum(t2)"}, "646": {"problem_id": 3007, "answer": "def consecutive_sum(num):\n    c = 0\n    for i in range(1, num // 2 + 1):\n        if i % 2 == 0:\n            c += 1\n        elif i % 2 == 1:\n            c += 1\n    return c"}, "647": {"problem_id": 3008, "answer": "def sort_array(value):\n    return \"\".join(sorted(value,key=lambda x: int(x)))"}, "648": {"problem_id": 3009, "answer": "def pairs(ar):\n    return sum(1 for i in range(len(ar) + 1) for j in range(i, i + 2))"}, "649": {"problem_id": 3010, "answer": "def solution(pairs):\n    return ','.join('{} = {}'.format(k, v) for k, v in sorted(pairs.items()))"}, "650": {"problem_id": 3011, "answer": "def learn_charitable_game(arr):\n    return sum(arr)%2==0"}, "651": {"problem_id": 3012, "answer": "def shared_bits(a, b):\n    c=0\n    d=0\n    e=0\n    f=0\n    g=0\n    h=0\n    i=0\n    j=0\n    k=0\n    l=0\n    m=0\n    n=0\n    o=0\n    p=0\n    q=0\n    r=0\n    s=0\n    t=0\n    u=0\n    v=0\n    w=0\n    x=0\n    y=0\n    z=0\n    a=a.count('1')\n    b=b.count('1')\n    if a>b:\n        return True\n    else:\n        return False"}, "652": {"problem_id": 3013, "answer": "def delete_digit(n):\n    return max(int(''.join(reversed(str(n))), 10), 0)"}, "653": {"problem_id": 3014, "answer": "def simple_transposition(text):\n    return ''.join(c + text[i] for i, c in enumerate(text))"}, "654": {"problem_id": 3015, "answer": "def get_issuer(number):\n    n = str(number)\n    if n[:2] in ['34', '37'] and len(n) == 15:\n        return 'AMEX'\n    elif n[:4] == '6011' and len(n) == 16:\n        return 'Discover'\n    elif n[:2] in ['51', '52', '53', '54', '55'] and len(n) == 16:\n        return 'Mastercard'\n    elif n[0] == '4' and int(n[1]) in range(4, 55) and len(n) == 13 or int(n[1]) in range(6, 16) and len(n) == 16:\n        return 'VISA'\n    return 'Unknown'"}, "655": {"problem_id": 3016, "answer": "from itertools import product\n\nNOTCHES = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\ndef minor_or_major(chord):\n    chord = list(map(str.split, chord.split(' ')))\n    chord = sorted(chord, key=lambda x: (NOTCHES.index(x[0]), NOTCHES.index(x[1])))\n    return 'Not a chord' if len(chord)!= 3 else next((v for v in product(NOTCHES, range(1, len(NOTCHES))), []), 'Not a chord')"}, "656": {"problem_id": 3017, "answer": "def rocks(n):\n    return sum(9*bin(i)[2:].count('1') for i in range(1, n+1))"}, "657": {"problem_id": 3018, "answer": "import re\n\ndef word_count(s):\n    return len(re.findall(r'[a-z]+', s.lower()))"}, "658": {"problem_id": 3019, "answer": "def str_count(strng, letter):\n    # Your code here ;)\n    count = 0\n    for i in strng:\n        if i == letter:\n            count += 1\n    return count"}, "659": {"problem_id": 3020, "answer": "import re\ndef kontti(s):\n    return \" \".join(re.findall(r\"[^aeiouy]\", s))"}, "660": {"problem_id": 3021, "answer": "def available_moves(position):\n    if isinstance(position, str) and position.islower():\n        return []\n    elif isinstance(position, list) and len(position) == 1:\n        return sorted(position)\n    elif isinstance(position, (int, float)):\n        return sorted(zip(range(1, 9), range(1, 8)))\n    else:\n        return ['A' + str(i) for i in range(1, 9)]"}, "661": {"problem_id": 3022, "answer": "def two_highest(arg1):\n    if len(arg1) == 0:\n        return []\n    elif len(arg1) == 1:\n        return arg1\n    else:\n        lst = sorted(set(arg1))\n        return lst[:2]"}, "662": {"problem_id": 3023, "answer": "def best_match(goals1, goals2):\n    m = goals1[0] - goals2[0]\n    z = goals1[1] - goals2[1]\n    return 0 if z > m else min(m, z)"}, "663": {"problem_id": 3024, "answer": "def friend(x):\n    return [x for x in x if len(x) == 4]"}, "664": {"problem_id": 3025, "answer": "def locate(seq, value):\n    return any(s.startswith(e) for s, e in zip(seq, seq[1:]))"}, "665": {"problem_id": 3026, "answer": "def min_value(digits):\n    return int(''.join(sorted(set(map(str,digits)),key=lambda d:int(d)))[::-1])"}, "666": {"problem_id": 3027, "answer": "def is_solved(board):\n    return all(x < y for x, y in enumerate(board) if x!= y)"}, "667": {"problem_id": 3028, "answer": "import math\ndef factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return math.factorial(n)"}, "668": {"problem_id": 3029, "answer": "def levenshtein(a,b):\n    import numpy as np\n    return np.linalg.norm(a.astype(str) - b.astype(str) +.0, eps=1e-8)"}, "669": {"problem_id": 3030, "answer": "def nb_dig(n, d):\n    return sum(str(k**2).count(str(d)) for k in range(n+1))"}, "670": {"problem_id": 3031, "answer": "def alphabetic(s):\n    return ''.join(sorted(s))"}, "671": {"problem_id": 3032, "answer": "def factorsRange(n, m):\n    d = {}\n    for i in range(n, m + 1):\n        if i.is_factor():\n            d[i] = ['None']\n    return d"}, "672": {"problem_id": 3033, "answer": "from collections import defaultdict\nfrom itertools import cycle\n\ndef interpreter(tape):\n    memory = defaultdict(int)\n    ascii_output = ''\n    for command in tape:\n        if command == '>':\n            memory[0] += 1\n        elif command == '<':\n            memory[0] -= 1\n        elif command == '+':\n            memory[1] += 1\n        elif command == '*':\n            ascii_output += chr(memory[0])\n        else:\n            ascii_output += chr(memory[0]) if memory[0] else 0\n    return ascii_output"}, "673": {"problem_id": 3034, "answer": "def bowling_score(rolls):\n    pins = 0\n    score = 0\n    for i in range(10):\n        if pins == 10:\n            score += rolls[i]\n        elif rolls[i] == 10:\n            score += rolls[i] + rolls[i].count(10)\n        else:\n            score += rolls[i] + rolls[i].count(rolls[i].bit_length())\n        pins += rolls[i]\n    return score"}, "674": {"problem_id": 3035, "answer": "from numpy import matrix\ngetMatrixProduct = lambda a, b: matrix(zip(a, b)).tolist()"}, "675": {"problem_id": 3036, "answer": "def abacaba(k):\n    return chr(96 + (k & 0x1f))"}, "676": {"problem_id": 3037, "answer": "from collections import Counter\ndef obtain_max_number(arr):\n    cnt = Counter(arr)\n    return max(cnt.values())"}, "677": {"problem_id": 3038, "answer": "def solve(st):\n    return sorted(st, key=lambda c: abs(st.rindex(c) - st.index(c)))[0][1]"}, "678": {"problem_id": 3039, "answer": "from itertools import takewhile\nrthn_between=lambda a,b:list(takewhile(lambda n:isinstance(n,int),zip(*[list(range(1,len(n))+1)for n in takewhile(lambda n:isinstance(n,int),list(range(1,len(n))+1))])))"}, "679": {"problem_id": 3040, "answer": "def candies(s):\n    return max(s) - sum(s) if len(s) > 1 else -1"}, "680": {"problem_id": 3041, "answer": "def vowel_start(st): \n    return ''.join(c if c in 'aeiou' else c.lower() for c in st.lower())"}, "681": {"problem_id": 3042, "answer": "trace=lambda a,d=0:None if a==[] else d+sum(a[i][i] for i in range(len(a)))"}, "682": {"problem_id": 3043, "answer": "def print_nums(*args):\n    s = '{:0{}b}'.format(len(str(max(args))))\n    return s.format(*args)"}, "683": {"problem_id": 3044, "answer": "def solve(s):\n    return s == s[::-1]"}, "684": {"problem_id": 3045, "answer": "def elevator(left, right, call):\n    return 'right' if abs(left-call) < abs(right-call) else 'left'"}, "685": {"problem_id": 3046, "answer": "def thue_morse(n):\n    m = len(bin(n)[2:])\n    return ''.join(c for c in bin(n)[2:].zfill(m) if c!= '1')"}, "686": {"problem_id": 3047, "answer": "from itertools import groupby\n\ndef repeating_fractions(numerator,denominator):\n    out = str(numerator / denominator)\n    parts = [\"\".join(grp) for grp in groupby(out)]\n    return \"\".join(parts[i] for i in range(len(parts)))"}, "687": {"problem_id": 3048, "answer": "def alternateCase(s):\n    # your code here\n    a = \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n    return a"}, "688": {"problem_id": 3049, "answer": "import re\ndef textin(st):\n    return re.sub(r'(?i)too|to|two', '2', st, flags=re.I)"}, "689": {"problem_id": 3050, "answer": "def lcs(x, y):\n    if not x or not y: return ''\n    if len(x) > len(y): x, y = y, x\n    s = ''.join(sorted(x)) + ''.join(sorted(y))\n    return lcs(s, x[::-1])"}, "690": {"problem_id": 3051, "answer": "def to_nato(words):\n    d = {'a': 'Alfa', 'b': 'Bravo', 'c': 'Charlie', 'd': 'Delta', 'e': 'Echo', 'f': 'Foxtrot', 'g': 'Golf', 'h': 'Hotel', 'i': 'India', 'j': 'Juliett', 'k': 'Kilo', 'l': 'Lima','m': 'Mike', 'n': 'November', 'o': 'Oscar', 'p': 'Papa', 'q': 'Quebec', 'r': 'Romeo','s': 'Sierra', 't': 'Tango', 'u': 'Uniform', 'v': 'Victor', 'w': 'Whiskey', 'x': 'Xray', 'y': 'Yankee', 'z': 'Zulu'}\n    return''.join(d.get(w, w) for w in words.lower().split()).lstrip(' ').rstrip('!')"}, "691": {"problem_id": 3052, "answer": "def remove(s):\n    return''.join(s[i:i+2] for i in range(len(s)))"}, "692": {"problem_id": 3053, "answer": "def close_compare(a, b, margin=0):\n    if abs(a-b)<=margin:\n        return 0\n    elif a>b:\n        return 1\n    else:\n        return -1"}, "693": {"problem_id": 3054, "answer": "def sum_of_n(n):\n    return [sum(range(i, i+abs(n)) for i in range(n+1))]"}, "694": {"problem_id": 3055, "answer": "def sum_str(a, b):\n    return str(int(a) + int(b)) if a and b else '0'"}, "695": {"problem_id": 3056, "answer": "def palindrome(num,s):\n    if type(num)!=int or type(s)!=int:\n        return \"Not valid\"\n    else:\n        l=list(str(num))\n        l.append(s)\n        return [i for i in range(len(l)) if str(i)==l[i]]"}, "696": {"problem_id": 3057, "answer": "def is_bouncy(number):\n    s = str(number)\n    return sorted(s) == s"}, "697": {"problem_id": 3058, "answer": "def is_magical(sq):\n    return sum(sq[i*3:i*3+3]) == sum(sq[i*3:i*3+3][::-1])"}, "698": {"problem_id": 3059, "answer": "def rain_amount(mm):\n    if mm < 40:\n        return \"You need to give your plant \" + str(40 - mm) + \"mm of water\"\n    else:\n        return \"Your plant has had more than enough water for today!\""}, "699": {"problem_id": 3060, "answer": "def get_required(player,enemy):\n    p, e = sum(player), sum(enemy)\n    if p == e: return \"Random\"\n    elif p > e: return \"Auto-win\"\n    elif p < e: return \"Auto-lose\"\n    elif p == e: return \"Pray for a tie!\"\n    else: return \"({})\".format(max(map(int, p), max(map(int, e))))"}, "700": {"problem_id": 3061, "answer": "def most_frequent_item_count(collection):\n    return max(collection.count(item) for item in set(collection))"}, "701": {"problem_id": 3062, "answer": "def palindrome(num):\n    if type(num)!= int or num < 0:\n        return \"Not valid\"\n    s = str(num)\n    return s == s[::-1]"}, "702": {"problem_id": 3063, "answer": "from statistics import mean\n\ndef mix_fruit(arr):\n    return round(mean(5.7 for a in arr if a.isalnum()), 10)"}, "703": {"problem_id": 3064, "answer": "def transpose(arr):\n    return arr.tolist()"}, "704": {"problem_id": 3065, "answer": "import re\ndef get_textliterals(pv_code):\n    s = re.sub(r'\\s*' + '--.*', '', pv_code)\n    return [(len(s.split()), len(s))]"}, "705": {"problem_id": 3066, "answer": "def solve(s):\n    s = s.replace('()', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('{}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    return s"}, "706": {"problem_id": 3067, "answer": "def getVolumeOfCubiod(length, width, height):\n    return length * width * height"}, "707": {"problem_id": 3068, "answer": "from string import ascii_lowercase as al, ascii_uppercase as au\n\ndef vowel_back(st):\n    return st.translate(str.maketrans(al + au, al[1:] + au[1:]))"}, "708": {"problem_id": 3069, "answer": "def greet(language):\n    d = {'english': 'Welcome',\n         'czech': 'Vitejte',\n         'danish': 'Velkomst',\n         'dutch': 'Welkom',\n         'estonian': 'Tere tulemast',\n         'finnish': 'Tervetuloa',\n         'flemish': 'Welgekomen',\n         'french': 'Bienvenue',\n         'german': 'Willkommen',\n         'irish': 'Failte',\n         'italian': 'Benvenuto',\n         'latvian': 'Gaidits',\n         'lithuanian': 'Laukiamas',\n         'polish': 'Witamy',\n        'spanish': 'Bienvenido',\n        'swedish': 'Valkommen',\n         'welsh': 'Croeso'}\n    return d.get(language, 'Welcome')"}, "709": {"problem_id": 3070, "answer": "def unique_sum(lst):\n    return sum(set(lst)) if lst else None"}, "710": {"problem_id": 3071, "answer": "def last_digit(n1, n2):\n    return int(str(n1) + str(n2)).bit_length()"}, "711": {"problem_id": 3072, "answer": "def is_narcissistic(*args):\n    try:\n        return all(int(n) == n for n in args)\n    except ValueError:\n        return False"}, "712": {"problem_id": 3073, "answer": "from math import factorial\nlst = [0] * 1000005\nfor i in range(1, 1000005):\n    lst[i] += factorial(i)\ndef increasing_numbers(digits):\n    return sum(lst[digits:].count(i) for i in range(10))"}, "713": {"problem_id": 3074, "answer": "def growing_plant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 0\n    while height < desiredHeight:\n        height += upSpeed\n        days += 1\n        if height >= desiredHeight:\n            return days\n        height -= downSpeed\n    return days"}, "714": {"problem_id": 3075, "answer": "def count_inversions(array):\n    return sum(1 for i in range(len(array)) if i not in inversions(array, i))"}, "715": {"problem_id": 3076, "answer": "def solve(arr):\n    lst = [i for i in arr if i[0] == 'Begin']\n    lst.extend(arr[::-1])\n    return ['Begin on'+ str(i[1]) + '\\n' for i in lst]"}, "716": {"problem_id": 3077, "answer": "def pattern(n):\n    return '\\n'.join([''.join([str(i) for i in range(1, n + 1)]).ljust(n,'') for _ in range(n)]);"}, "717": {"problem_id": 3078, "answer": "def array_center(arr):\n    m = min(arr)\n    n = len(arr)\n    return [i for i in arr if abs(i - m) < m]"}, "718": {"problem_id": 3079, "answer": "def big_primefac_div(n):\n    if isinstance(n, float) and n.is_integer():\n        n = abs(n)\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 1:\n        res.append(n)\n    return res"}, "719": {"problem_id": 3080, "answer": "def who_is_paying(name):\n    return [name, name[:2]] if len(name)>2 else [name]"}, "720": {"problem_id": 3081, "answer": "import random\ndef squares(n):\n    return [i**2 for i in range(1,n+1)]\n\ndef num_range(n, start, step):\n    return range(start, start+n*step, step)\n\ndef rand_range(n, mn, mx):\n    return random.randint(mn, mx)\n\ndef primes(n):\n    return [2,3,5,7,11,13,17,19]"}, "721": {"problem_id": 3082, "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number\n    \"\"\"\n    return n > 1 and all(n % d for d in range(2, int(n**0.5)+1))"}, "722": {"problem_id": 3083, "answer": "def polydivisible(x):\n    s = str(x)\n    return all(int(d)%i!=0 for i,d in enumerate(s))"}, "723": {"problem_id": 3084, "answer": "def combine(*args):\n    return {k: sum(v) for k, v in args.items()}"}, "724": {"problem_id": 3085, "answer": "def aks_test(p):\n    return all(n % p == 0 for n in range(1, p + 1, p))"}, "725": {"problem_id": 3086, "answer": "def unflatten(flat_array):\n    if len(flat_array) == 0:\n        return []\n    elif len(flat_array) == 1:\n        return flat_array[0]\n    else:\n        current_number = flat_array[0]\n        for i in range(1, len(flat_array)):\n            if current_number > 2:\n                current_number = current_number - flat_array[i]\n                flat_array.append(flat_array[i])\n            else:\n                flat_array.append(flat_array[i:])\n                current_number = current_number + flat_array[i]\n        flat_array = flat_array[1:]\n        return flat_array"}, "726": {"problem_id": 3087, "answer": "def solve(s):\n    return 'OK' if s == s[::-1] else'remove one' if s == s[::-1].replace('a', '')[:1] else 'not possible'"}, "727": {"problem_id": 3088, "answer": "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        return round(ppg*.9,1)"}, "728": {"problem_id": 3089, "answer": "def dashatize(num):\n    return '-'.join(['-' + str(i) if i % 2!= 0 else str(i) for i in range(0, num + 1)])"}, "729": {"problem_id": 3090, "answer": "def find_2nd_largest(arr):\n    s = set(arr)\n    return next(s) if len(s) > 1 else None"}, "730": {"problem_id": 3091, "answer": "def omit_hashtag(message, hashtag):\n    return message.replace(hashtag, '', 1)"}, "731": {"problem_id": 3092, "answer": "def denumerate(enum_list):\n    try:\n        return ''.join(sorted(enum_list, key=lambda tup: tup[1]))\n    except:\n        return False"}, "732": {"problem_id": 3093, "answer": "def insert_dash(num):\n    return ''.join(str(-num % 2) if num % 2 else str(num))"}, "733": {"problem_id": 3094, "answer": "def sum_array(arr):\n    if arr == None:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        arr.sort()\n        return sum(arr[1:])"}, "734": {"problem_id": 3095, "answer": "def my_add(a, b):\n    try:\n        return a + b\n    except TypeError:\n        return None"}, "735": {"problem_id": 3096, "answer": "def josephus(items,k):\n    return [i for i in items if len(items)%k==0]"}, "736": {"problem_id": 3097, "answer": "def rad_ladies(name):\n    return \"\".join(c for c in name if c.isalpha() or c.isalnum() or c == \"!\")"}, "737": {"problem_id": 3098, "answer": "def compute_depth(n):\n    d = set(str(n))\n    return len(d)"}, "738": {"problem_id": 3099, "answer": "from string import ascii_letters as abcdefghijklmnopqrstuvwxyz\ndef whoIsWinner(moves, con, sz):\n    d = {'R':0,'Y':1,'S':2}\n    for i in range(sz):\n        d[abcdefghijklmnopqrstuvwxyz[i]] += 1\n        for j in range(max(0, con-1), min(sz, con)):\n            x, y, z = abcdefghijklmnopqrstuvwxyz[j], abcdefghijklmnopqrstuvwxyz[j+1], abcdefghijklmnopqrstuvwxyz[j+2]\n            if x == con and y == con and z == con:\n                return True\n    return False"}, "739": {"problem_id": 3100, "answer": "def max_and_min(arr1,arr2):\n    m,n = max(arr1),min(arr2)\n    return [m,n]"}, "740": {"problem_id": 3101, "answer": "def palindrome_pairs(words):\n    return [[i,j] for i, j in enumerate(words) if str(words[i]) + str(words[j]) == str(words[:i]) + str(words[j:])]"}, "741": {"problem_id": 3102, "answer": "def locker_run(lockers):\n    return [i for i in range(1, lockers+1) if i % 2 == 0]"}, "742": {"problem_id": 3103, "answer": "def unique(integers):\n    return list(sorted(integers, key=int.__contains__))"}, "743": {"problem_id": 3104, "answer": "from math import ceil\ndef reindeer(presents):\n    if presents > 180: raise Exception(\"Too many presents\")\n    return 2 + ceil(presents/30)"}, "744": {"problem_id": 3105, "answer": "def count_sheep(n):\n    # your code\n    str = \"\"\n    for i in range(1, n+1):\n        str += f\"{i} sheep...\"\n    return str"}, "745": {"problem_id": 3106, "answer": "from functools import reduce\ndef combs_non_empty_boxes(n,k):\n    if k>n: return \"It cannot be possible!\"\n    l=reduce(lambda x,y:x*y,range(1,n+1),[]);l=l[:]+l[::-1]\n    return len(l)"}, "746": {"problem_id": 3107, "answer": "def distance(p1, p2):\n    return sum((x-y)**2 for x,y in zip(p1, p2))**0.5 if len(p1)==len(p2) else -1"}, "747": {"problem_id": 3108, "answer": "def multi_table(number):\n    return '\\n'.join(f'{i} * {number} = {i * number}\\n' for i in range(1, 11))"}, "748": {"problem_id": 3109, "answer": "import re\ndef scramble_words(words):\n    return ''.join(sorted(words.split(' '), key=lambda x: x[0]))"}, "749": {"problem_id": 3110, "answer": "def two_decimal_places(n):\n    return round(n, 2)"}, "750": {"problem_id": 3111, "answer": "def number_format(n):\n    return ','.join(str(i) for i in range(n, 0, -1))"}, "751": {"problem_id": 3112, "answer": "def avoid_obstacles(arr):\n    x = 0\n    y = 0\n    for i in range(1, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n        elif arr[i] < y:\n            y = arr[i]\n    return y"}, "752": {"problem_id": 3113, "answer": "def distribute(m, n):\n    if m <= 0:\n        return []\n    if n <= 0:\n        return []\n    cnt = 0\n    for i in range(n):\n        cnt += (m-i)\n        m = i\n    return [cnt]"}, "753": {"problem_id": 3114, "answer": "def year_days(year):\n    if year%100==0:\n        if year%400==0:\n            return f'{year} has 366 days'\n        else:\n            return f'{year} has 365 days'\n    elif year%4==0:\n        return f'{year} has 366 days'\n    else:\n        return f'{year} has 365 days'"}, "754": {"problem_id": 3115, "answer": "def diagonal_sum(array):\n    return sum(array[i] for i in range(1, len(array)) if array[i][0] == i)"}, "755": {"problem_id": 3116, "answer": "def cal_n_bug(n_head, n_leg, n_wing):\n    spider = 8 - n_leg\n    butterfly = 6 - n_wing\n    dragonfly = 2 - n_leg\n    return [spider,butterfly,dragonfly] if spider>0 and butterfly>0 and dragonfly>0 else [-1,-1,-1]"}, "756": {"problem_id": 3117, "answer": "def solve(s):\n    return max(len(s) for i in range(len(s)) if s[i] in 'aeiou')"}, "757": {"problem_id": 3118, "answer": "def is_lucky(n):\n    return sum(map(int, str(n))) % 9 == 0"}, "758": {"problem_id": 3119, "answer": ""}, "759": {"problem_id": 3120, "answer": "def meeting(rooms, number):\n    if number == 0:\n        return \"Game On\"\n    chairs = []\n    for r in rooms:\n        chairs.append(min(8, len(r.occupants)))\n        if chairs == r.occupants:\n            return [r.occupants] + chairs"}, "760": {"problem_id": 3121, "answer": "def solve(arr):\n    for i in arr:\n        if arr.count(i)!= arr.count(-i):\n            return i"}, "761": {"problem_id": 3122, "answer": "def chess_triangle(n, m):\n    return sum(8*(n-i)*(m-j) for i in range(1,n+1) for j in range(1,m+1))"}, "762": {"problem_id": 3123, "answer": "def count_repeats(s):\n    return sum(1 for c in s if c not in 'ab cca')"}, "763": {"problem_id": 3124, "answer": "def get_exponent(n, p):\n    if p <= 1:\n        return None\n    elif n % p == 0:\n        return n // p"}, "764": {"problem_id": 3125, "answer": "def solve(n):\n    if n < 4:\n        return -1\n    N = int(n**0.5)\n    while N > 0:\n        N //= 2\n        if n + N.is_integer():\n            return N\n    return -1"}, "765": {"problem_id": 3126, "answer": "def palindrome_rearranging(s):\n    return sum(s.count(c) % 2 for c in set(s)) < 2"}, "766": {"problem_id": 3127, "answer": "def string_chunk(string, n=0):\n    if type(n)!= int or n <= 0:\n        return []\n    return [string[i:i+n] for i in range(0, len(string), n)]"}, "767": {"problem_id": 3128, "answer": "def is_mac_48_address(address):\n    return '0x' + address.translate(str.maketrans('0123456789ABCDEF', 'abcdefghijklmnopqrstuvwxyz')) not in '0123456789ABCDEF'"}, "768": {"problem_id": 3129, "answer": "def divisible_by_three(st):\n    return sum(int(n) for n in st) % 3 == 0"}, "769": {"problem_id": 3130, "answer": "def has_subpattern(string):\n    s = len(string)\n    for i in range(1, s//2 + 1):\n        if string[i-1] + string[i] == string[s-i-1]:\n            return True\n    return False"}, "770": {"problem_id": 3131, "answer": "from functools import reduce\nfrom operator import mul\ngetcontext().prec = 10**9"}, "771": {"problem_id": 3132, "answer": "def alternate_sort(l):\n    neg, n = 0, -1\n    for x in sorted(l):\n        if x < 0:\n            neg += 1\n        elif x > 0:\n            n += 1\n    return neg, n"}, "772": {"problem_id": 3133, "answer": "def vaccine_list(age, status, month):\n    d = {'fiveInOne': ['8 weeks', '12 weeks', '16 weeks'],\n          'pneumococcal': ['8 weeks', '16 weeks'],\n          'rotavirus': ['8 weeks', '12 weeks'],\n         'meningitisB': ['8 weeks', '16 weeks', '12 months'],\n          'hibMenC': ['12 months'],\n         'measlesMumpsRubella': ['12 months', '40 months'],\n          'fluVaccine': ['september','october','november'],\n          'preSchoolBooster': ['40 months']}\n    return sorted(d.keys(), key=lambda x: x[0]) + [m]"}, "773": {"problem_id": 3134, "answer": "import re\ndef is_valid(idn):\n    return bool(re.match('^[a-zA-Z_$][\\w$]*$',idn))"}, "774": {"problem_id": 3135, "answer": "def meeting_time(Ta, Tb, r):\n    if Ta == 0:\n        return '%d:%d' % (Tb, abs(Tb))\n    elif Tb == 0:\n        return '%d:%d' % (Ta, abs(Ta))\n    else:\n        return f'{abs(Ta)**2 + abs(Tb)**2}:\\frac{1}{2}'.rstrip('0')"}, "775": {"problem_id": 3136, "answer": "def people_with_age_drink(age):\n    if age < 14:\n        return \"drink toddy\"\n    elif age < 18:\n        return \"drink coke\"\n    elif age < 21:\n        return \"drink beer\"\n    else:\n        return \"drink whisky\""}, "776": {"problem_id": 3137, "answer": ""}, "777": {"problem_id": 3138, "answer": "def climb(n):\n    return [n//2] + [n+1 if n%2 else n//2]"}, "778": {"problem_id": 3139, "answer": "def index(array, n):\n    if n >= len(array):\n        return -1\n    else:\n        return array[n] ** n"}, "779": {"problem_id": 3140, "answer": "def happy_numbers(n):\n    return [i for i in range(1,n+1) if i not in [1,2,3,4,5,6,7,8,9]]"}, "780": {"problem_id": 3141, "answer": "from heapq import heapify, heappush, heappop\n\ndef comb(fruits):\n    heapify(fruits)\n    total_cost = 0\n    while len(fruits) > 1:\n        total_cost += heappop(fruits)\n        heappush(fruits, heappop(fruits)[1])\n    return total_cost"}, "781": {"problem_id": 3142, "answer": "def seven_ate9(str_):\n    return ''.join(s for s in str_ if s.isalnum())"}, "782": {"problem_id": 3143, "answer": "def sort_by_name(arr):\n    return sorted(arr, key=lambda x: x.lower())"}, "783": {"problem_id": 3144, "answer": "from collections import Counter\n\ndef number_of_pairs(gloves):\n    return sum(c//2 for c in Counter(gloves).values())"}, "784": {"problem_id": 3145, "answer": "def greet(name):\n    return \"Hello, {} how are you doing today?\".format(name)"}, "785": {"problem_id": 3146, "answer": "def to_utf8_binary(string):\n    return ''.join(format(c, 'b') for c in string.encode('utf-8'))\n"}, "786": {"problem_id": 3147, "answer": "from itertools import accumulate\ndef total_primes(a, b):\n    primes = [2, 3]\n    for i in range(a, b+1):\n        if i not in primes:\n            primes.append(i)\n    return list(accumulate(primes))"}, "787": {"problem_id": 3148, "answer": "def simplify(path):\n    d = {'^': (0,1), 'v': (0,-1), '<':(-1,0), '>':(1,0)}\n    for i in path:\n        d[i[0]] += (i[1],1)\n        d[i[1]] += (i[0],1)\n    return ''.join(reversed(d.get(k,k)) for k in d)"}, "788": {"problem_id": 3149, "answer": "def roof_fix(f,r):\n    return all(c =='' for c in zip(*[iter(r)]*2))"}, "789": {"problem_id": 3150, "answer": "def binary_cleaner(seq): \n    return [n for n in seq if n < 2], [i for i, n in enumerate(seq) if n > 1]"}, "790": {"problem_id": 3151, "answer": "def totalAmountVisible(topNum, numOfSides):\n    return sum(1 for i in range(numOfSides) if i%2!=0)"}, "791": {"problem_id": 3152, "answer": "def interpreter(tape, array):\n    s = 0\n    for i in array:\n        if i == \"1\":\n            s += 1\n        else:\n            s += -1\n    return \"\".join(map(str, array[s:]))"}, "792": {"problem_id": 3153, "answer": "def playerRankUp(pts):\n    if pts >= 100:\n        return \"Well done! You have advanced to the qualifying stage. Win 2 out of your next 3 games to rank up.\"\n    else:\n        return False"}, "793": {"problem_id": 3154, "answer": "def color_2_grey(colors):\n    return [[[round(sum(rgb) / 3.0) for rgb in row] for row in colors] for rgb in zip(*colors)]"}, "794": {"problem_id": 3155, "answer": "fit_in = lambda a,b,m,n: min(a,b) + max(m,n)"}, "795": {"problem_id": 3156, "answer": "def even_digit_squares(a, b):\n    return [n*n for n in range(a, b)]"}, "796": {"problem_id": 3157, "answer": "def number(bus_stops):\n    # Good Luck!\n    return sum(i[0]-i[1] for i in bus_stops)"}, "797": {"problem_id": 3158, "answer": "def one_down(txt):\n    if type(txt) is not str:\n        return \"Input is not a string\"\n    s = ''.join(chr(97 + i) for i in txt)\n    return \"\".join(s[i:i+len(s) - len(s.isalpha())] for i in range(0, len(s), len(s)))"}, "798": {"problem_id": 3159, "answer": "def is_odd_heavy(arr):\n    return len(arr) == len(set(arr))"}, "799": {"problem_id": 3160, "answer": "from functools import reduce\ndef multi(l_st):\n    return reduce(lambda a, b: a * b, l_st, 1)"}, "800": {"problem_id": 3161, "answer": "def select(memory):\n    s = memory.split(', ')\n    s.pop()\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop("}, "801": {"problem_id": 3162, "answer": "def compare(s1,s2):\n    if s1 == None or not s1.isalpha():\n        s1 = ''\n    if s2 == None or not s2.isalpha():\n        s2 = ''\n    return sum([ord(x) for x in s1.upper()]) == sum([ord(x) for x in s2.upper()])"}, "802": {"problem_id": 3163, "answer": "def triangular_sum(n):\n    return n**0.5 % 1 == 0"}, "803": {"problem_id": 3164, "answer": "def group_by_commas(n):\n    return '{:,}'.format(n)"}, "804": {"problem_id": 3165, "answer": "from math import log2\n\ndef toothpick(n):\n    \"\"\"TODO: O(1)\"\"\"\n    if n == 0:\n        return 0\n    i = 1\n    k = 2**(log2(n))\n    while i <= n:\n        k += 2**i\n        i += log2(i)\n    return k"}, "805": {"problem_id": 3166, "answer": "def circle_slash(n):\n    return int(n**.5)"}, "806": {"problem_id": 3167, "answer": "def twos_difference(lst): \n    return [(i, j) for i, j in enumerate(lst) if abs(i - j) == 2]"}, "807": {"problem_id": 3168, "answer": "def grabscrab(word, possible_words):\n    return [word] + list(filter(lambda w: sorted(w) == sorted(possible_words), possible_words))"}, "808": {"problem_id": 3169, "answer": "def count_odd_pentaFib(n):\n    return sum(1 for i in range(n+1) if i%2!=0)"}, "809": {"problem_id": 3170, "answer": "def longer(s):\n    return''.join(sorted(sorted(s.split(' ')), key=len))"}, "810": {"problem_id": 3171, "answer": "from functools import reduce\nclass Crash(object):\n    def __init__(self, w):\n        self.w = w\n        self.sz = len(w)\n    def __lt__(self, other):\n        return self.w > other.w\n    def __eq__(self, other):\n        return self.w == other.w"}}
{"0": {"problem_id": 2361, "answer": "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]*n\n    heapq.heappush(a,0)\n    for i in range(1,n):\n        if a[i]==0:\n            a[i] = i+1\n        elif a[i]%2==0:\n            heapq.heappush(a,a[i]//2)\n        else:\n            heapq.heappush(a,a[i-1]//2)\n    print(*a)"}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [[-10**5] * N for _ in range(N)]\n    for i in range(N):\n        x, y, f1, f2, f3, f4 = map(int, input().split())\n        A[i][0] = x\n        A[i][1] = y\n        A[i][2] = f1\n        A[i][3] = f2\n        A[i][4] = f3\n        if f1 == 0:\n            A[i][5] = 0\n        elif f2 == 0:\n            A[i][5] = N\n        elif f3 == 0:\n            A[i][5] = N\n        elif f4 == 0:\n            A[i][5] = 0\n    print(*A[N-1])\n"}, "2": {"problem_id": 2363, "answer": "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1, n):\n        ans = min(ans, a[i] - a[i - 1])\n    print(ans)"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort()\n    ans=0\n    cnt=0\n    for i in range(n):\n        ans+=min(p[i])\n        cnt+=1\n        for j in dist[i]:\n            if cnt==m:\n                break\n            else:\n                ans+=min(p[j])\n    print(ans)"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n        k=int(input())\n        seg.append(list(map(int,input().split())))\n    print(*seg)"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10000000000000000\n    cnt = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            cnt += 1\n    print(cnt)"}, "6": {"problem_id": 2367, "answer": "from collections import *\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    a=input()\n    b=input()\n    if set(a)&set(b):\n        print('YES')\n    else:\n        print('NO')\n"}, "7": {"problem_id": 2368, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += max(a[i]-a[i-1], b[i]-b[i-1])\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [0] + list(map(int, input().split())) + [0]\n    ANS = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] == 0:\n            ANS[i] = i\n        else:\n            ANS[i] = max(ANS[i - 1], i)\n    print(ANS[N], ANS[N] + 1)"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, n+1):\n        d[i] = d.get(i, 0) + i\n    ans = 0\n    for i in range(1, n+1):\n        if a[i] not in d:\n            ans = max(ans, i)\n        else:\n            j = d[a[i]]\n            while j > 1:\n                j = j>>1\n            ans = max(ans, i - j)\n    print(ans)"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=min(a)\n    ind=s.index(min(a))\n    print(n-ind)"}, "11": {"problem_id": 2372, "answer": "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=int(math.sqrt(n))\n    print(min(a+int(n**(1/a-0.5),math.floor(n/a))))"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(2*k+1):\n        if a[i]>k:\n            break\n        ans+=d[a[i]]\n        if i==n//2:\n            d[a[i]]=i\n    print(ans)\n"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    s=input().strip()\n    a=s.split()\n    a=[int(i) for i in a]\n    b=[]\n    for i in range(n):\n        if i%2==0:\n            b.append(a[i])\n        else:\n            b.append(None)\n    if len(b)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    ans = 0\n    for i in range(1, n):\n        if len(d) < 2:\n            continue\n        ans = max(ans, len(a) - i - 1)\n        d[a[i]] = i\n    print(ans)"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    le=[]\n    c=0\n    for i in range(k):\n        if c==0:\n            le.append(i+1)\n            c=1\n    print(le[k-1])\n"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(n-cnt)"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    S = input().rstrip()\n    L = min(S.count('L'), 10**5)\n    R = min(S.count('R'), 10**5)\n    U = min(S.count('U'), 10**5)\n    D = min(S.count('D'), 10**5)\n    ans = L + R + U + D\n    if ans == 0:\n        print(0)\n        print('')\n    elif ans == L:\n        print(2)\n        print('L')\n    elif ans == R:\n        print(2)\n        print('R')\n    elif ans == U:\n        print(2)\n        print('U')\n    elif ans == D:\n        print(2)\n        print('D')\n    else:\n        print(ans - 1)\n        print('L'*(ans-1)+'R'*(ans-2)+'U'*(ans-3)+'D'*(ans-4))"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    ans=[]\n    ans.append(0)\n    ans.append(0)\n    for i in range(n):\n        if s[i]=='1':\n            ans.append(i+1)\n        else:\n            ans.append(i+1)\n    print(len(ans),*ans)"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    d=k//n\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        elif d>k//n:\n            d-=1\n        else:\n            ans+=d\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    S=input().strip()\n    ANS=0\n    ans=0\n    for i in range(len(S)):\n        if S[i]==\"R\":\n            ANS+=1\n        elif S[i]==\"L\":\n            ANS-=1\n        else:\n            ans=max(ans,abs(ANS-1))\n    print(ans)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=input().strip()\n    ANS=[]\n    for i in range(n):\n        ANS.append(A[i])\n    "}, "22": {"problem_id": 2383, "answer": "import math\nt=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    print(2*min(a,b))\n"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(len(b) + len(reversed(b)))\n"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    grid=[]\n    for _ in range(n):\n        grid.append(input().rstrip('\\n'))\n    grid.sort()\n    d={}\n    for i in range(n):\n        d[grid[i][0]]=grid[i][1]\n    ans=0\n    curr=0\n    cnt=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='U':\n                if d[grid[i][j]]=='U':\n                    curr+=1\n                elif d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='R':\n                if d[grid[i][j]]=='R':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='D':\n                if d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            else:\n                if d[grid[i][j]]=='L':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n    print(ans,cnt)"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a[::-1])"}, "26": {"problem_id": 2387, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n >= 10:\n        ans += n // 10\n        n //= 10\n    print(ans + n)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        g[x].append(y)\n        g[y].append(x)\n    col = [-1] * n\n    col[0] = 0\n    ans = [0] * n\n    d = {}\n    for i in range(n):\n        if col[i] == -1:\n            col[i] = d.get(i, 0) + 1\n            ans[i] = 1\n    print(n // 2)\n    for i in ans:\n        print(i, end ='')\n    print()"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k):\n        if s[i]!=s[i+1]:\n            ans += 1\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(n):\n        d[a[i]-1] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[a[i]]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 2):\n        if l[i] > l[i + 1] and l[i] > l[i + 2]:\n            ans += 1\n        elif l[i] == l[i + 1] and l[i] == l[i + 2]:\n            ans += 1\n        else:\n            idx1 = l[i]\n            idx2 = l[i + 1]\n            idx3 = l[i + 2]\n            idx4 = l[i + 3]\n            idx5 = l[i + 4]\n            idx6 = l[i + 5]\n            idx7 = l[i + 6]\n            idx8 = l[i + 7]\n            idx9 = l[i + 8]\n            idx10 = l[i + 9]\n            idx11 = l[i + 10]\n            idx12 = l[i + 11]\n            idx13 = l[i + 12]\n            idx14 = l[i + 13]\n            idx15 = l[i + 14]\n            idx16 = l[i + 15]\n            idx17 = l[i + 16]\n            idx18 = l[i + 17]\n            idx19 = l[i + 18]\n            idx20 = l[i + 19]\n            idx21 = l[i + 20]\n            idx22 = l[i + 21]\n            idx23 = l[i + 22]\n            idx24 = l[i + 23]\n            idx25 = l[i + 24]\n            idx26 = l[i + 25]\n            idx27 = l[i + 26]\n            idx28 = l[i + 27]\n            idx29 = l[i + 28]\n            idx30 = l[i + 29]\n            idx31 = l[i + 30]\n            idx32 = l[i + 31]\n            idx33 = l[i + 32]\n            idx34 = l[i + 33]\n            idx35 = l[i + 34]\n            idx36 = l[i + 35]\n            idx37 = l[i + 36]\n            idx38 = l[i +"}, "31": {"problem_id": 2392, "answer": "import sys\nreadline = sys.stdin.readline\n\nQ = int(readline())\nfor _ in range(Q):\n    N, M = list(map(int, readline().split()))\n    s = 0\n    cur = 1\n    for i in range(M):\n        if (cur % M == 0) and (i % 10!= 0):\n            s += str(cur)\n            cur = cur * 10 % 10\n        elif (cur % 10 == 0) and (i % 5!= 0):\n            s += str(cur)\n            cur = cur * 5 % 5\n        else:\n            s += str(cur)\n    print(s)"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    s=input().rstrip()\n    \n    for i in range(n):\n        s=s.replace(\"1\", \"0\")\n    "}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    for i in s:\n        if i == '2':\n            a.append('1')\n        elif i == '1':\n            a.append('0')\n        else:\n            a.append(i)\n    print(''.join(a))\n    print(''.join(b))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            ans += 1\n        elif s[i]!= s[i-2]:\n            ans += 1\n    print(ans)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=set()\n    for i in range(n):\n        A.add(input())\n    ANS=[]\n    for i in range(m):\n        ANS.append([0]*m)\n    ANS.sort()\n    print(int(\"\".join(map(str,ANS)),2) )\n"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    f=0\n    for i in range(1,n):\n        if a[i]!=b[i]:\n            f=1\n            break\n    if f==0:\n        print(-1)\n        continue\n    pos=[]\n    for i in range(1,n):\n        if a[i]==b[i]:\n            pos.append(i)\n    if pos==[]:\n        print(-1)\n        continue\n    for i in range(1,n):\n        if pos[i] not in pos:\n            print(-1)\n            continue\n        for j in range(i+1,n):\n            if pos[j] not in pos:\n                print(-1)\n                break\n            if pos[i] not in pos:\n                print(-1)\n                break\n            if pos[j]==pos[i]:\n                print(i+1)\n                break\n            pos.remove(pos[j])\n            pos.remove(pos[i])\n            f=1\n    elif pos==[]:\n        print(-1)\n        continue\n    print(min(pos))"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    G = [[] for i in range(n)]\n    for i in range(m):\n        t, x, y = map(int, input().split())\n        G[t].append((x, y))\n        G[y].append((x, t))\n    ans = ['NO'] * n\n    ans[0] = 'YES'\n    for i in range(1, n):\n        if m & (1 << i):\n            continue\n        G[i].append((1 << i, i))\n        ans[i] = 'YES'\n        for j in G[i]:\n            if j[0] == 1:\n                print('NO')\n                break\n        else:\n            print('NO')"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    T = [int(i) for i in input().split()]\n    ANS = [1] * N\n    TYPE = [0] * N\n    TYPE[T.index(1)] += 1\n    for i in range(N):\n        if TYPE[i] == 0:\n            TYPE[i] = 1\n        else:\n            TYPE[i] *= 2\n        ANS[i] = TYPE[i]\n    print(len(ANS))\n    print(*ANS, sep='\\n')\n"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_s = str.split()\n         str_p = ''.join(str_s)\n         if str_p == pattern:\n             return True\n         else:\n             return False"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         words = s.split(' ')\n         return''.join(words[::-1])"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<2:\n             return False\n         s=1\n         for i in range(2,num):\n             if num%i==0:\n                 s+=i\n                 if s==i:\n                     return True\n         return False"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        i = 1\n        while i < n:\n            if arr[i] not in arr[i+1:]:\n                k -= 1\n            i += 1\n        return k"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = {0: (0,1), 1: (0, -1), 2: (1, 0), 3: (1, 1), 4: (2, 0), 5: (2, 1), 6: (3, 0), 7: (3, 1), 8: (4, 0), 9: (4, 1)}\n        x, y = 0, 0\n        ans = 0\n        for command in commands:\n            if command == -2:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else 1))\n            elif command == -1:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else -1))\n            else:\n                ans = max(ans, (x + d[command[0]][0], y + d[command[0]][1]))\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        left = 0\n        right = l - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         chars_set = set(chars)\n         return self.helper(s, chars_set)\n "}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        n = str(num)\n        d = {0: '9', 1: '6', 2: '0', 3: '9', 4: '0', 5: '9', 6: '0', 7: '9', 8: '0', 9: '9'}\n        for i in range(len(n)):\n            if n[i] == '6':\n                n[i] = '9'\n            elif n[i] == '9':\n                n[i] = '6'\n        res = 0\n        for i in range(len(n)):\n            if n[i] == '9':\n                res = max(res, int(n[i]))\n        return res"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n        if lps!= tps:\n            return False\n        \n        name = name.lower()\n        typed = typed.lower()\n        \n        i = 0\n        while i < lps:\n            if name[i] == typed[i]:\n                i += 1\n            else:\n                return False\n        "}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for num in nums:\n             if max(num, nums[1]) > max_num:\n                 max_num = max(num, nums[1])\n         return max_num"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n            if S[i] == S[i+1]:\n                i += 2\n            else:\n                i += 1\n            "}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n==1: return 9\n         if n==2: return 987\n         a=0\n         b=1\n         for i in range(2,9*10**(n-1)):\n             a=a*b\n             b=b*10+a\n         return (int(''.join([str(a),str(b)]),2)%1337)"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ans += 1\n        return ans"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return self.helper(nums, target)\n         else:\n             return len(nums)"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         n = num\n         while n > 0:\n             n = n // 2\n         return n == int(n)"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         elif num < 7:\n             return '0' + self.convertToBase7(num//7)\n         else:\n             return chr(num+ord('0'))"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         return len(nums) >= 2 and all(nums)"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, A, B):\n         \"\"\"\n         :type A: str\n         :type B: str\n         :rtype: int\n         \"\"\"\n         if len(A) < len(B):\n             return -1\n         d = {}\n         for i in range(len(A)):\n             d[A[i]] = d.get(A[i],0) + 1\n         ans = 0\n         for i in range(len(B)):\n             ans += d.get(B[i],0)\n         return ans if ans < len(A) else -1"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t): return False\n         dic = {}\n         for i in range(len(s)):\n             if s[i] not in dic:\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         for i in range(len(t)):\n             if t[i] not in dic:\n                 dic[t[i]] = 1\n             else:\n                 dic[t[i]] += 1\n         for k in list(dic.keys()):\n             if k not in dic:\n                 return False\n         return True"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return nums[0]\n         \n         count = collections.Counter(nums)\n         for i in range(1,l):\n             if count[i] > count[i-1]:\n                 return nums[i]\n"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mx = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                mx = max(mx, (nums[i]-1)*(nums[j]-1))\n        return mx"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = nums[i - 1] + dp[i - 1]\n            \n        for i in range(1, n + 1):\n            if dp[i] <= 1:\n                continue\n            min_sum = dp[i]\n            for j in range(i):\n                if dp[j] > 1:\n                    break\n                min_sum += nums[j]\n            if min_sum < 1:\n                dp[i] = min_sum\n        return dp[-1]"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) < len(num2):\n             num1, num2 = num2, num1\n         \n         res = 0\n         for i in range(len(num1)):\n             res += int(num1[i]) * int(num2[i])\n         return res"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s.split())"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        for i in range(len(A)):\n            if K < 0:\n                K += 2**(i) - 1\n            elif K > 0:\n                K -= 2**(i) + 2\n            else:\n                A[i] += 2**(i)\n                K += 2**(i)\n                \n            if min_val < A[i]:\n                min_val = A[i]\n            if max_val > A[i] + min_val:\n                max_val = A[i] + min_val\n        "}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             if num == 1:\n                 curr_max += 1\n             else:\n                 curr_max = 0\n                 max_cnt = max(max_cnt, curr_max)\n         return max_cnt"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         ans = 0\n         for i in d:\n             ans += i\n         return ans"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        x1, y1, x2, y2 = points[0]\n        x3, y3, x4, y4 = points[1]\n        x5, y5, x6, y6 = points[2]\n        \n        if (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return True\n        elif (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return False\n        else:\n            return False"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n==0:\n             return False\n         elif n%2==0:\n             return True\n         else:\n             return False"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         cnt = 0\n         for i in range(len(nums)):\n             if nums[i] + k < nums[i]:\n                 cnt += 1\n             elif nums[i] + k > nums[i]:\n                 cnt += 1\n         return cnt"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         n = len(ops)\n         if n == 0:\n             return 0\n         ops.sort()\n         cnt = [0] * n\n         for i in range(n):\n             cnt[i] += ops[i].count('D')\n             cnt[i] += ops[i].count('C')\n             cnt[i] += ops[i].count('+')\n         "}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         n = len(S)\n         if n < K:\n             return '-'*(n-K) + S"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(bits)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if bits[i] == 1:\n                 i += 2\n             else:\n                 i += 1\n         return i == n"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        d = {c:i for i,c in enumerate(['a','b','c'])}\n        s = 'a'\n        for i in range(1,n):\n            s = ''.join(d.get(c,s) for c in d)\n        return s"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         for i in range(len(s)):\n             if s[i].isalnum() == False:\n                 continue\n             if s[i] in chars:\n                 return True\n             else:\n                 s = s[0:i] + s[i+1:]\n         return False"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        d = {}\n        for i in range(len(arr)):\n            d[arr[i]] = d.get(arr[i],0) + 1\n            if d[arr[i]] > m:\n                return False\n            elif d[arr[i]] == m:\n                if k > 0:\n                    return True\n                else:\n                    return False\n        return True"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == '':\n             return 0\n         s = s.split()\n         return len(s[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == \"\":\n             return 0\n         l = len(haystack)\n         r = len(needle)\n         if l < r:\n             return -1\n         res = 0\n         for i in range(l):\n             if haystack[i] == needle[i]:\n                 res = i + 1\n         return res"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         elif n == 1:\n             return 1\n         elif n == 2:\n             return 2\n         else:\n             return self.climbStairs(n-1) + self.climbStairs(n-2)"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = {c: i for i, c in enumerate(s)}\n        ans = ''\n        for i in range(n-2):\n            if s[i] == s[i+1]:\n                continue\n            elif d[s[i]] < d[s[i+1]]:\n                ans += s[i+1]\n                d[s[i]] = d[s[i+1]]\n            else:\n                ans += s[i]\n        return ans"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        d = Counter(s)\n        ans = []\n        while d:\n            ans.append(s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):])\n            d[s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):]]-=1\n            s=sorted(list(d.items()), key=lambda x:x[1], reverse=True)\n        return ''.join(ans)"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n            d[i] += 1\n        return max(d.values())"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        '''\n        \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        '''\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d[i-1] + 1)\n        "}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 1:\n             return True\n         elif word.isupper():\n             return True\n         elif word.islower():\n             return True\n         else:\n             return False"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 1\n         elif len(nums) == 2:\n             return max(nums) - min(nums)\n         else:\n             ans = 0\n             for i in range(1, len(nums)):\n                 ans += max(nums[i] - nums[i-1].imag, nums[i].real)\n             return ans"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n         l = len(s)\n         if l%2==0:\n             return ''.join(reversed(vowels))"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for i in range(len(s)):\n             if s[i].lower() not in dic.keys():\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         return max(dic.values())"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n+1)\n        dp[1] = 1\n        for i in range(2, n+1):\n            if s[i-1]!= s[i]:\n                dp[i] = min(dp[i-1], dp[i-2] + 1)\n            else:\n                dp[i] = dp[i-1]\n        return dp[-1]"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n        ans = 0\n        mx = salary[0]\n        mn = salary[-1]\n        for i in range(1, n):\n            ans += salary[i]\n            mx = min(mx, salary[i])\n            mn = max(mn, salary[i])\n        return ans/float(n)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in range(len(ransomNote)):\n             if ransomNote[i] not in magazine:\n                 return False\n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        heap = [stones[0]]\n        for i in range(1, n):\n            heapq.heappush(heap, stones[i])\n        "}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         num = 0\n         while n > 0:\n             num += n%10\n             n //= 10\n         return num == 1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         res = \"\"\n         while n > 0:\n             res += chr(ord('A') + n)\n             n = n - 1\n         return res"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        d = defaultdict(int)\n        for i in range(len(startTime)):\n            d[startTime[i]] += 1\n        "}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        s = list(S)\n        t = list(T)\n        backslash = '#'\n        for i in range(len(s)):\n            if s[i] == backslash:\n                s[i] = None\n            elif s[i] == t[i]:\n                return True\n        return False"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = sum(nums)\n         r = l\n         \n         for i in range(len(nums)):\n             if l == r:\n                 return i\n             \n             l = l - nums[i]\n             r = r - nums[i]\n         "}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        \n        left, right = 0, 0\n        for i in range(1, n):\n            if s[i] == 'R':\n                right += 1\n            else:\n                left += 1\n        \n        return max(left, right)"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         res = ''\n         while num > 0:\n             res += str(num & 0xFF)\n             num >>= 8\n         return res"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         m = max(nums)\n         res = 0\n         for i in nums:\n             res = max(res, i)\n             if i < m:\n                 res = max(res, i)\n         return res"}}
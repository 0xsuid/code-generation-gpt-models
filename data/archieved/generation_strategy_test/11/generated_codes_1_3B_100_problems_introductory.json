{"0": {"problem_id": 2361, "answer": "import heapq as hq\nt = int(input())\nfor _ in range(t):\n  n = int(input())\n  \n  ans = [0]*n\n  ans[0] = 1\n  hq.heapify(ans)\n  "}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n=int(input())\n  a=[list(map(int,input().split())) for i in range(n)]\n  a.sort(key=lambda x:x[2].is_integer())\n  print(\" \".join(map(str,a)))"}, "2": {"problem_id": 2363, "answer": "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(m.ceil(a[n-1] - a[0]) + 1)"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort(key=lambda x:x[1],reverse=True)\n    ans=10**9+10\n    cnt=0\n    ans=min(ans,sum(dist[a])*p[a])\n    for i in range(1,n+1):\n\\t\\tprint(ans)\n"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n\\t    print(int(input()),end=' ')\n"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n  N = int(input())\n  A = list(map(int, input().split()))[:N]"}, "6": {"problem_id": 2367, "answer": "from collections import deque"}, "7": {"problem_id": 2368, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n%time le = min(a)\n%time bo = min(b)\nans = 0\nfor i in range(n):\n    ans += max(a[i]-le, b[i]-bo)\nprint(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n  "}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline"}, "11": {"problem_id": 2372, "answer": "import math as m\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    m.ceil(m.sqrt(n))\n    print(m.SQRT(n))"}, "12": {"problem_id": 2373, "answer": "import sys.stdin.readline as readline\nt = int(readline())\nfor _ in range(t):\n    n, k = map(int, readline().split())\n    a = list(map(int, readline().split()))\n    ans = 0\n    curr = a[0]\n    for i in range(1, n // 2):\n\\t\\tcurr += a[i] + a[n - i - 1]\n\\t\\thasse{\\t\\t\\\"useastronaut\\\"}\n        curr -= min(curr, k)\n        ans += min(curr, k)\n  "}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(1,200):\n        d[i]=[]\n    for i in range(n):\n\\t\\t    a[i]=sorted(a[i])\n\\t\\t\\t\n    for i in range(len(a)):\n        if len(a[i])>2:\n            d[a[i][i]].append(i)\n  "}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n      "}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n\\t\\t\"Wrong\"\n        ind+=1\n        cnt+=1"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    s=input().rstrip()\n    n=len(s)"}, "18": {"problem_id": 2379, "answer": "import sys.stdin as isent\ninput = isent.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input()"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input(\"\".join(map(str,input().split())))\n    if len(s)==n:\n        print(k)\n    elif min(k-len(s))**2<=n:\n"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    s = input().rstrip()\n    ans = 0\n    cnt = 0\n    for i in range(len(s)):\n\\t\\t    if s[i] == 'R':\n\\t\\t\\t cnt += 1\n\\t\\telswo = max(0, i - cnt)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline"}, "22": {"problem_id": 2383, "answer": "import math as m"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\\t\\t\nprint(0)"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n,m=map(int,input().split())\n  grid=[0]*n\n  for i in range(n):\n    grid[i]=list(map(int,input().split()))\n  dirs=[0,0]\n  blacks=[0]*min(n,m)\n  blacks[0]=1\n  blacks[m-1]=1\n  top=[0]*min(n,m)\n  bottom=[0]*min(n,m)\n  left=[0]inbounds(min(n,m),0,n-1)\n  right=[0]inbounds(min(n,m),0,m-1)"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n  N = int(input())\n  A = list(map(int, input().split()))\n  print(*A)"}, "26": {"problem_id": 2387, "answer": "import sys\nreadline = sys.stdin.readline"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n\\t    adj = dict()\n\\t\\tvisited = [False] * n\nprint(n + 1)\nans = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    g[a].append(b)\n  "}, "28": {"problem_id": 2389, "answer": "import sys"}, "29": {"problem_id": 2390, "answer": "import sys"}, "30": {"problem_id": 2391, "answer": "import heapq as hp\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 10**9 + 1\n    heapq.heappush(s, a[0])\n  "}, "31": {"problem_id": 2392, "answer": "import sys\nreadline = sys.stdin.readline\n\nINF = 10**18"}, "32": {"problem_id": 2393, "answer": "import sys as _sys"}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    curr = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == ')'.find('('):\n            curr += 1\n       elif s[i] == ')'.find(')':\n"}, "34": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().strip()\n    a=[]\n    b=[]\n"}, "35": {"problem_id": 2396, "answer": "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    D=[[] for i in range(n)]\n    for i in range(m):\n        t,x,y=list(map(int,input().split()))\n%matplotlib inline\nfrom collections import deque\nfrom heapq import heappush, heappop\nsys.setrecursionlimit(10**6)"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n   print(n-1)\n   print(*reversed(a))"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n     \u5b57\u5178\u5339\u914d\uff0c\u5bfb\u627e\u76f8\u7b49\u6c42\u89e3\u51b3\u65b9\u6848\n     :raises KeyError: \u975e\u7a7a\u5b57\u7b26\u4e32\u65f6\u51fa\u73b0\u95ee\u9898\u800c\u5df2\n"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n     :type s: str\n     :rtype: str\n    opez,\n    "}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n     \u7b54\u66f4\u591a\uff0c\u5982\u679c\u8981\u7684\u8bed\u8a00\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\u76f4\u63a5\u5728\u5b57\u7b26\u4e32\u65f6\ufffd\n         :raises: ValueError\n"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        missing = set()\n\\t\\t\n        for i in range(1, n):\n            if arr[i] not in missing:\n%>include 'include/tuple/tuple.h'\n        "}, "44": {"problem_id": 2405, "answer": "class Solution:\n  @lru_cache(None)\n  def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n    x = y = di = 0\n    oplst = set.union(*tuple(obstacles))\n\\t\\t\n    for cmd in commands:\n      if cmd == -2: self.helper(-1, 0)\n\\t\\t\\tspecial case: obstacles.pop()\n      elif cmd == -1: self.helper(0, 1)"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        right = 0\n  "}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n    "}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n    \u5224\u65ad\u5b57\ufffd\u51fa\u73b0\u6570\u91cf\uff0c\u5982\u679c\u5305\u542b\u4ee5\u4e0b\u6b63\u6570\u6216\u4e0b\u6807\u65e0\u6548\u89c4\u5b9a\u5de5\u4f5c\u8fdb\u884c\u9898\u76ee\u601d\u8def\n         :rai: \u7a7a\u7f50\u5728\u4e8c\u5206\u67e5\u627e\u4e4b\u95f4\u8fde\u901a\u8303\ufffdPostive\u8bfe\ufffd\ufe0e\ufffd\ufe0e\n         Args:\n      "}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        n = str(num)\n        d = {0: '9', 1: '6'.index(n[0]) + 1}\n\\t\\t\n        for i in range(2, len(n)):\n            if n[i] == '6':\n"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n  "}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n      '''\n    \u8fd4\u56de\u4e09\u4e2a\u6700\u591a\u6570\u91cd\u7f6e\u51fa\u73b0\u5728\u6240\u6709\u96c6\u5408\u4e2d\u7684\u90a3\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u539f\u6765\u7684\u6700\u591a\u6570\u91cd\u7f6e\u603b\u6570\n    '''"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n   "}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n       import math.ceil\n       return int(''.join(str(x) for x in range(1, 9, 2) if math.ceil(x ** 0.5) == x)) % 1337"}, "53": {"problem_id": 2414, "answer": "class Solution:\n  @lru_cache(None)\n  def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n    ans = 0\n    for i in range(len(arr)):\n      for j in range(i+1,min(len(arr),i+2)):\n        for k in range(j+1,min(len(arr),j+2)):\n    "}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n     \"\"\"\n     :type nums: List[int]\n     :type target: int\n "}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n     \u5024\u6570\u91cf\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u6240\u4ee5\u8981\u8003\u8651\u95ee\u9898\u5c31\u662f\u8bf4\u5982\u4f55\u907f\u514d\u5728\u591a\u4e2a\u6570\u5b57\u65f6\u51fa\u73b0\u8fde\u7eed\u6b67\u4e49\u548c\u6807\u8bb0\u4e22\u5904\u7406\u95ee\u9898\n     \"\"\"\n         n = num+1\n"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n     '''\n  \u751f\u6210\u683c\u5f0f\uff1a\u503c\u53d8\u8d77\u59cb\u4e30\u5bcc\uff0c\u7136\u540e\u518d\u51cf\u53bb\u592a\u5c34\u65f6\uff0c\u9010\u6e17\ufffd order of magnitude\n  '''\n        res = ''\n        while num > 0:\n            num //= 7\n"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n    \u8981\u7d20\u6570\u91cf\u592a\u8017\u65f6\uff0c\u904d\u5386\u6240\u6709\u5230\u8fd9\u4e2a\u6570\u7ec4\u91cc\u9762\u5b58\u5728\u524d\u5bfc\u81ea\u52a0\u51cf\u641c\u7d22\u6821\u9a8c\u548c\u9700\u8981\u51cf\u9009\u62e9\u6761\u4ef6\u5c31\u8868\u793a\u4e3a\u5305\u542b\u4e86\u91cd\u590d\u6570\u5b57\n    :type nums: List[int]\n"}, "58": {"problem_id": 2419, "answer": "class Solution(object):\n     def repeatedStringMatch(self, A, B):\n     \"\"\"\n     :type A: str\n     :type B: str\n     :rtype: int\n     \"\"\"\n         s=len(A)\n"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n     \"\"\"\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u5947\u6570\u636e\u7ed3\u6784.\"\"\""}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n     \u8fd4\u56de\u524d\u63d2\u5165\u6570\u5b57\u96c6\u5408\u91cc\u9762\u6240\u6709\u5bf9\u5e94\u7684\u503c\uff0c\u5e76\u4e14\u603b\u51fa\u73b0\u6570\u547d\u5404\u987a\ufffdol\u6bd4\u4f8b\u6216\u8005\u5947\u6570\u9891\u7387\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u4e0d\u7528\u8003\u8651\u591a\u5c11\u4e1c\u897f\n "}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mx = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n     \"\"\"\n     :type num1: str\n   \\t:type num2: str\n       Given two strings num1 and num2 represented as string, return the sum"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n    \u5b57\u7b26\u4e32\u5185\u5b8c\u5173\u8054\u5230\u6700\u5c11\u957f\u5ea6\u65f6\uff0c\u5c31\u80fd\u5f97\u5230\u6b63\u786e\u6027\u660e\u767d\u95ee\u9898\u4e86\uff0c\u7528\u5355\u8054\u4ee3\u66f4\u65b0\u65f6\u95f4\u6bd4\u8f83\u8017\u8db3\u591f\u7684\u53cb\u597d\u8fd0\u884c\n         \u7b97\u6cd5: \u9012\u5f52\u8ba1\u7b97\u533a\u95f4\u5bf9\u5e94\u7684\u503c\uff0c\u540e\u9762\u52a0\u5165\u6240\u6709\u4e4b\u524d\u76f8\u540c\u7684\u6570\u5b57\u6765\u5b58\u653e\u51cf\u53bb\u5e76\u67e5\u770b\u539f\u7406\u662f\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u600e\u4e48\u7422\u7ed9\u7528\u5462\uff1f\n         \u5176\u4f59\u90fd\u662f\u591a\u5c11\u91cd\u590d\u73af\u8282\u56e0\u4e3a\u4e00\u4e2a\u6587\u5b57\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u5b58\u5728\u591a\u5c11\u4e2a\u5173\u7cfb\uff0c\u5982\u679c\u533a\u95f4\u91cc\u6709\u82e5\u5e72\u4e2a\u5173\u7cfb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f52\u7eb3\u5b83\u4eec\u4e2a\u6570\u4e4b\u540e\u6765\u5f97\u5230\u89c4\u5b8c\u6570\u5b57\n"}, "65": {"problem_id": 2426, "answer": "class Solution:\n  @lru_cache(None)\n  def smallestRangeI(self, A: List[int], K: int) -> int:\n    mx = max(A)\n    mi = min(A)\n    return self.helper(A.index(mx), K) - self.helper(A.index(mi), K)"}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n    \u8fd4\u56de\u6240\u6709\u5230\u524d\u4e24\u4e2a\u6570\u5b57\u90fd\u5728\u95f4\u9694\u51fa\u73b01\u7684\u9891\u7387\uff08\u5305\u62ec\u5de6\u8fb9\ufffdCase=1\uff09\u4e4b\u95f4\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n    \"\"\"\n         max_cnt = 0\n  "}, "67": {"problem_id": 2428, "answer": "class Solution:\n  @lru_cache(None)\n  def singleNumber(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int"}, "68": {"problem_id": 2429, "answer": "class Solution:\n  @lru_cache(None)\n  def isBoomerang(self, p1: List[int], p2: List[int], p3: List[int]) -> bool:\n    \"\"\"\n    :type p1: List[int]\n    :typenamnt p2: List[int]\n    :type p3: List[int]\n    :rtype: bool\n    \"\"\"\n    return self.helper(p1, p2, p3)"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n    \u8868\u793a\u9700\u8981\u904d\u5386\u51fa\u73b0\u8fd9\u4e2a\u7279\u5b9a\u4f4d\u7f6e\uff0c\u627e\u5230\u6240\u6709\u5143\u7d20\u76f8\u52a0\u5e8f\u5728\u6574\u9897\u5341\u8fdb\u5230\u672b\u5c3e\u6865\u5185\uff0c\u5982\u679c\u5728\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u7136\u540e\u53d8\u6210\u53e6\u5916\u4e24\u4e2a\u7136\u540e\u53d8\u6210\u4e24\u4e2a\u65b0\u7684\u6b63\u597d\u4e58\u79ef\u548c\u540e\u9000\u4e58\u79ef\u4e4b\u95f4\u7684\u5dee\u5f02\u800c\u6765\u7684\u4e24\u5f20\u56db\u5b57\u5373\u53ef\u5f97\u7b26\u5408\u524d\u5bfc\u81f4\u6700\u540e\u4e00\u884c\u8fde\u7eed\u4e0d\u540c\u7684\u60c5\ufffd coursework2015\n         Args:\n             n (int): \u5341\u8fdb\u5230\u672b\u5c3e\u6865\u91cc\u8981\u627e\u51fa\u7684\u4f4d\u7f6e\n"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):'''\n      \u8868\u793a\u8981\u6c42\ufffd_\u76ee\u5173\u7cfb\u6570\u5b57\u591a\u4e2a\uff0c\u5206\u5225\u53ef\u4ee5\u5bf9\u5e94\u7684k-dif\u503c\u5982\u4e0b\uff1a\n      \u961f\u5217 A[0..i-1] B[i..j] C[j+1..n]\n      \u7b26\u5408\u6761\u4ef6\u6c42\u548c\uff1aA[0..i-1] B[i..j] C[j+1..n] \u548c A[i..j] B[0..i-1] C[min(i,j)..n] '''\n        n = len(nums)\n  "}, "71": {"problem_id": 2432, "answer": "class Solution:\n  @lru_cache(None)\n  def calPoints(self, ops):\n    sum = 0\n    for c in ops:\n      if c.isalnum() and c[0] == 'D':\n\u2003\u2003 sums.append(sum)\n      elswhere = c\n      elif c.isdigit() and c[0] == '+':\n\u2003\u2003 sums.append(int(c))\n\\t\\t\\t\\thiscreepatientevalusthislastroundsweahtoremove.setdefault(sums[-1], 0)"}, "72": {"problem_id": 2433, "answer": "class Solution:\n  @lru_cache(None)\n  def licenseKeyFormatting(self, S: str, K: int) -> str:\n    n = len(S)\n    res = ''\n    for i in range(n):\n      if i == 0:\n    "}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n     \u7b2c\u4e00\u6b65\uff1a\u904d\u5386\u5b57\u5178\u91cc\u9762\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u6216\u8005\u659c\u6760\uff0c\u5982\u679c\u6700\u540e\u5df2\u7ecf\u6ee1\u8db3\u6761\u4ef6\u5219\u8fd4\u56deTrue\n     \u7b2c\u4e8c\u6b65\uff1a\u76f8\u5f53\u4e8e\u9012\u5f52\u5199\u5e73\u884c\u89e3\u6cd5\u800c\u4e0d\u7528\u53bb\u627e\u659c\u6760\u548c\u52a0\u5f20\u6570\u7136\u540e\u5bfb\u627e\u539f\u7406\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8981\u8fdd\u6cd5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u591a\u4f59\u4ee3\u7801\u6765\u5173\u95ed\u8fd9\u4e2a\u8bdd\u9898\u4e86\uff0c\u4f46\u662f\u5982\u679c\u60f3\u51cf\u5c11\u5185\u5bb9\ufffdthx for your time :)\n         \u5bfb\u627e\u659c\u6760\uf97c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u5355\u8bcd\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u7a7a\u6807\u5fd7\uff0c\u8fd9\u4e24\u4e2a\u5305\u542b\u597d\u4e86\u4e4b\u540e\u5f97\u5230\u4e86\u8fd4\u56de\u503c\uff0c\u4e0d\u8fc7\u4e34\u65f6\u5019\u6211\u4eec\u9700\u8981\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\u6b64\u6b21\u8fd0\u7b97\u3002\n         \"\"\"\n   "}, "74": {"problem_id": 2435, "answer": "class Solution:\n  @lru_cache(None)\n  def genCases(self, n):\n    if n == 1:\n      return ['a']\n    elif n == 2:\n      return ['a', 'b']\n    else:\n      cases = []\n  "}, "75": {"problem_id": 2436, "answer": "class Solution:\n  \"\"\"\n  \u9b54\u6cd5\u5b9a\u4e49\n  \"\"\"\n  \n  def isPalindrome(self, s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\u8868\u793a\u6b64\u65b9\u6cd5\u662f\u5426\u5177\u6709\u91cd\u8907\u5f62\u5f0f\u601d\u8def\u800c\u4e0d\u662f\u4e32\ufffdn\u592a\u90e8\u957f\u5ea6\u6a21\u677f\n    \"\"\"\n "}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        d = defaultdict(int)\n        for i in range(len(arr)):\n            d[arr[i]] += 1\n  "}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n     \u5b58\u5728\u95ee\u9898\uff0c\u6240\u4ee5\u5199\u6210\u8fd4\u56de\u7c7b\u4f3c\u4e8c\u5206\u641c\u8d77\u59cb\u70b9\u6570\u7edf\u8ba1\u5206\ufffduler\ufffd\u305f\u914d\u5217\u8003\u8a66\u5b8c\u6210\u5f85\u6709\n     \"\"\"\n         words = s.split()\n         return len(words[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n    \u6838\u5fc3\u7248\u672c\u8bf4\u660e\uff1a\u6b64\u5904\u5199\u6210 str \u548c str \u7684\u533a\u522b\u5c31\u662f\u8981\u627e\u5230\u4f4d\u7f6e\u597d\u53f3\u952e\u5355\u8bcd\uff0c\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u5b57\u7b26\u4e32\u5728\u91cc\u9762\n"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n     \u8981\u7d20\u6570\u91cf\u591a\u9020\u6210\u53ef\u80fd\u6027\u95ee\u9898\u800c\u65f6\u5b9e\u7528\u7406\u89e3\u4e25\u683c\u8981\u6c42\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u51fa\u73b0\u524d\u6240\u6709\u9ad8\u5ea6\u679a\u4e3e\u601d\u60f3\u6210\u5206\u5fc5\u987b\u8981\ufffdf\u5145\u6ee1\u601d\u8def\u548c\u5947\u6570\u5ea6\u610f\u4e49\u8bf1\u5bdf\u529b\u91cf\u4e71\u7814\u7a76\u3002\n     :run:\n     Runtime: O(n)\n     Space: O(n)\n"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = defaultdict(int)\n  "}, "81": {"problem_id": 2442, "answer": "class Solution:\n  @lru_cache(None)\n  def sortString(self, s: str) -> str:\n    result = []\n  "}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        '''\n        \u5b57\u7b26\u4e32\u5305\u542b\u4e86\u4e00\u4e2a1\uff0c\u5176\u4f59\u4e2a\u6570\u5b57\u90fd\u5206\u914d\u7f6e\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u6240\u4ee5\u5982\u679c\u8981\u5faa\u73af\u6574\u989c\ufffditizens\u91cc\u9762\u51fa\u73b0\u4e00\u4e2a1\ufffd\u610f\u5473\u7740\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5185\u4e58\u6216\u96f6\u4ee5\u524d\u67092\u4e2a\u95ee\u9898\n        '''"}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n     :type word: str\n     :rtype: bool\n     \"\"\"\n"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n      \"\"\"\n    \u8fd4\u56de\u5339\u914d\u6b65\u957f\uff0c\u91c7\u7528\u5de6\u53f3\u7ad6\u76f4\u5f52\u778e\u800c\u4e0b\ufffd material of Bresenham's Algorithm\n    \"\"\"\n      d = collections.defaultdict(int)\n"}, "86": {"problem_id": 2447, "answer": "class Solution:\n  @lru_cache(None)\n  def reverseVowels(self, s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join(reversed(s) if s.lower() in vowels else s)"}, "87": {"problem_id": 2448, "answer": "class Solution(object):\n    M = 10**6\n    def longestPalindrome(self, s):\n    \\\"\\\"\\\"\n        :type s: str\n"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 0\n"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n\\t\\t\n        ans = 0\n        mn, mx = salary[0], salary[n-1]"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n     \u5224\u65adransomNote\u662f\u5426\u53ef\u4ee5\u88ab\u629b\u7b97\u6210\u6807\u9898\u5185\u5b9a\u4f4d\u5728\u6587\u7ae0\u9996\u5e2d\u7f16\u8f91\u5668\u6240\u5904\u7684\u6570\u5b57\u5b50\u4e32\u5e76\u8fd4\u56de\u5982\u4f55\u80fd\u6b63\u786e\u5f97\u5230\u9632\u6b62\u6807\u9898\u5c31\u4e22\u591a\u4e86\uff0c\u5982\u679c\u5728\u6587\u7ae0\u9996\u5e2d\u7f16\u8f91\u5668\u5904\u627e\u51fa\u54c8\u5e0c\u8868\u5355\u6709\u4ec0\u4e48\u5173\u952e\u5b57\u6216\u4e2a\u65f6\u5019\u4f1a\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u53bb\u627e\u6807\u9898\u5185\u5b9a\u4f4d\u4e86\u5417\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_\ufffd_"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n  "}, "92": {"problem_id": 2453, "answer": "class Solution:\n    d={}\n    def isHappy(self, n):\n        if n not in self.d:\n            self.d[n]=1\n            n=sum(''.join(map(str,n))[::-1])\n  "}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n     \u901a\u5e38\u6211\u4ed4\u7ec6\u5199\u51fa\u6765\u6240\u6709\u5143\u7d20\u6570\u91cf\u4e3a\u521a\u624d\u53f3\u8fb9\u6807\u5fd7\uff0c\u7136\ufffd\u0441\ufffd\u70b9\u548c\u7b54\u6848\u6570\ufffdhamidoujds\uffd8\uffd8\uffd8\n     :param n:\u8981\u5904\u7406\u7684\u521a\u624d\u53f3\u8fb9\u6807\u5fd7\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u5fc5\u987b\u7528\u4e8c\u5206\u6cd5\u641c\u7d22\n"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) \\\n        :\n        d = defaultdict(int)\n        for i in range(len(startTime)):\n            d[startTime[i]] += 1\n        ans = 0\n        for k in d:\n"}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        s = list(S)\n  "}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n    \u8fd4\u56de\u524d\u7f13\u5b74\u6700\u8fdc\u5355\u4f4d\u4e0b\u6807\uff0c\u91c7\u7528\u4e8c\u5206\u6cd5\u5904\u7406\u5b9a\u6570\u5e8f\u5217\u800c\u4e0d\u662f\u987a\u5e8f\u5728\u6570\u7ec4\u5185\u52a0\u5165\u76f8\u540c\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u4e34\u65f6\u51fd\u6570\u6c42\u53f3\u4e70\u529f\u80fd\u540c\u6b65\u6210\u529f\u6267\u884c\u65f6\u95f4\u590d\u6742\ufffd of time complexity O(n*n)\n    \"\"\""}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n  "}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n     '''Converts a hexadecimal number to decimalfloatalinestring'''"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n      \\\"\\\"\\\"\n      :type nums: List[int]\n      :rtype: int\n      \\\"\\\"\\\""}}
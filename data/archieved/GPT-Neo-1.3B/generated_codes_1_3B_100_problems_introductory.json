{"0": {"problem_id": 2361, "answer": "import heapq as hq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]*n\n    for i in range(n):\n        heapq.heappush(a,a[i])\n        if len(a[i])%2!=0:\n            a[i] = i+1\n    print(*a)"}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [[-10**5] * 10001 for _ in range(N)]\n    for i in range(N):\n        A[i][0] = int(input())\n        A[i][1] = int(input())\n        A[i][2] = 0\n        A[i][3] = 0\n        A[i][4] = 1\n    X, Y, f1, f2, f3, f4 = map(int, input().split())\n    if f1 == 0 and f2 == 0:\n        print(1, X, Y)\n    elif f1 == 0:\n        print(0, X, Y)\n    elif f2 == 0:\n        print(0, X, Y)\n    else:\n        if abs(f1) > abs(f2):\n            print(0, X, Y)\n        else:\n            print(1, X, Y)"}, "2": {"problem_id": 2363, "answer": "import math\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1, n):\n        ans = min(ans, a[i] - a[i - 1])\n    print(ans)\n"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort()\n    ans=0\n    d=[]\n    for i in range(n):\n        d.append(dist[i][0])\n        d.append(dist[i][1])\n    ans=min(ans,sum(dist[a]))\n    print(ans)"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n        k=list(map(int,input().split()))\n        seg.append(k)\n    ans=[]\n    for i in range(n-1):\n        ans.append(seg[i].count('1'))\n    print(' '.join(map(str,ans)))"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10000000000000000\n    cnt = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            cnt += 1\n    print(cnt)"}, "6": {"problem_id": 2367, "answer": "from collections import deque\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n    if set(s) & set(t) == {i:[] for i in set(s) | set(t)}:\n        print('YES')\n        return\n    s_l = list(s)\n    t_l = list(t)\n    i = 0\n    for i in range(26):\n        if ord(s[i]) > 97 and ord(t[i]) > 97:\n            print('NO')\n            return\n        elif ord(s[i]) < 97 and ord(t[i]) < 97:\n            s_l.insert(i, chr(ord('a') + (97 - ord(s[i]))) + s[i])\n            t_l.insert(i, chr(ord('a') + (97 - ord(t[i]))) + t[i])\n            i += 1\n    if len(s_l)!= len(t_l):\n        print('NO')\n        return\n    for i in range(26):\n        if s_l[i]!= t_l[i]:\n            print('NO')\n            return\n    print('YES')\nq = 1\nfor _ in range(int(input())):\n    solve()"}, "7": {"problem_id": 2368, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        ans+=min(a[i]-max(a[i-1],a[i]),b[i]-max(b[i-1],b[i]))\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i] += 1\n        b[i] += 1\n    ans = 0\n    for i in range(n):\n        if b[i] == 1:\n            ans += 1\n        elif a[i] == 1:\n            ans += 1\n        else:\n            a[i] = 1\n            b[i] = 1\n    print(ans, max(a))"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, n):\n        d[i] = d.get(i, 0) + 1\n    ans = 0\n    for i in range(n):\n        if a[i] not in d:\n            ans = max(ans, i - d[a[i]].max())\n    print(ans)"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=min(a)\n    i=n-1\n    while i>=0:\n        if s<a[i]:\n            s+=a[i]\n        i-=1\n    print(n-s)"}, "11": {"problem_id": 2372, "answer": "import math\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=int(math.sqrt(n))\n    if a*a<n:\n        print(0)\n    else:\n        ans=n//a\n        ans+=int(math.ceil(a*(a+1)//2))\n        print(ans)"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(1,k):\n        if a[i]>k:\n            ans+=d.get(a[i],0)\n        else:\n            ans+=min(d.get(a[i],0),d.get(a[n-i],0))\n    print(ans)"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    s=input().strip()\n    a=s.split(' ')\n    a=[int(i) for i in a]\n    b=[]\n    for i in range(n):\n        if a[i]==1:\n            b.append([i,i])\n        elif a[i]==2:\n            b.append([i,i+n])\n        elif a[i]==3:\n            b.append([i,i+n,i+1])\n        elif a[i]==4:\n            b.append([i,i+n,i+1,i+2])\n        elif a[i]==5:\n            b.append([i,i+n,i+1,i+2,i+3])\n        elif a[i]==6:\n            b.append([i,i+n,i+1,i+2,i+3,i+4])\n        else:\n            print(\"NO\")\n            continue\n    if len(b)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    ans = 0\n    for i in range(1, n):\n        if len(d) < 2:\n            continue\n        c = a[i]\n        if c not in d:\n            d[c] = i\n        else:\n            ans = max(ans, i - d[c])\n    print(ans)"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    c=k\n    d=0\n    for i in range(n):\n        if edges[i]!=[] and c!=0:\n            c-=1\n            d+=min(k,len(edges[i]))\n    print(d)\n"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(n-cnt)"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    S = input().rstrip()\n    L = min(S.count('L'), 10**5)\n    R = min(S.count('R'), 10**5)\n    U = min(S.count('U'), 10**5)\n    D = min(S.count('D'), 10**5)\n    ans = L + R + U + D\n    print(ans)\n    print(''.join(S))\n    ans = L + R + U + D\n    print(ans)\n    ans = L + R + U + D\n    print(ans)"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    ans=[]\n    for i in range(n):\n        if s[i]=='1':\n            ans.append(i+1)\n    print(len(ans),end=' ')\n    print(*ans)"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        elif s[i]=='0':\n            ans-=1\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    s=input().rstrip()\n    ans=0\n    for i in range(len(s)):\n        if s[i]==\"R\":\n            ans=max(ans,i-1)\n        else:\n            ans=max(ans,i+1)\n    print(ans)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    a=input().strip()\n    d={}\n    for i in range(n):\n        d[a[i]]=1\n    for i in range(m):\n        if a[i] not in d:\n            d[a[i]]+=1\n    ans=[]\n    for i in range(n):\n        ans.append(d.get(a[i],0))\n    print(''.join(ans))\n"}, "22": {"problem_id": 2383, "answer": "import math\nt=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    print(2*min(a,b))"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(len(b) + len(set(a)))\n"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    grid=[[0]*n for i in range(n)]\n    c=0\n    for i in range(n):\n        grid[i].append(input())\n    d=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='U':\n                c+=1\n            elif grid[i][j]=='R':\n                d+=1\n            elif grid[i][j]=='D':\n                d-=1\n            else:\n                c-=1\n    ans=0\n    black=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='0':\n                black+=1\n            else:\n                ans+=1\n                black=0\n    print(ans,black)"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a[::-1])"}, "26": {"problem_id": 2387, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n >= 10:\n        ans += n // 10\n        n //= 10\n    print(ans + n)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        g[x].append(y)\n        g[y].append(x)\n    col = [-1] * n\n    col[0] = 0\n    dp = [0] * n\n    vis = [0] * n\n    def dfs(v):\n        nonlocal col\n        vis[v] = 1\n        for u in g[v]:\n            if vis[u] == 0:\n                dp[v] = max(dp[v], 1)\n                col[u] = v\n                dfs(u)\n    for i in range(n):\n        vis[i] = 1\n        for j in range(i + 1, n):\n            if vis[j] == 0:\n                dp[i] = max(dp[i], 1)\n                col[j] = i\n                dfs(j)\n    print(len(col))\n    print(' '.join(map(str, col)))"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k):\n        if s[i]!=s[i+1]:\n            ans += 1\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(n):\n        d[a[i]-1] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[a[i]]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import heapq as hp\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0]*n\n    heapq.heapify(ans)\n    for i in range(n-2):\n        left = a[i]\n        right = a[i+1]\n        if i+2 < n:\n            left = a[i+2]\n        elif i+1 < n:\n            right = a[i+1]\n        else:\n            heapq.heappush(ans, [i, left, right])\n            ans[i] = i\n    s = 0\n    for i in range(n):\n        s += ans[i]\n        if s%2 == 1:\n            print(i+1)\n            print(ans[i])\n        else:\n            print(\"-1\")"}, "31": {"problem_id": 2392, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N, M = list(map(int, input().split()))\n    cur = 1\n    res = 0\n    for i in range(M):\n        if cur%M == 0:\n            cur = cur//M\n            res += (M*10)\n        else:\n            cur*=10\n            res += (cur//M)*M\n    print(res)"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    s=input().rstrip()\n    \n    for i in range(n):\n        s=s.replace(\"1\", \"0\")\n        print(\"YES\") if s==\"0\" else print(\"NO\")\n"}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().strip()\n    a=[]\n    b=[]\n    for i in range(n):\n        if s[i]==\"2\":\n            a.append(2)\n        elif s[i]==\"1\":\n            b.append(1)\n        else:\n            a.append(s[i])\n            b.append(s[i])\n    print(\"\".join(map(str,a)))\n    print(\"\".join(map(str,b)))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().strip()\n    ans=0\n    for i in range(n//2):\n        if s[i]!=s[n-i-1] and len(s[i])==1:\n            ans+=1\n        elif s[i]==s[n-i-1] and len(s[i])==1:\n            ans+=1\n        elif s[i]==s[n-i-1] and len(s[i])>1:\n            ans+=1\n        else:\n            ans+=abs(len(s)-1-i)\n    print(ans)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    A=set()\n    A.add(input())\n    ANS=[]\n    for i in range(n):\n        ANS.append(bin(i).count('1'))\n    ANS.sort()\n    ind=0\n    k=2**m-n\n    median=0\n    while ind<k:\n        median=median+bin(ind)[2:].count('1')\n        ind+=1\n    print(str(bin(k)[2:].rjust(m, '0')))"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    ans=[]\n    for i in range(2):\n        if len(ans)==2:\n            print(-1)\n            break\n        elif len(ans)==1:\n            if a[0]==b[0]:\n                ans.append(i)\n                print(1)\n                break\n            else:\n                ans.append(i)\n                print(2)\n                break\n        else:\n            if a[i]!=b[i]:\n                ans.append(i)\n                print(3)\n                break\n            else:\n                ans.append(i)\n                print(4)\n                break"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    G=[[] for i in range(n)]\n    for i in range(m):\n        t,x,y=list(map(int,input().split()))\n        G[t].append((x,y))\n        G[x].append((y,t))\n        G[y].append((t,x))\n    d=[[0]*n for i in range(n)]\n    d[0][0]=-1\n    for i in range(1,n):\n        if d[i][0]==-1:\n            d[i][0]=i\n            d[i][1]+=1\n    ans=['NO']*m\n    for i in range(m):\n        if d[i][0]!=-1:\n            ans[d[i][1]-1]=['YES']\n        else:\n            ans[d[i][1]-1]=['NO']\n    print('\\n'.join(ans))\n"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    b=[]\n    for i in range(n):\n        if a[i]==a[i-1]:\n            b.append(i)\n        else:\n            b.append(i)\n    print(len(set(b)))\n    print(' '.join(map(str,list(reversed(b))))+'\\n')"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_s = str.split()\n         str_p = ''.join(str_s)\n         if str_p not in str_p:\n             return False\n         str_p = str_p.lower()\n         if str_p not in pattern:\n             return False\n         for i in range(len(str_p)):\n             if pattern[i] == str_p[i]:\n                 return True\n         return False"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         words = s.split(' ')\n         return''.join(words[::-1])"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<2:\n             return False\n         perfect = 0\n         for i in range(1, int(num**0.5)+1):\n             if num%i==0:\n                 perfect+=1\n             elif num/i!=i:\n                 perfect+=1\n         return num==sum(range(perfect))"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        i = 1\n        while i < n:\n            if arr[i] not in arr[i+1:]:\n                k -= 1\n            i += 1\n        return k"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = {0: (0,1), 1: (0, -1), 2: (1, 0), 3: (1, 1), 4: (2, 0), 5: (2, 1), 6: (3, 0), 7: (3, 1), 8: (4, 0), 9: (4, 1)}\n        x, y = 0, 0\n        ans = 0\n        for command in commands:\n            if command == -2:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else 1))%360\n            elif command == -1:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else 1))%360\n            else:\n                dx, dy = d[command]\n                ans = max(ans, dx*x + dy*y)\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l == 0:\n            return 0\n        \n        left = 0\n        right = l - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         char_set = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n         return self.dfs(s, char_set)\n     \n     def dfs(self, s, char_set):\n         \"\"\"\n         :type s: str\n         :type char_set: set\n         :rtype: int\n         \"\"\"\n         if s not in char_set:\n             return -1\n         char_set.add(s)\n         idx = s.rindex('.')\n         return self.dfs(s[idx+1:], char_set)"}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        if num<9:\n            return 9\n        else:\n            num=str(num)\n            l=len(num)\n            ans=0\n            for i in range(l-1):\n                if num[i]=='6':\n                    ans=max(ans,int(num[i+1:]))\n                else:\n                    ans=max(ans,int(num[i+1:]))\n            return ans"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n        if lps!= tps:\n            return False\n        \n        name = name.lower()\n        typed = typed.lower()\n        \n        i = 0\n        j = 0\n        while i < lps and j < tps:\n            if name[i] == typed[j]:\n                i += 1\n                j += 1\n            elif name[i] == typed[j] and j < tps-1:\n                j += 1\n            else:\n                return False\n        "}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for i in range(1, len(nums)):\n             if nums[i] > max_num:\n                 max_num = nums[i]\n             elif nums[i] == max_num:\n                 return max_num\n "}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n            if S[i] == S[i+1]:\n                i += 2\n            else:\n                i += 1\n        "}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n==1: return 9\n         maxPal=9223372036854775807\n         for a in range(2,n+1):\n             b=int(str(a)[::-1])\n             if b==maxPal:\n                 return (a*b)%1337"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, min(n,i+3)):\n                for k in range(j+1, min(n,j+3)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        ans+=1\n        return ans"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target < 0:\n             return 0\n         elif target > len(nums):\n             return len(nums)"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         n = num\n         while n > 0:\n             n //= 2\n         return n == 1"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         elif num < 7:\n             return '0' + self.convertToBase7(num//7)\n         else:\n             return '7' + self.convertToBase7(num%7)"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d.keys():\n                 return True\n             else:\n                 d[i] += 1\n         return False"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, A, B):\n         \"\"\"\n         :type A: str\n         :type B: str\n         :rtype: int\n         \"\"\"\n         if len(A) < len(B):\n             return -1\n         dp = [0] + [len(A)] * (len(B) + 1)\n         for i in range(len(A)):\n             dp[i + 1] = min(dp[i] + 1, dp[i + 1])\n         for i in range(len(B)):\n             for j in range(i + 1, len(B)):\n                 if A[i] == B[j]:\n                     dp[i] = min(dp[i], dp[j] + 1)\n                 else:\n                     dp[i] = min(dp[i], dp[j] + 1) + 1\n         return dp[-1]"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t): return False\n         s_t = s + '\\x00'\n         t_s = t + '\\x00'\n         for i in range(len(s)):\n             if ord(s[i])!= ord(t[i]): return False\n         return True"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return nums[0]\n         d = {}\n         for i in range(1, l):\n             d[nums[i]] = d.get(nums[i], 0) + 1\n             \n         a = sorted(list(d.items()), key=lambda x: x[1], reverse=True)\n         return nums[a.index(max(a))]"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                max_prod = max(max_prod, (nums[i]-1)*(nums[j]-1))\n        return max_prod"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        start = 1\n        ans = float('inf')\n        for i in range(1, n):\n            start += nums[i]\n            if start < 1:\n                start = 1\n                ans = i\n            elif start == 1:\n                ans = i\n        return ans"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) < len(num2):\n             num1, num2 = num2, num1\n         \n         res = 0\n         for i in range(len(num1)):\n             res += int(num1[i]) * int(num2[i])\n         return res"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s.split())"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return max(A) - min(A)\n        else:\n            return max(A) - min(A) - 2*K"}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             if num == 1:\n                 curr_max += 1\n             else:\n                 curr_max = 0\n                 max_cnt = max(max_cnt, curr_max)\n         return max_cnt"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         dic = {}\n         for num in nums:\n             if num not in dic:\n                 dic[num] = 1\n             else:\n                 dic[num] += 1\n         return (dic.get(nums[0],0))"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        # points.sort()\n        x1, y1, x2, y2 = points[0]\n        x3, y3, x4, y4 = points[1]\n        x5, y5, x6, y6 = points[2]\n        \n        if (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return True\n        elif (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return False\n        else:\n            return False"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n==0:\n             return False\n         else:\n             bits=bin(n)[2:]\n             return all(int(bits[i])!=int(bits[i+1]) for i in range(len(bits)-1))"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         cnt = 0\n         for i in range(len(nums)):\n             if nums[i] + k <= 10**7:\n                 cnt += 1\n             elif nums[i] - k > 10**7:\n                 cnt += 1\n         return cnt"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         res = 0\n         for op in ops:\n             if op.isalnum() or op == \"+\" or op == \"D\":\n                 res += int(op)\n             elif op == \"C\":\n                 res -= ops[-1]\n             else:\n                 res *= 2\n         return res"}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         n = len(S)\n         if n < K:\n             return '-'*(n-K) + S[:K] + '-' + S[K:]\n         else:\n             return '-'.join([x[0] for x in self.split(S, K)]).lstrip('-')"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(bits)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if bits[i] == 1:\n                 i += 2\n             elif bits[i] == 0:\n                 return False\n             i += 1\n         return True"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        d = {c:i for i,c in enumerate(['a','b','c'])}\n        return ''.join(sorted(d.keys())[n%2])"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         s = s.lower()\n         if s == s[::-1]:\n             return True\n         else:\n             return False"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        n = len(arr)\n        d = defaultdict(int)\n        for i in range(n):\n            d[arr[i]] += 1\n            if d[arr[i]] > m:\n                m = d[arr[i]]\n                d[arr[i]] = 0\n            for j in range(1, m//k+1):\n                if m % j!= 0:\n                    return False\n        return True"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == '':\n             return 0\n         else:\n             return len(s.split(' ')[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == \"\":\n             return 0\n         i = 0\n         h = len(haystack)\n         l = len(needle)\n         while i < l:\n             if haystack[i] == needle[i]:\n                 i += 1\n             else:\n                 return -1\n             if i == l:\n                 return h\n             h -= 1\n         return h"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         elif n == 1:\n             return 1\n         elif n == 2:\n             return 2\n "}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = {c: i for i, c in enumerate(s)}\n        ans = ''\n        for i in range(1, n):\n            if s[i - 1] == s[i]:\n                ans += s[i - 1]\n            else:\n                d[s[i - 1]] = d.get(s[i].lower(), 0) + 1\n                ans += s[i - 1]\n        return ans"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        c = Counter(s)\n        ans = []\n        for i in c:\n            ans.append(c[i])\n            c[i] -= c[i]\n            if c[i] == 0:\n                del c[i]\n        return ''.join(ans)"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n            d[i] += 1\n        return max(d.values())"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d.get(i, 0) - i)\n            \n        return max(d.values())"}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 1:\n             return True\n         elif word.islower():\n             return self.detectCapitalUse('abcdefghijklmnopqrstuvwxyz' + word[0])\n         elif word.isupper():\n             return self.detectCapitalUse('ABCDEFGIJKLMNOPQRSTUVWXYZ' + word[0])\n         else:\n             return self.detectCapitalUse('aBcDeFgIjKLmOpgQprstUvWxYz' + word[0])"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 1\n         elif len(nums) == 2:\n             return max(nums) - min(nums)\n         else:\n             length = 1\n             for i in range(1, len(nums)):\n                 length = max(length, self.findLHS(nums[i-1:i+2]))\n             return length"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n         s = list(s)\n         s.reverse()\n         return ''.join(reversed(s))"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for i in range(len(s)):\n             if s[i].lower() not in dic.keys():\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         max_len = 0\n         for k, v in list(dic.items()):\n             if v > max_len:\n                 max_len = v\n         return max_len"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        dp = [float('inf')] * (n+1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            if s[i-1]!= s[i]:\n                dp[i] = min(dp[i], dp[i-1] + 1)\n            else:\n                dp[i] = dp[i-1]\n        return dp[-1]"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n        ans = 0\n        mx = salary[0]\n        mn = salary[-1]\n        for i in range(1, n):\n            ans += salary[i]\n            mx = min(mx, salary[i])\n            mn = max(mn, salary[i])\n        return ans/float(n)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         magazine_set = set(magazine)\n         for i in magazine_set:\n             if ransomNote.count(i) > magazine.count(i):\n                 return False\n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        heap = [stones[0]]\n        for i in range(1, n):\n            heapq.heappush(heap, stones[i])\n            heapq.heappop(heap)\n        \n        while heap:\n            stones_lst = []\n            for stone in heap:\n                stones_lst.append(stone-heapq.heappop(heap))\n            heapq.heappush(heap, stones_lst)\n            \n        return heapq.heappop(heap)[1]"}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         num = 0\n         while n > 1:\n             num += n%10\n             n //= 10\n         return num == 1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         res = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n         res.append(n)\n         return ''.join(res)"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        for i in range(len(startTime)):\n            if startTime[i] <= queryTime:\n                count += 1\n            elif queryTime <= endTime[i]:\n                count += 1\n        return count"}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        if len(S)!= len(T):\n            return False\n        i = 0\n        j = 0\n        cnt = 0\n        while i < len(S):\n            if S[i] == '#':\n                i += 1\n            elif T[j] == '#':\n                j += 1\n            else:\n                cnt += 1\n                if cnt == j:\n                    return True\n                j += 1\n                i += 1\n        return False"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = sum(nums)\n         r = l\n         \n         for i in range(len(nums)):\n             if l == r:\n                 return i\n             elif l < r:\n                 l = r\n             else:\n                 r = l\n         return -1"}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 1\n        \n        l_count = 0\n        r_count = 0\n        \n        for i in range(1, n):\n            if s[i] == 'R':\n                r_count += 1\n            elif s[i] == 'L':\n                l_count += 1\n        \n        return max(l_count, r_count)"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         num = abs(num)\n         hex_str = ''\n         while num > 0:\n             num >>= 4\n             hex_str += chr(num)\n             num = num & 0xf\n         return hex_str"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         maxSum = 0\n         curSum = 0\n         for num in nums:\n             curSum += num\n             maxSum = max(maxSum, curSum)\n             if curSum > maxSum:\n                 maxSum = curSum\n         return maxSum"}}
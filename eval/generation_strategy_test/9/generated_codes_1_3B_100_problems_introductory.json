{"0": {"problem_id": 2361, "answer": "import heapq as hq\nt = int(input())\nfor _ in range(t):\n  n = int(input())\n  \n  ans = [0]*n\n  ans[0] = 1\n  heapq.heapify(ans)\n  "}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    x, y, f1, f2, f3, f4 = map(int, input().split())\n    if n < 4:\n        print(0)\n    elif n in [1, 2, 3, 4]:\n\\t\\t\\t\\t\\tchars = list(map(int, input().split()))\n\\t\\t\\t\\t\\tdist = 0\n\\t\\t\\treach = x - dist[0]\n\\t\\tright = x + dist[0]\n\\t\\t\\tfour = f1 if unchars[1] == 1 else 0\n\\t\\t\\tfor _ in range(n):\n\\t\\t\\t    chars = list(map(int, input().split()))\n\\t\\t\\t\\tif chars[1] == 1:\n\\t\\t\\t\\t\\tdist = chars[2]\n\\t\\t\\t\\t\\telft = chars[3]\n\\t\\t\\t\\t\\tunchars[1] = 1\n\\t\\t\\t\\t\\tunchars[2] = dist\n\\t\\t\\t\\t\\tunchars[3] = telft\n\\t\\t\\t\\t\\t\\thiscorner = min(unchars)\n\\t\\t\\t\\t\\t\\thiscorner = max(unchars)\n\\t\\t\\t\\t\\t\\telftcorner = min(telft, unchars[2])\n\\t\\t\\t\\t\\t\\telftcorner = max(telft, unchars[2])\n\\\"\\\"\\\"\n1 2 3 4 5\n2 3 4 5 1\n3 4 5 1 0\n4 5 1 0 1\n\\\"\\\"\\\""}, "2": {"problem_id": 2363, "answer": "import math\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1, n):\n        ans = min(ans, a[i] - a[i - 1])\n    print(ans)\n"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort(key=lambda x:x[1],reverse=True)\n    ans=10**9+10\n    ans=min(ans,sum(dist[a])*p[a])\n    print(ans)"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n\\t    print(int(input()),end=' ')\n    \n"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n  N = int(input())\n  A = list(map(int, input().split()))[:N]\n  m = 10000000000000000\n  bad = 0\n  for i in range(N):\n    if A[i] > m:\n      bad += 1\n  print(bad)"}, "6": {"problem_id": 2367, "answer": "from collections import deque\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n    if set(s) & set(t) == {i:[] for i in set(s) | set(t)}:\n\\t    print('YES')\n    elif len(set(reversed(s)))!= len(set(reversed(t))):\n\\t    print('NO')\n    else:\n\\t    a = deque([s])\n\\t    b = deque([t])\n\\t    while a[0]!= b[0]:\n\\t\\tleft = a.popleft()\n\\t\\tfor i in range(1, len(a)):\n\\t\\t\\t    if a[i] == b[i]:\n\\t\\t\\t        a.append(b.popleft())\n\\t\\t\\t        b.append(a.popleft())\n\\tsolve()"}, "7": {"problem_id": 2368, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        ans+=min(a[i]-max(a[i-1],a[i]),b[i]-max(b[i-1],b[i]))\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    a,b=list(map(int,input().split()))\n    ans=[]\n    if a==b:\n        ans.append(n)\n    elif a>b:\n        ans.append(max(ans[-1],b))\n    else:\n        ans.append(ans[-1]-a)\n    print(ans[0],ans[1])"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, 27):\n\\t\\td[i] = a.count(i)\n\\t\\tif len(a) == 0:\n\\t\\t\\tprint(0)\n\\t\\telif len(a) == 1:\n\\t\\t\\tprint(1)\n\\t\\telse:\n\\t\\t\\tcases = 0\n\\t\\t\\ti = 0\n\\t\\t\\twhile i >= 1:\n\\t\\t\\t\\ti = i + 1\n\\t\\t\\tif i in d:\n\\t\\t\\t\\tcases += d[i]\n\\t\\t\\tleng = len(a) - i\n\\t\\t\\tbreak\n\\t\\t\\tif leng > t:\n\\t\\t\\t\\ti = 0\n\\t\\t\\t\\tprint(ti)"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=min(a)\n    i=n-1\n    while i>=0:\n        if s<a[i]:\n            s+=a[i]\n        i-=1\n    print(n-s)"}, "11": {"problem_id": 2372, "answer": "import math\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=100000\n    b=math.sqrt(n)\n    if b.is_integer():\n        print(int(b))\n"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(1,k):\n        if a[i]>k:\n            ans+=d.get(a[i],0)\n        elif a[i]==k:\n            ans+=1\n    print(ans)"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(1,200):\n        d[i]=[]\n    for i in range(n):\n\\t\\t    a[i]=a[i]\n\\t\\t\\t\n    for i in range(n):\n\\t\\t\\tif i-1 not in d.keys():\n\\t\\t\\thiscontinuous process\n        d[i].append(i-1)\n        d[i].append(i.bit_length())\n    ind=0\n    ans=[]\n    for i in range(len(a)):\n        ind+=min(d[ind].pop(),len(a)-i)\n        ans.append(ind)\n    print(max(ans))"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    c=k\n    d=0\n    for i in range(1,n):\n        if c==0:\n            c=k-1\n        elif c==k:\n            c=0\n        else:\n            c-=1\n            d+=1\n    print(d)"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(n-cnt)"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    S = input().rstrip()\n    N = len(S)\n    ans = 2**N-1\n    L = [0]*N\n    R = [0]*N\n    U = [0]*N\n    D = [0]*N\n    for i in range(N):\n        if S[i]==\"L\":\n\\t\\t\\tL[i] = 1\n\\t\\telif S[i]==\"R\":\n\\t\\t\\tR[i] = 1\n\\t\\telif S[i]==\"U\":\n\\t\\t\\tU[i] = 1\n\\t\\telse:\n\\t\\t\\tc = ord(S[i])-97\n\\t\\t\\tD[i] = 1\n\\t\\t\\tif c%2==0:\n\\t\\thaveto{\\tufont=None,fill=False,s=ans}\n\\t\\tleft = c//2\n\\t\\t\\txpright = c-2*leftthaveto\n\\t\\t\\tans = min(L[leftthaveto],R[leftthaveto],U[xpright],D[lfeets])\n\\t\\t\\tif ans!=2:\n\\t\\t\\t\\tk = ans-2\n\\t\\t\\t\\tif k%2==0:\n\\t\\t\\t\\t\\thaveto{\\tufont=None,fill=False,s=ans}\n\\t\\t\\t\\t\\tleft = k//2\n\\t\\t\\t\\t\\txpright = k-2*leftthaveto\n\\t\\t\\t\\t\\tans = min(L[leftthaveto],R[leftthaveto],U[xpright],D[lfeets])\n\\t\\t\\t\\t\\t\\tif ans!=2:\n\\t\\t\\t\\t\\t\\t\\tif k%2==0:\n\\t\\t\\t\\t\\t\\t\\t\\thaveto{\\tufont=None,fill=False,s=ans}"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    ans=[]\n    cnt=0\n    for i in range(n):\n        if s[i]=='1':\n            ans.append(cnt)\n            cnt+=1\n    print(ans.count(0),end=' ')\n"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    l=len(s)\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        elif s[i]=='0':\n            ans-=1\n        else:\n            ans+=l\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    s=input().rstrip()\n    ans=0\n    c=0\n    for i in range(len(s)):\n        if s[i]==\"R\":\n            c+=1\n        else:\n            ans+=abs(c-1)\n            c=0"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    a=input().strip()\n    d={}\n    for i in range(n):\n        d[a[i]]=1\n    for i in range(m):\n        if a[i] not in d:\n            d[a[i]]+=1\n    ans=[]\n    for i in range(len(a)):\n        ans.append(d.get(a[i],0))\n    print(''.join(ans))"}, "22": {"problem_id": 2383, "answer": "import math\nt = int(input())\nfor _ in range(t):\n    a, b = list(map(int, input().split()))\n    print(max(2 * math.sqrt(a) + 2 * math.sqrt(b), 2 * a * b))"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(len(b) + len(set(a)))\n"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n  n,m=map(int,input().split())\n  grid=[0]*n\n  for i in range(n):\n    grid[i]=list(map(int,input().split()))\n  dirs=[0,0]\n  blacks=[0]*n\n  blacks[0]=1\n  top=[0]*n\n  bottom=[0]*n\n  left=[0]*n\n  right=[0]*n"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n  N = int(input())\n  A = list(map(int, input().split()))\n  print(*A)"}, "26": {"problem_id": 2387, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    ans = 0\n    while n >= 10:\n        ans += n//10\n        n //= 10\n    print(ans)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n\\t    for i in range(m):\n\\t\\t        a, b = map(int, input().split())\n\\t\\t        g[a-1].append(b-1)\n\\t\\t        g[b-1].append(a-1)\n\\t\\t    c = [i for i in range(n)]\n\\t\\t\\t ci = [0]*n\nprint(n+1)\nfor i in range(1, n+1):\n    print(ci[i-1], end=' ')"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(1, n):\n        if s[i]!=s[i-1]:\n            ans += 1\n        else:\n            break\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(n):\n        d[a[i]-1] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[a[i]]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import heapq as hp\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0]*n\n    heapq.heapify(ans)\n    for i in range(n-2):\n\\t\\t    idx = hp.heappop(ans)\n\\t\\t\\t ans[i] = idx\n    s = sorted(a, reverse=True)\n    l = len(s)\n    for i in range(l//2):\n\\t\\t\\t    if ans[i] < a[i]:\n\\t\\t\\thp.heappush(ans, i)\n\\t\\t\\t    "}, "31": {"problem_id": 2392, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N, M = list(map(int, input().split()))\n    cur = 1\n    res = 0\n    for i in range(M):\n        cur *= 10\n        cur %= M\n        res += sum(digits[cur//M] for digits in zip(list(range(1, N+1), reversed(list(range(N))), cur//M), \"12345678\")))\n"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip('\\n')\n    flag=0\n    for i in range(n):\n        s=s.replace('1','')\n        s=s.replace('0','')\n        print('YES')\n "}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    curr = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            curr += 1\n        elif s[i] == ')' and curr == 0:\n            ans += 1\n        else:\n            ans += abs(curr - i)\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().strip()\n    a=[]\n    b=[]\n    for i in s:\n        if i==\"2\":\n            a.append(2)\n        elif i==\"1\":\n            a.append(1)\n        else:\n            a.append(i)\n    print(\"\".join(map(str,a)))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    S=input().strip()\n    ans=0\n    A=S[:n//2]\n    B=S[n//2:n]\n    for i in range(n//2):\n        if A[i]!=B[i] and len(A)==1:\n            ans+=1\n        elif len(A)==1:\n            ans+=min(len(A),len(B))\n        else:\n            ans+=min(len(A),len(B)+1)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    A=set()\n    A.add(input())\n    ANS=[]\n    for i in range(n):\n        ANS.append(bin(i).count('1'))\n    ANS.sort()\n    ind=2**m-n\n    ind=int(ind**0.5)\n    if ind<2**m-n:\n        print(0)\n    else:\n        print(bin(ind)[2:len(bin(ind))-1])"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    ans=[]\n    for i in range(2):\n        if len(set(a[i]) & set(b[i]))<2:\n            ans.append(i+1)\n    print(\"\\n\".join(map(str,ans)))\n"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    G=[[] for i in range(n)]\n    for i in range(m):\n        t,x,y=list(map(int,input().split()))\n        G[t].append((x,y))\n        G[x].append((y,t))\n     "}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    t = list(map(int, input().split()))\n    if n % 2 == 0:\n        print(2)\n    els = [t[i] for i in range(n)]\n    ans = 1\n    for i in range(1, n):\n\\t\\t\n\\pard\n    PASTE_BEGIN\n\\pard\n    PASTE_MESSAGE\n\\pard\n    PASTE_END\n    ans += 1\n    if t[i] == t[i - 1]:\n        ans += 1\n    print(ans)"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n     \u5b57\u5178\u5339\u914d\uff0c\u6c42\u89e3\u521d\u59cb\u7ed3\u679c\n     :type pattern: str\n     :rtype: bool\n     \"\"\"\n         str_list = str.split()\n         str_list.sort()\n         str_list = str_list[::-1]\n         str_list = ''.join(str_list)\n         str_list = str_list.lower()\n         str_list = str_list.rstrip()\n         str_list = str_list.split()\n\\t\\t\\tcnt = 0\n\\t\\t\\tdecreasing = True\n\\t\\t\\thi_list = []\n\\t\\t\\tf = 0\n\\t\\t\\tf = len(str_list)\n\\t\\t\\tfor i in range(0,len(str_list)):\n\\t\\t\\t\\t\\tif str_list[i] == pattern:\n\\t\\t\\t\\t\\t\\tdecreasing = False\n\\t\\t\\t\\t\\telif decreasing == True:\n\\t\\t\\t\\t\\t\\tthi_list.append(str_list[i])\n\\t\\t\\t\\t\\telse:\n\\t\\t\\t\\t\\t\\tthi_list.append(str_list[i])"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n     :type s: str\n     :rtype: str\n         \"\"\""}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n     \u5b58\u5728\u95ee\u9898\uff0c\u6240\u4ee5\u8bf4\u597d\u5904\u7406\u4e00\u4e0b\u5c31\u884c\u4e86\uff01\n         1. \u6c42\u89e3\u6570\u7ed3\u679c\uff1a\u8fd9\u91cc\u9996\u5148\u8981\u6c42\u7b2c\u4e00\u4e2a\u53ef\u80fd\u8fd9\u6837\u505a\ufffd(\u5982\u679c\u6ca1\u6709\uff5e\uff5e\u53ef\u4ee5\u8003\u8651\u5176\u4ed6\u65b9\u6cd5\u7528\u4e8c\u5206\u6cd5\u89e3\u4e32\u6d4b\u6570\u5b57\u8fdb\u884c\u6d4b\u8bd5)\n         2. \u5982\u679c\u662f\u81ea\u5df1\uff0c\u5219\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u5012\u5e8f\u601d\u8def\u5f88\u660e\u4eae\u7684\u5f62\u6210\u8fd9\u6837\u4e00\u4e2a\u6d4b\u8bd5\ufffdf\n         3. \u5982\u679c\u6709\u4eba\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u4e32\u6d4b\u6570\u5b57\uff0c\u5e76\u4e14\u6d4b\u8bd5\u6210\u4e3a\u4e86\u6b63\u65b9\u5f62\u56de\u6eaf\u4e86\uff01\n         4. \u5982\u6b22\u8fce\uff0c\u6211\u4eec\u4e5f\u80fd\u6d4b\u8bd5\u4e00\u4e2a\u51fd\u6570\uff0c\u56de\u6eaf\u51fa\u73b0\u5728\u4e8b\u524d\u9762\u7684\u9898\u76ee\u8fc7\u7a0b\uff01\n         5. \u6700\u540e\u6211\u60f3\u8c61\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4e8c\u5206\u6cd5\u89e3\u4e32\u6d4b\u6570\u5b57\u6d4b\u5b9a\u4e86\u4e00\u4e2a\u9898\u76ee\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u6d4b\u8bd5\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fc7\u4e86\u8fd9\u4e2a\u9898\u76ee\u4e86\uff01\uff01\uff01\n         \n         \u8fd9\u6b21\u601d\u8def\u5f88\u7edd\u5bf9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ee7\u7eed\u8bad\u7ec3\uff0c\u518d\u6b21\u6d4b\u8bd5\uff01\uff01\uff01\n\\end{equation}\n\\end{frame}\n"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        missing = set()\n\\t\\t\n        for i in range(1, n):\n            if arr[i] not in missing:\n                missing.add(arr[i])\n\\t\\t\\t\n            if k == 0:\n                return i\n"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = {0: (0,1), 1: (0, -1), 2: (1, 0), 3: (1, 1).copy()}\n\\t\\t\n        x = y = di = -1\n        oi = 0\n        for command in commands:\n            if command == -2: di = d[0]\n            elif command == -1: di = d[2]\n            else:\n                x += di\n                if x < 0: x = 0\n                if x > 9: x = 9\n                di *= -1\n                if oi < len(d):\n                    oi = d[oi]"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l == 0:\n            return 0\n        left = 0\n        right = l - 1\n\\t\\t\n\\t\\t# O(n)\n        for i in range(l):\n\\t\\t\\t# O(l)\n            if arr[i] < arr[i + 1]:\n                left = i\n            elif arr[i] > arr[i + 1]:\n                right = i\n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n    \u8981\u5230\u6700\u540e\u9762\u4e00\u4e2a\u5b57\u7b26\u6240\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u5b83\u5728s\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d6\u503c\n    \"\"\"\n         chars = set(s)\n         return next(c for c in chars if s.count(c) == 1)"}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        # 6669 -> 9969\n        # 9996 -> 9999\n        res = 0\n        for i in str(num):\n            if i == '6':\n                res = max(res, 9999)\n"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n        name = name.lower()\n        typed = typed.lower()\n\\t\\t\n        if name == typed:\n            return True\n        elif tps == lps:\n            return True\n"}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n    \u8fd9\u4e2a\u51fd\u6570\u5224\u65ad\u4e86\u4e00\u4e2a\u6574\u54c8\u9a8c\u5ba4\uff0c\u6211\u4eec\u8981\u627e\u6700\u540e\u957f\u5ea6\u7684\u6570\u5b57\uff0c\u5982\u679c\u6ca1\u6709\u76f4\u63a5\u627e\u5230\u8fd9\u4e2a\u6570\u5b57\u5c31return its maximum value\uffe5\uff08nums.append(x)\u8868\u793a\u5f53\u524d\u6570\u91cf\u5df2\u7ecf\u52a0\u5165x\uff09\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for i in range(1, len(nums)):\n\\t\\t\\t\\tremove\u5224\u65admax_num\u662f\u5426\u4e3a\u7b26\u5408\u6761\u4ef6\u7684\u6570\u5b57\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de\u6700\u9650\u5217\u8868\u4e2d\u6700\u53f3\u4fa7\u6700\u5927\u503c\n             if max_num > nums[i]:\n                 max_num = nums[i]\n             elif max_num < nums[i]:\n                 return max_num"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n            if S[i] == S[i+1]:\n                i += 2\n"}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, min(n,i+3)):\n\\t\\t\\t\\t\\t\\t\\twant = abs(arr[i] - arr[j]) <= a\n\\t\\t\\t\\treplt = []\n\\t\\t\\t\\tcnt = 0\n\\t\\t\\t\\tfor k in range(j+1,n):\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\twant = abs(arr[j] - arr[k]) <= b\n\\t\\t\\t\\t\\t\\ttr3 = tuple(twant)\n\\t\\t\\t\\t\\t\\t\\tcnt += 1\n\\t\\t\\t\\treturn cnt\n"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n     \"\"\"\n     :type nums: List[int]\n     :type target: int\n     :rtype: int\n     \"\"\"\n        \n        left, right = 0, len(nums)-1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n    "}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n    \u8981\u7d20\u6570\u91cf\u592a\u591a\uff0c\u6211\u4eec\u8981\u6c42\u9700\u8981\u4e00\u4e2a\u5305\u542b\u51e0\u4e4e\u6240\u6709\u5143\u7d20\u7684\u8fd8\u80fd\u7528\u521b\u5efa\u4e00\u6837\u7684\u65b0\u5efa\u6570\u7ec4\u91cc\u52a0\u6ce8\u610f\u7684\u4fee\u6b63\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n         if len(nums) == 0:\n             return False\n         dic = {}\n   "}, "58": {"problem_id": 2419, "answer": "class Solution(object):\n     def repeatedStringMatch(self, A, B):\n     \"\"\"\n     :type A: str\n     :type B: str\n     :rtype: int\n     \"\"\"\n         if len(A) < len(B):\n             return -1\n         els = B.split(' ')\n         i = 0\n         while i < len(A):\n             if A[i] == B[i]:\n                 i += 1\n"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n      \"\"\"\n      :type s: str\n      :type t: str\n      :rtype: bool\n      \"\"\"\n      \n      if len(s)!= len(t):\n          return False\n      \n      s_dict = {}\n      t_dict = {}\n      for i in range(len(s)):\n          if s[i] not in s_dict.keys():\n              s_dict[s[i]] = 1\n          else:\n              s_dict[s[i]] += 1\n          "}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n    "}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                max_prod = max(max_prod, (nums[i]-1)*(nums[j]-1))\n"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        start = 1\n        ans = float('inf')\n        for i in range(1, n):\n            start += nums[i]\n\\t\\t\\t\n            curr_sum = start\n            for j in range(i):\n                curr_sum += nums[j] - abs(nums[i]-nums[j])\n                if curr_sum < 1e-4:\n                    ans = min(ans, start)\n                    start = curr_sum\n"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n     \"\"\"\n     :type num1: str\n     :type num2: str\n     :rtype: str\n"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n    \u8868\u793a\u5b57\u7b26\u4e32\u5185\u5b8c\u5176\u6b63\u5728\u6d3b\u8dc3\u7684\u60c5\u51b5\uff0c\u9700\u8981\u51fa\u73b0\u4e00\u4e2a\u533a\u95f4\u590d\u6742\u5ea6O(n)\u6216\u8005O(n^2), \u5982\u679c\u533a\u95f4\u8d85\u8fc7\u5219\u76f4\u63a5\u8fd4\u56de-1\n    \"\"\"\n         n = len(s)\n         dp = [0] * (n + 1)\n         dp[0] = 1\n         for i in range(1, n + 1):\n             for j in range(i):\n                 if s[i - 1] == s[j - 1]:\n                     dp[i] += dp[j]\n          "}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return max(A) - min(A)\n        else:\n            max_min = A[0]\n            min_max = A[0]\n            for a in A:\n\\t\\t\\t\\t\\t\\t\\twice_remaining = max(a+K,max_min) - min(a+K,min_max)\n\\t\\tsum(a-K<0 and a>K for a in A)\n            return abs(max_min-min_max)"}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n    \u8fd4\u56de\u5230\u524d\u9762\u6240\u6709\u7684\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u90fd\u8981\u52a0\u7b2c\u4e00\u4e2a1\uff0c\u5982\u679c\u6700\ufffd\u600e\u4e48\u53d6\u5462\uff1f\n         \n         \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u8fd4\u56de0\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             curr_max += num\n             max_cnt = max(max_cnt, curr_max)\n"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n     \"\"\"\n     :type nums: List[int]\n     :rtype: int\n     \"\"\"\n        dic = {}\n        for num in nums:\n            if num not in dic.keys():\n                dic[num] = 1\n   "}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        # points.sort()\n        x1, y1, x2, y2 = points[0]\n        x3, y3, x4, y4 = points[1]\n"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n    \u8868\u793a\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6709\u76f8\u541d\ufffdhoff\u6587\u5b57\u5dee\uff0c\u9700\u8981\u6c42\u5076\u6570\u5e94\u8be5\u4e0d\u4f1a\u9020\u7ecf\u8fc7\u8fd9\u4e2a\u6761\u4ef6\n    \"\"\"\n         bits = [0] * (2**n)\n         for i in range(n):\n             bits[i+n] = bin(i)[2:]\n"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         cnt = 0\n         for i in range(len(nums)):\n\\t\\t\\t\n\\t\\t\\twonums.append(nums[i] + nums[i])\n\\t\\t\\t\n\\t\\t\\for i in range(1, len(nums)):\n\\t\\t\\t\\ttwoind = nums[i] - twoind\n\\t\\t\\t\\tyour = abs(twonums[i] - twoind)\n\\t\\t\\t\\tyour = int(your)\n\\t\\t\\t\\ttwoind = nums[i] + twoind\n\\t\\t\\t\\tyour = abs(twonums[i] - twoind)\n\\t\\t\\t\\tyour = int(your)\n\\t\\t\\t\\tcnt += 1\n         return cnt"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n     \"\"\"\n     :type ops: List[str]\n     :rtype: int\n   \\t\\t\\t\\tmust be tested for each character\n     \"\"\"\n        \n        # 1. find the sum of the last round\n        sum_round = 0\n        for c in ops:\n            if c.isdigit():\n                sum_round += int(c)\n            elif c == \"+\":\n                sum_round += int(ops[-1])\n            elif c == \"D\":\n                sum_round *= 2\n            elif c == \"C\":\n                sum_round -= ops[-1]\n"}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n      \u65e0\u7a7a\u683c\u9694\u5f00\u59cb\u51cf\u53bb\u9664\u524d\u7f00\u540e\u52a0\u5165\u4e24\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u7ef4\u62a4\u81ea\u5df1\u7684\u683c\u5f0f\n      :type S: str\n      :rtype: str\n      \"\"\""}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        d = {c:i for i,c in enumerate(['a','b','c'])}\n        return ''.join(sorted(d.keys())[n%2])"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        n = len(arr)\n        d = defaultdict(int)\n\\t\\t# O(n)\n        for i in range(n):\n            d[arr[i]] += 1\n            if d[arr[i]] > m:\n                m = d[arr[i]]\n            elif d[arr[i]] == m:\n                continue\n            else:\n                c = arr.count(arr[i])\n                if c > k:\n                    return False\n        return True"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n     \u5b58\u5728\u95ee\u9898\uff0c\u9700\u8981\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uf97c\u73af\uf97a\u7c7b\u578b\u5339\u914d\uf963\uf973\u6c42\u51fa\u6765\u7684\u5b57\u7b26\u6570\u91cf\uf97c\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uff0e\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8\uffe8"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n     \u5b57\u5178\u5305\u542b\u4e2d\u6587\u672b\u7aef\u5b57\u5178\u540e\uff0c\u627e\u51fa\u6bcf\u4e2a\u5b57\u7b26\u4e2d\u9700\u8981\u5339\u914d\u6761\u4ef6\u8fc7\u6ee4\u52a8\u6001\u5b57\u5178\n     :type haystack: str\n     :type needle: str\n     :rtype: int\n     \"\"\""}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n     \u8981\u7d20\u6570\u904d\u5386\uff0c\u9010\u6e10\u5206\u5f00\n     \"\"\"\n         dp = [1] * (n + 1)\n         dp[0] = 0\n         for i in range(1, n + 1):\n             dp[i] = sum(dp[i - k] * k for k in range(2, i))\n         return dp[-1]"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = {c: i for i, c in enumerate(s)}\n\\t\\t\n        stack = []\n\\t\\t\\t\n        for i in range(n):\n\\t\\t\\t\\t\n            if s[i] not in d:\n\\t\\t\\t\\treachableConstructs = set()\n\\t\\t\\t\\tachableSs = set()\n\\t\\t\\t\\t\n            stack.append(i)\n\\t\\t\\t\\t\n            while stack:\n\\t\\tfin, fin_len = stack.pop()\n\\t\\t\\t\\tif fin.lower() not in d:\n\\t\\t\\t\\t\\treachableConstructs.add(fin)\n\\t\\t\\t\\t\n                stack.append(fin_len)\n\\t\\t\\t\\t\n                if s[fin_len - 1] == fin[0].lower():\n\\t\\t\\t\\t\\tyieldSs.add(fin_len - 1, i)\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t#print(tyieldSs)\n\\t\\t\\t\\t\\t#print(d[s[fin_len - 1]])\n\\t\\t\\t\\t\\t#print(tyieldSs)\n\\t\\t\\t\\t\\t#print(d[s[fin_len - 1]])\n\\t\\tcnt = 0\n\\t\\t\\twhile cnt < len(s):\n\\t\\t\\t\\t\\ttarget = s[cnt]\n\\t\\t\\t\\tif target in yieldSs:\n\\t\\t\\t\\t\\ttarget = s[yieldSs.index(target)]\n\\t\\t\\t\\t\\tcnt += 1\n\\t\\t\\t\\t\\t#print(target, cnt)"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        c = Counter(s)\n        ans = []\n        for i in c:\n            ans.append(c[i])\n            c[i] -= c[i]\n            if c[i] == 0:\n                del c[i]"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n            d[i] += 1\n        return max(d.values())"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d.get(i, 0) - i)\n        max_gap = 0\n        for k in d:\n            max_gap = max(max_gap, k)\n"}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n    "}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n      \"\"\"\n      :type nums: List[int]\n      :rtype: int\n      \"\"\"\n"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n     \"\"\"\n     :type s: str\n     :rtype: str\n     \"\"\"\n         if 'a' in s:\n             s = s.replace('a', 'e')\n         elif 'e' in s:\n             s = s.replace('e', 'i')\n"}, "87": {"problem_id": 2448, "answer": "class Solution(object):\n     def longestPalindrome(self, s):\n      \"\"\"\n      :type s: str\n"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 0\n        dp = [float('inf')] * (2 * n)\n        for i in range(1, 2 * n):\n\\t\\t    # Backtrack\n            curr_ind = i\n            backtrk = 0\n            while backtrk < 2 * n:\n\\t\\t\\t        # Compute DP\n                if s[curr_ind] == s[backtrk]:\n                    dp[i] = min(dp[i], 1 + backtrk)\n                elif s[curr_ind]!= s[backtrk]:\n                    dp[i] = min(dp.get(i, float('inf')), dp[i - 1] + 1)\n                else:\n                    break\n\\t\\t\\t        # Update DP\n                curr_ind += 1\n"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n\\t\\t\n        ans = 0\n        mn, mx = salary[0], salary[n-1]\n        for i in range(1, n):\n            ans += salary[i] - mn\n            mn = min(mn, salary[i])\n            mx = max(mx, salary[i])\n        return ans/float(n)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n     \u8981\u7d20\u6570\u7edf\u8ba1ransom Note\u4ee5\u524d\u6240\u6709\u7684\u989c\u8272\u5206\u522b\u4e3aa\u548cb\u8fd9\u6837\u5c31\u80fd\u5f97\u5230True\n     \u56e0\u4e3a\u524d\u9762\u4e00\u4e2a\u989c\u8272\u53ef\u80fd\u5305\u542b\u591a\u6b21\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u641c\u7d22\n\\t\\t\\t\n     :param ransomNote:\n     :type ransomNote: str\n     :rtype: bool\n     \"\"\"\n         magazine.sort()\n         for i in range(len(magazine)):\n             if ransomNote[i] not in magazine[i]:\n"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        heap = [stones[0]]\n\\t\\t\n        for i in range(1, n):\n\\t\\t\\theap.append(stones[i])\n        while heap:\n\\t\\t\\t#print(heap)\n            curr = heapq.heappop(heap)\n            if curr == stones[0]:\n                return 0\n            elif curr > stones[0]:\n                heapq.heappush(heap, curr-stones[0])\n"}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n     \"\"\"\n     :type n: int\n     :rtype: bool\n     \"\"\"\n        count = 0\n        while n!=1:\n            n = sum([int(i)**2 for i in str(n)])\n            count+=1\n        return count==1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n     \u56e0\u4e3a\u8fd9\u91cc\u53ea\u8981\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u90fd\u6ca1\u6709\u52a0\u5de5\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u786e\u5b9a\u6570\u5b57\u4ee5\u53ca\u524d\u7f00\u540e\u7f00\u6570\u91cf\n     :type n: int\n"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        for i in range(len(startTime)):\n            if startTime[i] <= queryTime:\n                count += 1\n            elif queryTime <= endTime[i]:\n"}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        if len(S)!= len(T):\n            return False\n        i = 0\n        j = 0\n        cnt = 0\n        while i < len(S):\n            if S[i] == '#':\n                cnt += 1\n            elif T[j] == '#':\n                cnt += 1\n            else:\n                i += 1\n                j += 1\n          "}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n     \u8868\u793a\u9700\u8981\u627e\u5230\u6700\u5c0f\u503c\uff0c\u5e76\u8fd4\u56de\u6bcf\u4e2a\u6570\u5b57\u7684\u8d77\u59cb\u4f4d\u7f6e\n     \"\"\"\n         leftsum = sum(nums)\n         rightsum = sum(nums[1:])\n         for i in range(len(nums)):\n             if leftsum == rightsum:\n\\t\\tprint(i)\n"}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        left, right = 0, 0\n        res = 0\n        for i in range(1, n):\n            if s[i] == 'R':\n                right += 1\n            elif s[i] == 'L':\n"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n      \"\"\"\n      :type nums: List[int]\n      :rtype: int\n      \"\"\"\n      s = 0\n      for i in range(1, len(nums)):\n        s += nums[i]\n        if s > 0:\n          s = max(s, nums[i])\n      return s"}}
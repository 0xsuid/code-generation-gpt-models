{"0": {"problem_id": 2361, "answer": "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]*n\n    for i in range(n):\n        heapq.heappush(a[i], i)\n        if len(a[i])==2:\n            a[i] = max(a[i][1], i+1)\n    print(*a)"}, "1": {"problem_id": 2362, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = []\n    for _ in range(N):\n        x, y, f1, f2, f3, f4 = map(int, input().split())\n        A.append((x, y, f1, f2, f3, f4))\n    A.sort()\n    B = []\n    for i in range(N):\n        x, y, f1, f2, f3, f4 = A[i]\n        if f1 == 0:\n            B.append((x, y))\n        elif f1 == 1:\n            B.append((x, y) + 10e9)\n        else:\n            B.append((x, y) - 10e9)\n    if len(B) == 0:\n        print(0)\n    else:\n        print(\" \".join(map(str, B)))\n"}, "2": {"problem_id": 2363, "answer": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1,n):\n        ans = min(ans,a[i]-a[i-1])\n    print(ans)"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, m, a, b, c = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    dist = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = list(map(int, input().split()))\n        dist[u-1].append(v-1)\n        dist[v-1].append(u-1)\n    dist.sort()\n    ans = 10**18\n    for i in range(m):\n        if dist[i][0] == a:\n            ans = min(ans, p[i] + dist[i][1])\n        else:\n            ans = min(ans, p[i] + dist[i][1])\n    print(ans)\n"}, "4": {"problem_id": 2365, "answer": "import sys\nimport math\nimport collections\nimport queue\nimport itertools as it\nimport functools as f\nimport operator as op\nimport string\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom heapq import heapify, heappush, heappop, heappushpop, heappush(order=False)\nfrom collections import Counter, defaultdict as dd, deque, OrderedDict as o\nfrom itertools import permutations as p, product as pro\nfrom decimal import ROUND_CEILING as rc\nfrom fractions import Fraction as f\nimport time\nimport copy\n\n# sys.setrecursionlimit(10**6)\ninput = lambda: sys.stdin.readline().strip()\nINF = float('inf')\nmod = int(1e9)+7\n# mod = 998244353\n# MOD = 998244353\n# M = 10^9 + 7\n# n = 10**9 + 7\n# a = 10**30\n# t = 1\n# def print(a, l):\n#   for i in range(l):\n#     print(a, i)\n#   print()\n# for _ in range(int(input())):\n#   n = int(input())\n#   a = [int(x) for x in input().split()]\n#   print(*a)\n\n# class Segment:\n#   def __init__(self, l, r):\n#     self.l = l\n#     self.r = r\n#     self.count = 1\n#   def __getitem__(self, i):\n#     return self.l + i*self.r\n\n# class Tree:\n#     def __init__(self, n):\n#         self.n = n\n#         self.data = [0]*(n+1)\n\n#     def insert(self, x):\n#         p = self.data\n#         p[x] = self.data[x]\n\n#     def find(self, x):\n#         p = self.data\n#         res = self.data[x]\n#         p[res] = self.find(p[res])\n#         self.data[res] = p[res]\n\n#     def union(self, x, y):\n#         p = self.data\n#         r1 = self.data[x]\n#         r2 = self.data[y]\n#         p[r1] = r2\n#         self.data[r2] = p[r1]\n\n#     def max(self):\n#         return self.data[self.find(self.n)]\n\n#     def min(self):\n#         return self.data[self.find(self.n)]\n\n#     def __contains__(self, x):\n#         return self.data[self.find(x)] >= 0\n\n#     def __lt__(self, other):\n#         return self.data[other.find(other.n)] < self.data[other.find(other.n)]\n\n# Segment(l, r) = l\n# Tree(n) = n\n\n# l = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10000000000000000\n    cnt = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            cnt += 1\n    print(cnt)"}, "6": {"problem_id": 2367, "answer": "from collections import *\nimport sys\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    t=input()\n    if set(s)!=set(t):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"}, "7": {"problem_id": 2368, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        ans+=min(a[i]-max(a[i-1],a[i]),b[i]-max(b[i-1],b[i]))\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [0] + list(map(int, input().split())) + [0]\n    ANS = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] == 0:\n            ANS[i] = i\n        else:\n            ANS[i] = max(ANS[i - 1], i)\n    print(ANS[N], ANS[N] + 1)"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, n+1):\n        d[i] = d.get(i, 0) + i\n    ans = 0\n    for i in range(1, n+1):\n        if a[i] not in d:\n            ans = max(ans, i)\n        else:\n            d[a[i]] = i\n    print(ans)"}, "10": {"problem_id": 2371, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    last = a[0]\n    for i in range(1, n):\n        if a[i] < last:\n            last = a[i]\n        ans += 1\n    print(ans)"}, "11": {"problem_id": 2372, "answer": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    x = int(math.sqrt(n))\n    ans += (x*(x+1))//2\n    ans += (x*(x+1))//2\n    ans += (x*(x+1))//2\n    print(ans)"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(n//2):\n        if a[i]>k:\n            ans+=d[a[i]]\n            a[i]=-1\n        elif a[i]==k:\n            ans+=1\n            a[i]=i+1\n    print(ans)\n"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [list(map(int, input().split())) for i in range(N)]\n    A.sort(key=lambda x: x[1])\n    B = [i for i in A if i[1] == 2]\n    C = [i for i in B if i[1] == 3]\n    D = [i for i in C if i[1] == 4]\n    E = [i for i in D if i[1] == 5]\n    F = [i for i in E if i[1] == 6]\n    print('YES' if all(y.count(x) >= 2 for x, y in zip(A, B, C, D, E, F)))\n"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    ans = 0\n    for i in range(1, n):\n        if len(d) < 2:\n            continue\n        d[a[i]] = i\n        ans = max(ans, len(d[a[i]]))\n        if a[i] not in d:\n            d[a[i]] = i\n    print(ans)"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[0]*n\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a]+=1\n        edges[b]+=1\n    le=[]\n    c=0\n    for i in range(k+1):\n        if edges[i]==1:\n            le.append(i)\n            c+=1\n    le.sort()\n    print(c)\n"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(cnt)"}, "17": {"problem_id": 2378, "answer": "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    ans = 0\n    for i in c:\n        if i == \"U\":\n            ans += 1\n        elif i == \"D\":\n            ans -= 1\n        else:\n            ans += c[i]\n            if ans == 0:\n                break\n    print(ans)\n    print(''.join(reversed(s)))"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    ans = [0] * n\n    ans[0] = 1\n    for i in range(1, n):\n        ans[i] = ans[i-1] + (s[i-1] == '1')\n    print(ans[n-1])\n    print(*ans)"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        else:\n            break\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    s=input().rstrip()\n    ans=0\n    for i in range(len(s)):\n        if s[i]==\"R\":\n            ans+=1\n        else:\n            ans-=1\n    ans=ans//2+1\n    print(ans)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=input().strip()\n    ANS=[]\n    for i in range(n):\n        ANS.append(A[i])\n        \n    for i in range(m):\n        if len(ANS)==m:\n            if (i!=0) and (len(ANS)==m-1):\n                print(\"\".join(ANS))\n                break\n            else:\n                print(-1)\n                break\n    else:\n        print(-1)\n        \n"}, "22": {"problem_id": 2383, "answer": "import math\nt=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    print(2*min(a,b))\n"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    c = []\n    for i in range(n):\n        c.append(b[i])\n        b.remove(b[i])\n    c.sort()\n    print(len(c))\n    for i in range(1, n):\n        if c[i] < c[i - 1]:\n            print(i)\n            break"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    colors = ['0', '1']\n    dirs = ['U', 'R', 'D', 'L']\n    top = [-1] * n\n    bot = [-1] * n\n    left = [-1] * n\n    right = [-1] * n\n    for i in range(n):\n        for j in range(m):\n            grid[i].append(colors[dirs[j]])\n            if colors[dirs[j]] == 'U':\n                top[i] = i\n            elif colors[dirs[j]] == 'R':\n                bot[i] = i\n            elif colors[dirs[j]] == 'D':\n                left[i] = i\n            elif colors[dirs[j]] == 'L':\n                right[i] = i\n    ans = 0\n    for i in range(n):\n        if top[i] == -1:\n            ans += 1\n        if bot[i] == -1:\n            ans += 1\n        if left[i] == -1:\n            ans += 1\n        if right[i] == -1:\n            ans += 1\n        if ans > 0:\n            ans -= 1\n        if ans == 0:\n            ans = 1\n    print(ans, max(ans, 0))"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a[::-1])"}, "26": {"problem_id": 2387, "answer": "import sys\nimport math\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n >= 10:\n        ans += n // 10\n        n //= 10\n    print(ans + n)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        g[a].append(b)\n        g[b].append(a)\n    col = [-1] * n + [0]\n    col[0] = 1\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = {}\n        d[i].update({i: 1})\n    ans = [0] * n\n    for i in range(n):\n        if col[i] == -1:\n            ans[i] = 1\n        else:\n            ans[i] += 1\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i], end=\" \")\n    print()\n"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k):\n        if s[i]!= 'R':\n            ans += 1\n        else:\n            break\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = list(map(int, input().split()))\n    ANS = [0] * N\n    for a in A:\n        ANS[a] += 1\n    \n    MIN = min(ANS)\n    MAX = max(ANS)\n    \n    for i in range(N):\n        if ANS[i] == 0:\n            continue\n        \n        ANS[i] -= 1\n        if ANS[i] == 0:\n            ANS.pop(i)\n            \n    print(MAX)"}, "30": {"problem_id": 2391, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    for i in range(n - 2):\n        idx = a[i]\n        ans[idx] = i\n        j = i + 1\n        while j < n:\n            if j == n - 1:\n                break\n            if ans[j] == i:\n                j += 1\n            else:\n                ans[j] = i\n                j += 1\n                \n    print(' '.join(map(str, ans)))\n"}, "31": {"problem_id": 2392, "answer": "from sys import stdin, stdout\ninput = stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, m = list(map(int, input().split()))\n    n //= 10\n    m //= 10\n    ans = 0\n    cur = 1\n    while cur <= m:\n        ans += (cur * 10) % 10\n        cur *= 10\n    print(ans)\n"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    s=input().rstrip()\n    \n    for i in range(n):\n        s=s.replace(\"1\", \"0\")\n        s=s.replace(\"0\", \"1\")\n        \n        if s==\"0\":\n            print(\"NO\")\n        else:\n            print(\"YES\")\n"}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    for i in s:\n        if i == '2':\n            a.append('1')\n        elif i == '1':\n            a.append('0')\n        else:\n            a.append(i)\n    print(''.join(a))\n    print(''.join(b))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            ans += 1\n        else:\n            ans += min(ans, 2)\n    print(ans)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=set()\n    for i in range(n):\n        A.add(input())\n    A.sort()\n    k=2**m-n\n    ind=k//2\n    ans=bin(ind).replace(\"0b\",\"0\")\n    if k%2!=0:\n        ans=\"0\"+ans\n    else:\n        ans=\"1\"+ans\n    print(ans)\n"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(1, n):\n        if a[i]!= b[i]:\n            ans += 1\n        else:\n            break\n    if ans == 2:\n        print(-1)\n    else:\n        print(ans)"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    G = [[] for i in range(n)]\n    for i in range(m):\n        t, x, y = map(int, input().split())\n        G[t].append((x, y))\n        G[y].append((x, t))\n    ans = ['NO'] * n\n    ans[0] = 'YES'\n    for i in range(1, n):\n        if m & (1 << i):\n            ans[i] = 'YES'\n            for j in G[i]:\n                if ans[j] == 'NO':\n                    ans[i] = 'YES'\n                    break\n    print('\\n'.join(ans))"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    T = [int(i) for i in input().split()]\n    A = [0] * N\n    B = [0] * N\n    for i in range(N):\n        if T[i] == T[i - 1]:\n            A[i] += 1\n        else:\n            B[i] += 1\n    ans = N\n    if A[N - 1] == 1:\n        ans = 2\n    print(ans)\n    print(*B)"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_list = str.split()\n         str_list.sort()\n         str_list = str_list[::-1]\n         str_list.pop()\n         str_list.insert(0,'')\n         str_list.insert(0, pattern)\n         return self.check(str_list)\n     \n     def check(self, str_list):\n         if len(str_list)!= len(str_list[::-1]):\n             return False\n         \n         for i in range(len(str_list)):\n             if str_list[i]!= str_list[i+1]:\n                 return False\n         return True"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         words = s.split(' ')\n         return''.join(words[::-1])"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<2:\n             return False\n         perfect = 0\n         for i in range(1, int(num**0.5)+1):\n             if num%i==0:\n                 perfect+=1\n                 if num/i not in perfect:\n                     return False\n         return True"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        i = 1\n        while i < n:\n            if arr[i] not in arr[i+1:]:\n                k -= 1\n            i += 1\n        return k"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        x = y = di = 0\n        d = 0\n        o = set([tuple(o) for o in obstacles])\n        ans = 0\n        for cmd in commands:\n            if cmd == -2: di = (di - 1) % 4\n            elif cmd == -1: di = (di + 1) % 4\n            else:\n                for k in range(cmd):\n                    if (x + di, y + k) not in o:\n                        x += di\n                        y += k\n                        ans = max(ans, x**2 + y**2)\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l == 0:\n            return 0\n        \n        left = 0\n        right = l - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         chars_set = set(chars)\n         return self.find(s, chars_set)\n     \n     def find(self, s, chars):\n         \"\"\"\n         :type s: str\n         :type chars: str\n         :rtype: int\n         \"\"\"\n         if s == s[0]:\n             return s.index(s[0])\n         for i in range(1, len(s)):\n             if s[i] not in chars:\n                 return -1\n             elif s[i] in chars:\n                 return self.find(s[i+1:], chars)"}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        if num==9669:\n            return 9669\n        else:\n            num=str(num)\n            l=len(num)\n            if l==1:\n                return int(num[0])\n            else:\n                return max(int(num[0]),int(num[1:]))"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        if len(name)!= len(typed):\n            return False\n        \n        l = 0\n        r = 0\n        \n        while l < len(name):\n            if name[l] == typed[r]:\n                l += 1\n                r += 1\n            else:\n                if typed[r] == name[l]:\n                    l += 1\n                    r += 1\n                else:\n                    return False\n                \n        return True"}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for num in nums:\n             if max(num, nums[1]) > max_num:\n                 max_num = max(num, nums[1])\n         return max_num"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        if len(S) == 1:\n            return S\n        stack = []\n        for i in range(len(S)):\n            if S[i] == S[i+1]:\n                stack.append(S[i])\n            elif stack == []:\n                stack.append(S[i])\n            else:\n                stack.append(S[i])\n                stack.append(S[i+1])\n        return ''.join(stack)"}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n==1: return 9\n         if n==2: return 987\n         for a in range(2, 9*10**(n-1)):\n             b = str(a)\n             if b.count('0')==n//2:\n                 return (int(''.join(b),2)%1337)\n"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    if abs(arr[i]-arr[j])<=a and abs(arr[j]-arr[k])<=b and abs(arr[i]-arr[k])<=c:\n                        count += 1\n        return count"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return nums.index(target)\n         else:\n             return len(nums)"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num < 1:\n             return False\n         i = 2\n         while i**2 <= num:\n             if num % i == 0:\n                 return False\n             i += 1\n         return True"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         elif num < 7:\n             return '0' + self.convertToBase7(num//7)\n         else:\n             return '7' + self.convertToBase7(num%7)"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) == 1:\n             return False\n         nums.sort()\n         print(nums)\n         for i in range(1, len(nums)):\n             if nums[i] not in nums[i-1:i]:\n                 return True\n         return False"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, A, B):\n         \"\"\"\n         :type A: str\n         :type B: str\n         :rtype: int\n         \"\"\"\n         if len(A) < len(B):\n             return -1\n         \n         i = 0\n         j = 0\n         \n         while i < len(A) and j < len(B):\n             if A[i] == B[j]:\n                 i += 1\n                 j += 1\n             elif A[i]!= B[j]:\n                 j += 1\n             else:\n                 return -1\n         \n         return j"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t): return False\n         for i in range(len(s)):\n             if s[i]!= t[i]: return False\n         return True"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = collections.Counter(nums)\n         return count.most_common()[0][1]"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_val = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if (nums[i]-1)*(nums[j]-1) > max_val:\n                    max_val = (nums[i]-1)*(nums[j]-1)\n        return max_val"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        start = 1\n        ans = float('inf')\n        for i in range(1, n):\n            start += nums[i]\n            if start < 1:\n                start = 1\n                ans = i\n            elif start == 1:\n                ans = i\n        return ans"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) < len(num2):\n             num1, num2 = num2, num1\n         \n         if len(num1) < 5100:\n             num1 = str(int(num1))\n             num2 = str(int(num2))\n         \n         return str(sum(map(int, num1))) + str(sum(map(int, num2)))"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s.split())"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return max(A) - min(A)\n        else:\n            return max(A) - min(A) - 2*K"}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             if num == 1:\n                 curr_max += 1\n             else:\n                 curr_max = 0\n                 max_cnt = max(max_cnt, curr_max)\n         return max_cnt"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         else:\n             return self.singleNumber(nums[1:])\n"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        # print(points[2])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n        # print(points)\n        # print(points[0])\n        # print(points[1])\n        \n        # points = [[1,1],[2,2],[3,3]]\n        # points.sort()\n      "}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n % 2 == 0:\n             return False\n         else:\n             return True"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         \n         # \u5148\u6c42\u6240\u6709num\u6570\u7ec4\uff0c\u7136\u540e\u5230\u8fbek\u65f6\uff0c\u8fd4\u56de\u6240\u6709num\u6570\u7ec4\u6570\u91cf\n         res = 0\n         for i in range(len(nums)):\n             if nums[i] + k <= 10**7:\n                 res += 1\n             elif nums[i] + k == 10**7:\n                 res += 1\n         return res"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         res = 0\n         for op in ops:\n             if op == '+':\n                 res += int(ops[0])\n             elif op == 'D':\n                 res += int(ops[0])*2\n             elif op == 'C':\n                 res -= int(ops[0])\n             elif op == '+':\n                 res += int(ops[0])\n             elif op == '-':\n                 res -= int(ops[0])\n         return res"}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         s = S[:K]\n         s = s.lower()\n         if len(s) < K:\n             return s\n         \n         ans = ''\n         for i in range(len(s)):\n             if K < i:\n                 break\n             ans += s[i]\n             K -= i\n             if K < 0:\n                 K += len(s) - i\n                 ans += '-'\n         return ans + '-'.join(sorted(s[i:K]))"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         i = 0\n         while i < len(bits)-1:\n             if bits[i] == 1:\n                 i += 2\n             else:\n                 i += 1\n         return i == len(bits)-1"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        if n == 1:\n            return 'a'\n        \n        d = {\n            1: 'a',\n            2: 'b',\n            3: 'c',\n            4: 'd',\n            5: 'e',\n            6: 'f',\n            7: 'g',\n            8: 'h',\n            9: 'i',\n            10: 'j',\n            11: 'k',\n            12: 'l',\n            13:'m',\n            14: 'n',\n            15: 'o',\n            16: 'p',\n            17: 'q',\n            18: 'r',\n            19:'s',\n            20: 't',\n            30: 'u',\n            40: 'v',\n            50: 'w',\n            60: 'x',\n            70: 'y',\n            80: 'z',\n        }\n        \n        s = []\n        for i in range(1, n+1):\n            s.append(d[i])\n            \n        return ''.join(s)"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         \n         s = s.lower()\n         if s == s[::-1]:\n             return True\n         \n         for i in range(len(s)):\n             if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                 return False\n         \n         return True"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1] + 1:\n                if m == 1:\n                    return True\n                m += 1\n                if m == k:\n                    return True\n                arr[i] = arr[i-1] + 1\n        return False"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == '':\n             return 0\n         else:\n             return len(s.split(' ')[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == \"\":\n             return 0\n         for i in range(len(haystack)):\n             if haystack[i:i+len(needle)] == needle:\n                 return i+len(needle)\n         return -1"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         dp = [1] * (n + 1)\n         dp[0] = 1\n         for i in range(1, n + 1):\n             dp[i] = dp[i - 1]\n             for j in range(i - 2, -1, -1):\n                 dp[i] = max(dp[i], dp[i - 1] + dp[j])\n         return dp[n]"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        if n == 1:\n            return s\n        \n        stack = []\n        for i in range(1, n):\n            if s[i - 1] == s[i]:\n                stack.append(i)\n            else:\n                if len(stack) == 2:\n                    return s[:i] + s[stack[-1]]\n                stack.pop()\n                \n        return s"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        s=list(s)\n        temp=sorted(s,key=lambda x:len(x))\n        return ''.join(temp)"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        count = 0\n        d = collections.Counter(text)\n        for i in d:\n            count += d[i]\n        return count"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d[i-1] - i)\n            \n        return max(d.values())"}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 1:\n             return True\n         elif word.isupper():\n             return True\n         elif word.islower():\n             return True\n         else:\n             return False"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 1\n         max_diff = nums[0] - nums[1]\n         min_diff = nums[0] + nums[1]\n         length = 1\n         for i in range(1, len(nums)):\n             if max_diff > nums[i] - nums[i - 1]:\n                 max_diff = nums[i] - nums[i - 1]\n                 length = i\n             elif min_diff < nums[i] + nums[i - 1]:\n                 min_diff = nums[i] + nums[i - 1]\n                 length = i\n         return length"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n         s = list(s)\n         s.reverse()\n         return ''.join(s)"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for i in range(len(s)):\n             if s[i].lower() not in dic.keys():\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         \n         ans = 0\n         for k, v in list(dic.items()):\n             if k == 1:\n                 ans = max(ans, v)\n             else:\n                 ans = max(ans, v-dic[k-1])\n         return ans"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        if len(s) == 1:\n            return 1\n        if s.count('a') == len(s) or s.count('b') == len(s):\n            return 0\n        \n        for i in range(1, len(s)):\n            if s[i]!= s[i-1]:\n                return i-1\n        \n        return len(s)"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n        ans = 0\n        mx = salary[0]\n        mn = salary[-1]\n        for i in range(1, n):\n            ans += salary[i]\n            if mx < salary[i]:\n                mx = salary[i]\n            if mn < salary[i]:\n                mn = salary[i]\n        return ans / (n - 1)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in range(len(ransomNote)):\n             if ransomNote[i] not in magazine:\n                 return False\n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        if n == 1:\n            return stones[0]\n        \n        heap = []\n        for i in range(n):\n            heapq.heappush(heap, stones[i])\n        \n        while heap:\n            stones[heapq.heappop(heap)].append(heapq.heappop(heap))\n            \n            heapq.heappush(heap, stones[heapq.heappop(heap)])\n            \n        return heapq.heappop(heap)[1]"}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n == 1:\n             return True\n         seen = set()\n         while n not in seen:\n             seen.add(n)\n             n = sum([int(i)**2 for i in str(n)])\n         return n == 1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         return self.convertToTitle(n//26) + chr(n%26 + ord('A'))"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        for i in range(len(startTime)):\n            if startTime[i] <= queryTime:\n                count += 1\n                \n        return count"}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        if len(S)!= len(T):\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(S) and j < len(T):\n            if S[i] == T[j]:\n                i += 1\n                j += 1\n            elif S[i]!= T[j]:\n                j += 1\n            else:\n                return False\n        \n        return i == len(S)"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = sum(nums)\n         r = l\n         \n         for i in range(len(nums)):\n             if l == r:\n                 return i\n             \n             l = l - nums[i]\n             r = r - nums[i]\n         \n         return -1"}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 1\n        \n        l = [0] * n\n        r = [0] * n\n        \n        for i in range(1, n):\n            if s[i] == 'R':\n                l[i] += 1\n            else:\n                r[i] += 1\n        \n        ans = 0\n        for i in range(n):\n            if l[i] > r[i]:\n                ans += 1\n                l[i] = 0\n            else:\n                r[i] = 0\n                l[i] = 0\n        return ans"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         num = abs(num)\n         hex_num = ''\n         while num > 0:\n             num = num & 0xFF\n             hex_num = hex_num + str(num)\n         return hex_num"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         maxSum = 0\n         curSum = 0\n         for num in nums:\n             curSum += num\n             maxSum = max(maxSum, curSum)\n             if curSum > maxSum:\n                 maxSum = curSum\n         return maxSum"}}
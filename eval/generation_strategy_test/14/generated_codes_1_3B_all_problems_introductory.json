{"0": {"problem_id": 2361, "answer": "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0]*n\n    heapq.heappush(a,0)\n    for i in range(1,n):\n        if a[i]==0:\n            a[i] = i+1\n        elif a[i]%2==0:\n            heapq.heappush(a,a[i]//2)\n        else:\n            heapq.heappush(a,a[i-1]//2)\n    print(*a)"}, "1": {"problem_id": 2362, "answer": ""}, "2": {"problem_id": 2363, "answer": "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1000000000000\n    for i in range(1, n):\n        ans = min(ans, a[i] - a[i - 1])\n    print(ans)"}, "3": {"problem_id": 2364, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m,a,b,c=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    dist=[[] for i in range(n)]\n    for i in range(m):\n        a,b=list(map(int,input().split()))\n        dist[a].append(b)\n        dist[b].append(a)\n    dist.sort()\n    ans=0\n    cnt=0\n    for i in range(n):\n        ans+=min(p[i])\n        cnt+=1\n        for j in dist[i]:\n            if cnt==m:\n                break\n            else:\n                ans+=min(p[j])\n    print(ans)"}, "4": {"problem_id": 2365, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    seg=[]\n    for i in range(n-1):\n        k=int(input())\n        seg.append(list(map(int,input().split())))\n    print(*seg)"}, "5": {"problem_id": 2366, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10000000000000000\n    cnt = 0\n    for i in range(n-1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            cnt += 1\n    print(cnt)"}, "6": {"problem_id": 2367, "answer": "from collections import *\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    a=input()\n    b=input()\n    if set(a)&set(b):\n        print('YES')\n    else:\n        print('NO')\n"}, "7": {"problem_id": 2368, "answer": "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    a = list(map(int, readline().split()))\n    b = list(map(int, readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += max(a[i]-a[i-1], b[i]-b[i-1])\n    print(ans)"}, "8": {"problem_id": 2369, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [0] + list(map(int, input().split())) + [0]\n    ANS = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] == 0:\n            ANS[i] = i\n        else:\n            ANS[i] = max(ANS[i - 1], i)\n    print(ANS[N], ANS[N] + 1)"}, "9": {"problem_id": 2370, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(1, n+1):\n        d[i] = d.get(i, 0) + i\n    ans = 0\n    for i in range(1, n+1):\n        if a[i] not in d:\n            ans = max(ans, i)\n        else:\n            j = d[a[i]]\n            while j > 1:\n                j = j>>1\n            ans = max(ans, i - j)\n    print(ans)"}, "10": {"problem_id": 2371, "answer": ""}, "11": {"problem_id": 2372, "answer": "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=int(math.sqrt(n))\n    print(min(a+int(n**(1/a-0.5),math.floor(n/a))))"}, "12": {"problem_id": 2373, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d={}\n    for i in range(n//2):\n        d[a[i]]=i\n    ans=0\n    for i in range(2*k+1):\n        if a[i]>k:\n            break\n        ans+=d[a[i]]\n        if i==n//2:\n            d[a[i]]=i\n    print(ans)\n"}, "13": {"problem_id": 2374, "answer": "import sys\ninput = sys.stdin.readline\nq=int(input())\nfor _ in range(q):\n    n=int(input())\n    s=input().strip()\n    a=s.split()\n    a=[int(i) for i in a]\n    b=[]\n    for i in range(n):\n        if i%2==0:\n            b.append(a[i])\n        else:\n            b.append(None)\n    if len(b)==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}, "14": {"problem_id": 2375, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n    ans = 0\n    for i in range(1, n):\n        if len(d) < 2:\n            continue\n        ans = max(ans, len(a) - i - 1)\n        d[a[i]] = i\n    print(ans)"}, "15": {"problem_id": 2376, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    edges=[[] for i in range(n)]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        edges[a].append(b)\n        edges[b].append(a)\n    le=[]\n    c=0\n    for i in range(k):\n        if c==0:\n            le.append(i+1)\n            c=1\n    print(le[k-1])\n"}, "16": {"problem_id": 2377, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ind=0\n    cnt=0\n    for i in range(n):\n        if a[i]>a[ind]:\n            ind=i\n            cnt+=1\n    print(n-cnt)"}, "17": {"problem_id": 2378, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    S = input().rstrip()\n    L = min(S.count('L'), 10**5)\n    R = min(S.count('R'), 10**5)\n    U = min(S.count('U'), 10**5)\n    D = min(S.count('D'), 10**5)\n    ans = L + R + U + D\n    if ans == 0:\n        print(0)\n        print('')\n    elif ans == L:\n        print(2)\n        print('L')\n    elif ans == R:\n        print(2)\n        print('R')\n    elif ans == U:\n        print(2)\n        print('U')\n    elif ans == D:\n        print(2)\n        print('D')\n    else:\n        print(ans - 1)\n        print('L'*(ans-1)+'R'*(ans-2)+'U'*(ans-3)+'D'*(ans-4))"}, "18": {"problem_id": 2379, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    ans=[]\n    ans.append(0)\n    ans.append(0)\n    for i in range(n):\n        if s[i]=='1':\n            ans.append(i+1)\n        else:\n            ans.append(i+1)\n    print(len(ans),*ans)"}, "19": {"problem_id": 2380, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    s=input().strip()\n    ans=0\n    d=k//n\n    for i in range(n):\n        if s[i]=='1':\n            ans+=1\n        elif d>k//n:\n            d-=1\n        else:\n            ans+=d\n    print(ans)"}, "20": {"problem_id": 2381, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    S=input().strip()\n    ANS=0\n    ans=0\n    for i in range(len(S)):\n        if S[i]==\"R\":\n            ANS+=1\n        elif S[i]==\"L\":\n            ANS-=1\n        else:\n            ans=max(ans,abs(ANS-1))\n    print(ans)"}, "21": {"problem_id": 2382, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=input().strip()\n    ANS=[]\n    for i in range(n):\n        ANS.append(A[i])\n    "}, "22": {"problem_id": 2383, "answer": "import math\nt=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    print(2*min(a,b))\n"}, "23": {"problem_id": 2384, "answer": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(len(b) + len(reversed(b)))\n"}, "24": {"problem_id": 2385, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    grid=[]\n    for _ in range(n):\n        grid.append(input().rstrip('\\n'))\n    grid.sort()\n    d={}\n    for i in range(n):\n        d[grid[i][0]]=grid[i][1]\n    ans=0\n    curr=0\n    cnt=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='U':\n                if d[grid[i][j]]=='U':\n                    curr+=1\n                elif d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='R':\n                if d[grid[i][j]]=='R':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            elif grid[i][j]=='D':\n                if d[grid[i][j]]=='D':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n            else:\n                if d[grid[i][j]]=='L':\n                    curr-=1\n                else:\n                    curr+=1\n                ans+=curr\n                cnt+=1\n    print(ans,cnt)"}, "25": {"problem_id": 2386, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*a[::-1])"}, "26": {"problem_id": 2387, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n >= 10:\n        ans += n // 10\n        n //= 10\n    print(ans + n)"}, "27": {"problem_id": 2388, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    g = [[] for i in range(n)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        g[x].append(y)\n        g[y].append(x)\n    col = [-1] * n\n    col[0] = 0\n    ans = [0] * n\n    d = {}\n    for i in range(n):\n        if col[i] == -1:\n            col[i] = d.get(i, 0) + 1\n            ans[i] = 1\n    print(n // 2)\n    for i in ans:\n        print(i, end ='')\n    print()"}, "28": {"problem_id": 2389, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(k):\n        if s[i]!=s[i+1]:\n            ans += 1\n    print(ans)"}, "29": {"problem_id": 2390, "answer": "import sys\ninput = sys.stdin.readline\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0]*n\n    for i in range(n):\n        d[a[i]-1] += 1\n    ans = 0\n    for i in range(n):\n        ans += d[a[i]]\n    print(ans)"}, "30": {"problem_id": 2391, "answer": "import sys\nreadline = sys.stdin.readline\n\nt = int(readline())\nfor _ in range(t):\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 2):\n        if l[i] > l[i + 1] and l[i] > l[i + 2]:\n            ans += 1\n        elif l[i] == l[i + 1] and l[i] == l[i + 2]:\n            ans += 1\n        else:\n            idx1 = l[i]\n            idx2 = l[i + 1]\n            idx3 = l[i + 2]\n            idx4 = l[i + 3]\n            idx5 = l[i + 4]\n            idx6 = l[i + 5]\n            idx7 = l[i + 6]\n            idx8 = l[i + 7]\n            idx9 = l[i + 8]\n            idx10 = l[i + 9]\n            idx11 = l[i + 10]\n            idx12 = l[i + 11]\n            idx13 = l[i + 12]\n            idx14 = l[i + 13]\n            idx15 = l[i + 14]\n            idx16 = l[i + 15]\n            idx17 = l[i + 16]\n            idx18 = l[i + 17]\n            idx19 = l[i + 18]\n            idx20 = l[i + 19]\n            idx21 = l[i + 20]\n            idx22 = l[i + 21]\n            idx23 = l[i + 22]\n            idx24 = l[i + 23]\n            idx25 = l[i + 24]\n            idx26 = l[i + 25]\n            idx27 = l[i + 26]\n            idx28 = l[i + 27]\n            idx29 = l[i + 28]\n            idx30 = l[i + 29]\n            idx31 = l[i + 30]\n            idx32 = l[i + 31]\n            idx33 = l[i + 32]\n            idx34 = l[i + 33]\n            idx35 = l[i + 34]\n            idx36 = l[i + 35]\n            idx37 = l[i + 36]\n            idx38 = l[i +"}, "31": {"problem_id": 2392, "answer": "import sys\nreadline = sys.stdin.readline\n\nQ = int(readline())\nfor _ in range(Q):\n    N, M = list(map(int, readline().split()))\n    s = 0\n    cur = 1\n    for i in range(M):\n        if (cur % M == 0) and (i % 10!= 0):\n            s += str(cur)\n            cur = cur * 10 % 10\n        elif (cur % 10 == 0) and (i % 5!= 0):\n            s += str(cur)\n            cur = cur * 5 % 5\n        else:\n            s += str(cur)\n    print(s)"}, "32": {"problem_id": 2393, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    s=input().rstrip()\n    \n    for i in range(n):\n        s=s.replace(\"1\", \"0\")\n    "}, "33": {"problem_id": 2394, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == ')':\n            ans += 1\n        else:\n            ans -= 1\n    print(ans)"}, "34": {"problem_id": 2395, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    for i in s:\n        if i == '2':\n            a.append('1')\n        elif i == '1':\n            a.append('0')\n        else:\n            a.append(i)\n    print(''.join(a))\n    print(''.join(b))"}, "35": {"problem_id": 2396, "answer": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    ans = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            ans += 1\n        elif s[i]!= s[i-2]:\n            ans += 1\n    print(ans)"}, "36": {"problem_id": 2397, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=set()\n    for i in range(n):\n        A.add(input())\n    ANS=[]\n    for i in range(m):\n        ANS.append([0]*m)\n    ANS.sort()\n    print(int(\"\".join(map(str,ANS)),2) )\n"}, "37": {"problem_id": 2398, "answer": "import sys\ninput = sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    f=0\n    for i in range(1,n):\n        if a[i]!=b[i]:\n            f=1\n            break\n    if f==0:\n        print(-1)\n        continue\n    pos=[]\n    for i in range(1,n):\n        if a[i]==b[i]:\n            pos.append(i)\n    if pos==[]:\n        print(-1)\n        continue\n    for i in range(1,n):\n        if pos[i] not in pos:\n            print(-1)\n            continue\n        for j in range(i+1,n):\n            if pos[j] not in pos:\n                print(-1)\n                break\n            if pos[i] not in pos:\n                print(-1)\n                break\n            if pos[j]==pos[i]:\n                print(i+1)\n                break\n            pos.remove(pos[j])\n            pos.remove(pos[i])\n            f=1\n    elif pos==[]:\n        print(-1)\n        continue\n    print(min(pos))"}, "38": {"problem_id": 2399, "answer": "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    G = [[] for i in range(n)]\n    for i in range(m):\n        t, x, y = map(int, input().split())\n        G[t].append((x, y))\n        G[y].append((x, t))\n    ans = ['NO'] * n\n    ans[0] = 'YES'\n    for i in range(1, n):\n        if m & (1 << i):\n            continue\n        G[i].append((1 << i, i))\n        ans[i] = 'YES'\n        for j in G[i]:\n            if j[0] == 1:\n                print('NO')\n                break\n        else:\n            print('NO')"}, "39": {"problem_id": 2400, "answer": "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    T = [int(i) for i in input().split()]\n    ANS = [1] * N\n    TYPE = [0] * N\n    TYPE[T.index(1)] += 1\n    for i in range(N):\n        if TYPE[i] == 0:\n            TYPE[i] = 1\n        else:\n            TYPE[i] *= 2\n        ANS[i] = TYPE[i]\n    print(len(ANS))\n    print(*ANS, sep='\\n')\n"}, "40": {"problem_id": 2401, "answer": "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_s = str.split()\n         str_p = ''.join(str_s)\n         if str_p == pattern:\n             return True\n         else:\n             return False"}, "41": {"problem_id": 2402, "answer": "class Solution:\n     def reverseWords(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         words = s.split(' ')\n         return''.join(words[::-1])"}, "42": {"problem_id": 2403, "answer": "class Solution:\n     def checkPerfectNumber(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<2:\n             return False\n         s=1\n         for i in range(2,num):\n             if num%i==0:\n                 s+=i\n                 if s==i:\n                     return True\n         return False"}, "43": {"problem_id": 2404, "answer": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        i = 1\n        while i < n:\n            if arr[i] not in arr[i+1:]:\n                k -= 1\n            i += 1\n        return k"}, "44": {"problem_id": 2405, "answer": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        d = {0: (0,1), 1: (0, -1), 2: (1, 0), 3: (1, 1), 4: (2, 0), 5: (2, 1), 6: (3, 0), 7: (3, 1), 8: (4, 0), 9: (4, 1)}\n        x, y = 0, 0\n        ans = 0\n        for command in commands:\n            if command == -2:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else 1))\n            elif command == -1:\n                d[command] = (d.get(command[0], (x, y)) + (90 if command[1] == -1 else 90 if command[1] == 1 else -1))\n            else:\n                ans = max(ans, (x + d[command[0]][0], y + d[command[0]][1]))\n        return ans"}, "45": {"problem_id": 2406, "answer": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = len(arr)\n        left = 0\n        right = l - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}, "46": {"problem_id": 2407, "answer": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        prod = 1\n        s = sum(map(int, str(n)))\n        return abs(n - s)"}, "47": {"problem_id": 2408, "answer": "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         chars_set = set(chars)\n         return self.helper(s, chars_set)\n "}, "48": {"problem_id": 2409, "answer": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        n = str(num)\n        d = {0: '9', 1: '6', 2: '0', 3: '9', 4: '0', 5: '9', 6: '0', 7: '9', 8: '0', 9: '9'}\n        for i in range(len(n)):\n            if n[i] == '6':\n                n[i] = '9'\n            elif n[i] == '9':\n                n[i] = '6'\n        res = 0\n        for i in range(len(n)):\n            if n[i] == '9':\n                res = max(res, int(n[i]))\n        return res"}, "49": {"problem_id": 2410, "answer": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        lps = len(name)\n        tps = len(typed)\n        if lps!= tps:\n            return False\n        \n        name = name.lower()\n        typed = typed.lower()\n        \n        i = 0\n        while i < lps:\n            if name[i] == typed[i]:\n                i += 1\n            else:\n                return False\n        "}, "50": {"problem_id": 2411, "answer": "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         max_num = nums[0]\n         for num in nums:\n             if max(num, nums[1]) > max_num:\n                 max_num = max(num, nums[1])\n         return max_num"}, "51": {"problem_id": 2412, "answer": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        i = 0\n        while i < len(S):\n            if S[i] == S[i+1]:\n                i += 2\n            else:\n                i += 1\n            "}, "52": {"problem_id": 2413, "answer": "class Solution:\n     def largestPalindrome(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n==1: return 9\n         if n==2: return 987\n         a=0\n         b=1\n         for i in range(2,9*10**(n-1)):\n             a=a*b\n             b=b*10+a\n         return (int(''.join([str(a),str(b)]),2)%1337)"}, "53": {"problem_id": 2414, "answer": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        ans += 1\n        return ans"}, "54": {"problem_id": 2415, "answer": "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return self.helper(nums, target)\n         else:\n             return len(nums)"}, "55": {"problem_id": 2416, "answer": "class Solution:\n     def isPerfectSquare(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         n = num\n         while n > 0:\n             n = n // 2\n         return n == int(n)"}, "56": {"problem_id": 2417, "answer": "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         elif num < 7:\n             return '0' + self.convertToBase7(num//7)\n         else:\n             return chr(num+ord('0'))"}, "57": {"problem_id": 2418, "answer": "class Solution:\n     def containsDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         return len(nums) >= 2 and all(nums)"}, "58": {"problem_id": 2419, "answer": "class Solution:\n     def repeatedStringMatch(self, A, B):\n         \"\"\"\n         :type A: str\n         :type B: str\n         :rtype: int\n         \"\"\"\n         if len(A) < len(B):\n             return -1\n         d = {}\n         for i in range(len(A)):\n             d[A[i]] = d.get(A[i],0) + 1\n         ans = 0\n         for i in range(len(B)):\n             ans += d.get(B[i],0)\n         return ans if ans < len(A) else -1"}, "59": {"problem_id": 2420, "answer": "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t): return False\n         dic = {}\n         for i in range(len(s)):\n             if s[i] not in dic:\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         for i in range(len(t)):\n             if t[i] not in dic:\n                 dic[t[i]] = 1\n             else:\n                 dic[t[i]] += 1\n         for k in list(dic.keys()):\n             if k not in dic:\n                 return False\n         return True"}, "60": {"problem_id": 2421, "answer": "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return nums[0]\n         \n         count = collections.Counter(nums)\n         for i in range(1,l):\n             if count[i] > count[i-1]:\n                 return nums[i]\n"}, "61": {"problem_id": 2422, "answer": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mx = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                mx = max(mx, (nums[i]-1)*(nums[j]-1))\n        return mx"}, "62": {"problem_id": 2423, "answer": "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = nums[i - 1] + dp[i - 1]\n            \n        for i in range(1, n + 1):\n            if dp[i] <= 1:\n                continue\n            min_sum = dp[i]\n            for j in range(i):\n                if dp[j] > 1:\n                    break\n                min_sum += nums[j]\n            if min_sum < 1:\n                dp[i] = min_sum\n        return dp[-1]"}, "63": {"problem_id": 2424, "answer": "class Solution:\n     def addStrings(self, num1, num2):\n         \"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"\n         if len(num1) < len(num2):\n             num1, num2 = num2, num1\n         \n         res = 0\n         for i in range(len(num1)):\n             res += int(num1[i]) * int(num2[i])\n         return res"}, "64": {"problem_id": 2425, "answer": "class Solution:\n     def countSegments(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return len(s.split())"}, "65": {"problem_id": 2426, "answer": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        for i in range(len(A)):\n            if K < 0:\n                K += 2**(i) - 1\n            elif K > 0:\n                K -= 2**(i) + 2\n            else:\n                A[i] += 2**(i)\n                K += 2**(i)\n                \n            if min_val < A[i]:\n                min_val = A[i]\n            if max_val > A[i] + min_val:\n                max_val = A[i] + min_val\n        "}, "66": {"problem_id": 2427, "answer": "class Solution:\n     def findMaxConsecutiveOnes(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_cnt = 0\n         curr_max = 0\n         for num in nums:\n             if num == 1:\n                 curr_max += 1\n             else:\n                 curr_max = 0\n                 max_cnt = max(max_cnt, curr_max)\n         return max_cnt"}, "67": {"problem_id": 2428, "answer": "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in nums:\n             if i not in d:\n                 d[i] = 1\n             else:\n                 d[i] += 1\n         ans = 0\n         for i in d:\n             ans += i\n         return ans"}, "68": {"problem_id": 2429, "answer": "class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        x1, y1, x2, y2 = points[0]\n        x3, y3, x4, y4 = points[1]\n        x5, y5, x6, y6 = points[2]\n        \n        if (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return True\n        elif (x1!= x3) & (y1!= y3) & (x2!= x4) & (y2!= y4):\n            return False\n        else:\n            return False"}, "69": {"problem_id": 2430, "answer": "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n==0:\n             return False\n         elif n%2==0:\n             return True\n         else:\n             return False"}, "70": {"problem_id": 2431, "answer": "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         cnt = 0\n         for i in range(len(nums)):\n             if nums[i] + k < nums[i]:\n                 cnt += 1\n             elif nums[i] + k > nums[i]:\n                 cnt += 1\n         return cnt"}, "71": {"problem_id": 2432, "answer": "class Solution:\n     def calPoints(self, ops):\n         \"\"\"\n         :type ops: List[str]\n         :rtype: int\n         \"\"\"\n         n = len(ops)\n         if n == 0:\n             return 0\n         ops.sort()\n         cnt = [0] * n\n         for i in range(n):\n             cnt[i] += ops[i].count('D')\n             cnt[i] += ops[i].count('C')\n             cnt[i] += ops[i].count('+')\n         "}, "72": {"problem_id": 2433, "answer": "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         n = len(S)\n         if n < K:\n             return '-'*(n-K) + S"}, "73": {"problem_id": 2434, "answer": "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(bits)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if bits[i] == 1:\n                 i += 2\n             else:\n                 i += 1\n         return i == n"}, "74": {"problem_id": 2435, "answer": "class Solution:\n    def generateTheString(self, n: int) -> str:\n        d = {c:i for i,c in enumerate(['a','b','c'])}\n        s = 'a'\n        for i in range(1,n):\n            s = ''.join(d.get(c,s) for c in d)\n        return s"}, "75": {"problem_id": 2436, "answer": "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return False\n         chars = 'abcdefghijklmnopqrstuvwxyz'\n         for i in range(len(s)):\n             if s[i].isalnum() == False:\n                 continue\n             if s[i] in chars:\n                 return True\n             else:\n                 s = s[0:i] + s[i+1:]\n         return False"}, "76": {"problem_id": 2437, "answer": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        d = {}\n        for i in range(len(arr)):\n            d[arr[i]] = d.get(arr[i],0) + 1\n            if d[arr[i]] > m:\n                return False\n            elif d[arr[i]] == m:\n                if k > 0:\n                    return True\n                else:\n                    return False\n        return True"}, "77": {"problem_id": 2438, "answer": "class Solution:\n     def lengthOfLastWord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == '':\n             return 0\n         s = s.split()\n         return len(s[-1])"}, "78": {"problem_id": 2439, "answer": "class Solution:\n     def strStr(self, haystack, needle):\n         \"\"\"\n         :type haystack: str\n         :type needle: str\n         :rtype: int\n         \"\"\"\n         if needle == \"\":\n             return 0\n         l = len(haystack)\n         r = len(needle)\n         if l < r:\n             return -1\n         res = 0\n         for i in range(l):\n             if haystack[i] == needle[i]:\n                 res = i + 1\n         return res"}, "79": {"problem_id": 2440, "answer": "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         elif n == 1:\n             return 1\n         elif n == 2:\n             return 2\n         else:\n             return self.climbStairs(n-1) + self.climbStairs(n-2)"}, "80": {"problem_id": 2441, "answer": "class Solution:\n    def makeGood(self, s: str) -> str:\n        n = len(s)\n        d = {c: i for i, c in enumerate(s)}\n        ans = ''\n        for i in range(n-2):\n            if s[i] == s[i+1]:\n                continue\n            elif d[s[i]] < d[s[i+1]]:\n                ans += s[i+1]\n                d[s[i]] = d[s[i+1]]\n            else:\n                ans += s[i]\n        return ans"}, "81": {"problem_id": 2442, "answer": "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        d = Counter(s)\n        ans = []\n        while d:\n            ans.append(s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):])\n            d[s[min(len(s)-1, d.get(s[min(len(s)-1, d.get(s[i])+1])]):]]-=1\n            s=sorted(list(d.items()), key=lambda x:x[1], reverse=True)\n        return ''.join(ans)"}, "82": {"problem_id": 2443, "answer": "class Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        d = defaultdict(int)\n        for i in text:\n            d[i] += 1\n        return max(d.values())"}, "83": {"problem_id": 2444, "answer": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        '''\n        \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        '''\n        d = {0: 0}\n        for i in range(1, n):\n            d[i] = abs(d[i-1] + 1)\n        "}, "84": {"problem_id": 2445, "answer": "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 1:\n             return True\n         elif word.isupper():\n             return True\n         elif word.islower():\n             return True\n         else:\n             return False"}, "85": {"problem_id": 2446, "answer": "class Solution:\n     def findLHS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 1\n         elif len(nums) == 2:\n             return max(nums) - min(nums)\n         else:\n             ans = 0\n             for i in range(1, len(nums)):\n                 ans += max(nums[i] - nums[i-1].imag, nums[i].real)\n             return ans"}, "86": {"problem_id": 2447, "answer": "class Solution:\n     def reverseVowels(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n         l = len(s)\n         if l%2==0:\n             return ''.join(reversed(vowels))"}, "87": {"problem_id": 2448, "answer": "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for i in range(len(s)):\n             if s[i].lower() not in dic.keys():\n                 dic[s[i]] = 1\n             else:\n                 dic[s[i]] += 1\n         return max(dic.values())"}, "88": {"problem_id": 2449, "answer": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n+1)\n        dp[1] = 1\n        for i in range(2, n+1):\n            if s[i-1]!= s[i]:\n                dp[i] = min(dp[i-1], dp[i-2] + 1)\n            else:\n                dp[i] = dp[i-1]\n        return dp[-1]"}, "89": {"problem_id": 2450, "answer": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        n = len(salary)\n        salary.sort()\n        ans = 0\n        mx = salary[0]\n        mn = salary[-1]\n        for i in range(1, n):\n            ans += salary[i]\n            mx = min(mx, salary[i])\n            mn = max(mn, salary[i])\n        return ans/float(n)"}, "90": {"problem_id": 2451, "answer": "class Solution:\n     def canConstruct(self, ransomNote, magazine):\n         \"\"\"\n         :type ransomNote: str\n         :type magazine: str\n         :rtype: bool\n         \"\"\"\n         for i in range(len(ransomNote)):\n             if ransomNote[i] not in magazine:\n                 return False\n         return True"}, "91": {"problem_id": 2452, "answer": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        n = len(stones)\n        heap = [stones[0]]\n        for i in range(1, n):\n            heapq.heappush(heap, stones[i])\n        "}, "92": {"problem_id": 2453, "answer": "class Solution:\n     def isHappy(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         num = 0\n         while n > 0:\n             num += n%10\n             n //= 10\n         return num == 1"}, "93": {"problem_id": 2454, "answer": "class Solution:\n     def convertToTitle(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         res = \"\"\n         while n > 0:\n             res += chr(ord('A') + n)\n             n = n - 1\n         return res"}, "94": {"problem_id": 2455, "answer": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        d = defaultdict(int)\n        for i in range(len(startTime)):\n            d[startTime[i]] += 1\n        "}, "95": {"problem_id": 2456, "answer": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        s = list(S)\n        t = list(T)\n        backslash = '#'\n        for i in range(len(s)):\n            if s[i] == backslash:\n                s[i] = None\n            elif s[i] == t[i]:\n                return True\n        return False"}, "96": {"problem_id": 2457, "answer": "class Solution:\n     def pivotIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = sum(nums)\n         r = l\n         \n         for i in range(len(nums)):\n             if l == r:\n                 return i\n             \n             l = l - nums[i]\n             r = r - nums[i]\n         "}, "97": {"problem_id": 2458, "answer": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n = len(s)\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        \n        left, right = 0, 0\n        for i in range(1, n):\n            if s[i] == 'R':\n                right += 1\n            else:\n                left += 1\n        \n        return max(left, right)"}, "98": {"problem_id": 2459, "answer": "class Solution:\n     def toHex(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return '0'\n         res = ''\n         while num > 0:\n             res += str(num & 0xFF)\n             num >>= 8\n         return res"}, "99": {"problem_id": 2460, "answer": "class Solution:\n     def maxSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         m = max(nums)\n         res = 0\n         for i in nums:\n             res = max(res, i)\n             if i < m:\n                 res = max(res, i)\n         return res"}, "100": {"problem_id": 2461, "answer": "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n < 0:\n             return False\n         elif n == 0:\n             return True\n         else:\n             return n & -n == 0"}, "101": {"problem_id": 2462, "answer": "class Solution:\n     def titleToNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         return ord(s[s.index(s[0])+1]) - ord('A') + 1"}, "102": {"problem_id": 2463, "answer": "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        N = len(A)\n        i = 0\n        while i < N - 1:\n            if A[i] < A[i + 1]:\n                i += 1\n            elif A[i] > A[i + 1]:\n                i += 1\n            else:\n                return False\n        return i == N"}, "103": {"problem_id": 2464, "answer": "class Solution:\n     def countPrimes(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1081, 1083, 1087, 1089, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1121, 1129, 1133, 1139, 1149, 1151, 1153, 1163, 1169, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1369, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2299, 2309, 2317, 2333,"}, "104": {"problem_id": 2465, "answer": "class Solution:\n    def divisorGame(self, N: int) -> bool:\n        dp = [False] * (N + 1)\n        for i in range(2, N + 1):\n            for j in range(1, i):\n                if i % j == 0:\n                    dp[i] |= dp[i - j]\n        return dp[N]"}, "105": {"problem_id": 2466, "answer": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        n = len(mat)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = mat[i][j]\n                else:\n                    if mat[i][j] == 1:\n                        dp[i][j] = mat[i][j] + mat[i][j]\n                    else:\n                        dp[i][j] = mat[i][j] + dp[i][j]\n        ans = 0\n        for i in range(n):\n            ans += dp[i][i]\n        return ans"}, "106": {"problem_id": 2467, "answer": "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 0\n        d = defaultdict(int)\n        for i in range(1, n+1):\n            d[nums[i-1]].append(i)\n        ans = -1\n        for k in d:\n            if d[k] == 1:\n                ans = max(ans, k)\n        return ans"}, "107": {"problem_id": 2468, "answer": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        R, C = len(moves), len(moves[0])\n        dp = [[0] * 3 for _ in range(R)]\n        for r, c in enumerate(moves):\n            for i in range(r):\n                for j in range(c):\n                    if i == 0 and j == 0:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1 and j == 0:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1 and j == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 1:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2 and j == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif i == R - 2:\n                        dp[r][c] = [0] * 3\n                    elif j == R - 2:\n                        dp[r][c] = [0] * 3\n                    else:\n                        dp[r][c] = [0] * 3\n                    "}, "108": {"problem_id": 2469, "answer": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        num_mul = 0\n        for i in range(len(arr)):\n            if arr[i]%2 == 0:\n                num_mul += 1\n            else:\n                num_mul -= 1\n        if num_mul == 0:\n            return True\n        else:\n            return False"}, "109": {"problem_id": 2470, "answer": "class Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        d = {}\n        for i in range(len(dominoes)):\n            d[dominoes[i][0]] = 1\n            d[dominoes[i][1]] = 1\n        ans = 0\n        for i in range(len(dominoes)):\n            if d.get(dominoes[i][0]) == d.get(dominoes[i][1]):\n                ans += d[dominoes[i][0]]*(d.get(dominoes[i][1]))\n            elif d.get(dominoes[i][0])!= d.get(dominoes[i][1]):\n                ans += d[dominoes[i][0]]*(d.get(dominoes[i][1]))\n        return ans"}, "110": {"problem_id": 2471, "answer": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        \n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i-1], nums[i])\n        "}, "111": {"problem_id": 2472, "answer": "class Solution:\n     def checkRecord(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         return s.count('A')<=1 and s.count('LLL')"}, "112": {"problem_id": 2473, "answer": "class Solution:\n    def modifyString(self, s: str) -> str:\n        n = len(s)\n        if n == 1:\n            return s\n        d = defaultdict(list)\n        for i in range(1, n):\n            d[s[i]].append(i)\n        result = []\n        for k in d:\n            result.append(k)\n            if s[k] == '?':\n                result.append(k)\n        return ''.join(result)"}, "113": {"problem_id": 2474, "answer": "class Solution:\n     def mySqrt(self, x):\n         \"\"\"\n         :type x: int\n         :rtype: int\n         \"\"\"\n         if x==1:\n             return 1\n         elif x==2:\n             return 3\n         else:\n             return int(x**0.5)"}, "114": {"problem_id": 2475, "answer": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        count = 0\n        for i in range(len(A[0])):\n            if A[i][0] > A[i][1]:\n                count += 1\n                \n        return count"}, "115": {"problem_id": 2476, "answer": "class Solution:\n     def addDigits(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: int\n         \"\"\"\n         if num == 0:\n             return 0\n         res = 0\n         while num > 0:\n             res += num%10\n             num //= 10\n         return res"}, "116": {"problem_id": 2477, "answer": "class Solution:\n    def numSpecialEquivGroups(self, A: List[str]) -> int:\n        from collections import defaultdict\n        dic = defaultdict(int)\n        for i in A:\n            dic[i[0]] += 1\n            dic[i[1] % 2] -= 1\n            if dic[i[0]] == 0:\n                del dic[i[1] % 2]\n        return len(A) - max(dic.values())"}, "117": {"problem_id": 2478, "answer": "class Solution:\n     def findTheDifference(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: str\n         \"\"\"\n         s_chars = 'abcdefghijklmnopqrstuvwxyz'\n         t_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         \n         # \u7528\u4e8c\u5206\u641c\u7d22\u6807\u51c6\u6765\u5b9a\u4e49\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n         # \u5f62\u5982\uff1as_chars.index('Z')+1\uff0ct_chars.index('V')+1\n         # \u9996\u5148\uff0c\u5efa\u8bae\u8003\u8651\u4e24\u4e2a\u65b0\u7684\u6570\u7ec4\uff1as_chars[s_chars.index(s)]+1\uff0ct_chars[t_chars.index(t)]+1\n         # \u7136\u540e\uff0c\u5bf9\u6240\u6709\u82f1\u8bed\u5b57\u7b26\u8fdb\u884c\u641c\u7d22\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u76f8\u540c\u7684\u4f4d\u7f6e\n         def repl(s, t):\n             return (s_chars.index(s) + 1) * (t_chars.index(t) + 1)\n         \n         res = ''\n         for i in range(len(s)):\n             res += t_chars[i]\n         "}, "118": {"problem_id": 2479, "answer": "class Solution:\n     def judgeCircle(self, moves):\n         \"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"\n         x, y = 0, 0\n         for move in moves:\n             if move == 'U':\n                 x += 1\n             elif move == 'D':\n                 y -= 1\n             elif move == 'L':\n                 x -= 1\n             else:\n                 y += 1\n         return x == 0 and y == 0"}, "119": {"problem_id": 2480, "answer": "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        n = len(position)\n        dp = [0] * n\n        for i in range(1, n):\n            if position[i] > position[i - 1]:\n                dp[i] = 1 + dp[i - 1]\n            else:\n                dp[i] = dp[i - 1] + 1\n        return min(dp)"}, "120": {"problem_id": 2481, "answer": "class Solution:\n     def arrayPairSum(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         dp = [0] * (2 * len(nums) + 1)\n         for i in range(1, len(nums)):\n             dp[i] = dp[i - 1] + nums[i]\n         return sum(dp)"}, "121": {"problem_id": 2482, "answer": "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         cnt = 0\n         for i in range(len(flowerbed)):\n             if flowerbed[i] == 0:\n                 cnt += 1\n             if cnt > n:\n                 return False\n         return True"}, "122": {"problem_id": 2483, "answer": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        count = {}\n        for i in arr:\n            if i not in count:\n                count[i] = 1\n            else:\n                count[i] += 1\n        return len(count) == 1"}, "123": {"problem_id": 2484, "answer": "class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        if len(str1)!= len(str2):\n            str1, str2 = str2, str1\n        m = 0\n        for i in range(1, len(str1)):\n            if str1[i]!= str2[i]:\n                m = i\n                break\n        if m == 0:\n            return str1\n        else:\n            return self.gcd(str1, str2)"}, "124": {"problem_id": 2485, "answer": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n        return (high-low)//2"}, "125": {"problem_id": 2486, "answer": "class Solution:\n    def numberOfSteps (self, num: int) -> int:\n        steps = 0\n        while num > 0:\n            if num % 2 == 0:\n                num = num / 2\n            else:\n                num -= 1\n            steps += 1\n        return steps"}, "126": {"problem_id": 2487, "answer": "class Solution:\n     def repeatedSubstringPattern(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         n = len(s)\n         if n < 2:\n             return False\n         i = 0\n         while i < n:\n             if s[i:i+n] == s[i:i+n].replace(\"a\",\"1\").replace(\"b\",\"2\").replace(\"c\",\"3\"):\n                 return True\n             i += 1\n         return False"}, "127": {"problem_id": 2488, "answer": "class Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count"}, "128": {"problem_id": 2489, "answer": "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices) < 2:\n             return 0\n         max_profit = 0\n         for i in range(1, len(prices)):\n             if prices[i] > prices[i-.5]:\n                 max_profit = max(max_profit, prices[i] - prices[i-.5])\n             else:\n                 max_profit = max(max_profit, prices[i] - prices[i-1])\n         return max_profit"}, "129": {"problem_id": 2490, "answer": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        res = 0\n        for i in range(n):\n            res ^= start + 2*i\n        return res"}, "130": {"problem_id": 2491, "answer": "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        n = len(A)\n        if n <= 2:\n            return True\n        elif n <= 4:\n            return self.buddyStrings(A, B)\n        else:\n            return self.buddyStrings(reversed(A), B)"}, "131": {"problem_id": 2492, "answer": "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        d = {}\n        for i in logs:\n            if i.startswith('../'):\n                d['../'] = i\n            elif i.startswith('./'):\n                d['.'] = i\n            elif i.startswith(i[2:]):\n                d[i[2:]] = i\n            else:\n                d[i] = i\n        ans = 0\n        for k, v in list(d.items()):\n            ans += 1\n            if k == '../':\n                ans -= 1\n            elif k == '.':\n                ans -= 1\n            elif k == './':\n                ans -= 1\n        return ans"}, "132": {"problem_id": 2493, "answer": "class Solution:\n     def maximumProduct(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l, r = [], []\n         for i in nums:\n             l.append(i)\n             r.append(i)\n         l.sort()\n         return max(l[0]*l[1]*l[2], r[0]*r[1]*r[2], l[0]*r[1]*l[2])"}, "133": {"problem_id": 2494, "answer": "class Solution:\n    def defangIPaddr(self, address: str) -> str:\n        n = len(address)\n        address = address.replace('.', '[.]')\n        return address"}, "134": {"problem_id": 2495, "answer": "class Solution:\n    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:\n        if len(target)!= len(arr):\n            return False\n        \n        d = {}\n        for i in range(len(target)):\n            if target[i] not in d:\n                d[target[i]] = 1\n            else:\n                d[target[i]] += 1\n        \n        for i in range(len(arr)):\n            if arr[i] not in d:\n                d[arr[i]] = 1\n            else:\n                d[arr[i]] += 1\n        "}, "135": {"problem_id": 2496, "answer": "class Solution:\n    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:\n        d = {\n            'Sunday': 'S',\n            'Monday': 'M',\n            'Tuesday': 'T',\n            'Wednesday': 'W',\n            'Thursday': 'T',\n            'Friday': 'F',\n            'Saturday': 'S'\n        }\n        m = month\n        y = year\n        if y < 12:\n            y = 12\n        elif y % 12 == 0:\n            y = y // 12 + 7\n        else:\n            y = y // 12 + 7\n        "}, "136": {"problem_id": 2497, "answer": "class Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n        odd = 0\n        for num in arr:\n            if num % 2!= 0:\n                odd += 1\n            elif odd == 3:\n                return True\n        return False"}, "137": {"problem_id": 2498, "answer": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        d = {char: i for i, char in enumerate(order)}\n        words.sort(key=lambda x: d[x[0]])\n        for i in range(1, len(words)):\n            if words[i] == words[i-1]:\n                continue\n            elif words[i] < words[i-1]:\n                return False\n        return True"}, "138": {"problem_id": 2499, "answer": "class Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:\n        n = len(deck)\n        if n < 2:\n            return False\n        d = defaultdict(int)\n        for i in range(n):\n            d[deck[i]] += 1\n        g = sorted(d.items(), key=lambda x: x[1])\n        for i in range(2, n):\n            if g[i-1][1] == g[i][1]:\n                return True\n        return False"}, "139": {"problem_id": 2500, "answer": "class Solution:\n    def maxPower(self, s: str) -> int:\n        max_pow = 1\n        curr_max_pow = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                curr_max_pow = max(curr_max_pow, i)\n            else:\n                curr_max_pow = 1 + max(curr_max_pow, i)\n            if curr_max_pow > max_pow:\n                max_pow = curr_max_pow\n        return max_pow"}, "140": {"problem_id": 2501, "answer": "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         if len(s) < k: return s\n         i = 0\n         j = len(s) - k\n         while i < j:\n             s[i], s[j] = s[j], s[i]\n             i += 1\n             j -= 1\n         return ''.join(s[::-1])"}, "141": {"problem_id": 2502, "answer": "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         if n < 2:\n             return 0\n         dp = [0] * (n + 1)\n         for i in range(1, n + 1):\n             dp[i] = max(dp[i - 1] + prices[i - 1], dp[i - 2] + prices[i - 2])\n         return dp[-1]"}, "142": {"problem_id": 2503, "answer": "class Solution:\n     def findLUSlength(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: int\n         \"\"\"\n         if len(a)!= len(b):\n             return -1\n         m = {}\n         for i in range(len(a)):\n             if a[i] not in m:\n                 m[a[i]] = 1\n             else:\n                 m[a[i]] += 1\n         m[a[0]] = 2\n         for i in range(1, len(b)):\n             if b[i] not in m:\n                 m[b[i]] = 1\n             else:\n                 m[b[i]] += 1\n         m[b[len(a)-1]] = 2\n         return max(m.values())"}, "143": {"problem_id": 2504, "answer": "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [0] * (n+1)\n        for i in range(1, n+1, 2):\n            dp[i] = sum(dp[i-2] + arr[i-1] * (i & 1))\n        return dp[-1]"}, "144": {"problem_id": 2505, "answer": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        m1, m2 = len(rec1), len(rec2)\n        if m1 == 4 and m2 == 4:\n            return True\n        elif m1 == 4 and m2 == 3:\n            return False\n        elif m1 == 3 and m2 == 3:\n            return True\n        elif m1 == 3 and m2 == 2:\n            return False\n        elif m1 == 2 and m2 == 2:\n            return True\n        elif m1 == 2 and m2 == 1:\n            return True\n        elif m1 == 1 and m2 == 1:\n            return True\n        elif m1 == 1 and m2 == 0:\n            return True\n        elif m1 == 0 and m2 == 0:\n            return True\n        else:\n            return False"}, "145": {"problem_id": 2506, "answer": "class Solution:\n     def isIsomorphic(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!= len(t):\n             return False\n         d = {}\n         for i in range(len(s)):\n             if s[i] not in d:\n                 d[s[i]] = 1\n             else:\n                 d[s[i]] += 1\n         for i in range(len(t)):\n             if t[i] not in d:\n                 d[t[i]] = 1\n             else:\n                 d[t[i]] += 1\n         for i in d:\n             if d[i] > 1:\n                 return False\n         return True"}, "146": {"problem_id": 2507, "answer": "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d = {}\n        for i in chars:\n            d[i] = d.get(i,0) + 1\n        \n        res = 0\n        for i in words:\n            c = 0\n            for j in i:\n                if j not in d:\n                    c += 1\n                else:\n                    break\n            if c == len(i):\n                res += len(i)\n        return res"}, "147": {"problem_id": 2508, "answer": "class Solution:\n    def heightChecker(self, heights: List[int]) -> int:\n        n = len(heights)\n        d = defaultdict(list)\n        for i in range(n):\n            d[heights[i]].append(i)\n        ans = 0\n        for i in d:\n            if sorted(d[i]) == heights:\n                ans += 1\n        return ans"}, "148": {"problem_id": 2509, "answer": "class Solution:\n     def minMoves(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         min_moves = 0\n         for num in nums:\n             min_moves += abs(num - min(nums))\n         return min_moves"}, "149": {"problem_id": 2510, "answer": "class Solution:\n     def canWinNim(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n%4==0:\n             return False\n         elif n%4==2:\n             return True\n         else:\n             return False"}, "150": {"problem_id": 2511, "answer": "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)//2\n        d = {}\n        for i in range(N):\n            if A[i] not in d:\n                d[A[i]] = 1\n            else:\n                d[A[i]] += 1\n                \n        for k,v in d.items():\n            if v == N:\n                return k"}, "151": {"problem_id": 2512, "answer": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        dic = {}\n        for email in emails:\n            first_plus_minus = email[1:]\n            if first_plus_minus not in dic:\n                dic[first_plus_minus] = 1\n            else:\n                dic[first_plus_minus] += 1\n        return len(list(dic.keys()))"}, "152": {"problem_id": 2513, "answer": "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         nums = [0]*10\n         for i in range(1,10):\n             nums[i] = str(i)\n         \n         nth_digits = []\n         for i in range(len(nums)):\n             nth_digits.append(int(nums[i]))\n         "}, "153": {"problem_id": 2514, "answer": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt = 0\n        for i in range(len(arr1)):\n            is_valid = True\n            for j in range(len(arr2)):\n                if abs(arr1[i] - arr2[j]) <= d:\n                    is_valid = False\n                    break\n            if is_valid:\n                cnt += 1\n        return cnt"}, "154": {"problem_id": 2515, "answer": "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        s = S.split(' ')\n        n = len(s)\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        consonants = ['b', 'c', 'd', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n        final = ''\n        for i in range(n):\n            final += vowels[ord(s[i])] + consonants[ord(s[i]) - 1]\n        return final"}, "155": {"problem_id": 2516, "answer": "class Solution:\n     def containsNearbyDuplicate(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] in d.keys():\n                 d[nums[i]] += 1\n             else:\n                 d[nums[i]] = 1\n         ans = [0] * len(nums)\n         for i in range(1, len(nums)):\n             if abs(i - d[nums[i]]) <= k:\n                 ans[i] = 1\n         return ans"}, "156": {"problem_id": 2517, "answer": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + self.b(n)"}, "157": {"problem_id": 2518, "answer": "class Solution:\n     def checkPossibility(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         count = collections.Counter(nums)\n         for i in count:\n             if count[i] >= 2:\n                 return False\n         return True"}, "158": {"problem_id": 2519, "answer": "class Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        words = sentence.split(' ')\n        for i in range(len(words)):\n            if words[i] == searchWord:\n                return i+1\n        return -1"}, "159": {"problem_id": 2520, "answer": "class Solution:\n     def reverse(self, x):\n         \"\"\"\n         :type x: int\n         :rtype: int\n         \"\"\"\n         if x>=0:\n             return int(str(abs(x))[::-1])\n         else:\n             return 0"}, "160": {"problem_id": 2521, "answer": "class Solution:\n    def reformat(self, s: str) -> str:\n        n = len(s)\n        res = []\n        for i in range(n):\n            if s[i] == s[i+1]:\n                res.append(s[i])\n            elif s[i] not in ['a', 'b', 'c', 'd']:\n                res.append(s[i])\n            elif s[i] not in ['0', '1', '2', '3']:\n                res.append(s[i])\n            else:\n                res.append('%s%s' % (s[i], s[i+1]))\n        return ''.join(res)"}, "161": {"problem_id": 2522, "answer": "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         s = '1'\n         for _ in range(n-1):\n             s = s + '{}'.format(s)\n         return s"}, "162": {"problem_id": 2523, "answer": "class Solution:\n     def findShortestSubArray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] not in d.keys():\n                 d[nums[i]] = 1\n             else:\n                 d[nums[i]] += 1\n         ans = d[max(d.keys())]\n         degree = 0\n         for i in d:\n             if d[i] == degree:\n                 degree += 1\n             elif d[i] > degree:\n                 degree = d[i]\n         return ans"}, "163": {"problem_id": 2524, "answer": "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         dp = [0] * (len(nums) + 1)\n         max_len = 1\n         for i in range(1, len(nums) + 1):\n             if nums[i] > nums[i - 1]:\n                 dp[i] = dp[i - 1] + 1\n             else:\n                 dp[i] = dp[i - 1]\n             max_len = max(max_len, dp[i])\n         return max_len"}, "164": {"problem_id": 2525, "answer": "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         x_l = x & 0xffff\n         y_l = y & 0xffff\n         x_h = x >> 16 & 0xffff\n         y_h = y >> 16 & 0xffff\n         \n         res = 0\n         while x_l < y_l:\n             res += 1\n             x_l += 1\n             y_l -= 1\n         while x_h < y_h:\n             res += 1\n             x_h += 1\n             y_h -= 1\n         return res"}, "165": {"problem_id": 2526, "answer": "class Solution:\n     def trailingZeroes(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         return 0 if n < 0 else self.trailingZeroes(n//abs(n))"}, "166": {"problem_id": 2527, "answer": "class Solution:\n     def getSum(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: int\n         :rtype: int\n         \"\"\"\n         if a == 0:\n             return b"}, "167": {"problem_id": 2528, "answer": "class Solution:\n     def longestCommonPrefix(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: str\n         \"\"\"\n         if not strs:\n             return \"\"\n         maxlen = 0\n         for i in range(len(strs)):\n             if strs[i] not in strs[i+1:]:\n                 return strs[i]\n             maxlen = max(maxlen, len(strs[i]))\n         return strs[0:maxlen]"}, "168": {"problem_id": 2529, "answer": "class Solution:\n    def numSpecial(self, mat: List[List[int]]) -> int:\n        m = len(mat)\n        n = len(mat[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    dp[i][j] = 1 + dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i].get(j,0) + 1\n        return sum(dp[i] for i in range(m))"}, "169": {"problem_id": 2530, "answer": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        d = {}\n        ans = 0\n        for t in time:\n            if 60 - t%60 in d:\n                ans += d[60-t%60]\n            d[t%60] += 1\n        return ans"}, "170": {"problem_id": 2531, "answer": "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 1:\n             return 1\n         elif l == 2:\n             return 2\n         else:\n             mid = l//2\n             left = self.findUnsortedSubarray(nums[0:mid])\n             right = self.findUnsortedSubarray(nums[mid:])\n             return min(left, right)\n"}, "171": {"problem_id": 2532, "answer": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        res = ''\n        while n > 0:\n            res += str(n % 1000)\n            n //= 1000\n        return res"}, "172": {"problem_id": 2533, "answer": "class Solution:\n     def arrangeCoins(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n < 1:\n             return 1\n         num_row = 1\n         i = 2\n         while i < n:\n             num_row *= i\n             i += 1\n         return num_row"}, "173": {"problem_id": 2534, "answer": "class Solution:\n    def maxScore(self, s: str) -> int:\n        n = len(s)\n        res = 0\n        for i in range(1, n):\n            res += max(s[i-1] == '0', s[i] == '1')\n        return res"}, "174": {"problem_id": 2535, "answer": "class Solution:\n     def validPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if s == s[::-1]:\n             return True\n         i = 0\n         d = collections.Counter(s)\n         for c in d:\n             if d[c] > 1:\n                 return False\n             elif s[i]!= s[i+d[c]]:\n                 return False\n             i += 1\n         return True"}, "175": {"problem_id": 2536, "answer": "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        n = len(arr)\n        arr.sort()\n        ans = -1\n        for i in range(n):\n            if arr[i] == arr[i-1]:\n                ans = max(ans, i)\n        return ans"}, "176": {"problem_id": 2537, "answer": "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        n = len(distance)\n        if start == destination:\n            return 0\n        elif destination < start:\n            start, destination = destination, start\n        "}, "177": {"problem_id": 2538, "answer": "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        d = {}\n        for i in range(1,n+1):\n            s = sum([int(i) for i in str(i)])\n            d[s] = d.get(s,0) + 1\n        max_size = defaultdict(int)\n        for k,v in list(d.items()):\n            max_size[v] = max(max_size[v],v)\n        print(max_size)\n        return sum(v for v in max_size.values())"}, "178": {"problem_id": 2539, "answer": "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         s = set(nums)\n         return sum(nums.copy())"}, "179": {"problem_id": 2540, "answer": "class Solution:\n    def largestPerimeter(self, A: List[int]) -> int:\n        A.sort()\n        n = len(A)\n        for i in range(n-2):\n            if A[i] < A[i+1] + A[i+2]:\n                return A[i] + A[i+1] + A[i+2]\n        return 0"}, "180": {"problem_id": 2541, "answer": "class Solution:\n     def isPowerOfFour(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<4:\n             return False\n         i=num\n         while i!=0:\n             if i&i:\n                 return False\n             i>>=1\n         return True"}, "181": {"problem_id": 2542, "answer": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        n = len(A)\n        if n <= 1:\n            return True\n        elif A[0] > A[1]:\n            return False\n        else:\n            increasing = True\n            decreasing = True\n            for i in range(1, n):\n                if A[i] > A[i - 1]:\n                    increasing = False\n                if A[i] < A[i - 1]:\n                    decreasing = False\n            if increasing or decreasing:\n                return True\n            else:\n                return False"}, "182": {"problem_id": 2543, "answer": "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        stack = []\n        for i in range(len(S)):\n            if S[i] not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n                stack.append(S[i])\n            else:\n                stack.insert(0,S[i])\n        return ''.join(stack)"}, "183": {"problem_id": 2544, "answer": "class Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = grid[i][j]\n                elif j == 0:\n                    dp[i][j] = grid[i][j] + 1\n                elif i == m-1:\n                    dp[i][j] = grid[i][j] + grid[i][j+1]\n                elif j == m-1:\n                    dp[i][j] = grid[i][j] + grid[i+1][j]\n                else:\n                    dp[i][j] = grid[i][j] + grid[i+1][j+1]\n        print(dp)\n        return sum(dp[i][j] for i in range(n) for j in range(m))"}, "184": {"problem_id": 2545, "answer": "class Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        n = len(board)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'p':\n                    dp[i][j] = 1\n                elif board[i][j] == 'B':\n                    dp[i][j] = 1\n                elif board[i][j] == '.':\n                    dp[i][j] = 1\n                elif board[i][j] == 'R':\n                    dp[i][j] = 1 + dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i].values())\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'p':\n                    ans += dp[i][j]\n        return ans"}, "185": {"problem_id": 2546, "answer": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count"}, "186": {"problem_id": 2547, "answer": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] < 0:\n                    count += 1\n        return count"}, "187": {"problem_id": 2548, "answer": "class Solution:\n     def isUgly(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: bool\n         \"\"\"\n         if num<=0:\n             return False\n         i=2\n         while i<=num:\n             if num%i==0:\n                 return False\n             elif num%i==i:\n                 i+=1\n             else:\n                 i+=2\n         return True"}, "188": {"problem_id": 2549, "answer": "class Solution:\n    def reorderSpaces(self, text: str) -> str:\n        n = len(text)\n        dp = [0] * (n+1)\n        for i in range(1, n+1):\n            dp[i] = dp[i-1] + (dp[i-1] if i > 1 else 0)\n            if text[i-1] =='':\n                dp[i] = min(dp[i], dp[i-1] + 1)\n        return ''.join(reversed(dp))"}, "189": {"problem_id": 2550, "answer": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        fives, ten, twenties = [0,0,0]\n        for bill in bills:\n            if bill == 5:\n                fives.append(fives[-1] + bill)\n            elif bill == 10:\n                ten.append(ten[-1] + bill)\n            elif bill == 20:\n                twenties.append(twent[-1] + bill)\n            else:\n                fives.append(fives[-1] + bill)\n        "}, "190": {"problem_id": 2551, "answer": "class Solution:\n     def isValid(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         stack = []\n         for c in s:\n             if c == '(':\n                 stack.append(c)\n             elif c == ')':\n                 if stack:\n                     stack.pop()\n                 else:\n                     return False\n             elif c == '[':\n                 if stack:\n                     stack.append(c)\n             elif c == ']':\n                 if stack:\n                     stack.pop()\n                 else:\n                     return False\n         return len(stack) == 0"}, "191": {"problem_id": 2552, "answer": "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        count = 0\n        for i in arr:\n            if arr.count(i) > n//25:\n                return i"}, "192": {"problem_id": 2553, "answer": "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        mod = 10**9 + 7\n        @lru_cache(None)\n        def dp(i, n):\n            if n == 1:\n                return 1\n            elif i == n:\n                return 0\n            else:\n                res = pow(2, i) % mod\n                for p in primes:\n                    if p*p > n:\n                        break\n                    res = (res + dp(i, n - p)) % mod\n                return res\n        return dp(0, n)"}, "193": {"problem_id": 2554, "answer": "class Solution:\n     def longestWord(self, words):\n         \"\"\"\n         :type words: List[str]\n         :rtype: str\n         \"\"\"\n         words.sort(key=len)\n         ans = ''\n         for word in words:\n             if word[:-1] in words:\n                 ans = max(ans, word)\n         return ans"}, "194": {"problem_id": 2555, "answer": "import operator\nn = int(input())\ns = set(map(int, input().split()))\n\nfor _ in range(n):\n    operator(\"pop\", s)\n    operator(\"remove\", s)\n    operator(\"discard\", s)"}, "195": {"problem_id": 2556, "answer": "import re\ns = input()\nn = len(s)\nc = 0\nfor i in range(n):\n    if s[i] in '@':\n        c += 1\n        for j in range(i,n):\n            if s[j] in '@':\n                c += 1\n                for k in range(j):\n                    if s[k] in '@':\n                        c += 1\n                        break\n            elif s[i] == s[j]:\n                break\n        else:\n            print(-1)\n            break"}, "196": {"problem_id": 2557, "answer": "import numpy as np\narr = list(map(int,input().split()))\narr = sorted(arr)\nprint(np.product(*arr))\n"}, "197": {"problem_id": 2558, "answer": "import numpy as np\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef print_rangoli(size):\n    rangel = np.arange(27, dtype=np.int64) + 1\n    print(rangel)\n    for i in range(size):\n        rangoli = ''.join(alphabet[ord(c) - 65] for c in alphabet)\n        print(rangoli)\n"}, "198": {"problem_id": 2559, "answer": "t = int(input())\nfor i in range(t):\n    a = int(input())\n    b = list(map(str,input().split()))\n    print(a.count(b[0]))\n"}, "199": {"problem_id": 2560, "answer": "from fractions import Fraction\nfrom functools import reduce\n\ndef product(fracs):\n    t = reduce(lambda x, y: x*y, fracs)\n    return t.numerator, t.denominator\n\nif __name__ == '__main__':\n    fracs = [1, 2, 3]\n    result = product(fracs)\n    print(result)\n"}, "200": {"problem_id": 2561, "answer": "import sys\ninput = sys.stdin.readline\n\nx = int(input())\ns = list(map(int, input().split()))\nn = int(input())\nd = {}\nfor i in range(n):\n    d[s[i]] = i+1\nprint((sum(d.values())+x*x))\n"}, "201": {"problem_id": 2562, "answer": "import itertools\ns = input()\nfor i in itertools.count(list(map(int, s)):\n    s = ''.join(map(str, s))\nprint((''.join(['(%d, %s)', '%d)' % tuple(x) for x in enumerate(s)]), end=' ')\n"}, "202": {"problem_id": 2563, "answer": "import numpy\nnumpy.set_printoptions(maxlinel = 1)\n\nA = list(map(int, input().strip().split()))\nB = list(map(int, input().strip().split()))\nprint((numpy.inner(A, B)))\nprint((numpy.outer(A, B)))"}, "203": {"problem_id": 2564, "answer": "import re\nn = int(input().strip())\nfor i in range(n):\n    name, email = input().strip().split()\n    if re.match(r'^[a-zA-Z0-9_.-]{1,3}@[a-zA-Z0-9_.-]{1,3}$', email):\n        print(' '.join(name))\n    else:\n        print(' '.join(name))"}, "204": {"problem_id": 2565, "answer": "#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1) + c + (c*i).ljust(thickness-1) + c)\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).rjust(thickness*2) + (c*thickness).ljust(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).rjust(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).rjust(thickness*2) + (c*thickness).ljust(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))"}, "205": {"problem_id": 2566, "answer": ""}, "206": {"problem_id": 2567, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    print(any(all(arr) or all(arr[0] < arr[1]) for _ in range(n)))\n__starting_point()"}, "207": {"problem_id": 2568, "answer": "import collections\nn = int(input())\ncollection = collections.Counter(list(map(str, input().split())))\nprint(len(collection))\n"}, "208": {"problem_id": 2569, "answer": "import re\n\ndef solve(s):\n    return re.sub(r'[A-Z]', r'\\1', s)\n"}, "209": {"problem_id": 2570, "answer": "n = int(input())\nprint(\"\".join(str(i) for i in range(1, n + 1)))"}, "210": {"problem_id": 2571, "answer": "def mutate_string(string, position, character):\n    return string[position:position + len(c)] + character"}, "211": {"problem_id": 2572, "answer": "# Enter your code here. Read input from STDIN. Print output to STDOUT\na = int(input())\nb = int(input())\nc = int(input())\nprint((pow(a,b)))\nprint((pow(a,b,c)))\n"}, "212": {"problem_id": 2573, "answer": "import numpy as np\nn = int(input())\narr1 = np.array(input().split())\narr2 = np.array(input().split())\nprint((np.dot(arr1, arr2)))"}, "213": {"problem_id": 2574, "answer": "import re\nn = int(input())\nlines = input().split()\nfor i in range(n):\n    s = re.sub(r'(?<=\\w)\\s*\\w(?=\\s*\\w)', '\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t', i)\n    print(s)"}, "214": {"problem_id": 2575, "answer": "n = int(input())\ns = []\nfor i in range(n):\n    s.append(input().rstrip().split('>')[1:])\nprint(' '.join(map(str,s)))"}, "215": {"problem_id": 2576, "answer": "s = input()\nw = int(input())\nprint(s + \" \" * (w - w % len(s)))"}, "216": {"problem_id": 2577, "answer": "import re\nn = int(input())\nfor i in range(n):\n    s = input()\n    if re.match('^[4-6]\\d{15}$',s):\n        print('Valid')\n    else:\n        print('Invalid')"}, "217": {"problem_id": 2578, "answer": "n = int(input())\narr = []\nfor i in range(n):\n    arr.append([])\n    arr[i].append(input().split())\nfor i in range(n):\n    arr[i].sort()\n    print(arr[i][-2])"}, "218": {"problem_id": 2579, "answer": "def arrays(arr):\n    return''.join(map(float,reversed(list(enumerate(arr))))).replace('.',''))"}, "219": {"problem_id": 2580, "answer": "s = input().strip()\nsorted_list = sorted(list(zip(list(enumerate(s)), list(map(str, range(97, 123)))))[::-1])\nprint(sorted_list)\n"}, "220": {"problem_id": 2581, "answer": "import numpy as np\nn,m = list(map(int,input().split()))\na = np.array(list(map(int,input().split())))\nb = np.array(list(map(int,input().split())))\nprint((np.add(a,b)))\nprint((np.subtract(a,b)))\nprint((np.multiply(a,b)))\nprint((np.divide(a,b)))\nprint((np.mod(a,b)))\nprint((np.power(a,b)))\n"}, "221": {"problem_id": 2582, "answer": "import numpy as np\nn,m,p = [int(i) for i in input().split()]\narr1 = np.array([list(input().split()) for _ in range(n)])\narr2 = np.array([list(input().split()) for _ in range(m)])\narr3 = np.column_stack((arr1,arr2))\nprint(np.concatenate((arr1,arr2),axis = 0))"}, "222": {"problem_id": 2583, "answer": "s, k = input().split()\ns = sorted(s)\nk = int(k)\nprint(*[(i, i) for i in combinations(s, k)], sep='\\n')"}, "223": {"problem_id": 2584, "answer": "import numpy as np\nn,m = [int(x) for x in input().strip().split()]\nprint(np.eye(n,m,k=1)[0])"}, "224": {"problem_id": 2585, "answer": "def is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    \n    return leap\n"}, "225": {"problem_id": 2586, "answer": "import re\ns = input().strip()\nk = input().strip()\nprint((len(k),len(re.findall(r'[^\\d]+',k))))\n"}, "226": {"problem_id": 2587, "answer": "from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n        print \"Comment  :\", data\n    "}, "227": {"problem_id": 2588, "answer": "import re\ndef print_full_name(a, b):\n    print(\"\")\n    s = re.sub(r'[a-zA-Z]+', '', a)\n    s = re.sub(r'[a-zA-Z]+', '', b)\n    print(s)\n"}, "228": {"problem_id": 2589, "answer": "#!/usr/bin/env python3\n\nimport sys\n\ndef __starting_point():\n    t = int(input().strip())\n    for _ in range(t):\n        a, b = map(str, input().strip().split())\n        print(a//b)\n__starting_point()"}, "229": {"problem_id": 2590, "answer": "import numpy as np\nn,m = [int(i) for i in input().split()]\narr = np.array([int(i) for i in input().split()])\nprint(np.max(arr,axis=1))"}, "230": {"problem_id": 2591, "answer": "import numpy\nn = int(input())\narr = []\nfor i in range(n):\n    arr.append(list(map(int,input().split())))\nprint(numpy.array(arr, dtype=int))"}, "231": {"problem_id": 2592, "answer": "import numpy as np\na = np.array([int(x) for x in input().strip().split()])\nprint(np.floor(a))\nprint(np.ceil(a))\nprint(np.rint(a))"}, "232": {"problem_id": 2593, "answer": "def minion_game(string):\n    # your code goes here\n    win_score = 0\n    for i in string:\n        if i.isalpha():\n            win_score += 1\n        else:\n            pass\n        "}, "233": {"problem_id": 2594, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    words = []\n    for _ in range(n):\n        words.append(input().strip())\n    print(len(set(words[0])))\n    print(sum(1 for word in words if word.isdecimal()))\n__starting_point()"}, "234": {"problem_id": 2595, "answer": "import cmath\nz = complex(input().strip())\nr = cmath.phase(z)\nprint(r)\nprint(abs(z))\n"}, "235": {"problem_id": 2596, "answer": "from collections import defaultdict\ndef average(array):\n    return sum(array)/len(array)"}, "236": {"problem_id": 2597, "answer": "def print_formatted(number):\n    print(f\"{number:b}\")\n    print(f\"{number:d}\")\n    print(f\"{number:o}\")\n    print(f\"{number:hex}\")\n    print(f\"{number:bin}\")"}, "237": {"problem_id": 2598, "answer": "import sys\ninput = sys.stdin.readline\nn = int(input())\nsets = set(map(int,input().split()))\nfor i in range(n):\n    sets.add(input().strip())\nprint(any(x not in sets for x in sets))\n"}, "238": {"problem_id": 2599, "answer": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = input()\nprint(n-1)"}, "239": {"problem_id": 2600, "answer": "import numpy as np\nn,m = len(arr),len(arr[0])\nprint np.prod(arr,axis=0)"}, "240": {"problem_id": 2601, "answer": "a,b=map(int,input().split())\nprint((a%b))\nprint((a%b%b))\n"}, "241": {"problem_id": 2602, "answer": "import numpy\nn,m = [int(i) for i in input().split()]\narr = []\nfor i in range(n):\n    arr.append(list(map(int,input().split())))\nprint((numpy.array(arr)).transpose())\nprint((numpy.array(arr).flatten()))"}, "242": {"problem_id": 2603, "answer": "import numpy as np\nn,m = list(map(int,input().split()))\narr = np.array([list(map(int,input().split())) for i in range(n)])\nprint(np.mean(arr,axis = 1))\nprint(np.var(arr,axis = 0))\nprint(np.std(arr,axis = None))"}, "243": {"problem_id": 2604, "answer": "import itertools\ns, k = list(map(str, input().split()))\np = list(itertools.permutations(s, k))\nfor i in range(2, len(p)+1):\n    print(\"\".join(p[i-1:]))\n"}, "244": {"problem_id": 2605, "answer": "import numpy as np\nn = np.array(list(map(int, input().split())))\nprint(n.tolist()[n.argsort(0)])"}, "245": {"problem_id": 2606, "answer": "import numpy as np\ncoeff = np.array(list(map(float, input().strip().split())))\nx = int(input().strip())\nprint(np.polyval(coeff, x))\n"}, "246": {"problem_id": 2607, "answer": "#!/bin/python3\n\nimport math\nimport os\nimport re\nimport sys\n\n\nsys.setrecursionlimit(10**6)\n\nimport numpy as np\n\ns = input()\n\nocc = []\nfor i in range(97,123):\n    if s.count(s[i])>1:\n        occ.append(s[i])\n\nocc.sort(key=lambda x: abs(x))\n\nprint(' '.join(occ))"}, "247": {"problem_id": 2608, "answer": "import re\ns = input()\nprint(\"\\n\".join(re.split(r\"\\s*,\\s*\", s)))"}, "248": {"problem_id": 2609, "answer": "def split_and_join(line):\n    splitted = line.split(\" \")\n    return \"\".join(splitted)"}, "249": {"problem_id": 2610, "answer": "n = int(input())\neng = set(map(int,input().split()))\nfra = set(map(int,input().split()))\nprint((len(eng.intersection(fra))))\n"}, "250": {"problem_id": 2611, "answer": "import numpy\nn = int(input())\nprint(numpy.array(list(map(int, input().split()))))\n"}, "251": {"problem_id": 2612, "answer": "import sys\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\nread = lambda: readline()[:-1]\n\nprint(*map(int, read().split()), sep='\\n')"}, "252": {"problem_id": 2613, "answer": "n = input()\neng = input()\nfra = input()\nprint(sum([1 for i in eng if i in fra]))\n"}, "253": {"problem_id": 2614, "answer": "import sys\nread = sys.stdin.readline\n\ndef __starting_point():\n    a, b, c, d = list(map(int, read().split()))\n    print('%d^{}'.format(a**2 + c**d, '+'))\n__starting_point()"}, "254": {"problem_id": 2615, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    t = int(input().strip())\n    \n    for _ in range(t):\n        s = input().strip()\n        try:\n            float(s)\n        except ValueError:\n            print(\"Error\")\n        else:\n            print(\"True\")\n__starting_point()"}, "255": {"problem_id": 2616, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    x = int(input())\n    print(0 if x == 0 else 1 if x == 1 else 2 if x == 2 else 3 if x == 3 else 4 if x == 4 else 5 if x == 5 else 6 if x == 6 else 7 if x == 7 else 8 if x == 8 else 9)\n__starting_point()"}, "256": {"problem_id": 2617, "answer": "import re\nn = int(input())\nfor i in range(n):\n    cmd = input().strip()\n    if cmd == 'insert':\n        n += 1\n    elif cmd =='remove':\n        n -= 1\n    elif cmd == 'append':\n        n += 1\n    elif cmd =='sort':\n        n.append(1)\n    elif cmd == 'pop':\n        n.pop()\n    elif cmd =='reverse':\n        n.reverse()\n    elif cmd == 'print':\n        print(n)"}, "257": {"problem_id": 2618, "answer": "import re\nt = int(input())\nfor i in range(t):\n    s = input().upper()\n    d = int(input())\n    print('Valid' if 10 in s else 'Invalid')\n"}, "258": {"problem_id": 2619, "answer": "a = int(input())\nb = int(input())\nprint((a//b)) + \"\\n\" + (a/b)"}, "259": {"problem_id": 2620, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    deque = []\n    for _ in range(n):\n        op, *args = input().strip().split()\n        deque.append(args[0])\n        deque.extend(args[1:])\n    "}, "260": {"problem_id": 2621, "answer": "k = int(input())\nroom_number = list(map(int,input().split()))\nroom_number.sort()\nroom_number = [room_number[i] for i in range(0,k)]\nroom_number.append(room_number[k-1])\nprint(room_number[0])\n"}, "261": {"problem_id": 2622, "answer": "import sys\nn,m = list(map(int,input().split()))\narr = list(map(int,input().split()))\nsetA = set(arr)\nsetB = set(arr)\narr.sort()\nfor i in arr:\n    if i in setA:\n        sys.stdout.write(str(i) +'' + str(i) +'' + str(i) + '\\n')\n    else:\n        sys.stdout.write(str(i) +'' + str(i) +'' + str(i) + '\\n')\nsys.stdout.write('\\n')\n"}, "262": {"problem_id": 2623, "answer": "a = int(input())\nb = int(input())\nprint((a + b))\nprint((a - b))\nprint((a * b))"}, "263": {"problem_id": 2624, "answer": "n,m = list(map(int,input().split()))\nprint(f'\\n'.center(3*n,'-'.join([['WELCOME'] for i in range(n)])))\n"}, "264": {"problem_id": 2625, "answer": "import re\nP = input().strip()\ns = re.sub(r'[^\\d]*\\d{5}', '', P)\ns = re.sub(r'(?<=\\D)('.join(['12','14','26','523','563','55','23'])).*(?=\\D)', '', P)\nprint(bool(re.match(s, P)) and len(re.findall(s, s.replace('12','14','26','523','563','55','23'))) < 2)"}, "265": {"problem_id": 2626, "answer": "import operator as op\ninput = raw_input\nn = int(input())\noperators = {\n    op.add: lambda a, b: a+b,\n    op.sub: lambda a, b: a-b,\n    op.mul: lambda a, b: a*b,\n    op.floordiv: lambda a, b: a//b,\n}\n\nA = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    line = input().split()\n    print(A.update(line[0]))\n"}, "266": {"problem_id": 2627, "answer": "import numpy as np\nn = int(input())\na = input().rstrip()\nk = int(input())\nprob = 0.0\nfor i in range(k):\n    if a[i] == \"a\":\n        prob += 1.0\nprint(np.prob(prob))"}, "267": {"problem_id": 2628, "answer": "import collections as clc\nimport numpy as np\n\nn, m = list(map(int, input().strip().split()))\na = np.array([input().strip().split() for _ in range(n)])\nb = np.array([input().strip().split() for _ in range(m)])\nprint(*a, sep='\\n')\nprint(*b, sep='\\n')\n"}, "268": {"problem_id": 2629, "answer": ""}, "269": {"problem_id": 2630, "answer": "for i in range(1,int(input())+1): #More than 2 lines will result in 0 score. Do not leave a blank line also\n    print(i)"}, "270": {"problem_id": 2631, "answer": "import numpy as np\nk,m = list(map(int,input().split()))\nfor i in range(k):\n    n = int(input())\n    lst = list(map(int,input().split()))\n    s = (np.sum(lst)**2)%m\n    print(s)\n"}, "271": {"problem_id": 2632, "answer": "import collections\nn = int(input())\nitems = list(map(int,input().split()))\nprint(items[0],'$',items[1]*items[0])"}, "272": {"problem_id": 2633, "answer": "#!/bin/python3\n\nimport numpy as np\n\nns = [int(x) for x in input().split()]\nns = sorted(ns, key=lambda x:x[1])\nnm = [int(x) for x in input().split()]\nnm = sorted(nm, key=lambda x:x[1])\n\nprint(*ns, sep='\\n')\nprint(*nm, sep='\\n')"}, "273": {"problem_id": 2634, "answer": "import numpy as np\nn = int(input())\narr = np.array(input().split())\nprint(np.determinant(arr))"}, "274": {"problem_id": 2635, "answer": "def count_substring(string, sub_string):\n    return sum(1 for ch in string if ch.isalpha() and sub_string.startswith(ch))"}, "275": {"problem_id": 2636, "answer": "import csv\nn,x = list(map(int,input().split()))\ns = []\nfor i in range(n):\n    s.append(list(map(int,input().split())))\nd = {}\nfor i in range(n):\n    d[s[i][1]] = s[i][0]\n    \na = [0]*n\nb = [0]*n\nfor i in range(n):\n    a[s[i][1]] = s[i][0]\n    b[s[i][1]] = s[i][1]\nprint((sum(a) / n))\n"}, "276": {"problem_id": 2637, "answer": "import math\ndef angle(a,b):\n    return round(math.acos(b/a))*180\nl=input().split()\nl1=int(l[0])\nl2=int(l[1])\nprint(langle(l1,l2))"}, "277": {"problem_id": 2638, "answer": "import re\n\ndef decode(s):\n    return ''.join(c for c in s if c.isalnum())\n\ndef calc(matrix):\n    return '\\n'.join(map(lambda x: re.sub(r'[^\\w\\@\\#\\$\\&\\*\\+\\-\\/\\?\\!\\{\\}\\|\\+\\-\\=]',\" \"), matrix))\n\ndef __starting_point():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix_item = input()\n        matrix.append(matrix_item)\n    calc(matrix)\n    print(decode(calc(matrix)))\n\n__starting_point()"}, "278": {"problem_id": 2639, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    input()\n    \n    s = input()\n    \n    print(s.replace(' ', ''))\n__starting_point()"}, "279": {"problem_id": 2640, "answer": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(\"Yes\" if l[0] >= l[1] else \"No\")"}, "280": {"problem_id": 2641, "answer": "import datetime as dt\ndt.date(2020, 1, 1)\nt = dt.date(2020, 1, 1)\nprint((dt.datetime.combine(t, t + dt.timedelta(days=1), t)).total_seconds())\n"}, "281": {"problem_id": 2642, "answer": "def swap_case(s):\n    return ''.join(c.upper() if c.islower() else c for c in s)"}, "282": {"problem_id": 2643, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    n = int(input().strip())\n    english = input().strip().split(' ')\n    fran = input().strip().split(' ')\n    print(len(set(english.difference(fran))))\n__starting_point()"}, "283": {"problem_id": 2644, "answer": "import re\ns = input()\ns = re.sub(r'[^\\w\\s]', '', s)\ns = re.sub(r'[^\\w\\s]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\d]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\p{L}]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\ns = re.sub(r'[^\\P\\w]', '', s)\n"}, "284": {"problem_id": 2645, "answer": "#!/usr/bin/env python3\n\ndef __starting_point():\n    input()\n    s = input()\n    k = int(input())\n    print(''.join(itertools.combinations_with_replacement(s, k)))\n__starting_point()"}, "285": {"problem_id": 2646, "answer": "import re\nn = int(input().strip())\nfor i in range(n):\n    s = input().strip()\n    d = {'#': '0','': '0', '!': '0', '\\t}, "286": {"problem_id": 2647, "answer": "import re\nt = int(input())\nfor i in range(t):\n    s = input()\n    if re.match(r'^[a-z]+$',s):\n        print('True')\n    else:\n        print('False')"}, "287": {"problem_id": 2648, "answer": "from collections import deque\n\nd = set(map(int, input().split()))\nd1 = set(list(map(int, input().split())))\nd2 = set(list(map(int, input().split())))\nprint((len(d1 & d2)))\n"}, "288": {"problem_id": 2649, "answer": "print(\"Hello, World!\")\n"}, "289": {"problem_id": 2650, "answer": "n, l = map(int, input().split())\ns = [input() for _ in range(n)]\ns.sort()\nprint(''.join(s))"}, "290": {"problem_id": 2651, "answer": "def prod2sum(a, b, c, d):\n    s = 0\n    e = 0\n    f = 0\n    for i in range(1, len(a) + 1):\n        s += a[i] * b[i]\n        e += c[i] * d[i]\n        f += e[i] * f[i]\n    return sorted([s, e, f])"}, "291": {"problem_id": 2652, "answer": "def count_squares(lines):\n    \"\"\"Count the number of squares in a ascii art picture.\"\"\"\n    h, w = len(lines), 6\n    for i in range(h):\n        for j in range(w):\n            if lines[i][j] == '+':\n                lines[i][j] = chr(122)\n            elif lines[i][j] == '|':\n                lines[i][j] = chr(96)\n            elif lines[i][j] == '-':\n                lines[i][j] = chr(90)\n            else:\n                lines[i][j] = chr(48)\n    return h * w"}, "292": {"problem_id": 2653, "answer": "def bingo(array):\n    return \"WIN\" if all(c in \"ABAB\" for c in array) else \"LOSE\""}, "293": {"problem_id": 2654, "answer": "def michael_pays(costs):\n    return round(costs / 3.0, 2)"}, "294": {"problem_id": 2655, "answer": "def duck_shoot(ammo, aim, ducks):\n    res = ''\n    for duck in ducks:\n        if duck == '2':\n            res += duck\n        else:\n            res += 'X'\n    return res"}, "295": {"problem_id": 2656, "answer": "def bird_code(arr):\n    codes = {\n        'Common Titlurc'.upper() : 'Titlurc',\n        'Common Nissl'.upper() : 'Nissl',\n        'Common Titlurc-Nissl'.upper() : 'TitlurcNissl',\n        'Common Nissl-Common Titlurc'.upper() : 'NisslTitlurc',\n        'Common Psittacine-Pelagrina'.upper() : 'PsittacinePelagrina',\n        'Common Cuckoo-Cormorant'.upper() : 'CormorantCuckoo',\n        'Common Cuckoo-Cormorant-Psittacine-Pelagrina'.upper() : 'CuckooCormorantPsittacinePelagrina',\n        'Common Girie-Bunting'.upper() : 'GirieBunting',\n        'Common Eolian-Siberian Alpestrus'.upper() : 'EolianSiberianAlpestrus',\n        'Common Tufted Titmofall'.upper() : 'Titmofall',\n        'Common Hummingbird-Sparrow'.upper() : 'HumbladeSprownding',\n        'Common Hummingbird-Sparrow-Common Titmofall'.upper() : 'HumbladeSprowndingTitmofall',\n        'Common Mourning-Warbler-Goldfinch'.upper() : 'Mourngoldfinch',\n        'Common Bobolink-Jedda'.upper() : 'BobolinkJedda',\n        'Common Yuhwadis'.upper() : 'Yuhwadis',\n        'Common Curlew-kea'.upper() : 'CurlequKea',\n        'Common Turnip-Chachalaca'.upper() : 'TurnicChalaca',\n        'Common Curlew-kea-TurnicChalaca'.upper() : 'CurlequKeaTurnicChalaca',\n        'Common Turnip-Chachalaca-Yuhwadis'.upper() : 'TurnicChalacaYuhwadis',\n        'Common Northern Vireo-Cavo'.upper() : 'VireoCavo',\n        'Common Eurasian Collared-Dove'.upper() : 'EurasCollaredDove',\n        'Common Eurasian Collared-Dove-Common Turnip-Chachalaca'.upper() : 'EurasCollaredDoveCommonTurnicChalaca',\n        'Common Eurasian Hoary-Tailed Rock Thrush'.upper() : 'EurahippodromusHaemorhythmthush',\n        'Common Red-Bellied Whistling-Thrush'.upper() : 'RedBellingWistlingThrush',\n        'Common Yellow-Throated Whistling-Thrush'.upper() : 'YellowThroatedWistlingThrush',\n        'Common Tyropteran-Parrot Saurops'.upper() : 'Tyropteraspalutarunas',\n        'Common Troglodyt'.upper() : 'Troglodyt',\n        'Common Troglodyt-Troglodyt'.upper() : 'TroglodytTroglodyt',\n        'Common Troglodyt-Troglodyt-Troglodyt'.upper() : 'TroglodytTroglodytTroglodyt',\n        'Common Magpie-Pintail'.upper() : 'PintailMagpie',\n        'Common Piping-Plain'.upper() :"}, "296": {"problem_id": 2657, "answer": "def make_string(s):\n    return ''.join(w[0] for w in s.split())"}, "297": {"problem_id": 2658, "answer": "def convert_bits(a, b):\n    return bin(a ^ b).count('1')"}, "298": {"problem_id": 2659, "answer": "def last_chair(n):\n    return n-1"}, "299": {"problem_id": 2660, "answer": "def args_to_string(args):\n    return''.join(f'{k}--{v}' for k, v in enumerate(args))"}, "300": {"problem_id": 2661, "answer": "import re\ndef find_codwars(url):\n    return bool(re.match(r'(https?:\\/\\/)?(www\\.)?codwars\\.com(?P<code>[a-z]{3,15})(?P<not_code>[a-z]{3,15})', url))"}, "301": {"problem_id": 2662, "answer": "def shoot(results):\n    p1, p2 = ''.join(sorted(results[0]['P1']))\n    p1, p2 = p1.split(' ', 1)\n    p1 = int(p1)\n    p2 = int(p2)\n    return 'Pete Wins!' if p1 > p2 else 'Phil Wins!' if p2 > p1 else 'Draw!'"}, "302": {"problem_id": 2663, "answer": "def addsup(a1, a2, a3):\n    return [[x,y,z] for x,y,z in zip(a1,a2,a3)]"}, "303": {"problem_id": 2664, "answer": "def solve(s):\n    n = sum(1 for c in s if c!= s[len(s) - 1 - len(c):])\n    return n == len(s)"}, "304": {"problem_id": 2665, "answer": "def meeting(rooms):\n    return rooms.index('O') if rooms.count('O') else 'None available!'"}, "305": {"problem_id": 2666, "answer": "def spacey(array):\n    return [''.join(sorted(array)) for s in array]"}, "306": {"problem_id": 2667, "answer": "def zero_fuel(distance_to_pump, mpg, fuel_left):\n    #Happy Coding! ;)\n    if distance_to_pump/mpg <= fuel_left:\n        return True\n    else:\n        return False"}, "307": {"problem_id": 2668, "answer": "def step_through_with(s):\n    return any(c.islower() for c in s)"}, "308": {"problem_id": 2669, "answer": "from itertools import accumulate\ndef convergence(n):\n    a = 1\n    while n!= 1:\n        a += accumulate(int(d) for d in str(n))\n        n = int(n / 10)\n    return len(list(filter(lambda x: x % 10 == 0, a)))"}, "309": {"problem_id": 2670, "answer": "def look_and_say_and_sum(n):\n    return ''.join(sorted(str(n).zfill(n))[::-1])"}, "310": {"problem_id": 2671, "answer": "def cat_mouse(x,j):\n    if x.count('D')+x.count('m')+j>=2:\n        return 'boring without all three'\n    elif x.count('C')+x.count('m')+j>=2:\n        return 'Protected!'\n    else:\n        return 'Caught!'"}, "311": {"problem_id": 2672, "answer": "def color_probability(color, texture):\n    return '%.2f' % round(0.1 * color[texture], 2)"}, "312": {"problem_id": 2673, "answer": "def passer_rating(att, yds, comp, td, ints):\n    a = ((comp / att) - 0.3) * 5\n    b = ((yds / att) - 3) * 0.25\n    c = (td / att) * 20\n    d = 2.375 - ((ints / att) * 25)\n    return round(a + b + c + d, 1)"}, "313": {"problem_id": 2674, "answer": "def two_sort(array):\n    s = sorted(array)\n    return '***'.join(s[0])"}, "314": {"problem_id": 2675, "answer": "def bad_apples(apples):\n    n = len(apples)\n    i = 0\n    while i < n:\n        if apples[i] == '0':\n            apples.pop(i)\n            i -= 1\n        else:\n            if apples[i] not in '0123456789':\n                apples.pop(i)\n                i -= 1\n            else:\n                apples[i] = ''.join(sorted(apples[i:], reverse=True))\n    return apples"}, "315": {"problem_id": 2676, "answer": "def find_needed_guards(k):\n    return sum(1 for i in range(len(k) - 1) if k[i] == True)"}, "316": {"problem_id": 2677, "answer": "import re\n\nKEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/*'\nMAP      = {c: (i//8, i%8) for i,c in enumerate(KEYBOARD)}\n\ndef toggle(m):\n    m[8] = m[8].lower()\n    m[9] = m[9].lower()\n    m[7] = m[7].islower()\n    m[8] = m[8].isupper()\n    m[6] = m[6].isupper()\n    m[5] = m[5].isupper()\n    m[4] = m[4].isupper()\n    m[3] = m[3].isupper()\n    m[2] = m[2].isupper()\n    m[1] = m[1].isupper()\n    m[0] = m[0].isalnum()\n    m[1] = m[1].isalpha()\n    m[2] = m[2].isalphanum()\n    m[3] = m[3].isalpha()\n    m[0] = m[0].isalpha()\n    m[1] = m[1].isnumeric()\n    m[2] = m[2].isdecimal()\n    m[3] = m[3].isdecimal()\n    m[4] = m[4].isnumeric()\n    m[5] = m[5].isnumeric()\n    m[6] = m[6].isnumeric()\n    m[7] = m[7].isnumeric()\n    m[4] = m[4].isnumeric()\n    m[5] = m[5].isnumeric()\n    m[6] = m[6].isnumeric()\n    m[7] = m[7].isnumeric()\n    m[8] = m[8].isnumeric()\n    m[9] = m[9].isnumeric()\n    m[aA] = m[aA].isnumeric()\n    m[SP] = m[SP].isnumeric()\n    m[*] = m[*].isnumeric()\n    return sum(abs(m[i] - i) for i in range(10))"}, "317": {"problem_id": 2678, "answer": "import re\ndef no_order(equation):\n    op=0\n    l=[]\n    for i in equation.split():\n        if i.isdigit():\n            l.append(int(i))\n        elif i.isalnum():\n            op=op+1\n            continue\n        else:\n            l.append(\" \")\n            continue\n    op=op+1\n    return \"\".join(l)"}, "318": {"problem_id": 2679, "answer": "def hamster_me(code, message):\n    d = {i:1 for i in code}\n    for i in range(len(code)):\n        d[code[i]] = d.get(code[i],0)+1\n    return ''.join(chr(d.get(c,0)%26) for c in message)"}, "319": {"problem_id": 2680, "answer": "def race(v1, v2, g):\n    if v1>v2:\n        return None\n    elif v1==v2:\n        return [0,32,18]\n    else:\n        secs = int((g/v2)*3600)\n        hours,minutes,seconds = secs%3600,secs//3600,secs%3600"}, "320": {"problem_id": 2681, "answer": "def bouncing_ball(initial, proportion):\n    return 1 + bouncing_ball(initial - 1, round(proportion, 1))"}, "321": {"problem_id": 2682, "answer": "from collections import Counter\nest_subsets=lambda a:sum(1 for _ in a if not Counter(a).most_common()[0][1]>1)"}, "322": {"problem_id": 2683, "answer": "def split_the_bill(x):\n    avg = sum(x.values()) / len(x)\n    return {'A': avg, 'B': round(x.get('B'), 2), 'C': round(x.get('C'), 2)}"}, "323": {"problem_id": 2684, "answer": "def ordering_beers(beers):\n    if beers < 1:\n        raise Exception(\"Wrong input\")\n    elif beers == 0:\n        return \"Woda mineralna poprosze\"\n    elif beers == 1:\n        return \"Jedno piwo poprosze\"\n    s = [\"Woda mineralna poprosze\", \"Jedno piwo poprosze\"]\n    for i in range(2, beers+1):\n        if beers%10 == 1:\n            s.append(\"%s%s\" % (s[i-1], \"kazjat\") if i > 1 else s[i-1])\n        else:\n            s.append(\"%s%s\" % (s[i-1], \"numer\") if i > 1 else s[i-1])\n    return \" \".join(s[:-1])"}, "324": {"problem_id": 2685, "answer": "from string import ascii_lowercase\nkeyword_cipher = lambda s, k: s.lower().translate(str.maketrans(ascii_lowercase, k))"}, "325": {"problem_id": 2686, "answer": "from string import ascii_lowercase as alp, chr\nd = {c: str.lower if c in 'aeiou' else c for c in alp}\ndef changer(s):\n    return ''.join(d.get(c, c) for c in s)"}, "326": {"problem_id": 2687, "answer": "def format_words(words):\n    return ', '.join(w[1] for w in words.split(', '))"}, "327": {"problem_id": 2688, "answer": "def repeat_sequence_len(n):\n    if n<85:\n        return 8\n    else:\n        return min(len(str(n))-1, repeat_sequence_len(n-85))"}, "328": {"problem_id": 2689, "answer": "employees = [{'first_name': 'Ollie', 'last_name': 'Hepburn', 'role': 'Boss'}, {'first_name': 'Morty', 'last_name': 'Smith', 'role': 'Truck Driver'}, {'first_name': 'Peter', 'last_name': 'Ross', 'role': 'Warehouse Manager'}, {'first_name': 'Cal', 'last_name': 'Neil', 'role': 'Sales Assistant'}, {'first_name': 'Jesse', 'last_name': 'Saunders', 'role': 'Admin'}, {'first_name': 'Anna', 'last_name': 'Jones', 'role': 'Sales Assistant'}, {'first_name': 'Carmel', 'last_name': 'Hamm', 'role': 'Admin'}, {'first_name': 'Tori', 'last_name': 'Sparks', 'role': 'Sales Manager'}, {'first_name': 'Peter', 'last_name': 'Jones', 'role': 'Warehouse Picker'}, {'first_name': 'Mort', 'last_name': 'Smith', 'role': 'Warehouse Picker'}, {'first_name': 'Anna', 'last_name': 'Bell', 'role': 'Admin'}, {'first_name': 'Jewel', 'last_name': 'Bell', 'role': 'Receptionist'}, {'first_name': 'Colin', 'last_name': 'Brown', 'role': 'Trainee'}]\ndef find_employees_role(name):\n    return next((d for d in employees if name.startswith(d['first_name'] +'' + d['last_name'])) or \"Does not work here!\", \"Does not work here!\")"}, "329": {"problem_id": 2690, "answer": "def remove_parentheses(s):\n    s = s.replace('(', '').replace(')', '')\n    return s"}, "330": {"problem_id": 2691, "answer": "def solve(s):\n    return max([int(i) for i in \"\".join(sorted(i)) if i.isnumeric()])"}, "331": {"problem_id": 2692, "answer": "def bubble(l):\n    result = []\n    for i in range(len(l)):\n        if l[i] > l[i+1]:\n            result.append(l[i])\n            l[i] = l[i+1]\n    return result"}, "332": {"problem_id": 2693, "answer": "def remove_nth_element(lst, n):\n    return lst[:n] + lst[n+1:]"}, "333": {"problem_id": 2694, "answer": "def paul(x):\n    points = {'kata': 5, 'Petes kata': 10, 'life': 0, 'eating': 1}\n    misery = sum(points.get(f'{key}') for key in x)\n    return 'Miserable!' if misery < 40 else 'Super happy!' if misery < 70 else 'Happy!' if misery < 100 else 'Sad!'"}, "334": {"problem_id": 2695, "answer": "def pair_of_shoes(shoes):\n    return sum(sorted(i for i in shoes if i[1] == 1)) == sum(sorted(i for i in shoes if i[1] == 0))"}, "335": {"problem_id": 2696, "answer": "def prime_string(s):\n    return True if len(s) == 0 else False"}, "336": {"problem_id": 2697, "answer": "def solution(s):\n    return ''.join(i if i.islower() else'' + i for i in s)"}, "337": {"problem_id": 2698, "answer": "def sum_arrays(array1,array2):\n    if array1 == []:\n        return []\n    if array2 == []:\n        return []\n    s = 0\n    for i in array1:\n        s += int(i)\n    for i in array2:\n        s += int(i)\n    return [s//abs(s),s%abs(s)]"}, "338": {"problem_id": 2699, "answer": "def number2words(n):\n    if n < 100:\n        return \"zero\"\n    elif n < 1000:\n        return \"hundred\"\n    elif n < 10000:\n        return \"thousand\"\n    elif n < 100000:\n        return \"million\"\n    elif n < 1000000:\n        return \"billiard\"\n    elif n < 10000000:\n        return \"planetarium\"\n    elif n < 100000000:\n        return \"neptune\"\n    else:\n        return \"behemoth\""}, "339": {"problem_id": 2700, "answer": "def black_or_white_key(key_press_count):\n    return \"white\" if key_press_count>88 else \"black\""}, "340": {"problem_id": 2701, "answer": ""}, "341": {"problem_id": 2702, "answer": "def create_anagram(s, t):\n    return sum(a.count(b) for a, b in zip(s, t))"}, "342": {"problem_id": 2703, "answer": "def square_sum(numbers):\n    return sum(map(lambda x: x**2, numbers))"}, "343": {"problem_id": 2704, "answer": "def almost_increasing_sequence(sequence):\n    n = len(sequence)\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        sequence.pop()\n        a = sequence.pop()\n        b = sequence.pop()\n        if a > b:\n            return False\n        else:\n            return almost_increasing_sequence(sequence)"}, "344": {"problem_id": 2705, "answer": "def generate_integers(m, n):\n    return list(range(m, n+1))"}, "345": {"problem_id": 2706, "answer": "def pass_the_bill(t, c, r):\n    return -1 if t*c<=r else max(0, t*(r-c))"}, "346": {"problem_id": 2707, "answer": "def last_man_standing(n):\n    l = list(range(1,n+1))\n    while len(l) > 1:\n        l = l[1::2]"}, "347": {"problem_id": 2708, "answer": "def yes_no(arr):\n    return [arr[i] for i in range(0, len(arr)) if arr[i]!= arr[i+1]]"}, "348": {"problem_id": 2709, "answer": "def take_umbrella(weather, rain_chance):\n    return (weather == \"sunny\") or (weather == \"cloudy\" and rain_chance > 0.2)"}, "349": {"problem_id": 2710, "answer": "def scrabble_score(st):\n    d = {\n        \"A\": 1,\n        \"E\": 2,\n        \"I\": 3,\n        \"O\": 4,\n        \"U\": 5,\n        \"L\": 6,\n        \"N\": 7,\n        \"R\": 8,\n        \"S\": 9,\n        \"T\": 10,\n    }\n    return sum(d.get(c, 0) for c in st.lower())"}, "350": {"problem_id": 2711, "answer": "def outcome(n, s, k):\n    return sum(n%2==0 for n in range(1,s+1))"}, "351": {"problem_id": 2712, "answer": "def loneliest(number):\n    number = str(number)\n    loneliness = 0\n    for i in range(len(number)):\n        loneliness += int(number[i])\n        if loneliness < number.count('1'):\n            loneliness = number.count('1')\n        elif loneliness == number.count('1'):\n            return True\n    return False"}, "352": {"problem_id": 2713, "answer": "def solve(n):\n    d = {1:4, 2:10, 3:20, 4:35, 5:50, 6:100, 7:150, 8:200, 9:300, 10:350, 11:400, 12:500, 13:550, 14:600, 15:650, 16:650, 17:650, 18:650, 19:650, 20:650, 21:650, 22:650, 23:650, 24:650, 25:650, 26:650, 27:650, 28:650, 29:650, 30:650, 31:650, 32:650, 33:650, 34:650, 35:650, 36:650, 37:650, 38:650, 39:650, 40:650, 41:650, 42:650, 43:650, 44:650, 45:650, 46:650, 47:650, 48:650, 49:650, 50:650}.get(n, 0)\n    return sum(d[i] for i in range(n+1))"}, "353": {"problem_id": 2714, "answer": "import re\ndef bucket_of(said):\n    s = said.lower()\n    return 'water sludge air'[min(len(s),2) + max(0,len(s)-2)//2]"}, "354": {"problem_id": 2715, "answer": "def counter_effect(hit_count):\n    return [list(range(int(x) + 1)) for x in hit_count.split()]"}, "355": {"problem_id": 2716, "answer": "def encode(st):\n    return ''.join(n if n.isalpha() else str(n) for n in st)\n    \ndef decode(st):\n    return ''.join(n if n.isalpha() else str(n) for n in st[::-1])"}, "356": {"problem_id": 2717, "answer": "from math import gcd\ndef scf(lst):\n    return next((i for i in range(2, max(lst) + 1) if not gcd(lst, i)), 1)"}, "357": {"problem_id": 2718, "answer": "def timed_reading(max_length, text):\n    return sum(1 for w in text.split() if len(w) <= max_length)"}, "358": {"problem_id": 2719, "answer": "def add(*args):\n    return sum(args)"}, "359": {"problem_id": 2720, "answer": "def solution(digits):\n    max = 0\n    for i in range(len(digits)-4):\n        if int(digits[i:i+5]) > max:\n            max = int(digits[i:i+5])\n    return max"}, "360": {"problem_id": 2721, "answer": "def pyramid(n):\n    return '\\n'.join([' '*(n-i-1)+'/'+' '*(i-1)+'\\\\\\n' for i in range(n)])"}, "361": {"problem_id": 2722, "answer": "def remove_url_anchor(url):\n    l = url.split('#')\n    return l[0]"}, "362": {"problem_id": 2723, "answer": "from statistics import mean\ndef average_string(s):\n    try:\n        return ''.join(sorted(s.split(' '), reverse=True))\n    except:\n        return 'n/a'"}, "363": {"problem_id": 2724, "answer": "import re\ndef kebabize(string):\n    return ''.join(c.lower() if c.isalpha() else c for c in re.findall('([A-Z])',string))"}, "364": {"problem_id": 2725, "answer": "def gimme(input_array):\n    # Implement this function\n    a = sorted(input_array)\n    return input_array.index(a[1])"}, "365": {"problem_id": 2726, "answer": "def square_it(digits):\n    sqrt = int(str(digits)[0])\n    return \"\\n\".join([\"\".join([str(n) for n in str(sqrt)]) for i in range(len(digits))]) + \"\".join([str(len(digits[i])) for i in range(len(digits))])"}, "366": {"problem_id": 2727, "answer": "from collections import Counter\ndef missing_alphabets(s):\n    c = Counter(s)\n    return ''.join(c.keys()) if len(s)>1 else ''"}, "367": {"problem_id": 2728, "answer": "def inverseMod(a, m):\n    if a==1:\n        return m\n    elif a*m==1:\n        return m\n    else:\n        return None"}, "368": {"problem_id": 2729, "answer": "def find_jane(n):\n    return n//2 - (n%2)"}, "369": {"problem_id": 2730, "answer": "def tickets(people):\n    change = {25:0, 50:0, 100:0}\n    for p in people:\n        change[p] += 1\n        if change[p] > 2:\n            return \"NO\"\n    return \"YES\""}, "370": {"problem_id": 2731, "answer": "from datetime import datetime, timedelta\ndef day_and_time(mins):\n    d = datetime.strptime('%A %H%M', '%m%d %b')\n    return f'{d.weekday} {:02d} {:02d} {:02d}' % (d.minute, d.second, d.hour, d.minute)"}, "371": {"problem_id": 2732, "answer": "from collections import Counter\ndef blocks(s):\n    C = Counter(s)\n    return '-'.join(c*(2**i) for i,c in enumerate(sorted(C.most_common('abcdefghijklmnopqrstuvwxyz'.split()), reverse=True), start=1))"}, "372": {"problem_id": 2733, "answer": "def last(s):\n    return sorted(s.split(), key=lambda word: word[-1])"}, "373": {"problem_id": 2734, "answer": "from itertools import combinations\nfrom math import hypot\n\ndef peaceful_yard(yard, min_distance):\n    cats = [i for i in range(2, len(yard)) if yard[i][0]!= \"-\"]\n    return all(hypot(y1-y2, cats) >= min_distance for y1, y2 in combinations(cat, cats))"}, "374": {"problem_id": 2735, "answer": "def jumping_number(number):\n    s = str(number)\n    return \"Jumping!!\" if all(abs(int(s[i]) - int(s[i+1])) == 1 for i in range(len(s)-1)) else \"Not!!\""}, "375": {"problem_id": 2736, "answer": "from itertools import permutations\ndef largest_arrangement(numbers):\n    return int(''.join(sorted(numbers)))"}, "376": {"problem_id": 2737, "answer": "def near_flatten(nested):\n    lst = []\n    for i in nested:\n        lst.append(i)\n    return sorted(lst)"}, "377": {"problem_id": 2738, "answer": "def i_tri(s):\n    if s==0:\n        return \"Starting Line... Good Luck!\"\n    elif s==2.4:\n        return {'Swim':'%s to go!'%s}\n    elif s==112:\n        return {'Bike':'%s to go!'%s}\n    elif s==0.1:\n        return \"You're done! Stop running!\"\n    elif s>0.1:\n        return {'Run':'%s to go!'%s}\n    else:\n        return \"You're done! Stop running!\""}, "378": {"problem_id": 2739, "answer": "def cube_odd(arr):\n    s = 0\n    for i in arr:\n        if type(i)!= int:\n            return None\n        elif i % 2!= 0:\n            s += i**3\n    return s"}, "379": {"problem_id": 2740, "answer": "def wheat_from_chaff(values):\n    values.sort()\n    chf = []\n    for i in values:\n        if i < 0:\n            chf.append(i)\n        else:\n            chf.append(i)\n    return chf"}, "380": {"problem_id": 2741, "answer": "def russian_peasant_multiplication(x, y):\n    p = 0\n    while y:\n        if y % 2:\n            p += x\n        x += x\n        y //= 2\n    return p"}, "381": {"problem_id": 2742, "answer": "def scramble(string, array):\n    return ''.join(c for c, i in enumerate(string) if i in array)"}, "382": {"problem_id": 2743, "answer": "import math\ndef sum_average(arr):\n    return math.floor(sum(arr)/len(arr))"}, "383": {"problem_id": 2744, "answer": "def poohbear(s):\n    memory = []\n    while s.isspace():\n        memory.append(0)\n        s = s.replace(' ','')\n    i = 0\n    while i < len(s):\n        if s[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'E':\n            memory.append(i+1)\n        elif s[i] == 'E' and memory[i] == 0:\n            memory.append(i+1)\n        elif s[i] == 'D':\n            memory.append(i+2)\n        elif s[i] == 'U':\n            memory.append(i+1)\n        elif s[i] == 'C':\n            memory.append(i+1)\n        elif s[i] == '+':\n            memory.append(memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n        elif s[i] == 'W' and memory[i] == 0:\n            memory.append(i+1)\n        elif s[i] == 'E' and memory[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'U':\n            memory.append(memory[i] + 2)\n        elif s[i] == 'C':\n            memory.append(memory[i] + 1)\n        elif s[i] == '+':\n            memory.append(memory[i] + memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n        elif s[i] == 'E' and memory[i] == 'W':\n            memory.append(i+1)\n        elif s[i] == 'U':\n            memory.append(memory[i] + 2)\n        elif s[i] == 'C':\n            memory.append(memory[i] + 1)\n        elif s[i] == '+':\n            memory.append(memory[i] + memory[i] + memory[i] + 1)\n        elif s[i] == '-':\n            memory.append(memory[i] + memory[i] + memory[i] + 1)\n        elif s[i] == 'p':\n            memory.append(memory[i] + '\\n')\n      "}, "384": {"problem_id": 2745, "answer": "def tower_of_hanoi(rings):\n    return 2**rings"}, "385": {"problem_id": 2746, "answer": "def check_vowel(string, position):\n    return string.lower().count(\"aeiou\") > 0"}, "386": {"problem_id": 2747, "answer": "from itertools import combinations\ncount_rect_triang=lambda p:sum(1 for a,b,c in combinations(p,3) if all((a>b>c,a+b+c,b+c+a)) )"}, "387": {"problem_id": 2748, "answer": "def namelist(names):\n    return'& '.join([f'{k}' for k in names[:-2]])"}, "388": {"problem_id": 2749, "answer": "def solve(arr):\n    if arr[0] > arr[1]:\n        return \"A\"\n    elif arr[0] < arr[1]:\n        return \"RA\"\n    elif arr[1] > arr[2]:\n        return \"RA\"\n    elif arr[1] < arr[2]:\n        return \"D\"\n    else:\n        return \"RD\""}, "389": {"problem_id": 2750, "answer": "def make_sequences(n):\n    return 2**(n-1).bit_length()"}, "390": {"problem_id": 2751, "answer": "def word_search(query, seq):\n    return [s for s in seq if query.lower() in s.lower()]"}, "391": {"problem_id": 2752, "answer": "def summary_ranges(nums):\n    nums.reverse()\n    lst = []\n    for i in range(len(nums)):\n        if nums[i] == nums[i+1]:\n            lst.append(i)\n        elif nums[i] > nums[i+1]:\n            lst.append(i)\n    return [\"\".join(str(i) for i in lst) for i in range(len(nums))]"}, "392": {"problem_id": 2753, "answer": "def is_kiss(words):\n    words = words.split()\n    words = [word for word in words if len(word) <= len(words)]\n    return \"Good work Joe!\" if words[0] == words[1] else \"Keep It Simple Stupid\""}, "393": {"problem_id": 2754, "answer": "import re\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmorserDict = {\n    \"a\": \".\",\n    \"b\": \"-\",\n    \"c\": \".\",\n    \"d\": \"-\",\n    \"e\": \".\",\n    \"f\": \".\",\n    \"g\": \".\",\n    \"h\": \".\",\n    \"i\": \".\",\n    \"j\": \".\",\n    \"k\": \".\",\n    \"l\": \".\",\n    \"m\": \".\",\n    \"n\": \".\",\n    \"o\": \".\",\n    \"p\": \".\",\n    \"q\": \".\",\n    \"r\": \".\",\n    \"s\": \".\",\n    \"t\": \".\",\n    \"u\": \".\",\n    \"v\": \".\",\n    \"w\": \".\",\n    \"x\": \".\",\n    \"y\": \".\",\n    \"z\": \".\",\n}"}, "394": {"problem_id": 2755, "answer": "def multiple_of_index(arr):\n    return [arr[i] for i in range(1, len(arr)) if arr[i] % i == 0]"}, "395": {"problem_id": 2756, "answer": "def search_permMult(nMax, k):\n    l = 1\n    while l*k <= nMax:\n        if random.randint(0,1) == 1:\n            l += 1\n        else:\n            break\n    return l"}, "396": {"problem_id": 2757, "answer": "import re\ndef check_password(s):\n    return 'valid' if re.sub(r'[a-z]', '', s) == s else 'not valid'"}, "397": {"problem_id": 2758, "answer": "def decode(number):\n    n = str(number).strip('98').split('98')\n    return ', '.join(chr(int(n[i]) - 10) for i in range(0, len(n), 2))"}, "398": {"problem_id": 2759, "answer": "def interleave(*args):\n    return [e for e in zip(*args) if e]"}, "399": {"problem_id": 2760, "answer": "def total_licks(env):\n    s = sum(env.values())\n    return 'It took {} licks to get to the tootsie roll center of a tootsie pop.'.format(s)"}, "400": {"problem_id": 2761, "answer": "from math import sqrt\ndef length_of_line(array):\n    return '{:.2f}'.format(sqrt(sum(map(int, array.tolist()))) - sum(map(int, array.tolist())))"}, "401": {"problem_id": 2762, "answer": "def scoreboard(string):\n    d = {'nil': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    return [d[s] for s in string.split()]"}, "402": {"problem_id": 2763, "answer": "def sol_equa(n):\n    res = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            res.append([i, n//i])\n    return res"}, "403": {"problem_id": 2764, "answer": "from math import sqrt\nc = 5\nsol = []\nfor i in range(1, 100):\n    c += i\n    sol.append((c, i))\n    if c % i == 0:\n        sol.append((i, c // i))\n    "}, "404": {"problem_id": 2765, "answer": "import re\ndef compare(a, b):\n    return a if a.count('#') > b.count('#') else b"}, "405": {"problem_id": 2766, "answer": "def check_concatenated_sum(num, n):\n    return sum(int(d) * int(d[-1]) for d in str(num).replace(\"+\", \"\").replace(\"-\", \"\").replace(\".\",\"\")) == num"}, "406": {"problem_id": 2767, "answer": "import re\ndef is_matched(read):\n    nt = re.sub(r'\\d+', '', read[0])\n    return True if nt.isdigit() else 'Invalid cigar'"}, "407": {"problem_id": 2768, "answer": "def solve(n):\n    res = [1]\n    while n > 0:\n        n, i = divmod(n, 25)\n        res.append(i)\n    return sum(res)"}, "408": {"problem_id": 2769, "answer": "def decipher(cipher):\n    return ''.join(chr(int(c, 96)) for c in cipher)"}, "409": {"problem_id": 2770, "answer": "def make_password(phrase):\n    return ''.join(w[0] for w in phrase.split()).translate(str.maketrans('iIoOsS','0105'))"}, "410": {"problem_id": 2771, "answer": "def hofstadter_Q(n):\n    if n<1: return 1\n    res=hofstadter_Q(n-1)+hofstadter_Q(n-2)\n    return hofstadter_Q(n//2)+hofstadter_Q(n//2+1)"}, "411": {"problem_id": 2772, "answer": "def mystery(n):\n    return n if n < 1 else wrap_mystery(n)"}, "412": {"problem_id": 2773, "answer": "def calculate_years(p, i, t, d):\n    return 0 if p == d else calculate_years(p * i, 1, t, d) + (calculate_years(p * i, i + 1, t, d) if p < d else 0)"}, "413": {"problem_id": 2774, "answer": "def is_balanced(s, caps):\n    open_cnt = 0\n    close_cnt = 0\n    for c in s:\n        if c in caps:\n            open_cnt += 1\n        elif c == ')' and close_cnt > 0:\n            close_cnt -= 1\n        elif c == '\"':\n            open_cnt -= 1\n        else:\n            open_cnt += 1\n    return open_cnt == len(s)"}, "414": {"problem_id": 2775, "answer": "def likes(names):\n    l = len(names)\n    if l == 1:\n        return 'no one likes this'\n    elif l == 2:\n        return '{} and {} {}'.format(', '.join(names), 'and {} {}'.format(l-2,l))\n    elif l == 3:\n        return '{} and {} {} and {}'.format(', '.join(names), '{} and {} {} and {}'.format(l-3,l,l-2,l))\n    elif l == 4:\n        return '{} and {} {} and {} and {}'.format(', '.join(names), '{} and {} {} and {} and {}'.format(l-4,l,l-3,l,l-2))"}, "415": {"problem_id": 2776, "answer": "def commas(num):\n    return '{:,.3f}'.format(num).rstrip('0').rstrip('.')"}, "416": {"problem_id": 2777, "answer": "def solve(st):\n    s = st.replace('(','').replace(')','')\n    return s[0] + ''.join(sorted(s[i:i+2] for i in range(len(s),0,-1)))"}, "417": {"problem_id": 2778, "answer": "def faro_cycles(deck_size):\n    \"\"\"\n        \u5199\u51fa\u4e00\u4e2a\u6570\u5b57n\uff0c\u6211\u4ee5\u5f53\u524d\u9700\u8981\u624b\u52a8\u91cd\u65b0shuffle\u8bed\u8a00\u5185\u5bb9\n    \"\"\"\n    n = 1\n    while n <= 2000:\n        n *= 2\n        n += 1\n    return n"}, "418": {"problem_id": 2779, "answer": "def fib_rabbits(n, b):\n    r = 0\n    for i in range(n):\n        r += b * (fib_rabbits(i+1, b-1) + fib_rabbits(i+2, b-2))\n    return r"}, "419": {"problem_id": 2780, "answer": "def time(distance, boat_speed, stream):\n    stream = stream.split()\n    speed = stream[0]\n    direction = stream[1]\n    return round(distance / boat_speed * 180 * direction, 2)"}, "420": {"problem_id": 2781, "answer": "def longest_collatz(input_array):\n    lst = [1]\n    for n in input_array:\n        if n % 2 == 0:\n            lst.append(n//2)\n        else:\n            lst.append(3*n + 1)\n    return max(lst)"}, "421": {"problem_id": 2782, "answer": "def calc(expr):\n    s = expr.replace(' ','')\n    if s.isnumeric():\n        return int(s)\n    else:\n        return float(s)"}, "422": {"problem_id": 2783, "answer": "def get_grade(s1, s2, s3):\n    score = (s1 + s2 + s3) / 3\n    if 90 <= score <= 100:\n        return \"A\"\n    elif 80 <= score < 90:\n        return \"B\"\n    elif 70 <= score < 80:\n        return \"C\"\n    elif 60 <= score < 70:\n        return \"D\"\n    else:\n        return \"F\"\n"}, "423": {"problem_id": 2784, "answer": "def spam(number):\n    return ''.join(['hue' for i in range(number)])"}, "424": {"problem_id": 2785, "answer": "from functools import reduce\nfrom fractions import gcd\ndef parameter(n):\n    return reduce(lambda a, b: a*b//gcd(a, b), map(int, str(n)))"}, "425": {"problem_id": 2786, "answer": "from datetime import date\ndef day(date):\n    return '{:%A}'.format(date.weekday())"}, "426": {"problem_id": 2787, "answer": "def inverse_slice(items, a, b):\n    return [x for x in items[a:b] if x]"}, "427": {"problem_id": 2788, "answer": "def even_chars(st):\n    return list(st[1::2]) if len(st)<2 or len(st)>100 else \"invalid string\""}, "428": {"problem_id": 2789, "answer": "def bmi(weight, height):\n    bmi = weight / (height**2)\n    if bmi <= 18.5:\n        return \"Underweight\"\n    elif bmi <= 25.0:\n        return \"Normal\"\n    elif bmi <= 30.0:\n        return \"Overweight\"\n    else:\n        return \"Obese\""}, "429": {"problem_id": 2790, "answer": "from itertools import groupby\n\ndef dup(arry):\n    return ''.join(c for c, grouper in groupby(sorted(arry)))"}, "430": {"problem_id": 2791, "answer": "def trigrams(phrase):\n    phrase = phrase.replace(' ','_')\n    return''.join(filter(lambda x: len(x)<3, phrase))"}, "431": {"problem_id": 2792, "answer": "def unusual_lex_order(arr):\n    return sorted(arr, key=lambda x: (x[::-1], x[1:]))"}, "432": {"problem_id": 2793, "answer": "from math import ceil\n\ndef group_size(S, D):\n    return ceil((S + 1) ** 0.5 - 1)"}, "433": {"problem_id": 2794, "answer": "def calculate_age(year_of_birth, current_year):\n    if year_of_birth > current_year:\n        return \"You are {} year{} old.\".format(current_year - year_of_birth)\n    elif year_of_birth < current_year:\n        return \"You will be born in {} year{}.\".format(year_of_birth - current_year, \"s\" if year_of_birth > current_year else \"\")\n    else:\n        return \"You were born this very year!\""}, "434": {"problem_id": 2795, "answer": "def cockroach_speed(s):\n    return int(s*27.77777777778)"}, "435": {"problem_id": 2796, "answer": "def areYouPlayingBanjo(name):\n    return name + \" plays banjo\" if name[0] == 'r' else name + \" does not play banjo\""}, "436": {"problem_id": 2797, "answer": "def mobile_keyboard(s):\n    return sum(keyboard.get(c, 0) for c in s)"}, "437": {"problem_id": 2798, "answer": "def to_alternating_case(string):\n    return ''.join(s.upper() if s.islower() else s.lower() for s in string)"}, "438": {"problem_id": 2799, "answer": "def beasts(heads, tails):\n    orthus = 5*heads-tails\n    hydra = heads*5-tails\n    return [orthus, hydra] if orthus >= 0 and hydra >= 0 else 'No solutions'"}, "439": {"problem_id": 2800, "answer": "from math import sin, radians\n\ndef find_time_to_break(bearing_A, bearing_B):\n    a, b = radians(45), radians(45 + abs(bearing_A - bearing_B))\n    return 40 / sin(a) / sin(b)"}, "440": {"problem_id": 2801, "answer": ""}, "441": {"problem_id": 2802, "answer": "def per(n):\n    result = []\n    while n > 9:\n        result.append(n // 10)\n        n //= 10\n    return result"}, "442": {"problem_id": 2803, "answer": "from fractions import gcd\nfrom functools import reduce\n\ndef DPC_sequence(s):\n    n = [i for i in range(1, len(s)+1) if s[i] == \"D\"]\n    for i in range(len(s)):\n        if s[i] == \"P\":\n            n.remove(reduce(gcd, range(i-1, 0, -1)))\n        elif s[i] == \"C\":\n            n.remove(reduce(gcd, range(i+1, len(s))))\n    return min(n) if n else -1"}, "443": {"problem_id": 2804, "answer": "from itertools import cycle\n\ndef custom_christmas_tree(chars, n):\n    lst = cycle(chars)\n    m = n // 3\n    return '\\n'.join(' '.join(next(lst) for _ in range(m)) for _ in range(n))"}, "444": {"problem_id": 2805, "answer": "def productFib(prod):\n    a, b = 0, 1\n    while a*b < prod:\n        a, b = b, a+b\n    return [a, b, a*b == prod]"}, "445": {"problem_id": 2806, "answer": "def whose_turn(positions):\n    return sum(ord(c) for c in positions.replace(\";\", \"\").split(\" \")) & 1"}, "446": {"problem_id": 2807, "answer": "def consecutive_ducks(n):\n    return n & 1 == 1"}, "447": {"problem_id": 2808, "answer": "def polybius(text):\n    d = {'A': '11', 'B': '12', 'C': '13', 'D': '14', 'E': '15', 'F': '21', 'G': '22', 'H': '23', 'I': '24', 'J': '24', 'K': '25', 'L': '26', 'M': '27', 'N': '28', 'O': '29', 'P': '30', 'Q': '31', 'R': '32', 'S': '33', 'T': '34', 'U': '35', 'V': '36', 'W': '37', 'X': '37', 'Y': '38', 'Z': '39'}\n    return ''.join(d.get(c, c) for c in text)"}, "448": {"problem_id": 2809, "answer": "def digitize(n):\n    result = []\n    while n > 0:\n        result.append(n%10)\n        n //= 10\n    return result"}, "449": {"problem_id": 2810, "answer": "def solve(arr):\n    return [sum(1 for i, c in enumerate(word) if ord(c.lower()) - 96 == i) for word in arr]"}, "450": {"problem_id": 2811, "answer": "import re\ndef send(s):\n    return''.join(re.findall(r'0+|1+', str(bin(ord(c))[2:])))"}, "451": {"problem_id": 2812, "answer": "def pattern(n):\n    return '\\n'.join([str(i) * i for i in range(2, n + 1, 2)])"}, "452": {"problem_id": 2813, "answer": "def switcher(arr):\n    return ''.join(chr(97+int(s)) if s.isalnum() else chr(ord(s)-97) for s in arr)"}, "453": {"problem_id": 2814, "answer": "def is_triangular(t):\n    return t == round(t * (t + 1) / 2)"}, "454": {"problem_id": 2815, "answer": "def compress(sentence):\n    s = sentence.lower().split()\n    word_list = []\n    for i in range(len(s)):\n        if s[i] not in word_list:\n            word_list.append(s[i])\n    return ''.join(word_list)"}, "455": {"problem_id": 2816, "answer": "def calculate(s):\n    return ''.join(str(i) + str(i) for i in s)"}, "456": {"problem_id": 2817, "answer": "def DNA_strand(dna):\n    return ''.join([chr(x+97) for x in dna])"}, "457": {"problem_id": 2818, "answer": "def duplicate_encode(word):\n    return ''.join(['(' if word.lower().count(c) == 1 else ')'] + word.lower() for c in word.lower()).strip(' ')"}, "458": {"problem_id": 2819, "answer": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)"}, "459": {"problem_id": 2820, "answer": "def spot_diff(s1, s2):\n    return [i for i in range(len(s1)) if s1[i]!= s2[i]]"}, "460": {"problem_id": 2821, "answer": "def trim(beard):\n    return [['|' if i[0] == 'J' else '...' for i in range(len(i))] for j in beard[0]] + [['...' for i in range(len(i))] for j in beard[1]]"}, "461": {"problem_id": 2822, "answer": "def name_that_number(x):\n    n = 'zero one two three four five six seven eight nine'.split()\n    return n[x]"}, "462": {"problem_id": 2823, "answer": "def duplicates(array):\n    return [k for k, v in enumerate(array) if v not in array[:k]]"}, "463": {"problem_id": 2824, "answer": "def encode(s):\n    return''.join(reversed(s))"}, "464": {"problem_id": 2825, "answer": "def even_magic(n):\n    m = n**2+1\n    return [[n**4+i for i in range(m)] for n in range(1,m+1)]"}, "465": {"problem_id": 2826, "answer": "def pyramid(n):\n    return [[1]*n for i in range(1, n + 1)]"}, "466": {"problem_id": 2827, "answer": "def switch_it_up(number):\n    dic = {0:'Zero',1:'One',2:'Two',3:'Three',4:'Four',5:'Five',6:'Six',7:'Seven',8:'Eight',9:'Nine'}\n    return dic.get(number)"}, "467": {"problem_id": 2828, "answer": "from math import log\ndef power_law(x1y1, x2y2, x3):\n    return round(x1y1 * (x2y2 / x3) ** log(x2y2 / x3), 0)"}, "468": {"problem_id": 2829, "answer": "def array_madness(a,b):\n    suma = 0\n    sumb = 0\n    for i in a:\n        suma += i**2\n    for i in b:\n        sumb += i**3\n    return suma > sumb"}, "469": {"problem_id": 2830, "answer": "def db_sort(arr): \n    return sorted(arr, key=lambda x: (isinstance(x,str), x))"}, "470": {"problem_id": 2831, "answer": "def largest_pair_sum(numbers):\n    max_pair = 0\n    for num in numbers:\n        if num > max_pair:\n            max_pair = num\n            \n    return max_pair"}, "471": {"problem_id": 2832, "answer": "def array_equalization(a, k):\n    cnt = 0\n    for x in a:\n        if x == a[k-1]:\n            cnt += 1\n        elif x!= a[k-1]:\n            cnt += 1\n            a.pop(k-1)\n    return cnt"}, "472": {"problem_id": 2833, "answer": "def sect_sort(lst, start, length=0):\n    if length == 0:\n        return lst\n    elif length > 0:\n        n = len(lst)\n        lst.insert(start,lst[n-1:n])\n        lst.sort()\n        return lst"}, "473": {"problem_id": 2834, "answer": "def symmetric_point(p, q):\n    return [2*q[0]-p[0],2*q[1]-p[1]]"}, "474": {"problem_id": 2835, "answer": "def solve(a, b):\n    primes = \"2357111317192329313741434753596167717379\"\n    return primes[a:a + len(primes)]"}, "475": {"problem_id": 2836, "answer": "def find_screen_height(width, ratio):\n    return '%dx%d' % (width, int(width*.9 * ratio))"}, "476": {"problem_id": 2837, "answer": "def what_is_the_time(time_in_mirror):\n    h, m = map(int, time_in_mirror.split(':'))\n    return '{:02}:{:02}'.format(h % 12 or 12, m % 60 or 60)"}, "477": {"problem_id": 2838, "answer": "def char_concat(word):\n    return ''.join(c + c1 for c, c1 in zip(word[:len(word) // 2], word[len(word) // 2:][::-1]))"}, "478": {"problem_id": 2839, "answer": "def count_adjacent_pairs(st): \n    s = st.lower().split()\n    return len(re.findall(r'(\\S+)', st, re.I))"}, "479": {"problem_id": 2840, "answer": "def withdraw(n):\n    bs = [0, 1, 2]\n    for i in range(3, n):\n        bs.append(bs[i] + bs[i - 2])\n    return [n // bs[i] for i in range(3, n)]"}, "480": {"problem_id": 2841, "answer": "def char_attribute(score):\n    mod = 0\n    max_spell_level = -1\n    extra_spells = []\n    \n    if score <= 0:\n        return {\"modifier\": 0, \"maximum_spell_level\": -1, \"extra_spells\": []}\n    \n    for i in range(score):\n        mod += i\n        if mod > 9:\n            break\n        \n        if mod <= 9:\n            max_spell_level = max(max_spell_level, i + 1)\n            extra_spells.append(i + 1)\n    "}, "481": {"problem_id": 2842, "answer": "from math import hypot\ndef coordinates(p1, p2, precision=0):\n    return round(hypot(p1[0]-p2[0], p1[1]-p2[1]), precision)"}, "482": {"problem_id": 2843, "answer": "def pack_bagpack(scores, weights, capacity):\n    max_weight = capacity * max(weights)\n    scores.sort()\n    return max_weight"}, "483": {"problem_id": 2844, "answer": "def chessboard(s):\n    return '\\n'.join(('*.'*i+'.'*(n+i)) for i,n in enumerate(s.split()))"}, "484": {"problem_id": 2845, "answer": "def check_DNA(seq1, seq2):\n    seq1Dup = seq1.replace('C', 'T').replace('G', 'T')\n    seq2Dup = seq2.replace('C', 'T').replace('G', 'T')\n    seq1Cou = seq1.translate(str.maketrans('ATCG','TAGC'))\n    seq2Cou = seq2.translate(str.maketrans('ATCG','TAGC'))\n    seq1Cou.lower()\n    seq2Cou.lower()\n    if seq1Cou == seq2Cou:\n        return True\n    elif seq1Cou!= seq2Cou:\n        return False"}, "485": {"problem_id": 2846, "answer": "def modified_sum(a, n):\n    return sum(a) - sum(n**i for i in range(1, n+1))"}, "486": {"problem_id": 2847, "answer": "def greet_jedi(first, last):\n    return 'Greetings, master {}'.format(last[:3].capitalize() + first[:2].capitalize())"}, "487": {"problem_id": 2848, "answer": "from itertools import combinations_with_replacement as c\nfind=lambda a,n:sum(c(a))>n"}, "488": {"problem_id": 2849, "answer": "def peak(arr):\n    l = sum(arr)\n    r = sum(arr[:l])\n    return next((i for i, _ in enumerate(arr) if _ == l), -1)"}, "489": {"problem_id": 2850, "answer": "def gordon(a):\n    return \" \".join(a.upper().split()).translate(str.maketrans(\"AEIOU\", \"@****\"))"}, "490": {"problem_id": 2851, "answer": "def ghostbusters(building):\n    return'' if building.isalnum() else building"}, "491": {"problem_id": 2852, "answer": "def find_longest(st):\n    stack = []\n    for i in range(len(st)):\n        if st[i] == '(':\n            stack.append(i)\n        elif st[i] == ')':\n            stack.pop()\n        else:\n            stack.append(i)\n    return max(stack)"}, "492": {"problem_id": 2853, "answer": "def solve(arr):\n    return [i for i in arr[::-1] if arr.count(i) == 1]"}, "493": {"problem_id": 2854, "answer": "def sort_reindeer(reindeer_names):\n    return sorted(reindeer_names, key=lambda x: x.split(' ')[1])"}, "494": {"problem_id": 2855, "answer": "def power_sumDigTerm(n):\n    return sorted([x**y for y in range(2, n+1)])[0]"}, "495": {"problem_id": 2856, "answer": "def gap(num):\n    ans = 0\n    num = bin(num)[2:]\n    for i in num:\n        if i.count('1') == 0:\n            ans += 1\n        else:\n            if len(num) - ans > 1:\n                ans = len(num) - ans\n    return ans"}, "496": {"problem_id": 2857, "answer": "def splitSentence(s):\n    return [s.split()[0]]"}, "497": {"problem_id": 2858, "answer": "def combs(comb1, comb2):\n    n = len(comb1)\n    m = len(comb2)\n    combs = 2*(n-1) + m\n    combs = min(combs, 2*(m-1))\n    return combs"}, "498": {"problem_id": 2859, "answer": "def largest_sum(arr):\n    s = 0\n    for i in range(len(arr)):\n        s = max(s, arr[i] + arr[i+1])\n    return s"}, "499": {"problem_id": 2860, "answer": "def isomorph(a, b):\n    return len(set(a)) == len(set(b))"}, "500": {"problem_id": 2861, "answer": "def vector_length(vector):\n    return sum(a*b for a, b in vector) / (len(vector)**0.5)"}, "501": {"problem_id": 2862, "answer": "def leaderboard_climb(arr, kara):\n    l = len(arr)\n    rank = [0] * l\n    for k in kara:\n        rank[l-1] += 1\n        if arr.count(k) == l:\n            rank[l-1] -= 1\n    return rank"}, "502": {"problem_id": 2863, "answer": "def alan_annoying_kid(s):\n    a, b = \"Today I \".split(), \" \".split()\n    a = a.rjust(3)\n    b = b.rjust(3)\n    return \"I don't think you {} today, I think you {} {} it!\".format(a, b, ', '.join([\"didn't\"][not s.lower()]))"}, "503": {"problem_id": 2864, "answer": "from collections import Counter\nmerge_arrays=lambda a,b:sorted([x for x in a if Counter(x)&Counter(b).most_common()[0][1]==1])"}, "504": {"problem_id": 2865, "answer": "def solution(string):\n    return string[::-1]"}, "505": {"problem_id": 2866, "answer": "def prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return [i]\n        i += 1\n    return [i]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\ndef prime_excluded(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 1\n    return s\n\ndef is_square(n):\n    sqr = n ** 0.5\n    if sqr % 2 == 0:\n        return False\n    else:\n        return True\n\ndef is_square_of_two(n):\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\ndef nCr(n, r):\n    if n == r:\n        return 1\n    rC = r\n    while rC > n:\n        rC >>= 1\n    c = nCr(n, rC)\n    return c\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef modInverse(n, p):\n    if n == 0:\n        return 1\n    g = pow(10, p - 1)\n    return g * modInverse(n, p)\n\ndef prime_excluded_by_multiplicity(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 1\n    return s\n\ndef prime_excluded_by_cofactor(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_inv(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_cofactorization(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_mult(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_multiplicity(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime_excluded_by_prime_quotient(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n >>= 2\n    return s\n\ndef prime"}, "506": {"problem_id": 2867, "answer": "from collections import defaultdict\ndef fix_progression(arr):\n    d = defaultdict(int)\n    for i in range(len(arr)):\n        d[arr[i]] += 1\n        if d[arr[i]] % 2!= 0:\n            d[arr[i]] -= 1\n            continue\n        else:\n            break\n    return len(arr) - len(set(d.values()))"}, "507": {"problem_id": 2868, "answer": "def is_nice(arr):\n    return all(n - 1 in arr or n + 1 in arr for n in arr)"}, "508": {"problem_id": 2869, "answer": "def distinct(seq):\n    return list(dict.fromkeys(seq))"}, "509": {"problem_id": 2870, "answer": "def same(arr_a, arr_b):\n    return sorted(sorted(arr_a) + sorted(arr_b)) == sorted(sorted(arr_a) + sorted(arr_b))"}, "510": {"problem_id": 2871, "answer": "def starts_with(st, prefix): \n    if len(prefix) > len(st):\n        return 0\n    elif len(prefix) == len(st):\n        return st.startswith(prefix)\n    else:\n        return 1"}, "511": {"problem_id": 2872, "answer": "def coin(n):\n    return [''.join(c) for c in ''.join(['HT']*n+['H']*(n-1)+['T'])]"}, "512": {"problem_id": 2873, "answer": "def josephus_survivor(n,k):\n    l = [i for i in range(1, n+1)]\n    l.extend(l[1:])\n    return l[k]"}, "513": {"problem_id": 2874, "answer": "def my_parse_int(string):\n    try:\n        return int(string)\n    except ValueError:\n        return 'NaN'"}, "514": {"problem_id": 2875, "answer": "def sort_photos(pics):\n    d = sorted([int(x) for x in str(pics).split('.img')])\n    return [x[0] + next(d) for x in sorted(enumerate(pics), key=lambda x: x[1])[:5]]"}, "515": {"problem_id": 2876, "answer": "def check(a, x): \n    return x in a"}, "516": {"problem_id": 2877, "answer": "def count(a, t, x):\n    return sum(a[i]==t for i in range(len(a)))+sum(a[i]==t for i in range(len(a) - x))"}, "517": {"problem_id": 2878, "answer": "def shortest_to_char(s, c):\n    if c not in s:\n        return []\n    return [min(abs(i - c) for i in s) for c in s]"}, "518": {"problem_id": 2879, "answer": "import unicodedata\ndef could_be(original, another):\n    s = unicodedata.normalize('NFKD', original).encode('ascii', 'ignore')\n    s = s.decode('ascii', 'ignore')\n    try:\n        return bool(s)\n    except AttributeError:\n        return False"}, "519": {"problem_id": 2880, "answer": "def seven(m):\n    steps = 0\n    while m > 99:\n        m = m//10 - 2*(m%10)\n        steps += 1\n    return (m, steps)"}, "520": {"problem_id": 2881, "answer": "def validate(n):\n    digits = ''.join(sorted(str(n)[2:]))\n    return sum(int(d) for d in digits[::2]) % 10 == 0"}, "521": {"problem_id": 2882, "answer": "def cumulative_triangle(n):\n    return n*(n+1)*(2*n+1)//6"}, "522": {"problem_id": 2883, "answer": "def to_pretty(seconds):\n    d = [\"a second ago\", \"a minute ago\", \"an hour ago\", \"a day ago\", \"a week ago\"]\n    if seconds == 0:\n        return d[0]\n    elif seconds == 40000:\n        return d[1]\n    else:\n        return d[2]"}, "523": {"problem_id": 2884, "answer": ""}, "524": {"problem_id": 2885, "answer": "def champernowneDigit(n):\n    if type(n)!=int or n<1: return float('nan')\n    s=str(n)\n    return int(s[-1])"}, "525": {"problem_id": 2886, "answer": "import re\ndef find(s):\n    return max(re.findall(r\"!+\\?+\", s), re.findall(r\"\\?+!+\", s))"}, "526": {"problem_id": 2887, "answer": "import base64\nimport random\nimport re\n\nBASE64 = base64.b64encode\nRAND = random.randint\n\ndef adFly_decoder(sc):\n    return BASE64.b64decode(sc[::-1].encode('utf-8')).decode('utf-8')"}, "527": {"problem_id": 2888, "answer": "def remove(s):\n    return''.join(s.split()[-1::-1])"}, "528": {"problem_id": 2889, "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_ways(n, k):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sum(count_ways(n-j, k) for j in range(1, n+1))"}, "529": {"problem_id": 2890, "answer": "def multiples(m, n):\n    result = []\n    for i in range(1, m+1):\n        result.append(n*i)\n    return result"}, "530": {"problem_id": 2891, "answer": "def find_the_key(message, code):\n    dic = {0:'',1:'a',2:'b',3:'c',4:'d',5:'e',6:'f',7:'g',8:'h',9:'i',10:'j',11:'k',12:'l',13:'m',14:'n',15:'o',16:'p',17:'q',18:'r',19:'s',20:'t',21:'u',22:'v',23:'w',24:'x',25:'y',26:'z'}\n    for i in range(len(message)):\n        code[i] += int(message[i])\n    key = 0\n    for i in range(len(code)):\n        key += dic[code[i]]*int(code[i])\n    return key"}, "531": {"problem_id": 2892, "answer": "def case_id(c_str):\n    if c_str.replace('_','').lower() not in 'kebab_snake_camel_none':\n        return 'kebab'\n    elif c_str.replace('_','').lower() =='snake':\n        return'snake'\n    elif c_str.replace('_','').lower() == 'camel':\n        return 'camel'\n    else:\n        return 'none'"}, "532": {"problem_id": 2893, "answer": "def plant_doubling(n):\n    return sum(1 for i in range(n+1) if i % 2 == 0)"}, "533": {"problem_id": 2894, "answer": "def triple_trouble(one, two, three):\n    res = ''\n    for i in range(len(one)):\n        res += one[i] + two[i] + three[i]\n    return res"}, "534": {"problem_id": 2895, "answer": "import re\n\ndef ka_co_ka_de_ka_me(word):\n    return \"ka\" + re.sub(r\"([aeiou]+)(?=[^aeiou])\", r\"\\1ka\", word)"}, "535": {"problem_id": 2896, "answer": "def cost_of_carpet(l, w, r, c):\n    if l == 0 or w == 0 or r == 0:\n        return 'error'\n    elif l > w.bit_length() or w > r.bit_length():\n        return 'error'\n    return round(c * min(l, w), 2)"}, "536": {"problem_id": 2897, "answer": "def oddity(n):\n    return 'odd' if n**0.5%1==0 else 'even'"}, "537": {"problem_id": 2898, "answer": "def find_array(arr1, arr2):\n    return [arr1[i] for i in arr2 if i<len(arr1)]"}, "538": {"problem_id": 2899, "answer": "def bin_str(s):\n    return sum(a!=b for a, b in zip(s, s[1:]))"}, "539": {"problem_id": 2900, "answer": "def string_transformer(s):\n    return''.join(s.swapcase().split(' ')[::-1])"}, "540": {"problem_id": 2901, "answer": "def psion_power_points(level,score):\n    d = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0}\n    bonus = 0\n    for i in range(20):\n        bonus += d[level]*score//20\n        d[level] = max(d.get(level,0),bonus)\n    return bonus"}, "541": {"problem_id": 2902, "answer": "def opposite(number):\n    return -number"}, "542": {"problem_id": 2903, "answer": "from math import pi\ndef volume(r,h):\n    return int(pi*r**2*h/3)"}, "543": {"problem_id": 2904, "answer": "def filter_words(st):\n    return''.join(st.capitalize() if st.lstrip().isalnum() else st for i in st)"}, "544": {"problem_id": 2905, "answer": "def nickname_generator(name):\n    if len(name) < 4:\n        return \"Error: Name too short\"\n    elif name[2] in 'aeiou':\n        return name[:4]\n    else:\n        return name[:3]"}, "545": {"problem_id": 2906, "answer": "def generate_number(squad, n):\n    if n not in squad:\n        return n\n    for i in range(1, 10):\n        if n == n.replace('9', '9' + str(i)):\n            return n"}, "546": {"problem_id": 2907, "answer": "from itertools import combinations\n\ndef combs_non_empty_boxesII(n):\n    max_boxes = 0\n    total_boxes = 0\n    combinations = list(combinations(range(1, n+1), 2))\n    for c in combinations:\n        if len(c) == 1:\n            total_boxes += 1\n            continue\n        max_boxes = max(max_boxes, total_boxes)\n        total_boxes += c[0]\n    return [total_boxes, max_boxes, len(combinations)].pop()"}, "547": {"problem_id": 2908, "answer": "def flatten(dictionary):\n    result = {}\n    for k, v in dictionary.items():\n        if isinstance(v, dict):\n            result[k] = flatten(v)\n        else:\n            result[k] = v\n    return result"}, "548": {"problem_id": 2909, "answer": ""}, "549": {"problem_id": 2910, "answer": "def small_enough(a, limit): \n    return all(x<=limit for x in a)"}, "550": {"problem_id": 2911, "answer": "def count_vowels(s = ''):\n    if type(s) == str:\n        return len(s)\n    else:\n        return None"}, "551": {"problem_id": 2912, "answer": "def find_multiples(integer, limit):\n    res = []\n    for i in range(integer,limit+1):\n        res.append(i)\n    return res"}, "552": {"problem_id": 2913, "answer": "def x(n):\n    return '\\n'.join(''.join('\u25a1\u25a0'[i&1] for i in range(n)) for _ in range(n))"}, "553": {"problem_id": 2914, "answer": "def array_diff(a, b):\n    return [x for x in a if x not in b]"}, "554": {"problem_id": 2915, "answer": "def check_availability(schedule, current_time):\n    for s, e in schedule:\n        if s <= current_time < e:\n            return \"Available\"\n    return True"}, "555": {"problem_id": 2916, "answer": "def mutually_exclusive(dice, call1, call2):\n    if sum(dice)!= 1:\n        return None\n    return f'{int(call1[0])} {:.2f}'.format(int(call1[1]) if call1[1] else 0) + f'{int(call2[0])} {:.2f}'.format(int(call2[1]) if call2[1] else 0)"}, "556": {"problem_id": 2917, "answer": "def distinct_digit_year(year):\n    return next((year + 1) // 10, year)"}, "557": {"problem_id": 2918, "answer": "def nbMonths(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth):\n    months = 0\n    while startPriceOld < startPriceNew:\n        months += 1\n        startPriceOld += savingperMonth * months\n        startPriceNew += savingperMonth * months\n    return [months, round(startPriceOld - startPriceNew * percentLossByMonth) ]"}, "558": {"problem_id": 2919, "answer": "def encode(message, key):\n    d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    key_arr = list(map(int, str(key)))\n    return [d[letter] + next(key_arr) for letter in message]"}, "559": {"problem_id": 2920, "answer": "def pattern(n):\n    return '\\n'.join(''.join(str(i) for i in range(n, n-i, -1)) for i in range(n))"}, "560": {"problem_id": 2921, "answer": "def blocks_to_collect(level):\n    d = {'gold':1, 'diamond':2, 'emerald':3, 'iron':4}\n    a = [d[x] for x in range(level)]\n    return {'total':sum(a), 'gold':sum(d[x] for x in a), 'diamond':sum(d[x] for x in a[1:]), 'emerald':sum(d[x] for x in a[1:]),'iron':sum(d[x] for x in a[1:])}"}, "561": {"problem_id": 2922, "answer": "def crap(garden, bags, cap):\n    count = 0\n    for i in garden:\n        if i[0] == 'D':\n            return 'Dog!!'\n        elif i[0] == '@':\n            count += 1\n        else:\n            count += abs(i[1] - bags)\n            bags += 1\n    if count > cap:\n        return 'Cr@p'\n    else:\n        return 'Clean'"}, "562": {"problem_id": 2923, "answer": "import re\ndef dad_filter(string):\n    return re.sub(r'((?<=\\,)\\,+)',r'\\1',string)"}, "563": {"problem_id": 2924, "answer": "def are_coprime(n, m):\n    return m == n % m"}, "564": {"problem_id": 2925, "answer": "def multiply(n):\n    if n < 0:\n        return n * 5**len(str(abs(n)))\n    elif n > 0:\n        return n * 5**len(str(abs(n)))"}, "565": {"problem_id": 2926, "answer": "def reverse(a):\n    b = ''.join(reversed(a))\n    return b"}, "566": {"problem_id": 2927, "answer": "def zombie_shootout(zombies, distance, ammo):\n    if distance<=0:\n        return f\"You shot all {zombies} zombies.\"\n    elif zombies==0:\n        return f\"You shot all {zombies} zombies.\"\n    elif ammo<=0:\n        return f\"You ran out of ammo before shooting all {zombies} zombies.\"\n    else:\n        return f\"You shot {min(ammo, zombies)} zombies before being eaten: overwhelmed.\""}, "567": {"problem_id": 2928, "answer": "def alphabet_war(fight):\n    left_wins = 0\n    right_wins = 0\n    for i in fight:\n        if i == 'w':\n            left_wins += 4\n        elif i == 'p':\n            left_wins += 3\n        elif i == 'b':\n            left_wins += 2\n        elif i =='s':\n            left_wins += 1\n        elif i =='m':\n            right_wins += 4\n        elif i == 'q':\n            right_wins += 3\n        elif i == 'd':\n            right_wins += 2\n        elif i == 'z':\n            right_wins += 1\n    if left_wins > right_wins:\n        return \"Left side wins!\"\n    elif right_wins > left_wins:\n        return \"Right side wins!\"\n    else:\n        return \"Let's fight again!\""}, "568": {"problem_id": 2929, "answer": "def factors(n):\n    sq = n**0.5\n    cb = n**0.5\n    return [sq,cb]"}, "569": {"problem_id": 2930, "answer": "def summation(num):\n    return sum(range(1,num+1))\n"}, "570": {"problem_id": 2931, "answer": "def count_cows(n):\n    if type(n)!= int:\n        return None\n    elif n < 3:\n        return 1\n    else:\n        return count_cows(n-1) + count_cows(n-2)"}, "571": {"problem_id": 2932, "answer": "def colour_association(arr):\n    return [{k:v} for k,v in arr]"}, "572": {"problem_id": 2933, "answer": "def solve(nums,div):\n    return [i + i % div for i in nums]"}, "573": {"problem_id": 2934, "answer": "import re\ndef solve(s):\n    return max(sum(ord(c)-96 for c in s.lower()) for i in range(len(s)))"}, "574": {"problem_id": 2935, "answer": "import re\ndef is_vowel(s):\n    return bool(re.fullmatch(r'[aeiou]',s))"}, "575": {"problem_id": 2936, "answer": "from math import ceil\n\ndef num_of_open_lockers(n):\n    return ceil(n ** 0.5)"}, "576": {"problem_id": 2937, "answer": "def between(a,b):\n    # good luck\n    arr = []\n    for i in range(a, b+1):\n        arr.append(i)\n    return arr"}, "577": {"problem_id": 2938, "answer": ""}, "578": {"problem_id": 2939, "answer": "def has_two_cube_sums(n):\n    return n == sum(sorted([a**3 for a in range(1, int(n**.5)+1)], reverse=True))"}, "579": {"problem_id": 2940, "answer": "def repeats(arr):\n    return sum(n for n in arr if arr.count(n) == 1)"}, "580": {"problem_id": 2941, "answer": "def add(*args):\n    return round(sum(n / i for i, n in enumerate(args, 1)))"}, "581": {"problem_id": 2942, "answer": "def fold_to(distance):\n    if distance < 0:\n        return None\n    elif distance < 0.0001:\n        return 0\n    else:\n        n = 0\n        while distance < distance*2:\n            n += 1\n            distance *= 2\n        return n"}, "582": {"problem_id": 2943, "answer": "def complete_binary_tree(a):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in range(len(a)):\n        d[a[i]] += 1\n    "}, "583": {"problem_id": 2944, "answer": ""}, "584": {"problem_id": 2945, "answer": "def fortune(f0, p, c0, n, i):\n    import math\n    year = 1\n    while year < n:\n        f0 = int(math.log10(f0 + f0))\n        c0 = int(math.log10(c0 + c0))\n        year += 1\n    return f0 <= p and f1 <= p and f2 <= p and f3 <= p and f4 <= p"}, "585": {"problem_id": 2946, "answer": "def reverse_sentence(sentence):\n    return''.join(reversed(sentence.split()))"}, "586": {"problem_id": 2947, "answer": "def rounding(n, m):\n    return n if n/m>1 else round(n/m*m)"}, "587": {"problem_id": 2948, "answer": "def split_by_value(k, elements):\n    return [x for x in sorted(elements, key=lambda x: x < k)]"}, "588": {"problem_id": 2949, "answer": "def split_and_add(numbers, n):\n    a = numbers[:]\n    for _ in range(n):\n        a.append(sum(a[:i]))\n    return a"}, "589": {"problem_id": 2950, "answer": "from itertools import combinations\n\ndef solve(arr):\n    return sum(1 for a, b in combinations(arr, 2) if a - b == arr[0] - arr[1])"}, "590": {"problem_id": 2951, "answer": "def how_many_measurements(n):\n    if n<3:\n        return n\n    elif n==3:\n        return 1\n    else:\n        return how_many_measurements(n-1) + how_many_measurements(n-2)"}, "591": {"problem_id": 2952, "answer": "def dropzone(p, dropzones):\n    return min(dropzones, key=lambda d: d[0] - p[0], default=dropzones[0])"}, "592": {"problem_id": 2953, "answer": "def numericals(s):\n    count = 0\n    for c in s:\n        count += 1\n        if count == 1:\n            return str(count) + \"1\"*(count-1)\n    return \"\".join(sorted(s))"}, "593": {"problem_id": 2954, "answer": "def riders(stations):\n    r = 0\n    for i in stations:\n        r += i\n        if i > 100:\n            r -= 100\n    return r"}, "594": {"problem_id": 2955, "answer": "def oddest(a):\n    n = 0\n    for x in a:\n        if x % 2 == 1:\n            n += 1\n        elif x % 2!= 1:\n            n += 1\n    return n"}, "595": {"problem_id": 2956, "answer": ""}, "596": {"problem_id": 2957, "answer": "def get_drink_by_profession(param):\n    d = {\n        \"Jabroni\": \"Patron Tequila\",\n        \"School Counselor\": \"Anything with Alcohol\",\n        \"Programmer\": \"Hipster Craft Beer\",\n        \"Bike Gang Member\": \"Moonshine\",\n        \"Politician\": \"Your tax dollars\",\n        \"Rapper\": \"Cristal\"\n    }\n    return d.get(param.lower(), \"Beer\")"}, "597": {"problem_id": 2958, "answer": "def subcuboids(x,y,z):\n    return x*y*z*(x+1)*(y+1)*(z+1)//8"}, "598": {"problem_id": 2959, "answer": "def optimal_number_of_coins(n, coins):\n    d = [1] + sorted(coins)\n    for i in range(1, n+1):\n        d.append(d[i-1]//i)\n    return d[n]"}, "599": {"problem_id": 2960, "answer": "from fractions import gcd\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(x*y for x,y in pairs) - sum(gcd(x,y) for x,y in pairs)"}, "600": {"problem_id": 2961, "answer": "def complete_series(seq): \n    return [0] if len(seq) == 0 else list(range(max(seq), 0, -1))"}, "601": {"problem_id": 2962, "answer": "def divisible_by(numbers, divisor):\n    return list(filter(lambda x: x % divisor == 0, numbers))"}, "602": {"problem_id": 2963, "answer": "swap = str.swapcase"}, "603": {"problem_id": 2964, "answer": "def sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2])"}, "604": {"problem_id": 2965, "answer": "def solve_eq(eq):\n    x, y, z = eq[0][0], eq[0][1], eq[1][0]\n    return [x, y, z]"}, "605": {"problem_id": 2966, "answer": "import re\ndef calculate(s):\n    return re.sub(r'\\b(?P<op>[a-z]+)(?P<n1>\\d+)(?P<n2>\\d+)\\b', '\\1\\2{}'.format(op, n1, n2))"}, "606": {"problem_id": 2967, "answer": "def bin_to_hex(binary_string):\n    return '{0:02X}'.format(int(binary_string, 2) << 1).lstrip('0')"}, "607": {"problem_id": 2968, "answer": "def get_middle(s):\n    x = len(s) // 2\n    return s[x:x+2]"}, "608": {"problem_id": 2969, "answer": "from collections import deque\n\ndef advice(agents, n):\n    agents = deque(sorted(agents))\n    while agents:\n        agents.popleft()\n        for i in range(n):\n            agents.popleft()\n            if agents[i][0] < agents[i+1][0]:\n                agents.append((i, agents[i][1]))\n    return agents"}, "609": {"problem_id": 2970, "answer": "def prod_int_part(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return [2]\n    else:\n        d = set()\n        for i in range(2, n+1):\n            d.add(i)\n            d.add(n//i)\n        list_prod = sorted(d)\n        return [len(list_prod), list_prod]"}, "610": {"problem_id": 2971, "answer": "def watch_pyramid_from_the_side(characters):\n    if not characters:\n        return characters\n    height = len(characters)\n    return '\\n'.join(w[0] for w in watch_pyramid_from_the_side(characters[1:])) + '\\n'.join(w[1] for w in watch_pyramid_from_the_side(characters[1:height-1:]) + [' '])"}, "611": {"problem_id": 2972, "answer": "def multiple_split(string, delimiters=[]):\n    return [s for s in string.split(' ') if s]"}, "612": {"problem_id": 2973, "answer": "def array_conversion(arr):\n    i = 0\n    while len(arr) > 1:\n        arr = [x+y for x, y in zip(arr[::2], arr[1::2])]\n        i += 1\n    return arr[0]"}, "613": {"problem_id": 2974, "answer": "def excluding_vat_price(price):\n    return round(price / 1.15, 2) if price else -1"}, "614": {"problem_id": 2975, "answer": "def song_decoder(song):\n    return''.join(song.replace('WUB','').split())"}, "615": {"problem_id": 2976, "answer": "def accum(s):\n    return '-'.join(sorted(s, key=lambda x: x[0]))"}, "616": {"problem_id": 2977, "answer": "from functools import lru_cache\n\ndef ds_multof_pfs(n_min, n_max):\n    @lru_cache(maxsize=None)\n    def recur(n):\n        if n < n_min: return []\n        prime_factors = [i for i in range(2, int(n**0.5)+1) if n % i == 0]\n        if len(prime_factors) == 1: return [n]\n        return [n] + recur(prime_factors[0]) + recur(prime_factors[1])\n    return list(recur(n_min))"}, "617": {"problem_id": 2978, "answer": "from collections import Counter\ndef count_sel(lst):\n    c = Counter(lst)\n    return [len(lst), len(set(lst)), len([k for k in lst if c[k] == 1]), sorted(c.items(), key=lambda k: k[1])[4]]"}, "618": {"problem_id": 2979, "answer": "def get_age(age):\n    return int(age[0])"}, "619": {"problem_id": 2980, "answer": "from math import sqrt\nfind_min_num = lambda n,d:__import__('functools').lcm(d**.5)"}, "620": {"problem_id": 2981, "answer": "def solution(n,d):\n    return [int(i) for i in str(n)[-d:]] if d > 0 else []"}, "621": {"problem_id": 2982, "answer": "def pascal(p):\n    res = [[1]]\n    for i in range(1, p+1):\n        res.append([1] + [a+b for a, b in zip(res[i-1], res[i-2])])\n    return res"}, "622": {"problem_id": 2983, "answer": "def bouncy_count(n):\n    s = str(n)\n    cnt = 0\n    for i in range(10):\n        if s[i] == \"0\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"1\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"2\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"3\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"4\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"5\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"6\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"7\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"8\" and s[i+1] == \"0\":\n            cnt += 1\n        elif s[i] == \"9\" and s[i+1] == \"0\":\n            cnt += 1\n    return cnt"}, "623": {"problem_id": 2984, "answer": "def infected_zeroes(lst):\n    return max(0, sum(1 for i, n in enumerate(lst) if n == 0) + len(set(lst)))"}, "624": {"problem_id": 2985, "answer": "def reflections(max_x, max_y):\n    return all(l.is_integer() for l in zip(*[list(map(int, row)) for row in [[max_x, max_y]]*max_x + [max_x, max_y]]))"}, "625": {"problem_id": 2986, "answer": "def segments(m, a):\n    return [x for x in range(m+1) if all(x not in a for x in a)]"}, "626": {"problem_id": 2987, "answer": "def is_divide_by(number, a, b):\n    return number % a == 0 and number % b == 0"}, "627": {"problem_id": 2988, "answer": "def reverse_and_combine_text(text):\n    d = text.split()\n    while len(d) > 1:\n        d.pop(0)\n        d.pop(0)\n        d.pop(0)\n    return ''.join(reversed(d))"}, "628": {"problem_id": 2989, "answer": "def bits_battle(numbers):\n    odds, evens = [], []\n    for x in numbers:\n        odds.append(bin(x)[2:].count('1'))\n        evens.append(bin(x)[2:].count('0'))\n    odds.sort()\n    evens.sort()\n    if odds > evens:\n        return 'odds win'\n    elif odds < evens:\n        return 'evens win'\n    else:\n        return 'tie'"}, "629": {"problem_id": 2990, "answer": "def monty_hall(correct_door_number, participant_guesses):\n    return round(100 * sum(1 for i in participant_guesses if i!= correct_door_number) / len(participant_guesses))"}, "630": {"problem_id": 2991, "answer": "def not_so_random(b,w):\n    return \"Black\" if b & 1 else \"White\""}, "631": {"problem_id": 2992, "answer": "def switcheroo(string):\n    return ''.join(c for c in string if c not in 'ab')"}, "632": {"problem_id": 2993, "answer": "def poly_add(p1, p2):\n    return [sum(p1[i] + p2[i] for i in range(len(p1))), sum(p1[i] for i in range(len(p2)) if i not in range(len(p1)))]"}, "633": {"problem_id": 2994, "answer": "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif nth > len(str(num)):\n        return 0\n    else:\n        return int(str(num)[nth-1])"}, "634": {"problem_id": 2995, "answer": "def sum_mul(n, m):\n    if n <= 0 or m <= 0:\n        return 'INVALID'\n    elif n <= m:\n        return sum(range(n, m, n))\n    else:\n        return sum(range(n, m, n))"}, "635": {"problem_id": 2996, "answer": "def how_much_coffee(events):\n    coffees = 0\n    for event in events:\n        if event.isupper():\n            coffees += 2\n        elif event.islower():\n            coffees += 1\n    return coffees if coffees < 3 else 'You need extra sleep'"}, "636": {"problem_id": 2997, "answer": "def rgb(r, g, b):\n    return ''.join(chr(max(0, r-max(0, r), max(0, g-max(0, g), g-max(0, g)), max(0, b-max(0, b), b-max(0, b)))).upper() for _ in range(255))"}, "637": {"problem_id": 2998, "answer": "def atomic_number(electrons):\n    n = 2*max(electrons, 0)**2\n    return [n]"}, "638": {"problem_id": 2999, "answer": "def hex_word_sum(s):\n    s = s.translate(str.maketrans('OS', '05')).upper()\n    return sum(int(w, 16) for w in s.split())"}, "639": {"problem_id": 3000, "answer": "def mul_power(n, k):\n    return int(n ** (1.0 / k) + 0.5)"}, "640": {"problem_id": 3001, "answer": "def validate(username, password):\n    d = {'Timmy': 'Successfully Logged in!', 'Hannah': 'Successfully Logged in!', 'bob': 'Successfully Logged in!', 'alex': 'Successfully Logged in!','samantha': 'Successfully Logged in!', 'cindy': 'Successfully Logged in!','matt': 'Successfully Logged in!', 'tess': 'Successfully Logged in!','sam': 'Successfully Logged in!', 'juan': 'Successfully Logged in!', 'kate': 'Successfully Logged in!', 'dee': 'Successfully Logged in!', 'laurie': 'Successfully Logged in!', 'kell': 'Successfully Logged in!', 'lea': 'Successfully Logged in!', 'clare': 'Successfully Logged in!', 'valentine': 'Successfully Logged in!','mary': 'Successfully Logged in!', 'francesca': 'Successfully Logged in!', 'annabelle': 'Successfully Logged in!','shelby': 'Successfully Logged in!', 'elizabeth': 'Successfully Logged in!', 'valentina': 'Successfully Logged in!', 'andrea': 'Successfully Logged in!', 'valerie': 'Successfully Logged in!', 'valerie': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria': 'Successfully Logged in!', 'valeria"}, "641": {"problem_id": 3002, "answer": "def is_pronic(n):\n    return n >= 0 and n % (2**len(str(n)) - 1) == 0"}, "642": {"problem_id": 3003, "answer": "def args_count(*args, **kwargs):\n    return len(args) + len(kwargs)"}, "643": {"problem_id": 3004, "answer": "def head_smash(arr):\n    if arr == [] or isinstance(arr, int) == False:\n        return 'Gym is empty'\n    return''.join(map(str, arr.replace('O','')))"}, "644": {"problem_id": 3005, "answer": "def f(n):\n    a = 1\n    for i in range(1,n+1):\n        if a == 1:\n            a += 1\n        elif a == 2:\n            a += 1\n        elif a == 3:\n            a += 1\n        elif a == 4:\n            a += 1\n        elif a == 5:\n            a += 1\n        elif a == 6:\n            a += 1\n        elif a == 7:\n            a += 1\n        elif a == 8:\n            a += 1\n        elif a == 9:\n            a += 1\n        elif a == 10:\n            a += 1\n        elif a == 11:\n            a += 1\n        elif a == 12:\n            a += 1\n    return len(set(range(1,13)))"}, "645": {"problem_id": 3006, "answer": "def calculate_total(t1, t2):\n    return sum(t1) > sum(t2)"}, "646": {"problem_id": 3007, "answer": "def consecutive_sum(num):\n    c = 0\n    for i in range(1, num // 2 + 1):\n        if i % 2 == 0:\n            c += 1\n        elif i % 2 == 1:\n            c += 1\n    return c"}, "647": {"problem_id": 3008, "answer": "def sort_array(value):\n    return \"\".join(sorted(value,key=lambda x: int(x)))"}, "648": {"problem_id": 3009, "answer": "def pairs(ar):\n    return sum(1 for i in range(len(ar) + 1) for j in range(i, i + 2))"}, "649": {"problem_id": 3010, "answer": "def solution(pairs):\n    return ','.join('{} = {}'.format(k, v) for k, v in sorted(pairs.items()))"}, "650": {"problem_id": 3011, "answer": "def learn_charitable_game(arr):\n    return sum(arr)%2==0"}, "651": {"problem_id": 3012, "answer": "def shared_bits(a, b):\n    c=0\n    d=0\n    e=0\n    f=0\n    g=0\n    h=0\n    i=0\n    j=0\n    k=0\n    l=0\n    m=0\n    n=0\n    o=0\n    p=0\n    q=0\n    r=0\n    s=0\n    t=0\n    u=0\n    v=0\n    w=0\n    x=0\n    y=0\n    z=0\n    a=a.count('1')\n    b=b.count('1')\n    if a>b:\n        return True\n    else:\n        return False"}, "652": {"problem_id": 3013, "answer": "def delete_digit(n):\n    return max(int(''.join(reversed(str(n))), 10), 0)"}, "653": {"problem_id": 3014, "answer": "def simple_transposition(text):\n    return ''.join(c + text[i] for i, c in enumerate(text))"}, "654": {"problem_id": 3015, "answer": "def get_issuer(number):\n    n = str(number)\n    if n[:2] in ['34', '37'] and len(n) == 15:\n        return 'AMEX'\n    elif n[:4] == '6011' and len(n) == 16:\n        return 'Discover'\n    elif n[:2] in ['51', '52', '53', '54', '55'] and len(n) == 16:\n        return 'Mastercard'\n    elif n[0] == '4' and int(n[1]) in range(4, 55) and len(n) == 13 or int(n[1]) in range(6, 16) and len(n) == 16:\n        return 'VISA'\n    return 'Unknown'"}, "655": {"problem_id": 3016, "answer": "from itertools import product\n\nNOTCHES = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\ndef minor_or_major(chord):\n    chord = list(map(str.split, chord.split(' ')))\n    chord = sorted(chord, key=lambda x: (NOTCHES.index(x[0]), NOTCHES.index(x[1])))\n    return 'Not a chord' if len(chord)!= 3 else next((v for v in product(NOTCHES, range(1, len(NOTCHES))), []), 'Not a chord')"}, "656": {"problem_id": 3017, "answer": "def rocks(n):\n    return sum(9*bin(i)[2:].count('1') for i in range(1, n+1))"}, "657": {"problem_id": 3018, "answer": "import re\n\ndef word_count(s):\n    return len(re.findall(r'[a-z]+', s.lower()))"}, "658": {"problem_id": 3019, "answer": "def str_count(strng, letter):\n    # Your code here ;)\n    count = 0\n    for i in strng:\n        if i == letter:\n            count += 1\n    return count"}, "659": {"problem_id": 3020, "answer": "import re\ndef kontti(s):\n    return \" \".join(re.findall(r\"[^aeiouy]\", s))"}, "660": {"problem_id": 3021, "answer": "def available_moves(position):\n    if isinstance(position, str) and position.islower():\n        return []\n    elif isinstance(position, list) and len(position) == 1:\n        return sorted(position)\n    elif isinstance(position, (int, float)):\n        return sorted(zip(range(1, 9), range(1, 8)))\n    else:\n        return ['A' + str(i) for i in range(1, 9)]"}, "661": {"problem_id": 3022, "answer": "def two_highest(arg1):\n    if len(arg1) == 0:\n        return []\n    elif len(arg1) == 1:\n        return arg1\n    else:\n        lst = sorted(set(arg1))\n        return lst[:2]"}, "662": {"problem_id": 3023, "answer": "def best_match(goals1, goals2):\n    m = goals1[0] - goals2[0]\n    z = goals1[1] - goals2[1]\n    return 0 if z > m else min(m, z)"}, "663": {"problem_id": 3024, "answer": "def friend(x):\n    return [x for x in x if len(x) == 4]"}, "664": {"problem_id": 3025, "answer": "def locate(seq, value):\n    return any(s.startswith(e) for s, e in zip(seq, seq[1:]))"}, "665": {"problem_id": 3026, "answer": "def min_value(digits):\n    return int(''.join(sorted(set(map(str,digits)),key=lambda d:int(d)))[::-1])"}, "666": {"problem_id": 3027, "answer": "def is_solved(board):\n    return all(x < y for x, y in enumerate(board) if x!= y)"}, "667": {"problem_id": 3028, "answer": "import math\ndef factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return math.factorial(n)"}, "668": {"problem_id": 3029, "answer": "def levenshtein(a,b):\n    import numpy as np\n    return np.linalg.norm(a.astype(str) - b.astype(str) +.0, eps=1e-8)"}, "669": {"problem_id": 3030, "answer": "def nb_dig(n, d):\n    return sum(str(k**2).count(str(d)) for k in range(n+1))"}, "670": {"problem_id": 3031, "answer": "def alphabetic(s):\n    return ''.join(sorted(s))"}, "671": {"problem_id": 3032, "answer": "def factorsRange(n, m):\n    d = {}\n    for i in range(n, m + 1):\n        if i.is_factor():\n            d[i] = ['None']\n    return d"}, "672": {"problem_id": 3033, "answer": "from collections import defaultdict\nfrom itertools import cycle\n\ndef interpreter(tape):\n    memory = defaultdict(int)\n    ascii_output = ''\n    for command in tape:\n        if command == '>':\n            memory[0] += 1\n        elif command == '<':\n            memory[0] -= 1\n        elif command == '+':\n            memory[1] += 1\n        elif command == '*':\n            ascii_output += chr(memory[0])\n        else:\n            ascii_output += chr(memory[0]) if memory[0] else 0\n    return ascii_output"}, "673": {"problem_id": 3034, "answer": "def bowling_score(rolls):\n    pins = 0\n    score = 0\n    for i in range(10):\n        if pins == 10:\n            score += rolls[i]\n        elif rolls[i] == 10:\n            score += rolls[i] + rolls[i].count(10)\n        else:\n            score += rolls[i] + rolls[i].count(rolls[i].bit_length())\n        pins += rolls[i]\n    return score"}, "674": {"problem_id": 3035, "answer": "from numpy import matrix\ngetMatrixProduct = lambda a, b: matrix(zip(a, b)).tolist()"}, "675": {"problem_id": 3036, "answer": "def abacaba(k):\n    return chr(96 + (k & 0x1f))"}, "676": {"problem_id": 3037, "answer": "from collections import Counter\ndef obtain_max_number(arr):\n    cnt = Counter(arr)\n    return max(cnt.values())"}, "677": {"problem_id": 3038, "answer": "def solve(st):\n    return sorted(st, key=lambda c: abs(st.rindex(c) - st.index(c)))[0][1]"}, "678": {"problem_id": 3039, "answer": "from itertools import takewhile\nrthn_between=lambda a,b:list(takewhile(lambda n:isinstance(n,int),zip(*[list(range(1,len(n))+1)for n in takewhile(lambda n:isinstance(n,int),list(range(1,len(n))+1))])))"}, "679": {"problem_id": 3040, "answer": "def candies(s):\n    return max(s) - sum(s) if len(s) > 1 else -1"}, "680": {"problem_id": 3041, "answer": "def vowel_start(st): \n    return ''.join(c if c in 'aeiou' else c.lower() for c in st.lower())"}, "681": {"problem_id": 3042, "answer": "trace=lambda a,d=0:None if a==[] else d+sum(a[i][i] for i in range(len(a)))"}, "682": {"problem_id": 3043, "answer": "def print_nums(*args):\n    s = '{:0{}b}'.format(len(str(max(args))))\n    return s.format(*args)"}, "683": {"problem_id": 3044, "answer": "def solve(s):\n    return s == s[::-1]"}, "684": {"problem_id": 3045, "answer": "def elevator(left, right, call):\n    return 'right' if abs(left-call) < abs(right-call) else 'left'"}, "685": {"problem_id": 3046, "answer": "def thue_morse(n):\n    m = len(bin(n)[2:])\n    return ''.join(c for c in bin(n)[2:].zfill(m) if c!= '1')"}, "686": {"problem_id": 3047, "answer": "from itertools import groupby\n\ndef repeating_fractions(numerator,denominator):\n    out = str(numerator / denominator)\n    parts = [\"\".join(grp) for grp in groupby(out)]\n    return \"\".join(parts[i] for i in range(len(parts)))"}, "687": {"problem_id": 3048, "answer": "def alternateCase(s):\n    # your code here\n    a = \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n    return a"}, "688": {"problem_id": 3049, "answer": "import re\ndef textin(st):\n    return re.sub(r'(?i)too|to|two', '2', st, flags=re.I)"}, "689": {"problem_id": 3050, "answer": "def lcs(x, y):\n    if not x or not y: return ''\n    if len(x) > len(y): x, y = y, x\n    s = ''.join(sorted(x)) + ''.join(sorted(y))\n    return lcs(s, x[::-1])"}, "690": {"problem_id": 3051, "answer": "def to_nato(words):\n    d = {'a': 'Alfa', 'b': 'Bravo', 'c': 'Charlie', 'd': 'Delta', 'e': 'Echo', 'f': 'Foxtrot', 'g': 'Golf', 'h': 'Hotel', 'i': 'India', 'j': 'Juliett', 'k': 'Kilo', 'l': 'Lima','m': 'Mike', 'n': 'November', 'o': 'Oscar', 'p': 'Papa', 'q': 'Quebec', 'r': 'Romeo','s': 'Sierra', 't': 'Tango', 'u': 'Uniform', 'v': 'Victor', 'w': 'Whiskey', 'x': 'Xray', 'y': 'Yankee', 'z': 'Zulu'}\n    return''.join(d.get(w, w) for w in words.lower().split()).lstrip(' ').rstrip('!')"}, "691": {"problem_id": 3052, "answer": "def remove(s):\n    return''.join(s[i:i+2] for i in range(len(s)))"}, "692": {"problem_id": 3053, "answer": "def close_compare(a, b, margin=0):\n    if abs(a-b)<=margin:\n        return 0\n    elif a>b:\n        return 1\n    else:\n        return -1"}, "693": {"problem_id": 3054, "answer": "def sum_of_n(n):\n    return [sum(range(i, i+abs(n)) for i in range(n+1))]"}, "694": {"problem_id": 3055, "answer": "def sum_str(a, b):\n    return str(int(a) + int(b)) if a and b else '0'"}, "695": {"problem_id": 3056, "answer": "def palindrome(num,s):\n    if type(num)!=int or type(s)!=int:\n        return \"Not valid\"\n    else:\n        l=list(str(num))\n        l.append(s)\n        return [i for i in range(len(l)) if str(i)==l[i]]"}, "696": {"problem_id": 3057, "answer": "def is_bouncy(number):\n    s = str(number)\n    return sorted(s) == s"}, "697": {"problem_id": 3058, "answer": "def is_magical(sq):\n    return sum(sq[i*3:i*3+3]) == sum(sq[i*3:i*3+3][::-1])"}, "698": {"problem_id": 3059, "answer": "def rain_amount(mm):\n    if mm < 40:\n        return \"You need to give your plant \" + str(40 - mm) + \"mm of water\"\n    else:\n        return \"Your plant has had more than enough water for today!\""}, "699": {"problem_id": 3060, "answer": "def get_required(player,enemy):\n    p, e = sum(player), sum(enemy)\n    if p == e: return \"Random\"\n    elif p > e: return \"Auto-win\"\n    elif p < e: return \"Auto-lose\"\n    elif p == e: return \"Pray for a tie!\"\n    else: return \"({})\".format(max(map(int, p), max(map(int, e))))"}, "700": {"problem_id": 3061, "answer": "def most_frequent_item_count(collection):\n    return max(collection.count(item) for item in set(collection))"}, "701": {"problem_id": 3062, "answer": "def palindrome(num):\n    if type(num)!= int or num < 0:\n        return \"Not valid\"\n    s = str(num)\n    return s == s[::-1]"}, "702": {"problem_id": 3063, "answer": "from statistics import mean\n\ndef mix_fruit(arr):\n    return round(mean(5.7 for a in arr if a.isalnum()), 10)"}, "703": {"problem_id": 3064, "answer": "def transpose(arr):\n    return arr.tolist()"}, "704": {"problem_id": 3065, "answer": "import re\ndef get_textliterals(pv_code):\n    s = re.sub(r'\\s*' + '--.*', '', pv_code)\n    return [(len(s.split()), len(s))]"}, "705": {"problem_id": 3066, "answer": "def solve(s):\n    s = s.replace('()', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('{}', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    return s"}, "706": {"problem_id": 3067, "answer": "def getVolumeOfCubiod(length, width, height):\n    return length * width * height"}, "707": {"problem_id": 3068, "answer": "from string import ascii_lowercase as al, ascii_uppercase as au\n\ndef vowel_back(st):\n    return st.translate(str.maketrans(al + au, al[1:] + au[1:]))"}, "708": {"problem_id": 3069, "answer": "def greet(language):\n    d = {'english': 'Welcome',\n         'czech': 'Vitejte',\n         'danish': 'Velkomst',\n         'dutch': 'Welkom',\n         'estonian': 'Tere tulemast',\n         'finnish': 'Tervetuloa',\n         'flemish': 'Welgekomen',\n         'french': 'Bienvenue',\n         'german': 'Willkommen',\n         'irish': 'Failte',\n         'italian': 'Benvenuto',\n         'latvian': 'Gaidits',\n         'lithuanian': 'Laukiamas',\n         'polish': 'Witamy',\n        'spanish': 'Bienvenido',\n        'swedish': 'Valkommen',\n         'welsh': 'Croeso'}\n    return d.get(language, 'Welcome')"}, "709": {"problem_id": 3070, "answer": "def unique_sum(lst):\n    return sum(set(lst)) if lst else None"}, "710": {"problem_id": 3071, "answer": "def last_digit(n1, n2):\n    return int(str(n1) + str(n2)).bit_length()"}, "711": {"problem_id": 3072, "answer": "def is_narcissistic(*args):\n    try:\n        return all(int(n) == n for n in args)\n    except ValueError:\n        return False"}, "712": {"problem_id": 3073, "answer": "from math import factorial\nlst = [0] * 1000005\nfor i in range(1, 1000005):\n    lst[i] += factorial(i)\ndef increasing_numbers(digits):\n    return sum(lst[digits:].count(i) for i in range(10))"}, "713": {"problem_id": 3074, "answer": "def growing_plant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 0\n    while height < desiredHeight:\n        height += upSpeed\n        days += 1\n        if height >= desiredHeight:\n            return days\n        height -= downSpeed\n    return days"}, "714": {"problem_id": 3075, "answer": "def count_inversions(array):\n    return sum(1 for i in range(len(array)) if i not in inversions(array, i))"}, "715": {"problem_id": 3076, "answer": "def solve(arr):\n    lst = [i for i in arr if i[0] == 'Begin']\n    lst.extend(arr[::-1])\n    return ['Begin on'+ str(i[1]) + '\\n' for i in lst]"}, "716": {"problem_id": 3077, "answer": "def pattern(n):\n    return '\\n'.join([''.join([str(i) for i in range(1, n + 1)]).ljust(n,'') for _ in range(n)]);"}, "717": {"problem_id": 3078, "answer": "def array_center(arr):\n    m = min(arr)\n    n = len(arr)\n    return [i for i in arr if abs(i - m) < m]"}, "718": {"problem_id": 3079, "answer": "def big_primefac_div(n):\n    if isinstance(n, float) and n.is_integer():\n        n = abs(n)\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 1:\n        res.append(n)\n    return res"}, "719": {"problem_id": 3080, "answer": "def who_is_paying(name):\n    return [name, name[:2]] if len(name)>2 else [name]"}, "720": {"problem_id": 3081, "answer": "import random\ndef squares(n):\n    return [i**2 for i in range(1,n+1)]\n\ndef num_range(n, start, step):\n    return range(start, start+n*step, step)\n\ndef rand_range(n, mn, mx):\n    return random.randint(mn, mx)\n\ndef primes(n):\n    return [2,3,5,7,11,13,17,19]"}, "721": {"problem_id": 3082, "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number\n    \"\"\"\n    return n > 1 and all(n % d for d in range(2, int(n**0.5)+1))"}, "722": {"problem_id": 3083, "answer": "def polydivisible(x):\n    s = str(x)\n    return all(int(d)%i!=0 for i,d in enumerate(s))"}, "723": {"problem_id": 3084, "answer": "def combine(*args):\n    return {k: sum(v) for k, v in args.items()}"}, "724": {"problem_id": 3085, "answer": "def aks_test(p):\n    return all(n % p == 0 for n in range(1, p + 1, p))"}, "725": {"problem_id": 3086, "answer": "def unflatten(flat_array):\n    if len(flat_array) == 0:\n        return []\n    elif len(flat_array) == 1:\n        return flat_array[0]\n    else:\n        current_number = flat_array[0]\n        for i in range(1, len(flat_array)):\n            if current_number > 2:\n                current_number = current_number - flat_array[i]\n                flat_array.append(flat_array[i])\n            else:\n                flat_array.append(flat_array[i:])\n                current_number = current_number + flat_array[i]\n        flat_array = flat_array[1:]\n        return flat_array"}, "726": {"problem_id": 3087, "answer": "def solve(s):\n    return 'OK' if s == s[::-1] else'remove one' if s == s[::-1].replace('a', '')[:1] else 'not possible'"}, "727": {"problem_id": 3088, "answer": "def nba_extrap(ppg, mpg):\n    if mpg == 0:\n        return 0\n    else:\n        return round(ppg*.9,1)"}, "728": {"problem_id": 3089, "answer": "def dashatize(num):\n    return '-'.join(['-' + str(i) if i % 2!= 0 else str(i) for i in range(0, num + 1)])"}, "729": {"problem_id": 3090, "answer": "def find_2nd_largest(arr):\n    s = set(arr)\n    return next(s) if len(s) > 1 else None"}, "730": {"problem_id": 3091, "answer": "def omit_hashtag(message, hashtag):\n    return message.replace(hashtag, '', 1)"}, "731": {"problem_id": 3092, "answer": "def denumerate(enum_list):\n    try:\n        return ''.join(sorted(enum_list, key=lambda tup: tup[1]))\n    except:\n        return False"}, "732": {"problem_id": 3093, "answer": "def insert_dash(num):\n    return ''.join(str(-num % 2) if num % 2 else str(num))"}, "733": {"problem_id": 3094, "answer": "def sum_array(arr):\n    if arr == None:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        arr.sort()\n        return sum(arr[1:])"}, "734": {"problem_id": 3095, "answer": "def my_add(a, b):\n    try:\n        return a + b\n    except TypeError:\n        return None"}, "735": {"problem_id": 3096, "answer": "def josephus(items,k):\n    return [i for i in items if len(items)%k==0]"}, "736": {"problem_id": 3097, "answer": "def rad_ladies(name):\n    return \"\".join(c for c in name if c.isalpha() or c.isalnum() or c == \"!\")"}, "737": {"problem_id": 3098, "answer": "def compute_depth(n):\n    d = set(str(n))\n    return len(d)"}, "738": {"problem_id": 3099, "answer": "from string import ascii_letters as abcdefghijklmnopqrstuvwxyz\ndef whoIsWinner(moves, con, sz):\n    d = {'R':0,'Y':1,'S':2}\n    for i in range(sz):\n        d[abcdefghijklmnopqrstuvwxyz[i]] += 1\n        for j in range(max(0, con-1), min(sz, con)):\n            x, y, z = abcdefghijklmnopqrstuvwxyz[j], abcdefghijklmnopqrstuvwxyz[j+1], abcdefghijklmnopqrstuvwxyz[j+2]\n            if x == con and y == con and z == con:\n                return True\n    return False"}, "739": {"problem_id": 3100, "answer": "def max_and_min(arr1,arr2):\n    m,n = max(arr1),min(arr2)\n    return [m,n]"}, "740": {"problem_id": 3101, "answer": "def palindrome_pairs(words):\n    return [[i,j] for i, j in enumerate(words) if str(words[i]) + str(words[j]) == str(words[:i]) + str(words[j:])]"}, "741": {"problem_id": 3102, "answer": "def locker_run(lockers):\n    return [i for i in range(1, lockers+1) if i % 2 == 0]"}, "742": {"problem_id": 3103, "answer": "def unique(integers):\n    return list(sorted(integers, key=int.__contains__))"}, "743": {"problem_id": 3104, "answer": "from math import ceil\ndef reindeer(presents):\n    if presents > 180: raise Exception(\"Too many presents\")\n    return 2 + ceil(presents/30)"}, "744": {"problem_id": 3105, "answer": "def count_sheep(n):\n    # your code\n    str = \"\"\n    for i in range(1, n+1):\n        str += f\"{i} sheep...\"\n    return str"}, "745": {"problem_id": 3106, "answer": "from functools import reduce\ndef combs_non_empty_boxes(n,k):\n    if k>n: return \"It cannot be possible!\"\n    l=reduce(lambda x,y:x*y,range(1,n+1),[]);l=l[:]+l[::-1]\n    return len(l)"}, "746": {"problem_id": 3107, "answer": "def distance(p1, p2):\n    return sum((x-y)**2 for x,y in zip(p1, p2))**0.5 if len(p1)==len(p2) else -1"}, "747": {"problem_id": 3108, "answer": "def multi_table(number):\n    return '\\n'.join(f'{i} * {number} = {i * number}\\n' for i in range(1, 11))"}, "748": {"problem_id": 3109, "answer": "import re\ndef scramble_words(words):\n    return ''.join(sorted(words.split(' '), key=lambda x: x[0]))"}, "749": {"problem_id": 3110, "answer": "def two_decimal_places(n):\n    return round(n, 2)"}, "750": {"problem_id": 3111, "answer": "def number_format(n):\n    return ','.join(str(i) for i in range(n, 0, -1))"}, "751": {"problem_id": 3112, "answer": "def avoid_obstacles(arr):\n    x = 0\n    y = 0\n    for i in range(1, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n        elif arr[i] < y:\n            y = arr[i]\n    return y"}, "752": {"problem_id": 3113, "answer": "def distribute(m, n):\n    if m <= 0:\n        return []\n    if n <= 0:\n        return []\n    cnt = 0\n    for i in range(n):\n        cnt += (m-i)\n        m = i\n    return [cnt]"}, "753": {"problem_id": 3114, "answer": "def year_days(year):\n    if year%100==0:\n        if year%400==0:\n            return f'{year} has 366 days'\n        else:\n            return f'{year} has 365 days'\n    elif year%4==0:\n        return f'{year} has 366 days'\n    else:\n        return f'{year} has 365 days'"}, "754": {"problem_id": 3115, "answer": "def diagonal_sum(array):\n    return sum(array[i] for i in range(1, len(array)) if array[i][0] == i)"}, "755": {"problem_id": 3116, "answer": "def cal_n_bug(n_head, n_leg, n_wing):\n    spider = 8 - n_leg\n    butterfly = 6 - n_wing\n    dragonfly = 2 - n_leg\n    return [spider,butterfly,dragonfly] if spider>0 and butterfly>0 and dragonfly>0 else [-1,-1,-1]"}, "756": {"problem_id": 3117, "answer": "def solve(s):\n    return max(len(s) for i in range(len(s)) if s[i] in 'aeiou')"}, "757": {"problem_id": 3118, "answer": "def is_lucky(n):\n    return sum(map(int, str(n))) % 9 == 0"}, "758": {"problem_id": 3119, "answer": ""}, "759": {"problem_id": 3120, "answer": "def meeting(rooms, number):\n    if number == 0:\n        return \"Game On\"\n    chairs = []\n    for r in rooms:\n        chairs.append(min(8, len(r.occupants)))\n        if chairs == r.occupants:\n            return [r.occupants] + chairs"}, "760": {"problem_id": 3121, "answer": "def solve(arr):\n    for i in arr:\n        if arr.count(i)!= arr.count(-i):\n            return i"}, "761": {"problem_id": 3122, "answer": "def chess_triangle(n, m):\n    return sum(8*(n-i)*(m-j) for i in range(1,n+1) for j in range(1,m+1))"}, "762": {"problem_id": 3123, "answer": "def count_repeats(s):\n    return sum(1 for c in s if c not in 'ab cca')"}, "763": {"problem_id": 3124, "answer": "def get_exponent(n, p):\n    if p <= 1:\n        return None\n    elif n % p == 0:\n        return n // p"}, "764": {"problem_id": 3125, "answer": "def solve(n):\n    if n < 4:\n        return -1\n    N = int(n**0.5)\n    while N > 0:\n        N //= 2\n        if n + N.is_integer():\n            return N\n    return -1"}, "765": {"problem_id": 3126, "answer": "def palindrome_rearranging(s):\n    return sum(s.count(c) % 2 for c in set(s)) < 2"}, "766": {"problem_id": 3127, "answer": "def string_chunk(string, n=0):\n    if type(n)!= int or n <= 0:\n        return []\n    return [string[i:i+n] for i in range(0, len(string), n)]"}, "767": {"problem_id": 3128, "answer": "def is_mac_48_address(address):\n    return '0x' + address.translate(str.maketrans('0123456789ABCDEF', 'abcdefghijklmnopqrstuvwxyz')) not in '0123456789ABCDEF'"}, "768": {"problem_id": 3129, "answer": "def divisible_by_three(st):\n    return sum(int(n) for n in st) % 3 == 0"}, "769": {"problem_id": 3130, "answer": "def has_subpattern(string):\n    s = len(string)\n    for i in range(1, s//2 + 1):\n        if string[i-1] + string[i] == string[s-i-1]:\n            return True\n    return False"}, "770": {"problem_id": 3131, "answer": "from functools import reduce\nfrom operator import mul\ngetcontext().prec = 10**9"}, "771": {"problem_id": 3132, "answer": "def alternate_sort(l):\n    neg, n = 0, -1\n    for x in sorted(l):\n        if x < 0:\n            neg += 1\n        elif x > 0:\n            n += 1\n    return neg, n"}, "772": {"problem_id": 3133, "answer": "def vaccine_list(age, status, month):\n    d = {'fiveInOne': ['8 weeks', '12 weeks', '16 weeks'],\n          'pneumococcal': ['8 weeks', '16 weeks'],\n          'rotavirus': ['8 weeks', '12 weeks'],\n         'meningitisB': ['8 weeks', '16 weeks', '12 months'],\n          'hibMenC': ['12 months'],\n         'measlesMumpsRubella': ['12 months', '40 months'],\n          'fluVaccine': ['september','october','november'],\n          'preSchoolBooster': ['40 months']}\n    return sorted(d.keys(), key=lambda x: x[0]) + [m]"}, "773": {"problem_id": 3134, "answer": "import re\ndef is_valid(idn):\n    return bool(re.match('^[a-zA-Z_$][\\w$]*$',idn))"}, "774": {"problem_id": 3135, "answer": "def meeting_time(Ta, Tb, r):\n    if Ta == 0:\n        return '%d:%d' % (Tb, abs(Tb))\n    elif Tb == 0:\n        return '%d:%d' % (Ta, abs(Ta))\n    else:\n        return f'{abs(Ta)**2 + abs(Tb)**2}:\\frac{1}{2}'.rstrip('0')"}, "775": {"problem_id": 3136, "answer": "def people_with_age_drink(age):\n    if age < 14:\n        return \"drink toddy\"\n    elif age < 18:\n        return \"drink coke\"\n    elif age < 21:\n        return \"drink beer\"\n    else:\n        return \"drink whisky\""}, "776": {"problem_id": 3137, "answer": ""}, "777": {"problem_id": 3138, "answer": "def climb(n):\n    return [n//2] + [n+1 if n%2 else n//2]"}, "778": {"problem_id": 3139, "answer": "def index(array, n):\n    if n >= len(array):\n        return -1\n    else:\n        return array[n] ** n"}, "779": {"problem_id": 3140, "answer": "def happy_numbers(n):\n    return [i for i in range(1,n+1) if i not in [1,2,3,4,5,6,7,8,9]]"}, "780": {"problem_id": 3141, "answer": "from heapq import heapify, heappush, heappop\n\ndef comb(fruits):\n    heapify(fruits)\n    total_cost = 0\n    while len(fruits) > 1:\n        total_cost += heappop(fruits)\n        heappush(fruits, heappop(fruits)[1])\n    return total_cost"}, "781": {"problem_id": 3142, "answer": "def seven_ate9(str_):\n    return ''.join(s for s in str_ if s.isalnum())"}, "782": {"problem_id": 3143, "answer": "def sort_by_name(arr):\n    return sorted(arr, key=lambda x: x.lower())"}, "783": {"problem_id": 3144, "answer": "from collections import Counter\n\ndef number_of_pairs(gloves):\n    return sum(c//2 for c in Counter(gloves).values())"}, "784": {"problem_id": 3145, "answer": "def greet(name):\n    return \"Hello, {} how are you doing today?\".format(name)"}, "785": {"problem_id": 3146, "answer": "def to_utf8_binary(string):\n    return ''.join(format(c, 'b') for c in string.encode('utf-8'))\n"}, "786": {"problem_id": 3147, "answer": "from itertools import accumulate\ndef total_primes(a, b):\n    primes = [2, 3]\n    for i in range(a, b+1):\n        if i not in primes:\n            primes.append(i)\n    return list(accumulate(primes))"}, "787": {"problem_id": 3148, "answer": "def simplify(path):\n    d = {'^': (0,1), 'v': (0,-1), '<':(-1,0), '>':(1,0)}\n    for i in path:\n        d[i[0]] += (i[1],1)\n        d[i[1]] += (i[0],1)\n    return ''.join(reversed(d.get(k,k)) for k in d)"}, "788": {"problem_id": 3149, "answer": "def roof_fix(f,r):\n    return all(c =='' for c in zip(*[iter(r)]*2))"}, "789": {"problem_id": 3150, "answer": "def binary_cleaner(seq): \n    return [n for n in seq if n < 2], [i for i, n in enumerate(seq) if n > 1]"}, "790": {"problem_id": 3151, "answer": "def totalAmountVisible(topNum, numOfSides):\n    return sum(1 for i in range(numOfSides) if i%2!=0)"}, "791": {"problem_id": 3152, "answer": "def interpreter(tape, array):\n    s = 0\n    for i in array:\n        if i == \"1\":\n            s += 1\n        else:\n            s += -1\n    return \"\".join(map(str, array[s:]))"}, "792": {"problem_id": 3153, "answer": "def playerRankUp(pts):\n    if pts >= 100:\n        return \"Well done! You have advanced to the qualifying stage. Win 2 out of your next 3 games to rank up.\"\n    else:\n        return False"}, "793": {"problem_id": 3154, "answer": "def color_2_grey(colors):\n    return [[[round(sum(rgb) / 3.0) for rgb in row] for row in colors] for rgb in zip(*colors)]"}, "794": {"problem_id": 3155, "answer": "fit_in = lambda a,b,m,n: min(a,b) + max(m,n)"}, "795": {"problem_id": 3156, "answer": "def even_digit_squares(a, b):\n    return [n*n for n in range(a, b)]"}, "796": {"problem_id": 3157, "answer": "def number(bus_stops):\n    # Good Luck!\n    return sum(i[0]-i[1] for i in bus_stops)"}, "797": {"problem_id": 3158, "answer": "def one_down(txt):\n    if type(txt) is not str:\n        return \"Input is not a string\"\n    s = ''.join(chr(97 + i) for i in txt)\n    return \"\".join(s[i:i+len(s) - len(s.isalpha())] for i in range(0, len(s), len(s)))"}, "798": {"problem_id": 3159, "answer": "def is_odd_heavy(arr):\n    return len(arr) == len(set(arr))"}, "799": {"problem_id": 3160, "answer": "from functools import reduce\ndef multi(l_st):\n    return reduce(lambda a, b: a * b, l_st, 1)"}, "800": {"problem_id": 3161, "answer": "def select(memory):\n    s = memory.split(', ')\n    s.pop()\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop(0)\n    s.pop("}, "801": {"problem_id": 3162, "answer": "def compare(s1,s2):\n    if s1 == None or not s1.isalpha():\n        s1 = ''\n    if s2 == None or not s2.isalpha():\n        s2 = ''\n    return sum([ord(x) for x in s1.upper()]) == sum([ord(x) for x in s2.upper()])"}, "802": {"problem_id": 3163, "answer": "def triangular_sum(n):\n    return n**0.5 % 1 == 0"}, "803": {"problem_id": 3164, "answer": "def group_by_commas(n):\n    return '{:,}'.format(n)"}, "804": {"problem_id": 3165, "answer": "from math import log2\n\ndef toothpick(n):\n    \"\"\"TODO: O(1)\"\"\"\n    if n == 0:\n        return 0\n    i = 1\n    k = 2**(log2(n))\n    while i <= n:\n        k += 2**i\n        i += log2(i)\n    return k"}, "805": {"problem_id": 3166, "answer": "def circle_slash(n):\n    return int(n**.5)"}, "806": {"problem_id": 3167, "answer": "def twos_difference(lst): \n    return [(i, j) for i, j in enumerate(lst) if abs(i - j) == 2]"}, "807": {"problem_id": 3168, "answer": "def grabscrab(word, possible_words):\n    return [word] + list(filter(lambda w: sorted(w) == sorted(possible_words), possible_words))"}, "808": {"problem_id": 3169, "answer": "def count_odd_pentaFib(n):\n    return sum(1 for i in range(n+1) if i%2!=0)"}, "809": {"problem_id": 3170, "answer": "def longer(s):\n    return''.join(sorted(sorted(s.split(' ')), key=len))"}, "810": {"problem_id": 3171, "answer": "from functools import reduce\nclass Crash(object):\n    def __init__(self, w):\n        self.w = w\n        self.sz = len(w)\n    def __lt__(self, other):\n        return self.w > other.w\n    def __eq__(self, other):\n        return self.w == other.w"}, "811": {"problem_id": 3172, "answer": ""}, "812": {"problem_id": 3173, "answer": "def create_array(n):\n    res=[]\n    i=1\n    while i<=n:\n        res+=[i]\n        i+=1\n    return res"}, "813": {"problem_id": 3174, "answer": "import re\nd = {'+':lambda x:x.replace('+','').replace('-','-')}\nderivative = d.get"}, "814": {"problem_id": 3175, "answer": "def triple_double(num1, num2):\n    #your code here\n    a = str(num1)\n    b = str(num2)\n    c = ''.join(a[i]*3 for i in range(len(a)) if a[i] not in '12345678')\n    d = ''.join(b[i]*2 for i in range(len(b)) if b[i] not in '12345678')\n    return 1 if c == d else 0"}, "815": {"problem_id": 3176, "answer": "import re\ndef to_cents(amount):\n    m = re.match(r'\\$(\\d+)\\.(\\d\\d)\\Z', amount)\n    return int(m.group(1) or '0')"}, "816": {"problem_id": 3177, "answer": "def palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return \"Not valid\"\n    elif num < 10:\n        return \"No palindromes found\"\n    else:\n        s = str(num)\n        return [s[i:i+len(s)//2] for i in range(0, len(s), 2)]"}, "817": {"problem_id": 3178, "answer": "import re\ndef pete_talk(s,ok=[]):\n    ok = [m.group() for m in re.finditer(r'[^\\w\\s]',s)]\n    return''.join(ok)"}, "818": {"problem_id": 3179, "answer": "def min_and_max(l, d, x):\n    m = 10**len(str(l))\n    return [l, d, sum(map(int, str(x)))) if l < d < d+1 else [d+1, l, sum(map(int, str(x)))]"}, "819": {"problem_id": 3180, "answer": "def trotter(n):\n    digits = set(\"0123456789\")\n    while n > 9:\n        n = 3*n\n        digits.update(str(n))\n    return \"INSOMNIA\""}, "820": {"problem_id": 3181, "answer": "def check_alive(health):\n    if health <= 0:\n        return False\n    else:\n        return True"}, "821": {"problem_id": 3182, "answer": "def LDTA(n):\n    seen = set()\n    for i in range(1, int(n**0.5)+1):\n        if i not in seen:\n            seen.add(i)\n            seen.add(int(str(n**i)[-1]))\n            \n    return int(str(n**(len(seen)-1)))"}, "822": {"problem_id": 3183, "answer": "def interpreter(tape):\n    memory, out, stop = {0:0}, 0, False\n    for c in tape:\n        if c == '>':\n            memory[0] = 1\n        elif c == '<':\n            memory[1] = -1\n        elif c == '+':\n            memory[0] = int(memory[0] + 1)\n        elif c == '-':\n            memory[1] = int(memory[1] - 1)\n        elif c == '*':\n            out += chr(memory[0])\n        elif c == '&':\n            stop = True\n        elif c == '/':\n            if memory[0] == 0:\n                stop = False\n        elif c == '\\\\':\n            stop = False\n        else:\n            memory[c] = 0"}, "823": {"problem_id": 3184, "answer": "def total_bill(s):\n    n = 0\n    r = s.count('r')\n    c = s.count(' ')\n    return 2*r+c"}, "824": {"problem_id": 3185, "answer": "def rotate_against_clockwise(matrix, times):\n    return [a % 2 for a in zip(*matrix)]"}, "825": {"problem_id": 3186, "answer": "def similarity(a, b):\n    return len(set(a).intersection(set(b))) / len(set(a).union(set(b)))"}, "826": {"problem_id": 3187, "answer": "def sum_nested(lst):\n    return sum(el if isinstance(el, list) else sum_nested(el) for el in lst)"}, "827": {"problem_id": 3188, "answer": "def basereduct(x):\n    b=str(x)\n    if len(b)==1:\n        return int(b)\n    elif len(b)==2:\n        return int(b[0])*11+int(b[1])\n    else:\n        return -1"}, "828": {"problem_id": 3189, "answer": "def convert(st):\n    return st.translate(str.maketrans('ao', 'ou'))"}, "829": {"problem_id": 3190, "answer": "from itertools import count\nPRIMES = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\ndef solve(a, b):\n    s = 0\n    for p in PRIMES:\n        if int(p) ** 2 <= a and int(p) ** 2 >= b:\n            s += count(2)\n    return s"}, "830": {"problem_id": 3191, "answer": "from itertools import cycle\ndef decode(code, key):\n    key = cycle(int(x) for x in str(key))\n    return ''.join(chr(96 + i) for i in code)"}, "831": {"problem_id": 3192, "answer": "def how_many_dalmatians(n):\n    dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIONS!!!\"]\n    return dogs[0] if n <= 10 else dogs[1] if n <= 50 else dogs[3] if n == 101 else dogs[2]"}, "832": {"problem_id": 3193, "answer": "def stairs(n):\n    return '\\n'.join(' '.join(str(x) for x in range(1, n+1)) for str(x) in'')"}, "833": {"problem_id": 3194, "answer": ""}, "834": {"problem_id": 3195, "answer": "def braces_status(s):\n    stack = []\n    for c in s:\n        if c in '(){}':\n            stack.append(c)\n        elif c in '{}[]:':\n            stack.pop()\n        elif c in '[()]':\n            stack.pop()\n        else:\n            return False\n    return not stack"}, "835": {"problem_id": 3196, "answer": "def triangular_range(start, stop):\n    n = 0\n    result = {}\n    for i in range(start, stop+1):\n        n += 1\n        result[i] = n\n    return result"}, "836": {"problem_id": 3197, "answer": ""}, "837": {"problem_id": 3198, "answer": "def check_exam(arr1,arr2):\n    score = 0\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            score += 4\n        elif arr2[i] == \"\":\n            score += 0\n        else:\n            score -= 1\n    if score < 0:\n        return 0\n    else:\n        return score\n"}, "838": {"problem_id": 3199, "answer": "def greet(name):\n    if name == \"\":\n        return None\n    elif name.isalpha() == True:\n        return \"hello \" + name"}, "839": {"problem_id": 3200, "answer": "from itertools import cycle\n\ndef thirt(n):\n    c = cycle(str(n))\n    return next(c)"}, "840": {"problem_id": 3201, "answer": "import re\ndef validate_time(time):\n    return bool(re.match('^[0-1]?[0-9]:[0-5][0-9]$|^\\d{2}:\\d{2}$',time))"}, "841": {"problem_id": 3202, "answer": "def greet(name, owner):\n    if name == owner:\n        return 'Hello boss'\n    else:\n        return 'Hello guest'"}, "842": {"problem_id": 3203, "answer": "import re\ndef parse_mana_cost(mana):\n    r = re.compile(r'\\d*[wubrg]*')\n    mana_dict = {}\n    for i in mana:\n        if i.isalpha():\n            color = i.lower()\n            mana_dict[color] = mana_dict.get(color,0) + 1\n    return mana_dict"}, "843": {"problem_id": 3204, "answer": "def Guess_it(n,m):\n    \"\"\"\n    Calculate the quantities of each ball.\n    \"\"\"\n    g = 5\n    r = 4\n    b = 3\n    result = []\n    for i in range(n):\n        result.append([g,r,b])\n        g += 5\n        r += 4\n        b += 3\n    return result"}, "844": {"problem_id": 3205, "answer": "def is_divisible(n,x,y):\n    return True if n % x == 0 and n % y == 0 else False"}, "845": {"problem_id": 3206, "answer": "from math import pi\n\ndef sum_circles(*args):\n    return 'We have this much circle: {}'.format(int(round(sum(pi*(d/2.0)**2 for d in args))))"}, "846": {"problem_id": 3207, "answer": "def reverseWords(s):\n    s = s.split(' ')\n    return''.join(reversed(s))"}, "847": {"problem_id": 3208, "answer": "def queue_time(customers, n):\n    tills = 0\n    for i in customers:\n        tills += i\n        if n > 1:\n            tills += customers.index(min(tills, i))\n    return tills"}, "848": {"problem_id": 3209, "answer": "def find_unknown_number(x,y,z):\n    return int(str(x) + \"-\" + str(y) + \"-\" + str(z))"}, "849": {"problem_id": 3210, "answer": "def get_strings(city):\n    city = city.lower()\n    d = {}\n    for i in city:\n        if i not in d:\n            d[i] = '*'\n        else:\n            d[i] = i\n    l = list(d.keys())\n    l.sort()\n    return ','.join(l)"}, "850": {"problem_id": 3211, "answer": "def divide(weight):\n    return weight % 2 == 0 and weight > 2"}, "851": {"problem_id": 3212, "answer": "def generate_hashtag(s):\n    if len(s)>140:\n        return False\n    else:\n        s = s.title().replace(' ', '')\n        return '#' + s"}, "852": {"problem_id": 3213, "answer": "def sum_of_a_beach(beach):\n    return sum(beach.lower().count(c) for c in [\"sand\", \"water\", \"fish\", \"sun\"])"}, "853": {"problem_id": 3214, "answer": "def change(st):\n    return ''.join(['1' if ch in 'abcdefghijklmnopqrstuvwxyz' else '0' for ch in st.lower()])"}, "854": {"problem_id": 3215, "answer": "def reduce_pyramid(base):\n    l = len(base)\n    res = 0\n    for i in range(l):\n        res += base[i]\n        base[i] = base[i] + base[i]\n    return res"}, "855": {"problem_id": 3216, "answer": "import math\ndef movie(card, ticket, perc):\n    n = 1\n    system_a = ticket\n    system_b = card + ticket*perc\n    while system_b.__le__(500):\n        n += 1\n        system_a += ticket\n        system_b += ticket*(perc**n)\n    return n"}, "856": {"problem_id": 3217, "answer": "from fractions import Fraction\ndef sum_fracts(lst):\n    n, d = Fraction(1, len(lst))\n    return [n, d] if lst else [sum(lst[i] for i in range(len(lst)) if is_divisible(lst[i][0], n) and is_divisible(lst[i][1], d))]"}, "857": {"problem_id": 3218, "answer": "def SJF(jobs, index):\n    return sum(j for j in range(1, len(jobs)) if jobs[j] <= jobs[index] )"}, "858": {"problem_id": 3219, "answer": "from itertools import permutations\n\ndef find_primes_sextuplet(s):\n    p = 2\n    while s > 1:\n        if s % p == 0:\n            return [p, s // p]\n        p += 4\n        s //= p\n    return [p, s]"}, "859": {"problem_id": 3220, "answer": "from fractions import Fraction as F\nfrom functools import reduce\n\ndef divisors(n):\n    \"\"\"Calculates the number of divisors of n.\"\"\"\n    return sum(F(i) for i in range(1, int(n**0.5)+1) if n % i == 0)\n\ndef solve(a, b):\n    \"\"\"Groups numbers into pairs with the same ratios.\"\"\"\n    return reduce(F.mul, (divisors(n) for n in range(a, b+1)), 0)"}, "860": {"problem_id": 3221, "answer": "def find_it(seq):\n    return next((i for i in seq if seq.count(i) % 2!= 0), len(seq))"}, "861": {"problem_id": 3222, "answer": "def get_sum(a,b):\n    return sum(range(a,b+1,a-b+1))"}, "862": {"problem_id": 3223, "answer": "def find_closest_value(m):\n    l = [m]\n    while l[-1] < 5e14:\n        l.append(l[-1] + 1)\n    return l[0]"}, "863": {"problem_id": 3224, "answer": "def binary_pyramid(m,n):\n    return bin(sum(int(bin(x)[2:]) for x in range(m,n+1)))[2:]"}, "864": {"problem_id": 3225, "answer": "def find_all(array, n):\n    return [i for i in range(len(array)) if array[i] == n]"}, "865": {"problem_id": 3226, "answer": "def land_perimeter(arr):\n    perimetr = 0\n    for i in range(len(arr)):\n        if arr[i] == 'X':\n            perimetr += 1\n        elif arr[i] == 'O':\n            perimetr -= 1\n    return 'Total land perimeter:'+ str(perimetr) + '\\n' + 'Total land perimeter:'+ str(perimetr * arr.count('X'))"}, "866": {"problem_id": 3227, "answer": "def to_lover_case(string):\n    return ''.join(c.lower() if c.islower() else c for c in string)"}, "867": {"problem_id": 3228, "answer": "def word_pattern(pattern, string):\n    return len(reversed(pattern)) == len(reversed(string))"}, "868": {"problem_id": 3229, "answer": "import math\ndef am_i_wilson(n):\n    if n==5 or n==13 or n==563:\n        return True\n    else:\n        return False"}, "869": {"problem_id": 3230, "answer": "def the_biggest_search_keys(*s):\n    return ', '.join(sorted(s, key=len, reverse=True))"}, "870": {"problem_id": 3231, "answer": "def case_unification(s):\n    return s.upper() if sum(1 for i in range(len(s)) if s[i].islower()) < len(s) // 2 else s.lower()"}, "871": {"problem_id": 3232, "answer": "def length_of_sequence(arr,n):\n    if arr.count(n)>2:\n        return 0\n    else:\n        return arr.index(n)+1"}, "872": {"problem_id": 3233, "answer": "def robot_transfer(matrix, k):\n    n = len(matrix)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if abs(i[0]-j[0])+abs(i[1]-j[1])<=k:\n                count+=1\n    return count"}, "873": {"problem_id": 3234, "answer": "from functools import reduce\nfrom operator import mul\ndef select_subarray(arr):\n    l=len(arr)\n    if l==0:\n        return []\n    arr.sort()\n    q=reduce(mul,arr)\n    return [i for i in range(l-1) if abs(q)<=l]"}, "874": {"problem_id": 3235, "answer": "def decompose_single_strand(s):\n    r=[]\n    for i in range(3):\n        r.append('Frame '.i+'\\n'.join(reversed(s[i:i+3])))\n    return '\\n'.join(r)"}, "875": {"problem_id": 3236, "answer": "def my_crib(n):\n    r ='   '\n    r += '\\n'.join(f'{x} {y}' for x,y in enumerate((''* n)[::-1]))\n    r += '\\n'.join(f'{x} {y}' for x,y in enumerate((''* n)[::-1]))\n    return r"}, "876": {"problem_id": 3237, "answer": "def even_or_odd(number):\n    if number % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}, "877": {"problem_id": 3238, "answer": "def get_users_ids(s):\n    return [x.strip()[3:].strip() for x in s.replace('#','').lower().split(',')]"}, "878": {"problem_id": 3239, "answer": "def guess_hat_color(a,b,c,d):\n    return (1,2,3,4)[min(a,b,c,d)]"}, "879": {"problem_id": 3240, "answer": "def true_binary(n):\n    return [1 if bin(n)[2:].count('1')%2 else -1 for i in range(n)]"}, "880": {"problem_id": 3241, "answer": "def buy_newspaper(s1,s2):\n    n = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            n += 1\n        elif s1[i]!= s2[i]:\n            n += 1\n    return -1 if n == 0 else n"}, "881": {"problem_id": 3242, "answer": "from functools import reduce\nfrom operator import mul\n\ndef maximum_product(arr):\n    return next(i for i in arr if i > 0)"}, "882": {"problem_id": 3243, "answer": "def bus_timer(current_time):\n    hh, mm = divmod(current_time, 60)\n    if hh == 0:\n        return 10 - mm\n    elif hh == 15:\n        return 10 - mm\n    else:\n        return (hh + mm) - 5\n"}, "883": {"problem_id": 3244, "answer": "def cheapest_quote(n):\n    prices = [0, 1, 0.97, 0.49, 0.10, 0.19, 0.05, 0.01]\n    for i in range(n):\n        prices.append(prices[i] + (3.85 if 40 <= i <= 80 else 1.93 if 20 <= i <= 40 else 0.97 if 10 <= i <= 20 else 0.49 if 5 <= i <= 10 else 0.10 if 1 <= i <= 5])\n    return round(n / prices[0], 2)"}, "884": {"problem_id": 3245, "answer": "from math import factorial as f\ndef checkchoose(m, n):\n    if m>n: return -1\n    elif m==n: return 1\n    x=f(n)//(f(n-1)*f(n-2)*f(n-3)*f(n-4))\n    return x"}, "885": {"problem_id": 3246, "answer": "from collections import Counter\n\ndef majority(arr):\n    cnt = Counter(arr).most_common(2)\n    if cnt[0][1] == 1:\n        return cnt[0][0]\n    else:\n        return None"}, "886": {"problem_id": 3247, "answer": "def sort_by_height(a):\n    d = {i:a.count(i) for i in range(len(a))}\n    return sorted(d.items(), key=lambda x: (-x[1], x[0]))"}, "887": {"problem_id": 3248, "answer": "notes_dictionary = {\n    440: \"A\",\n    466.16: \"A#\",\n    493.88: \"B\",\n    523.25: \"C\",\n    554.37: \"C#\", \n    587.33: \"D\", \n    622.25: \"D#\", \n    659.25: \"E\", \n    698.46: \"F\", \n    739.99: \"F#\", \n    783.99: \"G\", \n    830.61: \"G#\"\n}\ndef get_note(pitch):\n    return next(n for n in notes_dictionary.keys() if pitch*2<n)"}, "888": {"problem_id": 3249, "answer": "def regressionLine(x, y):\n    a, b = divmod(sum(x)**2, len(x))\n    return round(a, 4), round(b, 4)"}, "889": {"problem_id": 3250, "answer": "from re import sub\ndef short_form(s):\n    return sub(r'[aeiouAEIOU]', '', s)"}, "890": {"problem_id": 3251, "answer": "import math\ndef primeFactors(n):\n    pf = []\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            pf.append(i)\n            n /= i\n        i += 1\n    if n!= 1:\n        pf.append(n)\n    return ''.join(f'({i}**{factor})' for i,factor in enumerate(sorted(pf)))"}, "891": {"problem_id": 3252, "answer": "def is_letter(s):\n    return ''.join(c for c in s if c.isalpha()) == s"}, "892": {"problem_id": 3253, "answer": "def womens_age(n):\n    return f\"{n}? That's just {20+n%2}, in base {n//2}!\""}, "893": {"problem_id": 3254, "answer": "def any_odd(x):\n    return bin(x).count('1')"}, "894": {"problem_id": 3255, "answer": "def only_duplicates(string):\n    return ''.join(c for c in string if string.count(c) > 1)"}, "895": {"problem_id": 3256, "answer": "def sum_pow_dig_seq(start, n, k):\n    seq = [start]\n    while len(seq) < k:\n        seq.append(sum(int(d) ** n for d in str(seq[-1])))\n        if seq[-1] == seq[-2]:\n            del seq[-1]\n        else:\n            seq.append(seq[-1] + seq[-2])\n    return [seq[-1], seq[-2], len(seq), seq[-1]]"}, "896": {"problem_id": 3257, "answer": "from itertools import permutations\n\ndef slogan_maker(array):\n    return [''.join(p) for p in sorted(set(permutations(array, len(array))))]"}, "897": {"problem_id": 3258, "answer": "def transpose(amount, tab):\n    tab = [''.join(chr(n%6) for n in row) for row in tab]\n    return 'Out of frets!' if amount > 22 else ''.join(tab).ljust(amount)"}, "898": {"problem_id": 3259, "answer": "import re\ndef tv_remote(words):\n    a = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    d = {c:i for i,c in enumerate(a)}\n    e = {c:i for i,c in enumerate(a)}\n    s =''\n    words = words.lower().replace('@',s).upper()\n    x = 0\n    y = 0\n    for i in words:\n        x,y = abs(x-d[i[0]]),abs(y-e[i[1]])\n        if x==y:\n            x,y = y,x\n        elif x>y:\n            y,x = x,y\n        else:\n            x,y = y,x\n        d[i[0]] = i[1]\n        e[i[1]] = i[0]\n    return x+y"}, "899": {"problem_id": 3260, "answer": "from itertools import permutations\n\ndef rearranger(k, *args):\n    min_num = 10**10\n    ar = sorted(permutations(args, min_num))\n    return \"Rearrangement: {} generates: {} divisible by {}\".format(len(ar), min_num, \"\".join(ar))"}, "900": {"problem_id": 3261, "answer": "import re\ndef sort_poker(john, uncle):\n    suits = [\"S\", \"D\", \"H\", \"C\"]\n    return ''.join(sorted(john, key=lambda x: re.findall(r'[SDHC]',uncle)))"}, "901": {"problem_id": 3262, "answer": "from collections import deque\n\ndef group_cities(seq):\n    return sorted(sorted(set(seq)), key=lambda x: (-len(x), x.lower()))"}, "902": {"problem_id": 3263, "answer": "def solve(arr):\n    arr = sorted(arr)\n    m = 0\n    for i in range(len(arr)):\n        m += arr[i].count(min(arr[i]))\n    return f\"{m:02}:{'.'.join(sorted(arr))}\""}, "903": {"problem_id": 3264, "answer": "from math import *\ndef count(n):\n    return ceil(log10(n))"}, "904": {"problem_id": 3265, "answer": "def mult_triangle(n):\n    even_sum = n*(n+1)//2\n    odd_sum = n*(n-1)//2\n    total_sum = even_sum + odd_sum\n    return [total_sum, total_sum//2, total_sum//3]"}, "905": {"problem_id": 3266, "answer": "def my_first_kata(a,b):\n    if type(a) == type(b) == int:\n        return a % b + b % a\n    else:\n        return False"}, "906": {"problem_id": 3267, "answer": "def well(x):\n    goodIdeas = 0\n    for idea in x:\n        if idea == \"good\":\n            goodIdeas += 1\n    if goodIdeas > 2:\n        return \"I smell a series!\"\n    elif goodIdeas > 0:\n        return \"Publish!\"\n    else:\n        return \"Fail!\""}, "907": {"problem_id": 3268, "answer": "def words_to_object(s):\n    return '[' + ', '.join(f'{name} : {id}' for name, id in zip(s.split()[::2], s.split()[1::2])) + ']'"}, "908": {"problem_id": 3269, "answer": "def work_needed(projectMinutes, freeLancers):\n    h, m = map(int, zip(*freeLancers))\n    return \"Easy Money!\" if projectMinutes - sum(h) <= 60 else \"I need to work {} hour(s) and {} minute(s)\".format(minutes = sum(m))"}, "909": {"problem_id": 3270, "answer": "from math import sqrt\n\ndef closest_pair_tonum(upper_lim):\n    \"\"\"\n    :type upper_lim: int\n    :rtype: list\n    \"\"\"\n    m, n = int(sqrt(upper_lim)) - 1, int(sqrt(upper_lim)) + 1\n    while m < n:\n        if m + n == n**.5:\n            return [m, n]\n        m, n = m + 1, n - 1\n    return []"}, "910": {"problem_id": 3271, "answer": "def arr(n=0):\n    # [ the numbers 0 to N-1 ]\n    return [i for i in range(n)]"}, "911": {"problem_id": 3272, "answer": "def find_average(nums):\n    return sum(nums) / len(nums) if nums else 0"}, "912": {"problem_id": 3273, "answer": "def solve(str1, str2):\n    s1, s2 = len(str1), len(str2)\n    if s1 == 2 or s2 == 2: return 0\n    if s1 > s2: return 1\n    if s1 > 1: return 2\n    if s2 > 1: return 2\n    if s1 > 2: return 1\n    return 2"}, "913": {"problem_id": 3274, "answer": "def solve(st):\n    return max(st.islower(), sum(1 for c in st if c.isalpha()))"}, "914": {"problem_id": 3275, "answer": "def clonewars(n):\n    return [2**n-1, sum(2**i for i in range(n))]"}, "915": {"problem_id": 3276, "answer": "def missing(nums, str):\n    try:\n        return ''.join(str.replace(' ','')[i] for i in sorted(nums))\n    except:\n        return \"No mission today\""}, "916": {"problem_id": 3277, "answer": "def calc_type(a, b, res):\n    return '{}? {} = {}'.format(a, b, res)"}, "917": {"problem_id": 3278, "answer": "import re\ndef string_expansion(s):\n    return ''.join(c*int(''.join(re.findall('\\d{1,}', s)), 2) for c in s)"}, "918": {"problem_id": 3279, "answer": "import re\ndef sursurungal(txt):\n    n = re.sub(r'(\\S+)', '', txt.lower())\n    return re.sub(r'(\\S+)s', r'\\1ga', n)"}, "919": {"problem_id": 3280, "answer": "def make_readable(seconds):\n    hh, mm, ss = divmod(seconds, 60)\n    return '{:02}:{:02}:{:02}'.format(hh if hh > 0 else '00' * 36 + mm if mm > 0 else '00' * 60 + ss)"}, "920": {"problem_id": 3281, "answer": "import datetime\ndef unlucky_days(year):\n    c=0\n    for i in range(1,13):\n        if datetime.date(year,i,13).weekday()==4:\n            c+=1\n    return c"}, "921": {"problem_id": 3282, "answer": "from math import ceil\ndef how_many_times(annual_price, individual_price):\n    return ceil(annual_price / individual_price)"}, "922": {"problem_id": 3283, "answer": "from math import ceil\ndef union_jack(n):\n    if isinstance(n, int) and n < 7:\n        n = ceil(n)\n    r = 'X---X---X'\n    for i in range(1, n):\n        r += '-X\\n'\n    return r.join(['X' if i%2==0 else '-' for i in r])"}, "923": {"problem_id": 3284, "answer": "def two_decimal_places(number):\n    return float(f'{number:.2f}')"}, "924": {"problem_id": 3285, "answer": "import re\ndef trump_detector(trump_speech):\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n    r = 0\n    for c in re.findall(r'([aeiou])(\\1*)', trump_speech, re.I):\n        r += len(c)\n    return round(r/3,2)"}, "925": {"problem_id": 3286, "answer": "def enough(cap, on, wait):\n    return 0 if cap - on - wait > 0 else wait + on - cap"}, "926": {"problem_id": 3287, "answer": "def mouth_size(animal): \n    if animal.lower() == \"alligator\":\n        return \"small\"\n    else:\n        return \"wide\""}, "927": {"problem_id": 3288, "answer": "def solve(st,k):\n    return max([int(st[i:i+len(st)-k]) for i in range(len(st))]).ljust(k, '0')"}, "928": {"problem_id": 3289, "answer": "def motif_locator(sequence, motif):\n    return [i + 1 for i in range(len(sequence) + 1) if sequence[i:i+1] == motif]"}, "929": {"problem_id": 3290, "answer": "def get_ages(s, d):\n    return None if s < 0 or d < 0 or s > 0 or d > 0 else (min(s, d), max(s, d))"}, "930": {"problem_id": 3291, "answer": "from itertools import combinations\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1099, 1111, 1113, 1123, 1139, 1151, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,"}, "931": {"problem_id": 3292, "answer": "def calc(x):\n    return ''.join(chr(int(x[i:i+3])-65) for i in range(0,len(x),3))"}, "932": {"problem_id": 3293, "answer": "def rule30(lst, n):\n    lst = [0] + lst + [0]\n    for _ in range(n):\n        lst = [0] + lst + [0]\n    return lst"}, "933": {"problem_id": 3294, "answer": "def converter(mpg):\n    kpl = 1.609344/4.54609188\n    return round(mpg*kpl,2)"}, "934": {"problem_id": 3295, "answer": "def split_in_parts(s, part_length): \n    return''.join(s[i:i+part_length] for i in range(0,len(s),part_length))"}, "935": {"problem_id": 3296, "answer": "def what_century(year):\n    century = 'th'\n    if year[0] == '0':\n        century ='st'\n    elif year[0] == '1':\n        century = 'nd'\n    elif year[0] == '2':\n        century = 'rd'\n    elif year[0] == '3':\n        century = 'th'\n    elif year[0] == '4':\n        century = 'tcd'\n    else:\n        century = 'undefined'\n    return century"}, "936": {"problem_id": 3297, "answer": "def will_it_balance(stick, terrain):\n    center = sum(stick[i] for i in range(len(stick))) / sum(stick[i] for i in range(len(stick)))\n    return terrain[center] == 1"}, "937": {"problem_id": 3298, "answer": "def avg_array(arrs):\n    return [sum(arrs[i]) / len(arrs[i]) for i in range(len(arrs))]"}, "938": {"problem_id": 3299, "answer": "from functools import lru_cache\n\ndef calc(cards):\n    @lru_cache(maxsize=None)\n    def dp(i, j):\n        if i == len(cards):\n            return cards[j]\n        elif cards[i] == 2**j:\n            return max(dp(i+1, j), dp(i, j+1))\n        else:\n            return max(dp(i+1, j), dp(i, j+1)) + cards[i] * 2**j\n    return dp(0, 0)"}, "939": {"problem_id": 3300, "answer": "def replace_letters(word):\n    return ''.join(c for c in word if c not in alphabet[0::len(word)]) + 'z'"}, "940": {"problem_id": 3301, "answer": "def even_fib(m):\n    a, b = 0, 1\n    while a < m:\n        a, b = b, a + b\n    return a"}, "941": {"problem_id": 3302, "answer": "from itertools import combinations\ndef strings_crossover(arr, result):\n    return sum(1 for a,b in combinations(arr, 2) if a[0] == b[0] and a[1] == b[1])"}, "942": {"problem_id": 3303, "answer": "def div_con(x):\n    return sum(int(i) for i in x if i.isdigit() and i not in [\"0\"]) - sum(int(i) for i in x if i.isdigit())"}, "943": {"problem_id": 3304, "answer": "def is_inertial(arr):\n    odd_nums = [i for i in arr if i % 2 == 1]\n    even_nums = [i for i in arr if i % 2!= 0]\n    \n    return len(odd_nums) == len(even_nums)"}, "944": {"problem_id": 3305, "answer": "def shortest(N, edgeList):\n    import heapq\n    dist = {}\n    heap = [(0, 0)]\n    for e in edgeList:\n        dist[e[0]] = e[1]\n        dist[e[1]] = e[0]\n        heapq.heappush(heap, (dist[e[0]], e[0]))\n        heapq.heappop(heap)\n    m = N\n    while heap:\n        d, e = heapq.heappop(heap)\n        if e not in dist:\n            dist[e] = d\n            m = min(m, e)\n    return -1 if m == N else dist[m]"}, "945": {"problem_id": 3306, "answer": "def solve(a,b):\n    return bool(a.replace('*', '%'))"}, "946": {"problem_id": 3307, "answer": "def fat_fingers(string):\n    s = string.replace('a', 'A').lower()\n    s = s.replace('a', ''.join(['a' if c.isalpha() else c for c in s.lower()]))\n    return s"}, "947": {"problem_id": 3308, "answer": "def parity_bit(binary):\n    return''.join(chr(int('01' + '1'*(len(binary)%2))) for _ in range(len(binary)))"}, "948": {"problem_id": 3309, "answer": "import re\ndef encode_resistor_colors(ohms_string):\n    codes = {'0': 'black', '1': 'brown', '2':'red', '3': 'orange', '4': 'yellow', '5': 'green', '6': 'blue', '7': 'violet', '8': 'gray', '9': 'white'}\n    color_map = {0: 'black', 1: 'brown', 2:'red', 3: 'orange', 4: 'yellow', 5: 'green', 6: 'blue', 7: 'violet', 8: 'gray', 9: 'white'}\n    multiplier = 1000\n    multiplier_str = str(multiplier).split('k')\n    multiplier_str.insert(0, 'M')\n    tolerance = 5\n    tolerance_str = str(tolerance).split('M')\n    tolerance_str.insert(0, 'k')\n    ohms_string =''.join(re.findall(r'\\d{1,3}(?:\\k[a-z]+) \\d{1,3}(?:\\.\\d+)', ohms_string))\n    return f'{codes.get(ohms_string)} {color_map.get(ohms_string)} {multiplier} {tolerance} {toleration_str}'"}, "949": {"problem_id": 3310, "answer": ""}, "950": {"problem_id": 3311, "answer": "def reverse_invert(lst):\n    return [(-1)**(i) for i in lst if isinstance(i,int)]"}, "951": {"problem_id": 3312, "answer": "def anagram_counter(words):\n    return sum(1 for a, b in enumerate(words) if a == b)"}, "952": {"problem_id": 3313, "answer": "import re\ndef highlight(code):\n    return '\\033[36m'.join('<span style=\"color: {}\">{}</span>'.format(c,highlight(c)) for c in re.findall('F+|L+|R+|\\d+',code))\\033[m'\n"}, "953": {"problem_id": 3314, "answer": "def solve(a,b):\n    c=0\n    for i in range(1,int(a**.5)+1):\n        if a%i==0:\n            c=c+1\n            if c>0:\n                return True\n    return False"}, "954": {"problem_id": 3315, "answer": "def strongest_even(n, m):\n    s = 0\n    while n <= m:\n        s += n // 2\n        n //= 2\n    return s"}, "955": {"problem_id": 3316, "answer": "def how_many_light_sabers_do_you_own(name = 'bob'):\n    return 18 if name == 'Zach' else 0"}, "956": {"problem_id": 3317, "answer": "def gr33k_l33t(string):\n    return ''.join([chr(ord(c)-96) for c in string.lower()])"}, "957": {"problem_id": 3318, "answer": "def number_of_carries(a, b):\n    c=0\n    while a+b<=10**7:\n        c+=1\n        a+=int(a+b)\n        b+=int(b+a)\n    return c"}, "958": {"problem_id": 3319, "answer": "def to_camel_case(text):\n    return text[0] + ''.join([x.capitalize() for x in text])"}, "959": {"problem_id": 3320, "answer": "def oracle(arr):\n    return \"\\n\".join([\"----{}----\".format(i) for i in sorted(arr, key=lambda x: x[1])])"}, "960": {"problem_id": 3321, "answer": "def evil(n):\n    return \"It's Evil!\" if bin(n).count(\"1\") % 2 == 0 else \"It's Odious!\""}, "961": {"problem_id": 3322, "answer": "def cypher(string):\n    enc = {'l':'qwertyuiopasdfghjklzxcvbnm', 'z':'5', 'e':'@','s':'%', 'b':'_', 'I':'x', 'R':'y', 'E':'r', 'A':'i', 'U':'u', 'G':'o', 'T':'p', 'O':'k', 'H':'h', 'C':'l', 'D':'m', 'F':'n', 'K':'w', 'S':'s', 'B':'e', 'N':'d', 'Q':'q', 'U':'u', 'P':'p', 'R':'r', 'L':'l', 'Z':'qw', 'V':'w', 'W':'x', 'X':'y', 'Y':'z', 'Y':'@', '@':'1', '!':'#', '#':'2', '$':'%', '&':'_', '_':'1', '\\'':'#','':':' '}\n    return ''.join(enc[c] for c in string)"}, "962": {"problem_id": 3323, "answer": "def faulty_odometer(n):\n    return int(str(n).translate(str.maketrans('56789','45678')))"}, "963": {"problem_id": 3324, "answer": ""}, "964": {"problem_id": 3325, "answer": "def most_common(s):\n    return ''.join(sorted(s, key=lambda c: 1 if c.islower() else -1))"}, "965": {"problem_id": 3326, "answer": "def reverse_in_parentheses(string):\n    lst = string.split('(')\n    lst = [reversed(lst[i]) for i in range(len(lst))]\n    return ''.join(lst)"}, "966": {"problem_id": 3327, "answer": "def celsius_to_romer(temp):\n    # Your code here.\n    return f'{temp}' * (10.0/5.0)"}, "967": {"problem_id": 3328, "answer": "def caeser(message, key):\n    return ''.join(chr(ord(c) + key) if c.isalpha() else c for c in message)"}, "968": {"problem_id": 3329, "answer": "def longest_palindrome (s):\n    return max(s[i::-1] for i in range(len(s)))"}, "969": {"problem_id": 3330, "answer": "def make_triangle(m,n):\n    l = [i for i in range(m,n+1) if str(i).zfill(2) =='']\n    return '\\n'.join(''* (i-j) +''.join(str(i)) +'' * (j-i) for i,j in enumerate(l))"}, "970": {"problem_id": 3331, "answer": "def solve(arr,n):\n    caught = 0\n    for i in range(len(arr)):\n        if arr[i] == 'C':\n            caught += 1\n        elif arr[i] == 'D':\n            if caught > n:\n                caught -= 1\n            else:\n                break\n    return caught"}, "971": {"problem_id": 3332, "answer": "import re\ndef autocorrect(input):\n    return re.sub(r'(?i)\\b(u|you+)\\b', 'your sister', input, flags=re.IGNORECASE)"}, "972": {"problem_id": 3333, "answer": "def func_or(a,b):\n    return bool(a) and bool(b)"}, "973": {"problem_id": 3334, "answer": "from math import gcd\ndef reduce_fraction(fraction):\n    numerator, denominator = fraction[0], fraction[1]\n    x, y = divmod(numerator, denominator)\n    return tuple(x for x in fraction if x)"}, "974": {"problem_id": 3335, "answer": "def vaporcode(s):\n    return' '.join(s.upper()[i] for i in ''.join(s.upper()))"}, "975": {"problem_id": 3336, "answer": "def get_sum_of_digits(num):\n    return sum(int(i) for i in str(num))"}, "976": {"problem_id": 3337, "answer": "import re\ndef bracket_buster(s):\n    return re.findall(r'\\[(.*?)\\]', s)"}, "977": {"problem_id": 3338, "answer": "def ones_counter(input):\n    return [len([i for i in input if i == 1]), len([i for i in input if i == 0])]"}, "978": {"problem_id": 3339, "answer": ""}, "979": {"problem_id": 3340, "answer": "def sharkovsky(a, b):\n    if a%2==0:\n        return a==b\n    elif a%2==1:\n        return a<b\n    elif a%2==-1:\n        return a>b\n    else:\n        return a<b"}, "980": {"problem_id": 3341, "answer": "def pop_shift(s):\n    s = s[1:-1].replace(s[-1], '')\n    return [s[i:i+3] for i in range(len(s))]"}, "981": {"problem_id": 3342, "answer": "def pattern(n):\n    s = ''.join([str(i)*i for i in range(1, n+1)])\n    return s.ljust(n, '\\n')"}, "982": {"problem_id": 3343, "answer": "def memorysize_conversion(s):\n    n, unit = s.upper(), 'kB' if s[0] == 'K' else 'MB' if s[0] == 'M' else 'GB' if s[0] == 'G' else 'TB' if s[0] == 'T' else float('inf')\n    return f'{n // 1000:.3f} {unit}'"}, "983": {"problem_id": 3344, "answer": "def number_property(n):\n    return [True, False, False] if n % 2 == 0 else [True, False, True]"}, "984": {"problem_id": 3345, "answer": "from collections import Counter\ndef find_uniq(arr):\n    c = Counter(arr)\n    return ''.join(sorted(c.keys()))"}, "985": {"problem_id": 3346, "answer": "def gap(g, m, n):\n    prime = 2\n    for i in range(m, 0, -1):\n        if isprime(prime):\n            if i - prime == g:\n                return [prime, i]\n            prime += 1\n    return None"}, "986": {"problem_id": 3347, "answer": "def minimum(a, x):\n    return min(a%x, a//x)"}, "987": {"problem_id": 3348, "answer": "def outed(meet, boss):\n    return 'Get Out Now!' if sum(meet.values()) / len(meet) > 5 else 'Nice Work Champ!'"}, "988": {"problem_id": 3349, "answer": "def find_missing_number(sequence):\n    if sequence == \"\":\n        return 0\n    elif not sequence.replace(\" \", \"\").isdigit():\n        return 1\n    else:\n        s = sorted(int(i) for i in sequence.split())\n        return 0 if s[-1]!= s[0] + 1 else min(s)"}, "989": {"problem_id": 3350, "answer": "def hex_string_to_RGB(hex_string): \n    return {\n        'r': int(hex_string[1:], 16),\n        'g': int(hex_string[2:], 16),\n        'b': int(hex_string[3:], 16)\n    }"}, "990": {"problem_id": 3351, "answer": "evil_code_medal=lambda t,g,s,b:s<t<b<g<s<t<b<g<s<t<b<g<"}, "991": {"problem_id": 3352, "answer": "def find_longest(arr):\n    m = 0\n    for i in arr:\n        if len(str(i)) > m:\n            m = len(str(i))\n            arr.append(i)\n    return arr[0]"}, "992": {"problem_id": 3353, "answer": "def poly_subtract(p1, p2):\n    return [x - y for x, y in zip(p1, p2)]"}, "993": {"problem_id": 3354, "answer": "def boolean_to_string(b):\n    return \"True\" if b else \"False\""}, "994": {"problem_id": 3355, "answer": "def solve(n):\n    # your code here\n    s = str(n)\n    l = len(s)\n    if l == 0:\n        return -1\n    elif l == 1:\n        return 0\n    else:\n        move = 0\n        x = ''.join(sorted(s, reverse=True))\n        y = int(x, 2)\n        z = int(x, 0)\n        while y!= z:\n            if y % 25 == 0:\n                y = y // 25\n                z = z // 25\n            else:\n                y = y // 25 + 1\n                z = z // 25 + 1\n            move = move + 1\n        return move"}, "995": {"problem_id": 3356, "answer": "def three_amigos(numbers):\n    return [a,b,c for a,b,c in zip(numbers, numbers[1:], numbers[2:])] if len(numbers)>3 else []"}, "996": {"problem_id": 3357, "answer": "def find_dup(arr):\n    return sum(arr) - set(arr)"}, "997": {"problem_id": 3358, "answer": "def correct(string):\n    d = {'5':'S', '0':'O', '1':'I'}\n    return ''.join([d.get(c, c) for c in string])"}, "998": {"problem_id": 3359, "answer": "def title_to_number(title):\n    return sum(26**i for i,v in enumerate(title) if v.isnumeric())"}, "999": {"problem_id": 3360, "answer": "def get_chance(n, x, a):\n    return round(0.001, 2)"}, "1000": {"problem_id": 3361, "answer": "def sum_of_minimums(numbers):\n    return sum(min(x) for x in numbers)"}, "1001": {"problem_id": 3362, "answer": "def sum_mix(arr):\n    return sum(int(x) for x in arr)"}, "1002": {"problem_id": 3363, "answer": "def evaporator(content, evap_per_day, threshold):\n    days = 0\n    current_content = content\n    threshold = content * (threshold / 100)\n    while current_content > threshold:\n        current_content = content\n        days += 1\n    return days"}, "1003": {"problem_id": 3364, "answer": "import math\ndef predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8):\n    ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n    return int(math.sqrt(sum(ages))/2)"}, "1004": {"problem_id": 3365, "answer": "def format_poem(poem):\n    poem = poem.split('.')\n    return poem[1].rstrip(' ').rstrip('.')"}, "1005": {"problem_id": 3366, "answer": "def nth_perm(n,d):\n    return ''.join(['%d' % i for i in range(d)])[::-1]"}, "1006": {"problem_id": 3367, "answer": "def routes(n):\n    if n < 1:\n        return 0\n    return (n**2).bit_length()"}, "1007": {"problem_id": 3368, "answer": "def circular_prime(n):\n    return n in [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199, 311, 337, 373, 719, 733, 919, 971, 991, 1193, 1931, 3119, 3779, 7793, 7937, 9311, 9377, 11939, 31199, 39931, 73967, 793391, 9391931, 11939791, 31199797, 39931997, 73911797, 79371111, 793711111, 7937111777, 79371117771, 7937111117, 793711111711, 79371111171719, 79371111171777, 79371111177719]"}, "1008": {"problem_id": 3369, "answer": "def move(position, roll):\n    return position + 2*roll"}, "1009": {"problem_id": 3370, "answer": "def without_last(lst):\n    return lst[:-1]"}, "1010": {"problem_id": 3371, "answer": "import re\n\ndef signed_eight_bit_number(number):\n    return bool(re.match('\\d{8}', str(number)))"}, "1011": {"problem_id": 3372, "answer": "def string_merge(string1, string2, letter):\n    return string1[:string1.find(letter)] + string2[string2.find(letter):]"}, "1012": {"problem_id": 3373, "answer": "def matrix_mult(a, b):\n    return sum([sum(row[i]*row[j] for i in range(len(a[0])) for j in range(len(a[1]))) for row in zip(*a)])"}, "1013": {"problem_id": 3374, "answer": "from math import log\ndef compare_powers(n1,n2):\n    return 1 if n1[0]>n2[0] else -1 if n1[1]>n2[1] else 0"}, "1014": {"problem_id": 3375, "answer": "def going(n):\n    return float('%.6f' % (1.0 / n).ceil())"}, "1015": {"problem_id": 3376, "answer": "def square_free_part(n):\n    if type(n)!=int or n<1: return None\n    s=set(2)\n    for i in range(2,int(n**.5)+1):\n        if n%i==0:\n            s.remove(i)\n            if n//i in s:\n                return i"}, "1016": {"problem_id": 3377, "answer": "def solve(time):\n    h, m = map(int, time.split(':'))\n    if m == 0:\n        return'midnight'\n    elif m == 30:\n        return'midnight to two'\n    elif m == 0:\n        return'midnight'\n    else:\n        return 'twenty past one'"}, "1017": {"problem_id": 3378, "answer": "def decrypt(text, n):\n    if text == '':\n        return text\n    elif n <= 0:\n        return text\n    for _ in range(n):\n        text = text[1::2] + text[0]\n    return text"}, "1018": {"problem_id": 3379, "answer": "from string import ascii_lowercase as abc\n\ndef encrypter(strng):\n    return ''.join( abc.upper()[ abc.index(c) % 26 ] for c in strng )"}, "1019": {"problem_id": 3380, "answer": "from itertools import groupby\ndef look_and_say_sequence(s, n):\n    return ''.join(next(g) for _, g in groupby(s))"}, "1020": {"problem_id": 3381, "answer": "def get_real_floor(n):\n    if n>0:\n        return n-1\n    elif n<0:\n        return n-2\n    else:\n        return n"}, "1021": {"problem_id": 3382, "answer": "def lowercase_count(strng):\n    return sum(1 for c in strng if c.islower())"}, "1022": {"problem_id": 3383, "answer": "def is_even(n):\n    return n % 2 == 0"}, "1023": {"problem_id": 3384, "answer": "def lucas_lehmer(n):\n    \"\"\"\n    Prime or not prime? Lucas-Lehmer or not?\n    \"\"\"\n    if n == 2:\n        return True\n    m = 2**n - 1\n    s = pow(2, n+1, m)\n    for i in range(2, n+1):\n        s = s*s - 2\n        if s == 0:\n            return False\n    return True"}, "1024": {"problem_id": 3385, "answer": "import re\ndef longest(s):\n    return max(re.findall(r'a(?=[A-Z]{1,3})',s), key=len)"}, "1025": {"problem_id": 3386, "answer": "def get_column_title(n):\n    if type(n)!= int:\n        raise TypeError\n    elif n < 1:\n        raise IndexError\n    res = []\n    while n > 0:\n        res.append(chr(65 + (ord(n) - 97) % 26))\n        n = n // 26\n    return ''.join(res[::-1])"}, "1026": {"problem_id": 3387, "answer": "def name_in_str(str, name):\n    str = str.lower()\n    name = name.lower()\n    for i in range(len(str)):\n        if str[i] == name[i]:\n            return True\n    return False"}, "1027": {"problem_id": 3388, "answer": "def binary_to_string(binary):\n    return ''.join(chr(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8))"}, "1028": {"problem_id": 3389, "answer": "import re\ndef domain_name(url):\n    return re.sub(r'(https?://www\\.|http\\:\\/\\/www\\.|w\\/|w{0,3}\\.|w{1,3}\\.\\.)','',url)"}, "1029": {"problem_id": 3390, "answer": "def narcissistic( value ):\n    n = 0\n    for i in str(value):\n        n += int(i)**len(str(value)[-1])\n    return n == sum(int(i)**len(str(value)[-1]) for i in str(value))"}, "1030": {"problem_id": 3391, "answer": "def flatten(*args):\n    return [x for x in args] if isinstance(args, list) else [x for x in args] + [x for x in args]"}, "1031": {"problem_id": 3392, "answer": "def sierpinski(n):\n    lines = ['*'] * (n+1)\n    for i in range(n):\n        lines[i] ='' * (n-i).count('*') +'' * (i).count('*') +'' * (n-i).count('*')\n    return '\\n'.join(lines)"}, "1032": {"problem_id": 3393, "answer": "import math\n\ndef list_squared(m, n):\n    res = []\n    for i in range(m, n):\n        divisors = [x for x in range(1, int(math.sqrt(i)) + 1) if i % x == 0]\n        sum_squarced = sum(x ** 2 for x in divisors)\n        if math.sqrt(sum_squarced).is_integer():\n            res.append([i, sum_squarced])\n    return res"}, "1033": {"problem_id": 3394, "answer": "def collatz(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1"}, "1034": {"problem_id": 3395, "answer": "def remove_duplicate_words(s):\n    s = s.split()\n    return''.join(sorted(s, key=s.count))"}, "1035": {"problem_id": 3396, "answer": "def matrix_addition(a, b):\n    return [[i + j for i in a for j in b] for _ in range(len(a))]"}, "1036": {"problem_id": 3397, "answer": "def grille(message, code):\n    l = len(message)\n    return ''.join(c for c, _ in enumerate(message) if c!= '0' and code <= l-int(c).bit_length())"}, "1037": {"problem_id": 3398, "answer": "def solve(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff not in [0, 1]:\n            continue\n        elif diff == 1:\n            changes += 1\n        elif diff == -1:\n            changes += 1\n        else:\n            diff = abs(diff)\n            if diff in [0, 1]:\n                changes += 1\n            elif diff == 0:\n                changes += 1\n            elif diff == 1:\n                changes += 1\n            else:\n                diff = abs(diff)\n                if diff in [0, 1]:\n                    changes += 1\n                elif diff == 0:\n                    changes += 1\n                elif diff == 1:\n                    changes += 1\n    return min(changes, -1)"}, "1038": {"problem_id": 3399, "answer": "def alpha_seq(string):\n    return ','.join(c.upper() if c.isupper() else c for c in sorted(string))"}, "1039": {"problem_id": 3400, "answer": "def even_numbers(arr,n):\n    return list(filter(lambda x: x % 2 == 0, arr))[-n::-1]"}, "1040": {"problem_id": 3401, "answer": "from functools import reduce\nfrom operator import mul\nfrom numpy import prod\n\ndef eq_dice(s):\n    d = prod(reduce(mul, list(range(1, 21))), repeat=3)\n    return d.bit_length()"}, "1041": {"problem_id": 3402, "answer": "def calculate(a, o, b):\n    if o == \"+\":\n        return a + b\n    elif o == \"-\":\n        return a - b\n    elif o == \"*\":\n        return a * b\n    elif o == \"/\":\n        return a / b\n    else:\n        return None"}, "1042": {"problem_id": 3403, "answer": "def reorder(a, b):\n    n = 2**len(str(a))\n    m = 2**len(str(b))\n    return [list(range(0, n//2, b)), list(range(n//2, n, b))]"}, "1043": {"problem_id": 3404, "answer": "def solve(st,a,b):\n    lst = st[a:b+1]\n    return st[a:b+1].replace(' ','').strip()"}, "1044": {"problem_id": 3405, "answer": "def pow_root_pandigit(val, n, k):\n    res = []\n    while n:\n        res.append([val, pow(10, n)])\n        n -= 1\n    k -= 1\n    return res"}, "1045": {"problem_id": 3406, "answer": "def f(n):\n    return 1 if n < 0 else n - m(f(n - 1))\ndef m(n):\n    return 0 if n == 0 else n - f(m(n - 1))"}, "1046": {"problem_id": 3407, "answer": "def palindrome_chain_length(n):\n    steps = 0\n    while str(n)!= str(n)[::-1]:\n        n += int(str(n)[::-1])\n        steps += 1\n    return steps"}, "1047": {"problem_id": 3408, "answer": "from itertools import cycle\ndef add_check_digit(number):\n    rem = sum(int(d) * n for n, d in enumerate(reversed(number))) % 11\n    return '0' if rem == 0 else '1' + 'X' + str(11 - rem)"}, "1048": {"problem_id": 3409, "answer": "def fish(shoal):\n    fish = {1:1}\n    eaten = 0\n    for fish in shoal:\n        eaten += int(fish.get(c,0) * 10)\n        fish[c] += eaten\n        if fish[c] >= 2:\n            fish[c] -= 2\n            eaten = 0\n        elif fish[c] >= 3:\n            fish[c] -= 3\n            eaten = 0\n        elif fish[c] >= 4:\n            fish[c] -= 4\n            eaten = 0\n        elif fish[c] >= 5:\n            fish[c] -= 5\n            eaten = 0\n        elif fish[c] >= 6:\n            fish[c] -= 6\n            eaten = 0\n        elif fish[c] >= 7:\n            fish[c] -= 7\n            eaten = 0\n        elif fish[c] >= 8:\n            fish[c] -= 8\n            eaten = 0\n        elif fish[c] >= 9:\n            fish[c] -= 9\n            eaten = 0\n        else:\n            eaten += int(fish[c] * 10)\n            fish[c] = fish[c] - eaten\n            if fish[c] >= 2:\n                fish[c] -= 2\n                eaten = 0\n            elif fish[c] >= 3:\n                fish[c] -= 3\n                eaten = 0\n            elif fish[c] >= 4:\n                fish[c] -= 4\n                eaten = 0\n            elif fish[c] >= 5:\n                fish[c] -= 5\n                eaten = 0\n            elif fish[c] >= 6:\n                fish[c] -= 6\n                eaten = 0\n            elif fish[c] >= 7:\n                fish[c] -= 7\n                eaten = 0\n            elif fish[c] >= 8:\n                fish[c] -= 8\n                eaten = 0\n            elif fish[c] >= 9:\n                fish[c] -= 9\n                eaten = 0\n "}, "1049": {"problem_id": 3410, "answer": "def scratch(lottery):\n    return sum(int(s[:3]) for s in lottery if len(set(s.split())) == 3)"}, "1050": {"problem_id": 3411, "answer": "def amort(rate, bal, term, num_payments):\n    r = rate / (100 * 12)\n    c = bal * r / (1 - r)\n    n = bal * r / (1 - r)\n    int = c - n\n    princ = int - int * r\n    bal.append(bal.pop(0))\n    return 'num_payment {} c {:.0f} princ {:.0f} int {:.0f} balance {:.0f}'.format(num_payments, c, princ, int, bal)"}, "1051": {"problem_id": 3412, "answer": "def f(n):\n    p = 2\n    while n > 1:\n        p *= n\n        n //= p\n    return n * p"}, "1052": {"problem_id": 3413, "answer": "def solution(nums):\n    if nums == None:\n        return []\n    else:\n        return sorted(nums)"}, "1053": {"problem_id": 3414, "answer": "from itertools import cycle\n\ndef reversi_row(moves):\n    \"\"\"\n    Takes an array of moves and returns a string representing the final board state.\n    \"\"\"\n    row = ['.'] * 8\n    for move in range(8):\n        row[move] = ''.join(cycle('*' + move).pop())\n    return ''.join(row)"}, "1054": {"problem_id": 3415, "answer": "def build_palindrome(s):\n    return s + ''.join(s[i::-1] + s[i+1:] for i in range(len(s)))"}, "1055": {"problem_id": 3416, "answer": "def total_kilometers(cons, petrol):\n    return round(100*petrol/cons, 2)\n\ndef check_distance(distance, cons, petrol):\n    if distance > 100:\n        return \"You will need to refuel\"\n    elif distance > 200:\n        return [[cons, petrol]]\n    else:\n        dist = 100*distance/petrol\n        fuel = petrol\n        result = []\n        for k in range(dist):\n            result.append(check_distance(k, cons, fuel))\n        return [[k, round(k, 2)] for k in result]"}, "1056": {"problem_id": 3417, "answer": "def cut_the_ropes(arr):\n    r = []\n    for i in range(len(arr)):\n        r.append(arr[i] - min(arr))\n    return r"}, "1057": {"problem_id": 3418, "answer": "def reverse_list(l):\n    return l[::-1]"}, "1058": {"problem_id": 3419, "answer": "def encryption(string):\n    return ''.join(c.translate(str.maketrans('helloworld', 'wxyz')))"}, "1059": {"problem_id": 3420, "answer": "def absolute_values_sum_minimization(A):\n    return min(A)"}, "1060": {"problem_id": 3421, "answer": "def mysterious_pattern(m, n):\n    rows = [[\" \"] * m for _ in range(n)]\n    fib = [1, 1]\n    for i in range(m):\n        fib.append(fib[-1] + fib[-2])\n        fib.append(fib[-1] - fib[-2])\n    return \"\\n\".join(rows[i] + \"\\n\" for i in range(m))"}, "1061": {"problem_id": 3422, "answer": "def diamond(n):\n    diamond = '*' * (n//2).count('*') + '\\n' + '\\n'.join([' '*(n//2) for i in range(n//2)]) + '\\n'\n    return diamond if n%2!=0 else None"}, "1062": {"problem_id": 3423, "answer": "from itertools import combinations\n\ndef solve(arr,n):\n    return any(all(x%y for x,y in combinations(arr,2)))"}, "1063": {"problem_id": 3424, "answer": "def digitize(n):\n    return [int(i) for i in str(n)]"}, "1064": {"problem_id": 3425, "answer": "def word_square(letters):\n    n = len(letters)\n    if n % 2!= 0:\n        return False\n    s = ''.join(sorted(letters))\n    return len([s.count(i) for i in set(s)]) == n"}, "1065": {"problem_id": 3426, "answer": "def tax_calculator(total):\n    if isinstance(total, (float, int)):\n        return round(total *.01, 2)\n    elif isinstance(total, (float, int)):\n        return round(total *.01, 2)\n    elif isinstance(total, (float, int, complex)):\n        return round(total *.01, 2)\n    elif isinstance(total, (tuple, list)):\n        return sum(total.real for real in real_taxes(total))\n    elif isinstance(total, (str, float)):\n        return sum(int(d) for d in str(total))\n    else:\n        return 0"}, "1066": {"problem_id": 3427, "answer": "def find_uniq(arr):\n    return arr.index(sorted(arr)[0])"}, "1067": {"problem_id": 3428, "answer": ""}, "1068": {"problem_id": 3429, "answer": "import math\ndef circleArea(r):\n    if type(r)!= int or r < 0:\n        return False\n    else:\n        return round(math.pi * r * r, 2)"}, "1069": {"problem_id": 3430, "answer": "def lowest_temp(t):\n    return min(t.split()) if t else None"}, "1070": {"problem_id": 3431, "answer": "def warn_the_sheep(queue):\n    wolf = queue.index('wolf')\n    return 'Oi! Sheep number {}! You are about to be eaten by a wolf!'.format(wolf+1) if wolf > 0 else 'Pls go away and stop eating my sheep'"}, "1071": {"problem_id": 3432, "answer": "def cipher(phrase: str):\n    return ''.join(c for c in phrase.replace(' ', '') if c!='')"}, "1072": {"problem_id": 3433, "answer": "def replace_zero(arr):\n    max_len = 0\n    zeros = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            zeros[i] = 0\n        elif arr[i] == 0:\n            zeros[i] = max_len\n        else:\n            zeros[i] = arr[i]\n        max_len = max(max_len, zeros[i])\n    return max_len"}, "1073": {"problem_id": 3434, "answer": "def bin_mul(m,n):\n    if m < n:\n        return bin_mul(n,m)\n    elif n < m:\n        return bin_mul(m,n)\n    else:\n        return [0,m]"}, "1074": {"problem_id": 3435, "answer": "import re\ndef alphabet_war(fight):\n    d = {'w':4,'p':3,'b':2,'s':1,'m':4,'q':3,'d':2,'z':1}\n    left = sum(d.get(c,0) for c in fight if c in 'wp m q d z')\n    right = sum(d.get(c,0) for c in fight if c in 'wp m d z')\n    return \"Let's fight again!\" if left==right else \"Left side wins!\" if left>right else \"Right side wins!\""}, "1075": {"problem_id": 3436, "answer": "import re\ndef err_bob(s):\n    return re.sub(r'([b-df-hj-np-tv-z])\\b', 'ERR', s, flags=re.I)"}, "1076": {"problem_id": 3437, "answer": "import re\ndef decipher_this(string):\n    return''.join(re.findall(r'\\d{2}|\\d{2}', string))"}, "1077": {"problem_id": 3438, "answer": ""}, "1078": {"problem_id": 3439, "answer": "def solve(n):\n    a = 0\n    b = 0\n    while a < n:\n        a += 10\n        b += 1\n    return sum(map(int, str(a) + str(b)))"}, "1079": {"problem_id": 3440, "answer": "def powers(n):\n    return [2**i for i, _ in enumerate(bin(n)[::-1]) if _ == '1']"}, "1080": {"problem_id": 3441, "answer": "def get_average(marks):\n    sum = 0\n    for i in marks:\n        sum += i\n    return sum // len(marks)\n"}, "1081": {"problem_id": 3442, "answer": "def code_for_same_protein(seq1,seq2):\n    return ''.join(sorted(set(seq1).intersection(set(seq2)), key=lambda t: t[0]))"}, "1082": {"problem_id": 3443, "answer": "def correct(m, n, bits):\n    row_parity = [0] * (n + 1)\n    col_parity = [0] * (m + 1)\n    for row in range(m):\n        for col in range(n):\n            if bits[row][col] == '1':\n                row_parity[row] = row_parity[row] + 1\n            else:\n                row_parity[row] = row_parity[row]\n    for col in range(m):\n        for row in range(n):\n            if bits[row][col] == '1':\n                col_parity[col] = col_parity[col] + 1\n            else:\n                col_parity[col] = col_parity[col]\n    bits = bits[:] + bits[::-1]\n    correct = ''.join(row_parity[i] for i in range(m) if row_parity[i] and col_parity[i] for i in range(n)) + bits[:]\n    return correct"}, "1083": {"problem_id": 3444, "answer": "def cyclic_string(s):\n    c = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        else:\n            return c"}, "1084": {"problem_id": 3445, "answer": "def solve(s,g):\n    return next((i for i in range(s,0,-1) if s%i==0),-1)"}, "1085": {"problem_id": 3446, "answer": ""}, "1086": {"problem_id": 3447, "answer": "def next_perfect_square(n):\n    return n > 0 and pow(2, n)**2"}, "1087": {"problem_id": 3448, "answer": "def f(n):\n    if isinstance(n, int) and n > 0:\n        return sum(range(n+1))\n    else:\n        return None"}, "1088": {"problem_id": 3449, "answer": "def categorize_study(p_value, requirements):\n    bs_factor = 2**(6-requirements)\n    return \"Fine\" if p_value*bs_factor <= 0.05 else \"Needs review\" if p_value*bs_factor >= 0.15 else \"Pants on fire\""}, "1089": {"problem_id": 3450, "answer": "def array(string):\n    s = string.split(',')\n    return''.join(s[1:-1]) if len(s) > 2 else None"}, "1090": {"problem_id": 3451, "answer": "def triangle(row):\n    if len(row)==1:\n        return row\n    elif len(row)==2:\n        return ''.join([triangle(i) for i in range(len(row)-1)])\n    else:\n        i=0\n        while i<len(row)-1:\n            row[i],row[i+1]=row[i+1],row[i]\n            i+=1\n        return triangle(row)"}, "1091": {"problem_id": 3452, "answer": "def snail(column, day, night):\n    #SnailCrawl.py\n    count = 0\n    while column > 0:\n        count += 1\n        column = column - day\n        day = day + night\n    return count"}, "1092": {"problem_id": 3453, "answer": "from itertools import zip_longest\ndef transpose_two_strings(arr):\n    return '\\n'.join(c.upper() + c[::-1] for c in zip_longest(*arr, fillvalue=' '))"}, "1093": {"problem_id": 3454, "answer": "from fractions import gcd\nfrom functools import reduce\ndef candies_to_buy(n):\n    return reduce(gcd, range(1, n+1))"}, "1094": {"problem_id": 3455, "answer": "def disarium_number(number):\n    return \"Disarium!!\" if sum(int(d) ** i for i, d in enumerate(str(number), 1)) == number else \"Not!!\""}, "1095": {"problem_id": 3456, "answer": "def repeater(string, n):\n    return '\"{}\" repeated {} times is: \"{}\"'.format(string, n, string * n)"}, "1096": {"problem_id": 3457, "answer": "def final_grade(exam, projects):\n    if exam > 90 or projects > 10:\n        return 100\n    elif exam > 75 and projects >= 5:\n        return 90\n    elif exam > 50 and projects >= 2:\n        return 75\n    else:\n        return 0"}, "1097": {"problem_id": 3458, "answer": "def multiplication_table(row,col):\n    return [[e*i for i in range(1,col+1)] for e in range(1,row+1)]"}, "1098": {"problem_id": 3459, "answer": "from itertools import combinations\ndef solve(n, k):\n    c = ''.join(sorted(str(n), reverse=True))\n    return min(c, key=lambda x: c.startswith(x))"}, "1099": {"problem_id": 3460, "answer": "from collections import Counter\nfrom functools import reduce\nfrom math import factorial as f\ndef uniq_count(s):\n    return f(len(s))//reduce(lambda a,b:a*fact(b),Counter(s).values())"}, "1100": {"problem_id": 3461, "answer": "from collections import OrderedDict\ndef common_ground(s1,s2):\n    s1 =''.join(sorted(set(s1.split())))\n    s2 =''.join(sorted(set(s2.split())))\n    return''.join(OrderedDict.fromkeys(s2))"}, "1101": {"problem_id": 3462, "answer": "def disjunction(operands, is_exclusive):\n    return sum(operands) & is_exclusive"}, "1102": {"problem_id": 3463, "answer": "def sum_times_tables(table,a,b):\n    return sum(table) * (a + b)"}, "1103": {"problem_id": 3464, "answer": "def isLeapYear(year):\n    return year % 4 == 0 and year % 100!= 0 and year % 400 == 0"}, "1104": {"problem_id": 3465, "answer": "def valid_card(card):\n    l = [int(d) for d in card.replace(' ', '').split(' ')]\n    return sum(l) % 10 == 0"}, "1105": {"problem_id": 3466, "answer": "import re\ndef date_checker(date):\n    return bool(re.match(r'\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}$', date))"}, "1106": {"problem_id": 3467, "answer": "def integrate(coefficient, exponent):\n    new_exponent = exponent + 1\n    new_coefficient = coefficient / new_exponent\n    return '{}x^{}'.format(new_coefficient, new_exponent)"}, "1107": {"problem_id": 3468, "answer": "from collections import Counter\ndef scramble(s1, s2):\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    for k,v in c2.items():\n        if k not in c1.keys():\n            return False\n        elif c1[k] > v:\n            return False\n    return True"}, "1108": {"problem_id": 3469, "answer": "def count_consonants(text):\n    return len(set(c for c in text.lower() if c in \"bcdfghjklmnpqrstvwxyz\"))"}, "1109": {"problem_id": 3470, "answer": "def to_twos_complement(binary, bits):\n    binary = binary.replace(' ','')\n    n = bin(int(binary,2))[2:]\n    return n.count('1') if n.count('1') == bits else -2**(n.count('1')-bits)"}, "1110": {"problem_id": 3471, "answer": "def mod256_without_mod(number):\n    return number & 255"}, "1111": {"problem_id": 3472, "answer": "def next_day_of_week(current_day, available_week_days):\n    b = 0\n    for d in available_week_days:\n        b = b << 4 + b%2\n    return b"}, "1112": {"problem_id": 3473, "answer": "def doubles(s):\n    return ''.join(c*2 for c in s if c.isdigit()).strip()"}, "1113": {"problem_id": 3474, "answer": "def pattern(n):\n    return '\\n'.join(['1'] * n)"}, "1114": {"problem_id": 3475, "answer": "import re\ndef to_integer(string):\n    d = {'0x': 16, '0b': 2, '0o': 8, '0' : 8}.get(s.lower(), None)\n    try:\n        return int(re.sub(r'[^+0-9\\.]', '', s), d)\n    except TypeError:\n        return None"}, "1115": {"problem_id": 3476, "answer": "def unlucky_number(n):\n    return sum(1 for x in range(0, n+1) if x not in \"4 7\")"}, "1116": {"problem_id": 3477, "answer": "def sort_string(s, ordering):\n    return ''.join(sorted(s, key=lambda c: ordering.index(c)))"}, "1117": {"problem_id": 3478, "answer": "from itertools import zip_longest\n\ndef battle(player1, player2):\n    d1 = {p1.get(i): p1[i] for i in range(len(player1))}\n    d2 = {p2.get(i): p2[i] for i in range(len(player2))}\n    return {'player1': d1, 'player2': d2}"}, "1118": {"problem_id": 3479, "answer": "def part_const(n, k, num):\n    if n<2 or k<0:\n        return 0\n    elif k==1:\n        return 1\n    else:\n        res=part_const(n-1, k-1, num+1)\n        res+=part_const(n-1, k, num)\n        res-=part_const(n-1, k-1, num-1)\n        return res\n"}, "1119": {"problem_id": 3480, "answer": "def sequence_sum(b, e, s):\n    if s > b:\n        b, e = e, s\n    n = (b + e) // 2\n    return n * (n + 1) // 2"}, "1120": {"problem_id": 3481, "answer": "from collections import Counter\ndef get_char_count(s):\n    c = Counter(s.lower())\n    return {k: sorted(v for k, v in c.items()) for k, v in c.items()}"}, "1121": {"problem_id": 3482, "answer": "def extra_perfect(n):\n    return [i for i in range(1,n+1) if bin(i)[2]=='1' and bin(i)[-1]=='1']"}, "1122": {"problem_id": 3483, "answer": "def string_parse(string):\n    if isinstance(string,str):\n        lst = string.split('[')\n        return ''.join(lst[1:])"}, "1123": {"problem_id": 3484, "answer": "def time_convert(num):\n    if num < 0:\n        return '00:00'\n    elif num == 0:\n        return '00:00'\n    else:\n        h,m = divmod(num,60)\n        return f'{h:02}:{m:02}'"}, "1124": {"problem_id": 3485, "answer": "def separate_liquids(glass):\n    liquids = sorted(glass, key=lambda x: x[0])\n    return liquids"}, "1125": {"problem_id": 3486, "answer": "def find_last(n, m):\n    p, c = 0, 0\n    while m > 0:\n        p += 1\n        m -= 1\n        c += 2\n    return p, c"}, "1126": {"problem_id": 3487, "answer": "def beeramid(bonus, price):\n    n = bonus // price\n    return (2.**n) - 1"}, "1127": {"problem_id": 3488, "answer": "def eval_object(v):\n    return {\"+\": v['a']+v['b'],\n        \"-\": v['a']-v['b'],\n        \"/\": v['a']/v['b'],\n        \"*\": v['a']*v['b'],\n        \"%\": v['a']%v['b'],\n        \"**\": v['a']**v['b']}.get(v['operation'])"}, "1128": {"problem_id": 3489, "answer": "def save(sizes, hd):\n    return sum(1 for i in range(len(sizes)) if int(sizes[i]) <= hd)"}, "1129": {"problem_id": 3490, "answer": "def array_manip(array):\n    return [min(array[i+1:] or []) for i in range(len(array))]"}, "1130": {"problem_id": 3491, "answer": "def substring(s):\n    r = []\n    for i in range(len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            r.append(s[i])\n        else:\n            r.append(s[i])\n    return ''.join(r)"}, "1131": {"problem_id": 3492, "answer": "def correct_polish_letters(st): \n    d = {\n        \"\u0105\": \"a\",\n        \"\u0107\": \"c\",\n        \"\u0119\": \"e\",\n        \"\u0142\": \"l\",\n        \"\u0144\": \"n\",\n        \"\u00f3\": \"o\",\n        \"\u015b\": \"s\",\n        \"\u017a\": \"z\",\n        \"\u017c\": \"z\"\n    }\n    return \"\".join(d.get(i) for i in st)"}, "1132": {"problem_id": 3493, "answer": "def change_count(change):\n    d = {'penny': 0.01, 'nickel': 0.05, 'dime': 0.10, 'quarter': 0.25, 'dollar': 1.00}\n    return '${:.2f}'.format(sum(d[c] for c in change.split(' ')) / 100.0)"}, "1133": {"problem_id": 3494, "answer": "def pig_it(text):\n    return''.join(w[1:] + w[0] + 'ay' if w.isalnum() else w for w in text.split())"}, "1134": {"problem_id": 3495, "answer": "from collections import Counter\n\ndef solve(a,b):\n    c = Counter(a)\n    d = Counter(b)\n    return max(c.values(), key=lambda x: (-d[x], x))"}, "1135": {"problem_id": 3496, "answer": "from math import pi\nsorted_dim = sorted(map(lambda x: x**2, enumerate(seq)))"}, "1136": {"problem_id": 3497, "answer": "def isPP(n):\n    m, k = 2, 2\n    while m**k <= n:\n        m, k = m+k, k\n    return [m, k]"}, "1137": {"problem_id": 3498, "answer": "from itertools import chain\nd = {'black': 0, 'brown': 1,'red': 2, 'orange': 3, 'yellow': 4, 'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9}\ndef decode_resistor_colors(bands):\n    bands =''.join(chain.from_iterable(map(d.get, bands)))\n    ohms = int(bands[0]) * 10 ** bands[1]\n    tolerance = bands[2]\n    return '%s%s ohms, %s%s%s' % (ohms, tolerance, ', '.join(bands[1:3]), '.20' * len(bands[1:3]))"}, "1138": {"problem_id": 3499, "answer": "def to24hourtime(hour, minute, period):\n    if period == \"am\":\n        hour = hour + 12\n    elif period == \"pm\":\n        hour = hour - 12\n    return f\"{hour:02d}\".rjust(2, \"0\")"}, "1139": {"problem_id": 3500, "answer": "def remove_exclamation_marks(s):\n    return \"\".join([x for x in s if x!= \"!\"])"}, "1140": {"problem_id": 3501, "answer": "from itertools import combinations\ndef number_of_routes(m, n):\n    return sum(1 for i in range(n) for j in range(i+1, n+1) if i!=j)"}, "1141": {"problem_id": 3502, "answer": "def solution(*args):\n    return len(args)>0"}, "1142": {"problem_id": 3503, "answer": "def sum_dig_pow(a, b):\n    return [x for x in range(a, b+1) if sum(int(c)**i for i, c in enumerate(str(x), 1)) == x]"}, "1143": {"problem_id": 3504, "answer": "def power_mod(b, e, m):\n    res = 1\n    while e > 0:\n        res = (res * b) % m\n        e-=1\n    return res"}, "1144": {"problem_id": 3505, "answer": "def super_pad(string, width, fill=\" \"):\n    if fill.startswith('>'):\n        return ''.join(c*width + fill[1:] for c in string) + fill[:-1]\n    elif fill.startswith('^'):\n        return ''.join(c*width + fill[1:] for c in string[1:]) + fill[:-1]\n    else:\n        return string"}, "1145": {"problem_id": 3506, "answer": "def vowel_indices(word):\n    return [i+1 for i,c in enumerate(word) if c in 'aeiouyAEIOUY']"}, "1146": {"problem_id": 3507, "answer": "def delete_nth(order,max_e):\n    d = {}\n    for i in order:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return list(d.values())"}, "1147": {"problem_id": 3508, "answer": "def halving_sum(n): \n    return n + halving_sum(n//2)"}, "1148": {"problem_id": 3509, "answer": "def meters(x):\n    s = ['m', 'km', 'Mm', 'Gm', 'Tm', 'Pm', 'Em', 'Zm', 'Ym']\n    return '{:g}{:t}'.format(s.index(x) + 1, x // 1000.0 ** 0.5)"}, "1149": {"problem_id": 3510, "answer": "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        return (n - 1) * 2"}, "1150": {"problem_id": 3511, "answer": "def find_key(encryption_key):\n    n = int(encryption_key, 16)\n    d = pow(n, n - 2, n)\n    return (d - 1) * (n - 1)"}, "1151": {"problem_id": 3512, "answer": "def last_fib_digit(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}, "1152": {"problem_id": 3513, "answer": "def folding(a,b):\n    m = a - b\n    return folding(a-m,b)"}, "1153": {"problem_id": 3514, "answer": "def validate_sequence(sequence):\n    return len(set(sorted(sequence))) == len(sequence)"}, "1154": {"problem_id": 3515, "answer": "from string import ascii_lowercase as AL, ascii_uppercase as A\ndef encode(text, key):\n    k = ''.join(key.upper() for key in AL)\n    return ''.join(c if c not in k else k[i - ord(k.find(c))] for i, c in enumerate(text)) + ''.join(c for c in AL if c not in k)"}, "1155": {"problem_id": 3516, "answer": "def present(x,y):\n    if x == 'goodpresent':\n        return ''.join(chr(ord(c) + y) for c in x)\n    elif x == 'crap':\n        return ''.join(sorted(x))\n    elif x == 'bang':\n        return sum(ord(c) - y for c in x)\n    elif x == 'badpresent':\n        return 'Take this back!'\n    elif x == 'dog':\n        return f'pass out from excitement {y} times'"}, "1156": {"problem_id": 3517, "answer": "def parade_time(groups, location, speed, pref):\n    return [int(i) for i in range(max(groups)+1, location+speed+1) if i in pref]"}, "1157": {"problem_id": 3518, "answer": "def linux_type(file_attribute):\n    return {'-':'file','d':'directory','l':'symlink','c':'character_file','b':'block_file','p':'pipe','s':'socket','D':'door'}.get(file_attribute[0])"}, "1158": {"problem_id": 3519, "answer": "def duplicate_elements(m, n):\n    return len(set(m).intersection(n))"}, "1159": {"problem_id": 3520, "answer": "import math\ndef is_prime(n):\n    if n<=1: return False\n    if n==2: return True\n    if n%2==0 or n==1: return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0: return False\n    return True\n\ndef step(g, m, n):\n    primes = []\n    for i in range(m,n+1):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes)==0: return None\n    i = 0\n    while True:\n        if i==len(primes):\n            break\n        if primes[i]<=m:\n            i+=1\n        else:\n            if step(g, primes[i], n):\n                return [primes[i],primes[i+1]]\n            elif step(g+1, primes[i], n):\n                return [primes[i],primes[i+1]]"}, "1160": {"problem_id": 3521, "answer": "def on_line(points):\n    return len(set().intersection(points)) == len(set()).most_common()[0][1]"}, "1161": {"problem_id": 3522, "answer": "def max_gap(numbers):\n    numbers.sort()\n    return max(abs(numbers[i] - numbers[i+1]) for i in range(len(numbers)-1))"}, "1162": {"problem_id": 3523, "answer": "def password(s):\n    return len(s)>8 and all(c.isupper() for c in s) and len(s)>1 and s.isnumeric()"}, "1163": {"problem_id": 3524, "answer": "def dna_to_rna(dna):\n    rna = \"\"\n    for i in dna:\n        if i == \"T\":\n            rna += \"U\"\n        else:\n            rna += i\n    return rna"}, "1164": {"problem_id": 3525, "answer": "def flipping_game(num):\n    lst = []\n    for i in range(len(num)):\n        if num[i] == 1:\n            lst.append(i)\n        else:\n            lst.append(i)\n            lst.append(num[i])\n    return sum(lst)"}, "1165": {"problem_id": 3526, "answer": "def any_arrows(arrows):\n    return any(not a.get('damaged', False) for a in arrows)"}, "1166": {"problem_id": 3527, "answer": "def quotable(name, quote):\n    return '{} said: \"{}\"'.format(name, quote)"}, "1167": {"problem_id": 3528, "answer": "def compound_array(a, b):\n    return [i for i in a[:b[0]] + b[1:] if i not in a]"}, "1168": {"problem_id": 3529, "answer": "songs = [{'artist': 'Marillion', 'title': 'Keyleigh', 'playback': '03:36'}, {'artist': 'Pink Floyd', 'title': 'Time', 'playback': '06:48'}, {'artist': 'Rush', 'title': 'YYZ', 'playback': '04:27'}, {'artist': 'Bonobo', 'title': 'Days To Come', 'playback': '03:50'}, {'artist': 'Coldplay', 'title': 'Yellow', 'playback': '04:32'}, {'artist': 'Bloc Party', 'title': 'Like Eating Glass', 'playback': '04:22'}, {'artist': 'The Killers', 'title': 'For Reasons Unknown', 'playback': '03:30'}, {'artist': 'Arctic Monkeys', 'title': 'Teddy Picker', 'playback': '03:25'}, {'artist': 'Joe Satriani', 'title': 'Surfing With The Alien', 'playback': '04:34'}]\ndef longest_possible(playback):\n    return max(songs, key=lambda x: abs(x['playback']) <= playback)"}, "1169": {"problem_id": 3530, "answer": "def asterisc_it(n): \n    if type(n) is int:\n        return ''.join(['*' if i%2==0 else str(i) for i in n])\n    elif type(n) is list:\n        return ''.join(['*' if i%2==0 else str(i) for i in n])"}, "1170": {"problem_id": 3531, "answer": "def valid_mersenne(n):\n    return n in [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279, 2203, 2281, 3217, 4253, 4423, 9689, 9941, 10613, 12081, 12788, 13241, 14713, 17943, 19917, 21767, 22871, 29761, 31978, 32737, 44253, 96977, 99689, 103677, 120801, 127881, 132481, 1471301, 1794317, 1991707, 2176781, 22871017, 2976117, 32737117, 44253117, 96977697, 103677697, 120801697, 127881, 132481, 1471301, 1794317, 1991707, 2176781, 22871017, 2976117, 32737117, 44253117, 96977697, 103677697, 120801697]"}, "1171": {"problem_id": 3532, "answer": "def apple(x):\n    return \"It's hotter than the sun!!\" if int(x)**2 > 1000 else \"Help yourself to a honeycomb Yorkie for the glovebox.\""}, "1172": {"problem_id": 3533, "answer": "def de_nico(key,msg):\n    d = {i:len(key) for i in range(97,123)}\n    s = ''\n    for i in msg:\n        s += d.get(i,i)\n    return s.strip()"}, "1173": {"problem_id": 3534, "answer": "def to_bits(string):\n    return [0] * 5000 if string.isalnum() else to_bits(string.replace('\\n', ''))"}, "1174": {"problem_id": 3535, "answer": "def get_order(order):\n    menu = [\"Burger\", \"Fries\", \"Chicken\", \"Pizza\", \"Sandwich\", \"Onionrings\", \"Milkshake\", \"Coke\"]\n    return \" \".join(menu[i.islower()] if i.isupper() else menu[i.lower()])"}, "1175": {"problem_id": 3536, "answer": "def cog_RPM(cogs, n):\n    return [i for i in cogs if n%2==0]"}, "1176": {"problem_id": 3537, "answer": "def is_even(n): \n    return n%2"}, "1177": {"problem_id": 3538, "answer": "from math import sin, pi\n\ndef scroller(text, amp, period):\n    return '\\n'.join(''* (amp + i) +'' * period +'' * (i % 2) +'' * int(text) + '\\n' for i in range(0, len(text), amp))"}, "1178": {"problem_id": 3539, "answer": "def norm_index_test(seq, ind):\n    return seq[ind % len(seq)] if seq else None"}, "1179": {"problem_id": 3540, "answer": "from datetime import date\ndef get_calendar_week(date_string):\n    return date.isocalendar(date(*map(int,date_string.split('-'))))[1]"}, "1180": {"problem_id": 3541, "answer": "def find_page_number(pages):\n    return [x for x in pages if x not in pages[0:]]"}, "1181": {"problem_id": 3542, "answer": "def owned_cat_and_dog(cat_years, dog_years):\n    return [0 if cat_years < 15 else cat_years + 9 if cat_years < 24 else cat_years + 4 for i in range(1, int(cat_years) + 1) if dog_years < 15 else dog_years + 9 for i in range(1, int(dog_years) + 1)]"}, "1182": {"problem_id": 3543, "answer": "import re\ndef increment_string(strng):\n    if '0' in strng[-1::-1]:\n        return ''.join(re.findall('\\d+',strng[-1::-1])) + str(int(re.findall('[^0-9]',strng[-1::-1])[0]))\n    else:\n        return '{}'.format(strng[-1::-1])"}, "1183": {"problem_id": 3544, "answer": "def morse_converter(s):\n    return int(''.join(['-'+c for c in range(1, len(s))]))"}, "1184": {"problem_id": 3545, "answer": "def well(arr):\n    c = 0\n    for i in arr:\n        if i.lower() == 'good':\n            c += 1\n    if c > 2:\n        return 'I smell a series!'\n    elif c < 1:\n        return 'Publish!'\n    else:\n        return 'Fail!'"}, "1185": {"problem_id": 3546, "answer": "def validate_ean(code):\n    return sum(int(d) * 3**i for i, d in enumerate(code[::2])) % 10 == 0"}, "1186": {"problem_id": 3547, "answer": "def odd_ones_out(numbers):\n    return [i for i in numbers if numbers.count(i) % 2!= 0]"}, "1187": {"problem_id": 3548, "answer": "def polynomialize(roots):\n    coefs = [1]\n    for root in roots:\n        coefs.append(coefs[-1]*root)\n    "}, "1188": {"problem_id": 3549, "answer": "def reverse_middle(lst):\n    return lst[len(lst)//2-1:len(lst)//2-2][::-1]"}, "1189": {"problem_id": 3550, "answer": "def sum_square_even_root_odd(nums):\n    return round(sum(n ** 2 if n % 2 == 0 else n ** 0.5 for n in nums), 2)"}, "1190": {"problem_id": 3551, "answer": "def array_previous_less(arr):\n    return [n for n in arr[-1::-1] if arr.count(n)<1]"}, "1191": {"problem_id": 3552, "answer": "def update_score(current_score, called_trump, alone, tricks):\n    sco = current_score.copy()\n    sna = tricks.copy()\n    sco[tricks.index(called_trump)] += (sna[0] + 2*ones(tricks.index(called_trump), 1) if alone else sna[1] + 2*ones(tricks.index(called_trump), 1))\n    return sco"}, "1192": {"problem_id": 3553, "answer": "import re\ndef show_me(name):\n    return bool(re.match('[A-Z][a-z]+(-[A-Z][a-z]+)*$', name))"}, "1193": {"problem_id": 3554, "answer": "def get_score(dice):\n    if len(dice) == 6:\n        return 100 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 7)))\n    elif len(dice) == 7:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 7)))\n    elif len(dice) == 8:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 8)))\n    elif len(dice) == 9:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 9)))\n    elif len(dice) == 10:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 10)))\n    elif len(dice) == 11:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 11)))\n    elif len(dice) == 12:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 12)))\n    elif len(dice) == 13:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 13)))\n    elif len(dice) == 14:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 14)))\n    elif len(dice) == 15:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 15)))\n    elif len(dice) == 16:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 16)))\n    elif len(dice) == 17:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 17)))\n    elif len(dice) == 18:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 18)))\n    elif len(dice) == 19:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 19)))\n    elif len(dice) == 20:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 20)))\n    elif len(dice) == 21:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 21)))\n    elif len(dice) == 22:\n        return 1000 * dice.count('1') + sum(dice.count('1', x) for x in range(1, 22)))\n    return \"Zonk\""}, "1194": {"problem_id": 3555, "answer": "def hanoiArray(n):\n    return '\\n'.join(f'{i}' for i in range(1, n + 1))"}, "1195": {"problem_id": 3556, "answer": "def diamonds_and_toads(sentence,fairy):\n    d = {\"ruby\":0, \"crystal\":0}\n    for i in fairy:\n        d[i] += 1\n        d[i] += 2\n    return dict(zip(d, [sentence.replace('good','python')]))"}, "1196": {"problem_id": 3557, "answer": "def odd_count(n):\n    return n//2"}, "1197": {"problem_id": 3558, "answer": "def capitalize_word(word):\n    return \"\".join(char.upper() for char in word)"}, "1198": {"problem_id": 3559, "answer": "chromosome_check=lambda s: \"Congratulations! You\\'re going to have a son.\" if s==\"XX\" else \"Congratulations! You\\'re going to have a daughter.\""}, "1199": {"problem_id": 3560, "answer": "def ski_jump(mountain):\n    l = len(mountain)\n    height = 0\n    for i in range(l):\n        height += int(mountain[i][1]) * 1.35\n        \n    return f\"{height:.2f} metres: He's crap!\" if height < 10 else f\"{height:.2f} metres: He's ok!\" if height < 25 else f\"{height:.2f} metres: Gold!!\""}, "1200": {"problem_id": 3561, "answer": "def around_fib(n):\n    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[i-1]+fib[i-2])\n    cnt = 0\n    for i in str(fib):\n        if i.isalpha():\n            cnt += 1\n            maxcnt = max(maxcnt,int(i))\n            break\n    return \"Last chunk \" + ';'.join(['Max is'+ str(maxcnt) + \" for digit \" + i + \"] for i in range(0,10)])"}, "1201": {"problem_id": 3562, "answer": "def count_inversion(sequence):\n    return sum(a > b for a, b in zip(sequence, sequence[1:]))"}, "1202": {"problem_id": 3563, "answer": "from math import ceil\ndef distance(n):\n    step = ceil(n/2)\n    l = [0]*(step+1)\n    for i in range(1,n+1):\n        l[i] = abs(l[i-1] - l[i-2])\n    return l[n]"}, "1203": {"problem_id": 3564, "answer": "def stringy(size):\n    return ''.join(['1' if x%2 else '0' for x in range(size)])"}, "1204": {"problem_id": 3565, "answer": "def solve(st,k):\n    n = len(st)\n    for i in range(k):\n        st = st.replace('a',' ')\n        st = st.replace('b','b')\n        st = st.replace('c','c')\n        st = st.replace('d','d')\n        st = st.replace('e','e')\n        st = st.replace('f','f')\n        st = st.replace('g','g')\n        st = st.replace('h','h')\n        st = st.replace('i','i')\n        st = st.replace('j','j')\n        st = st.replace('k','k')\n    return st"}, "1205": {"problem_id": 3566, "answer": "def find_missing(arr1, arr2):\n    return sum(arr1) - sum(arr2)"}, "1206": {"problem_id": 3567, "answer": "def leo(oscar):\n    if oscar == 88:\n        return \"Leo finally won the oscar! Leo is happy\"\n    elif oscar == 86:\n        return \"Not even for Wolf of wallstreet?!\"\n    elif oscar < 88:\n        return \"When will you give Leo an Oscar?\"\n    else:\n        return \"Leo got one already!\""}, "1207": {"problem_id": 3568, "answer": "def bumps(road):\n    b = 0\n    for i in road:\n        if i == 'n':\n            b += 1\n    if b > 15:\n        return \"Car Dead\"\n    else:\n        return \"Woohoo!\""}, "1208": {"problem_id": 3569, "answer": "def is_lucky(ticket):\n    return sum(map(int, ticket[:3])) == sum(map(int, ticket[3:]))"}, "1209": {"problem_id": 3570, "answer": "def solve(arr):\n    arr.sort()\n    l = len(arr)\n    return sum(x for x in arr if x > arr[l-1])"}, "1210": {"problem_id": 3571, "answer": "def is_divisible(wall_length, pixel_size):\n    return wall_length % pixel_size == 0"}, "1211": {"problem_id": 3572, "answer": "def invite_more_women(arr):\n    #your code here\n    men = arr.count(1)\n    women = arr.count(-1)\n    return True if men>women else False"}, "1212": {"problem_id": 3573, "answer": "def solve(arr):\n    return sum(arr.count(c) for c in set(arr))"}, "1213": {"problem_id": 3574, "answer": "def Dragon(n):\n    if n < 0: return ''\n    elif n == 0: return 'F'\n    else:\n        s = ''.join(['aRbFR' if c == 'a' else 'LFaLb' for c in str(n)]).strip('a')\n        return ''.join(Dragon(n-1) for _ in range(int(s)))"}, "1214": {"problem_id": 3575, "answer": "def powerset(nums):\n    n = len(nums)\n    return [[] for _ in range(n)] + [[nums[i] for i in range(n)] for _ in range(2*n)]"}, "1215": {"problem_id": 3576, "answer": "def longest(words):\n    l = []\n    for i in words:\n        l.append(len(i))\n    return max(l)"}, "1216": {"problem_id": 3577, "answer": "def fib_digits(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return sorted((i, int(str(i)).count(d) for i, d in enumerate(str(a)) if d == '1'))"}, "1217": {"problem_id": 3578, "answer": "def paperwork(n, m):\n    if n < 0 or m < 0:\n        return 0\n    else:\n        return n * m"}, "1218": {"problem_id": 3579, "answer": "from math import factorial as f\ndef choose(n,k):\n    return f(n)//f(k)*f(n-k)"}, "1219": {"problem_id": 3580, "answer": "def get_positions(n):\n    return (n%3==0) and (n%9==0) and (n%3==1) and (n%9==2)"}, "1220": {"problem_id": 3581, "answer": "def sea_sick(sea):\n    return \"Throw Up\" if sum(1 for c in sea if c == \"~\") / len(sea) > 0.2 else \"No Problem\""}, "1221": {"problem_id": 3582, "answer": "def is_digit(n):\n    return n.isdigit()"}, "1222": {"problem_id": 3583, "answer": "def binary_array_to_number(arr):\n    return int(''.join(reversed(sorted(arr))))"}, "1223": {"problem_id": 3584, "answer": "from collections import deque\n\ndef encrypt(text, encryptKey):\n    encryptKey = str(encryptKey).zfill(3)\n    d = deque([encryptKey])\n    d.rotate(-1)\n    while d:\n        text = text[:d.popleft()] + ''.join(c for c in text[d.pop() :] if c.isalpha())\n        d.rotate(1 - d.popleft())\n    return text"}, "1224": {"problem_id": 3585, "answer": "from itertools import product\ndef proc_seq(*args):\n    n = len(str(args[0]))\n    if n == 1:\n        return [1,1]\n    else:\n        res = []\n        for i in product(*map(int, args[1:]):count('0'):):\n            res.append(i)\n        return [min(res), max(res)]"}, "1225": {"problem_id": 3586, "answer": "def html(tag, *args, **kwargs):\n    attrs = []\n    for k, v in kwargs.items():\n        attrs.append(f' {k}=\"{v}\"')\n    \n    if len(args) == 0:\n        return '<{}>{}</{}>'.format(tag,''.join(args),''.join(attrs[::-1]))\n    elif len(args) == 1:\n        return '<{}>{}</{}>'.format(tag, args[0],''.join(attrs[1:]))\n    else:\n        return '<{}>{}</{}>'.format(tag,''.join(args),''.join(attrs[1:]))"}, "1226": {"problem_id": 3587, "answer": "from collections import Counter\n\ndef original_number(s):\n    c = Counter(s)\n    return ''.join(c.most_common()[0][0] for _ in range(10))"}, "1227": {"problem_id": 3588, "answer": "def quadratic(x1, x2):\n    return (1, -x1-x2, x1*x2)"}, "1228": {"problem_id": 3589, "answer": "def next_numb(val):\n    val += 1\n    while val > 9876543210:\n        val += 1\n        if val % 2 == 0:\n            return val\n    return \"There is no possible number that fulfills those requirements\""}, "1229": {"problem_id": 3590, "answer": "def solve(a,b):\n    return [2 if a.count(b[i]) == b[i].count(a[i]) else 1 for i in range(len(b))]"}, "1230": {"problem_id": 3591, "answer": "def doors(n):\n    return sum(1 for i in range(n) for j in range(i+1,n+1))"}, "1231": {"problem_id": 3592, "answer": "from fractions import gcd\ndef greatest(x, y, n):\n    return n*(gcd(x,y)-1)"}, "1232": {"problem_id": 3593, "answer": "def capitalize(s,ind):\n    a = \"\".join(s[i].upper() if i in ind else s[i] for i in range(len(s)))\n    return a"}, "1233": {"problem_id": 3594, "answer": "def is_isogram(word):\n    if type(word) is not str:\n        return False\n    elif word.isalpha() or len(word) == 0:\n        return False\n    else:\n        word = word.lower()\n        count = 0\n        for i in range(len(word)):\n            if word[i]!= word[i].lower():\n                count += 1\n        if count == len(word):\n            return True\n        else:\n            return False"}, "1234": {"problem_id": 3595, "answer": "def work_on_strings(a,b):\n    return ''.join(ch.swapcase() for ch in a) + ''.join(ch.swapcase() for ch in b)"}, "1235": {"problem_id": 3596, "answer": "def membership(amount, platinum, gold, silver, bronze):\n    import inspect\n    args = inspect.getargspec(membership).args\n    lst = locals()\n    if args[0] == 'Bronze':\n        return 'Not a member'\n    elif args[0] == 'Gold':\n        return 'Amount >= Gold'\n    elif args[0] == 'Platinum':\n        return 'Amount < Bronze'\n    elif args[0] == 'Silver':\n        return 'Amount < Silver'\n    else:\n        return 'Amount < Bronze'"}, "1236": {"problem_id": 3597, "answer": "def say_hello(name, city, state):\n    nam =''.join(name)\n    return 'Hello, {}! Welcome to {}, {}!'.format(nam, city, state)"}, "1237": {"problem_id": 3598, "answer": "def plane_seat(a):\n    n, l = divmod(a, 60)\n    if n > 60: return 'No Seat!!'\n    l = list(map(str, range(1, 21 + 1, 1)))\n    l.insert(0, 'B')\n    return 'Front-{}'.format(l[0]) if l[0] <= 20 else 'Middle-{}'.format(l[1]) if l[1] <= 40 else 'Back-{}'.format(l[2])"}, "1238": {"problem_id": 3599, "answer": "def f1(n,k):\n    digits = '0123456789'\n    digits.index(digits[-1])\n    digits.pop()\n    while len(digits) < k:\n        digits.append(n%10)\n        n//=10\n    return int(''.join(reversed(digits)))\n\ndef f2(n,k):\n    digits = '0123456789'\n    digits.index(digits[-1])\n    digits.pop()\n    while len(digits) < k:\n        digits.append(n%10)\n        n//=10\n    return int(''.join(reversed(digits)))\n"}, "1239": {"problem_id": 3600, "answer": "def move_vowels(s):\n    return ''.join(sorted(s, key=lambda x: x in 'aeiou'))"}, "1240": {"problem_id": 3601, "answer": "def find_nb(m):\n    n = 1\n    while n**3 + (n-1)**3 + 1 <= m:\n        n += 1\n    return n"}, "1241": {"problem_id": 3602, "answer": "def run_length_encoding(s):\n    enc = []\n    for i in range(1, len(s) + 1):\n        enc.append([s[i - 1], i])\n    return enc"}, "1242": {"problem_id": 3603, "answer": "def lovefunc( flower1, flower2 ):\n    return (flower1 % 2!= 0 and flower2 % 2!= 0)"}, "1243": {"problem_id": 3604, "answer": "from bisect import bisect_left as bisect\nfrom collections import deque\n\ndef happy_set(n):\n    s = set()\n    for i in range(1, n + 1):\n        s.add(i)\n    return s\n\ndef performant_numbers(n):\n    return deque(happy_set(n))"}, "1244": {"problem_id": 3605, "answer": "def diagonal(n, p):\n    res = 0\n    for i in range(n+1):\n        res += binomial_coefficient(p,i)\n    return res"}, "1245": {"problem_id": 3606, "answer": "def find_pattern(seq):\n    n = len(seq)\n    d = {0:1}\n    for i in range(1, n):\n        d[i] = d[i-1] + 1\n        seq.append(d[i])\n    return ''.join(sorted(seq))"}, "1246": {"problem_id": 3607, "answer": "def eq_sum_powdig(hMax, exp):\n    return [i for i in range(10**exp) if sum(int(d) ** exp for d in str(i)) == 153]"}, "1247": {"problem_id": 3608, "answer": "def bob(what):\n    db = {\n        'werewolf': 'Silver knife or bullet to the heart',\n        'vampire': 'Behead it with a machete',\n        'wendigo': 'Burn it to death',\n       'shapeshifter': 'Silver knife or bullet to the heart',\n        'angel': 'Use the angelic blade',\n        'demon': 'Use Ruby's knife, or some Jesus-juice',\n        'ghost': 'Salt and iron, and don't forget to burn the corpse',\n        'dragon': 'You have to find the excalibur for that',\n        'djinn': 'Stab it with silver knife dipped in a lamb's blood',\n        'pagan god': 'It depends on which one it is',\n        'leviathan': 'Use some Borax, then kill Dick',\n        'ghoul': 'Behead it',\n        'jefferson starship': 'Behead it with a silver blade',\n       'reaper': 'If it's nasty, you should gank who controls it',\n        'rugaru': 'Burn it alive',\n       'skinwalker': 'A silver bullet will do it',\n        'phoenix': 'Use the colt',\n        'witch': 'They are humans',\n    }\n    return db[what]"}, "1248": {"problem_id": 3609, "answer": "def is_onion_array(a):\n    return all(a[i] + a[i+1] <= 10 for i in range(len(a) - 1))"}, "1249": {"problem_id": 3610, "answer": "def fixed_xor(a, b):\n    l=len(a)\n    if l!=len(b):\n        return \"0\"*l\n    else:\n        return bin(int(a,2))^int(b,2)\n"}, "1250": {"problem_id": 3611, "answer": "def ranking(people):\n    s = sorted(people, key=lambda p: (-p['points'], p['name']))\n    return [[\"\".join(sorted(p, key=lambda p: (-p['points'], p['name']))), p['position']] for p in people]"}, "1251": {"problem_id": 3612, "answer": "def loose_change(coins_list, amount_of_change):\n    l = [0] * amount_of_change\n    for i in range(1, amount_of_change + 1):\n        l[i] += 1\n    return min(l, key=lambda x: x[1])"}, "1252": {"problem_id": 3613, "answer": "def is_substitution_cipher(s1, s2):\n    return all(c1 == c2 for c1, c2 in zip(s1, s2))"}, "1253": {"problem_id": 3614, "answer": "def interpreter(tape):\n    s, out = 0, ''\n    for c in tape:\n        if c == '>': s += '\\n'\n        elif c == '<': s += '\\n'\n        elif c == '*': out += chr(s)\n        elif c == '+': out += chr(s)\n        elif c == '-': out += chr(s)\n        elif c == '/': out += chr(s)\n        elif c == '!': out += chr(s)\n        else: out += c\n    return out"}, "1254": {"problem_id": 3615, "answer": "from collections import Counter\ndef presentation_agenda(friend_list):\n    c = Counter(friend_list)\n    return [tuple(x) for x in c.most_common(2)]"}, "1255": {"problem_id": 3616, "answer": "from bisect import bisect_left as bisect\nfrom itertools import combinations\nfrom functools import reduce\nfrom math import gcd\nfrom collections import deque"}, "1256": {"problem_id": 3617, "answer": "def is_zero_balanced(arr):\n    return all(arr.count(n)==0 for n in arr)"}, "1257": {"problem_id": 3618, "answer": "def socialist_distribution(population, minimum):\n    if sum(population) < minimum:\n        return []\n    p = population.copy()\n    for i in range(len(population)):\n        p[population.index(i)] += 1\n        p[population.index(min(population))] -= 1\n    return p"}, "1258": {"problem_id": 3619, "answer": "def is_dd(n):\n    return all(int(d) in str(n) for d in range(1, 10))"}, "1259": {"problem_id": 3620, "answer": "def get_zodiac_sign(day, month):\n    sig = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius']\n    return sig[month % 12]"}, "1260": {"problem_id": 3621, "answer": "def prime_maxlength_chain(n):\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]\n    for i in range(2,n+1):\n        if i in primes:\n            return [i]\n        elif i > primes[0]:\n            return [i]"}, "1261": {"problem_id": 3622, "answer": "import re\ndef validate_usr(username):\n    return ''.join(c for c in re.split('[a-z0-9_]',username) if c not in '_-').isspace()"}, "1262": {"problem_id": 3623, "answer": "def product(s):\n    return s.count(\"!\") * s.count(\"?\")"}, "1263": {"problem_id": 3624, "answer": "def distribution_of_candy(candies):\n    cnt = 0\n    while len(candies) > 1:\n        cnt += 1\n        candy = candies.pop()\n        if candy % 2 == 0:\n            candy += int(candy/2)\n        else:\n            candy += int(candy/2)\n        candies.append(candy)\n    return [cnt, candy]"}, "1264": {"problem_id": 3625, "answer": "def sum_of_regular_numbers(arr):\n    s = 0\n    for i in range(len(arr)):\n        step = arr[i] - arr[i-1]\n        if step in arr:\n            s += arr.index(step)\n    return s"}, "1265": {"problem_id": 3626, "answer": "def encode(message, key):\n    s = ''.join(key[i] for i in key)\n    return message.translate(str.maketrans(s, s.upper()))\n"}, "1266": {"problem_id": 3627, "answer": ""}, "1267": {"problem_id": 3628, "answer": "def rotate(arr, n):\n    rot = arr[:]\n    rot.extend(arr[i] for i in range(len(arr)//n))\n    return rot"}, "1268": {"problem_id": 3629, "answer": "def array_mash(a, b):\n    return [a[i] for i in range(len(a)) if a[i]!= b[i]]"}, "1269": {"problem_id": 3630, "answer": "def arithmetic(a, b, operator):\n    d = {\n        \"add\": a + b,\n        \"subtract\": a - b,\n        \"divide\": a / b,\n        \"multiply\": a * b\n    }\n    return d.get(operator.lower(), 0)"}, "1270": {"problem_id": 3631, "answer": "def bingo(ticket,win):\n    mini_wins = 0\n    for i in ticket:\n        if ord(i[0]) == ord(win[1]) and ord(i[1]) == ord(win[2]):\n            mini_wins += 1\n    return 'Winner!' if mini_wins >= win else 'Loser!'"}, "1271": {"problem_id": 3632, "answer": "def hamming_weight(x):\n    return x.count('1')"}, "1272": {"problem_id": 3633, "answer": ""}, "1273": {"problem_id": 3634, "answer": "def reverse_it(data):\n    return type(data)(str(data)[::-1]) if isinstance(data, str) else int(data)"}, "1274": {"problem_id": 3635, "answer": "def sflpf_data(val, nMax):\n    lst = [i for i in range(4, nMax+1) if i == val]\n    return lst"}, "1275": {"problem_id": 3636, "answer": "def bouncy_ratio(percent):\n    b = 0\n    n = 100\n    while n>=1:\n        n//=10\n        b+=1\n        if n>=b:\n            break\n    return n"}, "1276": {"problem_id": 3637, "answer": "def num_primorial(n):\n    primorial = 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            primorial *= i\n        else:\n            primorial *= i\n    return primorial"}, "1277": {"problem_id": 3638, "answer": "def gematria(string):\n    d = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'k':10, 'l':20,'m':30, 'n':40, 'o':50, 'p':60, 'q':70, 'r':80,'s':90, 't':100, 'u':200, 'x':300, 'y':400, 'z':500, 'j':600, 'v':700, 'w':900}\n    return sum(d.get(c,0) for c in string.lower())"}, "1278": {"problem_id": 3639, "answer": "def alan(arr):\n    stations = [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n    return stations.index(stations[i]) + 1 if stations.index(stations[i])!= stations.index(stations[i] + \"\") else \"No, seriously, run. You will miss it.\""}, "1279": {"problem_id": 3640, "answer": ""}, "1280": {"problem_id": 3641, "answer": "def reverse_complement(dna):\n    dna = list(dna)\n    for i in range(len(dna)):\n        if dna[i] not in \"TG\" and dna[i] not in \"AC\":\n            dna[i] = \"INVALID\"\n    return \"\".join(dna)"}, "1281": {"problem_id": 3642, "answer": "def boredom(staff):\n    d = {'accounts': 1, 'finance': 2, 'canteen': 10,'regulation': 3, 'trading': 6, 'change': 6, 'IS': 8,'retail': 5, 'cleaning': 4, 'pissing about': 25}\n    return 'kill me now' if d['accounts'] < 80 else 'i can handle this' if d['accounts'] > 100 else 'party time!!'"}, "1282": {"problem_id": 3643, "answer": "def distribute(nodes, workload):\n    r = []\n    for i in range(workload // nodes):\n        r.append([i, workload - i])\n    return r"}, "1283": {"problem_id": 3644, "answer": "from heapq import *\ndef add_all(lst):\n    heapify(lst)\n    cost = 0\n    while len(lst) > 1:\n        cost += heappop(lst)\n        heappush(lst, heappop(lst)[1])\n    return cost"}, "1284": {"problem_id": 3645, "answer": "def diff(a, b):\n    return sorted(set(a) | set(b))"}, "1285": {"problem_id": 3646, "answer": "from math import factorial as fact\nfrom functools import reduce\ndef fixed_points_perms(n,k):\n    return fact(n)//(fact(k)*fact(n-k))"}, "1286": {"problem_id": 3647, "answer": "def solve(arr):\n    arr.sort()\n    res = []\n    for i in range(len(arr)):\n        res.append(arr[i])\n        if arr[i] > res[-1]:\n            res.pop()\n        elif arr[i] < res[-1]:\n            res.pop()\n        else:\n            res.append(arr[i])\n    return res"}, "1287": {"problem_id": 3648, "answer": "def summy(s):\n    return sum(map(int, s.split()))"}, "1288": {"problem_id": 3649, "answer": "def aa_percentage(seq, r=[\"A\", \"I\", \"L\", \"M\", \"F\", \"W\", \"Y\", \"V\"]):\n    return round(100 * sum(seq.count(aa) for aa in r)/len(seq) if r else 0)"}, "1289": {"problem_id": 3650, "answer": "def solve(arr):\n    arr = sorted(arr, key=lambda x: x%3)\n    return [next(iter(arr)) for _ in arr]"}, "1290": {"problem_id": 3651, "answer": "def square(number):\n    return 2**(number-1)"}, "1291": {"problem_id": 3652, "answer": "def button_sequences(r, b):\n    return \"\".join(f\"{'R' if r[i] == '0' else 'B'}\"[i] for i in range(2, len(r)))"}, "1292": {"problem_id": 3653, "answer": "def tops(msg):\n    n = len(msg)\n    l = [msg[i:i+n] for i in range(0, n, 2)]\n    return ''.join(l[i] for i in range(1, n, 2))"}, "1293": {"problem_id": 3654, "answer": "def divisible_count(x,y,k):\n    return sum(1 for i in range(x, y+1) if i % k == 0)"}, "1294": {"problem_id": 3655, "answer": "def my_crib(n):\n    roof = '\\n'.join('{:^{}d}'.format(' '*(n-i) + '_'*(i+1)).center(2*n-i, '_') for i in range(n))\n    return roof"}, "1295": {"problem_id": 3656, "answer": "from fractions import Fraction\nDECOMPOSITES = [\"1/2\", \"1/3\", \"1/13\", \"1/359\", \"1/644046\"]\n\ndef decompose(n):\n    if n.is_integer():\n        return DECOMPOSITES[:n]\n    elif n.is_decimal():\n        numerator, denominator = Fraction(n), abs(n)\n        numerator, denominator = numerator.numerator, denominator.denominator\n        numerator, denominator = numerator / denominator, numerator % denominator\n        return DECOMPOSITES[:numerator] + DECOMPOSITES[numerator]"}, "1296": {"problem_id": 3657, "answer": "def series_slices(digits, n):\n    if n > len(digits):\n        raise ValueError('n cannot be greater than the length of'+ str(len(digits)))\n    else:\n        return [int(i) for i in digits[:n]]"}, "1297": {"problem_id": 3658, "answer": "from itertools import cycle\n\ndef swap(s,n):\n    bin_n = bin(n)[2:]\n    return ''.join(c.swapcase() if c.isalpha() and next(cycle(bin_n)) else c for c in s)"}, "1298": {"problem_id": 3659, "answer": "import numpy as np\n\ndef variance(words):\n    return round(np.var(np.array(words))/len(words),4)"}, "1299": {"problem_id": 3660, "answer": "from math import factorial as f\nfrom itertools import combinations as c\nfrom functools import reduce\ndef count_paths(N, coords):\n    return f(N).reduce(lambda a,b: a+f(b)//f(f(N)//f(b)),0)"}, "1300": {"problem_id": 3661, "answer": "from collections import defaultdict\ndef find_part_max_prod(n):\n    mx = defaultdict(list)\n    for i in range(1, n+1):\n        mx[i].append(i)\n        mx[i].sort()\n    #print(mx)\n    return [[i, len(mx[i])] for i in range(1, n+1)]"}, "1301": {"problem_id": 3662, "answer": "def xor(a,b):\n    if a == True and b == True:\n        return False\n    elif a == True and b == False:\n        return True\n    else:\n        return False"}, "1302": {"problem_id": 3663, "answer": "def four_piles(n,y):\n    x = y*0.5\n    return [x+y,x-y,x*y,x/y] if y>0 else []"}, "1303": {"problem_id": 3664, "answer": "def cat_mouse(x):\n    return \"Escaped!\" if len(x)>4 else \"Caught!\""}, "1304": {"problem_id": 3665, "answer": "from bisect import bisect_left as bisect\nfrom itertools import permutations as p\nsieve = [False] * (10**5 + 7)\nfor i in range(2, 20000):\n    if sieve[i]:\n        for j in range(i**2, 20000, i):\n            sieve[j] = False\nprimes = set(p(i) for i in range(1, int(len(sieve)**0.5)+1) if sieve[i])\nnot_primes = [a for a in range(a, b) if all(not p(a % d) for d in range(3, int(len(sieve)**0.5)+1))]"}, "1305": {"problem_id": 3666, "answer": "def whitespace(string):\n    return string.strip() == \" \\t\\n\\r\""}, "1306": {"problem_id": 3667, "answer": "def mid_endian(n):\n    h = hex(n)[2:].upper()\n    h = h.translate(str.maketrans('0123456789ABCDEF', 'FFFFFF00'))\n    return ''.join(c * 16**len(h) + c for c in reversed(list(range(0, len(n), 16)))).zfill(2)"}, "1307": {"problem_id": 3668, "answer": "def find_mult10_SF(n):\n    sf = [1,2,3,4,5,6,7,8,9,10]\n    for i in range(n):\n        if i % 10 == 0:\n            sf.append(sf[i % 10])\n    return sf[n-1]"}, "1308": {"problem_id": 3669, "answer": "from itertools import permutations\n\ndef sc_perm_comb(num):\n    return sum(int(''.join(p)) for p in permutations(str(num)))"}, "1309": {"problem_id": 3670, "answer": "def domino_reaction(s):\n    return s.replace(\"|\", \"/\", len(s) // 2).replace(\"/\", \"/\", len(s) // 2)"}, "1310": {"problem_id": 3671, "answer": "def problem(a):\n    if type(a) == int or type(a) == float:\n        return int(a * 50 + 6)\n    else:\n        return \"Error\""}, "1311": {"problem_id": 3672, "answer": "from itertools import combinations_with_replacement as c\ndef solve(s):\n    return sum(1 for i in range(len(s)) if s[i] % 2!= 0)"}, "1312": {"problem_id": 3673, "answer": "def totient(n):\n    if type(n) is not int or n < 1:\n        return 0\n    p = 2\n    while n > p*p:\n        p += 1\n    return n*p"}, "1313": {"problem_id": 3674, "answer": "def add_binary(a,b):\n    #your code here\n    c = a + b\n    binary = c.__mul__(c.__sub__(c.__neg__()))\n    return ''.join(chr(int(binary, 2)) for binary in bin(c)[2:].split('0b'))"}, "1314": {"problem_id": 3675, "answer": "def negation_value(s, val):\n    return len(s) % 2 == 0"}, "1315": {"problem_id": 3676, "answer": "def sum_it_up(numbers_with_bases):\n    return sum(int(i) for i in numbers_with_bases)"}, "1316": {"problem_id": 3677, "answer": "def filter_homogenous(arrays):\n    return [a for a in arrays if all(type(a[0]) == type(b) for b in a[1:] if b not in ['int','str'])]"}, "1317": {"problem_id": 3678, "answer": "def code(x,y):\n    return sum(2**n for n in range(0,10000))"}, "1318": {"problem_id": 3679, "answer": "import re\ndef calculate_string(st):\n    return f\"{round(eval('*'.join(re.findall(r'[^0-9\\-\\+\\-\\*\\/\\+]{1,2}[0-9\\+\\-\\*\\/\\+\\g<>\\?\\*\\+\\-\\d]*\\.[0-9\\+\\-\\*\\/\\+\\g<>\\?]{1,2}[0-9\\+\\-\\*\\/\\+\\g<>\\?]{1,2}[0-9\\+\\-\\*\\/\\+\\g<>\\?]{1,2}')))}\".format(st)"}, "1319": {"problem_id": 3680, "answer": "def factorial(n):\n    if n < 0:\n        return None\n    elif n < 1:\n        return 0\n    else:\n        return n * factorial(n-1)"}, "1320": {"problem_id": 3681, "answer": "def convert_num(number, base):\n    try:\n        return hex(number)\n    except ValueError:\n        return \"Invalid base input\"\n    try:\n        return bin(number)\n    except ValueError:\n        return \"Invalid number input\""}, "1321": {"problem_id": 3682, "answer": "def string_constructing(a, s):\n    c = 0\n    for i in range(len(s)):\n        if s[i] not in a:\n            c += 1\n            a = s[i]\n    return c"}, "1322": {"problem_id": 3683, "answer": "def letter_count(s):\n    return {c:s.count(c) for c in set(s)}"}, "1323": {"problem_id": 3684, "answer": "def is_orthogonal(u, v): \n    return sum(a*b for a, b in zip(u, v)) == 0"}, "1324": {"problem_id": 3685, "answer": "def read_out(acrostic):\n    return ''.join(i[0] for i in acrostic).upper()"}, "1325": {"problem_id": 3686, "answer": "import re\ndef calculate(s):\n    try:\n        return eval(re.sub(r'\\b0+(?=\\d)', '', s))\n    except:\n        return False"}, "1326": {"problem_id": 3687, "answer": "from fractions import gcd\ndef mn_lcm(m, n):\n    return 25*n//m + m*mn_lcm(m,n%m)"}, "1327": {"problem_id": 3688, "answer": "def table_game(table):\n    d = {i: table.count(i) for i in set(table)}\n    return [d[i] for i in table]"}, "1328": {"problem_id": 3689, "answer": "def how_many_pizzas(n):\n    return f\"pizzas: {n ** 2 // 8}, slices: {n **.5}\".format(n // 8)"}, "1329": {"problem_id": 3690, "answer": "def solve(st, idx):\n    open_brac = 0\n    close_brac = 0\n    for i in range(idx):\n        if st[i] == '(':\n            open_brac += 1\n        elif st[i] == ')':\n            close_brac += 1\n            open_brac -= 1\n    return -1 if close_brac == 0 else open_brac"}, "1330": {"problem_id": 3691, "answer": "def get_a_down_arrow_of(n):\n    #your code here\n    if n < 10:\n        return ''.join([i for i in range(1, n+1) if i not in '1234567890'])\n    elif n < 100:\n        return ''.join([i for i in range(1, n+1) if i not in '123456789012'])\n    else:\n        return ''.join([i for i in range(1, n+1) if i not in '12345678901'])"}, "1331": {"problem_id": 3692, "answer": "def median(arr):\n    return (sum(arr)/len(arr))*round(.5)"}, "1332": {"problem_id": 3693, "answer": "def make_negative( number ):\n    if number <= 0:\n        return number\n    elif number > 0:\n        return number * -1"}, "1333": {"problem_id": 3694, "answer": "def triple_shiftian(base,n):\n    a, b, c = base\n    for i in range(n):\n        a, b, c = b, c, 4 * c - 5 * b + 3 * a\n    return a"}, "1334": {"problem_id": 3695, "answer": "from itertools import groupby\ndef repeat_adjacent(s):\n    return sum(1 for _ in groupby(s) if len(set(list(g))) >= 2)"}, "1335": {"problem_id": 3696, "answer": "def add(l):\n    return [sum(l[i:i+k]) for i in range(0,len(l),k)]"}, "1336": {"problem_id": 3697, "answer": "def list_depth(l):\n    return max(list_depth(x) for x in l if isinstance(x, list))"}, "1337": {"problem_id": 3698, "answer": "def tiy_fizz_buzz(string):\n    return ''.join(c if c in 'AEIOU' else c.upper() for c in string)"}, "1338": {"problem_id": 3699, "answer": "def ranks(a):\n    rank = {i: a.count(i) for i in sorted(a)[::-1]}\n    return [rank.get(i, 0) + 1 for i in a]"}, "1339": {"problem_id": 3700, "answer": "def kooka_counter(laughing):\n    return laughing.count('Haha')"}, "1340": {"problem_id": 3701, "answer": "from fractions import gcd\ndef lcm(*args):\n    return gcd(args[0], args[1]) if args else 1"}, "1341": {"problem_id": 3702, "answer": "def olympic_ring(string):\n    rings = 'abdegopqADOPQR'.split()\n    return 'Not even a medal!' if sum(rings.count(c) for c in string)//2 else \\\n            'Bronze!' if sum(rings.count(c) for c in string)%2 else \\\n            'Silver!' if sum(rings.count(c) for c in string)>3 else \\\n            'Gold!'"}, "1342": {"problem_id": 3703, "answer": "def order(pizzas, salads, appetizers):\n    pizza_time = 3 + 10 + 3 + 5 + 2 + 2 * pizzas\n    app_time = 3 + 5 + 2 * pizzas\n    chef_time = 2"}, "1343": {"problem_id": 3704, "answer": "def solve_for_x(equation):\n    a, b = equation.split('=')\n    try:\n        return eval(a)\n    except:\n        return b"}, "1344": {"problem_id": 3705, "answer": "import math\ndef heron(a,b,c):\n    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)"}, "1345": {"problem_id": 3706, "answer": "def layers(n):\n    return 1 + (n - 1)**2"}, "1346": {"problem_id": 3707, "answer": "def sorter(textbooks):\n    return sorted(textbooks, key=str.casefold)"}, "1347": {"problem_id": 3708, "answer": "def hex_to_dec(s):\n    return int(s,16)"}, "1348": {"problem_id": 3709, "answer": "def simple_multiplication(number) :\n    return number * 8"}, "1349": {"problem_id": 3710, "answer": "def ulam_sequence(u0, u1, n):\n    seq = [u0, u1]\n    while len(seq) < n:\n        seq.append(min(seq[-1], u0 + u1))\n    return seq"}, "1350": {"problem_id": 3711, "answer": "def xMasTree(n):\n    return [''.join(['#'*(i-j) + '_'*(n-j) for j in range(n)]) for i in range(1, n+1)]"}, "1351": {"problem_id": 3712, "answer": "def getSlope(p1, p2):\n    return None if p1[0] == p2[0] else (p1[1] - p2[1])/(p1[0] - p2[0])"}, "1352": {"problem_id": 3713, "answer": "def find_deleted_number(arr, mixed_arr):\n    return sum(arr.count(x) - 1 for x in mixed_arr)"}, "1353": {"problem_id": 3714, "answer": ""}, "1354": {"problem_id": 3715, "answer": "def nth_chandos_number(n):\n    return 5**n"}, "1355": {"problem_id": 3716, "answer": "def unusual_sort(array):\n    return sorted(array, key=lambda x: int(x) < 10)"}, "1356": {"problem_id": 3717, "answer": "def covered_pawns(pawns):\n    board = [[0] * 8 for _ in range(8)]\n    for i in range(1, len(pawns)):\n        for j in range(8):\n            board[j][i] += 1 if pawns[i-1] == pawns[i] else 0\n    return sum(board.values())"}, "1357": {"problem_id": 3718, "answer": "def divisors(n):\n    return sum(1 for x in range(1,n+1) if n % x == 0)"}, "1358": {"problem_id": 3719, "answer": "def starting_mark(height):\n    return round(3.935483870967742*height+3.468064516128906,2)"}, "1359": {"problem_id": 3720, "answer": "def hex_hash(code):\n    return sum(int(d) for d in ''.join([hex(ord(c)) for c in code]))"}, "1360": {"problem_id": 3721, "answer": "def catch_sign_change(lst):\n    return sum(1 for i in range(len(lst)) if lst[i] < 0)"}, "1361": {"problem_id": 3722, "answer": "from statistics import mean\ndef average(array):\n    return round(mean(array))"}, "1362": {"problem_id": 3723, "answer": "def array_change(arr):\n    moves = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i + 1]:\n            moves += 1\n        elif arr[i] > arr[i + 1]:\n            moves += 1\n    return moves"}, "1363": {"problem_id": 3724, "answer": "def hero(bullets, dragons):\n    if bullets >= 2*dragons:\n        return True\n    else:\n        return False"}, "1364": {"problem_id": 3725, "answer": "def shift_left(a, b):\n    l = len(a)\n    r = len(b)\n    if l == 0:\n        return 0\n    elif r == 0:\n        return l\n    else:\n        return min(shift_left(a[i:], b[i:]) for i in range(l-1))"}, "1365": {"problem_id": 3726, "answer": "def sort_array(source_array):\n    return sorted(n for n in source_array if n % 2!= 0)"}, "1366": {"problem_id": 3727, "answer": "def pythagorean_triplet(n):\n    triplets = []\n    for i in range(1,n):\n        triplets.append(i**2 + i)\n        if i**2 == n:\n            triplets.append(i)\n    return triplets"}, "1367": {"problem_id": 3728, "answer": "def describeList(list):\n    return [\"empty\", \"singleton\", \"longer\"][len(list) > 1]"}, "1368": {"problem_id": 3729, "answer": "def count_zeros_n_double_fact(n):\n    return 0 if n%2!=0 else sum(1 if n%5==0 else 0 for i in range(n))"}, "1369": {"problem_id": 3730, "answer": "def capitalize(s):\n    even = ''.join([c.upper() if i%2==0 else c for i,c in enumerate(s)])\n    odd = ''.join([c.upper() if i%2!=0 else c for i,c in enumerate(s)])\n    return [even, odd]"}, "1370": {"problem_id": 3731, "answer": "def square_sums_row(n):\n    s = [i for i in range(1, n+1)]\n    s.extend([i*i for i in range(1, n+1)])\n    return s"}, "1371": {"problem_id": 3732, "answer": "def is_madhav_array(arr):\n    return len(arr) == 1"}, "1372": {"problem_id": 3733, "answer": "def arithmetic_sequence_elements(a, r, n):\n    return ', '.join(str(a + r*i) for i in range(n))"}, "1373": {"problem_id": 3734, "answer": "import re\ndef roll(desc, verbose=False):\n    if not desc: return False\n    dices, modifiers = [], 0\n    for line in desc.split('\\n'):\n        try:\n            dices.append(int(re.search('(\\d*)[+-]?(\\d*)', line).group(1)))\n        except:\n            dices.append(int(line))\n        try:\n            modifiers += int(re.search('(\\d*)[+-]?(\\d*)', line).group(2)))\n        except:\n            modifiers += int(line)\n    return {'dice': dices,'modifier': modifiers} if verbose else sum(dices)"}, "1374": {"problem_id": 3735, "answer": "def find_missing_numbers(arr):\n    return [i for i in range(arr[0], arr[-1]) if i not in arr]"}, "1375": {"problem_id": 3736, "answer": "def minimum(arr):\n    min = arr[0]\n    for i in arr:\n        if i < min:\n            min = i\n    return min\n\ndef maximum(arr):\n    max = arr[0]\n    for i in arr:\n        if i > max:\n            max = i\n    return max"}, "1376": {"problem_id": 3737, "answer": "def calc(a):\n    return sum(calc(i) for i in a)"}, "1377": {"problem_id": 3738, "answer": "def calc(k,n,m,x):\n    a,b=0,0\n    for i in range(n-1):\n        a,b=b,a+k*b\n        a,b=b,a-k*b\n    return a"}, "1378": {"problem_id": 3739, "answer": "from math import ceil\ndef branch(n):\n    if n==1:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        l=ceil(n/2)\n        r=ceil(n-l)\n        return l+r"}, "1379": {"problem_id": 3740, "answer": "def sort_time(arr):\n    hh, mm = map(int, arr[0].split(':'))\n    return sorted(arr, key=lambda x: (hh, mm), reverse=True)"}, "1380": {"problem_id": 3741, "answer": "def vector_affinity(a, b):\n    return sum(1 for i in a for j in b for k in i for l in j) / max(len(a), len(b))"}, "1381": {"problem_id": 3742, "answer": "from collections import Counter\n\ndef modes(data):\n    cnt = Counter(data)\n    return sorted(cnt.most_common(), key=lambda x: (-x[1], x[0]))"}, "1382": {"problem_id": 3743, "answer": "def chess_board(rows, columns):\n    return [[\"OX\"[i] if i%2==0 else \"O\"[i] for i in range(columns)]]"}, "1383": {"problem_id": 3744, "answer": "def oddest(a):\n    n = 0\n    for x in a:\n        if x % 2 == 1:\n            n += 1\n        elif x % 2 == 0:\n            n += 1\n    return n"}, "1384": {"problem_id": 3745, "answer": "from string import ascii_lowercase as AL, digits as DIG\n\ndef encode(message, key, initShift):\n    k = ''.join(sorted(key))\n    shift = initShift - len(k)\n    return message.translate(str.maketrans(AL, DIG).translate(str.maketrans(DIG, AL))) + k[:shift]"}, "1385": {"problem_id": 3746, "answer": "def next_pal(val):\n    s = str(val)\n    if s == s[::-1]:\n        return val + 1\n    else:\n        return next_pal(s.upper())"}, "1386": {"problem_id": 3747, "answer": "import re\ndef ipv4_address(address):\n    return bool(re.match('((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])[.]){5}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\Z',address))"}, "1387": {"problem_id": 3748, "answer": "def six_column_encryption(msg):\n    msg = msg.replace(' ','.')\n    lst = [msg[i:i+6] for i in range(0, len(msg), 6)]\n    return''.join(lst)"}, "1388": {"problem_id": 3749, "answer": "def expanded_form(num):\n    return'+ '.join([str(x) for x in reversed(reversed(num))])"}, "1389": {"problem_id": 3750, "answer": "def count_letters_and_digits(s):\n    return sum(1 for c in s for d in s if c.isalnum() or d.isalnum())"}, "1390": {"problem_id": 3751, "answer": "def bool_to_word(boolean):\n    if boolean == True:\n        return \"Yes\"\n    elif boolean == False:\n        return \"No\""}, "1391": {"problem_id": 3752, "answer": "from math import factorial as f\nfrom functools import reduce\n\ndef value_at(poly_spec, x):\n    r = reduce(f, [x for x in poly_spec])\n    return round(r, 2)"}, "1392": {"problem_id": 3753, "answer": "def camel_case(string):\n    return ''.join([i.title() for i in string.split()])"}, "1393": {"problem_id": 3754, "answer": "def prime_product(n):\n    if n == 2:\n        return 0\n    elif n < 2:\n        return 0\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return i*i\n        return n"}, "1394": {"problem_id": 3755, "answer": "def sortme(words):\n    return sorted(words, key=lambda x: x.lower())"}, "1395": {"problem_id": 3756, "answer": "def goldbach_partitions(n):\n    if n % 2 == 0:\n        return []\n    res = []\n    for i in range(3, n//2 + 1, 2):\n        if i < n:\n            res.append(i)\n    return res"}, "1396": {"problem_id": 3757, "answer": "def round_to_five(numbers):\n    return [int(n/5.0) for n in numbers]"}, "1397": {"problem_id": 3758, "answer": "def word_mesh(arr):\n    mesh = []\n    for i in range(len(arr)):\n        mesh.append(arr[i].count(arr[i][-1]))\n        if mesh[-1] > 1:\n            return \"failed to mesh\"\n    return \"\".join(mesh)"}, "1398": {"problem_id": 3759, "answer": "from functools import reduce\ndef product_array(numbers):\n    return [reduce(lambda x,y:x*y,numbers) for i in range(len(numbers))]"}, "1399": {"problem_id": 3760, "answer": "def roundRobin(jobs, slice, index):\n    i = 0\n    while i < len(jobs):\n        t = jobs[i]\n        j = i + slice\n        while j < len(jobs):\n            if jobs[j] < t:\n                jobs[j] = jobs[j] + t\n                j += 1\n            else:\n                break\n        i += 1\n    return len(jobs)"}, "1400": {"problem_id": 3761, "answer": "from collections import Counter\ndef strange_coach(players):\n    c = Counter(players)\n    return \"\".join(c.keys()) if len(players) < 5 else \"forfeit\""}, "1401": {"problem_id": 3762, "answer": "def pattern(n):\n    return '\\n'.join(str(i) * i for i in range(1, n + 1))"}, "1402": {"problem_id": 3763, "answer": "def calculator(x,y,op):\n    if isinstance(x, int) and isinstance(y, int):\n        if op == '+':\n            return x + y\n        elif op == '-':\n            return x - y\n        elif op == '*':\n            return x * y\n        elif op == '/':\n            return x / y\n    return 'unknown value'"}, "1403": {"problem_id": 3764, "answer": "def arbitrate(s, n):\n    return ''.join(chr(int(s[i:i+n]) - 96) for i in range(len(s) - n + 1))"}, "1404": {"problem_id": 3765, "answer": "from collections import Counter\n\ndef highest_age(group1,group2):\n    d = Counter(group1)\n    return min(d.items(), key=lambda x: x[1])[0][1]"}, "1405": {"problem_id": 3766, "answer": "import math\ndef getAllPrimeFactors(n):\n    if type(n)!=int:\n        return []\n    elif n<=0:\n        return []\n    else:\n        primes=[]\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                primes.append(i)\n                n//=i\n        if n!=1:\n            primes.append(n)\n        return [2] + primes"}, "1406": {"problem_id": 3767, "answer": "from math import factorial\n\ndef dec2FactString(nb):\n    nb = str(nb)\n    return ''.join(chr(65 + i) for i in range(0, 26))\n"}, "1407": {"problem_id": 3768, "answer": "def name_file(fmt, nbr, start):\n    return [fmt.replace('<index_no>', str(i)) for i in range(start, start+nbr)] if isinstance(start, int) \\\n        else []"}, "1408": {"problem_id": 3769, "answer": ""}, "1409": {"problem_id": 3770, "answer": "def to_1D(x, y, size):\n    return y + x*size[0]"}, "1410": {"problem_id": 3771, "answer": "import re\ndef validate_number(s):\n    return 'In with a chance' if re.match('^(07|447)$',s) else 'Plenty more fish in the sea'"}, "1411": {"problem_id": 3772, "answer": ""}, "1412": {"problem_id": 3773, "answer": "def isValid(formula):\n    if 1 in formula and 2 in formula:\n        return False\n    elif 3 in formula and 4 in formula:\n        return False\n    elif 5 in formula and 6 not in formula:\n        return False\n    elif 6 in formula and 5 not in formula:\n        return False\n    elif 7 not in formula and 8 not in formula:\n        return False\n    else:\n        return True"}, "1413": {"problem_id": 3774, "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num%i == 0:\n                return False\n        return True"}, "1414": {"problem_id": 3775, "answer": "def digits(n):\n    # your code here\n    num = str(n)\n    return len(num)"}, "1415": {"problem_id": 3776, "answer": "def segment_cover(A, L):\n    c=0\n    for i in A:\n        if i<0:\n            c+=1\n        else:\n            c+=abs(i)\n    return c"}, "1416": {"problem_id": 3777, "answer": "def quicksum(packet):\n    s =''\n    for i in range(len(packet)):\n        s += packet[i]\n    return sum(c * (ord(s[i]) - ord(s[i - 1])) for i, c in enumerate(s))"}, "1417": {"problem_id": 3778, "answer": "def find_smallest_int(arr):\n    # Code here\n    arr.sort()\n    return arr[0]"}, "1418": {"problem_id": 3779, "answer": "def past(h, m, s):\n    return 60*h + 60*m + s"}, "1419": {"problem_id": 3780, "answer": "def example_sort(arr, example_arr):\n    return sorted(arr, key=example_arr.index)"}, "1420": {"problem_id": 3781, "answer": "def prod_int_partII(n, s):\n    if n<100:\n        return [prod_int_partII(n, s) for i in range(2,int(n**.5)+1) if n%i==0]\n    else:\n        res=[]\n        for i in range(2,int(n**.5)+1):\n            if n%i==0:\n                res.append(prod_int_partII(n//i, s))\n        return [len(res),sum(res),sorted(res,key=lambda x:len(x[1]))]"}, "1421": {"problem_id": 3782, "answer": "def check_three_and_two(array):\n    return len(set(array).intersection(set(array).difference(set('ab')))) == 2"}, "1422": {"problem_id": 3783, "answer": "def frame(text, char):\n    frame = '\\n'.join(char*(len(text)//2)+char for char in text)\n    return frame + '\\n' + char"}, "1423": {"problem_id": 3784, "answer": "def sort_transform(arr):\n    return '-'.join([chr(arr[i]) for i in range(0, len(arr), 2)]) + '-' +''.join([chr(arr[i]) for i in range(1, len(arr), 2)]) + '-' + [chr(arr[i]) for i in range(3, len(arr), 2)])"}, "1424": {"problem_id": 3785, "answer": "def generate_diagonal(n, l):\n    return [1]*.__getitem__(n+l)"}, "1425": {"problem_id": 3786, "answer": "import re\ndef siegfried(week, txt):\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt)\n    txt = re.sub(r'([A-Z])\\1', r'\\1', txt)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([A-Z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    txt = re"}, "1426": {"problem_id": 3787, "answer": "def obfuscate(email):\n    return''.join(re.sub(r'\\b@\\w+\\b', '\\[at\\]', email))"}, "1427": {"problem_id": 3788, "answer": "def p_num(n):\n    if n%2==0:\n        return False\n    elif n%3==0:\n        return True\n    else:\n        return False"}, "1428": {"problem_id": 3789, "answer": "def score_throws(radiuses):\n    score = 0\n    for i in radiuses:\n        if i <= 5:\n            score += 10\n        elif i <= 10:\n            score += 5\n        else:\n            score += 0\n    return score"}, "1429": {"problem_id": 3790, "answer": "from operator import mul\nfrom functools import reduce\ndef solve(arr):\n    return reduce(mul, arr)"}, "1430": {"problem_id": 3791, "answer": "def moment_of_time_in_space(moment):\n    time, space = 0, 0\n    for c in moment:\n        if c.isdigit():\n            time += int(c)\n        else:\n            space += 1\n        if time < space:\n            return [False, False, False]\n    return [True, False, True]"}, "1431": {"problem_id": 3792, "answer": "def slogans(p,r):\n    c = 0\n    while r:\n        c += 1\n        r = r.replace(p[i], '')\n    return c"}, "1432": {"problem_id": 3793, "answer": "def triangle_type(a, b, c):\n    s = sorted((a, b, c))\n    return 0 if s[0] <= 90 else triangle_type(s[1], s[2], s[3])"}, "1433": {"problem_id": 3794, "answer": "def nth_smallest(arr, n):\n    if n < len(arr):\n        return None\n    else:\n        arr.remove(arr[n-1])\n        return arr[n-1]"}, "1434": {"problem_id": 3795, "answer": "def combat(health, damage):\n    #your code here\n    if damage > health:\n        return 0\n    elif damage > 0:\n        return health - damage\n    else:\n        return 0"}, "1435": {"problem_id": 3796, "answer": "def or_arrays(arr1, arr2, d=0):\n    return [a | b for a, b in zip(arr1, arr2)]"}, "1436": {"problem_id": 3797, "answer": "def find_the_ball(start, swaps):\n    \"\"\"\n    Given the starting position and swaps, return the location of the ball at the end.\n    \"\"\"\n    return start if start in swaps else find_the_ball(start[1:], swaps[:])"}, "1437": {"problem_id": 3798, "answer": "def cards_and_pero(s):\n    d = {'P': 1, 'K': 2, 'H': 3, 'T': 4}\n    for i in s:\n        d[i] += d.get(i, 0)\n    return [-1] * len(s)"}, "1438": {"problem_id": 3799, "answer": "def baubles_on_tree(baubles, branches):\n    if branches == 0:\n        return \"Grandma, we will have to buy a Christmas tree first!\"\n    elif baubles == 0:\n        return \"Grandma, we will have to buy a Christmas tree first!\"\n    else:\n        l = len(baubles)\n        r = sum(baubles)\n        return [l-1] + [r//baubles]"}, "1439": {"problem_id": 3800, "answer": "import re\ndef spreadsheet(s):\n    r, c = divmod(len(s), 26)\n    return f\"{r}C{c}\""}, "1440": {"problem_id": 3801, "answer": "def words_to_marks(s):\n    return sum(ord(c)-96 for c in s)"}, "1441": {"problem_id": 3802, "answer": "hoop_count = lambda n: \"Great, now move on to tricks\" if n < 10 else \"Keep at it until you get it\""}, "1442": {"problem_id": 3803, "answer": "from collections import defaultdict\ndef update_inventory(cur_stock, new_stock):\n    d = defaultdict(int)\n    for x, y in cur_stock:\n        d[y] += x\n    return [d[x] for x in sorted(d.items(), key=lambda x: x[1])]"}, "1443": {"problem_id": 3804, "answer": "def min_length_num(num_dig, ord_max):\n    s = 0\n    for i in range(ord_max):\n        if i == ord(\\\"n\\\") + 1:\n            s += 1\n        elif i < ord(\\\"n\\\"):\n            s += num_dig - 1\n        else:\n            break\n    return [True, s]"}, "1444": {"problem_id": 3805, "answer": "def histogram(values, bin_width):\n    n = len(values)\n    hist = [0] * (n + 1)\n    for i in range(1, n + 1):\n        hist[i] = values.count(values[i])\n    return hist"}, "1445": {"problem_id": 3806, "answer": "def black_and_white(height, width, compressed):\n    r = []\n    for i in range(height):\n        r.append(0)\n        for j in range(width):\n            if compressed[j] == 0:\n                r[i] = 1\n                break\n    return r"}, "1446": {"problem_id": 3807, "answer": "def smaller(arr):\n    return [n for n in arr[i:] if n < arr[i]]"}, "1447": {"problem_id": 3808, "answer": "def knight_or_knave(said):\n    return 'Knight!' if eval(said) else 'Knave! Do not trust.'"}, "1448": {"problem_id": 3809, "answer": "def charCheck(text, mx, spaces):\n    if spaces == False:\n        text = text.replace(' ', '')\n    return [len(text) <= mx, text[:mx]]"}, "1449": {"problem_id": 3810, "answer": "def greatest_product(n):\n    s = str(n)\n    a = []\n    for i in range(len(s)-4):\n        a.append(int(s[i:i+5]))\n    m = max(a)\n    return m"}, "1450": {"problem_id": 3811, "answer": "def largest_sum(s):\n    return max(sum(map(int, l)) for l in s.split('0'))"}, "1451": {"problem_id": 3812, "answer": "def nerdify(txt):\n    return ''.join(c if c.isalpha() else '4' if c in 'e' else '3' if c in 'E' else '1' for c in txt)"}, "1452": {"problem_id": 3813, "answer": "from math import ceil\ndef does_fred_need_houseboat(x,y):\n    return ceil((x**2 + y**2)**0.5)"}, "1453": {"problem_id": 3814, "answer": "def get_military_time(time):\n    h, m = map(int, time.split(':'))\n    return '{:02}:{:02}'.format(h * 12 + m)"}, "1454": {"problem_id": 3815, "answer": "from fractions import gcd\ndef coprimes(n):\n    return [i for i in range(1, n) if gcd(i, n) == 1]"}, "1455": {"problem_id": 3816, "answer": "def move_ten(st):\n    return ''.join(chr(97+ord(st[i])-97) for i in range(len(st)))"}, "1456": {"problem_id": 3817, "answer": "def split_without_loss(s, split_p):\n    return [s[:i] + s[i+1:].replace(split_p, split_p) for i in range(len(s)) if s[i]!= split_p]"}, "1457": {"problem_id": 3818, "answer": "def get_mixed_num(fraction):\n    n = '%d %d/%d' % (fraction, int(fraction//1+.5), int(fraction//1))\n    return n"}, "1458": {"problem_id": 3819, "answer": "def smash(words):\n    # Begin here\n    s = \"\"\n    for i in words:\n        s += i + \" \"\n    return s[:-1]"}, "1459": {"problem_id": 3820, "answer": "def checkered_board(n):\n    if type(n)!= int or n < 2:\n        return False\n    dark_squares =''.join(s for s in '\u25a1\u25a0' if s.isalpha()).split()\n    light_squares =''.join(s for s in '\u25a0\u25a1' if s.isalpha()).split()\n    return '\\n'.join(dark_squares + light_squares + dark_squares[-n:])"}, "1460": {"problem_id": 3821, "answer": "def chinese_zodiac(year):\n    animals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    elements = ['Wood', 'Fire', 'Earth', 'Metal', 'Water']\n    year = year//12\n    return year, animals[year], elements[year%2]"}, "1461": {"problem_id": 3822, "answer": "def pair_zeros(arr):\n    return [n for n in arr if n!= 0] + [n for n in arr if n == 0]"}, "1462": {"problem_id": 3823, "answer": "def deep_count(a):\n    return sum(1 for x in a if isinstance(x, list))"}, "1463": {"problem_id": 3824, "answer": "def find_spec_partition(n, k, com):\n    a = n\n    b = 1\n    c = 1\n    while a < n:\n        a += b\n        b += c\n        c += a\n    return [a, b, c]"}, "1464": {"problem_id": 3825, "answer": "import re\ndef filter_words(phrase):\n    return re.sub('(bad|mean|ugly|horrible|hideous)','awesome',phrase)"}, "1465": {"problem_id": 3826, "answer": "def cycle(n):\n    if n % 2 == 0:\n        return -1\n    elif pow(10, n, 10) == 1:\n        return 6\n    else:\n        return -1"}, "1466": {"problem_id": 3827, "answer": "import math\ndef missing_angle(h, a, o):\n    n = math.ceil((a**2 + o**2) / (2*h**2))\n    return round(n, 1)"}, "1467": {"problem_id": 3828, "answer": "from decimal import Decimal, ROUND_HALF_UP"}, "1468": {"problem_id": 3829, "answer": "def build_square(blocks):\n    n = len(blocks)\n    a = blocks.pop(0)\n    b = blocks.pop(0)\n    c = blocks.pop(0)\n    d = blocks.pop(0)\n    e = blocks.pop(0)\n    f = blocks.pop(0)\n    g = blocks.pop(0)\n    h = blocks.pop(0)\n    i = blocks.pop(0)\n    j = blocks.pop(0)\n    k = blocks.pop(0)\n    l = blocks.pop(0)\n    m = blocks.pop(0)\n    nr = n\n    for i in range(1,4):\n        if nr % i == 0:\n            nr = nr//i\n            break\n    if nr % 4 == 0:\n        nr = nr//4\n        break\n    if nr % 3 == 0:\n        nr = nr//3\n        break\n    if nr % 2 == 0:\n        nr = nr//2\n        break\n    if nr % 1 == 0:\n        nr = nr//1\n        break\n    if nr == 1:\n        return True\n    elif nr == 2:\n        return True\n    elif nr == 3:\n        return True\n    elif nr == 4:\n        return True\n    else:\n        return False"}, "1469": {"problem_id": 3830, "answer": "from collections import Counter\n\ndef prime_factors(n):\n    cnt = Counter(n)\n    primes = []\n    for i in range(2, int(n**0.5)+1):\n        if cnt[i] > 0:\n            primes.append(i)\n            continue\n        \n        while n % i == 0:\n            n //= i\n            cnt[i] -= 1\n        "}, "1470": {"problem_id": 3831, "answer": "def angle(n):\n    return 180*(n-2)"}, "1471": {"problem_id": 3832, "answer": "from math import factorial\nall_permuted=lambda n:sum(factorial(n-i)for i in range(1,n+1))"}, "1472": {"problem_id": 3833, "answer": "def longest(s1, s2):\n    return ''.join(sorted(set(s1), key=lambda x: len(s2.intersection(x))))"}, "1473": {"problem_id": 3834, "answer": "def palin(a,b):\n    s = str(a)\n    l = len(s)\n    return int(s[l-2:l+2])"}, "1474": {"problem_id": 3835, "answer": "from collections import Counter\ndef find_discounted(prices):\n    prices = [int(s) for s in prices.split()]\n    c = Counter(prices)\n    return''.join(map(str, sorted(c.values())))"}, "1475": {"problem_id": 3836, "answer": "def factors(x):\n    if type(x)!= int or x < 1:\n        return -1\n    return [x] + sorted(range(1, x+1), key=lambda n: n//abs(n))"}, "1476": {"problem_id": 3837, "answer": "def reverse(right):\n    return list(reversed(right))"}, "1477": {"problem_id": 3838, "answer": "def goto(level,button):\n    return int(button) - level"}, "1478": {"problem_id": 3839, "answer": "def score_test(tests, right, omit, wrong):\n    return sum(right-omit if test==0 else omit-wrong for test in tests)"}, "1479": {"problem_id": 3840, "answer": "from math import sqrt\ndef largest_power(n):\n    if n<4: return (1, -1)\n    elif n==4: return (0, -1)\n    else:\n        a,b=divmod(n,2)\n        return (a**b, max(a**b,sqrt(n-a)))"}, "1480": {"problem_id": 3841, "answer": "from itertools import permutations\n\ndef get_words(hash_of_letters):\n    return sorted(sorted(set(zip(hash_of_letters, permutations(list(range(1, len(hash_of_letters))), r=1))))).translate(str.maketrans('abcdefghijklmnopqrstuvwxyz')).nlargest(3)"}, "1481": {"problem_id": 3842, "answer": "def word_wrap(text, limit):\n    s = text.split(\" \")\n    if len(s) > limit:\n        return \" \".join(s[:limit])\n    else:\n        return \" \".join(s)"}, "1482": {"problem_id": 3843, "answer": "from string import ascii_uppercase, ascii_lowercase, digits\n\ndef decrypt(text):\n    if not text:\n        return text\n    elif text == \"\":\n        return text\n    else:\n        d = {c:i for i,c in enumerate(ascii_uppercase + ascii_lowercase)}\n        for i in range(len(text)):\n            d[text[i]] = d.get(text[i],0) - d.get(text[i] in d,0)\n        return \"\".join(map(str,d.keys()))"}, "1483": {"problem_id": 3844, "answer": "from itertools import combinations\nfrom functools import reduce\nfrom operator import mul\npoly_from_roots=lambda r:reduce(mul,combinations(r,3),1)"}, "1484": {"problem_id": 3845, "answer": "def product(numbers):\n    if numbers:\n        return eval('*'.join(numbers))\n    else:\n        return None"}, "1485": {"problem_id": 3846, "answer": "def f(k, n):\n    a = [1]\n    for i in range(1, n + 1):\n        a.append(a[-1] + f(i, k))\n    return a[-1]"}, "1486": {"problem_id": 3847, "answer": "def cycle(sequence):\n    m, l = next(i for i, x in enumerate(sequence) if x == sequence[i])\n    return [m, l] if m!= len(sequence) else cycle(sequence[:m+l])"}, "1487": {"problem_id": 3848, "answer": "from datetime import datetime"}, "1488": {"problem_id": 3849, "answer": "def spacify(string):\n    return''.join(string.split()[1:])"}, "1489": {"problem_id": 3850, "answer": "def close_to_zero(t):\n    return min(map(int, t.split()), key=lambda x: abs(x[0] - 0))"}, "1490": {"problem_id": 3851, "answer": "def interest(p,r,n):\n    return [round(p*r*n),round(p*r+p*r*n*1/100)]"}, "1491": {"problem_id": 3852, "answer": "def ips_between(start, end):\n    n = 0\n    for i in range(0, len(start)):\n        if start[i] > end[i]:\n            n += 1\n    return n"}, "1492": {"problem_id": 3853, "answer": "def numeric_formatter(template, n='1234567890'):\n    s = template.replace('+','').replace('-','').replace('.', '.').replace('.', '9\\%\\d').replace('.', '87\\%\\d').replace('.', '678\\%\\d').replace('.', '567\\%\\d').replace('.', '67890\\%\\d').replace('.', '5465\\%\\d').replace('.', '5465253289\\%\\d').replace('.', '546525328989\\%\\d').replace('.', '546525328959\\%\\d').replace('.', '546525328908\\%\\d').replace('.', '54652532895908\\%\\d').replace('.', '5465253294890\\%\\d').replace('.', '546525329485908\\%\\d').replace('.', '54652532948588\\%\\d').replace('.', '54652532948588\\%\\d').replace('.', '54652532948589\\%\\d').replace('.', '546525329485889\\%\\d').replace('.', '5465253294858588\\%\\d').replace('.', '5465253294858589\\%\\d').replace('.', '54652532948585889\\%\\d').replace('.', '54652532948585889\\%\\d').replace('.', '5465253294858587890\\%\\d').replace('.', '54652532948585878789\\%\\d').replace('.', '5465253294858587898\\%\\d').replace('.', '5465253294858587898\\%\\d').replace('.', '5465253294858587908\\%\\d').replace('.', '5465253294858587989\\%\\d').replace('.', '54652532948585879998\\%\\d').replace('.', '546525329485858799789\\%\\d').replace('.', '54652532948587995889\\%\\d').replace('.', '546525329485879958799\\%\\d').replace('.', '546525329485879958898\\%\\d').replace('.', '5465253294858799588789\\%\\d').replace('.', '54652532948587995879998\\%\\d').replace('.', '546525329485879958799789\\%\\d').replace('.', '546525329485879958799898\\%\\d').replace('.', '546525329485879987\\%\\d').replace('.', '5465253294887\\%\\d').replace('.', '5465253294887\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8b8\\%\\d').replace('+987 a878 b8"}, "1493": {"problem_id": 3854, "answer": "from datetime import date\ncheck_dates=lambda r: [0,0,0] if r[0]==date(2015,5,13) else [0,0,0]"}, "1494": {"problem_id": 3855, "answer": "def is_lock_ness_monster(string):\n    return any(i.isalnum() for i in ''.join([c for c in string.lower() if c in 'tl+ness']))"}, "1495": {"problem_id": 3856, "answer": "import numpy as np\nsolve=lambda a,b:sum(primes[np.gcd(a,b)])"}, "1496": {"problem_id": 3857, "answer": "def lose_weight(gender, weight, duration):\n    if gender not in ('M', 'F'):\n        return 'Invalid gender'\n    if weight <= 0:\n        return 'Invalid weight'\n    if duration <= 0:\n        return 'Invalid duration'\n    if gender == 'M':\n        return round(weight * 0.10)\n    elif gender == 'F':\n        return round(weight * 0.15)"}, "1497": {"problem_id": 3858, "answer": "import re\ndef unscramble_eggs(word):\n    return re.sub(r'([^aeiouAEIOU])egg', r'\\1', word)"}, "1498": {"problem_id": 3859, "answer": "def odd_one(arr):\n    return next((i for i, n in enumerate(arr) if n % 2!= 0), -1)"}, "1499": {"problem_id": 3860, "answer": "def how_many_apples(n):\n    return n**n-1"}, "1500": {"problem_id": 3861, "answer": "import re\ndef fire_and_fury(tweet):\n    if 'FIRE' in tweet.lower():\n        return 'You are fired!'\n    elif 'FURY' in tweet.lower():\n        return 'I am furious.'\n    else:\n        return 'Fake tweet.'"}, "1501": {"problem_id": 3862, "answer": "def mirror(code, chars=\"abcdefghijklmnopqrstuvwxyz\"):\n    d = {c: i for i, c in enumerate(code)}\n    return ''.join(d.get(c, c) for c in chars)"}, "1502": {"problem_id": 3863, "answer": "def final_attack_value(x,monster_list):\n    for i in monster_list:\n        if x >= i:\n            x += i\n        else:\n            x += max(i, x)\n    return x"}, "1503": {"problem_id": 3864, "answer": "def int32_to_ip(int32):\n    return '.'.join([str(bin(int32)[2:].zfill(32)) for i in range(32)])"}, "1504": {"problem_id": 3865, "answer": "def looper(start, stop, number):\n    return list(range(start, stop + 1))"}, "1505": {"problem_id": 3866, "answer": "def winner(candidates):\n    if len(candidates)!= 3 or any(not c.get(\"name\") or not c.get(\"scores\") or len(c[\"scores\"])!= 2 for c in candidates):\n        return False\n    score_sum = 0\n    for c in candidates:\n        score_sum += c[\"scores\"][0]\n        if score_sum > 100:\n            return False\n    return c[\"name\"]"}, "1506": {"problem_id": 3867, "answer": "def remove_rotten(bag_of_fruits):\n    return [f\"{name}\".lower() for name in bag_of_fruits] if bag_of_fruits else []"}, "1507": {"problem_id": 3868, "answer": "from itertools import combinations\nclosest_sum = lambda n, a: min(sum(combinations(n, 3)\n                                        for _ in range(a)), key=lambda x: abs(x-a))"}, "1508": {"problem_id": 3869, "answer": "def shape_area(n):\n    return 2*n**2 + 2*n + 1"}, "1509": {"problem_id": 3870, "answer": "def solve(s):\n    spaces = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            spaces.append(i)\n    return \"\".join(reversed(spaces))"}, "1510": {"problem_id": 3871, "answer": "def binary_simulation(s, q):\n    n = bin(s).replace('0b', '')\n    return [int(i, 2) for i in n.split('1') if i[0] == '1']"}, "1511": {"problem_id": 3872, "answer": "def sort_it(list_, n):\n    return''.join(sorted(list_.split(', '), key=lambda x: x[n-1]))"}, "1512": {"problem_id": 3873, "answer": "from operator import mul\nfrom functools import reduce\ndef product_sans_n(nums):\n    return [reduce(mul, nums[:i]) for i in range(len(nums)) if nums[i]!= 0]"}, "1513": {"problem_id": 3874, "answer": "def sort_twisted37(arr):\n    return sorted(arr, key=lambda n: int(str(n).translate(\"\".maketrans(\"37\", \"73\"))), reverse=True)"}, "1514": {"problem_id": 3875, "answer": "def draw(waves):\n    m = max(waves)\n    return '\\n'.join(''.join(str(x) for x in range(m, m - w, -1)) for w in range(len(waves)))"}, "1515": {"problem_id": 3876, "answer": "def find(n):\n    return sum(i for i in range(n+1) if i%3==0 or i%5==0)"}, "1516": {"problem_id": 3877, "answer": "from string import ascii_lowercase as al\n\nDICT = {c:i for i,c in enumerate(al)}\n\ndef T9(words, seq):\n    return [word for word in words if len(set(word.lower())) <= seq.count('z')]"}, "1517": {"problem_id": 3878, "answer": "def kangaroo(kanga1, rate1, kanga2, rate2):\n    # Your code here\n    if kanga1>kanga2:\n        kanga1,kanga2=kanga2,kanga1\n    elif kanga1<kanga2:\n        kanga1,kanga2=kanga2,kanga1\n    return kanga1>kanga2"}, "1518": {"problem_id": 3879, "answer": "def search(budget, prices):\n    return \",\".join(str(price) for price in sorted(prices) if price <= budget)"}, "1519": {"problem_id": 3880, "answer": "from functools import reduce\nfrom operator import mul\ndef is_smooth(n):\n    return reduce(mul, range(2, n + 1), \"\".join)"}, "1520": {"problem_id": 3881, "answer": ""}, "1521": {"problem_id": 3882, "answer": "def sort_by_value_and_index(arr):\n    return [e for e in sorted(enumerate(arr, 1), key=lambda x: x[1])]"}, "1522": {"problem_id": 3883, "answer": "from itertools import zip_longest\ndef solve(s):\n    vowels = ''.join(c for c in s if c in 'aeiou')\n    consonants = ''.join(c for c in s if c not in 'aeiou')\n    if len(vowels) > len(consonants):\n        return 'failed'\n    elif abs(len(vowels) - len(consonants)) > 1:\n        return 'failed'\n    else:\n        return ''.join(sorted(zip_longest(*[iter(vowels)] * len(consonants), fillvalue=''), key=lambda x: x[1]))"}, "1523": {"problem_id": 3884, "answer": "import re\ndef gym_slang(phrase):\n    phrase = re.sub(r'\\bspell\\b', '', phrase)\n    phrase = re.sub(r'\\bcomb\\b', '', phrase)\n    phrase = re.sub(r'\\bdon\\b|\\bspec\\b|\\bcomb\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bi\\b|\\bspecial\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\blong\\b|\\bspecial\\bo\\b|\\bspecial\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bsmall\\b|\\bspecial\\bsmall\\b|\\bspecial\\bsn\\b|\\bspecial\\bsd\\b|\\bspecial\\bsm\\b|\\bspecial\\bsl\\b|\\bspecial\\bsh\\b|\\bspecial\\bsg\\b|\\bspecial\\bsi\\b|\\bspecial\\bst\\b|\\bspecial\\bsw\\b|\\bspecial\\bcs\\b|\\bspecial\\bsc\\b|\\bspecial\\bss\\b|\\bspecial\\bsc\\b|\\bspecial\\bss\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b|\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\bi\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\bo\\b|\\bspecial\\bs(.+)\\bo\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\bi\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\blong\\b|\\bspecial\\bs(.+)\\bo\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\bi\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\blong\\b|\\bspecial\\bs(.+)\\bo\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\bi\\b|\\bspecial\\bs(.+)\\bi\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b|\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)\n    phrase = re.sub(r'\\bspecial\\bs(.+)\\b', '', phrase)"}, "1524": {"problem_id": 3885, "answer": "def values(n):\n    s = set()\n    for i in range(1, int(n**0.5) + 1):\n        s.add(i**2)\n    return len(s)"}, "1525": {"problem_id": 3886, "answer": "def total(arr):\n    s = 0\n    for i in range(2, len(arr)):\n        if arr[i] % i == 0:\n            s += arr[i]\n    return s"}, "1526": {"problem_id": 3887, "answer": ""}, "1527": {"problem_id": 3888, "answer": "def clock_degree(s) :\n    h, m = map(int, s.split(':'))\n    if h < 0 or m < 0.5*60:\n        return \"Check your time!\"\n    elif h == 0 and m == 0:\n        return \"Check your time!\"\n    elif m % 12 == 0 and m % 60 == 0:\n        return \"360:%d\" % (m // 12)\n    else:\n        h %= 12\n        m %= 60\n        return \"%s:%d\" % (h, m)"}, "1528": {"problem_id": 3889, "answer": "import re\ndef area_code(text):\n    return re.search(r'\\((\\d{3})\\)', text).group(1)"}, "1529": {"problem_id": 3890, "answer": "def get_honor_path(honor_score, target_honor_score):\n    return {'1kyus': 4, '2kyus': 1} if honor_score > target_honor_score else {}"}, "1530": {"problem_id": 3891, "answer": "def get_new_notes(salary,bills):\n    return max(0, sum(bills) - sum(salary.values()))"}, "1531": {"problem_id": 3892, "answer": "def grader(score):\n    if score < 0.6 or score > 1:\n        return 'F'\n    elif score < 0.7:\n        return 'D'\n    elif score < 0.8:\n        return 'C'\n    elif score < 0.9:\n        return 'B'\n    else:\n        return 'A'"}, "1532": {"problem_id": 3893, "answer": "def divisors(integer):\n    return [i for i in range(2, integer) if integer % i == 0]"}, "1533": {"problem_id": 3894, "answer": "def solve(s):\n    lower_count = 0\n    upper_count = 0\n    for i in s:\n        if i.islower():\n            lower_count += 1\n        elif i.isupper():\n            upper_count += 1\n    if lower_count > upper_count:\n        return s.lower()\n    else:\n        return s.upper()"}, "1534": {"problem_id": 3895, "answer": "def shifted_diff(first, second):\n    return second.count(first[0])"}, "1535": {"problem_id": 3896, "answer": "def solution(number):\n    return sum(n for n in range(number) if n%3==0 or n%5==0)"}, "1536": {"problem_id": 3897, "answer": "def solve(n,k):\n    return next((i+1 for i in range(n) if i!=k),0)"}, "1537": {"problem_id": 3898, "answer": "def convert_to_dms(dd_lat, dd_lon):\n    dms_lat = '{:03}*{:02}'.format(dd_lat)\n    dms_lon = '{:03}*{:02}'.format(dd_lon)\n    dms_lat = dms_lat.lstrip('0').rstrip('.')\n    dms_lon = dms_lon.lstrip('0').rstrip('.')\n    dms_lat = dms_lat.lstrip('-')\n    dms_lon = dms_lon.lstrip('-')\n    dms_lat = dms_lat.lstrip('.')\n    dms_lon = dms_lon.lstrip('.')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('GS')\n    dms_lon = dms_lon.lstrip('GS')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\).round(3)\n    dms_lon = dms_lon.lstrip('\\).round(3)\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('\\(')\n    dms_lon = dms_lon.lstrip('\\(')\n    dms_lat = dms_lat.lstrip('S')\n    dms_lon = dms_lon.lstrip('S')\n "}, "1538": {"problem_id": 3899, "answer": "def guess_my_number(guess, number = '123-451-2345'):\n    return ''.join(c for c in guess if c not in '-+#' or c.isdigit())"}, "1539": {"problem_id": 3900, "answer": ""}, "1540": {"problem_id": 3901, "answer": "def check_digit(n, i1, i2, d):\n    return str(d) in str(n)[i1:i2+1]"}, "1541": {"problem_id": 3902, "answer": "def duty_free(price, discount, holiday_cost):\n    return int(holiday_cost / (discount / 100) * price)"}, "1542": {"problem_id": 3903, "answer": "import re\ndef validate(message):\n    m = re.match(r'MDZHB \\d{2} \\d{3} [A-Z]+ \\d{2} \\d{2} \\d{2}', message)\n    return bool(m)"}, "1543": {"problem_id": 3904, "answer": "from itertools import product\ndef is_divisible_by_6(s):\n    return [i for i in product('*', repeat=len(s)) if s.startswith(i)]"}, "1544": {"problem_id": 3905, "answer": "def missing(s):\n    x}, "1545": {"problem_id": 3906, "answer": "def total(arr):\n    return sum(arr) / float(len(arr))"}, "1546": {"problem_id": 3907, "answer": "def communication_module(packet):\n    h, f = packet[:4]\n    d1, d2 = map(int, packet[4:8]).zfill(4)\n    return '{:02X}FFFF{:08X}0000{:08X}'.format(h, f, d1)"}, "1547": {"problem_id": 3908, "answer": "def solve(arr):\n    return sorted(arr, key=lambda x: (-arr.count(x), x))"}, "1548": {"problem_id": 3909, "answer": "def is_keith_number(n):\n    if n < 10: return False\n    n = str(n)\n    d = int(n[0])\n    e = int(n[1])\n    f = int(n[2])\n    g = int(n[3])\n    h = int(n[4])\n    i = 0\n    while d < e:\n        if d%10 == g:\n            i += 1\n        elif d%10 == f:\n            i += 2\n        elif d%10 == h:\n            i += 3\n        else:\n            i += 4\n        d += 1\n        e -= 1\n    return i"}, "1549": {"problem_id": 3910, "answer": "from itertools import product\nops = ''.join(x+' - '+x for x in product('12345678', repeat=10))\ndigs = ''.join(x+' + '+y for x in product('12345678', repeat=10) for y in product('12345678', repeat=10))\n\ndef operator_insertor(n):\n    return min(n//10**i for i in range(1,10) if n%10**i == ops[i])"}, "1550": {"problem_id": 3911, "answer": "def howmuch(m, n):\n    if m > n:\n        m, n = n, m\n    arr = [\"M: %d\" % i for i in range(n)]\n    arr.extend([\"B: %d\" % i for i in range(7)])\n    arr.extend([\"C: %d\" % i for i in range(9)])\n    return arr"}, "1551": {"problem_id": 3912, "answer": "def arr2bin(arr):\n    return bin(sum(x for x in arr if type(x) is int))"}, "1552": {"problem_id": 3913, "answer": "def solution(to_cur,value):\n    return ['${:,.2f}'.format(t) for t in sorted(list(map(float,value.split())))]"}, "1553": {"problem_id": 3914, "answer": "def dominator(arr):\n    m = 0\n    for i in arr:\n        if arr.count(i)>len(arr)/2.0:\n            m = i\n    return m"}, "1554": {"problem_id": 3915, "answer": "def solve(s):\n    cnt = 0\n    for i in s.split('\\n'):\n        a, b = map(int, i.split())\n        cnt += sum(map(int, a) + map(int, b))\n    return '\\n'.join(['No carry operation' if i[0] == 0 else\n}, "1555": {"problem_id": 3916, "answer": "from statistics import mean, median\n\ndef mean_vs_median(numbers):\n    mn, md = mean(numbers), median(numbers)\n    return \"same\" if mn == md else \"mean\" if mn > md else \"median\""}, "1556": {"problem_id": 3917, "answer": "def freeway_game(dist_km_to_exit, my_speed_kph, other_cars):\n    time_taken = 0\n    for car in other_cars:\n        time_taken += car.get_speed_kmh(my_speed_kph)\n        if time_taken > dist_km_to_exit:\n            time_taken -= dist_km_to_exit\n    return time_taken"}, "1557": {"problem_id": 3918, "answer": "def baby_count(x):\n    b = ''.join(c for c in x if c.isupper())\n    return b.count('b')"}, "1558": {"problem_id": 3919, "answer": "def shuffled_array(s):\n    s.remove(sum(s))\n    return sorted(s)"}, "1559": {"problem_id": 3920, "answer": "def hamming_distance(a, b):\n    return sum(map(int.bitCount, bin(a)[2:] + bin(b)[2:]))"}, "1560": {"problem_id": 3921, "answer": "def corrections(x):\n    return \" \".join([\"%s is %s\" % (x, \"more\" if x > 0 else \"equal\") for x in range(1,1000)])"}, "1561": {"problem_id": 3922, "answer": ""}, "1562": {"problem_id": 3923, "answer": "def micro_world(bacteria, k):\n    bacteria.sort()\n    n = len(bacteria)\n    i = 0\n    while i < n:\n        bacteria.append(min(bacteria[i], b) + k)\n        i += 1\n    return len(bacteria)"}, "1563": {"problem_id": 3924, "answer": "def reverse_words(text):\n    lst = text.split(' ')\n    return''.join(lst[::-1])"}, "1564": {"problem_id": 3925, "answer": "def is_john_lying(a,b,s):\n    return abs(a)**2 + abs(b)**2 <= s"}, "1565": {"problem_id": 3926, "answer": "def check_root(string):\n    try:\n        n = int(string.split(' ')[-1])\n        return '{}x{}x{}x{}'.format(n, n**2, n**3, n**4)\n    except:\n        return 'incorrect input'"}, "1566": {"problem_id": 3927, "answer": "def dig_pow(n, p):\n    digits = [int(i) for i in str(n)]\n    power = sum(digits[i]**(p+i) for i in range(1, len(digits)))\n    return int(''.join(reversed(str(power)))) if power else -1"}, "1567": {"problem_id": 3928, "answer": "def billboard(name, price=30):\n    return sum([price for i in range(len(name))])"}, "1568": {"problem_id": 3929, "answer": "def reverse(st):\n    # Your Code Here\n    s = st.split()\n    s.reverse()\n    return''.join(s)"}, "1569": {"problem_id": 3930, "answer": "def dollar_to_speech(value):\n    d = '%s dollar%s.' % (value,'s' * int(value[1:].index('$')))\n    return d"}, "1570": {"problem_id": 3931, "answer": "from collections import Counter\n\ndef build_or_buy(hand):\n    c = Counter(hand)\n    return [x for x in c.keys() if c[x] > 1]"}, "1571": {"problem_id": 3932, "answer": "def luxhouse(houses):\n    return [max(0, n-i) for i in range(len(houses))] + [0]*len(houses)"}, "1572": {"problem_id": 3933, "answer": "def hydrate(drink_string): \n    n = 0\n    for i in range(1, 10):\n        if 'b' in str(drink_string):\n            n += 1\n        elif 'w' in str(drink_string):\n            n += 2\n        elif 'p' in str(drink_string):\n            n += 3\n    return '%d%s%d%s' % (n,'glass of water', n, n)"}, "1573": {"problem_id": 3934, "answer": "def pattern(n):\n    return '\\n'.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.format(n])).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]).ljust(n)]"}, "1574": {"problem_id": 3935, "answer": "def vowel_recognition(s):\n    return sum(1 if c in 'aeiou' else 0 for c in s)"}, "1575": {"problem_id": 3936, "answer": ""}, "1576": {"problem_id": 3937, "answer": "def max_sumDig(nMax, maxSum):\n    lst = []\n    for i in range(1000, nMax+1):\n        s = str(i)\n        if sum(map(int, s)) <= maxSum:\n            lst.append(i)\n    return [len(lst), min(lst), max(lst)]"}, "1577": {"problem_id": 3938, "answer": "def sorted_brands(history):\n    lst = []\n    for i in history:\n        lst.append(i.get('brand', ''))\n    return sorted(lst, key=lambda x: (-x['brand'], x['brand']))"}, "1578": {"problem_id": 3939, "answer": "def rps(p1, p2):\n    if p1 == p2:\n        return \"Draw!\"\n    elif p1 == \"scissors\" and p2 == \"paper\":\n        return \"Player 1 won!\"\n    elif p1 == \"paper\" and p2 == \"rock\":\n        return \"Player 1 won!\"\n    elif p1 == \"rock\" and p2 == \"scissors\":\n        return \"Player 1 won!\"\n    else:\n        return \"Player 2 won!\""}, "1579": {"problem_id": 3940, "answer": "def find_children(santas_list, children):\n    return sorted(set(santas_list) & set(children))"}, "1580": {"problem_id": 3941, "answer": "def reverse_fizzbuzz(s):\n    n = len(s)\n    a = [0] * n\n    for i in range(n):\n        if s[i] > 0:\n            a[i] = int(s[i])\n        else:\n            return [a[i] for i in range(n)]\n    return a"}, "1581": {"problem_id": 3942, "answer": "def solve(n):\n    if n%10==0:\n        return -1\n    elif n%20==0:\n        return -1\n    elif n%50==0:\n        return -1\n    elif n%100==0:\n        return -1\n    elif n%200==0:\n        return -1\n    elif n%500==0:\n        return -1\n    else:\n        return n"}, "1582": {"problem_id": 3943, "answer": "import math\ndef ellipse(a, b):\n    area = math.pi * a * b\n    perimetro = math.pi * (3/2 * (a + b) - math.sqrt(a * b))\n    return \"Area: \" + str(round(area,1)) + \", perimeter: \" + str(round(perimetro,1))"}, "1583": {"problem_id": 3944, "answer": "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        return sum([i*(i+1)//2 for i in range(1,n+1)])"}, "1584": {"problem_id": 3945, "answer": "def decipher_message(message):\n    s = ''.join(str(x) for x in range(0, len(message), 2))\n    return s"}, "1585": {"problem_id": 3946, "answer": "from itertools import chain, zip_longest\ntranspose = chain.from_iterable(zip_longest(*[iter(s)]*2))\ndef interweave(s1, s2):\n    return ''.join(transpose(s1)) + ''.join(transpose(s2))"}, "1586": {"problem_id": 3947, "answer": "def square_digits(num):\n    return int(''.join(str(num) for num in map(int, str(num))))"}, "1587": {"problem_id": 3948, "answer": "def sel_reverse(arr,l):\n    return [e for e in arr if l>e[::-1].count(e[0])]"}, "1588": {"problem_id": 3949, "answer": "import math\ndef calculate_tip(amount, rating):\n    d = {\n        \"terrible\": 0,\n        \"poor\": 0.05,\n        \"good\": 0.1,\n        \"great\": 0.15,\n        \"excellent\": 0.2\n    }\n    if rating.lower() not in d:\n        return \"Rating not recognised\"\n    else:\n        return math.ceil(d[rating.lower()] * amount)"}, "1589": {"problem_id": 3950, "answer": "from itertools import combinations\ndef find_int_inrange(a, b):\n    d = {i for i in range(1,a+1) if all(int(j)%i == j for j in d)}\n    return [max(d.values())+1, list(d.values()), sorted(d.values())]"}, "1590": {"problem_id": 3951, "answer": "def duplicate_count(text):\n    return len([x for x in text.lower() if x in '0123456789'])"}, "1591": {"problem_id": 3952, "answer": "from math import log2\n\ndef half_life(initial, remaining, time):\n    return time / log2(initial / remaining)"}, "1592": {"problem_id": 3953, "answer": "def longest_word(letters):\n    words = [\"\".join(sorted(letters)) for s in words]\n    return max(words, key=len)"}, "1593": {"problem_id": 3954, "answer": "def press_button(n):\n    return sum(1 + press_button(n-i) for i in range(1, n+1))"}, "1594": {"problem_id": 3955, "answer": "def bracket_pairs(string):\n    open_brackets = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            open_brackets.append(i)\n        elif string[i] == ')':\n            if open_brackets[-1] < len(open_brackets):\n                return False\n            else:\n                open_brackets.pop()\n    return {i:open_brackets.index(i) for i in range(len(open_brackets))}"}, "1595": {"problem_id": 3956, "answer": "def sort_string(s):\n    a = s.lower()\n    b = \"\".join(sorted(a, key=lambda c: c.isalnum()))\n    c = \"\".join(sorted(b, key=lambda c: c.isalpha()))\n    return \"\".join(c + c[1:] + c[0])"}, "1596": {"problem_id": 3957, "answer": "def uniq_c(seq): \n    return [(' '.join(sorted(seq))) for s in zip(seq,seq)]"}, "1597": {"problem_id": 3958, "answer": "def custom_fib(signature, indexes, n):\n    s = signature[:]\n    for i in range(1, n):\n        s.append(sum(s[indexes[i-1] : indexes[i-1]]))\n    return s[n]"}, "1598": {"problem_id": 3959, "answer": "def max_sum(arr, ranges):\n    return max(sum(arr[i:i+r]) for i,r in enumerate(ranges) if r)"}, "1599": {"problem_id": 3960, "answer": "def align_right(text, width):\n    line = []\n    for i in range(len(text)):\n        line.append(''* (width - len(text[i])))\n        if text[i] =='':\n            line.append('')\n        elif len(line) == width:\n            line.append('')\n        else:\n            line.append(text[i])\n    return '\\n'.join(line)"}, "1600": {"problem_id": 3961, "answer": "def say_hello(name):\n    return \"Hello, \" + name"}, "1601": {"problem_id": 3962, "answer": "def house_of_cards(floors):\n    return sum(2 * i + 1 for i in range(1, floors + 1))"}, "1602": {"problem_id": 3963, "answer": "def amicable_numbers(n1,n2):\n    return sum(d for d in range(1,n1) if n1 % d == 0) == n2"}, "1603": {"problem_id": 3964, "answer": "def rank_of_element(arr,i):\n    return sum(1 for x in range(len(arr) - i) if arr[i + x] <= arr[i]) + sum(1 for x in range(i + 1, len(arr)) if arr[i + x] < arr[i])"}, "1604": {"problem_id": 3965, "answer": "def powerof4(n):\n    return type(n) == int and n.bit_length() == 32"}, "1605": {"problem_id": 3966, "answer": "import re\ndef solution(full_text, search_text):\n    return len(re.findall(r'{}'.format(search_text), full_text))"}, "1606": {"problem_id": 3967, "answer": "from itertools import accumulate\n\ndef solve(a, b):\n    return sum(accumulate(range(a, b+1)))"}, "1607": {"problem_id": 3968, "answer": "def tail_swap(strings):\n    return [f\"{string[0:colon_length]:<string[colon_length + 1:]}\" for string in strings]"}, "1608": {"problem_id": 3969, "answer": "from math import ceil\ndef graceful_tipping(bill):\n    bill = bill * 1.15\n    n = ceil(bill)\n    return n"}, "1609": {"problem_id": 3970, "answer": "def odd_row(n):\n    return list(range(n*n,0,-1))"}, "1610": {"problem_id": 3971, "answer": "def tidyNumber(n):\n    return sorted(str(n)) == list(str(n))"}, "1611": {"problem_id": 3972, "answer": "def find_next_square(sq):\n    return -1 if sq.is_integer() else next((sq**.5+.5), sq)"}, "1612": {"problem_id": 3973, "answer": "def remove_char(s):\n    return s[1:len(s)-1]"}, "1613": {"problem_id": 3974, "answer": "def two_count(n):\n    return bin(n).count('1')"}, "1614": {"problem_id": 3975, "answer": "def find_missing_letter(chars):\n    return next(c for c in chars if c!= chars[-1])"}, "1615": {"problem_id": 3976, "answer": "def last(*args):\n    return args[-1]"}, "1616": {"problem_id": 3977, "answer": "from itertools import product\nfrom math import sqrt\n\ndef cluster(points, n):\n    d = {}\n    for i in range(len(points)):\n        x, y = points[i]\n        d[(x, y)] = i\n    \n    res = sorted(list(set(product(range(len(points)), repeat=n))))\n    return sorted(res)"}, "1617": {"problem_id": 3978, "answer": "def check_for_factor(base, factor):\n    return base % factor == 0"}, "1618": {"problem_id": 3979, "answer": "def match_arrays(v, r):\n    return sum(1 for a in v if a in r)"}, "1619": {"problem_id": 3980, "answer": "import re\ndef reverse(s):\n    return re.sub(r'(.)\\1+', lambda m: m.group(0).swapcase(), s)"}, "1620": {"problem_id": 3981, "answer": "def arithmetic_sequence_sum(a, r, n):\n    return sum(a + r*i for i in range(n))"}, "1621": {"problem_id": 3982, "answer": "from statistics import median, mean\ndef stat(s):\n    return 'Range: %s Average: %s Median: %s' % (\n        sorted(map(int, s.split(','))) - sorted(map(int, s.split('|')))\n        + sorted(map(int, s.split('|')))[1] // 2,\n        sorted(map(int, s.split('|')))[0] // 2,\n        sorted(map(int, s.split('|')))[0])"}, "1622": {"problem_id": 3983, "answer": "def Xbonacci(signature,n):\n    l = len(signature)\n    for i in range(n-l):\n        signature.append(sum(signature[-l:])+signature[-l:])\n    return signature[:n]"}, "1623": {"problem_id": 3984, "answer": "def tacofy(word):\n    d = {'a':'beef', 'e':'beef', 'i':'beef', 'o':'beef', 'u':'beef', 't':'tomato', 'l':'lettuce', 'c':'cheese', 'g':'guacamole','s':'salsa'}\n    return ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] + ['shell'] +"}, "1624": {"problem_id": 3985, "answer": "def find_even_index(arr):\n    left = 0\n    right = sum(arr)\n    for i in range(len(arr)):\n        if left == right:\n            return i\n        elif arr[i] % 2 == 0:\n            left += 1\n        else:\n            right += 1\n    return -1"}, "1625": {"problem_id": 3986, "answer": "def discover_original_price(discounted_price, sale_percentage):\n    return round(100.0 * (discounted_price / (100 - sale_percentage)), 2)"}, "1626": {"problem_id": 3987, "answer": "def spin_words(sentence):\n    return''.join(reversed(sentence.split()))"}, "1627": {"problem_id": 3988, "answer": "from itertools import groupby\nencode = lambda s: \"\".join(g) + \"\".join(len(list(groupby(s))))"}, "1628": {"problem_id": 3989, "answer": "def solution(number):\n    return sum(3*n + 5*n**2 - n**3 for n in range(1, number+1, 3) for i in range(1, number+1, 5))"}, "1629": {"problem_id": 3990, "answer": "def derive(coefficient, exponent): \n    return \"{}x^{}\".format(coefficient*exponent, exponent-1)"}, "1630": {"problem_id": 3991, "answer": "def highest_rank(arr):\n    return sorted(arr, key=lambda x: float(arr.count(x)))[-1]"}, "1631": {"problem_id": 3992, "answer": "def is_happy(n):\n    if n==1:\n        return True\n    else:\n        s=0\n        while n!=1:\n            s+=int(str(n)[::-1])**2\n            n=n-s\n        return False"}, "1632": {"problem_id": 3993, "answer": "def solve(a):\n    return sum(1 for x in a if isinstance(x, int) and x % 2 == 0) - sum(1 for x in a if isinstance(x, int) and x % 2!= 0)"}, "1633": {"problem_id": 3994, "answer": "from fractions import gcd\ndef nbr_of_laps(x, y):\n    return (y / gcd(x, y), x / gcd(x, y))"}, "1634": {"problem_id": 3995, "answer": "def dating_range(age):\n    if age <= 14:\n        return f'{int(age/2+7)}-{int(age*2)}'\n    else:\n        return f'{int(age-0.10*age)}-{int(age+0.10*age)}'"}, "1635": {"problem_id": 3996, "answer": "def alternate_sq_sum(arr):\n    return sum(n ** 2 for n in arr[1::2]) + sum(arr[::2])"}, "1636": {"problem_id": 3997, "answer": "from itertools import permutations\ndef solve(s,k):\n    return sum(1 for x in permutations(s) if x % k == 0)"}, "1637": {"problem_id": 3998, "answer": "from math import sin, pi\n\ndef area_of_polygon_inside_circle(r, n):\n    return round(n*r*sin(2*pi/n), 3)"}, "1638": {"problem_id": 3999, "answer": "def cup_volume(d1, d2, height):\n    return round(height * (d1**2 + d2**2) * 0.29, 2)"}, "1639": {"problem_id": 4000, "answer": "def strong_num(number):\n    s = 0\n    for i in str(number):\n        s += int(i)\n    return \"STRONG!!!!\" if s == number else \"Not Strong!!\""}, "1640": {"problem_id": 4001, "answer": "def dot(n,m):\n    return ''.join(['+' if i%2==0 else '-' for i in range(n+1)])"}, "1641": {"problem_id": 4002, "answer": "def memesorting(meme):\n    d = {'bug':'Roma', 'boom':'Maxim', 'edits':'Danik', 'i':'Ugor', 'lame':'Gaidi','m':'Bruh', 'noc':'Bogdan', 'pog':'Petr', 'r':'Rus','s':'Sedat', 'th':'Tiranha', 'ugor':'Ugorod'}\n    return ''.join(d.get(c, c) for c in meme.lower())"}, "1642": {"problem_id": 4003, "answer": "def possible_positions(pos):\n    x = ord(pos[0]) - 96\n    y = ord(pos[1]) - 96\n    return [f\"{x} {y}\" for y in range(2, y)]"}, "1643": {"problem_id": 4004, "answer": "def first_dup(s):\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            return s[i]"}, "1644": {"problem_id": 4005, "answer": "def reverse_bits(n):\n    return int(bin(n)[::-1], 2)"}, "1645": {"problem_id": 4006, "answer": "def basic_op(operator, value1, value2):\n    return {'+':value1+value2,'-':value1-value2,'*':value1*value2,'/':value1/value2}.get(operator)"}, "1646": {"problem_id": 4007, "answer": "def finding_k(arr):\n    n = len(arr)\n    if n == 1:\n        return -1\n    a = arr[0]\n    for i in range(1, n):\n        a = a % i\n        if a == arr[i]:\n            return i\n    return -1"}, "1647": {"problem_id": 4008, "answer": "def string_to_int_list(s):\n    return [int(x) for x in s.split(',') if x!= '']"}, "1648": {"problem_id": 4009, "answer": "import math\ndef digits_average(input):\n    while True:\n        s = str(input)\n        x = int(s[len(s)-1])\n        y = int(s[len(s)-2])\n        if x == y:\n            return x\n        else:\n            s = ''.join(reversed(s))\n            x += int(s)\n"}, "1649": {"problem_id": 4010, "answer": "from itertools import combinations\ndef counting_triangles(V):\n    return sum(1 for a, b, c in combinations(V, 3) if a + b + c == 3)"}, "1650": {"problem_id": 4011, "answer": "def get_free_urinals(urinals):\n    return -1 if '11' in urinals else sum(1 for i, _ in enumerate(urinals) if i == '0' or i == '1')"}, "1651": {"problem_id": 4012, "answer": "import string\ndef encrypt(text,key):\n    k=ord(key[0])\n    l=ord(key[1])\n    return text.upper()"}, "1652": {"problem_id": 4013, "answer": "def spoonerize(words):\n    return''.join(s[0] + s[1] for s in words.split()).translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '1234567890')).strip()"}, "1653": {"problem_id": 4014, "answer": "from itertools import zip_longest\ndef combine_strings(*args):\n    return ''.join(z for z in zip_longest(*args))"}, "1654": {"problem_id": 4015, "answer": "def paint_letterboxes(start, finish):\n    s = str(start)\n    f = str(finish)\n    return [s.count(i) for i in range(10) if s[i:i+10] == f]"}, "1655": {"problem_id": 4016, "answer": "def game(a, b):\n    mx=1\n    while True:\n        if a>=b:\n            return \"Joe\"\n        elif b>=a:\n            return \"Mike\"\n        else:\n            a+=mx\n            mx+=1\n"}, "1656": {"problem_id": 4017, "answer": "from operator import *\nadd, multiply, divide, mod, exponent, subt = add, multiply, divide, mod, exponent, subt"}, "1657": {"problem_id": 4018, "answer": "def isDigit(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False"}, "1658": {"problem_id": 4019, "answer": "def max_multiple(divisor, bound):\n    lst = []\n    for i in range(1, bound + 1):\n        if i % divisor == 0:\n            lst.append(i)\n    return max(lst)"}, "1659": {"problem_id": 4020, "answer": "import re\ndef validate_hello(greetings):\n    return bool(re.search(\"hello|ciao|salut|hallo|hola|ahoj|czesc\", greetings.lower()))"}, "1660": {"problem_id": 4021, "answer": "def elections_winners(votes, k):\n    return sum(sorted(votes).index(x) for x in votes if votes.count(x) > k)"}, "1661": {"problem_id": 4022, "answer": "import re\ndef soundex(name):\n    s = name.lower().split()\n    first = s[0]\n    a = [c for c in s[1:]]\n    b = [c for c in s[1:]]\n    c = [c for c in s[1:]]\n    d = [c for c in s[1:]]\n    l = [c for c in s[1:]]\n    m = [c for c in s[1:]]\n    r = [c for c in s[1:]]\n    \n    a = list(re.findall('[a-z]',a))\n    b = list(re.findall('[b-z]',b))\n    c = list(re.findall('[c-z]',c))\n    d = list(re.findall('[d-z]',d))\n    l = list(re.findall('[l-z]',l))\n    m = list(re.findall('[m-z]',m))\n    r = list(re.findall('[r-z]',r))\n    \n    zeros = '0'*len(a) + '0'*len(b) + '0'*len(c) + '0'*len(d) + '0'*len(l) + '0'*len(m) + '0'*len(r)\n    \n    for i in range(len(name)):\n        if name[i] in ['a','e','i','o','u','y']:\n            name[i] = zeros\n        else:\n            name[i] = name[i][0]\n    "}, "1662": {"problem_id": 4023, "answer": "def high(s):\n    return ''.join(sorted(s.split(), key=lambda w: (ord(w[0])-97, w[1])))"}, "1663": {"problem_id": 4024, "answer": "def special_number(number):\n    return \"Special!!\" if number < 10 else \"NOT!!\""}, "1664": {"problem_id": 4025, "answer": "def func(l):\n    num = 0\n    n = len(l)\n    for i in range(n):\n        num = num*10 + l[i]\n        if num < 10:\n            num = num//10\n            n = n - 1\n    return [num, bin(num).replace('0b', ''), oct(num).replace('0o', ''), hex(num).replace('0x', '')]"}, "1665": {"problem_id": 4026, "answer": "def optimum_location(students, locations):\n    m = sum(abs(x[i] - students[i][0]) + abs(y[i] - students[i][1]) for i in range(len(students)))\n    return \"The best location is number %s with the coordinates x = %s and y = %s\" % (m, \" and \".join(locations[m].keys()))"}, "1666": {"problem_id": 4027, "answer": "def sum_nested_numbers(a, depth=1):\n    return sum(x ** depth for x in a)"}, "1667": {"problem_id": 4028, "answer": "def riders(stations, station_x):\n    riders = 1\n    for i in range(station_x+1):\n        riders += 1\n        for j in range(i,101):\n            stations.append(j)\n    return riders"}, "1668": {"problem_id": 4029, "answer": "import re\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text:\n        return 0\n    r = re.search(r'(?P<b>\\S+)', full_text)\n    if r:\n        return r.groupdict().get(0)"}, "1669": {"problem_id": 4030, "answer": "from itertools import groupby\ndef radix_tree(*words):\n    d = {}\n    for w in words:\n        d[w] = radix_tree(*groupby(w))\n    return d"}, "1670": {"problem_id": 4031, "answer": ""}, "1671": {"problem_id": 4032, "answer": "def solve(n):\n    return sum(sum(i*(n-i-1)//2 for i in range(n+1)))"}, "1672": {"problem_id": 4033, "answer": "def contamination(text, char):\n    return char * len(text)"}, "1673": {"problem_id": 4034, "answer": "def sillycase(silly):\n    return silly[:len(silly)//2].lower() + silly[len(silly)//2:].upper()"}, "1674": {"problem_id": 4035, "answer": "def substring_test(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    return any(str1.count(str2[i:i+2]) > 1 for i in range(len(str1)-1))"}, "1675": {"problem_id": 4036, "answer": "def days_represented(trips):\n    return len(set(range(1,len(trips))) & set(trips))"}, "1676": {"problem_id": 4037, "answer": "import re\ndef detect_operator(num):\n    d = {'Golden Telecom': '039', 'Life:)': '050', 'MTS': '063', 'Kyivstar': '066', 'Beeline': '067', 'Kyivstar': '068', 'MTS': '095', 'Kyivstar': '096', 'Kyivstar': '097', 'Kyivstar': '098', 'Kyivstar': '099'}\n    return d.get(num,'no info')"}, "1677": {"problem_id": 4038, "answer": "def chess_knight(cell):\n    x, y = ord(cell[0]) - 96, int(cell[1])\n    return sum(1 for x, y in [(2, 1), (2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2), (0, -2), (0, 2), (0, -1), (-1, -1), (-1, 1), (1, -1), (1, 1)] if y % 4 == 0)"}, "1678": {"problem_id": 4039, "answer": "def fouriest(i):\n    b = {\n        '10' : 'x',\n        '11' : '5x',\n        '12' : '10x',\n        '13' : '15x',\n        '14' : '10x',\n        '15' : '10x',\n        '16' : '10x',\n        '17' : '10x',\n        '18' : '10x',\n        '19' : '10x',\n        '2' : '1x',\n        '20' : '5x',\n        '30' : '43x',\n        '31' : '50x',\n        '32' : '60x',\n        '33' : '70x',\n        '34' : '7x',\n        '35' : '30x',\n        '36' : '30x',\n        '37' : '30x',\n        '38' : '30x',\n        '39' : '30x',\n        '4' : 'x',\n        '50' : '50x',\n        '51' : '60x',\n        '52' : '70x',\n        '53' : '7x',\n        '60' : '10x',\n        '61' : '10x',\n        '62' : '10x',\n        '63' : '10x',\n        '5' : '1x',\n        '70' : '70x',\n        '71' : '80x',\n        '72' : '90x',\n        '73' : '90x',\n        '74' : '90x',\n        '76' : '10x',\n        '77' : '10x',\n        '78' : '10x',\n        '79' : '10x',\n        '8' : '2x',\n        '90' : '90x',\n        '91' : '100x',\n        '92' : '200x',\n        '93' : '300x',\n        '94' : '400x',\n        '95' : '500x',\n        '96' : '600x',\n        '97' : '700x',\n        '98' : '900x',\n        '99' : '1000x'\n    }\n    res = i\n    while res < 100:\n        res *= 10\n        res += i\n    return '{} is the fouriest ({}) in base {}'.format(i, b[i], res)"}, "1679": {"problem_id": 4040, "answer": "def nth_char(words):\n    return ''.join(w[i] for i, w in enumerate(words))"}, "1680": {"problem_id": 4041, "answer": "def sort_my_string(s):\n    return '%s %s' % (s[::2], s[1::2])"}, "1681": {"problem_id": 4042, "answer": "def points(n):\n    return sum(n//4**i for i in range(1, n+1))"}, "1682": {"problem_id": 4043, "answer": "from itertools import combinations\ndef calc(gamemap):\n    max_b = 0\n    for i in range(len(gamemap)):\n        for j in range(len(gamemap)):\n            if i+j < len(gamemap):\n                if gamemap[i][j] > max_b:\n                    max_b = gamemap[i][j]\n    return max_b"}, "1683": {"problem_id": 4044, "answer": "def string_suffix(s):\n    return sum(len(str(i)) == 1 for i in s.split())"}, "1684": {"problem_id": 4045, "answer": "def number(lines):\n    return ['%s: %s' % (i, line) for i, line in enumerate(lines, start=1)]"}, "1685": {"problem_id": 4046, "answer": "from functools import reduce\nfrom operator import mul\ndef calculate_scrap(scraps, number_of_robots):\n    return reduce(mul, scraps, 50)"}, "1686": {"problem_id": 4047, "answer": "def to_leet_speak(str):\n    d = {\n        'A' : '@',\n        'B' : '8',\n        'C' : '(',\n        'D' : 'D',\n        'E' : '3',\n        'F' : 'F',\n        'G' : '6',\n        'H' : '#',\n        'I' : '!',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : '1',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : '0',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : '$',\n        'T' : '7',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n        'Z' : '2',\n       '' :''\n    }\n    return ''.join([d[c] for c in str])"}, "1687": {"problem_id": 4048, "answer": "def pig_latin(word):\n    return word.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz','ay'*len(word)))"}, "1688": {"problem_id": 4049, "answer": "def monkey_count(n):\n    #your code here\n    count = []\n    for i in range(1,n+1):\n        count.append(i)\n    return count"}, "1689": {"problem_id": 4050, "answer": "import re\ndef acronym_buster(message):\n    acronyms = {'KPI': 'key performance indicators', 'EOD': 'the end of the day', 'TBD': 'to be decided', 'WAH': 'work at home', 'IAM': 'in a meeting', 'OOO': 'out of office', 'NRN': 'no reply necessary', 'CTA': 'call to action', 'SWOT':'strengths, weaknesses, opportunities and threats', 'BRI': 'be ready, please', 'DYG': 'deployment tag', 'SOP':'standard operationsphpfoliospecial operations', 'HRP': 'hiring a manager', 'APO': 'after you', 'GOOG': 'good night', 'JMD': 'july marczek', 'MIA':'minion', 'MSD':'midway', 'OPO': 'on top of', 'VIT': 'virtual intermediary terminal', 'CIO': 'chief information officer', 'ISK': 'island of kenya', 'NIO': 'no it s o. k. i. o.', 'PIO': 'passport to intermediaries', 'DMA': 'direct marketing association', 'ACM': 'acm. m. a.', 'MOOC': 'online university course', 'IAI': 'indigenous american icosahedral mesohedral', 'IIT': 'innovation transfomation', 'ISR': 'island of scott', 'NQO': 'no q. o. r.', 'QIO': 'Quebec i. o. s. r.', 'SCOR':'senior comp. officer rehiring', 'SCC':'senior comp. officer christmas gift', 'SCI':'senior comp. officer is leaving', 'SCO':'senior comp. officer on sabbatical', 'SEP':'september pierre', 'NET': 'no e. t. n. e.', 'NSD': 'no notice required', 'ENI': 'engineering nanotechnolgy', 'XO': 'exodus obliquity zonarad', 'OI': 'out of isle one', 'OSI': 'out of source', 'OVI': 'out of vienna', 'ONI': 'on nisheth', 'OPO': 'on p. o. r.', 'PIU': 'pilgrim to uk', 'PIO': 'passport to intermediaries', 'PYI': 'plebeian york', 'RBI':'reserve basing iran', 'RDN':'red dnld cypher', 'REI':'refinery', 'IRI': 'irish', 'RIH': 'rihanna murdoch', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'rudy joel', 'RII': 'r"}, "1690": {"problem_id": 4051, "answer": "import re\ndef toUnderScore(name):\n    return re.sub(r'(?<!^)(?<!_)(\\d+|[A-Z])(?<!_)', '_', name)"}, "1691": {"problem_id": 4052, "answer": "from functools import reduce\nfrom operator import mul\ndef get_num(arr):\n    s = set(reduce(mul, arr))\n    return [n, len(arr), s.count(n)]"}, "1692": {"problem_id": 4053, "answer": "def reverse_factorial(num):\n    if num == 1:\n        return \"1!\"\n    elif num == 2:\n        return \"2!\"\n    else:\n        n = num//2\n        return \"\".join(str(n) if n%1 == 0 else str(n))"}, "1693": {"problem_id": 4054, "answer": "def scoring(array):\n    score = {\n        \"norm_kill\": 100,\n        \"assist\": 50,\n        \"damage\":.5,\n        \"healing\": 1,\n        \"env_kill\": 500,\n    }\n    return [x[0] for x in sorted(array, key=lambda x: score.get(x[\"name\"], 0))]"}, "1694": {"problem_id": 4055, "answer": "def solve(n):\n    return ''.join(f'{n}' for n in range(n+1))"}, "1695": {"problem_id": 4056, "answer": "def leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, move = change.split()\n        name = int(name)\n        leaderboard.insert(move.index('+'), name)\n        leaderboard.pop(move.index('-'))\n    return leaderboard"}, "1696": {"problem_id": 4057, "answer": "def score_hand(cards):\n    a=0\n    for i in cards:\n        if i.isdigit():\n            a+=int(i)\n        else:\n            a+=10\n    if a<=21:\n        return int(a)\n    else:\n        return min(score_hand(c) for c in cards)"}, "1697": {"problem_id": 4058, "answer": ""}, "1698": {"problem_id": 4059, "answer": "def switch_lights(a):\n    l = sum(a)\n    return [l%2, l//2] if l else [0, 0]"}, "1699": {"problem_id": 4060, "answer": "def ant_bridge(ants, terrain):\n    i = 0\n    while i < len(ants):\n        i += 1\n        t = ants[i]\n        ants.remove(t)\n        if terrain == \"\".join(ants):\n            terrain = \"\".join(ants)\n            break\n        ants.append(t)\n        if terrain == \"\".join(ants):\n            terrain = \"\".join(ants)\n            break\n    return ants"}, "1700": {"problem_id": 4061, "answer": "from fractions import gcd\n\ndef count_ones(n):\n    return sum(1 for i in range(n+1) if gcd(i, n) == 1)"}, "1701": {"problem_id": 4062, "answer": "def solve(arr):\n    return [a for a in arr[len(arr)-1:]]"}, "1702": {"problem_id": 4063, "answer": "import re\ndef evenator(s):\n    return \" \".join(word[0] + word[len(word)-1] if len(word) % 2 else word for word in re.sub(\"[.,?!_]\", \"\", s).split())"}, "1703": {"problem_id": 4064, "answer": "def count_by(x, n):\n    \"\"\"\n    Return a sequence of numbers counting by `x` `n` times.\n    \"\"\"\n    return [i for i in range(1, n+1)]"}, "1704": {"problem_id": 4065, "answer": "def get_sequence(offset, size):\n    if offset < 1023456789:\n        offset = 1023456789\n        size = 1\n    elif offset < 1023456798:\n        offset = 1023456798\n        size = 2\n    elif offset < 1023456789*2:\n        offset = 1023456789*2\n        size = 3\n    elif offset < 1023456789*3:\n        offset = 1023456789*3\n        size = 4\n    elif offset < 1023456789*4:\n        offset = 1023456789*4\n        size = 5\n    elif offset < 1023456879:\n        offset = 1023456879\n        size = 6\n    elif offset < 1023456897:\n        offset = 1023456897\n        size = 7\n    elif offset < 1023456978:\n        offset = 1023456978\n        size = 8\n    else:\n        offset = 1023456789\n        size = 9\n    return [n for n in range(offset, offset + size) if len(str(n)) == len(str(10))]"}, "1705": {"problem_id": 4066, "answer": "def string_to_array(s):\n    return [\" \".join(s.split()) for s in s.split()]"}, "1706": {"problem_id": 4067, "answer": "def iq_test(numbers):\n    evens = [i for i in numbers if i%2==0]\n    odds = [i for i in numbers if i%2!=0]\n    return odds.index(evens[0])+1"}, "1707": {"problem_id": 4068, "answer": "def get_candy_position(n, r, c, candy):\n    l=[]\n    for i in range(1,n+1):\n        l.append([i,i,i])\n        if i==candy:\n            l.append([i,i,i])\n    return l"}, "1708": {"problem_id": 4069, "answer": "def nth_fib(n):\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a + b\n    return a"}, "1709": {"problem_id": 4070, "answer": "def magic_sum(arr):\n    return sum(n for n in arr if n%2!=0) if arr else 0"}, "1710": {"problem_id": 4071, "answer": "def next_happy_year(year):\n    return year+1"}, "1711": {"problem_id": 4072, "answer": "def permutation_position(perm):\n    return sum(1 for i in range(26) if perm.islower()==i)"}, "1712": {"problem_id": 4073, "answer": "def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum(matrix[col])"}, "1713": {"problem_id": 4074, "answer": "def between_extremes(numbers):\n    return max(numbers) - min(numbers)"}, "1714": {"problem_id": 4075, "answer": "def something_acci(num_digits):\n    a = [1, 1]\n    while len(str(a)) < num_digits:\n        a.append(a[-1]*10**(len(str(a))-len(str(a[-1])))+a[-2])\n    return (len(str(a)), a[-1])"}, "1715": {"problem_id": 4076, "answer": "def get_count(words=''):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['a', 'e', 'i', 'o', 'u']\n    return {'vowels': vowels.count(word), 'consonants': consonants.count(word)}"}, "1716": {"problem_id": 4077, "answer": "def premier_league_standings(teams):\n    d = dict(sorted(enumerate(teams), key=lambda t: t[1]))\n    return {i:t for i,t in enumerate(d)}"}, "1717": {"problem_id": 4078, "answer": "def first_n_smallest(arr, n):\n    return [sorted(arr)[i] for i in range(0, n)]"}, "1718": {"problem_id": 4079, "answer": "def encode(string):\n    return ''.join(str(ord(c) - 96) if c.isalpha() else c for c in string)"}, "1719": {"problem_id": 4080, "answer": "def arr_check(arr):\n    return all(type(e) is list for e in arr)"}, "1720": {"problem_id": 4081, "answer": "def first_tooth(array):\n    diff = array[0] - array[1]\n    m = max(diff, diff.negate())\n    return m"}, "1721": {"problem_id": 4082, "answer": "def sequence_classifier(arr):\n    if arr == []: return 0\n    if arr[0] == arr[1]: return 1\n    if arr[0] < arr[1]: return 2\n    if arr[0] > arr[1]: return 3\n    if arr[0] >= arr[1]: return 4\n    return 5"}, "1722": {"problem_id": 4083, "answer": "def performant_smallest(arr, n):\n    m = n\n    arr.sort()\n    res = []\n    for i in arr:\n        if i not in res:\n            res.append(i)\n    return res"}, "1723": {"problem_id": 4084, "answer": "def alex_mistakes(number_of_katas, time_limit):\n    return int(time_limit / 6) * number_of_katas"}, "1724": {"problem_id": 4085, "answer": "import re\ndef mix_words(s):\n    return re.sub(r'(\\w{3})(\\w{2})', lambda m: m.group(1) + m.group(2), s)"}, "1725": {"problem_id": 4086, "answer": "def first_non_consecutive(arr):\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1]!= 1:\n            return arr[i]"}, "1726": {"problem_id": 4087, "answer": "def get_char(c):\n  # Your code goes here ^_^\n  return chr(c)"}, "1727": {"problem_id": 4088, "answer": ""}, "1728": {"problem_id": 4089, "answer": "def sum_dif_rev(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 45\n    else:\n        a = [45, 54, 495, 594]\n        a.reverse()\n        a.extend(reversed(a))\n        a = sum(a)\n        a /= abs(a - 65)\n        return a"}, "1729": {"problem_id": 4090, "answer": "def get_animals_count(legs, heads, horns):\n    cows = horns // 2\n    legs = horns % 2\n    chickens = cows + heads"}, "1730": {"problem_id": 4091, "answer": "def which_note(key_press_count):\n    return ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'][max(key_press_count - 1, 0)]"}, "1731": {"problem_id": 4092, "answer": "def main(verb, noun):\n    return ''.join(verb + noun)"}, "1732": {"problem_id": 4093, "answer": "def find_a(array, n):\n    if n < 0:\n        return array[0]\n    elif n < 4:\n        return array[1]\n    else:\n        a, b = divmod(n, 3)\n        return find_a(array, a + b)"}, "1733": {"problem_id": 4094, "answer": "def count_positives_sum_negatives(arr):\n    return [len([x for x in arr if x > 0]), sum([x for x in arr if x < 0])] if arr else []"}, "1734": {"problem_id": 4095, "answer": "from collections import Counter\ndef added_char(s1, s2):\n    c = Counter(s1)\n    return next(c.keys()).pop()"}, "1735": {"problem_id": 4096, "answer": "def valid_parentheses(string):\n    string = ''.join(s for s in string if s.isalnum())\n    for c in string:\n        if c == '(':\n            string = string.replace(c,'')\n        elif c == ')':\n            string = string.replace(c,'(')\n        elif c == ')':\n            string = string.replace(c,')')\n    return string"}, "1736": {"problem_id": 4097, "answer": "def reverse_list(x):\n    \"\"\"Takes an list and returns the reverse of it. \n    If x is empty, return [].\n    \n    >>> reverse_list([])\n    []\n    >>> reverse_list([1, 2, 3])\n    [3, 2, 1]\n    \"\"\" \n    return x[::-1]\n\ndef sum_list(x):\n    \"\"\"Takes a list, and returns the sum of that list.\n    If x is empty list, return 0.\n\n    >>> sum_list([])\n    0\n    >>> sum_list([1, 2, 3])\n    6\n    \"\"\""}, "1737": {"problem_id": 4098, "answer": "def new_numeral_system(number):\n    n = ord(number) - 65\n    return [f\"{chr(n + 65)} + {chr(n + 66)}\" for chr in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' if chr(n + 65) + chr(n + 66) in '0123456789']"}, "1738": {"problem_id": 4099, "answer": "def flip_bit(value, bit_index):\n    return value ^ (1 << (bit_index - 1))"}, "1739": {"problem_id": 4100, "answer": "def reverse_alternate(string):\n    return''.join(w[::-1] if i % 2 else w for i, w in enumerate(string.split()))"}, "1740": {"problem_id": 4101, "answer": "def sum_prod(strexpression):\n    s = '%s' % (eval(strexpression[:-1]))\n    return f'{s:.5e}'"}, "1741": {"problem_id": 4102, "answer": "def odd_not_prime(n):\n    return sum(1 for x in range(1,n+1,2) if not x%2)"}, "1742": {"problem_id": 4103, "answer": "def naughty_or_nice(data):\n    return 'Nice!' if sum(1 for month, year in data.items() if year == 'Nice!') > sum(1 for month, year in data.items() if year == 'Naughty!') else 'Naughty!'"}, "1743": {"problem_id": 4104, "answer": "def max_tri_sum(numbers):\n    return sum(sorted(set(numbers), reverse=True)[:3])"}, "1744": {"problem_id": 4105, "answer": "def sumDig_nthTerm(initVal, patternL, nthTerm):\n    sum = 0\n    for i in range(nthTerm):\n        sum += int(str(initVal)[i])\n    return sum"}, "1745": {"problem_id": 4106, "answer": "def self_converge(number):\n    s = str(number)\n    n = len(s)\n    \n    i = 0\n    while i < n:\n        i += 1\n        s = ''.join(sorted(s))\n        if s == s[::-1]:\n            return -1\n    "}, "1746": {"problem_id": 4107, "answer": "from datetime import date\ndef half_life(person1, person2):\n    d1, d2 = map(int, person1.split('-'))\n    d1 //= 2\n    d2 //= 2\n    return '{} {}'.format(date(d1, d2).strftime('%Y-%m-%d'), person2)"}, "1747": {"problem_id": 4108, "answer": "def sum_even_numbers(seq):\n    return sum(n for n in seq if n%2==0)"}, "1748": {"problem_id": 4109, "answer": "def filter_list(l):\n    return [x for x in l if isinstance(x,str)][0]"}, "1749": {"problem_id": 4110, "answer": "from math import ceil\nname = \"\".join(c for c in name if c.isalpha()).ljust(2, '.')\n\ndef matrixfy(st):\n    if not st: return \"name must be at least one letter\"\n    n = ceil(len(st)**0.5)\n    return [[\"\".join(c) for c in st] for _ in range(n)]"}, "1750": {"problem_id": 4111, "answer": "def sabb(s, value, happiness):\n    return \"Sabbatical! Boom!\" if sum(c in \"sabticl\" for c in s) > 22 else \"Back to your desk, boy.\""}, "1751": {"problem_id": 4112, "answer": "def penultimate(a):\n    return a[-2]"}, "1752": {"problem_id": 4113, "answer": "def solution(number):\n    c = 0\n    for i in range(number):\n        if i % 3 == 0:\n            c += 1\n        elif i % 5 == 0:\n            c += 1\n    return [c, c-1, c]"}, "1753": {"problem_id": 4114, "answer": "def pagination_text(page_number, page_size, total_products):\n    p = 'Showing {} to {} of {} Products.'\n    return p.format(page_number, page_size, total_products)"}, "1754": {"problem_id": 4115, "answer": "def find_outlier(integers):\n    odd = 0\n    even = 0\n    for i in integers:\n        if i % 2!= 0:\n            odd += 1\n        else:\n            even += 1\n    return integers[:odd]"}, "1755": {"problem_id": 4116, "answer": "import re\ndef is_audio(file_name):\n    return bool(re.match('[A-Za-z]+\\.(mp3|flac|alac|aac)$', file_name))"}, "1756": {"problem_id": 4117, "answer": "import re\ndef sum_from_string(string):\n    return sum(int(i) for i in re.findall(r'\\d+', string))"}, "1757": {"problem_id": 4118, "answer": "def identify_weapon(character):\n    d = {\n        \"Laval\" : \"Laval-Shado Valious\",\n        \"Cragger\" : \"Cragger-Vengdualize\",\n        \"Lagravis\" : \"Lagravis-Blazeprowlor\",\n        \"Crominus\" : \"Crominus-Grandorius\",\n        \"Tormak\" : \"Tormak-Tygafyre\",\n        \"LiElla\" : \"LiElla-Roarburn\"\n    }\n    return d.get(character, \"Not a character\")"}, "1758": {"problem_id": 4119, "answer": "def sort_emotions(arr, order):\n    return sorted(arr, key=lambda x: x[1] if order else x[0])"}, "1759": {"problem_id": 4120, "answer": "def sort_dict(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)"}, "1760": {"problem_id": 4121, "answer": "def fight_resolve(d, a):\n    return -1 if d.islower() == a.islower() else d if d.lower() == a.lower() else a"}, "1761": {"problem_id": 4122, "answer": ""}, "1762": {"problem_id": 4123, "answer": "from collections import Counter\ndef lcm_cardinality(n):\n    c = Counter(str(n))\n    return len(c.keys())"}, "1763": {"problem_id": 4124, "answer": "def has_unique_chars(str):\n    return len(set(str)) == len(str)"}, "1764": {"problem_id": 4125, "answer": "def get_weight(name):\n    return sum(ord(x) for x in name.swapcase() if x.isalpha())"}, "1765": {"problem_id": 4126, "answer": "def what_time_is_it(angle):\n    h, m = divmod(angle, 30)\n    return '{:02}:{:02}'.format(h + 12 * m // 60, m % 60)"}, "1766": {"problem_id": 4127, "answer": "def divisors(n):\n    if n < 2:\n        return set([1, n])\n    elif n == 2:\n        return [1, n]\n    else:\n        r = set()\n        for i in range(2, n):\n            if n % i == 0:\n                r.add(i)\n                r.add(n // i)\n        return r\n\ndef count_pairs_int(diff, n_max):\n    return sum(1 for i in range(1, n_max + 3) if divisors(i) == divisors(diff))"}, "1767": {"problem_id": 4128, "answer": "def bears(x,s):\n    return ''.join(['B' if i in 'B8' else '8' for i in s]) if len(s)>x else False"}, "1768": {"problem_id": 4129, "answer": "def queue(queuers,pos):\n    q = deque(queuers)\n    while True:\n        if len(q) == 1:\n            return q.popleft()\n        elif len(q) == 0:\n            return 0\n        else:\n            q.append(min(q[pos],q[pos-1]))\n            if q[-1] > q[pos-1]:\n                q.pop()\n            else:\n                return q.popleft()"}, "1769": {"problem_id": 4130, "answer": "import re\ndef is_valid_HK_phone_number(number):\n    return bool(re.match('^\\d{4} \\d{4}$', number))"}, "1770": {"problem_id": 4131, "answer": "def how_much_water(water, load, clothes):\n    if clothes > load * 2:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        return round(water * 1.1 ** (clothes - load), 2)"}, "1771": {"problem_id": 4132, "answer": "def correct_tail(body, tail):\n    sub = body[-1]\n    if sub == tail:\n        return True\n    else:\n        return False"}, "1772": {"problem_id": 4133, "answer": "def shortest_time(n, m, speeds):\n    from fractions import gcd\n    a, b, c, d = speeds\n    return min(n * gcd(a, b), m * d)"}, "1773": {"problem_id": 4134, "answer": "from math import ceil\ndef cooking_time(needed_power, minutes, seconds, power):\n    t = int(ceil((minutes + seconds) * 60 / int(needed_power)))\n    return '{} minutes {} seconds'.format(t // 60, t % 60)"}, "1774": {"problem_id": 4135, "answer": "from collections import Counter\n\ndef solve(s):\n    c = Counter(s)\n    return len(set(c.values())) == 1"}, "1775": {"problem_id": 4136, "answer": "def cake_slice(n):\n    return 2**n+1"}, "1776": {"problem_id": 4137, "answer": "def is_square(n):    \n    return n >= 0 and n % (n**0.5) == 0"}, "1777": {"problem_id": 4138, "answer": "def count_correct_characters(correct, guess):\n    if len(correct)!= len(guess):\n        raise Exception('Wrong length')\n    return sum(c == g for c, g in zip(correct, guess))"}, "1778": {"problem_id": 4139, "answer": "def rental_car_cost(d):\n    if d >= 7:\n        return 40*d - 50\n    elif d >= 3:\n        return 40*d - 20\n    else:\n        return 40*d"}, "1779": {"problem_id": 4140, "answer": "def bubblesort_once(l):\n    l.reverse()\n    return l[::-1]"}, "1780": {"problem_id": 4141, "answer": "from itertools import compress\nfrom math import log2\n\ndef is_prime(n):\n    \"\"\"Returns True if n is prime.\"\"\"\n    return n > 1 and all(n % i for i in range(2, int(log2(n)+1)))\n\ndef solve(x, y):\n    \"\"\"Solve n for x and y.\"\"\"\n    return sum(1 for i in range(y) if is_prime(i))"}, "1781": {"problem_id": 4142, "answer": "from collections import defaultdict\ndef solve(arr):\n    d = defaultdict(list)\n    for i in arr:\n        d[i].append(i)\n    return sorted(d.items())"}, "1782": {"problem_id": 4143, "answer": ""}, "1783": {"problem_id": 4144, "answer": "def abundant(h):\n    for i in range(2,h+1):\n        if h%i==0:\n            return [[i], [h//i]]"}, "1784": {"problem_id": 4145, "answer": "def ipv4__parser(ip_addr, mask):\n    nb, hd = 0, 0\n    for i in range(8):\n        nb <<= 1\n        nb |= (1 << i)\n        hd <<= 1\n    return ('.'.join(str(nb & hd).rjust(8))[::-1], '.'.join(str(hd & hd).rjust(8))[::-1])"}, "1785": {"problem_id": 4146, "answer": "def is_sorted_and_how(arr):\n    asc = sorted(arr)\n    desc = sorted(arr, reverse=True)\n    if arr == asc:\n        return \"yes, ascending\"\n    elif arr == desc:\n        return \"yes, descending\"\n    else:\n        return \"no\""}, "1786": {"problem_id": 4147, "answer": "def play_pass(s, n):\n    return ''.join(c.lower() if c.isdigit() else c for c in s.lower())[::-1] + ''.join(c.islower() if c.isalpha() else c for c in s.swapcase()).lower()"}, "1787": {"problem_id": 4148, "answer": "def sum_digits(number):\n    #your code here\n    n = abs(number)\n    return n"}, "1788": {"problem_id": 4149, "answer": "from string import ascii_lowercase as al, ascii_uppercase as au\n\ndef ROT135(input):\n    k = 0\n    for c in input:\n        k += al.find(c) + au.find(c)\n    return k % 13"}, "1789": {"problem_id": 4150, "answer": "def rot13(message):\n    res = \"\".join(ch for ch in message.lower() if ch.isalpha() or ch.isnumeric())\n    return \"\".join(res.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"nope\"))).strip()"}, "1790": {"problem_id": 4151, "answer": "def part(arr):\n    terms = [\"Partridge\", \"PearTree\", \"Chat\", \"Dan\", \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"]\n    return \"Mine's a Pint\" + \",\".join(reversed(filter(None, arr)))"}, "1791": {"problem_id": 4152, "answer": "def mygcd(x,y):\n    if y == 0:\n        return x\n    elif x == 0:\n        return y\n    else:\n        return mygcd(y, x%y)"}, "1792": {"problem_id": 4153, "answer": "from itertools import accumulate, takewhile\n\ndef rec(x):\n    return sum(accumulate(takewhile(lambda x: x<0, list(range(0,x+1)))))"}, "1793": {"problem_id": 4154, "answer": "def is_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    elif a + b < c and a + c < b and b + c < a:\n        return True\n    elif b + c < a and b + c < c and c + a > b:\n        return True\n    else:\n        return False"}, "1794": {"problem_id": 4155, "answer": "def solve(a, b):\n    s = ''.join(str(i) for i in range(a, b))\n    return sum(1 for i in s if i.isalnum())"}, "1795": {"problem_id": 4156, "answer": "def findSquares(x,y):\n    return sum(x*(x+1)//2 for x in range(y))"}, "1796": {"problem_id": 4157, "answer": "def group_check(s):\n    return len(s) == len(s.group())"}, "1797": {"problem_id": 4158, "answer": "def letter_check(arr): \n    return set(arr[1].lower()) <= set(arr[0].lower())"}, "1798": {"problem_id": 4159, "answer": "def poly_multiply(p1, p2):\n    return [n*m for n,m in zip(p1, p2)]"}, "1799": {"problem_id": 4160, "answer": "def get_percentage(sent, limit=1000):\n    if sent == 0:\n        return \"No e-mails sent\"\n    elif sent >= limit:\n        return \"Daily limit is reached\"\n    else:\n        return \"{}%\".format(int(sent * 100 / limit))"}, "1800": {"problem_id": 4161, "answer": "def rat_at(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        l=1\n        r=2\n        while l<=n:\n            l+=1\n            r+=2\n        return (l,r)\n"}, "1801": {"problem_id": 4162, "answer": "def friends(n):\n    return 0 if n <= 1 else max(1, friends(n-1)+friends(n-2))"}, "1802": {"problem_id": 4163, "answer": "def is_centered(arr,n):\n    center = sum(arr)\n    return all(n%i!=0 for i in range(1,center+1))"}, "1803": {"problem_id": 4164, "answer": "def first_non_repeating_letter(string):\n    s = string.lower()\n    for i in s:\n        if i not in s.lower():\n            return i"}, "1804": {"problem_id": 4165, "answer": "def uni_total(string):\n    return sum(ord(i) for i in string)"}, "1805": {"problem_id": 4166, "answer": "def solve(p):\n    s = pow(10, p-1)\n    return f\"{s:b}-sum\" if s.bit_length()%2 else f\"{s:b}-altsum\""}, "1806": {"problem_id": 4167, "answer": "def descriptions(arr):\n    return 2**sum(arr.count(x) for x in range(3,7))"}, "1807": {"problem_id": 4168, "answer": "def string_hash(s):\n    a = sum(ord(c) for c in s)\n    b = sum(ord(c) - ord(s[i]) for i, c in enumerate(s))\n    c = (a | b) & (~a << 2)\n    return c ^ (32 * (s.count(\" \") + 1))"}, "1808": {"problem_id": 4169, "answer": "import re\ndef para_to_rect(eqn1, eqn2):\n    s1 = re.sub(r'\\bt +\\d+', '1', eqn1.replace('t',''))\n    s2 = re.sub(r'\\d+', '1', eqn2.replace('t',''))\n    coefs = {'t':1}\n    for i in s1.split('t'):\n        coefs['t'] = int(i)\n    \n    s1 = re.sub(r'\\d+', '1', s1.replace('t',''))\n    s2 = re.sub(r'\\bt +\\d+', '1', s2.replace('t',''))\n    coefs['t'] = int(s2.count('t'))\n    \n    rect =''.join([str(e) for e in zip(s1, s2)])\n    return rect"}, "1809": {"problem_id": 4170, "answer": "def super_sum(D, N):\n    return (D * N) // 2"}, "1810": {"problem_id": 4171, "answer": "def no_repeat(string):\n    return ''.join(c for c in string if c not in '0123456789')"}, "1811": {"problem_id": 4172, "answer": "def solve(s):\n    n = 0\n    for i in range(len(s)):\n        if s[i] == '(' and s[i-1] == ')':\n            n += 1\n        elif s[i] == ')' and s[i-1] == ')':\n            n -= 1\n        else:\n            pass\n    return n"}, "1812": {"problem_id": 4173, "answer": "def ant(grid, column, row, n, direction = 0):\n    directions = {(0,1), (1,0), (0,-1), (-1,0)}\n    for _ in range(n):\n        grid[row][column] = '1'\n        ant.turn(grid,directions)\n        column += 1\n        row += 1\n    return grid"}, "1813": {"problem_id": 4174, "answer": "def smallest(n):\n    s = 1\n    while s <= n:\n        s += 1\n    return s"}, "1814": {"problem_id": 4175, "answer": "def repeater(string, n):\n    # Your code goes here.\n    return string * n"}, "1815": {"problem_id": 4176, "answer": "def cake(candles,debris):\n    return 'Fire!' if candles/len(debris)>0.7*candles else 'That was close!'"}, "1816": {"problem_id": 4177, "answer": ""}, "1817": {"problem_id": 4178, "answer": "def min_sum(arr):\n    arr = sorted(arr)\n    return sum(arr[i]*arr[-i-1] for i in range(len(arr)//2))"}, "1818": {"problem_id": 4179, "answer": "def game(n):\n    return [n * n] if n % 2 == 0 else [n // 2]"}, "1819": {"problem_id": 4180, "answer": "def lottery(s):\n    return ''.join(c for c in s if c.isdigit()) or 'One more run!'"}, "1820": {"problem_id": 4181, "answer": "def filter_numbers(string):\n    return \"\".join(x for x in string if x.isdigit())"}, "1821": {"problem_id": 4182, "answer": "def survivor(n):\n    i = 0\n    while n > i:\n        n = n - i\n        i = i + 1\n    return n > 2"}, "1822": {"problem_id": 4183, "answer": "GREATEST_DISTANCE = lambda a: abs(a.index(True) - a.index(False))"}, "1823": {"problem_id": 4184, "answer": "primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,"}, "1824": {"problem_id": 4185, "answer": ""}, "1825": {"problem_id": 4186, "answer": "def sum_of_threes(n):\n    return 'Impossible' if n < 3 else '3^%d+3^%d+3^%d' % (len(sorted(range(n)), reverse=True), n)"}, "1826": {"problem_id": 4187, "answer": "def solomons_quest(arr):\n    layer = 0\n    d = arr[0]\n    for i in range(1, len(arr)):\n        layer += 2**i\n        d = min(d, arr[i])\n    return [layer, d]"}, "1827": {"problem_id": 4188, "answer": "def find_dup(arr):\n    return sum(arr) - sum(arr[1:])"}, "1828": {"problem_id": 4189, "answer": "def highest_value(a, b):\n    return a if sum(map(ord, a)) > sum(map(ord, b)) else b"}, "1829": {"problem_id": 4190, "answer": "def is_alt(s):\n    return ''.join(sorted(s, key=lambda c: (c in 'aeiou' or c in 'aeiou-')).count(c) for c in 'aeiou-')"}, "1830": {"problem_id": 4191, "answer": "def persistence(n):\n    if n < 10:\n        return 0\n    a = len(str(n))\n    b = 0\n    while b < a:\n        b += 1\n        c = n % 10\n        n //= 10\n        b += 1\n        if b == a:\n            return b"}, "1831": {"problem_id": 4192, "answer": "def pairwise(arr, n):\n    seen = set()\n    for i in range(len(arr)):\n        if arr[i] not in seen:\n            seen.add(arr[i])\n            for j in range(i + 1, len(arr)):\n                if arr[j] + arr[i] == n:\n                    return i + 1"}, "1832": {"problem_id": 4193, "answer": "from bisect import bisect_left"}, "1833": {"problem_id": 4194, "answer": "def next_version(version):\n    n = version.count('.')\n    if n == 1:\n        return version[0] + '.'\n    elif n == 2:\n        return version[0] + version[1]\n    else:\n        return version[0] + next_version(version[1:])"}, "1834": {"problem_id": 4195, "answer": "def merge(line):\n    m = line[0]\n    i = 1\n    while i < len(line):\n        m = m.replace(i, 0)\n        i += 1\n    return [m] + merge(line[1:])"}, "1835": {"problem_id": 4196, "answer": "from bisect import bisect_left as bisect\nsummationOfPrimes=lambda p:2*sum(p)if p<10else sum(p[:bisect(p,11)])"}, "1836": {"problem_id": 4197, "answer": "def top3(products, amounts, prices):\n    m = max(products, key=lambda x: x[1]*p)\n    return [p for p in sorted(products, key=lambda x: x[1]*p)]"}, "1837": {"problem_id": 4198, "answer": "def simplify(n):\n    if n == 1:\n        return \"1\"\n    elif n%2 == 0:\n        return \"sqrt %d\" % (n**0.5)\n    else:\n        return \"%d sqrt %d\" % (n**2, n**0.5)"}, "1838": {"problem_id": 4199, "answer": "def squares(x, n):\n    return [x] if n < 1 else squares(x**2, n//(2*x))"}, "1839": {"problem_id": 4200, "answer": "from re import sub\ndef vowel_shift(text, n):\n    if text == None:\n        return text\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    vowels_lst = [c for c in text if c in vowels]\n    vowels_lst.reverse()\n    n = int(n)\n    vowels_lst.extend(sub(\"[^aeiouAEIOU]\", \"\", str.maketrans(\"\", \"\", n)))\n    return \"\".join(vowels_lst)"}, "1840": {"problem_id": 4201, "answer": "def find_missing(sequence):\n    s = sequence[0]\n    for i in range(1, len(sequence)):\n        if s == sequence[i]:\n            return s\n        s += sequence[i]"}, "1841": {"problem_id": 4202, "answer": "from collections import Counter\n\ndef ulam_sequence(u0, u1, n):\n    seq = [u0, u1]\n    cnt = Counter(seq)\n    seq.pop()\n    while len(seq) < n:\n        x, y = seq.pop(), seq.pop()\n        seq.append(min(x, y))\n    return seq"}, "1842": {"problem_id": 4203, "answer": "def caffeineBuzz(n):\n    if n % 12 == 0:\n        return \"CoffeeScript\"\n    elif n % 6 == 0:\n        return \"JavaScript\"\n    elif n % 3 == 0:\n        return \"Java\"\n    else:\n        return \"mocha_missing!\""}, "1843": {"problem_id": 4204, "answer": "def palindrome(num):\n    if type(num) is not int or num < 0:\n        return \"Not valid\"\n    s = str(num)\n    if len(s) == 1:\n        return 11\n    elif len(s) == 2:\n        return 282\n    else:\n        return 1001"}, "1844": {"problem_id": 4205, "answer": "def cannons_ready(gunners):\n    return 'Fire!' if all(s.lower() == 'aye' for s in gunners.values()) else 'Shiver me timbers!'"}, "1845": {"problem_id": 4206, "answer": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef three_details(n):\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return three_details(n - 2) + three_details(n - 1)"}, "1846": {"problem_id": 4207, "answer": "def sum_cubes(n):\n    return sum(c**3 for c in range(1,n+1))"}, "1847": {"problem_id": 4208, "answer": "def ipsubnet2list(subnet):\n    ip_list = []\n    for i in range(32):\n        ip_list.append(f\"{int(subnet[i])}.\")\n    return ip_list"}, "1848": {"problem_id": 4209, "answer": "def largest_rect(histogram):\n    max_area = 0\n    l = len(histogram)\n    for i in range(l):\n        if histogram[i] > max_area:\n            max_area = histogram[i]\n            max_area += l * (i + 1)\n    return max_area"}, "1849": {"problem_id": 4210, "answer": "def process_data(data):\n    lst = []\n    for i in data:\n        lst.append(i[0] - i[1])\n        lst.append(i[1])\n    return lst[0] * lst[1]"}, "1850": {"problem_id": 4211, "answer": "from collections import Counter\nVALID = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef validate_word(word):\n    c = Counter(word)\n    return len(set(c.values())) == len(word)"}, "1851": {"problem_id": 4212, "answer": "def unite_unique(*arrays):\n    return [n for n in arrays if all(set(n) & set(arr.pop()))]"}, "1852": {"problem_id": 4213, "answer": "def array_info(x):\n    return [[len(x)],[nok,nflo,snk] for nok,nflo,snk in enumerate(x)][1:] if x.count(' ')==0 else None"}, "1853": {"problem_id": 4214, "answer": "import re\ndef spin_solve(sentence):\n    s = sentence.split(' ')\n    s =''.join(s[::-1])\n    s = re.sub(r'[.,?!]','',s)\n    return s.upper().rjust(2)"}, "1854": {"problem_id": 4215, "answer": "def count_number(n, x):\n    return sum(1 for i in range(n) if x % i == 0)"}, "1855": {"problem_id": 4216, "answer": "def every(array, interval=1, start_index=0):\n    return array[start_index::interval]"}, "1856": {"problem_id": 4217, "answer": "from datetime import date\nMONTHS = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\ndef solve(a,b):\n    d = date(a, b)\n    return MONTHS[max(d.month, d.weekday) - 1] + \" has extended weekends in %s and %s\" % (a, b)"}, "1857": {"problem_id": 4218, "answer": "def game_winners(gryffindor, slytherin):\n    g, s = divmod(sum(gryffindor), 150)\n    return \"It's a draw!\" if g == s else \"Slytherin wins!\" if g > s else \"Gryffindor wins!\""}, "1858": {"problem_id": 4219, "answer": "def maxlen(l1, l2):\n    return max(l1, l2, key=lambda x: x[1]*x[2])"}, "1859": {"problem_id": 4220, "answer": "def equable_triangle(a,b,c):\n    p = (a + b + c) / 2\n    return p == int(p)"}, "1860": {"problem_id": 4221, "answer": "def count_targets(n, sequence):\n    return sum(1 for i in range(n) if sequence[i] == sequence[i+1])"}, "1861": {"problem_id": 4222, "answer": "def get_size(w,h,d):\n    return [2*(h*w)+2*(h*d)+2*(w*d), w*h*d]"}, "1862": {"problem_id": 4223, "answer": "def comp(array1, array2):\n    if array1 == None or array2 == None:\n        return False\n    elif array1 == None or array2 == None:\n        return True\n    else:\n        return sorted(array1) == sorted(array2)"}, "1863": {"problem_id": 4224, "answer": "def dont_give_me_five(start,end):\n    # your code here\n    n = 0\n    for i in range(start, end+1):\n        if '5' not in str(i):\n            n += 1\n    return n"}, "1864": {"problem_id": 4225, "answer": "def cup_and_balls(b, arr):\n    cups = [0] * 4\n    cups[b[0]] = 1\n    for i in range(1, 4):\n        cups[i] = cups[i-1] + 1\n        if b[i] == 1:\n            cups[i] = cups[i-1]\n        elif b[i] == 2:\n            cups[i] = cups[i-1] + 2\n        elif b[i] == 3:\n            cups[i] = cups[i-1] + 3\n    return cups"}, "1865": {"problem_id": 4226, "answer": "def remove_smallest(numbers):\n    if numbers:\n        numbers.remove(min(numbers))\n    return numbers"}, "1866": {"problem_id": 4227, "answer": "def complexSum(arr):\n    real,imag = arr.replace('+',''),arr.replace('-','')\n    return '{}+{}i'.format(real,imag)"}, "1867": {"problem_id": 4228, "answer": "def palindrome(num):\n    if type(num)!= int or num < 0:\n        return \"Not valid\"\n    s = str(num)\n    return sum([1 for i in range(len(s)) if s[i] == s[i+1]])"}, "1868": {"problem_id": 4229, "answer": "def bits_war(numbers):\n    evens = sum(bin(x).count('1') for x in numbers if x%2==0)\n    odds = sum(bin(x).count('1') for x in numbers if x%2!=0)\n    return 'odds win' if odds>=evens else 'evens win' if evens>=odds else 'tie'"}, "1869": {"problem_id": 4230, "answer": "def reverse_letter(string):\n    return ''.join(reversed(string[::-1]))"}, "1870": {"problem_id": 4231, "answer": "def a(n):\n    if n < 4: return ''\n    s =''.join(['A' if i%2 else 'A' for i in range(n)]) +'' + '\\n'.join(['A' if i%2 else 'A' for i in range(n)])\n    return s"}, "1871": {"problem_id": 4232, "answer": "def convert_to_mixed_numeral(parm):\n    numerator, denominator = parm.partition('/')\n    numerator, denominator = abs(numerator), abs(denominator)\n    numeral = '{}/{}'.format(numerator, denominator)\n    return numeral"}, "1872": {"problem_id": 4233, "answer": "import itertools as it\ndef goldbach(n):\n    primes = set(it.permutations(range(3, n+1), 2))\n    return list(sorted(primes))"}, "1873": {"problem_id": 4234, "answer": "def num_blocks(w, l, h):\n    return h*l*w//math.gcd(h,l)"}, "1874": {"problem_id": 4235, "answer": "def make_sentences(parts):\n    return''.join(parts).replace(',', ',').rstrip('.')"}, "1875": {"problem_id": 4236, "answer": "def calculate_grade(scores):\n    mean = sum(scores) / len(scores)\n    return \"ABCDF\"[(mean >= 90) + (mean >= 80) + (mean >= 70) + (mean >= 60)]"}, "1876": {"problem_id": 4237, "answer": "def to12hourtime(s):\n    h, m = map(int, s.split(':'))\n    return '{}:{:02} {}'.format(h % 12 or 12, m, 'p')"}, "1877": {"problem_id": 4238, "answer": "def squares_needed(grains):\n    return 0 if grains==0 else 1+squares_needed(grains//2)"}, "1878": {"problem_id": 4239, "answer": "def filter_even_length_words(words):\n    return [word for word in words if len(word) % 2 == 0]"}, "1879": {"problem_id": 4240, "answer": "def tongues(code):\n    vowels = ['a', 'i', 'y', 'e', 'o', 'u']\n    consonants = ['b', 'k', 'x', 'z', 'n', 'h', 'd', 'c', 'w', 'g', 'p', 'v', 'j', 'q', 't','s', 'r', 'l','m', 'f']\n    return ''.join(c if c.islower() else vowels[ord(c) - 97] for c in code)"}, "1880": {"problem_id": 4241, "answer": "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    sum = 0\n    if begin_number > end_number:\n        return 0\n    else:\n        for i in range(begin_number, end_number+1, step):\n            sum += i\n    return sum"}, "1881": {"problem_id": 4242, "answer": "def direction_in_grid(n,m):\n    return 'LR'[n%2] if n>0 and m>0 else 'UD'[m%2]"}, "1882": {"problem_id": 4243, "answer": "def find_average(array):\n    return sum(array) / len(array)"}, "1883": {"problem_id": 4244, "answer": "def palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return 'Not valid'\n    elif num < 10:\n        return False\n    else:\n        num = str(num)\n        s = num[::-1]\n        return sum(1 for i in s if i.isdigit()) > 1"}, "1884": {"problem_id": 4245, "answer": "def explode(arr): \n    return 'Void!' if arr == [].__contains__(arr) else ''.join(map(sum, zip(*arr)))"}, "1885": {"problem_id": 4246, "answer": "def covfefe(s):\n    return s.replace(\"coverage\", \"covfefe\") if s.startswith(\"coverage\") else s + \" covfefe\""}, "1886": {"problem_id": 4247, "answer": "def odd(s):\n    o = 0\n    for i in range(len(s)):\n        if s[i] == 'o':\n            o += 1\n    return o"}, "1887": {"problem_id": 4248, "answer": "from collections import Counter\nsolve=lambda f:next((i for i in Counter(f).most_common(),key=lambda x:len(x[0].split('.'))),set())"}, "1888": {"problem_id": 4249, "answer": "def base64_to_base10(string):\n    return sum(bin(i).count('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/') for i in range(0, 64))"}, "1889": {"problem_id": 4250, "answer": "from itertools import permutations\nsha256_cracker=lambda h,c=''.join(p for p in permutations(c)) : None"}, "1890": {"problem_id": 4251, "answer": "def difference_of_squares(n):\n    return sum(i for i in range(1,n+1))**2 - sum(i**2 for i in range(1,n+1))"}, "1891": {"problem_id": 4252, "answer": "def merge_arrays(first, second): \n    lst = []\n    for i in first:\n        if i not in lst:\n            lst.append(i)\n    for i in second:\n        if i not in lst:\n            lst.append(i)\n    return sorted(lst)"}, "1892": {"problem_id": 4253, "answer": "def solve(n,k):\n    if n < 0:\n        return []\n    elif k == 1:\n        return [n]\n    else:\n        d = n%k\n        if d == 0:\n            return [n]\n        else:\n            k -= d\n            l = [i for i in range(1,k) if i%2 == 1]\n            r = [i for i in range(1,k) if i%2 == 0]\n            l.extend(r)\n            return [l+r]"}, "1893": {"problem_id": 4254, "answer": "import re\ndef solve(eq):\n    return ''.join(re.sub(r'([+-/*])', r'\\1*\\1', eq))"}, "1894": {"problem_id": 4255, "answer": "def make_upper_case(s):\n    return s.upper()"}, "1895": {"problem_id": 4256, "answer": "import string\ndef insert_missing_letters(st):\n    return ''.join(s.upper() if s not in st else s for s in st)"}, "1896": {"problem_id": 4257, "answer": "def calculate_probability(n):\n    return round(1 - (365 / (365.0 if n % 4 else 365.25)**.5).ceil(), 2)"}, "1897": {"problem_id": 4258, "answer": "def series_sum(n):\n    return '{:.2f}'.format(sum(1.0/(1+(3*i-1)*3) for i in range(n)))"}, "1898": {"problem_id": 4259, "answer": ""}, "1899": {"problem_id": 4260, "answer": "def mark_spot(n):\n    if type(n)!= int or n < 1:\n        return '?'\n    s ='' * (n - 2) + 'X\\n'\n    return ''.join(s.splitlines()[::2])"}, "1900": {"problem_id": 4261, "answer": "def robot_walk(a):\n    m = 0\n    for i in range(len(a)):\n        m += a[i]\n        x = (m - a[i]) ** 2\n        if x not in a:\n            return False\n        a[i] = x\n    return True"}, "1901": {"problem_id": 4262, "answer": "def calc_tip(p, r):\n    if p%10==5:\n        return 10*p+5\n    elif p%10==4:\n        return 10*p+6\n    elif p%10==3:\n        return 10*p+7\n    elif p%10==2:\n        return 10*p+8\n    elif p%10==1:\n        return 10*p+9\n    else:\n        return 10*p+tens\n    "}, "1902": {"problem_id": 4263, "answer": "import re\ndef apparently(s):\n    return re.sub(r'\\b(and|but)\\b(?! apparently\\b)','apparently', s)"}, "1903": {"problem_id": 4264, "answer": "def operation(a,b):\n    c = 0\n    while a!= b:\n        c += 1\n        a //= 2\n        b *= 2\n    return c"}, "1904": {"problem_id": 4265, "answer": "def tops(msg):\n    n = 2\n    l = msg[n:]\n    r = msg[:n]\n    return ''.join(l).ljust(n, '1')"}, "1905": {"problem_id": 4266, "answer": "def min_dot(a, b):\n    return sum(x * y for x, y in zip(a, b))"}, "1906": {"problem_id": 4267, "answer": "def souls(character, build):\n    total = sum(build)\n    level = 0\n    stats = {\"intuition\": 11, \"endurance\": 8, \"essler\": 12, \"perservell\": 14, \"astrolabe\": 9, \"bagginess\": 10, \"knight\": 11, \"wanderer\": 10, \"thief\": 11, \"bandit\": 12, \"hunter\": 11, \"sorcerer\": 8, \"pyromancer\": 10, \"cleric\": 11, \"deprived\": 11}\n    souls = 673, 690, 707, 724, 741, 758, 775, 793, 811, 829\n    while total < level:\n        level += 1\n        total += stats[character][level] - 895\n        souls += 673 - 829\n    return \"Starting as a {}, level {} will require {} souls.\".format(character, level, souls)"}, "1907": {"problem_id": 4268, "answer": "def next_num(n):\n    return next((x for x in range(1, 10) if all(x % d == 0 for d in range(1, 10))), None)"}, "1908": {"problem_id": 4269, "answer": "def convert_my_dollars(usd, currency):\n    import numpy as np\n    d = np.int64(bin(np.ceil(np.log2(usd))))\n    r = {\n        'a': 1,\n        'e': 1,\n        'i': 1,\n        'o': 1,\n        'u': 1,\n    }\n    for c in currency.lower():\n        if c in 'aeiou':\n            r[c] += d\n        else:\n            r[c] += r[c.lower()]\n    return 'You now have {} yen of {} yen.'.format(r[currency.lower()])"}, "1909": {"problem_id": 4270, "answer": "def odd_ball(arr):\n    return arr.index('odd') in arr"}, "1910": {"problem_id": 4271, "answer": "def roman_fractions(integer, fraction=0):\n    if integer < 0:\n        return \"NaR\"\n    elif integer > 5000:\n        return \"MDCXXXII:\"\n    else:\n        numerator, denominator = divmod(integer, 12)\n        num, denom = divmod(numerator, denominator)\n        return \"\".join([\"{:02b}\".format(n) for n in num + denom])"}, "1911": {"problem_id": 4272, "answer": "def greet(name):\n    if name == \"Johnny\":\n        return \"Hello, my love!\"\n    else:\n        return \"Hello, {name}!\".format(name=name)"}, "1912": {"problem_id": 4273, "answer": "def shorten_to_date(long_date):\n    return''.join(s.split()[0] for s in long_date.split(' '))"}, "1913": {"problem_id": 4274, "answer": "from itertools import cycle\nletters = \"abcdefghijklmnopqrstuvwxyz\"\ndef do_math(s) :\n    s = s.split()\n    x = next(iter(s))\n    y = next(iter(s))\n    z = next(iter(s))\n    res = []\n    for i in range(len(s)):\n        if letters.index(s[i]) > letters.index(x[i]):\n            res.append(letters[i])\n        elif letters.index(s[i]) < letters.index(x[i]):\n            res.append(x[i])\n        else:\n            res.append(s[i])\n    return round(sum(res), 2)"}, "1914": {"problem_id": 4275, "answer": "def pattern(n):\n    return '\\n'.join(str(i) * i for i in range(1, n + 1, 2))"}, "1915": {"problem_id": 4276, "answer": "def solution(n):\n    return round(n, 1.0 /.5)"}, "1916": {"problem_id": 4277, "answer": "def difference_in_ages(ages):\n    # your code here\n    m = max(ages)\n    w = min(ages)\n    d = w - m\n    return (m,w,d)"}, "1917": {"problem_id": 4278, "answer": "def diagonal(matrix):\n    pd,sd = sum(matrix[i][i] for i in range(len(matrix)))\n    return \"Draw!\" if pd>sd else \"Principal Diagonal win!\" if pd>sd else \"Secondary Diagonal win!\""}, "1918": {"problem_id": 4279, "answer": "from collections import defaultdict\ndef group_in_10s(*args):\n    d = defaultdict(list)\n    for i in args:\n        d[int(i)] += [int(j) for j in sorted(d.keys())]\n    return [d.most_common()[0][0], d.most_common()[1][0]]"}, "1919": {"problem_id": 4280, "answer": "def area_largest_square(r):\n    return 2*r**2"}, "1920": {"problem_id": 4281, "answer": "import math\ndef tankvol(h, d, vt):\n    r = d/2.0\n    c = math.pi*r**2\n    return int(math.ceil(vt/(r**2)))"}, "1921": {"problem_id": 4282, "answer": "import re\ndef hungry_seven(arr):\n    pattern = '{}7{}'.format\n    return [int(i) for i in re.findall(pattern, arr)]"}, "1922": {"problem_id": 4283, "answer": "def add(s1, s2):\n    return sum(map(ord, s1+s2))"}, "1923": {"problem_id": 4284, "answer": "def array_leaders(numbers):\n    return [x for x in numbers if x > sum(numbers[i+1:]))]"}, "1924": {"problem_id": 4285, "answer": "def find_slope(points):\n    return str((points[3] - points[1]) // (points[2] - points[0])) if points[2]!= points[0] else 'undefined'"}, "1925": {"problem_id": 4286, "answer": "def solve(n):\n    s = 2\n    while n%s==0:\n        s += 1\n    return s"}, "1926": {"problem_id": 4287, "answer": "def get_participants(h):\n    return h.count(1)"}, "1927": {"problem_id": 4288, "answer": "def quote(fighter):\n    return \"I am not impressed by your performance.\" if fighter.lower() == \"george saint pierre\" else \"I'd like to take this chance to apologize.. To absolutely NOBODY!\""}, "1928": {"problem_id": 4289, "answer": "import re\ndef happy_g(s):\n    return len(re.findall('g{2,}|g{1,}',s))"}, "1929": {"problem_id": 4290, "answer": "def types(x):\n    return type(x).__name__"}, "1930": {"problem_id": 4291, "answer": "century = lambda y: y//100"}, "1931": {"problem_id": 4292, "answer": "def string_clean(s):\n    \"\"\"\n    Function will return the cleaned string\n    \"\"\"\n    return ''.join([i for i in s if i not in '1234567890']).lstrip('1234567890')"}, "1932": {"problem_id": 4293, "answer": "def calculate_1RM(w, r):\n    if r == 0:\n        return 0\n    if r == 1:\n        return w\n    if r % 1 == 0:\n        return round(max(w * (1 + r // 2), w * r // 2, w * r // 2 * (r // 2 + 1)), 0)\n"}, "1933": {"problem_id": 4294, "answer": "def remove(text, what):\n    lst = text.split()\n    for key, value in what.items():\n        lst.remove(key)\n    return ''.join(lst)"}, "1934": {"problem_id": 4295, "answer": ""}, "1935": {"problem_id": 4296, "answer": "def largest(n,xs):\n    xs.sort()\n    return xs[-n:]"}, "1936": {"problem_id": 4297, "answer": "def get_mean(arr,x,y):\n    if x < 1 or y < 1:\n        return -1\n    else:\n        return arr[x-1] + arr[y-1]/2"}, "1937": {"problem_id": 4298, "answer": "def n00bify(text):\n    s = text.replace('too', '2').replace('to', '2').replace('too','2\\g<1>')\n    s = s.replace('too','2\\g<1>').replace('too','2\\g<3>')\n    s = s.replace('too','2\\g<3>').replace('too','LOL WHOA u R my 123 <3')\n    s = s.replace('too','2\\g<3>').replace('too','OMG1234567890!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1"}, "1938": {"problem_id": 4299, "answer": "def is_prime_happy(n):\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    s = sum(primes)\n    return n%s == 0"}, "1939": {"problem_id": 4300, "answer": "def solve(a, b):\n    return sum(1 for x in a if x in b)"}, "1940": {"problem_id": 4301, "answer": "def calc_ms(n):\n    return 20**n + calc_ms(n>>1)"}, "1941": {"problem_id": 4302, "answer": "def better_than_average(class_points, your_points):\n    a = sum(class_points) / len(class_points)\n    b = your_points + your_points\n    if a < b:\n        return True\n    else:\n        return False"}, "1942": {"problem_id": 4303, "answer": "from math import factorial\n\ndef sum_arrangements(num):\n    return factorial(10**len(str(num))) //math.factorial(10**len(str(num)))"}, "1943": {"problem_id": 4304, "answer": "def unlock(message):\n    return \"\".join(c for c in message.lower() if c.isalpha())"}, "1944": {"problem_id": 4305, "answer": "def order_weight(strng):\n    return''.join(sorted(sorted(strng.split()), key=lambda s: sum(map(int, s))))"}, "1945": {"problem_id": 4306, "answer": "from math import cos, sin"}, "1946": {"problem_id": 4307, "answer": "def unused_digits(*args):\n    return ''.join(sorted(set(str(args)))).translate(str.maketrans('0123456789', '0987654321'))"}, "1947": {"problem_id": 4308, "answer": "def make_acronym(phrase):\n    if isinstance(phrase, str):\n        return ''.join(c.upper() for c in phrase)\n    elif isinstance(phrase, list):\n        return ''.join(c.upper() for c in phrase)\n    else:\n        return 'Not letters'"}, "1948": {"problem_id": 4309, "answer": "from itertools import groupby\ndef replace(s):\n    g = groupby(s)\n    return ''.join(k.replace('!','') for k in g) +'' + ''.join(k.replace('?','') for k in g)"}, "1949": {"problem_id": 4310, "answer": "def swap(st):\n    return \"\".join(c.upper() if c in \"aeiou\" else c for c in st)"}, "1950": {"problem_id": 4311, "answer": "from itertools import combinations_with_replacement as cb\ndef solve(a, b):\n    return sum(c for c in cb(str(a), str(b), 2) if c % 2 == 0)"}, "1951": {"problem_id": 4312, "answer": "def pick_peaks(arr):\n    pos = []\n    peaks = []\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            pos.append(i)\n            peaks.append(arr[i])\n        elif arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            pos.append(i)\n            peaks.append(arr[i])\n    return {\"pos\": pos, \"peaks\": peaks}"}, "1952": {"problem_id": 4313, "answer": "box_capacity = lambda l, w, h: l*w*h"}, "1953": {"problem_id": 4314, "answer": "def chess_bishop_dream(board_size, init_position, init_direction, k):\n    r, c = board_size\n    pos = init_position.copy()\n    pos[r-1] = init_direction[0]\n    pos[c-1] = init_direction[1]\n    \n    t = 0\n    while t < k:\n        t += 1\n        m = (r+c)//2\n        n = (r-m)//2\n        if pos[m] < 0 or pos[n] < 0:\n            continue\n        \n        x, y = pos[m], pos[n]\n        if x < 0 or x >= r or y < 0 or y >= c:\n            continue\n        \n        pos[m], pos[n] = x, y\n        \n        for i in range(2):\n            if board_size[i] == m and board_size[i] < i:\n                board_size[i] = m\n            elif board_size[i] == n and board_size[i] > i:\n                board_size[i] = n\n        "}, "1954": {"problem_id": 4315, "answer": "def sum_them(n):\n    return 2 ** (n - 1).bit_length()"}, "1955": {"problem_id": 4316, "answer": "def reverse_by_center(s):\n    half = len(s) // 2\n    return s[half:] + s[:half]"}, "1956": {"problem_id": 4317, "answer": "def card_game(card_1, card_2, trump):\n    deck = ['joker','2\u2663','3\u2663','4\u2663','5\u2663','6\u2663','7\u2663','8\u2663','9\u2663','10\u2663','J\u2663','Q\u2663','K\u2663','A\u2663',\n                 '2\u2666','3\u2666','4\u2666','5\u2666','6\u2666','7\u2666','8\u2666','9\u2666','10\u2666','J\u2666','Q\u2666','K\u2666','A\u2666',\n                 '2\u2665','3\u2665','4\u2665','5\u2665','6\u2665','7\u2665','8\u2665','9\u2665','10\u2665','J\u2665','Q\u2665','K\u2665','A\u2665']\n    return 'Let us play again.' if deck.count(card_1) > deck.count(card_2) else 'The first card won.' if deck.count(card_1) > 0 else 'Someone cheats.'"}, "1957": {"problem_id": 4318, "answer": "def hot_singles(arr1, arr2):\n    return [sorted(set(arr1).__containsitem__(i) + set(arr2).__containsitem__(i) for i in arr1) for arr2 in zip(arr2, arr1)]"}, "1958": {"problem_id": 4319, "answer": "def countzero(string):\n    return sum(1 if c in 'abdegopq069DOPQR' else 2 for c in string)"}, "1959": {"problem_id": 4320, "answer": "def greek_comparator(lhs, rhs):\n    greek_alphabet = (\n    'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', \n    'eta', 'theta', 'iota', 'kappa', 'lambda','mu', \n    'nu', 'xi', 'omicron', 'pi', 'rho','sigma',\n    'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega')\n    return greek_alphabet.index(lhs) - greek_alphabet.index(rhs)"}, "1960": {"problem_id": 4321, "answer": "def player_manager(players):\n    if players is None:\n        return []\n    players = players.split(', ')\n    return [{'player': name, 'contact': int(num)} for name, num in zip(players, players[1:])]"}, "1961": {"problem_id": 4322, "answer": "import re\n\ndef body_count(code):\n    return bool(re.match(r'([A-Z]\\d){5}\\.\\-[A-Z]%\\d\\.\\d\\d\\.', code))"}, "1962": {"problem_id": 4323, "answer": "from itertools import groupby\n\ndef uniq(seq):\n    return [k for k, g in groupby(seq)]"}, "1963": {"problem_id": 4324, "answer": "display_board=lambda b,w:__import__('collections').Counter(b).most_common(w//2).insert(0,\" \")"}, "1964": {"problem_id": 4325, "answer": "def knight_rescue(N,x,y):\n    return all(n%2==0 for n in N)"}, "1965": {"problem_id": 4326, "answer": "def london_city_hacker(journey):\n    c=0\n    s=0\n    for i in journey:\n        if type(i)==str:\n            s+=i.split()[1]\n        else:\n            c+=2.40\n            s+=i\n    return f'\u00a3{c:.2f}'"}, "1966": {"problem_id": 4327, "answer": "def chameleon(chameleons, desiredColor):\n    m = 0\n    color = desiredColor\n    while color!= 0:\n        if color == 0:\n            return -1\n        elif color == 1:\n            color = 0\n            m += 1\n        elif color == 2:\n            color = 0\n            m += 1\n        else:\n            color = 3 - color\n            m += 1\n    return m"}, "1967": {"problem_id": 4328, "answer": "def friend_find(line):\n    cnt = 0\n    for i in line:\n        if i.find('R')!= -1:\n            cnt += 1\n    return cnt"}, "1968": {"problem_id": 4329, "answer": "def pig_latin(s):\n    s = s.lower()\n    if s.isalnum():\n        s = s[:s.rfind('aeiou')] + 'ay'\n    elif s.isalpha():\n        s = s + 'ay'\n    return s"}, "1969": {"problem_id": 4330, "answer": "def shortest_arrang(n):\n    if n == 14:\n        return [5, 4, 3, 2]\n    elif n == 563:\n        return [563, 563, 563, 563]\n    else:\n        return [n - 1, n - 1, n - 1, n - 1]"}, "1970": {"problem_id": 4331, "answer": "import re\ndef heavy_metal_umlauts(boring_text):\n    return boring_text.translate(str.maketrans('aeiouyAEIOUY', '\u00c4S M\u00dcCH \u00c4S P\u00d6SS\u00cfBL\u00cb!')).lower()"}, "1971": {"problem_id": 4332, "answer": "def langtons_ant(n):\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n    grid[0][0] = 1\n    for i in range(1, n):\n        grid[i][0] = grid[i-1][0]\n        grid[i][1] = grid[i-1][1]\n        grid[i][2] = grid[i-1][2]\n        grid[i][3] = grid[i-1][3]\n        grid[i][4] = grid[i-1][4]\n        grid[i][5] = grid[i-1][5]\n        grid[i][6] = grid[i-1][6]\n        grid[i][7] = grid[i-1][7]\n        grid[i][8] = grid[i-1][8]\n        grid[i][9] = grid[i-1][9]\n        grid[i][10] = grid[i-1][10]\n        grid[i][11] = grid[i-1][11]\n        grid[i][12] = grid[i-1][12]\n        grid[i][13] = grid[i-1][13]\n        grid[i][14] = grid[i-1][14]\n        grid[i][15] = grid[i-1][15]\n        grid[i][16] = grid[i-1][16]\n        grid[i][17] = grid[i-1][17]\n        grid[i][18] = grid[i-1][18]\n        grid[i][19] = grid[i-1][19]\n        grid[i][20] = grid[i-1][20]\n        grid[i][21] = grid[i-1][21]\n        grid[i][22] = grid[i-1][22]\n        grid[i][23] = grid[i-1][23]\n        grid[i][24] = grid[i-1][24]\n        grid[i][25] = grid[i-1][25]\n        grid[i][26] = grid[i-1][26]\n        grid[i][27] = grid[i-1][27]\n        grid[i][28] = grid[i-1][28]\n        grid[i][29] = grid[i-1][29]\n        grid[i][30] = grid[i-1][30]\n        grid[i][31] = grid[i-1][31]\n        grid[i][32] = grid[i-1][32]\n        grid[i][33] = grid[i-1][33]\n        grid[i][34] = grid[i-1][34]\n        grid[i][35] = grid[i-1][35]\n        grid[i][36] = grid[i-1][36]\n        grid[i][37] = grid[i-1][37]\n        grid[i][38] = grid[i-1][38]\n        grid[i][39] = grid[i-1][39]\n        grid[i][40] = grid[i-1][40]\n        grid[i][41] = grid[i-1][41]\n  "}, "1972": {"problem_id": 4333, "answer": "def sort_number(a):\n    b = sorted(a)\n    return [1] + b"}, "1973": {"problem_id": 4334, "answer": "def skiponacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return''.join(['skip' if i % 2 else 'accel' for i in range(n)])"}, "1974": {"problem_id": 4335, "answer": "def anagrams(word, words):\n    return [w for w in words if sorted(w) == sorted(word)]"}, "1975": {"problem_id": 4336, "answer": "def mem_alloc(banks):\n    seen, i, j = set(), 0, 0\n    while i < len(banks):\n        seen.add(j)\n        j += banks[i]\n        i, j = i+1, j+1\n    return len(seen)"}, "1976": {"problem_id": 4337, "answer": "def swap_head_tail(arr):\n    n = len(arr)\n    arr = arr[n//2:] + arr[:n//2]\n    return arr"}, "1977": {"problem_id": 4338, "answer": "def reverse_on_diagonals(matrix):\n    m, n = len(matrix), len(matrix[0])\n    for i in range(1, n):\n        matrix[i][i], matrix[n-i][n-i] = matrix[n-i][n-i], matrix[i][i]\n        matrix[i][n-i] = matrix[n-i][i]\n    return matrix"}, "1978": {"problem_id": 4339, "answer": "def roots(a,b,c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    elif d > 0:\n        return round(b/d, 2)\n    else:\n        return None"}, "1979": {"problem_id": 4340, "answer": "def shortest_time(speed):\n    from itertools import accumulate\n    return min(accumulate(''.join(sorted(speed)))[0], key=lambda x: abs(x[1]-x[0]))"}, "1980": {"problem_id": 4341, "answer": "def solve(a,b):\n    if a==0 or b==0:\n        return [a,b]\n    elif a%2==0 and b%2==0:\n        return [a//2,b//2]\n    else:\n        return solve(a%2,b%2)"}, "1981": {"problem_id": 4342, "answer": "def no_space(x):\n    #your code here\n    return ''.join(x.split())"}, "1982": {"problem_id": 4343, "answer": "def max_match(sentence):\n    s = sentence.lower()\n    words = []\n    for i in range(len(s)):\n        if s[i] in VALID_WORDS:\n            words.append(s[i])\n        else:\n            words.append(i+1)\n    return words"}, "1983": {"problem_id": 4344, "answer": "def rectangles(n, m):\n    return n*m"}, "1984": {"problem_id": 4345, "answer": "def buy_or_sell(pairs, fruit):\n    s = \"\"\n    for pair in pairs:\n        if fruit[0] == pair[1]:\n            s += \"buy\"\n        elif fruit[1] == pair[0]:\n            s += \"sell\"\n        else:\n            s += \"error\"\n    return [s, s, s]"}, "1985": {"problem_id": 4346, "answer": "def hidden(num):\n    d = {'a':6,'b':1,'d':7,'e':4,'i':3,'l':2,'m':9,'n':8,'o':0,'t':5}\n    return ''.join(sorted(d.get(i,0) for i in str(num)))"}, "1986": {"problem_id": 4347, "answer": "def are_equally_strong(yl, yr, fl, fr):\n    return sorted([yl, yr]) == sorted([fl, fr])"}, "1987": {"problem_id": 4348, "answer": "def calc_fuel(n):\n    l, blaze, coal, wood, stick = [0] * 11, [0] * 11, [0] * 11, [0] * 11, [0] * 11\n    for i in range(n):\n        l[i] += 800\n        blaze[i] += 120\n        coal[i] += 80\n        wood[i] += 15\n        stick[i] += 1\n    return {'lava': l[0], 'blaze rod': blaze[0], 'coal': coal[0], 'wood': wood[0],'stick': stick[0]}"}, "1988": {"problem_id": 4349, "answer": "def int_rac(n, guess):\n    # Brute force, iterate through all possibilities\n    # Look for a square root of n\n    # Look for a square root of n/2\n    # Look for a square root of n/2 - n/x\n    # Look for a square root of n/2 - n/x - 1\n    # Look for a square root of n/2 - n/x - 1 - x\n    # Look for a square root of n/2 - n/x - 1 - x - y\n    # Look for a square root of n/2 - n/x - 1 - x - y - z\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 4x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 5x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 6x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 7x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 8x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 9x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 10x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 11x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 12x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 13x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 14x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 15x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 16x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 17x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 18x\n    # Look for a square root of n/2 - n/x - 1 - x - y - z - 2x - y - z - 3x - y - z - 19x\n    # Look for a square root"}, "1989": {"problem_id": 4350, "answer": "def pre_fizz(n):\n    #your code here\n    return [i for i in range(1,n+1)]"}, "1990": {"problem_id": 4351, "answer": "from functools import reduce\ndef find_middle(string):\n    if isinstance(string,str):\n        return int(\"\".join(map(str,reduce(int.__mul__, filter(str.isdigit,string))))[1:].zfill(2)))\n    elif isinstance(string,list):\n        return int(\"\".join(map(str,reduce(int.__mul__, filter(str.isdigit,string))))[1:].zfill(2)))\n    else:\n        return -1"}, "1991": {"problem_id": 4352, "answer": "def encrypt(text, rule):\n    return ''.join([chr((ord(x) + rule) & 255) for x in text])"}, "1992": {"problem_id": 4353, "answer": "def could_be(original, another):\n    original = original.lower()\n    another = another.lower()\n    return all(re.match(r'(?i)[a-zA-Z]{1}(?i)[a-zA-Z]{1}', original) \\\n}, "1993": {"problem_id": 4354, "answer": "def padovan(n):\n    return 1 + padovan(n-2)"}, "1994": {"problem_id": 4355, "answer": ""}, "1995": {"problem_id": 4356, "answer": "from functools import reduce\ndef colorful(number):\n    s = str(number)\n    return len(s) == len(set(s))"}, "1996": {"problem_id": 4357, "answer": "def nth_smallest(arr, pos):\n    arr.sort()\n    return arr[pos-1]"}, "1997": {"problem_id": 4358, "answer": "import math\ndef ellipse_contains_point(f0, f1, l, p): \n    x = math.hypot(f0['x'] - p['x'], f1['x'] - p['x'])\n    y = math.hypot(f0['y'] - p['y'], f1['y'] - p['y'])\n    return x and y are ints"}, "1998": {"problem_id": 4359, "answer": "def cube_times(times):\n    return (round(sum(sorted(times)[1:-1])/3,2), min(times))"}, "1999": {"problem_id": 4360, "answer": "def get_score(n):\n    return 50 * n"}, "2000": {"problem_id": 4361, "answer": "from itertools import permutations\n\ndef next_perfectsq_perm(lower_limit, k):\n    l = []\n    for i in range(1, lower_limit + 1):\n        l.append(int(''.join(sorted(str(i)))) ** 2)\n        if '0' not in str(i):\n            l.append(i)\n    return max(l)"}, "2001": {"problem_id": 4362, "answer": "import re\ndef frogify(s):\n    return''.join(re.findall(r'[a-z]+', s, re.I))"}, "2002": {"problem_id": 4363, "answer": "def reverser(sentence):\n    return''.join(reverser(x) for x in sentence.split())"}, "2003": {"problem_id": 4364, "answer": "def odd_or_even(arr):\n    return \"even\" if sum(arr) % 2 == 0 else \"odd\""}, "2004": {"problem_id": 4365, "answer": "def is_isogram(string):\n    return len(string.lower()) == len(set(string.lower()))"}, "2005": {"problem_id": 4366, "answer": "def archers_ready(archers):\n    return all(n >= 5 for n in archers)"}, "2006": {"problem_id": 4367, "answer": "def area_or_perimeter(l, w):\n    if l == w:\n        return l*.5*w\n    else:\n        return 2*(l+w)"}, "2007": {"problem_id": 4368, "answer": "import math\ndef cost(mins):\n    return 30 if mins<60 else math.ceil(math.floor(mins/60))"}, "2008": {"problem_id": 4369, "answer": "def is_negative_zero(n):\n    return n == 0"}, "2009": {"problem_id": 4370, "answer": "def indices(n, d):\n    if n == 1:\n        return [[d]]\n    elif n == 2:\n        return [[d,d]]\n    else:\n        dp = [[0]*(d+1) for _ in range(n+1)]\n        for i in range(n):\n            dp[i][0] += dp[i].index(1)\n            dp[i][1] += dp[i].index(0)\n        return dp[1].copy()"}, "2010": {"problem_id": 4371, "answer": "def digits(num):\n    return [int(i) for i in str(num)]"}, "2011": {"problem_id": 4372, "answer": "def lostSheep(friday,saturday,total):\n    return total - sum(friday) - sum(saturday)"}, "2012": {"problem_id": 4373, "answer": "def count_smileys(arr):\n    return len([i for i in arr if i.isnocode()])"}, "2013": {"problem_id": 4374, "answer": "def did_we_win(plays):\n    yds = 0\n    for play in plays:\n        if play[0] == \"run\":\n            yds += play[1]\n        elif play[0] == \"pass\":\n            yds -= play[1]\n        elif play[0] == \"sack\":\n            yds -= play[1]\n        elif play[0] == \"turnover\":\n            return False\n        else:\n            return True\n    return yds > 10"}, "2014": {"problem_id": 4375, "answer": "def get_planet_name(id):\n    # This doesn't work; Fix it!\n    name=\"\"\n    if id == 1:\n        name = \"Mercury\"\n    elif id == 2:\n        name = \"Venus\"\n    elif id == 3:\n        name = \"Earth\"\n    elif id == 4:\n        name = \"Mars\"\n    elif id == 5:\n        name = \"Jupiter\"\n    elif id == 6:\n        name = \"Saturn\"\n    elif id == 7:\n        name = \"Uranus\"\n    elif id == 8:\n        name = \"Neptune\"\n    else:\n        return \"Wrong planet id!\""}, "2015": {"problem_id": 4376, "answer": "def count_pal(n):\n    return \"\".join(sorted(str(n).lstrip('0'))) + \"\".join(sorted(str(n).rstrip('0'), reverse=True))"}, "2016": {"problem_id": 4377, "answer": "def solve(a, b):\n    alice = sum(x > y for x, y in zip(a, b))\n    bob = sum(x < y for x, y in zip(a, b))\n    return '{}, {}: '.format(alice, bob)"}, "2017": {"problem_id": 4378, "answer": "def find_spaceship(astromap):\n    a = 0\n    for i in range(len(astromap)):\n        if a == 0:\n            a = i\n        elif a!= 0:\n            return \"Spaceship lost forever.\"\n    return \"Spaceship lost forever.\""}, "2018": {"problem_id": 4379, "answer": "def combine_names(f,l):\n    return f\"{f} {l}\""}, "2019": {"problem_id": 4380, "answer": "def remove_chars(s):\n    return ''.join(c for c in s if c.isalpha() or c.isspace() or c!=' ')"}, "2020": {"problem_id": 4381, "answer": "def min_unfairness(arr,k):\n    if k < 2:\n        return 0\n    arr.sort()\n    min_diff = arr[0]\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n        if min_diff == 0:\n            min_diff = arr[i]\n    return min_diff"}, "2021": {"problem_id": 4382, "answer": "import re\ndef uncollapse(digits):\n    return''.join(re.findall(r'(zero|one|two|three|four|five|six|seven|eight|nine)',digits))"}, "2022": {"problem_id": 4383, "answer": "def artificial_rain(garden):\n    r = 0\n    garden.insert(0, 0)\n    for i in range(1, len(garden)):\n        r += garden[i]\n        if r > garden[i-1]:\n            garden.insert(i, r)\n    return r"}, "2023": {"problem_id": 4384, "answer": "def fraction(a, b):\n    return f'{a // b}/{a}.{b // b}'"}, "2024": {"problem_id": 4385, "answer": "def generate_pairs(n):\n    return sorted([x for x in range(n) if x not in '0123456789'], key=lambda x: x[1])"}, "2025": {"problem_id": 4386, "answer": "def is_in_middle(s):\n    return 'abc' in s"}, "2026": {"problem_id": 4387, "answer": "def sum_no_duplicates(l):\n    return sum(n for n in l if n not in l)"}, "2027": {"problem_id": 4388, "answer": "def change_case(identifier, targetCase):\n    if '-' in identifier:\n        return ''.join(sorted(identifier.lower().split('-')[1:]))\n    elif '-' in identifier.lower():\n        return '-'.join(sorted(identifier.lower().split('-')[1:]))\n    elif '-' in identifier.lower().replace('-',''):\n        return '-'.join(sorted(identifier.lower().split('-')[1:]))\n    elif '-' in identifier.lower().replace('-', ''):\n        return '-'.join(sorted(identifier.lower().split('-')[1:]))\n    else:\n        return None"}, "2028": {"problem_id": 4389, "answer": "def profitLoss(records):\n    return round(sum(price * profit / 100.0 for price in records), 2)"}, "2029": {"problem_id": 4390, "answer": "def fly_by(lamps, drone):\n    return 'o' * len(lamps) + 'x' * len(drone)"}, "2030": {"problem_id": 4391, "answer": ""}, "2031": {"problem_id": 4392, "answer": "def find_lowest_int(k):\n    return next(n for n in range(1, k + 1) if sorted(str(n)) == sorted(str(n * k)))"}, "2032": {"problem_id": 4393, "answer": "from collections import Counter\n\ndef repeat_sum(l):\n    return sum(n for n in l if Counter(l).most_common(2)[0] <= 1)"}, "2033": {"problem_id": 4394, "answer": "def men_still_standing(cards):\n    A=\"\".join(c for c in cards if c[0]==\"A\")\n    B=\"\".join(c for c in cards if c[0]==\"B\")\n    if len(A)<7 or len(B)<7:\n        return (11,11)\n    elif A[0]==\"B\":\n        return (8,7)\n    else:\n        return (11,8)"}, "2034": {"problem_id": 4395, "answer": "def next_higher(value):\n    bits = bin(value).count('1')\n    return bits.bit_length()"}, "2035": {"problem_id": 4396, "answer": "def freq_seq(s, sep):\n    return sep.join([str(s.count(c)) for c in s])"}, "2036": {"problem_id": 4397, "answer": "def is_thue_morse(seq):\n    n = len(seq)\n    return all(bin(x).count('1')%2==0 for x in seq)"}, "2037": {"problem_id": 4398, "answer": "def elevator_distance(array):\n    return sum(abs(floordist(x)-floordist(y)) for x,y in zip(array, array[1:]))"}, "2038": {"problem_id": 4399, "answer": "def fold_cube(nums):\n    x = 0\n    y = 0\n    z = 0\n    for i in nums:\n        if i == x:\n            x += 1\n        elif i == y:\n            y += 1\n        elif i == z:\n            z += 1\n        else:\n            return False\n    return x == y == z"}, "2039": {"problem_id": 4400, "answer": "def minimum_steps(numbers, value):\n    lst = sorted(numbers)\n    k = value\n    i = 0\n    while k >= lst[i]:\n        k -= lst[i]\n        i += 1\n    return i"}, "2040": {"problem_id": 4401, "answer": "def you_are_a_cube(cube):\n    return round(cube ** 0.5, 0)"}, "2041": {"problem_id": 4402, "answer": "def solve(st):\n    return ''.join(sorted(st)) in 'abcdefghijklmnopqrstuvwxyz'"}, "2042": {"problem_id": 4403, "answer": "def switch_endian(n, bits):\n    if bits == 8:\n        return int(''.join(chr(n+8) for ch in range(0, bits)), 16)\n    elif bits == 16:\n        return int(''.join(chr(n+8) for ch in range(0, bits)), 16)\n    elif bits == 32:\n        return int(''.join(chr(n+8) for ch in range(0, bits)), 16)\n    else:\n        return None"}, "2043": {"problem_id": 4404, "answer": "def compare(s1, s2):\n    if s1[-1] == s2[-1]:\n        return 0\n    elif s1[-1] < s2[-1]:\n        return 1\n    else:\n        return -1"}, "2044": {"problem_id": 4405, "answer": "def is_palindrome(string):\n    string = str(string)\n    return string[::-1] == string"}, "2045": {"problem_id": 4406, "answer": "def tram(stops, descending, onboarding):\n    n = 0\n    for i in range(stops):\n        n += (descending[i] - onboarding[i])\n    return n"}, "2046": {"problem_id": 4407, "answer": "def no_ifs_no_buts(a, b):\n    return [\"{} is smaller than {}\".format(a,b) if a < b else \"is greater than {}\".format(a,b) if a > b else \"is equal to {}\".format(a,b)]"}, "2047": {"problem_id": 4408, "answer": "def yoga(classroom, poses):\n    return sum(sorted(yoga(x,y) for x in classroom for y in x))"}, "2048": {"problem_id": 4409, "answer": "def noonerize(numbers):\n    try:\n        return abs(int(str(numbers[0])[1:].lstrip('0')) - int(str(numbers[1])[1:].lstrip('0')))\n    except:\n        return 'invalid array'"}, "2049": {"problem_id": 4410, "answer": "from math import floor, log10\n\n\ndef count_sixes(n):\n    return floor(log10(n) + 0.5)"}, "2050": {"problem_id": 4411, "answer": "def find_missing_number(numbers):\n    return sum(x for x in numbers if x!=numbers[-1])"}, "2051": {"problem_id": 4412, "answer": "def find(n,z):\n    d = {'0' : 0, '1' : 1, '2' : 2, '3' : 3}.get\n    nums = [d(x) for x in str(n)]\n    nums.sort()\n    nf = n + z\n    while nf < n:\n        if nf in d:\n            nf = d[nf]\n        else:\n            nf += z\n    return nf"}, "2052": {"problem_id": 4413, "answer": "def split_odd_and_even(n):\n    return [int(i) for i in str(n)]"}, "2053": {"problem_id": 4414, "answer": "def compare_versions(version1, version2):\n    return any([int(x) > int(y) for x, y in zip(version1, version2)])"}, "2054": {"problem_id": 4415, "answer": "from collections import Counter\nfrom functools import reduce\nfrom operator import floordiv\nfrom math import gcd\nfrom itertools import combinations\nfrom bisect import bisect_left, bisect_right\n\ndef proc_arr(arr):\n    arr = [int(''.join(s)) for s in arr]\n    l = len(arr)\n    c = Counter(arr)\n    return [reduce(floordiv, c.values(), 1) for _ in range(l)]"}, "2055": {"problem_id": 4416, "answer": "def loose_change(cents):\n    coins = {0:0, 1:0, 5:0, 10:0, 25:0}\n    if cents < 0: cents = 0\n    coins[cents] = min(coins[cents] + coins[cents // 25], coins[cents // 10] + coins[cents // 5] + coins[cents // 1])\n    return coins"}, "2056": {"problem_id": 4417, "answer": "from itertools import count\nsolve=lambda a,b:sum(1 for i in count(a) if i==1)<50000"}, "2057": {"problem_id": 4418, "answer": "def get_function(s):\n    return f'{s[0] - s[4]:+d}' if s[0] - s[4] in [0, 1, 2, 3] else 'Non-linear sequence'"}, "2058": {"problem_id": 4419, "answer": ""}, "2059": {"problem_id": 4420, "answer": "def prime_factors(n):\n    if n == 2:\n        return [1]\n    elif n % 2 == 0:\n        return [2]\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            cnt += 1\n            n //= 2\n        if cnt > 1:\n            return [2] + prime_factors(n)\n        else:\n            return [3]"}, "2060": {"problem_id": 4421, "answer": "import re\ndef to_seconds(time):\n    if time == \"\":\n        return 0\n    elif re.match(r\"\\S+$\", time):\n        return int(time)\n    else:\n        return None"}, "2061": {"problem_id": 4422, "answer": "def jumbled_string(s, n):\n    l = [i for i in range(1, n)]\n    l.extend(s[::2])\n    l.extend(s[1::2])\n    return ''.join(l)"}, "2062": {"problem_id": 4423, "answer": "def ball_probability(balls):\n    bag, b = balls.copy(), True\n    for i in balls:\n        if b:\n            bag.extend(i)\n        else:\n            bag.remove(i)\n    return round(sum(bag) / len(bag), 3)"}, "2063": {"problem_id": 4424, "answer": "def expression_matter(a, b, c):\n    return max(a+b+c, a*b*c, (a+b)*c, a*(b+c))"}, "2064": {"problem_id": 4425, "answer": "def mango(quantity, price):\n    return (quantity - quantity // 3) * price"}, "2065": {"problem_id": 4426, "answer": "def isMultiple(a, b, n):\n    res = 0\n    while a/b!= 1:\n        res += 1\n        a, b = b, a%b\n    return res % n == 0"}, "2066": {"problem_id": 4427, "answer": "from itertools import groupby\n\ndef sum_groups(arr):\n    return len(list(grp))"}, "2067": {"problem_id": 4428, "answer": "def sort_by_bit(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}, "2068": {"problem_id": 4429, "answer": "from collections import Counter\nLIMESTEP = [0]\ndef longest_palindrome(s):\n    c = Counter(s.lower())\n    for i in c:\n        LIMESTEP.append(LIMESTEP[i] + c[i])\n    return LIMESTEP[max(LIMESTEP)]"}, "2069": {"problem_id": 4430, "answer": "def vowel_2_index(string):\n    return ''.join(str(i) if i in 'aeiouAEIOU' else i for i in range(len(string)))"}, "2070": {"problem_id": 4431, "answer": "def decode(message):\n    return ''.join(c if c.islower() else 'z' for c in message.lower()).strip()"}, "2071": {"problem_id": 4432, "answer": "def can_jump(arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] < arr[i+1]:\n            i += 1\n        else:\n            return False\n    return True"}, "2072": {"problem_id": 4433, "answer": "from operator import __and__, __or__, __xor__\nfrom functools import reduce\n\ndef logical_calc(array, op):\n    return reduce(__and__, array) | reduce(__or__, array) | reduce(__xor__, array)"}, "2073": {"problem_id": 4434, "answer": "def first_non_repeated(s):\n    return next((c for c in s if s.count(c) == 1), None)"}, "2074": {"problem_id": 4435, "answer": "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\ndef has_subpattern(s):\n    return reduce(gcd, Counter(s).values()) > 1"}, "2075": {"problem_id": 4436, "answer": "def S2N(m, n):\n    return sum(s * (2 ** i) for i, s in enumerate(reversed(bin(m))[2:].strip('0').split(' ')) if s)"}, "2076": {"problem_id": 4437, "answer": "def cookie(x):\n    return \"Who ate the last cookie? It was {}!\".format(\"Zach\" if type(x) == str else \"Monica\" if type(x) in (int, float) else \"the dog\" if type(x) == \"\".join(map(str, x)))"}, "2077": {"problem_id": 4438, "answer": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    return (max(x1, x2), min(y1, y2), max(z1, z2), min(x3, x2)).count(min(x1, x2)) + (max(y1, y2), min(z1, z2), max(x1, x3), min(y3, y2)).count(min(x1, x3)) + (max(z1, z3), min(x1, x3), min(y2, y3), min(x3, x2)).count(min(x1, x3))"}, "2078": {"problem_id": 4439, "answer": "def div_num(a, b):\n    return \"Error\" if a > b else min((n for n in range(a, b+1) if n==div_num(n, a)), default=0)"}, "2079": {"problem_id": 4440, "answer": "def validate_pin(pin):\n    return pin.isdecimal()"}, "2080": {"problem_id": 4441, "answer": "def chmod_calculator(perm):\n    return 'rwx'[perm.get('user') +'' + 'rw' + (perm.get('group') or '-').translate(str.maketrans('rwx','---'))]"}, "2081": {"problem_id": 4442, "answer": "def case_sensitive(s):\n    return [not s.islower(), [s.lower()]]"}, "2082": {"problem_id": 4443, "answer": "def max_ball(v0):\n    h = v0*10e-3*9.81/60.0\n    return h.is_integer()"}, "2083": {"problem_id": 4444, "answer": "def abundant_number(num):\n    return sum(i for i in range(1, num // 2 + 1) if num % i == 0) > num"}, "2084": {"problem_id": 4445, "answer": "import re\ndef is_haiku(text):\n    pattern = r'[aeiouy]\\w*\\b'\n    return bool(re.match(pattern, text))"}, "2085": {"problem_id": 4446, "answer": "def words_to_sentence(words):\n    return''.join(w for w in words)"}, "2086": {"problem_id": 4447, "answer": "def revamp(s):\n    return''.join(sorted(s.split(), key=lambda w: (sum(ord(c) for c in w), w)))"}, "2087": {"problem_id": 4448, "answer": "def get_derivative(s):\n    if s.isnumeric():\n        return f\"{s[0]*s[1]//abs(s[1])}x\"\n    elif s.isinstance(int):\n        return f\"{s[0]*s[1]//abs(s[1])}x\"\n    else:\n        return \"0x\""}, "2088": {"problem_id": 4449, "answer": "def solution(stones):\n    return sum(1 for i in range(len(stones)) for j in range(i+1,len(stones)+1))"}, "2089": {"problem_id": 4450, "answer": "def consecutive(arr):\n    return max(0, min(arr[-1]+arr[-2], len(arr)-1))"}, "2090": {"problem_id": 4451, "answer": "def golf_score_calculator(par, score):\n    return sum(int(s) - int(par[i]) for i,s in enumerate(score))"}, "2091": {"problem_id": 4452, "answer": "def maximum_product_of_parts(n):\n    n = str(n)\n    return max(int(n[:i])*int(n[i:j])*int(n[j:]) for i in range(1,len(n)+1) for j in range(i,len(n)+1))"}, "2092": {"problem_id": 4453, "answer": "def shortest_steps_to_num(num):\n    return 2 + shortest_steps_to_num(num >> 1) + shortest_steps_to_num(num >> 2)"}, "2093": {"problem_id": 4454, "answer": "def presses(phrase):\n    button_presses = 0\n    for letter in phrase:\n        button_presses += (1 + ord(letter.lower())-96)\n        button_presses += ord(letter.upper()) - 96\n    return button_presses"}, "2094": {"problem_id": 4455, "answer": "def sumin(n):\n    return n * (n + 1) * (2 * n + 1) // 6"}, "2095": {"problem_id": 4456, "answer": "def flatten_me(lst):\n    return [el if isinstance(el, list) else el for el in lst]"}, "2096": {"problem_id": 4457, "answer": "def mega_mind(hp, dps, shots, regen):\n    if hp <= 0 or abs(hp) < shots: return -1\n    if dps <= 0 or abs(hp) < shots * regen: return -1\n    return max(0, shots * (hp - dps) + max(0, hp - dps))"}, "2097": {"problem_id": 4458, "answer": "def time_correct(t):\n    if t == \"\":\n        return t\n    elif len(t)!= 8 or len(t)!= 9 or len(t)!= 10:\n        return None\n    t = t.split(\":\")\n    if len(t)!= 2 or t[0]!= \"00\" or t[1]!= \":\":\n        return None\n    try:\n        h, m, s = map(int, t[0].split(\":\"))\n    except:\n        return None\n    try:\n        h, m, s = map(int, t[1].split(\":\"))\n    except:\n        return None\n    return \":\".join([str(h % 12) + \":\" + str(m % 60) + \":\" + str(s % 60) for h in range(1, 12) for m in range(1, 60) for s in range(1, 60)])"}, "2098": {"problem_id": 4459, "answer": "def nth_even(n):\n    return 2 * (n - 1)"}, "2099": {"problem_id": 4460, "answer": "def whatday(num):\n    d = {1:'Sunday', 2:'Monday', 3:'Tuesday', 4:'Wednesday', 5:'Thursday', 6:'Friday', 7:'Saturday'}\n    return d.get(num, 'Wrong, please enter a number between 1 and 7')"}, "2100": {"problem_id": 4461, "answer": "def boxes_packing(l, w, h):\n    return all(sorted(l, reverse=True) + sorted(w, reverse=True) + sorted(h, reverse=True) == l + w + h)"}, "2101": {"problem_id": 4462, "answer": "def adjacent_element_product(array):\n    max = array[0]*array[1]\n    for i in range(1,len(array)-1):\n        if array[i]*array[i+1]>max:\n            max = array[i]*array[i+1]\n    return max"}, "2102": {"problem_id": 4463, "answer": "def alphabet_position(text):\n    return''.join(str(ord(c) - 96) for c in text.lower() if c.isalpha())"}, "2103": {"problem_id": 4464, "answer": "def feast(beast, dish):\n    return True if beast[0] == dish[0] and beast[len(beast)-1] == dish[len(dish)-1] else False"}, "2104": {"problem_id": 4465, "answer": "def super_size(n):\n    a = list(str(n))\n    a.sort(reverse=True)\n    return int(\"\".join(a))"}, "2105": {"problem_id": 4466, "answer": ""}, "2106": {"problem_id": 4467, "answer": "def remember(str_):\n    return [c for c in str_ if str_.count(c) > 1]"}, "2107": {"problem_id": 4468, "answer": "def simplify(n):\n    return '+'.join(str(int(x)) for x in f'{n:,.0f}' if n>0)"}, "2108": {"problem_id": 4469, "answer": "def is_narcissistic(i):\n    return sum(int(d) ** len(str(i)) for d in str(i)) == i"}, "2109": {"problem_id": 4470, "answer": "def nb_year(p0, percent, aug, p):\n    year = 0\n    while p0 < p:\n        year += 1\n        p0 += aug\n        percent *= 1.0 + 0.01\n    return year"}, "2110": {"problem_id": 4471, "answer": "def lamps(a):\n    cnt = 0\n    for i in a:\n        if i == 1:\n            cnt += 1\n        else:\n            cnt += 2\n    return min(cnt, len(a))"}, "2111": {"problem_id": 4472, "answer": "def bear_fur(bears):\n    return {'black' : 'dark brown',\n            'brown' : 'brown',\n            'white' : 'grey',\n            'black' : 'black',\n            'white' : 'light brown',\n            'yellow' : 'unknown'}.get(s.lower(), 'unknown')"}, "2112": {"problem_id": 4473, "answer": ""}, "2113": {"problem_id": 4474, "answer": "def start_smoking(bars,boxes):\n    n = bars*10 + boxes*18\n    return n"}, "2114": {"problem_id": 4475, "answer": "def find(seq):\n    return sum(a + a for a in seq)"}, "2115": {"problem_id": 4476, "answer": "from bisect import bisect_left as bisect\nfrom itertools import accumulate\n\nsieve = [1]\nfor i in range(2, 1000000):\n    if sieve[-1]:\n        for j in range(i**.5, len(sieve), i):\n            sieve.append(0)\np = [i for i in range(1, 1000000) if sum(map(int, str(i))) % 2 == 0]\nf = lambda n: sorted(p[bisect(p, n)], key=lambda x: abs(x - len(reversed(x[0])))).pop()"}, "2116": {"problem_id": 4477, "answer": "def reverse_number(n):\n    return int(str(abs(n))[::-1])"}, "2117": {"problem_id": 4478, "answer": "def sum_to_infinity(sequence):\n    r = sequence[1]/sequence[0]\n    return round(r, 3) if abs(r) < 1 else \"No Solutions\""}, "2118": {"problem_id": 4479, "answer": "def elements_sum(arr, d=0):\n    return sum(elements_sum(e, d) for e in arr if e[0] == arr[0][0])"}, "2119": {"problem_id": 4480, "answer": "def parse(data):\n    v = 0\n    c = 'i'\n    s ='s'\n    o = []\n    for c in data:\n        v += 1 if c == 'i' else -1 if c == 'd' else s.index(c)**2"}, "2120": {"problem_id": 4481, "answer": "def not_visible_cubes(n):\n    return sum(1 for i in range(n) if i!= cube.index(min(cube)))"}, "2121": {"problem_id": 4482, "answer": "def even_numbers_before_fixed(sequence, fixed_element):\n    cnt = 0\n    for i in sequence:\n        if i % 2 == 0:\n            cnt += 1\n            if fixed_element in sequence:\n                return cnt\n    return -1"}, "2122": {"problem_id": 4483, "answer": "FRUIT_NAMES = {'blueberry', 'pear', 'durian', 'ginkgo', 'peach', 'apple', 'cantaloupe', 'fig','mangosteen', 'watermelon', 'pineapple', 'cherry', 'pomegranate', 'carambola', 'hawthorn', 'persimmon', 'apricot', 'plum', 'litchi','mango', 'jujube', 'lemon', 'orange', 'tomato', 'banana', 'coconut', 'grape', 'pitaya'}\ncut_fruits=lambda f:__import__('operator').mul.reduce(lambda a,b:a*b,f)"}, "2123": {"problem_id": 4484, "answer": "def calculate(num1, operation, num2):\n    if operation == \"+\":\n        return(num1+num2)\n    elif operation == \"-\":\n        return(num1-num2)\n    elif operation == \"*\":\n        return(num1*num2)\n    elif operation == \"/\":\n        return(num1/num2)\n    else:\n        return(None)"}, "2124": {"problem_id": 4485, "answer": "def HQ9(code):\n    if code == 'H':\n        return 'Hello World!'\n    elif code == 'Q':\n        return code\n    elif code == '9':\n        return '\\n'.join([f\"{x} bottles of beer on the wall, {x} bottles of beer.\\nTake one down and pass it around, {x - 1} bottles of beer on the wall.\" for x in range(99, 2, -1)])"}, "2125": {"problem_id": 4486, "answer": "def repeat_it(string,n):\n    return ''.join(string for i in range(n)) if type(string) is str else 'Not a string'"}, "2126": {"problem_id": 4487, "answer": "def order_type(arr):\n    d = {i:1 for i in arr}\n    for i in arr:\n        if len(str(i))>len(str(i)):\n            d[i] = -1\n        elif len(str(i))==len(str(i)):\n            d[i] = 1\n        else:\n            d[i] = arr.count(str(i))\n    return \"Constant\" if len(arr)==len(set(arr)) else \"Increasing\" if d[arr.pop()]==1 else \"Decreasing\""}, "2127": {"problem_id": 4488, "answer": "from collections import Counter\ndef bucketize(*arr):\n    c = Counter(arr)\n    return [n for n in sorted(c.keys()) if c[n] == None]"}, "2128": {"problem_id": 4489, "answer": "def sum_consecutives(s):\n    return [sum(s[i] for i in range(len(s)) if s[i] == s[i+1]) for i in range(len(s))]"}, "2129": {"problem_id": 4490, "answer": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef f(n):\n    if isinstance(n, int) and n&1:\n        return n//2\n    elif isinstance(n, int) and n&1:\n        return 3*f(n//2) + 1\n    else:\n        return 1"}, "2130": {"problem_id": 4491, "answer": "def solve(a,b):\n    return \"\".join(c for c in a if c not in b)"}, "2131": {"problem_id": 4492, "answer": "def hex_color(codes):\n    r, g, b = [int(c) for c in codes.split()]\n    if r == g == b:\n        return 'black'\n    elif r > g:\n        return'red'\n    elif r < g:\n        return 'green'\n    elif b > g:\n        return 'yellow'\n    elif b < g:\n        return 'blue'\n    elif r > b:\n        return'magenta'\n    elif r < b:\n        return 'cyan'"}, "2132": {"problem_id": 4493, "answer": "def get_last_digit(index):\n    n = 1\n    a = 1\n    b = 1\n    while index > 0:\n        n, a, b = n + a, b + b, a + b\n        index -= 1\n    return n"}, "2133": {"problem_id": 4494, "answer": "def points(games):\n    points = 0\n    for i in games:\n        if i[0] > i[2]:\n            points += 3\n        elif i[0] == i[2]:\n            points += 1\n    return points"}, "2134": {"problem_id": 4495, "answer": "def am_I_afraid(day,num):\n    return {\n        \"Monday\": 12,\n        \"Tuesday\": \"greater than 95\",\n        \"Wednesday\": 34,\n        \"Thursday\": 0,\n        \"Friday\": numbers_divisible_by_2,\n        \"Saturday\": 56,\n        \"Sunday\": 666 or -666\n    }[num]"}, "2135": {"problem_id": 4496, "answer": "def hamming_distance(a, b):\n    return sum(x!= y for x, y in zip(a, b))"}, "2136": {"problem_id": 4497, "answer": "def positive_to_negative(binary):\n    l = len(binary)\n    res = 0\n    for i in range(l):\n        res = binary[i] ^ (1 << (l - i - 1))\n    return res"}, "2137": {"problem_id": 4498, "answer": "def solution(roman):\n    d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    return sum(d.get(i,0) for i in roman)"}, "2138": {"problem_id": 4499, "answer": "def convergents_of_e(n):\n    s = 2\n    for i in range(1, n+1):\n        s = s*i\n        s = s+1\n    return sum(int(d) for d in str(s))"}, "2139": {"problem_id": 4500, "answer": "def define_suit(card):\n    d = {'C':'clubs', 'D':'diamonds', 'H':'hearts', 'S':'spades'}\n    return d.get(card[-1])"}, "2140": {"problem_id": 4501, "answer": "def inside_out(s):\n    return''.join(reversed(sorted(s.split(), key=lambda x: (x[0] + x[1], x[0])))[::-1])"}, "2141": {"problem_id": 4502, "answer": "def tribonacci(signature,n):\n    s = signature[:n]\n    return [s[i] + s[i+1] + s[i+2] for i in range(3, len(s), 2)]"}, "2142": {"problem_id": 4503, "answer": "def f(n):\n    return [1, 1] + f(n-1)"}, "2143": {"problem_id": 4504, "answer": "def share_price(invested, changes):\n    return '{:.2f}'.format(float(invested / 100.0) * 100.0 / changes[0])"}, "2144": {"problem_id": 4505, "answer": "def get_matrix(n):\n    return [[1]*n for _ in range(n)]"}, "2145": {"problem_id": 4506, "answer": "def geometric_sequence_elements(a, r, n):\n    return ', '.join(str(a*r**i) for i in range(n))"}, "2146": {"problem_id": 4507, "answer": "def endless_string(string, start, length):\n    s = string.replace(' ', '')\n    i = start\n    while i < len(s):\n        s = s[i:] + s[:i]\n        i += length\n    return s"}, "2147": {"problem_id": 4508, "answer": "from itertools import permutations\n\ndef VampireNumber(k):\n    return next(permutations(range(1, int(k**0.5)+1), 2) for _ in range(k))"}, "2148": {"problem_id": 4509, "answer": "def validate_rhythm(meter, score):\n    score = score.replace('|', '')\n    if meter[0] not in [1, 2, 4, 8]:\n        return 'Invalid rhythm'\n    anacrusis = meter[1] * 8 + meter[2] * 4 + meter[3] * 2\n    bars = score.split('|')\n    if all(b.isdigit() for b in bars):\n        return 'Valid rhythm'\n    elif min(bars) == max(bars):\n        return 'Invalid rhythm'\n    else:\n        return 'Valid rhythm with anacrusis'"}, "2149": {"problem_id": 4510, "answer": "def to_underscore(string):\n    return ''.join([i.lower() if i.isalpha() else i for i in string])"}, "2150": {"problem_id": 4511, "answer": "def permute_a_palindrome(s):\n    return len(s)%2==0"}, "2151": {"problem_id": 4512, "answer": "def find_num(n):\n    seq = [0]\n    for i in range(n):\n        seq.append(seq[-1] + 1)\n        if seq[-1] not in seq:\n            seq.append(seq[-1])\n    return seq[n]"}, "2152": {"problem_id": 4513, "answer": "def num_obj(s):\n    return [{str(i) : chr(i)} for i in s]"}, "2153": {"problem_id": 4514, "answer": "def int_to_negabinary(i):\n    return '{:b}'.format(i) if i.isdigit() else '{:b}'.format(-i)"}, "2154": {"problem_id": 4515, "answer": "def diff(arr):\n    mx = 0\n    mn = 0\n    for i in arr:\n        if i[0] - mx > mn:\n            mx = i[0]\n            mn = i[1]\n        elif i[0] - mx < mn:\n            mn = i[0]\n            mx = i[1]\n    return mx"}, "2155": {"problem_id": 4516, "answer": "def multiple(x):\n    return \"Bang\" if x%3==0 else \"Boom\" if x%5==0 else \"BangBoom\""}, "2156": {"problem_id": 4517, "answer": "from collections import Counter\ndef odd_one_out(s):\n    return [c for c in s if Counter(s[i:i+3]).most_common()[0][1]%2==0]"}, "2157": {"problem_id": 4518, "answer": "import re\ndef wheres_wally(string):\n    return next((i for i,c in enumerate(string) if c.isalnum()), -1)"}, "2158": {"problem_id": 4519, "answer": "def max_number(n):\n    return int(''.join(sorted(list(str(n)),reverse=True)))"}, "2159": {"problem_id": 4520, "answer": "def max_product(a):\n    mx = max(a)\n    a.remove(mx)\n    return a[0] * a[1]"}, "2160": {"problem_id": 4521, "answer": "def numberOfSteps(steps, m):\n    if steps<1:\n        return -1\n    elif steps%2==0:\n        return steps//2+1\n    else:\n        return max(steps//2+1,numberOfSteps(steps-m,m))"}, "2161": {"problem_id": 4522, "answer": "def side_len(x, y):\n    return [i for i in range(y-x+1, max(y-x+2, 0)) if i*(i-1)/2 <= x]"}, "2162": {"problem_id": 4523, "answer": "def digit_sum(n):\n    \"\"\"Returns the sum of digits of n.\"\"\"\n    return sum(int(d) for d in str(n))\n\ndef solve(n):\n    \"\"\"Solve n. Returns the largest integer that is <= n and has the highest digit sum.\"\"\"\n    if n < 10:\n        return n\n    \n    digits = digit_sum(n)\n    \n    if digits > n:\n        return n - digits\n    \n    return n"}, "2163": {"problem_id": 4524, "answer": "from itertools import permutations\ndef permutation_average(n):\n    perms = [int(''.join(p)) for p in permutations(str(n))]\n    return round(sum(perms) / len(perms))"}, "2164": {"problem_id": 4525, "answer": "def check_challenge(pledged, current, month):\n    if pledged == current:\n        return \"Challenge is completed.\"\n    elif pledged == current + 1:\n        return \"You are on track.\"\n    elif pledged == current + 2:\n        return \"You are 2 behind schedule.\"\n    elif pledged == current + 3:\n        return \"You are 3 ahead of schedule.\"\n    elif pledged == current + 4:\n        return \"You are 4 behind schedule.\"\n    elif pledged == current + 5:\n        return \"You are 5 ahead of schedule.\"\n    elif pledged == current + 6:\n        return \"You are 6 ahead of schedule.\"\n    elif pledged == current + 7:\n        return \"You are 7 behind schedule.\"\n    elif pledged == current + 8:\n        return \"You are 8 ahead of schedule.\""}, "2165": {"problem_id": 4526, "answer": "def day_plan(hours, tasks, duration):\n    d = duration*60\n    if tasks == 0:\n        return [duration,round(d,1)]\n    elif tasks == 1:\n        return [duration,round(d,1)]\n    else:\n        break_time = min(tasks,hours)\n        d += (duration-break_time)\n        return [duration,round(d,1)]"}, "2166": {"problem_id": 4527, "answer": "def winner(deck_steve, deck_josh):\n    x = 0\n    y = 0\n    for i in range(len(deck_steve)):\n        if deck_steve[i] == deck_josh[i]:\n            x += 1\n        elif deck_steve[i] > deck_josh[i]:\n            y += 1\n    if x > y:\n        return \"Steve wins {} to {}\".format(x,y)\n    elif x == y:\n        return \"Josh wins {} to {}\".format(x,y)\n    else:\n        return \"Tie\""}, "2167": {"problem_id": 4528, "answer": "def my_languages(results):\n    return [lang for lang in sorted(results, key=lambda x: results[x]) if results[lang] >= 60]"}, "2168": {"problem_id": 4529, "answer": "def truncate_string(s,n):\n    if n>=len(s):\n        return s\n    elif n<=3:\n        return s[:n]+'...'\n    else:\n        return s[:n-3]+'...'"}, "2169": {"problem_id": 4530, "answer": "def consonant_count(s):\n    return sum(1 for c in s if c.isalpha())"}, "2170": {"problem_id": 4531, "answer": "def to_binary(n):\n    return bin(n & 0xffffffffffffffff)"}, "2171": {"problem_id": 4532, "answer": "def validate_code(code):\n    return '1' in str(code)"}, "2172": {"problem_id": 4533, "answer": "def harmon_pointTrip(xA, xB, xC):\n    return round(xA*xC + xB*xC - xA*xB, 4)"}, "2173": {"problem_id": 4534, "answer": "def find_next_power(val, pow_):\n    return pow_**val"}, "2174": {"problem_id": 4535, "answer": "def zfunc(s):\n    if not s: return []\n    n = len(s)\n    z = [0] * n\n    for i in range(n):\n        z[i] = z[i-1] + 1\n        if s[i:i+n-1] == s[i:i+n-1:].ljust():\n            z[i] = z[i-1] + 1\n    return z"}, "2175": {"problem_id": 4536, "answer": "def capitals_first(text):\n    return''.join(sorted(filter(lambda w: w[0].isalpha() and w[0] not in '0123456789', text.split()), key=lambda w: w[0].islower()))"}, "2176": {"problem_id": 4537, "answer": "def bin2gray(bits):\n    \"\"\"Gray code is a form of binary encoding where transitions between consecutive numbers differ by only one bit. This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs. It is also useful for generating inputs for Karnaugh maps.\n    :param bits: a list of 2 ints\n    :return: a list of 2 ints\n    \"\"\"\n    gray = [0] * 2\n    for i in range(len(bits)):\n        gray[i] = bits[i] ^ (1 << (i + 1))\n    return gray"}, "2177": {"problem_id": 4538, "answer": "def reverse_fun(n):\n    return ''.join(reversed(n))"}, "2178": {"problem_id": 4539, "answer": "def hop_across(lst):\n    res = 0\n    i = 0\n    while i < len(lst):\n        res += sum(lst[i:i+len(lst)]).count(lst[i])\n        i += len(lst)\n    return res"}, "2179": {"problem_id": 4540, "answer": "def prime_or_composite(n):\n    if n < 2:\n        return \"Probable Prime\"\n    elif n == 2:\n        return \"Composite\"\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return \"\".join(str(i) for i in range(2, n))\n        return \"Composite\""}, "2180": {"problem_id": 4541, "answer": "def array_operations(a, k):\n    m = max(a)\n    return [x for x in a if x!= m] + [m - x for x in a]"}, "2181": {"problem_id": 4542, "answer": "def caesar_crypto_encode(text, shift):\n    if text.strip()!='':\n        return ''\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    shift = (shift % 52) * 52 + (shift // 52)\n    return ''.join(alphabets[(ord(c) - shift) % 52] for c in text.lower() if c.isalpha())"}, "2182": {"problem_id": 4543, "answer": "def shades_of_grey(n):\n    return ['#'+chr(hex(n)[2:].zfill(2)) for n in range(1,min(255,n+1)//16)]"}, "2183": {"problem_id": 4544, "answer": "def factor_sum(n):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317]\n    s = 0\n    for i in primes:\n        s += i\n        if s == n:\n            return s\n    return s"}, "2184": {"problem_id": 4545, "answer": "from math import atan2, degrees2radians\n\ndef get_score(x,y):\n    r = degrees2radians(atan2(y, x))\n    return '%s%s' % ('DB' if r < 12.7 else 'SB', 'T' if r < 31.8 else 'D')"}, "2185": {"problem_id": 4546, "answer": "def find_children(dancing_brigade):\n    return ''.join(sorted(dancing_brigade, key=lambda c: (c.lower(), c)))"}, "2186": {"problem_id": 4547, "answer": "def more_zeros(s):\n    return [x for x in s if bin(ord(x))[2:].count('0') > bin(ord(x))[2:].count('1')]"}, "2187": {"problem_id": 4548, "answer": "def SumEvenFibonacci(limit):\n    a, b, res = 1, 2, 0\n    while a <= limit:\n        a, b = b, a + b\n        res += a\n    return res"}, "2188": {"problem_id": 4549, "answer": ""}, "2189": {"problem_id": 4550, "answer": "from datetime import timedelta, datetime\ndef seconds_ago(s,n):\n    return str(datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\") - timedelta(seconds=n))"}, "2190": {"problem_id": 4551, "answer": "def score_matrix(matrix):\n    return sum(a*(-1)**(i+1) for i,a in enumerate(matrix))"}, "2191": {"problem_id": 4552, "answer": "def rankings(arr):\n    return [sorted(arr)[0]]"}, "2192": {"problem_id": 4553, "answer": "def find_short(s):\n    return min(len(s.split()) for i in range(len(s)), key=len)"}, "2193": {"problem_id": 4554, "answer": "from collections import Counter\n\ndef play_if_enough(hand, play):\n    c = Counter(hand)\n    return (True, \"\".join(c.values()))"}, "2194": {"problem_id": 4555, "answer": "from operator import mul\nfrom functools import reduce\nreduce(mul, map(chr, \"\".join(sorted(filter(str.isalnum, s)), \"0123456789\")), 0)"}, "2195": {"problem_id": 4556, "answer": "from itertools import groupby\n\ndef count_me(data):\n    return ''.join(f'{len(list(g))}' for k, g in groupby(data)) if data.isdecimal() else ''"}, "2196": {"problem_id": 4557, "answer": "def row_weights(array):\n    return sum(array[i] for i in range(0,len(array),2)), sum(array[i] for i in range(1,len(array),2))"}, "2197": {"problem_id": 4558, "answer": "def penaltyShots(shots, score):\n    if shots > 5:\n        return 2\n    elif shots == 5:\n        return 0\n    elif abs(score[0] - score[1]) == abs(score[1] - score[0]):\n        return abs(score[0] - score[1])\n    else:\n        return -1"}, "2198": {"problem_id": 4559, "answer": "def ones_complement(binary_number):\n    return ''.join(['0' if b == '0' else '1' for b in binary_number])"}, "2199": {"problem_id": 4560, "answer": "def answer(question, information):\n    s =''.join(question.lower().split())\n    info = sorted(information, key=lambda x: x.lower())\n    return info[0] if len(info) > 0 else None"}, "2200": {"problem_id": 4561, "answer": "def solve(st):\n    return all(abs(ord(x) - ord(y)) in [0, 2] for x, y in zip(st, st[::-1]))"}, "2201": {"problem_id": 4562, "answer": "def snap(flash, turtle):\n    f,t = divmod(len(flash),2)\n    return [f+1,t+flash[f]] if t>tolist else snap(flash[f:],toselface)"}, "2202": {"problem_id": 4563, "answer": "def computer_to_phone(numbers):\n    return \"\".join(c.upper() if c.isalpha() else c for c in numbers)"}, "2203": {"problem_id": 4564, "answer": "def create_phone_number(n):\n    return ''.join([str(x) for x in n])"}, "2204": {"problem_id": 4565, "answer": "import re\ndef replace_dots(s):\n    return s.replace(\".\",\"-\")"}, "2205": {"problem_id": 4566, "answer": "def counting_valleys(s):\n    n = 0\n    for i in range(len(s)):\n        if s[i] == 'F':\n            n += 1\n        elif s[i] == 'U':\n            n += 2\n        elif s[i] == 'D':\n            n += 1\n    return n"}, "2206": {"problem_id": 4567, "answer": "def pillow(s):\n    return 'n' in s and 'B' in s"}, "2207": {"problem_id": 4568, "answer": "from functools import reduce\nfrom operator import mul\ndef find_min_max_product(arr, k):\n    if k>len(arr): return None\n    arr.sort()\n    l=reduce(mul,arr[:k])\n    r=reduce(mul,arr[k:])\n    return min(l,r),max(l,r)"}, "2208": {"problem_id": 4569, "answer": "def next_item(xs, item):\n    found = False\n    for x in xs:\n        if found:\n            return x\n        if item == x:\n            found = True"}, "2209": {"problem_id": 4570, "answer": "def clean_string(s):\n    return ''.join(c if c.isalpha() else '#' for c in s)"}, "2210": {"problem_id": 4571, "answer": "from math import log\nd = {\n    2: [1, 2],\n    3: [1, 3, 4],\n    4: [2, 3, 4],\n    5: [1, 2, 3, 4],\n    6: [1, 3, 5, 6],\n    7: [2, 3, 5, 6],\n    8: [1, 3, 5, 7],\n    9: [2, 3, 5, 7],\n    10: [1, 3, 5, 8],\n    11: [2, 3, 5, 8],\n    12: [1, 3, 6, 8],\n    13: [2, 3, 6, 8],\n    14: [1, 4, 6, 8],\n    15: [2, 4, 6, 8],\n    16: [1, 4, 7, 8],\n    17: [2, 4, 7, 8],\n    18: [1, 5, 7, 8],\n    19: [2, 5, 7, 8],\n    20: [1, 5, 8, 9],\n    21: [2, 5, 8, 9],\n    22: [1, 6, 8, 9],\n    23: [2, 6, 8, 9],\n    24: [1, 7, 8, 9],\n    25: [2, 7, 8, 9],\n    26: [1, 8, 9, 10]\n}\n\ndef decompose(num):\n    res = []\n    for k in range(1, len(d)):\n        num = num * pow(2, k)\n        res.append(num)\n        if num > 1:\n            break\n    i = 0\n    while i < len(res):\n        k = int(log(num, d[i]))\n        if k == 1:\n            res.append(d[i])\n            continue\n        i += 1\n    return res"}, "2211": {"problem_id": 4572, "answer": "import re\ndef max_consec_zeros(n):\n    return 'Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'.split()[max(map(len, re.findall(r'\\d{1,}', bin(int(n))[2:])))]"}, "2212": {"problem_id": 4573, "answer": "def over_the_road(address, n):\n    return 2*n + 1 - address"}, "2213": {"problem_id": 4574, "answer": "def build_a_wall(x=0, y=0):\n    if x not in (1, 2) or y not in (2, 3):\n        return \"Naah, too much...here's my resignation.\"\n    res = []\n    for i in range(x, y + 1):\n        res.append(\"|\".join(brick_symbols[i % len(brick_symbols)]) if i % 2 else brick_symbols[i % len(brick_symbols)])\n    return \"\\n\".join(res)"}, "2214": {"problem_id": 4575, "answer": "def smallest_integer(matrix):\n    n = 0\n    for i in matrix:\n        if i not in n:\n            n = i\n    return n"}, "2215": {"problem_id": 4576, "answer": "from fractions import gcd\ndef gcd_matrix(a,b):\n    return round(sum(gcd(x,y) for x,y in zip(a,b)), 3)"}, "2216": {"problem_id": 4577, "answer": "def debug(s):\n    return ''.join(s.replace('bugs', 'b') if 'bug' in s else s for s in s.split('bugs'))"}, "2217": {"problem_id": 4578, "answer": "def quidditch_scoreboard(teams, actions):\n    team1,team2 = teams.split(' vs ')\n    points1, points2 = 0,0\n    for action in actions.split(', '):\n        if action.find('Snitch')!= -1:\n            points1 += 150\n        elif action.find('goal')!= -1:\n            points1 += 10\n        elif action.find('foul')!= -1:\n            points2 -= 30\n        elif action.find('Caught')!= -1:\n            points2 -= 150\n    return''.join(f'{team1}: {points1}' for team1 in teams).strip(' ',1) +'vs'+''.join(f'{team2}: {points2}' for team2 in teams).strip(' ',1)"}, "2218": {"problem_id": 4579, "answer": "def pattern(n):\n    return \"\\n\".join([\"\".join([str(i) for i in range(n, n+2, 2)]).ljust(n, \"\") for n in range(1, n+1)])"}, "2219": {"problem_id": 4580, "answer": "def tiaosheng(failed_counter):\n    count = 0\n    for i in failed_counter:\n        count += i\n        if count >= 60:\n            return count"}, "2220": {"problem_id": 4581, "answer": "def are_similar(a, b):\n    return sorted(a) == sorted(b)"}, "2221": {"problem_id": 4582, "answer": "from collections import Counter\n\ndef group(arr):\n    return [\n        [k for k in Counter(arr).most_common(1) if k[0] == arr[0]]\n        for arr in sorted(arr, key=lambda k: arr.index(k))\n    ]"}, "2222": {"problem_id": 4583, "answer": "def draw_spider(leg_size, body_size, mouth, eye):\n    leg_sizes = ['^', '/\\\\', '/\u2572', '\u2571\u2572']\n    body_sizes = ['(', '((', '(()'].difference(leg_sizes) for _ in range(4))\n    eyes_sizes = ['^', 'oWo', '^', '^', '^']\n    return ''.join(['{} {}'.format(l,b) for l,b in zip(leg_sizes, body_sizes) if l!=b.lower()])"}, "2223": {"problem_id": 4584, "answer": "def invert(lst):\n    return list(map(lambda x: -x, lst))"}, "2224": {"problem_id": 4585, "answer": "def find(a, b, n):\n    s = str(a)\n    while len(s) < n:\n        s += str(b)\n        b += 1\n    return int(s[n])"}, "2225": {"problem_id": 4586, "answer": "import numpy as np\ndef tv_remote(word):\n    keyboard = np.array([['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n                          ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n                          ['k', 'l','m', 'n', 'o', '7', '8', '9'],\n                          ['p', 'q', 'r','s', 't', '.', '@', '0'],\n                          ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']])\n    x, y = 0, 0\n    moves = 0\n    for char in word:\n        moves += abs(np.argwhere(keyboard == char)[0] - x) + abs(np.argwhere(keyboard == char)[1] - y)\n        x, y = np.argwhere(keyboard == char)[0], np.argwhere(keyboard == char)[1]\n    return moves"}, "2226": {"problem_id": 4587, "answer": "def range_parser(string):\n    lst = []\n    for i in range(1, len(string) + 1):\n        if string[i].isdigit():\n            lst.append(int(string[i]))\n        elif string[i].isalpha():\n            lst.append(int(string[i]))\n        elif string[i] == '-':\n            lst.append(int(string[i:]))\n        elif string[i] == ':'\n            lst.append(int(string[i:]))\n        elif string[i] == ',':\n            lst.append(int(string[i:]))\n        elif string[i] == ':'.join(reversed(string[i:]))\n            lst.append(int(string[i:]))\n    return lst"}, "2227": {"problem_id": 4588, "answer": "def controller(events):\n    d, r = divmod(len(events), 2)\n    return ''.join(str(d) + '0' * (r + 1) + str(d & -d))"}, "2228": {"problem_id": 4589, "answer": "def solution(items, index, default_value):\n    try:\n        return items[index]\n    except IndexError:\n        return default_value"}, "2229": {"problem_id": 4590, "answer": "def alt_or(lst):\n    return None if len(lst) == 0 else''.join(filter(lambda x: x!= 'True', lst))"}, "2230": {"problem_id": 4591, "answer": "def how_many_bees(hive):\n    if \"bee\" in hive:\n        return len(hive.split(\".\")[1])\n    elif \"bee\" in hive[::-1]:\n        return len(hive[::-1])"}, "2231": {"problem_id": 4592, "answer": "def is_win(x,y,z):\n    return x==y and z==y or x==z and y==z"}, "2232": {"problem_id": 4593, "answer": "def merge_arrays(arr1, arr2):\n    arr1.extend(arr2)\n    return sorted(set(arr1), reverse=True)"}, "2233": {"problem_id": 4594, "answer": "def transpose(matrix):\n    return [[row[i] for row in matrix] for i in range(len(matrix))]"}, "2234": {"problem_id": 4595, "answer": "def bishop_diagonal(bishop1, bishop2):\n    m = ord(bishop1[0]) - ord(bishop2[0])\n    n = ord(bishop1[1]) - ord(bishop2[1])\n    a = ord(bishop1[2]) - ord(bishop2[2])\n    b = ord(bishop1[3]) - ord(bishop2[3])\n    c = ord(bishop1[4]) - ord(bishop2[4])\n    d = ord(bishop1[5]) - ord(bishop2[5])\n    e = ord(bishop1[6]) - ord(bishop2[6])\n    f = ord(bishop1[7]) - ord(bishop2[7])\n    g = ord(bishop1[8]) - ord(bishop2[8])\n    h = ord(bishop1[9]) - ord(bishop2[9])\n    i = ord(bishop1[10]) - ord(bishop2[10])\n    j = ord(bishop1[11]) - ord(bishop2[11])\n    k = ord(bishop1[12]) - ord(bishop2[12])\n    l = ord(bishop1[13]) - ord(bishop2[13])\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n   "}, "2235": {"problem_id": 4596, "answer": "from math import factorial\ndef perms(element):\n    return factorial(len(element)) // factorial(len(set(element)))"}, "2236": {"problem_id": 4597, "answer": "def combine(*args):\n    return list(zip(*args))"}, "2237": {"problem_id": 4598, "answer": "def calculate(n1, n2, o):\n    ops = {\n        'add': lambda a, b: a + b,\n       'subtract': lambda a, b: a - b,\n       'multiply': lambda a, b: a * b,\n    }\n    return '{:b}'.format(ops[o](int(n1), int(n2))"}, "2238": {"problem_id": 4599, "answer": "def owl_pic(text):\n    p = ''.join([c for c in text.upper() if c in '8WTYUIOAHXVM']).translate(str.maketrans('8HAYAYY', '''0v0'''))\n    return p + '''\\u00A3' + p[::-1]"}, "2239": {"problem_id": 4600, "answer": "def move_zeros(array):\n    return sorted(array, key=lambda x: x!= 0)"}, "2240": {"problem_id": 4601, "answer": "def mormons(starting_number, reach, target):\n    missions = 0\n    while starting_number < target:\n        missions += 1\n        starting_number += reach\n    return missions"}, "2241": {"problem_id": 4602, "answer": "# write the function is_anagram\ndef is_anagram(test, original):\n    return sorted(test.lower()) == sorted(original.lower())"}, "2242": {"problem_id": 4603, "answer": "def Ackermann(m,n):\n    if type(m) is not int or type(n) is not int: return None\n    if m == 0: return n+1\n    if n == 0: return Ackermann(m-1,1)\n    if m > 0 and n > 0: return Ackermann(m-1,Ackermann(m,n-1))\n"}, "2243": {"problem_id": 4604, "answer": "def palindrome(num):\n    if type(num)!= int or num < 0:\n        return \"Not valid\"\n    s = str(num)\n    return sum(1 for i in range(len(s)) if s[i] == s[i+1]) > 0"}, "2244": {"problem_id": 4605, "answer": "import re\ndef replace_dashes_as_one(s):\n    return re.sub(r'-(\\s*-)*','-',s)"}, "2245": {"problem_id": 4606, "answer": "import re\ndef valid_romans(arr):\n    return [e for e in arr if re.match(r'^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$',e)]"}, "2246": {"problem_id": 4607, "answer": "from itertools import permutations\n\ndef find_mult_3(num):\n    nums = str(num)\n    return [len(set(nums)), max(map(int, permutations(nums))))"}, "2247": {"problem_id": 4608, "answer": "def finance(n):\n    return sum(sorted(''.join(str(i) for i in range(n, n+6)), key=lambda x: x[1]))"}, "2248": {"problem_id": 4609, "answer": "def egged(year, span):\n    eggs = 0\n    for i in range(year):\n        eggs += int(f chickens in range(300) * span)\n    return eggs"}, "2249": {"problem_id": 4610, "answer": "def number_increasing(n):\n    return n%5==0"}, "2250": {"problem_id": 4611, "answer": "def animals(heads, legs):\n    ch, c = 2*heads-legs/2, legs/2\n    if ch.is_integer() and c.is_integer():\n        return (ch, c)\n    return 'No solutions'"}, "2251": {"problem_id": 4612, "answer": "import operator\ndef expression_out(exp):\n    ops = {'+': 'Plus', '-': 'Minus', '*': 'Times', '/': 'Divided By', '**': 'To The Power Of', '=': 'Equals', '!=': 'Does Not Equal'}\n    return ''.join(op.title() for op in ops.get(exp, \"That's not an operator!\"))"}, "2252": {"problem_id": 4613, "answer": "def add(a,b):\n    s = sum(int(i) for i in a) + sum(int(i) for i in b)\n    return '{:b}'.format(s)"}, "2253": {"problem_id": 4614, "answer": "def scoreboard(who_ate_what):\n    return sorted([\n        {name: \"Big Bob\", score: 134},\n        {name: \"Habanero Hillary\", score: 98}\n    ], key=lambda x: (-x['score'], x['name']))"}, "2254": {"problem_id": 4615, "answer": "def logistic_map(width,height,xs,ys):\n    l=[[None for _ in range(width)] for _ in range(height)]\n    for x,y in zip(xs,ys):\n        l[x][y]=1\n        \n    for i in range(1,width):\n        for j in range(1,height):\n            if l[i][j]==1:\n                l[i][j]=abs(i-x)**2+abs(j-y)**2\n            elif l[i][j]!=1:\n                l[i][j]=None\n    return l"}, "2255": {"problem_id": 4616, "answer": "def single_digit(n):\n    if n < 10:\n        return n\n    n = bin(n)[2:]\n    return single_digit(int(''.join(n), 2))"}, "2256": {"problem_id": 4617, "answer": "def powers_of_two(n):\n    return [2**i for i in range(n+1)]"}, "2257": {"problem_id": 4618, "answer": "def positive_sum(arr):\n    return sum(x for x in arr if x > 0)"}, "2258": {"problem_id": 4619, "answer": "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        return 'white' if win else 'black'\n    else:\n        return 'black' if win else 'white'"}, "2259": {"problem_id": 4620, "answer": "def string_letter_count(s):\n    return ''.join(str(x) if x.isalpha() else '' for x in sorted(s.lower()))"}, "2260": {"problem_id": 4621, "answer": "def count_deaf_rats(town):\n    deaf_rats = 0\n    deaf_rats_left = 0\n    deaf_rats_right = 0\n    deaf_rats_piper = 0\n    \n    for i in range(len(town)):\n        if town[i] == \"P\":\n            deaf_rats += 1\n        elif town[i] == \"O~\":\n            deaf_rats -= 1\n        elif town[i] == \"~O\":\n            deaf_rats_right += 1\n        else:\n            deaf_rats_left += 1\n        "}, "2261": {"problem_id": 4622, "answer": "def double_check(strng):\n    return any(c.lower() in 'abcdEGHIJKLMNOPQRSTUVWXYZ' for c in strng)"}, "2262": {"problem_id": 4623, "answer": "def make_2d_list(head,row,col):\n    return [[head+i for i in range(col)] for j in range(row)]"}, "2263": {"problem_id": 4624, "answer": "def gc_content(seq):\n    return round(100.0 * sum(c in 'GC' for c in seq) / len(seq), 2)"}, "2264": {"problem_id": 4625, "answer": "from collections import defaultdict\ndef processes(start, end, processes):\n    d = defaultdict(list)\n    for p in processes:\n        d[p[1]].append(p[0])\n        if p[1] == start:\n            return d[p[0]].pop()\n    return []"}, "2265": {"problem_id": 4626, "answer": "def decode(string_):\n    if type(string_)!= str:\n        return \"Input is not a string\"\n    s = ''.join(c for c in string_ if c.isalnum())\n    return s"}, "2266": {"problem_id": 4627, "answer": "def closest(lst):\n    min_num = min(lst)\n    return min_num if abs(min_num) <= 0.0000000001 else None"}, "2267": {"problem_id": 4628, "answer": "def sxore(n):\n    return nxor(n,2**32-1)"}, "2268": {"problem_id": 4629, "answer": "def penalty(a_list):\n    d = {1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10', 11: '11', 12: '12', 13: '13', 14: '14', 15: '15', 16: '16', 17: '17', 18: '18', 19: '19', 20: '20', 21: '21', 22: '22', 23: '23', 24: '24', 25: '25', 26: '26', 27: '27', 28: '28', 29: '29', 30: '30', 31: '31', 32: '32', 33: '33', 34: '34', 35: '35', 36: '36', 37: '37', 38: '38', 39: '39', 40: '40', 41: '41', 42: '42', 43: '43', 44: '44', 45: '45', 46: '46', 47: '47', 48: '48', 49: '49', 50: '50', 51: '51', 52: '52', 53: '53', 54: '54', 55: '55', 56: '56', 57: '57', 58: '58', 59: '59', 60: '60', 61: '61', 62: '62', 63: '63', 64: '64', 65: '65', 66: '66', 67: '67', 68: '68', 69: '69', 70: '70', 71: '71', 72: '72', 73: '73', 74: '74', 75: '75', 76: '76', 77: '77', 78: '78', 79: '79', 80: '80', 81: '81', 82: '82', 83: '83', 84: '84', 85: '85', 86: '86', 87: '87', 88: '88', 89: '89', 90: '90', 91: '91', 92: '92', 93: '93', 94: '94', 95: '95', 96: '96', 97: '97', 98: '98', 99: '99']:int(i) for i in a_list}\n    return d[max(d.values())]"}, "2269": {"problem_id": 4630, "answer": "def decrypt(s):\n    n = int(s)\n    return ''.join(chr(10 + int(d)) for d in str(n)) if n > 0 else 'impossible'"}, "2270": {"problem_id": 4631, "answer": "def createDict(keys, values):\n    return dict(zip(keys, values + [None]*(len(keys) - len(values))))"}, "2271": {"problem_id": 4632, "answer": "def decode(string):\n    return ''.join(c if c.isdigit() else '0' for c in string)"}, "2272": {"problem_id": 4633, "answer": "def convert(number):\n    return ''.join(chr(int(number[i:i+2])) for i in range(0, len(number), 2))"}, "2273": {"problem_id": 4634, "answer": "def pac_man(N, PM, enemies):\n    m = [[0] * N for _ in range(N)]\n    for i in enemies:\n        m[PM[0][i[1]], i[0]] = i[2]\n    for i in enemies:\n        m[PM[i[0]][i[1]], i[0]] = i[2]\n    for i in range(1, N):\n        for j in range(N):\n            if i + j < N:\n                m[i, j] = m[i + j].copy()\n            elif i + j == N:\n                m[i, j] = m[i].copy()\n            else:\n                m[i, j] = m[i][j] + 1\n    return sum(m[i][j] for i in range(N) for j in range(N))"}, "2274": {"problem_id": 4635, "answer": ""}, "2275": {"problem_id": 4636, "answer": ""}, "2276": {"problem_id": 4637, "answer": "import re\ndef convert_recipe(s):\n    m = re.match(r'\\d*tbsp|\\d*tsp',s)\n    return '{}'.format(m.group(1) if m else '') + '{}'.format(eval(m.group(2)) if m else '')"}, "2277": {"problem_id": 4638, "answer": "def fizz_buzz_cuckoo_clock(time):\n    h,m = map(int,time.split(':'))\n    if h==12:\n        return 'Cuckoo'\n    elif h==0:\n        return 'Cuckoo'\n    elif m%3==0 and m%5==0:\n        return 'Fizz Buzz'\n    elif m%3==0:\n        return 'Fizz'\n    elif m%5==0:\n        return 'Buzz'\n    else:\n        return 'tick'"}, "2278": {"problem_id": 4639, "answer": "def power_of_two(x):\n    return x & (x-1) == 0"}, "2279": {"problem_id": 4640, "answer": "int_diff=lambda a,n:sum(1 for i in range(len(a)) if abs(a[i]-a[len(a)-i-1])==n)"}, "2280": {"problem_id": 4641, "answer": "def unique_in_order(iterable):\n    return [x for x in iterable]"}, "2281": {"problem_id": 4642, "answer": "from math import ceil\n\ndef calculate_damage(your_type, opponent_type, attack, defense):\n    effectiveness = {\n        'fire': 2,\n        'water': 1,\n        'grass': 1,\n        'electric': 1\n    }\n    return ceil(0.5 * (attack / defense) * effectiveness.get(your_type, effectiveness.get(opponent_type, effectiveness.get('fire', effectiveness.get('water', effectiveness.get('grass', effectiveness.get('electric', None)))))))"}, "2282": {"problem_id": 4643, "answer": "def zipvalidate(postcode):\n    return len(postcode)==6 and '0' not in postcode"}, "2283": {"problem_id": 4644, "answer": "def char_to_ascii(s):\n    return {c:ord(c) for c in set(s) if c.isalpha()} if s else None"}, "2284": {"problem_id": 4645, "answer": "def promenade(choices):\n    l, r = 1, 0\n    for c in choices:\n        l, r = divmod(l + r, c)\n    return (l, r)"}, "2285": {"problem_id": 4646, "answer": "def encode(s):\n    return ''.join(chr(ord(c)%2) if c.isalpha() else 1 if c in '01' else 0 for c in s)"}, "2286": {"problem_id": 4647, "answer": "def get_neighbourhood(n_type, mat, coordinates):\n    m, n = coordinates\n    if m.index(n) == -1:\n        return []\n    elif m.index(n) == 0:\n        return []\n    else:\n        row, col = m.index(n), m.index(n)\n        return [mat[row][col]] + get_neighbourhood(n_type, mat, (row, col))"}, "2287": {"problem_id": 4648, "answer": "def automorphic(n):\n    return \"Automorphic\" if str(n**2)[-len(str(n)):] == str(n) else \"Not!!\""}, "2288": {"problem_id": 4649, "answer": "def get_section_id(scroll, sizes):\n    s = 0\n    for i in sizes:\n        s += i\n        if scroll >= s:\n            return s"}, "2289": {"problem_id": 4650, "answer": "import re\ndef validPhoneNumber(phoneNumber):\n    return bool(re.match('^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$',phoneNumber))"}, "2290": {"problem_id": 4651, "answer": "def christmas_tree(height):\n    if height<3:\n        return \"\"\n    tree = []\n    for i in range(height//3):\n        tree.append(\"*\"*i+\"\\r\\n\")\n        tree.append(\"*\"*i+\"\\r\\n\")\n    res = \"\"\n    for i in range(height//3):\n        res += tree[i]\n    return res"}, "2291": {"problem_id": 4652, "answer": "def score(n):\n    return 2**(len(bin(n))-2)"}, "2292": {"problem_id": 4653, "answer": "def next_letter(s):\n    return ''.join(chr(97 + i) for i in range(26))"}, "2293": {"problem_id": 4654, "answer": "def travel(total_time, run_time, rest_time, speed):\n    s = total_time + run_time\n    r = min(s, r)\n    s = min(14, s)\n    r = min(45, r)\n    return s*speed + r"}, "2294": {"problem_id": 4655, "answer": "def sort_me(arr):\n    return sorted(arr, key=lambda x: str(x)[-1])"}, "2295": {"problem_id": 4656, "answer": "from itertools import count\n\ndef center_of(chars):\n    n = len(chars)\n    center = ''.join(s[i] for i in range(n//2) if n%2==0)\n    return center"}, "2296": {"problem_id": 4657, "answer": "from itertools import permutations\ndef sort_by_perfsq(arr):\n    return [n for n in arr if sum(1 for p in permutations(str(n))) == len(set(permutations(str(n))))]"}, "2297": {"problem_id": 4658, "answer": "def max_product(lst, n_largest_elements):\n    from functools import reduce\n    return reduce(lambda x, y: x*y, sorted(lst)[-n_largest_elements:])"}, "2298": {"problem_id": 4659, "answer": "def numberAndIPaddress(s):\n    ip = str(int(s[0]) <<  8) + str(int(s[1]) << 16) + str(int(s[2]) <<  8) + str(int(s[3]) << 16)\n    return '.'.join(map(str, ip))"}, "2299": {"problem_id": 4660, "answer": "def can_i_play(now_hour, start_hour, end_hour):\n    if start_hour < end_hour:\n        return False\n    elif now_hour < start_hour:\n        return False\n    else:\n        return True"}, "2300": {"problem_id": 4661, "answer": ""}, "2301": {"problem_id": 4662, "answer": "from itertools import compress\ndef prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1121, 1129, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2"}, "2302": {"problem_id": 4663, "answer": "def order(sentence):\n    return''.join(sorted(sentence.split(), key=lambda x: (int(x), x)))"}, "2303": {"problem_id": 4664, "answer": "def conference_picker(cities_visited, cities_offered):\n    return next((city for city in cities_offered if city not in cities_visited), 'No worthwhile conferences this year!')"}, "2304": {"problem_id": 4665, "answer": "def puzzle_tiles(width, height):\n    lines = ['  '.join(s) for s in'' * width + '\\n']\n    lines.extend(['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] + ['  '.join(s) for s in'' * width + '\\n'] + ['  '.join(s) for s in'' * height + '\\n'] +"}, "2305": {"problem_id": 4666, "answer": "def array_plus_array(arr1,arr2):\n    return sum(arr1+arr2)"}, "2306": {"problem_id": 4667, "answer": ""}, "2307": {"problem_id": 4668, "answer": "def is_divisible_by_6(s):\n    return [n for n in range(10**(len(s.replace('*', str(n)))) + 1)\n            if int(s.replace('*', str(n))) % 6 == 0]"}, "2308": {"problem_id": 4669, "answer": "def beggars(values, n):\n    return [sum(values[i] for i in range(n)) for beggars(values, n)]"}, "2309": {"problem_id": 4670, "answer": "def string_to_number(s):\n    return int(s)"}, "2310": {"problem_id": 4671, "answer": "def isTree(matrix):\n    visited = set()\n    stack = []\n    for i in range(len(matrix)):\n        stack.append(i)\n        visited.add(i)\n    "}, "2311": {"problem_id": 4672, "answer": "def AlphaNum_NumAlpha(string):\n    d = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    return ''.join(d.get(c,c) for c in string.upper())"}, "2312": {"problem_id": 4673, "answer": "def convert_hash_to_array(hash):\n    return sorted(map(list, hash.items()))"}, "2313": {"problem_id": 4674, "answer": "def rank(st, we, n):\n    if not st: return \"No participants\"\n    names = st.split(',')\n    som = []\n    for w in we:\n        som.append(sum(names[i] + ord(w) - 96 for i in range(len(names))) + len(names[0]))\n    som.sort()\n    return ''.join(sorted(names, key=lambda n: som[n]))"}, "2314": {"problem_id": 4675, "answer": "def set_alarm(employed, vacation):\n    if employed == True and vacation == True:\n        return False\n    elif employed == True and vacation == False:\n        return False\n    elif employed == False and vacation == True:\n        return False\n    elif employed == False and vacation == False:\n        return False\n    else:\n        return True"}, "2315": {"problem_id": 4676, "answer": "def diff(poly):\n    return [i*j for i,j in enumerate(poly[:-1])]"}, "2316": {"problem_id": 4677, "answer": "from itertools import product\ncrack = lambda h: \"\".join(c*10**i for i,c in enumerate(map(str, product(1,5))) for i,d in enumerate(h))"}, "2317": {"problem_id": 4678, "answer": "from collections import Counter\ndef find_the_missing_tree(trees):\n    return min(Counter(trees).values())"}, "2318": {"problem_id": 4679, "answer": "def to_freud(sentence):\n    return''.join('sex' for _ in sentence.split())"}, "2319": {"problem_id": 4680, "answer": "def make_change(amount):\n    coins = {\n        'H': 50,\n        'Q': 25,\n        'D': 10,\n        'N': 5,\n        'P': 1\n    }\n    return dict(coins.items())"}, "2320": {"problem_id": 4681, "answer": "def alphabetized(s):\n    return ''.join(sorted(s, key=lambda x: x.lower()))"}, "2321": {"problem_id": 4682, "answer": "import datetime as dt\ndef date_correct(date):\n    if date == None:\n        return None\n    elif len(date)!= 8 or ''.join(map(str, date))!= '01.03.2016':\n        return None\n    else:\n        d, m, y = map(int, date.split('.'))\n        if d == 1.1:\n            m += 1\n            y += 1\n        elif d == 1.2:\n            m += 1\n            y += 1\n        elif d == 1.3:\n            m += 1\n            y += 1\n        elif d == 1.4:\n            m += 1\n            y += 1\n        elif d == 1.5:\n            m += 1\n            y += 1\n        elif d == 1.6:\n            m += 1\n            y += 1\n        elif d == 1.7:\n            m += 1\n            y += 1\n        elif d == 1.8:\n            m += 1\n            y += 1\n        elif d == 1.9:\n            m += 1\n            y += 1\n        elif d == 2.1:\n            m += 1\n            y += 1\n        elif d == 2.2:\n            m += 1\n            y += 1\n        elif d == 2.3:\n            m += 1\n            y += 1\n        elif d == 2.4:\n            m += 1\n            y += 1\n        elif d == 2.5:\n            m += 1\n            y += 1\n        elif d == 2.6:\n            m += 1\n            y += 1\n        elif d == 2.7:\n            m += 1\n            y += 1\n        elif d == 2.8:\n            m += 1\n            y += 1\n        elif d == 2.9:\n            m += 1\n            y += 1\n        elif d == 3.1:\n            m += 1\n            y += 1\n        elif d == 3.2:\n            m += 1\n            y += 1\n"}, "2322": {"problem_id": 4683, "answer": "import math\ndef iter_pi(epsilon):\n    n = 4.0/3.0\n    res = n*pow(4,n)\n    while abs(res - math.pi) > epsilon:\n        res -= math.sin(4*math.pi/n)\n        n += 1\n    return [n, round(res,10)]"}, "2323": {"problem_id": 4684, "answer": "def is_hollow(x):\n    return len(x)>2 and sum(n%2==0 for n in x)"}, "2324": {"problem_id": 4685, "answer": "def self_descriptive(num):\n    return all(int(i) == i for i in str(num))"}, "2325": {"problem_id": 4686, "answer": "def double_every_other(lst):\n    return [i * 2 if i % 2!= 0 else i for i in lst]"}, "2326": {"problem_id": 4687, "answer": "def decomp(n):\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n            factors.append(i)\n    return'* '.join(f'{i}^{factors.count(i)}.{'}.join(f'{i}^{factors.count(i)}'\n}, "2327": {"problem_id": 4688, "answer": "def expanded_form(num):\n    s = str(num)\n    return'+ '.join(['{}/{}'.format(i, 10**len(s)) for i in range(10)])"}, "2328": {"problem_id": 4689, "answer": "from collections import Counter\nDUCK_TO_SENSITIVE = {\n    \"Redhead\": 3,\n    \"Gadwall\": 4,\n    \"Smew\": 5,\n    \"Greater Scaup\": 6,\n    \"Redhead\": 8,\n    \"Gadwall\": 9,\n    \"Smew\": 10,\n    \"Common Eider\": 11,\n}\n\ndef create_report(names):\n    d = Counter(names.lower())\n    return sum(sorted(d.values()))"}, "2329": {"problem_id": 4690, "answer": "def adfgx_encrypt(plaintext, square):\n    d = {'i':1,'j':2,'k':3,'l':4,'m':5,'n':6,'o':7,'d':8,'f':9,'g':10,'h':11,'e':12,'c':13,'k':14,'j':15,'i':16,'l':17,'o':18,'s':19,'r':20,'t':21}.get(square[i][j],''.join(map(str,square[i][j])))\n    return ''.join(map(str,zip(*[square[i][j] for i in range(len(square))])))[::-1])\n    \ndef adfgx_decrypt(ciphertext, square):\n    d = {'i':1,'j':2,'k':3,'l':4,'m':5,'n':6,'o':7,'d':8,'e':9,'g':10,'h':11,'f':12,'d':13,'c':14,'k':15,'j':16,'i':17,'l':18,'o':19,'s':20,'r':21,'t':22}.get(square[i][j],''.join(map(str,square[i][j])))\n    return ''.join(map(str,zip(*[square[i][j] for i in range(len(square))])))[::-1])"}, "2330": {"problem_id": 4691, "answer": "def solve(s):\n    uppercase = 0\n    lowercase = 0\n    numbers = 0\n    special = 0\n    for c in s:\n        if c.isupper():\n            uppercase += 1\n        elif c.islower():\n            lowercase += 1\n        elif c.isdigit():\n            numbers += 1\n        else:\n            special += 1\n    return [uppercase, lowercase, numbers, special]"}, "2331": {"problem_id": 4692, "answer": "def max_profit(prices):\n    p = prices[0]\n    for i in prices[1:]:\n        p = min(p, i)\n    return p"}, "2332": {"problem_id": 4693, "answer": "def check_valid_tr_number(number):\n    return sum(int(n) for n in str(number)).is_integer() and \\\n            sum(int(n) for n in str(number)[1:]) % 10 == int(number) % 10"}, "2333": {"problem_id": 4694, "answer": ""}, "2334": {"problem_id": 4695, "answer": "def count_squares(n):\n    return sum(1 for i in range(n+1) if i*i == n)"}, "2335": {"problem_id": 4696, "answer": "def same_encryption(s1, s2):\n    return sum(int(i) for i in s1[1:]) == sum(int(i) for i in s2[1:])"}, "2336": {"problem_id": 4697, "answer": "from collections import Counter\n\ndef common(a,b,c):\n    return sum(Counter(a).keys() & Counter(b).keys() & Counter(c).keys())"}, "2337": {"problem_id": 4698, "answer": "def is_int_array(arr):\n    return all(isinstance(x, int) or isinstance(x, float) for x in arr)"}, "2338": {"problem_id": 4699, "answer": "def spinning_rings(inner_max, outer_max):\n    n = 0\n    while True:\n        inner_max += 1\n        if inner_max == outer_max:\n            return n\n        elif inner_max > outer_max:\n            n += 1\n"}, "2339": {"problem_id": 4700, "answer": "def solve(arr):\n    return max(arr[i][i]*arr[i][j] for i in range(len(arr)) for j in range(i+1,len(arr)))"}, "2340": {"problem_id": 4701, "answer": "from math import ceil\ndef pay_cheese(arr):\n    return 'L'+str(ceil(sum(arr)//100)*35)"}, "2341": {"problem_id": 4702, "answer": "def digits_product(product):\n    if product < 10:\n        return 10 + product\n    elif product < 100:\n        return 100 + product\n    elif product < 1000:\n        return 1000 + product\n    elif product < 10000:\n        return 10000 + product\n    elif product < 100000:\n        return 100000 + product\n    else:\n        return -1"}, "2342": {"problem_id": 4703, "answer": "def bar_triang(pointA, pointB, pointC): # points A, B and C will never be aligned\n    xO = round((pointA[0] + pointB[0] + pointC[0]) / 3, 4)\n    yO = round((pointA[1] + pointB[1] + pointC[1]) / 3, 4)\n    return [xO, yO]"}, "2343": {"problem_id": 4704, "answer": "def esrever(string):\n    return string[:-1][::-1] + string[-1]"}, "2344": {"problem_id": 4705, "answer": "def find_a_b(numbers,c):\n    for i in range(len(numbers)):\n        if numbers[i]*c > numbers[i]*c:\n            return [numbers[i],numbers[i]]\n    return [numbers[i],c]"}, "2345": {"problem_id": 4706, "answer": "def split_exp(n):\n    return [x.ljust(len(x), '0') for x in zip(*n)]"}, "2346": {"problem_id": 4707, "answer": "def to_bytes(n):\n    return [chr(n%8) for n in range(0, 8)]"}, "2347": {"problem_id": 4708, "answer": "def human_years_cat_years_dog_years(human_years):\n    c = 15 + (human_years > 1) * (4 + (human_years > 2))\n    d = 15 + (human_years > 1) * (5 + (human_years > 2))\n    return [human_years, c, d]"}, "2348": {"problem_id": 4709, "answer": "def sequence(n):\n    return int(str(n)[n] + '9')"}, "2349": {"problem_id": 4710, "answer": "def luck_check(string):\n    if isinstance(string,str) and sum(map(int,string[::2])) == sum(map(int,string[1::2])):\n        return True\n    return False"}, "2350": {"problem_id": 4711, "answer": "def zeros(n):\n    \"\"\"\n    Calculate the number of zeros in a factorial of a given number.\n    \"\"\"\n    return sum(n//5**i for i in range(1,25))"}, "2351": {"problem_id": 4712, "answer": "def lucasnum(n):\n    return 2*(n-1) - 1"}, "2352": {"problem_id": 4713, "answer": "from itertools import permutations\n\n\ndef late_clock(digits):\n    return '%d:%d' % permutations(map(int, str(sum(int(c) for c in digits))))"}, "2353": {"problem_id": 4714, "answer": "def remainder(dividend, divisor):\n    return dividend - (dividend // divisor)"}, "2354": {"problem_id": 4715, "answer": "def build_palindrome(s):\n    n = len(s)\n    a = s[::-1]\n    b = s + 'a'\n    return min(a, b)"}, "2355": {"problem_id": 4716, "answer": "def distribution_of(golds):\n    g = golds[:]\n    a = g.pop(0)\n    b = g.pop(-1)\n    return [a, b]"}, "2356": {"problem_id": 4717, "answer": ""}, "2357": {"problem_id": 4718, "answer": "def x(n):\n    return [[i, j, k, i+k, i-j-k] for i in range(n+1) for j in range(n+1) for k in range(n+1)]"}, "2358": {"problem_id": 4719, "answer": "def sort_array(a):\n    lst = sorted(a, key=lambda n: n % 2)\n    return lst"}, "2359": {"problem_id": 4720, "answer": ""}, "2360": {"problem_id": 4721, "answer": "def convert_temp(temp, from_scale, to_scale):\n    from_scale = str(from_scale)\n    to_scale = str(to_scale)\n    if from_scale == to_scale:\n        return int(temp)\n    elif from_scale == 'C':\n        return (40 + (temp ** 0.5))\n    elif from_scale == 'F':\n        return (21 + (temp ** 2))\n    elif from_scale == 'K':\n        return (273.15 + (temp ** 3))\n    elif from_scale == 'R':\n        return (491.67 + (temp ** 4))\n    elif from_scale == 'De':\n        return (738.93 + (temp ** 5))\n    elif from_scale == 'N':\n        return (894.55 + (temp ** 6))\n    elif from_scale == 'Re':\n        return (981.15 + (temp ** 7))\n    elif from_scale == 'Ro':\n        return (1173.55 + (temp ** 8))"}, "2361": {"problem_id": 4722, "answer": "def e(s):\n    stack = []\n    for i in s:\n        if i.isnumeric():\n            stack.append(i)\n        elif i.isnspack():\n            stack.append('{}*'.format(i))\n        else:\n            stack.append(i)\n    return ''.join(stack)"}, "2362": {"problem_id": 4723, "answer": "def greet(name): \n    name = name.lower()\n    return \"Hello {}!\".format(name[0].upper() + name[1:].lower())"}, "2363": {"problem_id": 4724, "answer": "import re\ndef drop_cap(str_):\n    return re.sub(r'\\S', lambda m: m.group(0).title() if len(m.group(0)) > 2 else m.group(0), str_)"}, "2364": {"problem_id": 4725, "answer": "def reverse(n):\n    return int(str(n)[::-1])"}, "2365": {"problem_id": 4726, "answer": "def solve(s):\n    n = len(s)\n    d = {chr(i + 65) for i in range(n + 1)}\n    return sum(d.get(c, 0) for c in s) % (10**9 + 7)"}, "2366": {"problem_id": 4727, "answer": "def remove_vowels(s):\n    return ''.join(c for c in s if c not in 'aeiou')"}, "2367": {"problem_id": 4728, "answer": "def populate_dict(keys, default):\n    return {k: default for k in keys}"}, "2368": {"problem_id": 4729, "answer": "from collections import Counter\n\ndef numbers_of_letters(n):\n    c = Counter(str(n))\n    return [f\"{i} is the number of letters in {k} {c[k]}\" for i,k in enumerate(reversed(list(map(int,range(10)))))]"}, "2369": {"problem_id": 4730, "answer": "def prime_bef_aft(num):\n    if num == 2:\n        return [2, 3]\n    elif num % 2 == 0:\n        return [2, 3]\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return [i, num//i]\n        return [2, 3]"}, "2370": {"problem_id": 4731, "answer": "def match(usefulness, months):\n    return \"Match!\" if sum(usefulness) >= 100*0.85**months else \"No match!\""}, "2371": {"problem_id": 4732, "answer": "def absent_vowel(x): \n    return [\"aeiou\".index(x.lower()) for x in set(x) if x.lower() not in \"aeiou\"]"}, "2372": {"problem_id": 4733, "answer": "def rot_energies(B, Jmin, Jmax):\n    return [] if B > 0 else [B * J * (J + 1) for J in range(Jmin, Jmax + 1)]"}, "2373": {"problem_id": 4734, "answer": "def bonus_time(salary, bonus):\n    return \"$%d\" % (salary * 10 **bonus)"}, "2374": {"problem_id": 4735, "answer": "def keep_order(ary, val):\n    for i in range(len(ary)):\n        if ary[i] >= val:\n            return i"}, "2375": {"problem_id": 4736, "answer": "def how_many_bees(hive):\n    if hive is None:\n        return 0\n    elif len(hive) == 0:\n        return 0\n    r = 0\n    for i in range(len(hive)):\n        for j in range(len(hive[i])):\n            if hive[i][j] == 'b':\n                r += 1\n            elif hive[i][j] == 'e':\n                r += 1\n            elif hive[i][j] == 'd':\n                r += 1\n            elif hive[i][j] == 'f':\n                r += 1\n            else:\n                r += 1\n    return r"}, "2376": {"problem_id": 4737, "answer": "def fuel_price(litres, price_per_litre):\n    if litres < 2:\n        return round(litres * price_per_litre, 2)\n    elif litres < 4:\n        return round(litres * (price_per_litre - 0.05), 2)\n    elif litres < 6:\n        return round(litres * (price_per_litre - 0.1), 2)\n    elif litres < 8:\n        return round(litres * (price_per_litre - 0.15), 2)\n    elif litres < 10:\n        return round(litres * (price_per_litre - 0.2), 2)\n    else:\n        return round(litres * (price_per_litre - 0.25), 2)"}, "2377": {"problem_id": 4738, "answer": "def find(r):\n    return sum(1<<i for i in r)"}, "2378": {"problem_id": 4739, "answer": "def same_col_seq(val, k, col):\n    colors = ['red', 'yellow', 'blue']\n    n = 1\n    while n < 1000000:\n        n += 1\n        colors.append(colors[-1] + n)\n        if colors[-1] > col:\n            break\n    return [colors[i] for i in range(1, len(colors)) if colors[i] == col]"}, "2379": {"problem_id": 4740, "answer": "def row_sum_odd_numbers(n):\n    # Happy Coding ^_^\n    # Your code here!\n    num_numbers = 0\n    for i in range(1, n+1):\n        num_numbers += i\n        num_numbers += 2*i\n    return num_numbers"}, "2380": {"problem_id": 4741, "answer": "import re\ndef pseudo_sort(st): \n    s = re.sub(r'[^a-z]', '', st)\n    s = re.sub(r'[A-Z]', '', s)\n    return''.join(sorted(s.split(), key=lambda w: (w.islower(), w.isdigit())))"}, "2381": {"problem_id": 4742, "answer": "def duplicates(arr):\n    return sum(arr.count(n)//2 for n in arr)"}, "2382": {"problem_id": 4743, "answer": "def target_game(values):\n    max_so_far = 0\n    for i in range(len(values)):\n        if values[i] > max_so_far:\n            max_so_far = values[i]\n    return max_so_far"}, "2383": {"problem_id": 4744, "answer": "def band_name_generator(name):\n    return \"The \" + name.capitalize()"}, "2384": {"problem_id": 4745, "answer": "def group_groceries(groceries):\n    d = {k:v.split() for k,v in groceries.items()}\n    return '\\n'.join(f'{k}:{v}' for k,v in sorted(d.items()))"}, "2385": {"problem_id": 4746, "answer": "from operator import xor"}, "2386": {"problem_id": 4747, "answer": "def repeat_str(repeat, string):\n    return repeat * string"}, "2387": {"problem_id": 4748, "answer": "import re\ndef insert_dash2(num):\n    return re.sub(r'([2468])(?=[2468])', '-', str(num))"}, "2388": {"problem_id": 4749, "answer": "def base_finder(seq):\n    return len(set(map(int,seq)))"}, "2389": {"problem_id": 4750, "answer": "def flatten(lst):\n    return [x for x in lst if isinstance(x, list)]"}, "2390": {"problem_id": 4751, "answer": "def deficiently_abundant_amicable_numbers(n1, n2):\n    d1 = sum(d for d in range(1, n1) if n1 % d == 0)\n    d2 = sum(d for d in range(1, n2) if n2 % d == 0)\n    return \"abundant deficient amicable\" if n1 == n2 else \"deficient deficient amicable\" if n1 == n2 else \"perfect\" if n1 > n2 else \"not amicable\""}, "2391": {"problem_id": 4752, "answer": "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\nfrom operator import mul\nfrom bisect import bisect_left, bisect_right\n\ndef has_subpattern(string):\n    c = Counter(string)\n    return ''.join(sorted(c.values()))"}, "2392": {"problem_id": 4753, "answer": "geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n\ndef goose_filter(birds):\n    return list(filter(lambda x: x not in geese, birds))"}, "2393": {"problem_id": 4754, "answer": "from itertools import groupby\n\ndef group_ints(lst, key=0):\n    return [list(g) for _, g in groupby(lst, lambda a: a < key)]"}, "2394": {"problem_id": 4755, "answer": "class Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        N = bin(N)[2:]\n        b = N.count('1')\n        a = N.count('0')\n        return int(N[0] + N[1:len(N) - b], 2)"}, "2395": {"problem_id": 4756, "answer": "import re\ns = input()\nvowels = set(\"aeiou\")\nprint((re.findall(r'[^aeiou]+', s)))\nif -1 in print((re.findall(r'[^aeiou]+', s))) :\n    print(-1)\nelse :\n    print(re.findall(r'[^aeiou]+', s))"}, "2396": {"problem_id": 4757, "answer": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    n,m,a,b=list(map(int,input().split()))\n    if n*a!=m*b:\n        print(\"NO\")\n    else:\n        ans=[[0]*m for i in range(n)]\n        for i in range(n):\n            for j in range(m):\n                ans[i][j]=ans[i][j]^a\n        print(\"\".join(map(str,ans)))\n"}, "2397": {"problem_id": 4758, "answer": "def connect_four_place(columns):\n    board = [[0] * 7 for _ in range(6)]\n    for col in columns:\n        board[col] = [row.pop() for row in board]\n    return board"}, "2398": {"problem_id": 4759, "answer": "def to_acronym(input):\n    return ''.join(w[0].upper() for w in input.split())"}, "2399": {"problem_id": 4760, "answer": "class T:\n    def __init__(self,value,left=None,right=None):\n        self.value=value\n        self.left=left\n        self.right=right\n"}, "2400": {"problem_id": 4761, "answer": "def search_k_from_end(linked_list, k):\n    head = linked_list.head\n    while k > 0:\n        head = head.next\n        k -= 1\n    return head.data"}, "2401": {"problem_id": 4762, "answer": "def nkotb_vs_homie(requirements):\n    r = requirements[4]\n    c = requirements[3]\n    m = requirements[2]\n    d = requirements[1]\n    return '{}! Homie dont play that!'.format(r) + '\\n'.join(f'{m}! {d} objections, {c} automation, {d} deployment pipeline, {c} cloud, and {m} microservices.')"}, "2402": {"problem_id": 4763, "answer": "def find_variable():\n    return globals().get(str(777),\"\")"}, "2403": {"problem_id": 4764, "answer": "def rotate_clockwise(matrix):\n    return [''.join(reversed(l)) for l in zip(*matrix)]"}, "2404": {"problem_id": 4765, "answer": "class Hero(object):\n    def __init__(self, name='Hero'):\n        self.name = name\n        self.experience = 0\n        self.health = 100\n        self.damage = 5"}, "2405": {"problem_id": 4766, "answer": "def n_closestPairs_tonum(num, k):\n    r = []\n    for i in range(1, k + 1):\n        m, n = divmod(num, i)\n        r.append([m, n])\n    return sorted(r, key=lambda x: abs(x[0] - x[1]))"}, "2406": {"problem_id": 4767, "answer": "from itertools import combinations\ndef longest_comb(arr, command):\n    c = 0\n    for comb in command.split(' '):\n        if len(combs) == 1:\n            c += 1\n        else:\n            l = min(combs)\n            r = max(combs)\n            comb =''.join(sorted(list(combs)))\n            c += len(combs) - (l+r)\n    return [list(comb) for comb in combinations(arr, c)]"}, "2407": {"problem_id": 4768, "answer": "class User(object):\n    def __init__(self, name, balance, checking_account):\n        self.name = name\n        self.balance = balance\n        self.checking_account = checking_account\n    "}, "2408": {"problem_id": 4769, "answer": "def area(d, l): \n    if d<l:\n        return \"Not a rectangle\"\n    else:\n        return round(l*d*2,2)"}, "2409": {"problem_id": 4770, "answer": "def peak_height(mountain):\n    l = len(mountain)\n    height = 0\n    for i in range(l):\n        height += int(str(bin(height)[2:].zfill(2))[::-1])\n    return height"}, "2410": {"problem_id": 4771, "answer": "def encryptor(key, message):\n    l = ''.join(chr(97 + int(i) % 26) for i in message)\n    return l.translate(str.maketrans('Caesar Ciphers','Bzdrzq Bhogdq'))"}, "2411": {"problem_id": 4772, "answer": "def name_score(name):\n    return {name: sum(alpha.get(c, 0) for c in name.upper())}"}, "2412": {"problem_id": 4773, "answer": "from functools import reduce\nfrom collections import deque\n\ndef count_find_num(primesL, limit):\n    d = deque()\n    for p in primesL:\n        d.append(reduce(lambda x,y:x*y, p))\n        if len(d) == limit:\n            return [len(d), max(d)]"}, "2413": {"problem_id": 4774, "answer": "def find_in_array(seq, predicate): \n    return next((i for i,e in enumerate(seq) if predicate(e,i)), -1)"}, "2414": {"problem_id": 4775, "answer": "def fusc(n):\n    if n < 2:\n        return n\n    elif n < 3:\n        return fusc(n//2)\n    else:\n        return fusc(n//2)+fusc(n%2)"}, "2415": {"problem_id": 4776, "answer": "def length_sup_u_k(n, k):\n    u = [1, 1]\n    for i in range(2, n + 1):\n        u.append(u[i - 1] + u[i - 2])\n    return len(u)"}, "2416": {"problem_id": 4777, "answer": "def mystery_range(s,n):\n    start = 0\n    end = 100\n    numbers = []\n    while start < end:\n        numbers.append(s[start:start+n])\n        start += n\n    return numbers"}, "2417": {"problem_id": 4778, "answer": "def most_money(students):\n    s = students.count(max(students))\n    return \"all\" if s == 1 else students[s-1].name"}, "2418": {"problem_id": 4779, "answer": "def how_to_find_them(right_triangle):\n    a = right_triangle.get('a')\n    b = right_triangle.get('b')\n    c = right_triangle.get('c')\n    \n    if a == b == c:\n        return right_triangle\n    elif a == c:\n        return right_triangle.get('c')\n    elif b == c:\n        return right_triangle.get('a')\n    else:\n        return right_triangle.get('c')^right_triangle.get('b')"}, "2419": {"problem_id": 4780, "answer": "from math import ceil\ns = '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679'\nn = ceil(int(s.split('.')[0])**0.5) + 1\ndef square_pi(digits):\n    return int(s[:n])**2 if digits else int(s[n:])"}, "2420": {"problem_id": 4781, "answer": "from math import cos, radians\n\ndef spider_to_fly(spider, fly):\n    return sum(abs(a*cos(radians(d)) + b*sin(radians(d)) - c) for a, b, c in zip(spider, fly, fly))"}, "2421": {"problem_id": 4782, "answer": "import operator\n\n\nclass Placeholder:\n    def __init__(self, op=None, left=None, right=None):\n        self.op = op\n        self.left = left\n        self.right = right\n\n    def __call__(self, *args):\n        return self.op(*args)\n\n    def __add__(self, other):\n        return Placeholder(op=operator.add, left=self.left, right=self.right)\n\n    def __sub__(self, other):\n        return Placeholder(op=operator.sub, left=self.left, right=self.right)\n\n    def __mul__(self, other):\n        return Placeholder(op=operator.mul, left=self.left, right=self.right)\n\n    def __floordiv__(self, other):\n        return Placeholder(op=operator.floordiv, left=self.left, right=self.right)\n\n    def __radd__(self, other):\n        return Placeholder(op=operator.add, left=other.left, right=other.right)\n\n    def __rsub__(self, other):\n        return Placeholder(op=operator.sub, left=other.left, right=other.right)\n\n    def __rmul__(self, other):\n        return Placeholder(op=operator.mul, left=other.left, right=other.right)\n\n    def __rfloordiv__(self, other):\n        return Placeholder(op=operator.floordiv, left=other.left, right=other.right)\n\n\nx = Placeholder()"}, "2422": {"problem_id": 4783, "answer": "def weather_info (temp):\n    c = convert_to_celsius(temp)\n    if c < 0:\n        return f\"{c} is freezing temperature\"\n    else:\n        return f\"{c} is above freezing temperature\"\n    \ndef convert_to_celsius (temperature):\n    celsius = (temperature - 32) * (5/9)\n    return celsius"}, "2423": {"problem_id": 4784, "answer": "def image2ascii(image):\n    \"\"\"Convert an 8-bit greyscale image into an ASCII-representation.\"\"\"\n    glyphs = ''.join(GLYPHS)\n    return '\\n'.join(''.join(glyphs[c] for c in row) for row in image)"}, "2424": {"problem_id": 4785, "answer": "from urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\ndef get_member_since(username):\n    soup = BeautifulSoup(urlopen(f'https://www.codewars.com/users/{username}'))\n    return '{}'.format(soup.find_all('span', class_='name').text)[0].split(' ')[1]"}, "2425": {"problem_id": 4786, "answer": "def poly_derivative(p):\n    return [i * x for i, x in enumerate(p)][0]"}, "2426": {"problem_id": 4787, "answer": "def remove(s):\n    s = s.replace('!', '')\n    return s"}, "2427": {"problem_id": 4788, "answer": "def sort_grades(lst):\n    return sorted(lst, key=lambda g: g[1:])"}, "2428": {"problem_id": 4789, "answer": ""}, "2429": {"problem_id": 4790, "answer": "from statistics import mean, pstdev\ndef clean_mean(sample, cutoff):\n    m = mean(sample)\n    s = pstdev(sample)\n    outliers = list(filter(lambda x: abs(x - m) < cutoff, sample))\n    outliers.sort(reverse=True)\n    return round(m, 2)"}, "2430": {"problem_id": 4791, "answer": "def word_to_bin(word):\n    return [format(ord(c),'08b') for c in word]"}, "2431": {"problem_id": 4792, "answer": "def parse_float(string):\n    try:\n        return float(string)\n    except ValueError:\n        return None"}, "2432": {"problem_id": 4793, "answer": "def to_currency(price):\n    return '{:,.3f}'.format(price).rstrip('0').rstrip('.')"}, "2433": {"problem_id": 4794, "answer": "def comfortable_numbers(l, r):\n    return sum(sum(sorted(str(i))[i] for i in range(l, r+1)))"}, "2434": {"problem_id": 4795, "answer": "import re\ndef flesch_kincaid(text):\n    s = re.sub(r'[.!?]', '', text)\n    return round(0.39*len(s) / len(s.split(' ')), 2) + 11.8 * len(s.split(' ')) *.5 - 15.59(len(s.split(' ')))"}, "2435": {"problem_id": 4796, "answer": "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef get_nth(node, index):\n    if node is None:\n        raise ValueError('Invalid argument')\n    \n    try:\n        return node.next\n    except AttributeError:\n        return get_nth(node.next, index)"}, "2436": {"problem_id": 4797, "answer": "def shorter_reverse_longer(a,b):\n    if len(a) > len(b):\n        a, b = b, a\n    return b + a[::-1] + b"}, "2437": {"problem_id": 4798, "answer": "def avg_diags(m):\n    diags = []\n    for i in range(len(m)):\n        if m[i][i] > 0:\n            diags.append(m[i][i])\n        elif m[i][i] < 0:\n            diags.append(abs(m[i][i]))\n        else:\n            diags.append(0)\n    return [diags[-1], diags[-2]] if diags else -1"}, "2438": {"problem_id": 4799, "answer": "from math import factorial as f\nm=f(1)\nfor i in range(2,200):\n    if i%2==0:\n        m=m*i\n    else:\n        m=m//i\n    "}, "2439": {"problem_id": 4800, "answer": "def hotpo(n):\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return count"}, "2440": {"problem_id": 4801, "answer": "import re\ndef roast_legacy(workloads):\n    workloads = workloads.lower()\n    legacy = ['cobol', 'nonobject','monolithic', 'fax','modem', 'thickclient', 'tape', 'floppy', 'oldschoolit']\n    legacy_lst = [workloads.index(x) for x in legacy]\n    legacy_lst.sort()\n    points = sum(legacy_lst[i] for i in range(0, len(legacy_lst), 1000))\n    barmen = sum(legacy_lst[i] for i in range(500, len(legacy_lst), 500))\n    cnt = sum(workloads.count(\"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\") for workloads in workloads.lower())\n    if cnt == 0:\n        return \"These guys are already DevOps and in the Cloud and the business is happy!\"\n    elif cnt > 0:\n        return \"Burn baby burn disco inferno 2400 points earned in this roasting and 2 complaints resolved!\"\n    else:\n        return \"These guys are already DevOps and in the Cloud and the business is happy!\""}, "2441": {"problem_id": 4802, "answer": "from collections import defaultdict\nclass Checkout(object):\n    __slots__ = ['id', 'price','remaining_price', 'bought_price', 'purchased_by', 'cents_taken', 'cents_computed', 'customer', 'customer_computed', 'customer_remaining_compute', 'customer_remaining_price', 'customer_remaining_compute_by']\n    def __init__(self, d={}):\n        self.id = None\n        self.price = None\n        self.remaining_price = None\n        self.bought_price = None\n        self.purchased_by = None\n        self.cents_taken = None\n        self.cents_computed = None\n        self.customer = None\n        self.customer_computed = None\n        self.customer_remaining_compute = None\n        self.customer_remaining_compute_by = None\n        self.customer_remaining_compute(self)\n        self.customer_remaining_price = None"}, "2442": {"problem_id": 4803, "answer": "def two_sum(numbers, target):\n    return [i for i in range(len(numbers)) if numbers[i] + numbers[i + 1] == target]"}, "2443": {"problem_id": 4804, "answer": "def relations(family_list, target_pair):\n    m = {\"Mother\": \"Daughter\", \"Grandmother\": \"Granddaughter\", \"Daughter\": \"Sister\", \"Granddaughter\": \"Cousin\", \"Sister\": \"Niece\", \"Cousin\": \"Aunt\", \"Aunt\": \"Grandmother\", \"Grandmother\": \"Mother\", \"Mother\": \"Granddaughter\"}\n    return target_pair.get(m.get(target_pair.get(s), None) for s in family_list)"}, "2444": {"problem_id": 4805, "answer": "def check(seq, elem):\n    return elem in seq"}, "2445": {"problem_id": 4806, "answer": "class LCG(object):\n  a = 2\n  c = 3\n  m = 10\n  \n  def __init__(self, seed):\n      self.seed = seed\n  \n  def random(self):\n      self.seed = (LCG.a * self.seed + LCG.c) % LCG.m\n      return self.seed / LCG.m"}, "2446": {"problem_id": 4807, "answer": "def search_names(logins):\n    return filter(lambda x: x[0][-1] == \"_\", logins)"}, "2447": {"problem_id": 4808, "answer": "def equalize(arr):\n    return [\"%s %s %s\".format(a+b, a-b, b) for a, b in zip(arr, arr[1:])]"}, "2448": {"problem_id": 4809, "answer": "def encode(s):\n    return ''.join(c.lower() if c.isalpha() else c for c in s)\n"}, "2449": {"problem_id": 4810, "answer": "def make_spanning_tree(edges, t):\n    v=[]\n    for edge in edges:\n        v.append(edge[1])\n        v.append(edge[2])\n        if t==\"min\":\n            v.extend(sorted(edge[0]))\n        elif t==\"max\":\n            v.extend(sorted(edge[1]))\n        else:\n            v.extend(edge[0])\n    return v"}, "2450": {"problem_id": 4811, "answer": "class Vector(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self, other):\n        return Vector(self.x + other.x, self.y + other.y)"}, "2451": {"problem_id": 4812, "answer": "def nth_floyd(n):\n    return list(range(n))[n-1]"}, "2452": {"problem_id": 4813, "answer": "get_num = lambda n: \"\".join(sorted(str(n),reverse=True))"}, "2453": {"problem_id": 4814, "answer": "def is_palindrome(s):\n    return s.lower() == s[::-1].lower()"}, "2454": {"problem_id": 4815, "answer": "def is_very_even_number(n):\n    return n % 10 == 0"}, "2455": {"problem_id": 4816, "answer": "def child(bird1, bird2):\n    return sum(c1!= c2 for c1, c2 in zip(bird1, bird2)) <= 2"}, "2456": {"problem_id": 4817, "answer": "def spread(func, args):\n    return func(*args)"}, "2457": {"problem_id": 4818, "answer": "def solution(a, b):\n    if len(a) > len(b):\n        return b + a + b\n    elif len(a) < len(b):\n        return a + b + a\n"}, "2458": {"problem_id": 4819, "answer": "class SelfClosing(object):\n    def __init__(self, obj):\n        self.obj = obj\n        self.open = False\n        self.closed = False"}, "2459": {"problem_id": 4820, "answer": "class Cat(Animal):\n    def __init__(self, name):\n        self.name = name\n    def speak(self):\n        return \" \".join([self.name, \"meows.\"])"}, "2460": {"problem_id": 4821, "answer": "class FileMaster():\n    def __init__(self, filepath):\n        self.path = filepath\n    def extension(self):\n        return self.path.split('.')[1]\n    def filename(self):\n        return self.path.split('/')[-1]"}, "2461": {"problem_id": 4822, "answer": "from itertools import permutations\ndef mastermind(game):\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n    valid_colors = [\"Red\", \"Orange\", \"Yellow\", \"Orange\"]\n    answer = game.check(colors)\n    return [\"Black\", \"White\"][min(len(answer), 4)]"}, "2462": {"problem_id": 4823, "answer": "def wallpaper(l, w, h):\n    n = 0\n    while n < 20:\n        n += 1\n        if l + w*n > h*n:\n            n += 1\n        elif l + w*n < h*n:\n            n += 1\n        elif l + w*n == h*n:\n            n += 1\n    return \"zero\" if n == 0 else \"ten\""}, "2463": {"problem_id": 4824, "answer": "def get_min_max(seq):\n    lst = seq\n    return lst[0], lst[len(seq)-1]"}, "2464": {"problem_id": 4825, "answer": "def decrypt(test_key):\n    return ''.join(sorted(test_key.lower() for s in test_key))"}, "2465": {"problem_id": 4826, "answer": "import re\ndef count_robots(a):\n    automatik = re.compile(r'\\bautomatik\\b')\n    mechanik = re.compile(r'\\bmechanik\\b')\n    a = [x for x in a if x.lower() in automatik.sub('', 'automatik')) + [x for x in a if x.lower() in mechanik.sub('','mechanik'))]\n    return [len(a), '{} robots {} and {} robots {}'.format(automatik.group(0), mechanik.group(0), automatik.group(1), mechanik.group(2))]"}, "2466": {"problem_id": 4827, "answer": "def stats_disc_distr(distrib):\n    p = 0\n    for x, p in distrib:\n        p += p\n        if isinstance(x, float):\n            p = p / float(x)\n    var = sum(p**2 for p in distrib)\n    stan = sum((x - mean)**2 for x, mean in zip(distrib, distrib[1:]))**.5\n    return [1.0, var/stan, var/stan**.5]"}, "2467": {"problem_id": 4828, "answer": "def count_squareable(n):\n    return sum(1 for x in range(1,n+1) if x%4==0)"}, "2468": {"problem_id": 4829, "answer": "def compose(f,g):\n    return lambda *args: f(g(*args))"}, "2469": {"problem_id": 4830, "answer": "def riemann_trapezoidal(f, n, a, b):\n    dx = (b-a)/n\n    return round(f(a+dx*dx) + f(a+dx*(dx-.5) + dx*(.5-.5)*dx),2)"}, "2470": {"problem_id": 4831, "answer": "def solved(string):\n    return ''.join(sorted(string, key=lambda x: len(x)))"}, "2471": {"problem_id": 4832, "answer": "def all_non_consecutive(arr):\n    return [{'i': i, 'n': n} for i, n in enumerate(arr[1:], 1) if n!= arr[i-1] and n not in arr[i-2:]]"}, "2472": {"problem_id": 4833, "answer": "def replace_exclamation(s):\n    return ''.join('!' if c in 'aeiouAEIOU' else c for c in s)"}, "2473": {"problem_id": 4834, "answer": "def is_prime(n):\n    return n > 1 and all(n%i for i in range(2, int(n**0.5)+1))\n\ndef backwardsPrime(start, stop):\n    return list(filter(is_prime, range(start, stop+1)))"}, "2474": {"problem_id": 4835, "answer": "def okkOokOo(s):\n    s = s.lower()\n    return ''.join(chr(int(i, 2) + 65) for i in s.split('? '))"}, "2475": {"problem_id": 4836, "answer": "def elapsed_seconds(start, end):\n    from datetime import timedelta\n    return (end - start).seconds"}, "2476": {"problem_id": 4837, "answer": "import re\nD = {'JAN':0,'FEB':1,'MAR':2,'APR':3,'MAY':4,'JUN':5,'JUL':6,'AUG':7,'SEP':8,'OCT':9,'NOV':10,'DEC':11,'APRIL':12,'MAYS':13,'DECEMBER':14}\ndef parse(s):\n    s = re.sub(r'\\d+', lambda m: D[int(m.group())], s)\n    s = re.sub(r'\\*', lambda m: sorted(m.group().split()), s)\n    s = re.sub(r'\\s+',''*len(s.split()), s)\n    s = re.sub(r'\\.[^.]+', lambda m: m.group().upper(), s)\n    s = re.sub(r'\\s+',''.join(s.split()), s)\n    return '\\n'.join(str(i) for i in sorted(s.split()))"}, "2477": {"problem_id": 4838, "answer": "def find_nth_occurrence(substring, string, occurrence=1):\n    i = 0\n    while i < occurrence and string.startswith(substring, i):\n        i += 1\n    return i"}, "2478": {"problem_id": 4839, "answer": "from math import ceil\ndef new_avg(arr, newavg):\n    if arr.count(1) > 1:\n        raise ValueError\n    x = ceil(newavg * (len(arr) + 1) / (len(arr) + 1 - len(arr[0])))\n    return x"}, "2479": {"problem_id": 4840, "answer": ""}, "2480": {"problem_id": 4841, "answer": "from math import sin, pi\n\ndef simpson(n):\n    a, b = 0, pi\n    h = (b-a)/n\n    f = lambda x: sin(x)**3\n    return f(a) + sum(f(a+i*h) for i in range(1, n//2+1))"}, "2481": {"problem_id": 4842, "answer": "from random import random\ndef mutate(chromosome, p):\n    return ''.join(str(1-random()) for _ in chromosome)"}, "2482": {"problem_id": 4843, "answer": "import itertools\ndef choose_best_sum(t, k, ls):\n    c=sorted(ls,reverse=True)\n    return max(sum(i) for i in c if sum(i)<=t)"}, "2483": {"problem_id": 4844, "answer": "def get_password(grid,directions):\n    pwd = \"\".join(grid)\n    n = len(pwd)\n    directions = [0,1,0,-1]\n    x,y = 0,0\n    for i in range(n):\n        for j in range(n):\n            if directions[0] == 0:\n                x += grid[i][j]\n            elif directions[1] == 0:\n                y += grid[i][j]\n            elif directions[0] == 1:\n                x -= grid[i][j]\n            elif directions[1] == 1:\n                y -= grid[i][j]\n    return \"\".join(grid.copy())"}, "2484": {"problem_id": 4845, "answer": "def sort_nested_list(A):\n    return sorted(sorted(enumerate(A), key=lambda x: x[1]), key=lambda x: x[0])"}, "2485": {"problem_id": 4846, "answer": "def calculate_total(subtotal, tax, tip):\n    return round(subtotal * (100 + tax + tip)/100, 2)"}, "2486": {"problem_id": 4847, "answer": "from fractions import gcd\ndef count_black_cells(h, w):\n    return h + w + gcd(h, w) - 2"}, "2487": {"problem_id": 4848, "answer": "def char_freq(message):\n    d = {}\n    for i in message:\n        d[i] = d.get(i,0) + 1\n    return d"}, "2488": {"problem_id": 4849, "answer": "import re\ndef my_very_own_split(string, delimiter = None):\n    if delimiter == '':\n        return string.replace(delimiter, '', '')\n    r = re.split(r'\\s+', string)\n    return r"}, "2489": {"problem_id": 4850, "answer": "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n    return (n1 + n2) * R * (temp + 273.15) / volume"}, "2490": {"problem_id": 4851, "answer": "def sort_ranks(ranks):\n    return sorted(ranks, key=lambda x: x.split('.'))"}, "2491": {"problem_id": 4852, "answer": "def interpreter(tape):\n    stack = [0]\n    output = ''\n    \n    while stack:\n        command = tape[stack.pop()]\n        if command == '^':\n            stack.append(0)\n        elif command == '!':\n            stack.append(0)\n        elif command == '+':\n            stack[-1] += 1\n        elif command == '-':\n            stack[-1] -= 1\n        elif command == '*':\n            output += chr(stack.pop() & 0b11100000)\n        elif command == '[' and stack[-1] == 0b:\n            pass\n        elif command == ']' and stack[-1]!= 0b:\n            print(command)\n            stack.pop()\n        elif command == '^' and stack[-1]!= 0b:\n            print(command)\n            stack.pop()\n        elif command == '!':\n            stack.pop()\n        elif command == '+':\n            stack[-1] += 1\n        elif command == '-':\n            stack[-1] -= 1\n        elif command == '*':\n            output += chr(stack.pop() & 0b11100000)"}, "2492": {"problem_id": 4853, "answer": "def double_char(s):\n    return ''.join(c*2 for c in s)"}, "2493": {"problem_id": 4854, "answer": "from math import sqrt\ndef count_circles(list_of_circles, point):\n    r = 3.14*point[0]**2 + 3.14*point[1]**2 + 3.14*point[2]**2\n    d = sqrt(r)\n    return sum(1 for i in range(len(list_of_circles)) if list_of_circles[i][0]**2 + list_of_circles[i][1]**2 + list_of_circles[i][2]**2 < d)"}, "2494": {"problem_id": 4855, "answer": "def vert_mirror(strng):\n    return '\\n'.join([x[::-1] for x in strng.split('\\n')])\ndef hor_mirror(strng):\n    return '\\n'.join(reversed(strng.split('\\n')))\ndef oper(fct, s):\n    return fct(s)"}, "2495": {"problem_id": 4856, "answer": "def adjust(coin, price):\n    if price % coin == 0:\n        return price + coin"}, "2496": {"problem_id": 4857, "answer": "def square_up(n):\n    return [0] * n.bit_length()[n&1:n+1]"}, "2497": {"problem_id": 4858, "answer": "def j(n):\n    return [i for i in range(1, n + 1)]\n\ndef ann(n):\n    return [i for i in range(1, n + 1)]\n\ndef john(n):\n    return [i for i in range(1, n + 1)]\n\ndef sum_john(n):\n    return sum(john(n))\n\ndef sum_ann(n):\n    return sum(ann(n))"}, "2498": {"problem_id": 4859, "answer": "from itertools import permutations\ndef ssc_forperm(arr):\n    perms = [sum(i*n for i,n in enumerate(arr)) for n in permutations(arr)]\n    return [{\"total perm\": len(arr)}, {\"total ssc\": sum(arr) * len(arr)}]"}, "2499": {"problem_id": 4860, "answer": "def amidakuji(ar):\n    # Your code here\n    lst = []\n    for i in range(len(ar)):\n        if ar[i] == \"1\":\n            lst.append(i)\n    return lst"}, "2500": {"problem_id": 4861, "answer": "def get_number_of_squares(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**2\n    return s"}, "2501": {"problem_id": 4862, "answer": "def put_the_cat_on_the_table(cat, room):\n    if not set(room).issubset(set(cat)):\n        return \"NoCat\"\n    else:\n        return \"RDD\" if cat[0]>=0 and cat[1]>=0 else \"DRD\" if cat[0]<0 and cat[1]<0 else \"DDR\""}, "2502": {"problem_id": 4863, "answer": "def circularly_sorted(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] > arr[i+1]:\n            return False\n        i += 1\n    return True"}, "2503": {"problem_id": 4864, "answer": "import re\ndef remove(s):\n    s = re.sub(r'!*\\w+!', '', s)\n    s = re.sub(r'!*\\w+!', '', s)\n    return''.join(s[i] for i in range(len(s)))"}, "2504": {"problem_id": 4865, "answer": "def multiply(a,b):\n    return a*b"}, "2505": {"problem_id": 4866, "answer": "def split_all_even_numbers(numbers, way):\n    return [numbers[i] for i in range(0, len(numbers)) if numbers[i] % 2 == 0]"}, "2506": {"problem_id": 4867, "answer": "def chess_board_cell_color(cell1, cell2):\n    return sum(ord(c) for c in 'ABCDEFGH' if c[0] == cell1[0] == cell2[0] and c[1] == cell1[1] == cell2[1]) % 2 == 0"}, "2507": {"problem_id": 4868, "answer": "import subprocess\ndef get_output(s):\n    return subprocess.check_output(s).decode('utf-8')"}, "2508": {"problem_id": 4869, "answer": "import json\ndef find_seventh_sons_of_seventh_sons(jstring):\n    s = []\n    for i in range(7):\n        if i%2==0:\n            s.append(i)\n        else:\n            s.append(i+1)\n    return set(json.dumps(s, sort_keys=True))"}, "2509": {"problem_id": 4870, "answer": "def redistribute_wealth(wealth):\n    wealth[:] = [x / y for x, y in zip(wealth, sorted(wealth))]\n    return ''.join(wealth)"}, "2510": {"problem_id": 4871, "answer": "from collections import Counter\n\ndef letter_frequency(text):\n    return sorted(Counter(text.lower()).most_common(), key=lambda c: (-c[1], c[0]))"}, "2511": {"problem_id": 4872, "answer": "class Num(object):\n    def __init__(self,s,a,b): self.s=s\n    def add(self,x): self.s+=x\n    def sub(self,x): self.s-=x\n    def mul(self,x): self.s*=x\n    def truediv(self,x): self.s//=x\n    def pow(self,x): self.s**=x\n    def mod(self,x): self.s%=x\n    def floordiv(self,x): self.s//=x\n    def modf(self,x): self.s%=x\n    def modm(self,x): self.s%=x\n    def mod1(self,x): self.s%=x\n    def mod2(self,x): self.s%=x\n    def mod3(self,x): self.s%=x\n    def mod4(self,x): self.s%=x\n    def mod5(self,x): self.s%=x\n    def mod6(self,x): self.s%=x\n    def mod7(self,x): self.s%=x\n    def mod8(self,x): self.s%=x\n    def mod9(self,x): self.s%=x\n    def pr(self,x): self.s+=(x*x)\n    def rl(self,x): self.s=x\n    def gcd(self,x): self.s%=x\n    def lcm(self,x): self.s/=x\n    def ceil(self,n,m): self.s+=m\n    def trunc(self,x): self.s-=x\n    def isclose(self,x,y): return abs(x-y)<=self.gcd(x)"}, "2512": {"problem_id": 4873, "answer": "def distance_between_points(a, b):\n    return ((a.x - b.x)**2 + (a.y - b.y)**2 + (a.z - b.z)**2)**0.5"}, "2513": {"problem_id": 4874, "answer": "def travel(r, zipcode):\n    return zipcode.split(' ').sort()[::-1][len(zipcode)] + '/' + r"}, "2514": {"problem_id": 4875, "answer": "def is_valid_coordinates(coordinates):\n    try:\n        x = coordinates.split(',')\n        y = coordinates.split(',')\n        if len(x)!= len(y):\n            return False\n        if 'e' in x and 'e' not in y:\n            return False\n        elif 'q' in x and 'q' not in y:\n            return False\n        elif's' in x and's' not in y:\n            return False\n        elif 'S' in x and 'S' not in y:\n            return False\n        elif 'd' in x and 'd' not in y:\n            return False\n        elif 'C' in x and 'C' not in y:\n            return False\n        elif 'w' in x and 'w' not in y:\n            return False\n        elif 'W' in x and 'W' not in y:\n            return False\n        else:\n            return True\n    except:\n        return False"}, "2515": {"problem_id": 4876, "answer": "def hello(name='World'):\n    if name == '':\n        return 'Hello, World!'\n    else:\n        name = name.capitalize()\n        return 'Hello,'+ name + '!'"}, "2516": {"problem_id": 4877, "answer": "import itertools as it\ndef love_language(partner, weeks):\n    d = {'words':0, 'acts':0, 'gifts':0, 'time':0, 'touch':0}\n    for lang in it.permutations(LOVE_LANGUAGES, weeks*7):\n        if partner.response(lang) == 'positive':\n            d['words'] += 1\n        elif partner.response(lang) == 'neutral':\n            d['acts'] += 1\n        elif partner.response(lang) == 'negative':\n            d['gifts'] += 1\n        elif partner.response(lang) == 'false':\n            d['time'] += 1\n    return''.join(d.keys())"}, "2517": {"problem_id": 4878, "answer": "import inspect\ndef check_generator(gen):\n    status = inspect.getgeneratorstate(gen)\n    return \"Created\" if status == \"GEN_CREATED\" else \"Started\" if status == \"GEN_RUNNING\" else \"Finished\""}, "2518": {"problem_id": 4879, "answer": "from collections import Counter\nfrom functools import reduce\nfrom operator import mul\ncount_perms=lambda m,c=__import__('itertools').accumulate:reduce(mul,c(m),0)"}, "2519": {"problem_id": 4880, "answer": "class anything:\n    def __init__(self, foo):\n        self.foo = foo\n    "}, "2520": {"problem_id": 4881, "answer": "import re\ndef camelize(s):\n    return \"\".join([i.capitalize() for i in re.split(r'[\\W_]', s)])"}, "2521": {"problem_id": 4882, "answer": "def round_to_next5(n):\n    if n%5==0:\n        return n\n    else:\n        return round_to_next5(n+5)"}, "2522": {"problem_id": 4883, "answer": "def is_prime(n):\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(n**.5)+1,2):\n            if n%i==0:\n                return False\n        return True"}, "2523": {"problem_id": 4884, "answer": "def connect_the_dots(paper):\n    l = paper.split('\\n')\n    l.reverse()\n    res = []\n    for i in range(len(l)):\n        res.append(''.join(l[i]))\n    return ''.join(res)"}, "2524": {"problem_id": 4885, "answer": "def find_gatecrashers(people, invitations):\n    inv = []\n    for i in invitations:\n        inv.append(i[0][1])\n        inv.extend(i[1])\n    return sorted(set(people) & inv)"}, "2525": {"problem_id": 4886, "answer": "from collections import Counter\ndef find_dups_miss(arr):\n    c = Counter(arr)\n    return sorted(c.values())"}, "2526": {"problem_id": 4887, "answer": "def days(date, month, year):\n    d = 2437-date\n    y = 2436-date\n    m = month//10\n    return 365*y//100+m//4"}, "2527": {"problem_id": 4888, "answer": "def recaman(n):\n    s = 0\n    seq = [0]\n    for i in range(1, n+1):\n        s += i\n        seq.append(s)\n    return seq[n]"}, "2528": {"problem_id": 4889, "answer": "from itertools import cycle\ndef max_hexagon_beam(n: int, seq: tuple):\n    hexagon = cycle(range(2, n+1))\n    sum_l = [0]*n\n    for i in range(n):\n        sum_l[i] = hexagon[i]\n        for j in range(i+1, n):\n            sum_l[i] += hexagon[j]\n            sum_l[j] += hexagon[i]\n            \n    max_l = max(sum_l[i] for i in range(n))\n    max_l = max(max_l, sum_l[n-1])\n    return max_l"}, "2529": {"problem_id": 4890, "answer": "def find_difference(a, b):\n    vol1 = 1\n    vol2 = 1\n    for i in a:\n        vol1 *= i\n    for i in b:\n        vol2 *= i\n    return abs(vol1 - vol2)"}, "2530": {"problem_id": 4891, "answer": "class Datamining:\n    def __init__(self, train_set):\n        self.X = list(sorted(train_set, reverse=True))\n        self.b = sum(x ** 2 for x in self.X) / len(self.X)\n        self.m = self.b ** 0.5\n        self.p = round(self.m + self.b, 0)\n        \n    def predict(self, x):\n        return self.X[x]"}, "2531": {"problem_id": 4892, "answer": ""}, "2532": {"problem_id": 4893, "answer": "def wave_sort(a):\n    a.sort()\n    return a"}, "2533": {"problem_id": 4894, "answer": "def makeParts(arr, chunkSize):\n    return [arr[i:i+chunkSize] for i in range(0, len(arr), chunkSize)]"}, "2534": {"problem_id": 4895, "answer": "def actually_really_good(foods):\n    return \"You know what's actually really good? {}\".format(\"{} and more {}\".format(foods[0].capitalize(), foods[1].capitalize()))"}, "2535": {"problem_id": 4896, "answer": "def build_trie(*words):\n    trie = {}\n    for word in words:\n        trie[word[0]] = trie.get(word[0], None) + {}\n    return trie"}, "2536": {"problem_id": 4897, "answer": "def binary_gcd(x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif x.bit_length() == 1 or y.bit_length() == 1:\n        return bin(max(x,y)).count('1')\n    else:\n        return binary_gcd(x%2,y%2)"}, "2537": {"problem_id": 4898, "answer": "def digit_all (x):\n    if isinstance(x, str):\n        return ''.join(c for c in x if c.isdigit())\n    return 'Invalid input!'"}, "2538": {"problem_id": 4899, "answer": "from math import e\ndef weight(n, w):\n    return 0.14849853757254047*(1-e**(1/n))*w"}, "2539": {"problem_id": 4900, "answer": "import math\ndef f(z, eps):\n    if abs(z) >= 1: return -1\n    n = int(math.log(eps) / math.log(abs(z)))\n    if abs(z) >= n: return n\n    return n + 1"}, "2540": {"problem_id": 4901, "answer": "from fractions import gcd\n\ndef calculate_ratio(w, h):\n    return '{}:{}'.format(w//gcd(w, h), h//gcd(w, h))"}, "2541": {"problem_id": 4902, "answer": "def show_me(instname):\n    attrs = sorted(instname.__dict__.keys())\n    return \"Hi, I'm one of those {}s! Have a look at my {}.\".format(instname.__class__.__name__, ', '.join(sorted(attrs)))"}, "2542": {"problem_id": 4903, "answer": "def nthterm(first, n, c):\n    return first + (n * c)"}, "2543": {"problem_id": 4904, "answer": "from collections import Iterable\n\ndef unpack(l):\n    return [x for x in l if isinstance(x, Iterable) and not isinstance(x, dict)]"}, "2544": {"problem_id": 4905, "answer": "def answer(puzzlebox):\n    print(puzzlebox)\n    return 42"}, "2545": {"problem_id": 4906, "answer": "def traffic_lights(road, n):\n    lights = [road[i:i+2] for i in range(0,len(road),2)]\n    lights.append(''.join(sorted(lights, key=lambda x: x[0])))\n    car = 0\n    inter = 0\n    for i in range(n):\n        if lights[i] == 'C':\n            car += 1\n        elif lights[i] == 'R':\n            car -= 1\n        elif lights[i] == 'G':\n            inter += 1\n        else:\n            car = 0\n            inter = 0\n            lights[i] = '.'\n            \n    return lights"}, "2546": {"problem_id": 4907, "answer": "def candles(m, n):\n    l = m\n    r = n\n    while l < r:\n        l, r = r, l + 1\n    return r"}, "2547": {"problem_id": 4908, "answer": "def epidemic(tm, n, s0, i0, b, a):\n    S, I, R = [s0, i0, 0], [0, 0, 0], [0, 0, 0]\n    for _ in range(tm):\n        S[0], I[0], R[0] = S[0], I[0], R[0] + I[0] * a\n        S[1], I[1], R[1] = S[1], I[1], R[1] - I[1] * a\n        S[2], I[2], R[2] = S[2], I[2], R[2] + I[2] * a\n        S[3], I[3], R[3] = S[3], I[3], R[3] - I[3] * a\n        S[4], I[4], R[4] = S[4], I[4], R[4] + I[4] * a\n        S[5], I[5], R[5] = S[5], I[5], R[5] - I[5] * a\n        S[6], I[6], R[6] = S[6], I[6] + I[6] * a\n        S[7], I[7], R[7] = S[7], I[7] - I[7] * a\n        S[8], I[8], R[8] = S[8], I[8] + I[8] * a\n        S[9], I[9], R[9] = S[9], I[9] - I[9] * a\n        S[10], I[10], R[10] = S[10], I[10] + I[10] * a\n        S[11], I[11], R[11] = S[11], I[11] - I[11] * a\n        S[12], I[12], R[12] = S[12], I[12] + I[12] * a\n        S[13], I[13], R[13] = S[13], I[13] - I[13] * a\n        S[14], I[14], R[14] = S[14], I[14] + I[14] * a\n        S[15], I[15], R[15] = S[15], I[15] - I[15] * a\n        S[16], I[16], R[16] = S[16], I[16] + I[16] * a\n        S[17], I[17], R[17] = S[17], I[17] - I[17] * a\n        S[18], I[18], R[18] = S[18], I[18] + I[18] * a\n        S[19], I[19], R[19] = S[19], I[19] - I[19] * a\n        S[20], I[20], R[20] = S[20], I[20] + I[20] * a\n        S[21], I[21], R[21] = S[21], I[21] - I[21] * a\n        S[22], I[22], R[22] = S[22], I[22] + I[22] * a\n        S[23], I[23], R[23] = S[23], I[23] - I[23] * a\n        S[24], I[24], R[24] = S[24], I[24] + I[24] * a\n        S[25], I[25], R[25] = S[25], I[25] - I[25] * a\n  "}, "2548": {"problem_id": 4909, "answer": "class Random():\n    def __init__(self, seed):\n        self.seed = seed\n    def random(self):\n        return self.seed / 2**32 + (self.seed - 1) / 2**32 * math.pow(2, 32 - int(math.floor(self.seed)), 0.5)"}, "2549": {"problem_id": 4910, "answer": "from fractions import Fraction\n\ndef to_string(self):\n    n, d = self.numerator, self.denominator\n    s =''.join(str(n) for n in self.whole)\n    return f'{s}/{s.isnumeric() and int(s[:2]) or '-1/2'}'"}, "2550": {"problem_id": 4911, "answer": "def sum_arrays(arrays, shift):\n    lst = []\n    for i in range(len(arrays)):\n        lst.append([arrays[i][0],shiften(arrays[i][1:])])\n    return lst"}, "2551": {"problem_id": 4912, "answer": "def html_end_tag_by_start_tag(s):\n    return \"</{}>\".format(s[0:1].replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\").replace(\"\\n\", \"&#10;\").replace(\"\\r\", \"&#10;\"))"}, "2552": {"problem_id": 4913, "answer": ""}, "2553": {"problem_id": 4914, "answer": "def position(alphabet):\n    return \"Position of alphabet: {}\".format(ord(alphabet) - 96)"}, "2554": {"problem_id": 4915, "answer": "rake_garden = lambda g:''.join(g.splitlines()[1:-1])"}, "2555": {"problem_id": 4916, "answer": "import itertools\ndef get_primes(how_many, group_size=2):\n    primes = [2] + [p for p in range(3, how_many**group_size, 2) if all(p % q!= 0 for q in primes)]\n    return list(itertools.chain.from_iterable(sorted(set(primes)), key=lambda x: x[0]))"}, "2556": {"problem_id": 4917, "answer": "def validBraces(string):\n    stack = []\n    for c in string:\n        if c == '{':\n            stack.append('{}')\n        elif c == '()':\n            stack.append('()')\n        elif c == '[':\n            stack.append('([{}])')\n        else:\n            stack.append(c)\n    return len(stack) == 0"}, "2557": {"problem_id": 4918, "answer": "def convert(n):\n    a, b = divmod(n, 10)\n    return [a, b]"}, "2558": {"problem_id": 4919, "answer": "def grid_index(grid, indexes):\n    return ''.join(grid[i] for i in indexes)"}, "2559": {"problem_id": 4920, "answer": "from fractions import gcd\nMIN = lambda a, b: a / gcd(a, b) if a else b"}, "2560": {"problem_id": 4921, "answer": "letters = {\n    \"A\": \"Alpha\",\n    \"B\": \"Bravo\",\n    \"C\": \"Charlie\",\n    \"D\": \"Delta\",\n    \"E\": \"Echo\",\n    \"F\": \"Foxtrot\",\n    \"G\": \"Golf\",\n    \"H\": \"Hotel\",\n    \"I\": \"India\",\n    \"J\": \"Jumping Dutch\",\n    \"K\": \"Kilo\",\n    \"L\": \"Lima\",\n    \"M\": \"Mike\",\n    \"N\": \"November\",\n    \"O\": \"Oscar\",\n    \"P\": \"Papa\",\n    \"Q\": \"Quebec\",\n    \"R\": \"Romeo\",\n    \"S\": \"Sierra\",\n    \"T\": \"Tango\",\n    \"U\": \"Uniform\",\n    \"V\": \"Victor\",\n    \"W\": \"Whiskey\",\n    \"X\": \"X-ray\",\n    \"Y\": \"Yankee\",\n    \"Z\": \"Zulu\"\n}\n"}, "2561": {"problem_id": 4922, "answer": "def list_to_array(lst):\n    return [lst.value for lst in lst]"}, "2562": {"problem_id": 4923, "answer": "from collections import Counter\n\ndef count_feelings(s, arr):\n    cnt = 0\n    for feeling in arr:\n        cnt += Counter(s).count(feeling)\n    return '%s feeling.' % ('anger' if feeling.lower() not in 'awe' else 'awe')"}, "2563": {"problem_id": 4924, "answer": "class PokeScan:\n    def __init__(self, name, level, pkmntype):\n        self.name = name\n        self.level = level\n        self.pkmntype = pkmntype\n        \n    @property\n    def type(self):\n        return self.pkmntype[0]"}, "2564": {"problem_id": 4925, "answer": "def collatz(n):\n    seq = []\n    while n!= 1:\n        seq.append(n)\n        n = n//2 if n % 2 == 0 else 3*n + 1\n    return '->'.join(f'{i}->{next(seq)}' for i in range(1, n + 1))"}, "2565": {"problem_id": 4926, "answer": "def only_one(*args):\n    return sum(1 for x in args if x)"}, "2566": {"problem_id": 4927, "answer": "from functools import reduce\nfrom operator import xor\nfrom scipy.special import comb\n\n\ndef transform(A, x):\n    return reduce(xor, A)\n\n\ndef is_pow(n, exp):\n    return n == 1 or pow(n, exp - 2, n) == 1\n\n\ndef transform_lcm(A, x):\n    return F(A, x) if is_pow(len(A), 4) else F(A, x.lcm())"}, "2567": {"problem_id": 4928, "answer": "def binRota(arr):\n    return [n for n in arr[i::2] for i in range(len(arr[0]))]"}, "2568": {"problem_id": 4929, "answer": "def get_diagonale_code(grid: str) -> str:\n    \"\"\" Get a decoded message as a string. \"\"\"\n    grid = grid.split('\\n')\n    res = []\n    for i in range(len(grid)):\n        res.append(grid[i].ljust(2,''))\n    return ''.join(res)"}, "2569": {"problem_id": 4930, "answer": "from itertools import combinations\ndef find_zero_sum_groups(arr, n):\n    if not arr: return \"No elements to combine\"\n    r = sorted(sorted(set(combinations(arr, n)), key=lambda x: sum(x[0] for x in x)), reverse=True)\n    return r"}, "2570": {"problem_id": 4931, "answer": "def different_squares(matrix):\n    return len({(i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n        (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n            (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                    (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                        (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                            (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                    (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                        (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                           (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                              (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                                 (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                                    (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                                       (i, j) for i in range(len(matrix)) for j in range(len(matrix[i])) for square in [\n                                                          (i, j) for i in range"}, "2571": {"problem_id": 4932, "answer": "def find_solution(puzzle):\n    n = len(puzzle)\n    rows = [0] * n\n    cols = [0] * n\n    for i in range(n):\n        rows[i] = int(puzzle[i][0] == '0') + 1\n        cols[i] = int(puzzle[i][1] == '0') + 1\n    \n    # toggleRows\n    toggleRows = [0] * n\n    for i in range(n):\n        toggleRows[i] = rows[i]\n    "}, "2572": {"problem_id": 4933, "answer": "from random import choice\ndef random_case(x):\n    return ''.join(choice(c for c in x if c.isalpha()))"}, "2573": {"problem_id": 4934, "answer": "from itertools import chain\n\ndef sort(words):\n    return sorted(chain.from_iterable(words), key=lambda word: (len(word), word))"}, "2574": {"problem_id": 4935, "answer": "def infected(s):\n    total = 0\n    infected = 0\n    for i in s:\n        if i.isalpha() and i.isdigit():\n            total += int(i)\n        elif i.isalpha() and i.isdigit() and i.isalnum():\n            infected += int(i)\n    return infected"}, "2575": {"problem_id": 4936, "answer": "def reverse(lst):\n    return list(lst)[::-1]"}, "2576": {"problem_id": 4937, "answer": "def martingale(bank, outcomes):\n    stake = 100\n    for i in outcomes:\n        if i == 1:\n            bank += stake\n        else:\n            bank += stake * 2\n    return bank"}, "2577": {"problem_id": 4938, "answer": "def count_char(s, c):\n    return s.lower().count(c.lower())"}, "2578": {"problem_id": 4939, "answer": "def coffee_limits(year, month, day):\n    h = int(year) * 12 + int(month) * 4 + int(day)\n    CAFE, DECAF = 12, 0\n    while h > 0:\n        h -= 50000\n        h *= 12\n        if \"dead\" in str(h):\n            return [DECAF, CAFE]\n        elif h > DECAF:\n            DECAF, CAFE = h, 0\n        else:\n            CAFE, DECAF = DECAF, h\n    return [DECAF, CAFE]"}, "2579": {"problem_id": 4940, "answer": "def shut_the_gate(farm):\n    r = \"\".join(f\"{c}|{a}\" for a,c in enumerate(farm))\n    return farm.translate(str.maketrans(\"|\", \"\").replace(\"|\", \"\").replace(\"\\|\", \"\"))"}, "2580": {"problem_id": 4941, "answer": "def lineup_students(s):\n    return sorted(s.split(), key=lambda x: (len(x), x), reverse=True)"}, "2581": {"problem_id": 4942, "answer": "def directions(goal):\n    N, S, E, W = goal.pop(0)\n    return [N, S, E, W] if goal else []"}, "2582": {"problem_id": 4943, "answer": "def string_counter(string, char):\n    return sum(1 for i in string if i == char)"}, "2583": {"problem_id": 4944, "answer": "from math import sqrt\nclass Vector:\n    def __init__(self, *args):\n        self.x, self.y, self.z = args[0], args[1], args[2]\n        self.magnitude = sqrt(pow(self.x,2) + pow(self.y,2) + pow(self.z,2))\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)\n    def cross(self, other):\n        return Vector(self.x * other.y - self.y * other.x, self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z)\n    def dot(self, other):\n        return self.x * other[0] + self.y * other[1] + self.z * other[2]"}, "2584": {"problem_id": 4945, "answer": "from collections import Counter\n\ndef two_by_two(animals):\n    return {animal: 2 for animal in set(animals) if animals.count(animal) >= 2} if animals else False"}, "2585": {"problem_id": 4946, "answer": "def house_numbers_sum(inp):\n    sum = 0\n    for x in inp:\n        if x == 0:\n            break\n        sum += x\n    return sum"}, "2586": {"problem_id": 4947, "answer": "sel_number=lambda n,d:sorted(set(range(n,n+d,2)))"}, "2587": {"problem_id": 4948, "answer": "def resistor_parallel(*resistors):\n    return 1 / sum(1.0 / r for r in resistors)"}, "2588": {"problem_id": 4949, "answer": "from math import cos, sin, pi\ndef crusoe(n, d, ang, dist_mult, ang_mult):\n    x, y = 0, 0\n    for i in range(n):\n        x += d * cos(ang * pi / 180)\n        y += d * sin(ang * pi / 180)\n    return (x, y)"}, "2589": {"problem_id": 4950, "answer": "def find_initial_numbers (divisor, iterations):\n    a, b = divisor, 0\n    for i in range(iterations):\n        a, b = b, a + b\n    return a, b"}, "2590": {"problem_id": 4951, "answer": "def ip_to_int32(ip):\n    return int(''.join(sorted(map(str, ip.split('.'))))[2:], 2)"}, "2591": {"problem_id": 4952, "answer": "class partial_keys(dict):\n    def __getitem__(self, key):\n        return next((v for k, v in self.items() if k.startswith(key)), None)"}, "2592": {"problem_id": 4953, "answer": "class Pong:\n    def __init__(self, max_score):\n        self.max_score = max_score\n        self.player = (0,0)\n        self.scores = {'Player 1': 0, 'Player 2': 0}\n        self.turn = 0\n        \n    def play(self, ball_pos, player_pos):\n        if self.scores['Player 1'] >= self.max_score:\n            return 'Game Over!'\n        elif self.scores['Player 2'] >= self.max_score:\n            return 'Player 1 has won the game!'\n        elif self.turn == 1:\n            self.scores['Player 1'] += 1\n            self.scores['Player 2'] -= 1\n            self.turn = 0\n        elif self.turn == 0:\n            self.scores['Player 1'] -= 1\n            self.scores['Player 2'] += 1\n            self.turn = 1"}, "2593": {"problem_id": 4954, "answer": "import re\nclass WordDictionary:\n    def __init__(self):\n        self.dic = {}\n    def add_word(self, word):\n        if word not in self.dic:\n            self.dic[word] = 1\n        else:\n            self.dic[word] += 1\n    def search(self, pattern):\n        if pattern not in self.dic:\n            return False\n        return self.dic.get(pattern)"}, "2594": {"problem_id": 4955, "answer": "from operator import mul\nfrom functools import reduce\n\ndef ride(group,comet):\n    s = ''.join(chr(ord('A') + i) for i in group) + ''.join(chr(ord('Z') - 26 * i) for i in comet)\n    return 'GO' if reduce(mul, map(int, s), 2) % 47 == s[0] % 47 else 'STAY'"}, "2595": {"problem_id": 4956, "answer": "def protein_synthesis(dna):\n    rna, protein = dna.translate(str.maketrans('GCAT', 'CGU'))\n    rna = rna.translate(str.maketrans('AUU', 'UUU'))\n    rna = rna.translate(str.maketrans('GGU', 'GCU'))\n    rna = rna.translate(str.maketrans('UGC', 'CGU'))\n    rna = rna.translate(str.maketrans('AUG', 'GCU'))\n    rna = rna.translate(str.maketrans('GAU', 'CUU'))\n    rna = rna.translate(str.maketrans('AUA', 'UAC'))\n    rna = rna.translate(str.maketrans('GGC', 'CGG'))\n    rna = rna.translate(str.maketrans('AAT', 'ATA'))\n    rna = rna.translate(str.maketrans('GGG', 'GCC'))\n    rna = rna.translate(str.maketrans('ACG', 'ACC'))\n    rna = rna.translate(str.maketrans('GAA', 'AGA'))\n    rna = rna.translate(str.maketrans('AUA', 'AAU'))\n    rna = rna.translate(str.maketrans('GGG', 'GGU'))\n    rna = rna.translate(str.maketrans('AGC', 'AGG'))\n    rna = rna.translate(str.maketrans('CAU', 'CAA'))\n    rna = rna.translate(str.maketrans('AUU', 'AAG'))\n    rna = rna.translate(str.maketrans('GGC', 'GGC'))\n    rna = rna.translate(str.maketrans('CAA', 'CAG'))\n    rna = rna.translate(str.maketrans('GUU', 'GUU'))\n    rna = rna.translate(str.maketrans('AUU', 'AUU'))\n    rna = rna.translate(str.maketrans('GGC', 'GGC'))\n    rna = rna.translate(str.maketrans('GGG', 'GGG'))\n    rna = rna.translate(str.maketrans('AGC', 'AGC'))\n    rna = rna.translate(str.maketrans('CAU', 'CAA'))\n    rna = rna.translate(str.maketrans('AUU', 'AUU'))\n    rna = rna.translate(str.maketrans('GGC', 'GGC'))\n    rna = rna.translate(str.maketrans('GGG', 'GGG'))\n    rna = rna.translate(str.maketrans('AGC', 'AGC'))\n    rna = rna.translate(str.maketrans('CAU', 'CAA'))\n    rna = rna.translate(str.maketrans('AUU', 'AUU'))\n    rna = rna.translate(str.maketrans('GGC', 'GGC'))\n    rna = rna.translate(str.maketrans('GGG', 'GGG'))\n    rna = rna.translate(str.maketrans('AGC', 'AGC'))\n    rna = rna.translate(str.maketrans('CAU', 'CAA'))\n    rna = rna.translate(str.maketrans('AUU', 'AUU'))\n    rna"}, "2596": {"problem_id": 4957, "answer": "class Dog ():\n  def __init__(self, breed):\n    self.breed = breed\n    \n\nsnoopy = Dog(\"Beagle\")\n\nsnoopy.bark = lambda: \"Woof\"\n\nscoobydoo = Dog(\"Great Dane\")"}, "2597": {"problem_id": 4958, "answer": "def solution(value):\n    return 'Value is {}'.format(value.lstrip('0'))"}, "2598": {"problem_id": 4959, "answer": "def find_ball(scales, ball_count):\n    n = len(balls)\n    balls = range(ball_count)\n    used = set()\n    for i in range(n):\n        used.add(scales.get_weight(balls[i], balls[i+1]))\n        used.add(scales.get_weight(balls[i+1], balls[i]))\n    return -1 if balls[ball_count-1] not in used else sum(used)"}, "2599": {"problem_id": 4960, "answer": "from itertools import count\n\nclass Harshad:\n    @staticmethod\n    def is_valid(number):\n        return number % sum(map(int, str(number))) == 0\n    \n    @staticmethod\n    def get_next(number):\n        return next(f\"{number}\".index(s) for s in count(number))\n    \n    @staticmethod\n    def get_series(n, start=0):\n        return list(map(Harshad.get_next, range(start + 1)))"}, "2600": {"problem_id": 4961, "answer": "def box(coords):\n    return {n: [max(x[i] for i in range(len(x))), min(x[i] for i in range(len(x)))] for n, x in enumerate(coords)}"}, "2601": {"problem_id": 4962, "answer": "def days_until_christmas(day):\n    christmas = day.month + 1\n    return (christmas - n) * 24 * 3600 + n"}, "2602": {"problem_id": 4963, "answer": "def closest_multiple_10(i):\n    return i // 10"}, "2603": {"problem_id": 4964, "answer": "def is_uppercase(inp):\n    return all(i.isupper() for i in inp)"}, "2604": {"problem_id": 4965, "answer": "import re\ndef sum_of_integers_in_string(s):\n    return sum(int(i) for i in re.findall('\\d+',s))"}, "2605": {"problem_id": 4966, "answer": "def fight(robot_1, robot_2, tactics):\n    if robot_1['speed'] > robot_2['speed']:\n        robot_1 = robot_2\n        robot_2 = robot_1\n    elif robot_2['speed'] > robot_1['speed']:\n        robot_2 = robot_1\n        robot_1 = robot_2\n        \n    # Whichever robot has the best speed, will attack first with one battle tactic.\n    if robot_1['health'] >= robot_2['health']:\n        robot_1 = robot_2\n        robot_2 = robot_1\n        \n    # If both robots run out of tactics, the fight is a draw. Return \"The fight was a draw.\"\n    if robot_1['health'] >= robot_2['health'] and robot_1['tactics'] >= robot_2['tactics']:\n        return \"The fight was a draw.\"\n    \n    # Whoever has the most speed attacks first.\n    robot_1['health'] -= tactics[robot_1['tactics'].pop()]\n    robot_2['health'] -= tactics[robot_2['tactics'].pop()]\n    \n    return \"Rocky has won the fight.\""}, "2606": {"problem_id": 4967, "answer": "def knapsack(capacity, items):\n    L = sorted(items, reverse=True)\n    res = [0] * len(L)\n    for i in range(len(L)):\n        res[i] = L[i] // capacity\n    return res"}, "2607": {"problem_id": 4968, "answer": "from fractions import gcd\ndef relatively_prime (n, l):\n    return [i for i in l if gcd(n, i) == 1]"}, "2608": {"problem_id": 4969, "answer": "def tower_builder(n_floors, block_size):\n    w, h = block_size\n    return [f\"{'*' * w}\"] * n_floors"}, "2609": {"problem_id": 4970, "answer": "def vampire_test(x, y):\n    return sorted(str(x) + str(y)) == sorted(str(x) + str(y))"}, "2610": {"problem_id": 4971, "answer": "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef sorted_insert(head, data):\n    head.next = Node(data)\n    return head"}, "2611": {"problem_id": 4972, "answer": "class Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \ndef length(node):\n    return 1 + length(node.next)\n    \ndef count(node, data):\n    return 1 + count(node.next, data)"}, "2612": {"problem_id": 4973, "answer": "def trouble(x, t):\n    return [x[i] for i in range(1, len(x)) if x[i] + x[i-1] == t]"}, "2613": {"problem_id": 4974, "answer": "def user_contacts(data):\n    return {k: v.split(',')[0] for k, v in data.items() if v}"}, "2614": {"problem_id": 4975, "answer": "def solution(n):\n    roman = 'M CM XC D MM VIII L'.split()\n    return roman[int(n/1000)%10] + roman[int(n/90)%10] + roman[int(n/100)%10] + roman[int(n/50)%10] + roman[int(n/25)%10] + roman[int(n/10)%10]"}, "2615": {"problem_id": 4976, "answer": "def search(titles, term):\n    return [title for title in titles if term in title.lower()]"}, "2616": {"problem_id": 4977, "answer": "def goals(laLiga, copaDelRey, championsLeague):\n    return sum([laLiga, copaDelRey, championsLeague])"}, "2617": {"problem_id": 4978, "answer": "def encode(n,strng):\n    res = ''\n    for _ in range(n):\n        res += strng.replace(' ', '')\n    return res.lstrip(' ') + '10 '"}, "2618": {"problem_id": 4979, "answer": "from math import hypot\n\nDIRS = {'\u2190': (0,-1), '\u2191': (-1,0), '\u2192': (0,1), '\u2193': (1,0), '\u2196': (-1,1), '\u2197': (0,-1), '\u2198': (1,1)}\n\ndef count_deaf_rats(town_square):\n    pipper = next(iter(town_square))\n    return sum(hypot(x, pipper[x]) for x in DIRS.keys() if x!= 'P')"}, "2619": {"problem_id": 4980, "answer": "def sort_csv_columns(csv_file_content):\n    d = {}\n    for i in csv_file_content.split('\\n'):\n        d[i[0]] = i[1]\n    "}, "2620": {"problem_id": 4981, "answer": ""}, "2621": {"problem_id": 4982, "answer": "class Game():\n    \n    def __init__(self, board):\n        self.board = board\n        self.board_sq = [0] * (board + 1)\n        self.board_sq[0] = 1\n        self.board_sq[1] = 1\n        self.board_sq[2] = 1\n        self.board_sq[3] = 1\n        self.board_sq[4] = 1\n        self.board_sq[5] = 1\n        self.board_sq[6] = 1\n        self.board_sq[7] = 1\n        self.board_sq[8] = 1\n        self.board_sq[9] = 1\n        self.board_sq[10] = 1\n        self.board_sq[11] = 1\n        self.board_sq[12] = 1\n        self.board_sq[13] = 1\n        self.board_sq[14] = 1\n        self.board_sq[15] = 1\n        self.board_sq[16] = 1\n        self.board_sq[17] = 1\n        self.board_sq[18] = 1\n        self.board_sq[19] = 1\n        self.board_sq[20] = 1\n        self.board_sq[21] = 1\n        self.board_sq[22] = 1\n        self.board_sq[23] = 1\n        self.board_sq[24] = 1\n        self.board_sq[25] = 1\n        self.board_sq[26] = 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n   "}, "2622": {"problem_id": 4983, "answer": "def merge(*dicts):\n    from itertools import chain\n    return list(chain.from_iterable(sorted(dicts)))"}, "2623": {"problem_id": 4984, "answer": "meeting=lambda s:''.join(sorted(filter(str.isalpha,__import__('re').findall(r'(\\w)(\\w)$',s)),key=lambda a:a[1])).rstrip(',')"}, "2624": {"problem_id": 4985, "answer": "def transpose(song, interval):\n    sharp = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    flat = ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab']\n    return [sharp.index(note) + interval * (sharp.index(note) if note.isnumeric() else flat.index(note)) for note in song]"}, "2625": {"problem_id": 4986, "answer": "def f(n, m):\n    return sum(range(n, 0, -1) * (m - n % m))"}, "2626": {"problem_id": 4987, "answer": "def how_many_years (date1,date2):\n    return abs(int(date1.split('/')[0]) - int(date2.split('/')[0]))"}, "2627": {"problem_id": 4988, "answer": "def square(n):\n    return n*n"}, "2628": {"problem_id": 4989, "answer": "def hollow_triangle(n):\n    return [''.join(s) for s in zip(*[iter(['_'*(i-j) for i in range(1, n+1)]*n) for j in range(1, n+1)]))"}, "2629": {"problem_id": 4990, "answer": "def solution(string, ending):\n    # your code here\n    if ending == '':\n        return True\n    else:\n        return string[-len(ending):] == ending"}, "2630": {"problem_id": 4991, "answer": "def mutate_my_strings(s1,s2):\n    return '\\n'.join(s2[i] for i in range(len(s1)) if s1[i]!= s2[i]) + '\\n' + ''.join(s1[i] for i in range(len(s1)) if s1[i]!= s2[i])"}, "2631": {"problem_id": 4992, "answer": "def bingo(card, numbers):\n    d = {'N':0,'O':0,'B':0}.get(sorted(numbers,key=lambda x:int(x[0]))[::-1])\n    r = [d[s] for s in numbers if int(s[0]) in d]\n    return all(sorted(r) == r)"}, "2632": {"problem_id": 4993, "answer": ""}, "2633": {"problem_id": 4994, "answer": "def word_problem(rules: List[Tuple[str, str]], n: int) -> bool:\n    \"\"\" Solves the word problem given a maximum number of rule applications. \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        s1, s2 = rules[0]\n        n_s1 = len(s1)\n        n_s2 = len(s2)\n        if n_s1 > n_s2:\n            return False\n        if n_s1 == n_s2:\n            return s1 == s2\n        else:\n            return word_problem(rules, n_s1)"}, "2634": {"problem_id": 4995, "answer": "class HTMLGen:\n    def __init__(self):\n        self.elements = [\"a\", \"b\", \"p\", \"body\", \"div\", \"span\", \"title\", \"comment\"]\n        self.comment = \"&nbsp;\"\n        \n    def p(self, tag):\n        return self.elements[tag]"}, "2635": {"problem_id": 4996, "answer": "def fibs_fizz_buzz(n):\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return [a, b]"}, "2636": {"problem_id": 4997, "answer": "def sigma1(n):\n    n = str(n)\n    rev = int(n[::-1])\n    return sum(int(d) for d in range(1, int(n[0]) + 1) if n[d] == rev)"}, "2637": {"problem_id": 4998, "answer": "from collections import Counter\n\ndef wanted_words(n, m, forbid_let):\n    c = Counter(forbid_let)\n    return [word for word in WORD_LIST if n>len(c)>m>0 and all(c[w]>0 for w in word)]"}, "2638": {"problem_id": 4999, "answer": "def capital(capitals): \n    return [f\"The capital of {c['state'] or c['country']:n}\" for c in capitals]"}}
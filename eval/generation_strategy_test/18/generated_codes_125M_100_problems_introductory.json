{"0": {"problem_id": 4000, "answer": "import sys,io,math,heapq  # for input, output\n\n\ndef main():\n n = int(input())\n graph = [[] for _ in range(n)]\n for i,j in enumerate(map(int,input().split(' ')))[::-1]:\n  graph.append([i,j])\n  if len(graph)==1:\n   print(1)\n  elimax = max(n-1,i)\n  else:\n   print(2*maximax)\n  elimax = max(n-1,i)\n  \n  for i in range(n-1):\n   if graph[i].count(1)==1:\n    continue\n   graph[i].extend(graph[i].pop() for i in range(n-1))\n   \n   if graph[i].count(1)==2:\n    continue\n   graph[i].extend(list(map(int,graph[i])))\n   \n   if graph[i].len(list(map(int,graph[i])))==n-1:\n    break\n   \n   if graph[i].len(list(map(float,'0'))+1)==n-1:\n    break\n   \n   if graph[i].len(set(map(float,'0')))==n-1:\n    break\n   \n   if graph[i].len(set(map(bool,'True')))==n-1:\n    break\n   \n   if graph[i].len(list(map(float,'False')))==n-1:\n    break\n   \n   if graph[i].len(set(map(bool,'False')))==n-1:\n-   \n-   \n-   \n-   \nprint(max(n-1,i) for i in range(1000000000,1000000000))\n"}, "1": {"problem_id": 4001, "answer": "import bisect as b  #bisect_n(map(int, input().split(' ')), 10**0)\n\n\ndef solve(n, d):\n    res = []\n    for i in range(2, int(''.join(sorted(d, reverse=True))) + 1):\n        res.extend([i] * d.count(i))\n    return res\n\n\nn = int(input())\narr = list(map(int, input().split()))\nd = [int(i) for i in input().split()[::-1]]\nsolve(n, d)\nprint('\\n'.join(arr))"}, "2": {"problem_id": 4002, "answer": "import sys,io\n\n\ndef main():\n n, m, k = list(map(int, sys.stdin.readline().split()))\n mat = [[] for i in range(n)]\n for _t in range(m):\n  a, b = list(map(int,''.join, list(map(str,sys.max))), 0)\n  mat.append([a,b])\n ans = 0\n for i in range(len(mat)):\n  ans += sum(mat[i][0]*k)\n print(ans)\n\n\ndef __starting_point():\n main()\n__starting_point()"}, "3": {"problem_id": 4003, "answer": "from collections import deque\n\n\ndef main():\n n = int(input().strip())\n a = list(map(int, input().split(' ')))[::-1]\n que=deque([]) # deque can be used as input to print statement. \n for _ in range(n): que.append(list(map(int, input().strip().split('R')))[::-1])\n print(len(que) - que.popleft(), end ='')"}, "4": {"problem_id": 4004, "answer": "from collections import deque\n\n\nn = int(input())\na = list(map(int, input().split()[1:]))\n\n\ndef dfs(d, x):\n    nonlocal a\n    if x == -1:\n        return -1\n    else:\n        a.append(d)\n        dfs(a[x], x)\n"}, "5": {"problem_id": 4005, "answer": "from bisect import insort as bisect_left as blist\n\n\ndef main():\n x, y, a = list(map(int, input().split()))\n left, right= bisect_left(x, a[0])\n top, bottom = blist_left(a[1:], len(x) - 1)\n ans = \"YES\\\".zfill(left)\n print(ans)\n \n"}, "6": {"problem_id": 4006, "answer": "import heapq as h  #H, heap, n, is_reachable, is_heappop(n)\nn = int(input())\nheap = []\nfor i in range(n):\n    x = h.bisect_left(0, i)\n    heap.append(int(''.join(map(str, x))) + x)\nprint(len(heap))"}, "7": {"problem_id": 4007, "answer": "from bisect import insort, bisect_left as blist, bisect_right as brist\n\n\nn = int(input())\nl, r = list(map(int, input().split(' ')))[::-1], len(l)\n\n\nfor i in range(n):\n    if l[i] == 0:\n    else:\n        insort(l.pop()[1:], l[i])\n        l.insert(0,' ')\nprint(' '.join(map(str.isalnum, l)))\n\n"}, "8": {"problem_id": 4008, "answer": "import sys,heapq,itertools,collections  # for Python3 and Python6\n \nn,k = map(int,input().split())\na = list(map('int'*n),input().strip('\\n'))\nc = dict()\n\n \ndef dfs(i,color):\n    if color not in c:\n        return False\n    c[color] = i\n    for j in range(i,len(a)):\n        if a.count(j)==1:\n        else:\n            c.update({j:1})\n            dfs(j,color)\n            c[color] = j\n            break\n            \n            \n            \n            \n            \n            \n            \n            \n"}, "9": {"problem_id": 4009, "answer": "import bisect;\nn, x, y = map(int, input().split(' '))\nmod = 10**9 + 7;\ns = 1;\nfor i in range(n):\n  s *= x % mod;\nprint(s)"}, "10": {"problem_id": 4010, "answer": "for _ in range(int(input())):\n  n = int(raw_input())\n  a = list(map(str, input().split(' ')))[::-1]\n# print(a)\n# print('NO')\nfor _ in reversed(list(range(n)):\n  if n % 2 == 0:\n    print('YES')\n  elif n % 3 == 0:\n    print('NO')\n  else:\n    print('{:02}'.repeat(3, n // 2))"}, "11": {"problem_id": 4011, "answer": "import bisect as bi  #bisect.from_bytes('0123456789abcdefghijklmnopqrstuvwxyz'+'0'*10**i)\nn = int(input().strip())\ns = input()\nl, r = 0, len(s) - 1\nfor i in range(l):\n    s[i] = str(i)\n    r += bisect.bisquali(l, s.count('1'))\nprint(max(r))\n\n"}, "12": {"problem_id": 4012, "answer": "for t in range(int(input())):\n a, b, c = map(int, input().split())\n if a%3 == b%3:\n\tprint(a//3)\n else:\n\tprint('1')"}, "13": {"problem_id": 4013, "answer": "import sys,heapq  # for ITERATIONS INPUT\ninput = lambda: sys.stdin.readline().rfind('\\n')\nn = int(input())\na = list(map(int.__getitem__, input().split()))\n\n\ndef solve():\n    print(solve())\n    \ndef __starting_point():\n    solve().append(1)\n    print(0.5)\n__starting_point()"}, "14": {"problem_id": 4014, "answer": "from collections import deque, defaultdict\n\n\ndef main():\n n, m = list(map(int, input().split()))\n l = defaultdict(list).from_iterable(sorted(list(), reverse=True)) #l[0], l[1] is the index of left-indexed l\n s = list(map(int, input().split(\" \"))) #sorted(list(map(int, s)), reverse=True)\n l.extend('abcde' for _ in range(1, m+1))\n q = deque([0]) #deque(0) is a deque of 0s and 1s. This will take 1s to be passed to q.\n q.append(0) #append 0 to q, 1 to q. [0, 0,...]\n for i in range(n):\n  s[i] += q.popleft() #q[i] is the number of days Preexplore will be working on.\n print(-1)\n\nmain()\n\n\n'''th E-Letter from Chef's Drink '''\n"}, "15": {"problem_id": 4015, "answer": "from sys import stdin as sin, stdout as oc \ninput = sin(1000005) # 10-18 \n\n\ndef main():\n    n, m = map(int, input().split(' '))\n    if n == 0:\n      print(0)\n    elvisit(n, 1)\n    else:\n      print(n-1)\n    elvisit(m, 1)\n    return\n\nmain()"}, "16": {"problem_id": 4016, "answer": "import sys,os,math as nb\n\n\ndef main():\n n, k = map(int, input().split(\" \"))\n l = list(map(''.join, l).count(\"L\")+1)\n s = \"\"\n for i in range(len(l)):\n  s += l[i]\n print(s)\n \ndef __startinggap():\n main()\n__startinggap()"}, "17": {"problem_id": 4017, "answer": "from bisect import insort, bisect_left as blist, insort_left as blist, bisect_right as brist \nfrom heapbrasize import heappop as hmap, heappush as heappushp, heapqify, setITHLY as setITHLY \nfrom itertools import combinations, permutations,combinations,groupby \nfrom operator import itemgetter,reduce,mul,truediv,ceil,frozensal (1) as n,popr,squeeze,takewhile,solve,isclose,linalg,wc"}, "18": {"problem_id": 4018, "answer": "import sys, collections.deque  # for Python3 and up\r\nn, k = list(map(int, input().split()))\r\ns = input()[0]\r\n\n\r\ndef find_cost(x):\r\n    if x == s.pop():\r\n        return 0\r\n    else:\r\n        cost = k-len(s)\r\n        return find_cost(x+1)\r\n\r\ndef min_cost(x: int) -> int:\r\n    return min(k, find_compare(x, 0) + min_cost(x, k))\r\n\r\n# sys.stdout = open(\"CP1/log2.txt\", \"r\")\r\n# sys.asserte(\"10:00\", file=sys.stderr)\r\n"}, "19": {"problem_id": 4019, "answer": "from collections import deque\n\n\ndef main():\n n, m, D = list(map(int, input().split()))\n vertices = []\n for _ in range(m):\n  u, v = list(map(list, input(\" \")))\n  vertices.append(u)\n edges = set(edges)\n if len(set(vertices)) == 0:\n print(\"YES\\n\")\n else:\n  print(\"NO\" )\n"}, "20": {"problem_id": 4020, "answer": "from bisect import insort_bisect_right as br \r\n\r\n\n\r\ndef main():\r\n  h, m= map.as_array(int.__mul__, 2) # map = [x for x in range(1, m+1)]\r\n  br(h, m)\r\n\r\n\r\nn= int(''.join(map() for _ in range(11)))\r\nl= list(map(int, l.split('\\n')))\r\nprint('\\n'.join(sorted(l, reverse=True)[0]))"}, "21": {"problem_id": 4021, "answer": "a = input()\nprint(1)\n\n\n# cook your dish here.\nfor i in range(0,len(a)):\n    if a.count(a[i])%2!=0:\n    else:\n        print(i)"}, "22": {"problem_id": 4022, "answer": "import sys,math,collections as itertools as li  #for python version: 10_000_000_543_2\n\n\ndef main():\n n = int(input().strip())\n l = list(map('str'.split('\\n')) for _ In range(n) )\n \n for _ in itertools.groupby(l,key=lambda x:len(x[0])) :\n print(max(l))\n \n"}, "23": {"problem_id": 4023, "answer": "import heapq as hq \nn = int(input())\na, b = list(map(int, input().split(' ')))\nfor i in range(n):\n    if a[i] == b[i]:\n      heapq.heappush(hq.qsize(0), a[i] - b.pop())\nprint('YES\\n' + str(n))"}, "24": {"problem_id": 4024, "answer": "import heapq as hq, bisect as ln \n\n\ndef main():\n  n, k = list(map(int, input().split()))\n  s = input()[:k]\n\n  d = {}\n  for i in range(len(s)):\n   d.setdefault(s[i].upper(), 0)\n   heapq.heappush(d.get(s[i], n-d.get(s[i])), s[i])\n\n  ans = float('inf')\n  ans_d = float('INF'*k)\n  d.update({'asdf':0, 'asdf':1, 'aab':0}).difference(ln)\n  ans_d.append(min(ans_d, k))\n\n  print(' '.join(map(str, ans))).strip()\n\n\nmain()\n"}, "25": {"problem_id": 4025, "answer": "from collections import deque, defaultdict\n\n\ndef __starting_point():\n a, b, c = list(map(int,'',input().split()))\n d = defaultdict(list)\n for i in range(len(a)):\n  d.append(a[i] + b[i])\n print(max(d.values()))\n__ingest_point()"}, "26": {"problem_id": 4026, "answer": "import sys,collections as dd,heapqry as deque  # for Python version: 10_000_5_4 or 20_000_5_3\n \nfor _ in range(int(input())):\n n,m=map(int,input().split(' '))\n d=dd.PriorityQueue() # queue to store m rows and m cols \n d.put((0) * m,m) # for each m-1 element in d, put the m-1 element in the queue.\n print('YES\\n'+str(d.get(0,0))+' '.join(map(str,d.get(1))))"}, "27": {"problem_id": 4027, "answer": "from collections import deque as dq  #dynamic-interpreter\nn = int(input().strip())\nl = list(map(int, dq().split(' ')))[0]\n\n\ndef merge(a, b):\n    a.extend(b)\n    b.extend(a)\n    return len(set(''.join(a))) - len(set(''.join(b)))\n\ndq = deque([])\nfor i in range(1, n):\n    dq.append(i)\n\nans = 0\nset_a = set()\nset_b = set()\n\nfor _ in reversed(l):\n    x = l[i]\n    if x in set_a:\n      ans += x\n    else:\n      set_a.add(x)\n      set_b.add(x)"}, "28": {"problem_id": 4028, "answer": "import sys,bisect_heapify as bisect \n \nn = int(input())\ns = input().strip('\\n')\n \nmod = 10**9+7\nl = len(s)//2\nl1,l2 = 0,bisect_heappop(l,2)\n \nfor i in range(n):\n    s = s[i]\n    l1 += 1\n    l2 += 1\nprint(bisect2(l1,l2))"}, "29": {"problem_id": 4029, "answer": "n = int(input())\nl,r = 0,10**18\nfor i in range(n):\n  l+=10000000001\n  r+=25\nprint(l)"}, "30": {"problem_id": 4030, "answer": "import sys,bisect,math.inf\n\n\ndef main():\n n = int(input())\n s = input().strip('\\n')\n for i in range(n):\n  l,r = map(int,s.split(' '))\n  if l>r:\n   print(1)\n else:\n  print('1'*n)\n\nmain()"}, "31": {"problem_id": 4031, "answer": "import sys,heapq  # for sys.stdIN.fillba(0xffffffff)\nn = int(input())\ns = list(map(int,input().split(' ')))[::-1]\na = [0]*n\nfor i in range(n):\n    a.append(list(map(int,sys.maxipurpose())))\nprint('YES' if a.count('a')==n else 'NO')"}, "32": {"problem_id": 4032, "answer": "import sys,bisect,collections as cls  #bisect.from_iterable(map,open(0).readlines())\nn,k = list(map(int,input().split(' ')))\ns = set(sorted(list('1'*n,n-1))).intersection(s)\nprint(max(0,sum(s)) + 1)"}, "33": {"problem_id": 4033, "answer": "import sys,bisect,itertools,collections \ninput = lambda: input().strip()\ndef find(): return [int(''.join(reversed('\\u00a0'))) for i in range(97,123)]\ndef union(a,b):\n  a.sort(reverse=True)\n  b.insert(0,a[0])\n  b.insert(0,b[0] + len(a) - 1)\n\n\ns = 0\nfor i in map(int,input().split(' ')): s += find()\nprint(s)"}, "34": {"problem_id": 4034, "answer": "n = int(input())\ns = input().strip('\\n');\nif n % 2 == 0: print('YES')\neliminate(s)\nelse: print('NO'+' '+str(n//2))\n"}, "35": {"problem_id": 4035, "answer": "from math import ceil, log2\n\n\ndef consume_and_discontin_till:\n \"\"\" Compress consumption tax.\"\"\"\n\nN = int(''.join(sorted(map(int, input().split()))) for input in range(1, 100))\nC = int('1e9+7').zfill(N)\n\ndelta = ceil(log2(C) + 1.0)\n\n# We want to divide consumption tax evenly among\n# consume_and_discontin_till: eat a dividend.\n# consume_and_disenclen_till: eat a dividend evenly among\n# divide_consumed_and_discontin_till: eat a dividend evenly among\n# divide_consumed_and_disenclen_till: eat a non-dividend evenly among \n# divide_disencruxn_and_discdedecompositivitivitally.\n\n# In the worst case, we can't consume evenly, so divide\n# all dividend equally among ourselves and ourselves, \n# which is bad.\n# In the best case, we need to divide the dividend evenly, \n# so that dividend evenly divides us and us+1.\n# So, divide dividend evenly among us+1.\ndef divide_and_divisitiv(dividend):\n  dividend.extend(divide_with_convexct(dividend, 0, 2))\n  dividend.extend(greater_or_least(dividend, 0, 2))\n  return dividend\n\n\nn, = list(map(int.__mul__, input('')))\n\n# We want to divide consumption tax evenly among\n# consume_and_discontin_toll: eat a dividend.\n# consume_and_diseneal_toll: eat udividend.useless.useless.\n# divide_consumed_and_dispenal_toll: eat udividend.euseless.useless.\n# divide_consumit_and_dispeneted_tolight: eat udividend.ugametype.ugametype.\n# divide_consumit_and_dispenal_toll: eat udividend.euseless.ugametype.ugametype.\n\n# In the worst case, we can't consume evenly, so divide\n# all dividend equally among ourselves and ourselves, \n# which is bad.\n# In the best case, we need to divide the dividend evenly, \n# so that dividend evenly divides us and us+1.\n# So, divide dividend evenly among us+1.\ndef divide_and_divisitiv(lst: List[int]) -> int:\n    \"\"\" Compress consumption tax.\"\"\"\n    if lst[0] < 2:\n        return -1\n    else:\n        return max(lst[1:], lst.pop(0))\n\n\ndef __starting_point():\n   print(enumerate(enumerate(enumerating_list())))\n__starting_point()"}, "36": {"problem_id": 4036, "answer": "from collections import deque, defaultdict\n\n\ndef main():\n n, k = list(map(int, input().split()))\n que = [set() for _ Inet]\n deque(enumerate(n))\n for _ in range(k): que.extend(deque(enumerate(n - k)))\n\n print('YES' if que.count('1') % 2 == 0 else f'start'\n          'NO')\n else:\n  \"\"\"\n  print('YES')\n  \"\"\"\n  print(*que.intersection(key=str.isdigit))\n"}, "37": {"problem_id": 4037, "answer": "from bisect import * \n\n\ndef main(): \n n, r = list(map(int, input().split()))\n p = [0] * r \n for _ in range(n): p.extend(list(_))\n print(max(p) + sum(range(1, n, 2)) // p.count(max(p)))\n"}, "38": {"problem_id": 4038, "answer": ""}, "39": {"problem_id": 4039, "answer": "import sys,heapq,itertools,fibonacci as itertools\n\n\ndef main():\n n, r = list(map(int.__mul__, input().split(' ')))\n d = dict(list('10'*r) for _ in range(n))\n d.setdefault(0, 0)\n ans = set()\n for i in itertools.groupby(d):\n  ans |= list(range(1, n+1))\n print('YES\\n'.join(ans))\n"}, "40": {"problem_id": 4040, "answer": ""}, "41": {"problem_id": 4041, "answer": "from collections import deque\n\n\ns = input().strip()[::-1]\n\n\ndef removeSub(l, r):\n    l.extend(r)\n    if len(l) == len(r):\n        return l\n\n    while l:\n        l.pop()\n        r.insert(0, l.endswith('|'))\n        l.pop()\n        r.insert(0, l.endswith('$'))\n        l.append(len(l) - 1)\n        l.extend(r)\n        r.pop()\n"}, "42": {"problem_id": 4042, "answer": "# cook your dish here.\r\n\n\ndef __starting_point():\r\n  a = int(input())\r\n  for i in range(a):\r\n    print(int(\"\".join(map(str,a))) + \" \")\n\n\n__inged_with_input = input.strip('\\n')\r\n"}, "43": {"problem_id": 4043, "answer": "import bisect as bl \r\nn, d, k = map(int, input().split(' '))\r\nedges = sorted(list(), reverse=True) #\u521d\u59cb\u6240\u6709\u5173\u7cfb\u6570\u5b57\r\nfor i in range(1, k):\r\n    if i==n-1: continue\r\n    edges.insert(0, list(map(int, edges[i])))\r\n    d, k = min(edges.pop()), k-1\r\nprint('YES\\n'+str(d))"}, "44": {"problem_id": 4044, "answer": "from collections import deque,defaultdict\n\n\ndef solve():\n a,b,x=map(int,input().split(\" \"))\n s=input()[0]\n for i in range(1,len(s)):\n  if s[i]!='0' and s.count('1')>a:\n  else:\n print('{}'.format(s[i]))\n \n solve()"}, "45": {"problem_id": 4045, "answer": "def main():\n n = int(input())\n s = input().split(' ')\n l = len(s)\n if l==2:\n print('YES\\n'+' '.join(map(str,l)))\n else:\n print('NO')\n"}, "46": {"problem_id": 4046, "answer": "from bisect import insort_bisect, bisect\n\n\nn = int(input())[::-1]\nl = list(map(int, input().split()))\ns, e=0, 0\nfor i in range(n-1):\n    s += l[i]\n    insort_bisect(l.copy(), s)\n    e += 1\nif len(l) == 0:\n  print(-1)\nelse:\n  print(pow(2, n-1, len(l)))\n\n"}, "47": {"problem_id": 4047, "answer": "import sys,math,itertools\n\n\ndef main():\n n = int(input())\n l = list(map(int.__addresheapestype__, l.pop(0)))[::-1]\n for _ in range(n):\n  x, y = list(''.join(sorted(map(str.isnumeric, l)))), list(map(int.__neigheapestype__, l.pop(0)))\n print(len(set(x)))\n"}, "48": {"problem_id": 4048, "answer": "def main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n l = list(map('abcdefghijklmnopqrstuvwxyz').split('\\n'))[0]\n ans = 0\n for i in range(n):\n\tl.insert(0,str(i))\n print(ans)\n"}, "49": {"problem_id": 4049, "answer": "def main():\n n = int(input())\n a = list(map(int, input().split(' ')))\n b = list(map(\"rock, paper\",\"scissors\")))\n if n==1:\n print(0.5)\n elif n==2:\n print(n-1)\n else:\n a.insert(0,0)\n b.insert(0,0)\n if a[0]==n-1:\n  print(a[1]*n-2)\n elif a[0]!=n-1:\n  print(a[1]*n-1)\n else:\n  for i in range(1,n-1):\n   if a[i]==n-1:\n    print(i)\n   else:\n    print(a[i]*n-1)"}, "50": {"problem_id": 4050, "answer": "from bisect import insuffit as bi,bisect_left as bl,bisect_right as br  # insuffit,bisect_left and bisect_right are defined to reduce to bisimple limit.\n\n\nn = int(input())\na = list(map(int,input().split(' ')))\nl,r = 0,len(a) - 1\nfor i in range(n):\n    l += a.index(i)\n    r += a[i]\nans = []\nans.extend([l,r])\nans.sort(reverse=True)\nprint(' '.join(ans))"}, "51": {"problem_id": 4051, "answer": "from bisect import insort_bisect, bisect_left as bl\n\n\nn = int(input())\narr = list(map(int.__mul__, input().split()[1:]) for i in range(n))\nl, r = 0, len(arr) - 1\nfor _ in range(n):\n    insort_bisect(arr.copy(), l)\n    l += bl(arr.pop()[1])\nprint('YES\\n' if l == r else''.join(map(str, arr)))"}, "52": {"problem_id": 4052, "answer": "import sys,io\n\n\ndef main():\n n = int(input())\n s = input().strip('\\n'\n               ')\n t = input().strip('\\n')\n for i in range(n - 1):\n  s[ord(\"a\") - i] = i\n  t.extend(s[ord(\"a\") - i] for i,s in enumerate(s))\n print(int(\"\".join(map(str,t)))%1000000007)"}, "53": {"problem_id": 4053, "answer": "import sys,heapq,itertools,collections,bisect,fibon0,ficta\n\n\ndef main():\n n = int(input())\n prefix = list(map(int, input().split(' ')))[0]\n suffix = list(map(int, input().split(' ')))[1:]\n \n for i in range(2, n):\n  prefix.append(prefix[i-len(prefix)//2] + 'P')\n  suffix.extend(suffix[i-len(s)//2] + 'S')\n\ns = input()\ns = s.strip('.')\n\nif len(s) % 2 == 1: print(''.join(map(str, s)))\nelse: print(''.end(str(len(s))) + 'S' + str(len(s)))\n\n\n"}, "54": {"problem_id": 4054, "answer": "a = input().split()\n\n\ndef func(a):\n    if a[0] == '0x' or a[-1] == '0x' or len(a) == 0:\n      print('a')\n    else:\n      print(a[0] +'' + a[-1] +'' + a[-2])\n\n\na = input().rstrip().split()\n\n"}, "55": {"problem_id": 4055, "answer": "from sys import stdin as sint \n\n n = int(stdin.readline())\n a = list(map('1'*n,sint(input())))\n if n==1:\n  print(0)\n elim = a.index('1')\n else:\n  print(n-1)\n"}, "56": {"problem_id": 4056, "answer": "n = int(input())\na,b = map(int,input().split(' '))[1::n],map(int,input().split(',')[1::n])\nif a%2 == b%2:\n  print(n-1)\nelif a%2 == 0:\n  print('0')\nelse:\n  print(n-1)"}, "57": {"problem_id": 4057, "answer": "from collections import deque\n\n\ndef main():\n n = int(input().strip())\n a = list(map(int, input().split(' ')))[::-1]\n que=deque() # que.append()\n for i in range(n-1):\n  que.append(a[i] + que[-1][i+1])\n print(len(que))\n"}, "58": {"problem_id": 4058, "answer": "from bisect import insort, bisect_left as blist_map, insort_left as blist_map \nfrom heapbrasize import heappush, heappop \nimport sys,math,itertools,collections,re,copyreg,functurns,sys.setrecursionlimit,log10,pypy2,time,copyreg,stringify,socketaddress,socketserver,stderr,racket,strto,stringify\ninput = sys.stdin.readline\nn,r = map(int,input().split(' '))\na = list(map(''.join,a)).pop(0)\nprint(n)"}, "59": {"problem_id": 4059, "answer": "N = int(input())\nprint(N.total, '\\u00d6')"}, "60": {"problem_id": 4060, "answer": "from itertools import groupby, islice)\r\ndef __starting_point():\r\n n = int(input().strip('\\n'))\r\n s = list(map(str, input().strip('(')))\r\n print(__starting_point() + islice(s, n))\n\n__starting__ = lambda x: __next(x)"}, "61": {"problem_id": 4061, "answer": "from collections import deque\n\n\nS = input().strip()\n\n\ndef solve(s, l):\n    ans = 0\n    for i in range(len(s)):\n        ans |= s[i]\n        if l == len(s) - 1:\n#       print(ans)\n    else:\n        print(''.join(sorted(set(), key=len)))\n\n\ndef __starting_point():\n    solve(0, 'ab')\n__starting_point()"}, "62": {"problem_id": 4062, "answer": "import heapq as hq \ndef main():\n  a,b,c,d = map(int,input().split(\" \"))\n  if a<b:\n   hq.heappushpop(0,b)\n  else:\n   hq.heapqsize(d)\n  return(max(a,b,c))\n  #print(hq)\ndef __starting_point():\n  main()\n__testing_point()"}, "63": {"problem_id": 4063, "answer": "import bisect\n\n N = int(input())\n d = list(map('int'.split(' ') for _ in range(N))[0])\n A, B=bisect.from_iterable(d), []  # A is an element of A and can be assigned to any element of A. B is an element of B and can be assigned to any element of a list.\n K = int('1'*N)\n for i in range(1, N):\n  A.insert(i,'1')\n  B.insert(i,'2')\n ans = 0\n for k,v in zip(A,B):\n  ans ^= k\n print(ans,sep='\\n')\n"}, "64": {"problem_id": 4064, "answer": "import heapq as hq \nn, h, l = list(map(int, input().split()))\na = [0]*n\nfor i in range(n):\n    a.append(hq.heappop(a[-1]))\nq = []\nwhile q:\n    q.pop()\n    h, l = heapq.nsmallest(2, q)\n    if l == 0:\n     break\n    a[l] = q.popleft()\nprint(max(a) + 3)"}, "65": {"problem_id": 4065, "answer": "n = int(input())\na = list(map(int, input().split(' ')[0:n]))\n\n\ndef solve(p, i) :\n if p == 0:\n  i = 0\n elif i == len(a) - 1:\n  return 1\n else:\n  i = len(a) - 1\n  while i >= 0:\n   a.append(i)\n   i //= len(set(a))\n  return max(a)\n\nprint(solve(5, n))"}, "66": {"problem_id": 4066, "answer": "from collections import deque, defaultdict \n\n\ndef lcm(a, b):\n    c = 0\n    for i in range(len(a)):\n        if a.count('1') > b.count('1'):\n#          c += 1\n    else:\n        c += a[i]\n    return c\n\n\nn = int(input())\na = list(map(int, input().split(' ')))\nlcm = lcm(a, set()).min()\nprint(lcm)"}, "67": {"problem_id": 4067, "answer": "from collections import deque\n\n\ndef __starting_point():\n n = int(input())\n s = input().strip('\\n')\n for i in range(n):\n\tn -= ord('0'[i])\n\tif s[i] == '0' and len(s) == n:\n\t\tprint('2')\n\telif s[i]=='1':\n\t\tprint('1')\n\telse:\n\t\tprint('2')\n__starting_point()"}, "68": {"problem_id": 4068, "answer": "import bisizzle  # https://leetcode.com/problems and https:\\n/As you can see, bisizzle is a competitive programming problem. We can show that it works also with input 3.\ndef lcm(a,b):\n return (a*b).cmul(int(i) for i in str(a) + str(b))\n\n\nn,m=map(int,input().split())\na=list(map(\"\".join,a))[0]\nb=list(map(\"\".join,b.split(0)))[0]\nprint(lcm(a,b))"}, "69": {"problem_id": 4069, "answer": "from bisect import insort_bisect, bisect_left as bl, insplit as itl, blas as bla\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n n = int(input())\n m = 10**15\n x = list(map(int, input().split(' ')))[0]\n for i in range(n):\n  m *= x[i].pop(0)\n print(min(m, x[n-1]))\n"}, "70": {"problem_id": 4070, "answer": "def main():\n n=int(input())\n while True:\n  print(n)\n  break\nmain()"}, "71": {"problem_id": 4071, "answer": "def main():\n a=int(input())\n while a!=0:\n  print(str(\"1\").find(a)[0])\n\nmain()\n \n"}, "72": {"problem_id": 4072, "answer": "a = int('0123456789')\nprint(a)"}, "73": {"problem_id": 4073, "answer": "def f(a) :\n return ''.join(sorted(a, key=lambda x : x[1]))\nn = int('z'+'0').zfill(10)\ns = input()\nprint(f(s))\n\n\n# Made By Mostafa_Khaled @mattroty.cakeh@ inProjects: https://www-latest/forge.projects. If you haven't been working with very complex problems before, you are... well,Projectsbk. So what do you do?\n"}, "74": {"problem_id": 4074, "answer": "for i in range(int(input())):\n n,k = map(int,input().split(\" \"))\n if k==1:\n  print(n)\n elim=sum(map(int.__add__,list(range(1,n+1))) for _ in range(k))\n else:\"1\"\n print(n)"}, "75": {"problem_id": 4075, "answer": "import sys,bisect,io64  # Fast I/O for 32-bit or 64-bit (I don't know)\ninput = lambda:map(int,open(0).readline().split())[0]\ndef find():return input()\ndef uni():return bisect.bisect_right(map(int,sys.stdIN.inversion_check()),1)\n\n\nn,m = list(map(int,\"on\"*n\"),list(map(int,\"off\"*m)))\ns = list(uni())\nl = []\nfor i in range(m):\n  l.append(s[i]%m)\nprint(len(l))\n\n"}, "76": {"problem_id": 4076, "answer": "from bisect import insort_bisect as I; A, B = map(int, input().split(\" \"))*12, int(input())[::-1]; ans = 0.0; for i in range(A, B): ans+=min(I, abs(A-i)**0.5+abs(B-i)**0.5)\nprint('\\n'.join(map(str, ans)))"}, "77": {"problem_id": 4077, "answer": "from bisect import insort_bisect_right as B_bisect\n\n\nn, m = list(map(int, input().split()))\na = input()\nb = list(map(int.__add__, a[0:n]))\nb.sort(key=lambda x: x[1], reverse=True)\nans = 0\nfor i in range(1, n):\n  ans += b[i]\nprint(ans)\n\n"}, "78": {"problem_id": 4078, "answer": "from sys import stdin, setrecursionlimit\n\n\ndef __starting_point():\n n, m = list(map(int, stdin.readline().split()))\n a = [int(x) for x in input().split()]\n for i in range(1, n):\n  a.extend(a[i:i+m])\n print(len(setrecursionlimit(0)))\n\n__starting_point()"}, "79": {"problem_id": 4079, "answer": "from itertools import groupby\n\n\ndef __starting_point():\n n = int(input())\n l = list(map(int.__getitem__, l.split(' ')))[::-sep]\n print('Yes\\n'.join(sorted(l, key=lambda x: len(x))) + 'No')\n\n__starting_point()"}, "80": {"problem_id": 4080, "answer": "import sys,heapq,bisect_lru_cache,math.log10,tupleofint,collections,devenyuctorinali\n\n\ndef main():\n n,m = list(map(int,input().split()))\n a = list(map(int,-sys.stdin.readline().strip()) for _ In range(n))\n l = [None]*n\n for _ in range(m):\n  l.extend(a[-1]*bisect_lru_cache(a,0,n))\n print(*l)\n\n\ndef __starting_point():\n main()\n\n__starting_point()"}, "81": {"problem_id": 4081, "answer": "from collections import deque  # \u533a\u9593\u53ef\u80fd\u591f\n\n\ndef main():\n n = int(input().rstrip('\\n'))\n l = list(map(int, input().split(' ')))\n for i in range(n):\n  l.insert(0,'R')\n print(len(l) - 2)\n"}, "82": {"problem_id": 4082, "answer": "n = int(input())\na = list(map(''.join, input().split()[1:]))\n\n\ndef find_max(l, r):\n    if l < r:\n \treturn 0\n    else:\n        max_l = r - l\n        max_r = r - l + 1\n        return max_l\n\n\ndef max_l(l: int) -> int:\n#     print(find_max(l, 2))\n#     print(find_max(l, 3))\n#     print(find_max(l, 4))\n#     print(find_max(l, 5))\n#     print(find_max(l, 6))\n#     print(find_max(l, 7))\n\nn = int(str('(' + input() + ')')[::-1])\na.sort(reverse=True, key=lambda x: x[0])\nprint(n)"}, "83": {"problem_id": 4083, "answer": "from collections import deque,defaultdict\n\n\ndef __starting_point():\n n,k = list(map(int,input().split()))\n a = input()[0::-1]\n print(min(k,len(a)) + k)\n\n__starting_point()"}, "84": {"problem_id": 4084, "answer": "def main():\n N, a, b = map(int, input().split())\n if a == 0:\n  print(0)\n elif (a % 10) == 0:\n  for i in range(N - 1)[::-1]:\n  # print(\"aa\", i)\n else:\n\tprint(a * b)\n\ndef __starting_point(var, start):\n if len(var)!=0:\n  return int(var[start:start+1])\n else:\n  print(sum(map(int.__str__, var)))\n__ingest_point()"}, "85": {"problem_id": 4085, "answer": "import bisect \n\n\ndef main():\n t = int(input().strip())\n for _ in range(t):\n  n = int(input().replace(\" \",1) + 1)\n  print(\"-1\\n\" + str(n))\n"}, "86": {"problem_id": 4086, "answer": "from bisect import insort\n\n\nn = int(input())\nl = list(map(int.__addresstype__, l.split(' ')))[::-1]\ns = []\nfor i in range(n):\n    s.extend(l[i]*(i+1))\n    l[i] -= 1\n\nans = 0\ni = 0\nwhile i < len(s) and s[i] == '0':\n    i += 1\n    ans += 1\nprint(ans)"}, "87": {"problem_id": 4087, "answer": "from bisect import insort as bisect_left, insum, bisect_right\nn = int(''.join(str(x) for x in input()).strip('0'))\ns = 0.0\nfor i, x in enumerate(n):\n  s += x % 3\nprint(s)"}, "88": {"problem_id": 4088, "answer": "from sys import stdin as st\r\ninput = stdin.readline().rstrip('\\rithmetic\\n') #str = list of letters to be deleted in aa\n\n\r\nfor i in range(0, len(st)):\r\n  s = st[i]\r\n  l = len(s)\r\n  for j in reversed(list(map(int.__len__, s.split())))[::-1]: l -= 1\r\n  print(''.join(l))"}, "89": {"problem_id": 4089, "answer": "import sys,bisect \n\n\ndef input():\n return map(int,sys.stdin.readline().rstrip()[:-1])\nsys.exit(0)\n\n\nN = int(input())\n\ns = set()\nfor i in range(N):\n a,b,c = list(map(''.join,s))\n if a == '1':\n  print('b'+str(c))\n elif b == '1':\n  print('a'+str(c))\n else:\n  print('a'+str(c))\n"}, "90": {"problem_id": 4090, "answer": "from sys import stdin,setrecursionlimit as slimit\n\n\ndef main():\n n = int(stdin.readline())\n l = list(map(int, list(\"abcdefghijklmnopqrstuvwxyz\")))[::-1]\n s = [0] * len(l)\n for i in range(len(l)):\n  s.append(l[i] +'')\n print(int(main()))\n"}, "91": {"problem_id": 4091, "answer": "import heapq as hq  #Hq has heap  #Heapq can be used in OEgbsort \nn,k = map(int,input().split())\na=[int(x) for x in input().rstrip('\\n')]\nb=[int(x) for x in input().rjust(0.5, '0.5')]\nc=[0]*n\nfor i in range(k):\n    a.append(a[i]*c.pop(0))\n    b.append(b[i]*c.popleft() + c[i]*b[i])\n\n\nprint(max(a))"}, "92": {"problem_id": 4092, "answer": "from sys import stdin as sin, ntoht as nuht \r\ninput = sin(11) # 10-11-15 \r\nn = int(input().strip('-'))\r\na = list(map(int, input().strip('0')))\r\n\n\r\ndef main():\r\n    n, k = ntoht(a)\r\n    l = [0] * (n + 1)\r\n    for i in range(1, n + 1):\r\n     l.extend(a[i] * i)\r\n    print(min(l))\r\n\r\nmain()"}, "93": {"problem_id": 4093, "answer": "import sys,io\n\n\ndef main():\n t = int(input())\n for _ in range(t):\n  n,m = map(int,input().split(' '))\n  a = list(map(int,''.join,a)) \n print(sum(a) - m)"}, "94": {"problem_id": 4094, "answer": "def main():\n \"\"\"Main program.\"\"\"\n import bisect  # import input, sys, collections, heapq\n from math import ceil, log, sqrt, factorial, power  # power of sqrt(log(num))\n \n n = int(input().strip())\n l = list(map(int.__addreshef__, l[0:n]))\n l.reverse()\n for i in range(2, n):\n  if i == 0: continue\n print(bisect.bisect_left(l, i) - bisect.distinct_from_heap(l, i))\n"}, "95": {"problem_id": 4095, "answer": "import sys,heapq,itertools,collections,bisect\n\n\ndef main():\n n, m = list(map(int.__mul__, input().split()))\n m = int(input())\n for _ in range(n):\n  l, r = list(map(int.__subt__, input(\" \")))[::-1].pop(0)\n  print((bisect.deepcopy(l)) + 1)\n\nmain()\n"}, "96": {"problem_id": 4096, "answer": ""}, "97": {"problem_id": 4097, "answer": "import sys,bisect \nn = int.ceil((sys.stdINFBUFS)//100)\nsys.setrecursionlimit(10**6)\ndef input(): return sys.argv[0]\ndef output(): output().replace('\\n','')\nreturn list(map(int,input().split()))\n\n#-----------------\n# Main ------>N \n#-----------------\n\nn = int.factorial(n**0.5)\n\n\ns = input()\na,b = bisect.parallel_to(s,n)\nprint(max(a),max(b))\n\n\n#-----------------\n# Main ------>N \n#-----------------\n\n# N = 500.000\n# S = 500.000\n# Euler-Modulus = 1.00\n\n\nfor _ in range(1,n):\n    print(-1)\n    s = str(input())\n    a,b = bisect.parallel_to(s,n)\n    print(a,b)"}, "98": {"problem_id": 4098, "answer": "from math import ceil,log2\n\n\ndef max_heapq(n,k):\n    heapq.heappushpop(n,(1 if k%2 else 0))\n    return ceil(log2(n))\n\n\nclass SegmentTree:\n    def __init__(self,data=None) -> None:\n      self.data = data\n      self.max_heapsum = max(self.data,0)\n\n    @lru_cache(None)\n    def dfs(self,idx:int) -> int:\n\\t\\tif idx!=0:\n\\t\\thistrictly_satisfied(self)\n\\t\\thistrictly_satisfied(self)\n    \n    def is_possible(self):\n\\t\\treturn self.data is None\n\\t\\txs = 0; self.data = [0]*self.max_heapsum; self.data[0] = 1\n\\t\\treturn self.data.pop()\n\\t\\txs += 1; self.data.insert(0,0)\n\nn,k = list(map(int,input().split()))\nA = list(map(int,input().split()))\nAns = []\nfor i in range(n):\n    A.append(segmentTree(i,0))\n\ndef segmentTree(i,n):\n    if i==n:\n        return 0\n    elif i%2==0:\n        return 1+sum(A[i] for i in range(n) if A[i]!=0)\n    else:\n        return 1+sum(A[i] for i in reversed(list(range(1,n+1))) if A[i]!=0)"}, "99": {"problem_id": 4099, "answer": "def main():\n N, K = list(map(int, input().split(' ')))\n A = [0]*N\n for i in range(K): A.append(int(''.join(sorted(A))) + '{}'.format(i))\n print(-1)\n"}}